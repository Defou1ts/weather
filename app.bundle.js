(()=>{"use strict";var t,n={519:(t,n,e)=>{var r,i,a,o,c=e(246),u=e(634),l=e(780),s=e(536),d=e(924),p=d.ZP.button(r||(a=["\n\tmin-width: ","px;\n\tmin-height: ","px;\n\n\tborder-radius: ","px;\n\n\tbackground-color: ",";\n\tcolor: ",";\n\n\tfont-size: ","px;\n\n\tdisplay: grid;\n\talign-items: center;\n\tjustify-content: center;\n\tcursor: pointer;\n\n\ttransition: ",";\n\n\t&:hover {\n\t\ttransform: scale(1.01);\n\t\tbackground-color: ",";\n\t}\n"],o=["\n\tmin-width: ","px;\n\tmin-height: ","px;\n\n\tborder-radius: ","px;\n\n\tbackground-color: ",";\n\tcolor: ",";\n\n\tfont-size: ","px;\n\n\tdisplay: grid;\n\talign-items: center;\n\tjustify-content: center;\n\tcursor: pointer;\n\n\ttransition: ",";\n\n\t&:hover {\n\t\ttransform: scale(1.01);\n\t\tbackground-color: ",";\n\t}\n"],Object.defineProperty?Object.defineProperty(a,"raw",{value:o}):a.raw=o,r=a),(function(t){return t.theme.width[0]}),(function(t){return t.theme.height[0]}),(function(t){return t.theme.borderRadius[1]}),(function(t){return t.theme.colors.black}),(function(t){return t.theme.colors.white}),(function(t){return t.theme.fontSize[2]}),(function(t){return t.theme.transition.light}),(function(t){return t.theme.colors.lightBlack})),f=function(){return f=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},f.apply(this,arguments)},h=function(t){var n=t.children,e=t.onClick;return(0,c.jsx)(p,f({"data-test-id":"button",onClick:e},{children:n}))},g=e(378),y=e(278),m={clientId:null!=="126193467251-3km52qm9oejptlll0gkgefs1kceu9kni.apps.googleusercontent.com"?"126193467251-3km52qm9oejptlll0gkgefs1kceu9kni.apps.googleusercontent.com":"",apiKey:null!=="AIzaSyB3uVQBS8rSzchO6oXWV6Mx45KtYwEoN9U"?"AIzaSyB3uVQBS8rSzchO6oXWV6Mx45KtYwEoN9U":"",scope:"https://www.googleapis.com/auth/calendar.events",discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"]},b={calendarId:"primary",timeMin:(new Date).toISOString(),showDeleted:!1,singleEvents:!0,maxResults:10,orderBy:"startTime"};!function(t){t.IDLE="idle",t.ERROR="error",t.SUCCESS="success",t.LOADING="loading"}(i||(i={}));var w,x={hour:"numeric",minute:"numeric",second:"numeric"},v={weekday:"long",month:"long",year:"numeric",day:"numeric"},j={weekday:"long"},O={hour:"numeric",minute:"numeric"};!function(t){t[t.SMALL=16]="SMALL",t[t.MEDIUM=32]="MEDIUM",t[t.LARGE=64]="LARGE"}(w||(w={}));const S=e.p+"d7a3523274339e38d70487e6204c5ac1.jpg",k=e.p+"33a640e8b41480258625a8e839dae962.jpg",P=e.p+"aad0e23868dd1b2e57e07be34cd384cc.jpg",z=e.p+"7f797542afc59a7e98ef715c289c758a.jpg",E=e.p+"9510fdd0c1c2ed01f95b9f6da8724f77.jpg",L=e.p+"eda59e439ac27aacd88ba7594a46179e.jpg",C=e.p+"b7987f014cb31ddbdc1d84847e4e2d84.jpg",W=(e.p,e.p+"21d0166d556b45f9d0fbb67bd5c33715.png"),D=(e.p,e.p+"7eb74c4e0a99eebd4f9f79884f33d629.png"),I=(e.p,e.p+"85ba87958a828a21ba4b4c19cce69c33.png"),R=e.p+"eaa6309e7e00f8a46060e019c4c2a7fd.png",T=(e.p,e.p,e.p,e.p+"e78c8c56627e697f1174f9287922bcda.png"),M=e.p+"b3004cf8bc60dbb89df301fce2c813c0.png",Z=e.p+"8af844f50b1bed4dd315722dff786bcd.gif",A=e.p+"fb274bd2c737e393f248104b34170bd6.png";var N,_={0:{icon:W,description:"Clear sky"},1:{icon:D,description:"Mainly clear"},2:{icon:D,description:"Partly cloudy"},3:{icon:D,description:"Overcast"},45:{icon:I,description:"Fog"},48:{icon:I,description:"depositing rime fog"},51:{icon:R,description:"Drizzle Light"},53:{icon:R,description:"Drizzle Moderate"},55:{icon:T,description:"Drizzle Intesity"},56:{icon:R,description:"Freezing Drizzle Light"},57:{icon:T,description:"Freezing Drizzle Intensity"},61:{icon:R,description:"Slight rain"},63:{icon:T,description:"Moderate rain"},65:{icon:T,description:"Heavy intensity rain"},66:{icon:R,description:"Light freezing Rain"},67:{icon:T,description:"Heavy intensity freezing rain"},71:{icon:M,description:"Slight snow fall"},73:{icon:M,description:"Moderate snow fall"},75:{icon:M,description:"Heavy intensity snow fall"},77:{icon:M,description:"Snow grains"},80:{icon:T,description:"Slight rain showers"},81:{icon:T,description:"Moderate rain showers"},82:{icon:T,description:"Heavy intensity rain showers"},85:{icon:M,description:"Slight snow shower"},86:{icon:M,description:"Heavy snow shower"},95:{icon:A,description:"Thunderstorm"},96:{icon:A,description:"Thunderstorm with slight hail"},99:{icon:A,description:"Thunderstorm with heavy hail"}},G=function(t,n,e,r){return new(e||(e=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function c(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(o,c)}u((r=r.apply(t,n||[])).next())}))},F=function(t,n){var e,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],r=0}finally{e=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},H=function(t){void 0===t&&(t={});var n=(0,g.useState)(null),e=n[0],r=n[1],i=(0,g.useState)(null),a=i[0],o=i[1],c=function(t){var n=t.coords,e=n.latitude,i=n.longitude;r({lat:e,lon:i})},u=function(t){o(t)};return(0,g.useEffect)((function(){navigator.geolocation.getCurrentPosition(c,u,t)}),[]),{location:e,error:a}},B=e(878),U=e(494),V=e(845),$=e(609),q=e(758),K=e(701),Y=e(960),J=e(268),Q=function(t,n,e,r){return new(e||(e=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function c(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(o,c)}u((r=r.apply(t,n||[])).next())}))},X=function(t,n){var e,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],r=0}finally{e=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},tt="api.open-meteo.com",nt=J.Z.create({baseURL:"https://".concat(tt,"/v1/forecast"),params:{timezone:"Europe/Moscow",timeformat:"unixtime"}}),et={getHourlyWeather:function(t,n){return Q(this,void 0,void 0,(function(){return X(this,(function(e){switch(e.label){case 0:return[4,nt.get("",{params:{longitude:t,latitude:n,hourly:["temperature_2m","weathercode"].join(","),forecast_days:1}})];case 1:return[2,e.sent().data]}}))}))},getDailyWeather:function(t,n){return Q(this,void 0,void 0,(function(){return X(this,(function(e){switch(e.label){case 0:return[4,nt.get("",{params:{longitude:t,latitude:n,daily:["weathercode","temperature_2m_max","temperature_2m_min"].join(",")}})];case 1:return[2,e.sent().data]}}))}))},searchCityByName:function(t){return Q(this,void 0,void 0,(function(){return X(this,(function(n){switch(n.label){case 0:return[4,J.Z.get("https://geocoding-".concat(tt,"/v1/search"),{params:{name:t}})];case 1:return[2,n.sent().data]}}))}))}},rt=function(t,n,e,r){return new(e||(e=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function c(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(o,c)}u((r=r.apply(t,n||[])).next())}))},it=function(t,n){var e,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],r=0}finally{e=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},at=J.Z.create({baseURL:"https://api.openweathermap.org/data/2.5",params:{appid:"aebbeabbc9b460ceaa8d3cd753952c38",units:"metric"}}),ot={getTodayWeatherByCityName:function(t){return rt(this,void 0,void 0,(function(){return it(this,(function(n){switch(n.label){case 0:return[4,at.get("/weather",{params:{q:t}})];case 1:return[2,n.sent().data]}}))}))},getTodayWeatherByCoords:function(t,n){return rt(this,void 0,void 0,(function(){return it(this,(function(e){switch(e.label){case 0:return[4,at.get("/weather",{params:{lat:n,lon:t}})];case 1:return[2,e.sent().data]}}))}))}},ct={weather:null,loadingStatus:i.IDLE},ut=(0,$.oM)({name:"todayWeather",initialState:ct,reducers:{fetchTodayWeather:function(t,n){},setTodayWeather:function(t,n){t.weather=n.payload},setTodayLoadingStatus:function(t,n){t.loadingStatus=n.payload}}}),lt=(N=ut.actions).setTodayWeather,st=N.setTodayLoadingStatus,dt=N.fetchTodayWeather;const pt=ut.reducer;var ft,ht=function(t,n){var e,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],r=0}finally{e=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function gt(t){var n;return ht(this,(function(e){switch(e.label){case 0:return[4,(0,Y.gz)(st(i.LOADING))];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,6,,8]),[4,(0,Y.RE)(ot.getTodayWeatherByCoords,t.payload.lon,t.payload.lat)];case 3:return n=e.sent(),[4,(0,Y.gz)(lt(n))];case 4:return e.sent(),[4,(0,Y.gz)(st(i.IDLE))];case 5:return e.sent(),[3,8];case 6:return e.sent(),[4,(0,Y.gz)(st(i.ERROR))];case 7:return e.sent(),[3,8];case 8:return[2]}}))}function yt(){return ht(this,(function(t){switch(t.label){case 0:return[4,(0,Y.ib)(dt.type,gt)];case 1:return t.sent(),[2]}}))}var mt={weather:null,loadingStatus:i.IDLE},bt=(0,$.oM)({name:"hourlyWeather",initialState:mt,reducers:{fetchHourlyWeather:function(t,n){},setHourlyWeather:function(t,n){t.weather=n.payload},setHourlyLoadingStatus:function(t,n){t.loadingStatus=n.payload}}}),wt=(ft=bt.actions).fetchHourlyWeather,xt=ft.setHourlyWeather,vt=ft.setHourlyLoadingStatus;const jt=bt.reducer;var Ot,St=function(t,n){var e,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],r=0}finally{e=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function kt(t){var n;return St(this,(function(e){switch(e.label){case 0:return[4,(0,Y.gz)(vt(i.LOADING))];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,6,,8]),[4,(0,Y.RE)(et.getHourlyWeather,t.payload.lon,t.payload.lat)];case 3:return n=e.sent(),[4,(0,Y.gz)(xt(n))];case 4:return e.sent(),[4,(0,Y.gz)(vt(i.IDLE))];case 5:return e.sent(),[3,8];case 6:return e.sent(),[4,(0,Y.gz)(vt(i.ERROR))];case 7:return e.sent(),[3,8];case 8:return[2]}}))}function Pt(){return St(this,(function(t){switch(t.label){case 0:return[4,(0,Y.ib)(wt.type,kt)];case 1:return t.sent(),[2]}}))}var zt={weather:null,loadingStatus:i.IDLE},Et=(0,$.oM)({name:"dailyWeather",initialState:zt,reducers:{fetchDailyWeather:function(t,n){},setDailyWeather:function(t,n){t.weather=n.payload},setDailyLoadingStatus:function(t,n){t.loadingStatus=n.payload}}}),Lt=(Ot=Et.actions).fetchDailyWeather,Ct=Ot.setDailyWeather,Wt=Ot.setDailyLoadingStatus;const Dt=Et.reducer;var It,Rt=function(t,n){var e,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],r=0}finally{e=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function Tt(t){var n;return Rt(this,(function(e){switch(e.label){case 0:return[4,(0,Y.gz)(Wt(i.LOADING))];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,6,,8]),[4,(0,Y.RE)(et.getDailyWeather,t.payload.lon,t.payload.lat)];case 3:return n=e.sent(),[4,(0,Y.gz)(Ct(n))];case 4:return e.sent(),[4,(0,Y.gz)(Wt(i.IDLE))];case 5:return e.sent(),[3,8];case 6:return e.sent(),[4,(0,Y.gz)(Wt(i.ERROR))];case 7:return e.sent(),[3,8];case 8:return[2]}}))}function Mt(){return Rt(this,(function(t){switch(t.label){case 0:return[4,(0,Y.ib)(Lt.type,Tt)];case 1:return t.sent(),[2]}}))}var Zt={currentCity:null,citySearchResult:null,searchCitiesLoadingStatus:i.IDLE},At=(0,$.oM)({name:"city",initialState:Zt,reducers:{setCurrentCity:function(t,n){t.currentCity=n.payload},setSearchCitiesLoadingStatus:function(t,n){t.searchCitiesLoadingStatus=n.payload},setCitiesSearchResult:function(t,n){t.citySearchResult=n.payload},fetchCityByName:function(t,n){}}}),Nt=(It=At.actions).setCurrentCity,_t=It.setSearchCitiesLoadingStatus,Gt=It.setCitiesSearchResult,Ft=It.fetchCityByName;const Ht=At.reducer;var Bt=function(t,n){var e,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],r=0}finally{e=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function Ut(t){var n;return Bt(this,(function(e){switch(e.label){case 0:return[4,(0,Y.gz)(_t(i.LOADING))];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,6,,8]),[4,(0,Y.RE)(et.searchCityByName,t.payload)];case 3:return n=e.sent(),[4,(0,Y.gz)(Gt(n))];case 4:return e.sent(),[4,(0,Y.gz)(_t(i.IDLE))];case 5:return e.sent(),[3,8];case 6:return e.sent(),[4,(0,Y.gz)(_t(i.ERROR))];case 7:return e.sent(),[3,8];case 8:return[2]}}))}function Vt(){return Bt(this,(function(t){switch(t.label){case 0:return[4,(0,Y.Fm)(Ft.type,Ut)];case 1:return t.sent(),[2]}}))}var $t=(0,$.oM)({name:"location",initialState:{location:null},reducers:{setLocation:function(t,n){t.location=n.payload}}}),qt=$t.actions.setLocation;const Kt=$t.reducer;var Yt=(0,$.oM)({name:"forecastWeather",initialState:{forecastWeatherType:"daily"},reducers:{setForecastWeatherType:function(t,n){t.forecastWeatherType=n.payload}}}),Jt=Yt.actions.setForecastWeatherType;const Qt=Yt.reducer;var Xt=(0,V.UY)({todayWeather:pt,hourlyWeather:jt,dailyWeather:Dt,forecastWeather:Qt,city:Ht,location:Kt}),tn=(0,q.getPersistConfig)({key:"root",storage:U.Z,blacklist:[],rootReducer:Xt}),nn=(0,B.OJ)(tn,Xt),en=(0,K.ZP)(),rn=(0,$.xC)({reducer:nn,middleware:function(t){return t({serializableCheck:{ignoredActions:[B._P,B.I2,B.E7,B.ex,B.e,B.Nz]},sagaMiddleware:en}).concat(en)}});en.run((function(){return function(t,n){var e,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(e=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(t,o)}catch(t){c=[6,t],r=0}finally{e=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}(this,(function(t){switch(t.label){case 0:return[4,(0,Y.$6)([yt(),Pt(),Mt(),Vt()])];case 1:return t.sent(),[2]}}))}));var an,on,cn,un,ln,sn,dn,pn,fn,hn,gn,yn,mn,bn,wn,xn,vn,jn,On,Sn,kn,Pn,zn,En,Ln,Cn,Wn,Dn,In=(0,B.p5)(rn),Rn=function(t){return t.city.searchCitiesLoadingStatus},Tn=function(t){return t.city.citySearchResult},Mn=function(t){return t.dailyWeather.weather},Zn=function(t){return t.dailyWeather.loadingStatus},An=function(t){return t.forecastWeather.forecastWeatherType},Nn=function(t){return t.hourlyWeather.weather},_n=function(t){return t.hourlyWeather.loadingStatus},Gn=function(t){return t.location.location},Fn=function(t){return t.todayWeather.weather},Hn=function(t){return t.todayWeather.loadingStatus},Bn=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t},Un=d.ZP.div(an||(an=Bn(["\n\tgrid-area: calendar;\n"],["\n\tgrid-area: calendar;\n"]))),Vn=d.ZP.div(on||(on=Bn(["\n\tmargin-top: ","px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\trow-gap: ","px;\n"],["\n\tmargin-top: ","px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\trow-gap: ","px;\n"])),(function(t){return t.theme.margin[0]}),(function(t){return t.theme.gaps[5]})),$n=function(){return $n=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},$n.apply(this,arguments)},qn=function(){var t=function(){var t=(0,g.useState)(!1),n=t[0],e=t[1],r=(0,g.useState)([]),i=r[0],a=r[1];return(0,g.useEffect)((function(){y.MN.load("client:auth2",(function(){y.MN.client.init(m)}))}),[]),{isAuth:n,events:i,handleAuth:function(){y.MN.load("client:auth2",(function(){return G(void 0,void 0,void 0,(function(){var t,n;return F(this,(function(r){switch(r.label){case 0:return[4,y.MN.auth2.getAuthInstance().signIn()];case 1:return r.sent(),e(!0),[4,y.MN.client.calendar.events.list(b)];case 2:return t=r.sent(),n=t.result.items,a(n),[2]}}))}))}))},handleSignOut:function(){y.MN.load("client:auth2",(function(){return G(void 0,void 0,void 0,(function(){return F(this,(function(t){switch(t.label){case 0:return[4,y.MN.auth2.getAuthInstance().signOut()];case 1:return t.sent(),e(!1),a([]),[2]}}))}))}))}}}(),n=t.isAuth,e=t.events,r=t.handleAuth,i=t.handleSignOut;return(0,c.jsxs)(Un,{children:[n&&(0,c.jsx)(h,$n({onClick:i},{children:"Sign out"})),!n&&(0,c.jsx)(h,$n({onClick:r},{children:"Sign in"})),(0,c.jsx)(Vn,{children:e.map((function(t){return(0,c.jsx)(Xn,{event:t},t.id)}))})]})},Kn=function(t){return t.toLocaleString("en-US",x)},Yn=function(t){return t.toLocaleString("en-US",v)},Jn=function(t){return t.toLocaleString("ru-RU",O)},Qn=d.ZP.div(cn||(cn=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t}(["\n\t/* width: ","%; */\n\tborder-radius: ","px;\n\tpadding: ","px;\n\tfont-size: ","px;\n\tbackground-color: ",";\n\tcolor: ",";\n"],["\n\t/* width: ","%; */\n\tborder-radius: ","px;\n\tpadding: ","px;\n\tfont-size: ","px;\n\tbackground-color: ",";\n\tcolor: ",";\n"])),(function(t){return t.theme.width[2]}),(function(t){return t.theme.borderRadius[1]}),(function(t){return t.theme.padding[4]}),(function(t){return t.theme.fontSize[6]}),(function(t){return t.theme.colors.blue}),(function(t){return t.theme.colors.white})),Xn=function(t){var n=t.event,e=n.start,r=n.end,i=new Date(e.dateTime),a=new Date(r.dateTime);return(0,c.jsxs)(Qn,{children:[(0,c.jsx)("p",{children:n.summary}),(0,c.jsxs)("p",{children:[Jn(i)," - ",Jn(a)]})]})},te=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t},ne=d.ZP.p(un||(un=te(["\n\tcolor: ",";\n\tfont-size: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\ttext-align: center;\n\t}\n"],["\n\tcolor: ",";\n\tfont-size: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\ttext-align: center;\n\t}\n"])),(function(t){return t.theme.colors.black}),(function(t){return t.theme.fontSize[5]}),(function(t){return t.theme.breakpoints.xl})),ee=d.ZP.div(ln||(ln=te(["\n\tgrid-area: clock;\n\n\t@media screen and (max-width: ","px) {\n\t\tjustify-self: center;\n\t}\n"],["\n\tgrid-area: clock;\n\n\t@media screen and (max-width: ","px) {\n\t\tjustify-self: center;\n\t}\n"])),(function(t){return t.theme.breakpoints.xl})),re=function(){return re=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},re.apply(this,arguments)},ie=function(){var t=function(){var t=(0,g.useState)(new Date),n=t[0],e=t[1],r=(0,g.useRef)(null),i=function(){e(new Date)},a=function(){null!==r.current&&clearInterval(r.current)};return(0,g.useEffect)((function(){return r.current=setInterval(i,1e3),a}),[]),n}();return(0,c.jsxs)(ee,{children:[(0,c.jsx)(ne,re({"data-test-id":"time-clock"},{children:Kn(t)})),(0,c.jsx)(ne,re({"data-test-id":"date-clock"},{children:Yn(t)}))]})},ae=(sn=function(t,n){return sn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},sn(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}sn(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),oe=function(t){function n(n){var e=t.call(this,n)||this;return e.state={error:!1},e}return ae(n,t),n.getDerivedStateFromError=function(){return{error:!0}},n.prototype.componentDidCatch=function(t,n){console.log(t),console.log(n.componentStack)},n.prototype.render=function(){return this.state.error?(0,c.jsx)("h1",{children:"Произошла ошибка"}):this.props.children},n}(g.Component),ce=d.ZP.p(dn||(dn=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t}(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),ue=function(){return ue=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},ue.apply(this,arguments)},le=function(){var t=(0,l.v9)(Mn),n=(0,l.v9)(Zn),e=(0,l.v9)(Gn),r=(0,l.I0)();if((0,g.useEffect)((function(){null!==e&&r(Lt(e))}),[e]),n===i.LOADING)return(0,c.jsx)(Ve,{"data-test-id":"daily-weather-spinner",size:w.LARGE});if(null===t)return null;var a=t.daily,o=a.weathercode,u=a.temperature_2m_max,s=a.temperature_2m_min;return(0,c.jsx)(c.Fragment,{children:null==t?void 0:t.daily.time.map((function(t,n){var e,r=o[n],i=new Date(1e3*t),a=_[r],l=a.icon,d=a.description;return(0,c.jsxs)(ve,ue({timestamp:(e=i,e.toLocaleString("en-US",j)),icon:(0,c.jsx)("img",{src:l,alt:d,title:d})},{children:[(0,c.jsx)(ce,ue({"data-test-id":"daily-weather-title"},{children:d})),(0,c.jsx)(ce,{children:"Max:"}),(0,c.jsxs)(ce,{children:[u[n],"°"]}),(0,c.jsx)(ce,{children:"Min:"}),(0,c.jsxs)(ce,{children:[s[n],"°"]})]}),t)}))})},se=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t},de=d.ZP.p(pn||(pn=se(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),pe=d.ZP.p(fn||(fn=se(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[0]})),fe=function(){return fe=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},fe.apply(this,arguments)},he=function(){var t=(0,l.v9)(Nn),n=(0,l.v9)(_n),e=(0,l.v9)(Gn),r=(0,l.I0)();if((0,g.useEffect)((function(){null!==e&&r(wt(e))}),[e]),n===i.LOADING)return(0,c.jsx)(Ve,{size:w.LARGE});if(null===t)return null;var a,o,u=t.hourly,s=u.weathercode,d=u.temperature_2m,p=u.time;return(0,c.jsx)(c.Fragment,{children:(a=p,o=new Date,a.map((function(t){return new Date(1e3*t)})).filter((function(t){return t.getHours()>=o.getHours()})).slice(0,7)).map((function(t,n){var e=s[n],r=_[e],i=r.icon,a=r.description;return(0,c.jsxs)(ve,fe({"data-test-id":"hourly-weather-item",timestamp:Jn(t),icon:(0,c.jsx)("img",{src:i,alt:a,title:a})},{children:[(0,c.jsxs)(de,fe({"data-test-id":"hourly-weather-title"},{children:[d[n],"°"]})),(0,c.jsx)(pe,{children:a})]}),t.getTime())}))})},ge=d.ZP.div(hn||(hn=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t}(["\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n\tgrid-template-rows: 1fr;\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: repeat(auto-fit, minmax(95px, 1fr));\n\t\trow-gap: ","px;\n\t}\n"],["\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n\tgrid-template-rows: 1fr;\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: repeat(auto-fit, minmax(95px, 1fr));\n\t\trow-gap: ","px;\n\t}\n"])),(function(t){return t.theme.breakpoints.xl}),(function(t){return t.theme.gaps[0]})),ye=function(){var t=(0,l.v9)(An);return null===(0,l.v9)(Gn)?(0,c.jsx)("p",{children:"Вы отказались от обработки вашей геолокации. Выберите город"}):(0,c.jsxs)(ge,{children:["daily"===t&&(0,c.jsx)(le,{}),"hourly"===t&&(0,c.jsx)(he,{})]})},me=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t},be=d.ZP.div(gn||(gn=me(["\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: 1fr 82px repeat(auto, 1fr);\n\talign-items: center;\n"],["\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: 1fr 82px repeat(auto, 1fr);\n\talign-items: center;\n"]))),we=d.ZP.p(yn||(yn=me(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),xe=d.ZP.div(mn||(mn=me(["\n\tjustify-self: center;\n"],["\n\tjustify-self: center;\n"]))),ve=function(t){var n=t.timestamp,e=t.icon,r=t.children;return(0,c.jsxs)(be,{children:[(0,c.jsx)(we,{children:n}),(0,c.jsx)(xe,{children:e}),r]})},je=d.ZP.div(bn||(bn=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t}(["\n\tgrid-area: forecastswitch;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: ","px;\n\tcolumn-gap: ","px;\n"],["\n\tgrid-area: forecastswitch;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: ","px;\n\tcolumn-gap: ","px;\n"])),(function(t){return t.theme.height[0]}),(function(t){return t.theme.gaps[0]})),Oe=function(){return Oe=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},Oe.apply(this,arguments)},Se=function(){var t=(0,l.I0)(),n=function(n){return function(){t(Jt(n))}};return(0,c.jsxs)(je,{children:[(0,c.jsx)(h,Oe({onClick:n("daily")},{children:"Daily"})),(0,c.jsx)(h,Oe({onClick:n("hourly")},{children:"Hourly"}))]})},ke=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t},Pe=d.ZP.div(wn||(wn=ke(["\n\tdisplay: grid;\n\tgrid-template-areas: '. . .' '. main .' '. . .';\n\tgrid-template-columns: auto minmax(0, ","px) auto;\n\tgrid-template-rows: auto auto auto;\n\n\tbackground: url(",") repeat;\n\tbackground-size: cover;\n\n\twidth: ","vw;\n\tmin-height: ","vh;\n"],["\n\tdisplay: grid;\n\tgrid-template-areas: '. . .' '. main .' '. . .';\n\tgrid-template-columns: auto minmax(0, ","px) auto;\n\tgrid-template-rows: auto auto auto;\n\n\tbackground: url(",") repeat;\n\tbackground-size: cover;\n\n\twidth: ","vw;\n\tmin-height: ","vh;\n"])),(function(t){return t.theme.width[1]}),(function(t){return t.background}),(function(t){return t.theme.width[2]}),(function(t){return t.theme.height[2]})),ze=d.ZP.main(xn||(xn=ke(["\n\tgrid-area: main;\n\trow-gap: ","px;\n\n\tdisplay: grid;\n\tgrid-template-areas:\n\t\t'clock search'\n\t\t'calendar .'\n\t\t'calendar .'\n\t\t'todayswitcher forecastswitch'\n\t\t'weather weather';\n\n\tbackground-color: ",";\n\tbackdrop-filter: blur(","px);\n\n\tpadding: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\tpadding: ","px;\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-template-areas:\n\t\t\t'clock'\n\t\t\t'search'\n\t\t\t'calendar'\n\t\t\t'forecastswitch'\n\t\t\t'weather';\n\t}\n"],["\n\tgrid-area: main;\n\trow-gap: ","px;\n\n\tdisplay: grid;\n\tgrid-template-areas:\n\t\t'clock search'\n\t\t'calendar .'\n\t\t'calendar .'\n\t\t'todayswitcher forecastswitch'\n\t\t'weather weather';\n\n\tbackground-color: ",";\n\tbackdrop-filter: blur(","px);\n\n\tpadding: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\tpadding: ","px;\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-template-areas:\n\t\t\t'clock'\n\t\t\t'search'\n\t\t\t'calendar'\n\t\t\t'forecastswitch'\n\t\t\t'weather';\n\t}\n"])),(function(t){return t.theme.gaps[5]}),(function(t){return t.theme.colors.transparentWhite}),(function(t){return t.theme.blur[0]}),(function(t){return t.theme.padding[0]}),(function(t){return t.theme.breakpoints.xl}),(function(t){return t.theme.padding[3]})),Ee=d.ZP.div(vn||(vn=ke(["\n\tgrid-area: weather;\n\tdisplay: grid;\n\tgrid-template-columns: minmax(0px, 200px) 1fr;\n\n\tbackground-color: ",";\n\tborder-radius: ","px;\n\tpadding: ","px;\n\n\tgrid-template-areas: 'today forecast';\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: 1fr;\n\t\trow-gap: ","px;\n\t\tgrid-template-rows: auto;\n\t\tgrid-template-areas: 'today' 'forecast';\n\t}\n"],["\n\tgrid-area: weather;\n\tdisplay: grid;\n\tgrid-template-columns: minmax(0px, 200px) 1fr;\n\n\tbackground-color: ",";\n\tborder-radius: ","px;\n\tpadding: ","px;\n\n\tgrid-template-areas: 'today forecast';\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: 1fr;\n\t\trow-gap: ","px;\n\t\tgrid-template-rows: auto;\n\t\tgrid-template-areas: 'today' 'forecast';\n\t}\n"])),(function(t){return t.theme.colors.transparentWhite}),(function(t){return t.theme.borderRadius[1]}),(function(t){return t.theme.padding[3]}),(function(t){return t.theme.breakpoints.xl}),(function(t){return t.theme.gaps[1]})),Le=function(){return Le=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},Le.apply(this,arguments)},Ce=function(){var t,n=(0,l.v9)(Fn);return(0,c.jsx)(Pe,Le({background:(t=null==n?void 0:n.weather[0].id,void 0===t&&(t=800),t>=200&&t<300?C:t>=300&&t<400?z:t>=500&&t<600?E:t>=600&&t<700?L:t>=600&&t<700?P:800===t?S:t>800&&t<900?k:S)},{children:(0,c.jsxs)(ze,{children:[(0,c.jsx)(ie,{}),(0,c.jsx)(Te,{}),(0,c.jsx)(qn,{}),(0,c.jsx)(Se,{}),(0,c.jsxs)(Ee,{children:[(0,c.jsx)(Qe,{}),(0,c.jsx)(ye,{})]})]})}))},We=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t},De=d.ZP.div(jn||(jn=We(["\n\tposition: relative;\n\tgrid-area: search;\n"],["\n\tposition: relative;\n\tgrid-area: search;\n"]))),Ie=d.ZP.input(On||(On=We(["\n\theight: ","px;\n\tpadding: ","px;\n\n\tfont-size: ","px;\n\n\tborder-radius: ","px;\n\n\t&:focus {\n\t\toutline: 1px solid;\n\t}\n\n\twidth: 100%;\n\n\ttransition: all 0.2s ease;\n"],["\n\theight: ","px;\n\tpadding: ","px;\n\n\tfont-size: ","px;\n\n\tborder-radius: ","px;\n\n\t&:focus {\n\t\toutline: 1px solid;\n\t}\n\n\twidth: 100%;\n\n\ttransition: all 0.2s ease;\n"])),(function(t){return t.theme.height[3]}),(function(t){return t.theme.padding[2]}),(function(t){return t.theme.fontSize[3]}),(function(t){return t.theme.borderRadius[0]})),Re=function(){return Re=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},Re.apply(this,arguments)},Te=function(){var t=H().location,n=(0,l.I0)(),e=(0,g.useState)(null),r=e[0],i=e[1];return(0,g.useEffect)((function(){null!==r&&n(Ft(r))}),[r]),(0,c.jsxs)(De,{children:[(0,c.jsx)(h,Re({onClick:function(){n(qt(t))}},{children:"Reset City"})),(0,c.jsx)("h3",{children:"Search city"}),(0,c.jsx)(Ie,{"data-test-id":"city-search-input",type:"search",value:null!=r?r:"",onChange:function(t){i(t.target.value)}}),(0,c.jsx)(Ge,{onClearInputValue:function(){i("")}})]})},Me=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t},Ze=d.ZP.div(Sn||(Sn=Me(["\n\tbackground-color: ",";\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(1fr, auto);\n\n\twidth: ","%;\n\tleft: 0;\n\n\tposition: absolute;\n\tz-index: 1;\n\tmax-height: ","px;\n\toverflow-y: auto;\n"],["\n\tbackground-color: ",";\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(1fr, auto);\n\n\twidth: ","%;\n\tleft: 0;\n\n\tposition: absolute;\n\tz-index: 1;\n\tmax-height: ","px;\n\toverflow-y: auto;\n"])),(function(t){return t.theme.colors.white}),(function(t){return t.theme.width[2]}),(function(t){return t.theme.height[4]})),Ae=d.ZP.div(kn||(kn=Me(["\n\theight: ","px;\n\tborder-bottom: 1px solid ",";\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto;\n\n\talign-items: center;\n\tpadding: ","px;\n"],["\n\theight: ","px;\n\tborder-bottom: 1px solid ",";\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto;\n\n\talign-items: center;\n\tpadding: ","px;\n"])),(function(t){return t.theme.height[5]}),(function(t){return t.theme.colors.black}),(function(t){return t.theme.padding[3]})),Ne=d.ZP.p(Pn||(Pn=Me(["\n\tfont-size: ",";\n"],["\n\tfont-size: ",";\n"])),(function(t){return t.theme.fontSize[0]})),_e=function(){return _e=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},_e.apply(this,arguments)},Ge=function(t){var n,e=t.onClearInputValue,r=(0,l.I0)(),a=(0,l.v9)(Rn),o=(0,l.v9)(Tn),u=function(t){return function(){r(Nt(t));var n=t.longitude,i=t.latitude;r(qt({lon:n,lat:i})),e()}};return a===i.LOADING?(0,c.jsx)(Ze,{children:(0,c.jsx)(Ve,{"data-test-id":"city-search-spinner",size:w.LARGE})}):(0,c.jsx)(Ze,_e({"data-test-id":"city-search-result-wrapper"},{children:null===(n=null==o?void 0:o.results)||void 0===n?void 0:n.map((function(t){var n=t.id,e=t.name,r=t.country,i=t.country_code;return(0,c.jsxs)(Ae,{children:[(0,c.jsxs)(Ne,{children:[e,", ",r,", ",i]}),(0,c.jsx)(h,_e({onClick:u(t)},{children:"select"}))]},n)}))}))},Fe=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t},He=d.ZP.img(zn||(zn=Fe(["\n\talign-self: center;\n\tjustify-self: center;\n\n\twidth: ","px;\n\theight: ","px;\n"],["\n\talign-self: center;\n\tjustify-self: center;\n\n\twidth: ","px;\n\theight: ","px;\n"])),(function(t){return t.size}),(function(t){return t.size})),Be=d.ZP.div(En||(En=Fe(["\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: grid;\n\tgrid-template-rows: 1fr;\n\tgrid-template-columns: 1fr;\n\talign-items: center;\n\tjustify-content: center;\n"],["\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: grid;\n\tgrid-template-rows: 1fr;\n\tgrid-template-columns: 1fr;\n\talign-items: center;\n\tjustify-content: center;\n"]))),Ue=function(){return Ue=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},Ue.apply(this,arguments)},Ve=function(t){var n=t.size,e=function(t,n){var e={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&n.indexOf(r)<0&&(e[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)n.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(e[r[i]]=t[r[i]])}return e}(t,["size"]);return(0,c.jsx)(Be,Ue({"data-test-id":"spinner-wrapper"},e,{children:(0,c.jsx)(He,{src:Z,size:n,alt:"Loading",title:"Loading"})}))},$e=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t},qe=d.ZP.div(Ln||(Ln=$e(["\n\tgrid-area: today;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(auto, 5);\n\tjustify-content: center;\n\talign-items: center;\n\n\n"],["\n\tgrid-area: today;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(auto, 5);\n\tjustify-content: center;\n\talign-items: center;\n\n\n"]))),Ke=d.ZP.p(Cn||(Cn=$e(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),Ye=d.ZP.img(Wn||(Wn=$e(["\n\tjustify-self: center;\n"],["\n\tjustify-self: center;\n"]))),Je=function(){return Je=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},Je.apply(this,arguments)},Qe=function(){var t=function(){var t=(0,l.I0)(),n=(0,l.v9)(Fn),e=(0,l.v9)(Hn),r=(0,l.v9)(Gn),a=H().location;return(0,g.useEffect)((function(){null!==a&&t(qt(a))}),[a]),(0,g.useEffect)((function(){null!==r&&t(dt(r))}),[r]),null===r?{todayWeather:n,replaceContent:(0,c.jsx)("p",{children:"Вы отказались от обработки вашей геолокации. Выберите город"})}:e===i.LOADING?{todayWeather:n,replaceContent:(0,c.jsx)(Ve,{size:w.LARGE})}:{todayWeather:n,replaceContent:null}}(),n=t.todayWeather,e=t.replaceContent;if(null!==e)return(0,c.jsx)(qe,Je({"data-test-id":"today-weather-spinner-wrapper"},{children:e}));if(null===n)return null;var r=n.weather,a=n.main,o=n.name,u=r[0],s=u.icon,d=u.description,p=a.feels_like,f=a.temp;return(0,c.jsxs)(qe,Je({"data-test-id":"today-weather-wrapper"},{children:[(0,c.jsx)(Ke,Je({"data-test-id":"today-weather-title"},{children:"Today"})),(0,c.jsx)(Ke,Je({"data-test-id":"today-weather-text"},{children:o})),(0,c.jsx)(Ye,{"data-test-id":"today-weather-image",src:"https://openweathermap.org/img/wn/".concat(s,"@2x.png"),alt:d,title:d}),(0,c.jsx)(Ke,{children:d}),(0,c.jsxs)(Ke,{children:[f.toFixed(0),"°"]}),(0,c.jsxs)(Ke,{children:["feels like ",p.toFixed(0),"°"]})]}))},Xe=(0,d.vJ)(Dn||(Dn=function(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t}(['\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\thtml,\n\tbody {\n\t\toverflow-x: hidden;\n\t\tdisplay: grid;\n\t\tgrid-template-rows: 100%;\n\t\tgrid-template-columns: 1fr;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: var(--font-family);\n\t}\n\n\ta {\n\t\ttext-decoration: none;\n\t\tcolor: inherit;\n\t}\n\n\tbutton {\n\t\tborder: none;\n\t}\n\n\tli {\n\t\tlist-style-type: none; \n\t}\n\t\n\tul {\n\t\tmargin-left: 0;\n\t\tpadding-left: 0; \n\t}\n\n\t:root {\n\t\t--font-family: "Helvetica Neue", sans-serif;\n\t}\n'],['\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\thtml,\n\tbody {\n\t\toverflow-x: hidden;\n\t\tdisplay: grid;\n\t\tgrid-template-rows: 100%;\n\t\tgrid-template-columns: 1fr;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: var(--font-family);\n\t}\n\n\ta {\n\t\ttext-decoration: none;\n\t\tcolor: inherit;\n\t}\n\n\tbutton {\n\t\tborder: none;\n\t}\n\n\tli {\n\t\tlist-style-type: none; \n\t}\n\t\n\tul {\n\t\tmargin-left: 0;\n\t\tpadding-left: 0; \n\t}\n\n\t:root {\n\t\t--font-family: "Helvetica Neue", sans-serif;\n\t}\n']))),tr={colors:{white:"#FFFFFF",transparentWhite:"rgba(217, 217, 217, 0.3)",blue:"rgb(26, 115, 232)",black:"#000000",lightBlack:"#222831"},borderRadius:[5,10,20],width:[90,1110,100,60],height:[30,974,100,38,300,60],padding:[50,70,15,10,5],fontSize:[17,20,19,25,30,41,12],gaps:[28,36,39,48,58,10],margin:[20,250,150],breakpoints:{xl:1e3},blur:[7.5],transition:{light:"all 0.2s ease"}},nr=function(){return nr=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},nr.apply(this,arguments)},er=function(){return er=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},er.apply(this,arguments)},rr=document.getElementById("root");if(null===rr)throw new Error("Container element not found");(0,u.s)(rr).render((0,c.jsx)(l.zt,er({store:rn},{children:(0,c.jsx)(s.r,er({loading:null,persistor:In},{children:(0,c.jsx)(oe,{children:(0,c.jsx)((function(){return(0,c.jsxs)(d.f6,nr({theme:tr},{children:[(0,c.jsx)(Xe,{}),(0,c.jsx)(Ce,{})]}))}),{})})}))})))}},e={};function r(t){var i=e[t];if(void 0!==i)return i.exports;var a=e[t]={exports:{}};return n[t].call(a.exports,a,a.exports,r),a.exports}r.m=n,t=[],r.O=(n,e,i,a)=>{if(!e){var o=1/0;for(s=0;s<t.length;s++){for(var[e,i,a]=t[s],c=!0,u=0;u<e.length;u++)(!1&a||o>=a)&&Object.keys(r.O).every((t=>r.O[t](e[u])))?e.splice(u--,1):(c=!1,a<o&&(o=a));if(c){t.splice(s--,1);var l=i();void 0!==l&&(n=l)}}return n}a=a||0;for(var s=t.length;s>0&&t[s-1][2]>a;s--)t[s]=t[s-1];t[s]=[e,i,a]},r.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return r.d(n,{a:n}),n},r.d=(t,n)=>{for(var e in n)r.o(n,e)&&!r.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var n=r.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var e=n.getElementsByTagName("script");e.length&&(t=e[e.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{var t={143:0};r.O.j=n=>0===t[n];var n=(n,e)=>{var i,a,[o,c,u]=e,l=0;if(o.some((n=>0!==t[n]))){for(i in c)r.o(c,i)&&(r.m[i]=c[i]);if(u)var s=u(r)}for(n&&n(e);l<o.length;l++)a=o[l],r.o(t,a)&&t[a]&&t[a][0](),t[a]=0;return r.O(s)},e=self.webpackChunk=self.webpackChunk||[];e.forEach(n.bind(null,0)),e.push=n.bind(null,e.push.bind(e))})(),r.nc=void 0;var i=r.O(void 0,[433],(()=>r(519)));i=r.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,