(()=>{"use strict";var t,e={356:(t,e,n)=>{var r,i,a,o,c=n(246),u=n(634),l=n(780),s=n(536),d=n(924),p=d.ZP.button(r||(a=["\n\tmin-width: ","px;\n\tmin-height: ","px;\n\n\tborder-radius: ","px;\n\n\tbackground-color: ",";\n\tcolor: ",";\n\n\tfont-size: ","px;\n\n\tdisplay: grid;\n\talign-items: center;\n\tjustify-content: center;\n\tcursor: pointer;\n\n\ttransition: ",";\n\n\t&:hover {\n\t\ttransform: scale(1.01);\n\t\tbackground-color: ",";\n\t}\n"],o=["\n\tmin-width: ","px;\n\tmin-height: ","px;\n\n\tborder-radius: ","px;\n\n\tbackground-color: ",";\n\tcolor: ",";\n\n\tfont-size: ","px;\n\n\tdisplay: grid;\n\talign-items: center;\n\tjustify-content: center;\n\tcursor: pointer;\n\n\ttransition: ",";\n\n\t&:hover {\n\t\ttransform: scale(1.01);\n\t\tbackground-color: ",";\n\t}\n"],Object.defineProperty?Object.defineProperty(a,"raw",{value:o}):a.raw=o,r=a),(function(t){return t.theme.width[0]}),(function(t){return t.theme.height[0]}),(function(t){return t.theme.borderRadius[1]}),(function(t){return t.theme.colors.black}),(function(t){return t.theme.colors.white}),(function(t){return t.theme.fontSize[2]}),(function(t){return t.theme.transition.light}),(function(t){return t.theme.colors.lightBlack})),f=function(){return f=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},f.apply(this,arguments)},h=function(t){var e=t.children,n=t.onClick;return(0,c.jsx)(p,f({"data-test-id":"button",onClick:n},{children:e}))},g=n(378),y=n(278),m={clientId:null!=="126193467251-3km52qm9oejptlll0gkgefs1kceu9kni.apps.googleusercontent.com"?"126193467251-3km52qm9oejptlll0gkgefs1kceu9kni.apps.googleusercontent.com":"",apiKey:null!=="AIzaSyB3uVQBS8rSzchO6oXWV6Mx45KtYwEoN9U"?"AIzaSyB3uVQBS8rSzchO6oXWV6Mx45KtYwEoN9U":"",scope:"https://www.googleapis.com/auth/calendar.events",discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"]},b={calendarId:"primary",timeMin:(new Date).toISOString(),showDeleted:!1,singleEvents:!0,maxResults:10,orderBy:"startTime"};!function(t){t.IDLE="idle",t.ERROR="error",t.SUCCESS="success",t.LOADING="loading"}(i||(i={}));var w,v={hour:"numeric",minute:"numeric",second:"numeric"},x={weekday:"long",month:"long",year:"numeric",day:"numeric"},j={weekday:"long"},S={hour:"numeric",minute:"numeric"};!function(t){t[t.SMALL=16]="SMALL",t[t.MEDIUM=32]="MEDIUM",t[t.LARGE=64]="LARGE"}(w||(w={}));const O=n.p+"d7a3523274339e38d70487e6204c5ac1.jpg",k=n.p+"33a640e8b41480258625a8e839dae962.jpg",P=n.p+"aad0e23868dd1b2e57e07be34cd384cc.jpg",z=n.p+"7f797542afc59a7e98ef715c289c758a.jpg",L=n.p+"9510fdd0c1c2ed01f95b9f6da8724f77.jpg",C=n.p+"eda59e439ac27aacd88ba7594a46179e.jpg",W=n.p+"b7987f014cb31ddbdc1d84847e4e2d84.jpg",E=(n.p,n.p+"21d0166d556b45f9d0fbb67bd5c33715.png"),D=(n.p,n.p+"7eb74c4e0a99eebd4f9f79884f33d629.png"),R=(n.p,n.p+"85ba87958a828a21ba4b4c19cce69c33.png"),I=n.p+"eaa6309e7e00f8a46060e019c4c2a7fd.png",M=(n.p,n.p,n.p,n.p+"e78c8c56627e697f1174f9287922bcda.png"),T=n.p+"b3004cf8bc60dbb89df301fce2c813c0.png",Z=n.p+"8af844f50b1bed4dd315722dff786bcd.gif",N=n.p+"fb274bd2c737e393f248104b34170bd6.png";var A,_={0:{iconSrc:E,description:"Clear sky"},1:{iconSrc:D,description:"Mainly clear"},2:{iconSrc:D,description:"Partly cloudy"},3:{iconSrc:D,description:"Overcast"},45:{iconSrc:R,description:"Fog"},48:{iconSrc:R,description:"depositing rime fog"},51:{iconSrc:I,description:"Drizzle Light"},53:{iconSrc:I,description:"Drizzle Moderate"},55:{iconSrc:M,description:"Drizzle Intesity"},56:{iconSrc:I,description:"Freezing Drizzle Light"},57:{iconSrc:M,description:"Freezing Drizzle Intensity"},61:{iconSrc:I,description:"Slight rain"},63:{iconSrc:M,description:"Moderate rain"},65:{iconSrc:M,description:"Heavy intensity rain"},66:{iconSrc:I,description:"Light freezing Rain"},67:{iconSrc:M,description:"Heavy intensity freezing rain"},71:{iconSrc:T,description:"Slight snow fall"},73:{iconSrc:T,description:"Moderate snow fall"},75:{iconSrc:T,description:"Heavy intensity snow fall"},77:{iconSrc:T,description:"Snow grains"},80:{iconSrc:M,description:"Slight rain showers"},81:{iconSrc:M,description:"Moderate rain showers"},82:{iconSrc:M,description:"Heavy intensity rain showers"},85:{iconSrc:T,description:"Slight snow shower"},86:{iconSrc:T,description:"Heavy snow shower"},95:{iconSrc:N,description:"Thunderstorm"},96:{iconSrc:N,description:"Thunderstorm with slight hail"},99:{iconSrc:N,description:"Thunderstorm with heavy hail"}},G=function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function c(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,c)}u((r=r.apply(t,e||[])).next())}))},F=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},H=function(t){void 0===t&&(t={});var e=(0,g.useState)(null),n=e[0],r=e[1],i=(0,g.useState)(null),a=i[0],o=i[1],c=function(t){var e=t.coords,n=e.latitude,i=e.longitude;r({lat:n,lon:i})},u=function(t){o(t)};return(0,g.useEffect)((function(){navigator.geolocation.getCurrentPosition(c,u,t)}),[]),{location:n,error:a}},B=n(878),U=n(494),V=n(845),$=n(609),q=n(758),J=n(701),K=n(960),Y=n(268),Q=function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function c(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,c)}u((r=r.apply(t,e||[])).next())}))},X=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},tt="api.open-meteo.com",et=Y.Z.create({baseURL:"https://".concat(tt,"/v1/forecast"),params:{timezone:"Europe/Moscow",timeformat:"unixtime"}}),nt={getHourlyWeather:function(t,e){return Q(this,void 0,void 0,(function(){return X(this,(function(n){switch(n.label){case 0:return[4,et.get("",{params:{longitude:t,latitude:e,hourly:["temperature_2m","weathercode"].join(","),forecast_days:1}})];case 1:return[2,n.sent().data]}}))}))},getDailyWeather:function(t,e){return Q(this,void 0,void 0,(function(){return X(this,(function(n){switch(n.label){case 0:return[4,et.get("",{params:{longitude:t,latitude:e,daily:["weathercode","temperature_2m_max","temperature_2m_min"].join(",")}})];case 1:return[2,n.sent().data]}}))}))},searchCityByName:function(t){return Q(this,void 0,void 0,(function(){return X(this,(function(e){switch(e.label){case 0:return[4,Y.Z.get("https://geocoding-".concat(tt,"/v1/search"),{params:{name:t}})];case 1:return[2,e.sent().data]}}))}))}},rt=function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function c(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,c)}u((r=r.apply(t,e||[])).next())}))},it=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},at=Y.Z.create({baseURL:"https://api.openweathermap.org/data/2.5",params:{appid:"aebbeabbc9b460ceaa8d3cd753952c38",units:"metric"}}),ot={getTodayWeatherByCityName:function(t){return rt(this,void 0,void 0,(function(){return it(this,(function(e){switch(e.label){case 0:return[4,at.get("/weather",{params:{q:t}})];case 1:return[2,e.sent().data]}}))}))},getTodayWeatherByCoords:function(t,e){return rt(this,void 0,void 0,(function(){return it(this,(function(n){switch(n.label){case 0:return[4,at.get("/weather",{params:{lat:e,lon:t}})];case 1:return[2,n.sent().data]}}))}))}},ct=function(t){return t.toLocaleString("en-US",v)},ut=function(t){return t.toLocaleString("en-US",x)},lt=function(t){return t.toLocaleString("ru-RU",S)},st=function(t){var e=t.id,n=t.name,r=t.country;return{id:e,name:n,countryCode:t.country_code,country:r,lon:t.longitude,lat:t.latitude}},dt={weather:null,loadingStatus:i.IDLE},pt=(0,$.oM)({name:"todayWeather",initialState:dt,reducers:{fetchTodayWeather:function(t,e){},setTodayWeather:function(t,e){t.weather=function(t){var e=t.weather,n=t.main,r=t.name,i=e[0],a=i.icon,o=i.description,c=i.id;return{iconCode:a,description:o,feelsLike:n.feels_like,temperature:n.temp,cityName:r,id:c}}(e.payload)},setTodayLoadingStatus:function(t,e){t.loadingStatus=e.payload}}}),ft=(A=pt.actions).setTodayWeather,ht=A.setTodayLoadingStatus,gt=A.fetchTodayWeather;const yt=pt.reducer;var mt,bt=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function wt(t){var e;return bt(this,(function(n){switch(n.label){case 0:return[4,(0,K.gz)(ht(i.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,(0,K.RE)(ot.getTodayWeatherByCoords,t.payload.lon,t.payload.lat)];case 3:return e=n.sent(),[4,(0,K.gz)(ft(e))];case 4:return n.sent(),[4,(0,K.gz)(ht(i.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,(0,K.gz)(ht(i.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function vt(){return bt(this,(function(t){switch(t.label){case 0:return[4,(0,K.ib)(gt.type,wt)];case 1:return t.sent(),[2]}}))}var xt={weather:null,loadingStatus:i.IDLE},jt=(0,$.oM)({name:"hourlyWeather",initialState:xt,reducers:{fetchHourlyWeather:function(t,e){},setHourlyWeather:function(t,e){t.weather=function(t){var e=t.hourly;return{weatherCodeList:e.weathercode,temperatureList:e.temperature_2m,timeList:e.time}}(e.payload)},setHourlyLoadingStatus:function(t,e){t.loadingStatus=e.payload}}}),St=(mt=jt.actions).fetchHourlyWeather,Ot=mt.setHourlyWeather,kt=mt.setHourlyLoadingStatus;const Pt=jt.reducer;var zt,Lt=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function Ct(t){var e;return Lt(this,(function(n){switch(n.label){case 0:return[4,(0,K.gz)(kt(i.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,(0,K.RE)(nt.getHourlyWeather,t.payload.lon,t.payload.lat)];case 3:return e=n.sent(),[4,(0,K.gz)(Ot(e))];case 4:return n.sent(),[4,(0,K.gz)(kt(i.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,(0,K.gz)(kt(i.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function Wt(){return Lt(this,(function(t){switch(t.label){case 0:return[4,(0,K.ib)(St.type,Ct)];case 1:return t.sent(),[2]}}))}var Et={weather:null,loadingStatus:i.IDLE},Dt=(0,$.oM)({name:"dailyWeather",initialState:Et,reducers:{fetchDailyWeather:function(t,e){},setDailyWeather:function(t,e){t.weather=function(t){var e=t.daily,n=e.weathercode,r=e.temperature_2m_max;return{weatherCodeList:n,temperatureMinList:e.temperature_2m_min,temperatureMaxList:r,times:e.time}}(e.payload)},setDailyLoadingStatus:function(t,e){t.loadingStatus=e.payload}}}),Rt=(zt=Dt.actions).fetchDailyWeather,It=zt.setDailyWeather,Mt=zt.setDailyLoadingStatus;const Tt=Dt.reducer;var Zt,Nt=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function At(t){var e;return Nt(this,(function(n){switch(n.label){case 0:return[4,(0,K.gz)(Mt(i.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,(0,K.RE)(nt.getDailyWeather,t.payload.lon,t.payload.lat)];case 3:return e=n.sent(),[4,(0,K.gz)(It(e))];case 4:return n.sent(),[4,(0,K.gz)(Mt(i.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,(0,K.gz)(Mt(i.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function _t(){return Nt(this,(function(t){switch(t.label){case 0:return[4,(0,K.ib)(Rt.type,At)];case 1:return t.sent(),[2]}}))}var Gt={currentCity:null,citySearchResult:null,searchCitiesLoadingStatus:i.IDLE},Ft=(0,$.oM)({name:"city",initialState:Gt,reducers:{setCurrentCity:function(t,e){t.currentCity=e.payload},setSearchCitiesLoadingStatus:function(t,e){t.searchCitiesLoadingStatus=e.payload},setCitiesSearchResult:function(t,e){var n,r;t.citySearchResult=null!==(r=null===(n=e.payload.results)||void 0===n?void 0:n.map(st))&&void 0!==r?r:null},fetchCityByName:function(t,e){}}}),Ht=(Zt=Ft.actions).setCurrentCity,Bt=Zt.setSearchCitiesLoadingStatus,Ut=Zt.setCitiesSearchResult,Vt=Zt.fetchCityByName;const $t=Ft.reducer;var qt=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function Jt(t){var e;return qt(this,(function(n){switch(n.label){case 0:return[4,(0,K.gz)(Bt(i.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,(0,K.RE)(nt.searchCityByName,t.payload)];case 3:return e=n.sent(),[4,(0,K.gz)(Ut(e))];case 4:return n.sent(),[4,(0,K.gz)(Bt(i.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,(0,K.gz)(Bt(i.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function Kt(){return qt(this,(function(t){switch(t.label){case 0:return[4,(0,K.Fm)(Vt.type,Jt)];case 1:return t.sent(),[2]}}))}var Yt=(0,$.oM)({name:"location",initialState:{location:null},reducers:{setLocation:function(t,e){t.location=e.payload}}}),Qt=Yt.actions.setLocation;const Xt=Yt.reducer;var te=(0,$.oM)({name:"forecastWeather",initialState:{forecastWeatherType:"daily"},reducers:{setForecastWeatherType:function(t,e){t.forecastWeatherType=e.payload}}}),ee=te.actions.setForecastWeatherType;const ne=te.reducer;var re=(0,V.UY)({todayWeather:yt,hourlyWeather:Pt,dailyWeather:Tt,forecastWeather:ne,city:$t,location:Xt}),ie=(0,q.getPersistConfig)({key:"root",storage:U.Z,blacklist:[],rootReducer:re}),ae=(0,B.OJ)(ie,re),oe=(0,J.ZP)(),ce=(0,$.xC)({reducer:ae,middleware:function(t){return t({serializableCheck:{ignoredActions:[B._P,B.I2,B.E7,B.ex,B.e,B.Nz]},sagaMiddleware:oe}).concat(oe)}});oe.run((function(){return function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}(this,(function(t){switch(t.label){case 0:return[4,(0,K.$6)([vt(),Wt(),_t(),Kt()])];case 1:return t.sent(),[2]}}))}));var ue,le,se,de,pe,fe,he,ge,ye,me,be,we,ve,xe,je,Se,Oe,ke,Pe,ze,Le,Ce,We,Ee,De,Re,Ie,Me,Te=(0,B.p5)(ce),Ze=function(t){return t.city.searchCitiesLoadingStatus},Ne=function(t){return t.city.citySearchResult},Ae=function(t){return t.dailyWeather.weather},_e=function(t){return t.dailyWeather.loadingStatus},Ge=function(t){return t.forecastWeather.forecastWeatherType},Fe=function(t){return t.hourlyWeather.weather},He=function(t){return t.hourlyWeather.loadingStatus},Be=function(t){return t.location.location},Ue=function(t){return t.todayWeather.weather},Ve=function(t){return t.todayWeather.loadingStatus},$e=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},qe=d.ZP.div(ue||(ue=$e(["\n\tgrid-area: calendar;\n"],["\n\tgrid-area: calendar;\n"]))),Je=d.ZP.div(le||(le=$e(["\n\tmargin-top: ","px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\trow-gap: ","px;\n"],["\n\tmargin-top: ","px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\trow-gap: ","px;\n"])),(function(t){return t.theme.margin[0]}),(function(t){return t.theme.gaps[5]})),Ke=function(){return Ke=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},Ke.apply(this,arguments)},Ye=function(){var t=function(){var t=(0,g.useState)(!1),e=t[0],n=t[1],r=(0,g.useState)([]),i=r[0],a=r[1];return(0,g.useEffect)((function(){y.MN.load("client:auth2",(function(){y.MN.client.init(m)}))}),[]),{isAuth:e,events:i,handleAuth:function(){y.MN.load("client:auth2",(function(){return G(void 0,void 0,void 0,(function(){var t,e;return F(this,(function(r){switch(r.label){case 0:return[4,y.MN.auth2.getAuthInstance().signIn()];case 1:return r.sent(),n(!0),[4,y.MN.client.calendar.events.list(b)];case 2:return t=r.sent(),e=t.result.items,a(e),[2]}}))}))}))},handleSignOut:function(){y.MN.load("client:auth2",(function(){return G(void 0,void 0,void 0,(function(){return F(this,(function(t){switch(t.label){case 0:return[4,y.MN.auth2.getAuthInstance().signOut()];case 1:return t.sent(),n(!1),a([]),[2]}}))}))}))}}}(),e=t.isAuth,n=t.events,r=t.handleAuth,i=t.handleSignOut;return(0,c.jsxs)(qe,{children:[e&&(0,c.jsx)(h,Ke({onClick:i},{children:"Sign out"})),!e&&(0,c.jsx)(h,Ke({onClick:r},{children:"Sign in"})),(0,c.jsx)(Je,{children:n.map((function(t){return(0,c.jsx)(Xe,{event:t},t.id)}))})]})},Qe=d.ZP.div(se||(se=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}(["\n\t/* width: ","%; */\n\tborder-radius: ","px;\n\tpadding: ","px;\n\tfont-size: ","px;\n\tbackground-color: ",";\n\tcolor: ",";\n"],["\n\t/* width: ","%; */\n\tborder-radius: ","px;\n\tpadding: ","px;\n\tfont-size: ","px;\n\tbackground-color: ",";\n\tcolor: ",";\n"])),(function(t){return t.theme.width[2]}),(function(t){return t.theme.borderRadius[1]}),(function(t){return t.theme.padding[4]}),(function(t){return t.theme.fontSize[6]}),(function(t){return t.theme.colors.blue}),(function(t){return t.theme.colors.white})),Xe=function(t){var e=t.event,n=e.start,r=e.end,i=e.summary,a=new Date(n.dateTime),o=new Date(r.dateTime);return(0,c.jsxs)(Qe,{children:[(0,c.jsx)("p",{children:i}),(0,c.jsxs)("p",{children:[lt(a)," - ",lt(o)]})]})},tn=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},en=d.ZP.p(de||(de=tn(["\n\tcolor: ",";\n\tfont-size: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\ttext-align: center;\n\t}\n"],["\n\tcolor: ",";\n\tfont-size: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\ttext-align: center;\n\t}\n"])),(function(t){return t.theme.colors.black}),(function(t){return t.theme.fontSize[5]}),(function(t){return t.theme.breakpoints.xl})),nn=d.ZP.div(pe||(pe=tn(["\n\tgrid-area: clock;\n\n\t@media screen and (max-width: ","px) {\n\t\tjustify-self: center;\n\t}\n"],["\n\tgrid-area: clock;\n\n\t@media screen and (max-width: ","px) {\n\t\tjustify-self: center;\n\t}\n"])),(function(t){return t.theme.breakpoints.xl})),rn=function(){return rn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},rn.apply(this,arguments)},an=function(){var t=function(){var t=(0,g.useState)(new Date),e=t[0],n=t[1],r=(0,g.useRef)(null),i=function(){n(new Date)},a=function(){null!==r.current&&clearInterval(r.current)};return(0,g.useEffect)((function(){return r.current=setInterval(i,1e3),a}),[]),e}();return(0,c.jsxs)(nn,{children:[(0,c.jsx)(en,rn({"data-test-id":"time-clock"},{children:ct(t)})),(0,c.jsx)(en,rn({"data-test-id":"date-clock"},{children:ut(t)}))]})},on=(fe=function(t,e){return fe=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},fe(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}fe(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),cn=function(t){function e(e){var n=t.call(this,e)||this;return n.state={error:!1},n}return on(e,t),e.getDerivedStateFromError=function(){return{error:!0}},e.prototype.componentDidCatch=function(t,e){console.log(t),console.log(e.componentStack)},e.prototype.render=function(){return this.state.error?(0,c.jsx)("h1",{children:"Произошла ошибка"}):this.props.children},e}(g.Component),un=d.ZP.p(he||(he=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),ln=function(){return ln=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},ln.apply(this,arguments)},sn=function(){var t=function(){var t=(0,l.v9)(Ae),e=(0,l.v9)(_e),n=(0,l.v9)(Be),r=(0,l.I0)();return(0,g.useEffect)((function(){null!==n&&r(Rt(n))}),[n]),{dailyWeather:t,dailyWeatherLoadingStatus:e}}(),e=t.dailyWeather;if(t.dailyWeatherLoadingStatus===i.LOADING)return(0,c.jsx)(Kn,{"data-test-id":"daily-weather-spinner",size:w.LARGE});if(null===e)return null;var n=e.weatherCodeList,r=e.temperatureMaxList,a=e.temperatureMinList,o=e.times;return(0,c.jsx)(c.Fragment,{children:o.map((function(t,e){var i,o=n[e],u=new Date(1e3*t),l=_[o],s=l.iconSrc,d=l.description;return(0,c.jsxs)(Sn,ln({timestamp:(i=u,i.toLocaleString("en-US",j)),iconProps:{src:s,alt:d,title:d}},{children:[(0,c.jsx)(un,ln({"data-test-id":"daily-weather-title"},{children:d})),(0,c.jsxs)(un,{children:["Max: ",r[e].toFixed(0),"°"]}),(0,c.jsxs)(un,{children:["Min: ",a[e].toFixed(0),"°"]})]}),t)}))})},dn=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},pn=d.ZP.p(ge||(ge=dn(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),fn=d.ZP.p(ye||(ye=dn(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[0]})),hn=function(){return hn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},hn.apply(this,arguments)},gn=function(){var t=function(){var t=(0,l.v9)(Fe),e=(0,l.v9)(He),n=(0,l.v9)(Be),r=(0,l.I0)();return(0,g.useEffect)((function(){null!==n&&r(St(n))}),[n]),{hourlyWeather:t,hourlyWeatherLoadingStatus:e}}(),e=t.hourlyWeather;if(t.hourlyWeatherLoadingStatus===i.LOADING)return(0,c.jsx)(Kn,{size:w.LARGE});if(null===e)return null;var n,r,a=e.temperatureList,o=e.weatherCodeList,u=e.timeList;return(0,c.jsx)(c.Fragment,{children:(n=u,r=new Date,n.map((function(t){return new Date(1e3*t)})).filter((function(t){return t.getHours()>=r.getHours()})).slice(0,7)).map((function(t,e){var n=o[e],r=_[n],i=r.iconSrc,u=r.description;return(0,c.jsxs)(Sn,hn({"data-test-id":"hourly-weather-item",timestamp:lt(t),iconProps:{src:i,alt:u,title:u}},{children:[(0,c.jsxs)(pn,hn({"data-test-id":"hourly-weather-title"},{children:[a[e].toFixed(0),"°"]})),(0,c.jsx)(fn,{children:u})]}),t.getTime())}))})},yn=d.ZP.div(me||(me=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}(["\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n\tgrid-template-rows: 1fr;\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: repeat(auto-fit, minmax(95px, 1fr));\n\t\trow-gap: ","px;\n\t}\n"],["\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n\tgrid-template-rows: 1fr;\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: repeat(auto-fit, minmax(95px, 1fr));\n\t\trow-gap: ","px;\n\t}\n"])),(function(t){return t.theme.breakpoints.xl}),(function(t){return t.theme.gaps[0]})),mn=function(){var t=(0,l.v9)(Ge);return null===(0,l.v9)(Be)?(0,c.jsx)("p",{children:"Вы отказались от обработки вашей геолокации. Выберите город"}):(0,c.jsxs)(yn,{children:["daily"===t&&(0,c.jsx)(sn,{}),"hourly"===t&&(0,c.jsx)(gn,{})]})},bn=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},wn=d.ZP.div(be||(be=bn(["\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: 1fr 82px repeat(auto, 1fr);\n\talign-items: center;\n"],["\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: 1fr 82px repeat(auto, 1fr);\n\talign-items: center;\n"]))),vn=d.ZP.p(we||(we=bn(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),xn=d.ZP.div(ve||(ve=bn(["\n\tjustify-self: center;\n"],["\n\tjustify-self: center;\n"]))),jn=function(){return jn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},jn.apply(this,arguments)},Sn=function(t){var e=t.timestamp,n=t.iconProps,r=t.children;return(0,c.jsxs)(wn,{children:[(0,c.jsx)(vn,{children:e}),(0,c.jsx)(xn,{children:(0,c.jsx)("img",jn({},n))}),r]})},On=d.ZP.div(xe||(xe=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}(["\n\tgrid-area: forecastswitch;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: ","px;\n\tcolumn-gap: ","px;\n"],["\n\tgrid-area: forecastswitch;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: ","px;\n\tcolumn-gap: ","px;\n"])),(function(t){return t.theme.height[0]}),(function(t){return t.theme.gaps[0]})),kn=function(){return kn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},kn.apply(this,arguments)},Pn=function(){var t=(0,l.I0)(),e=function(e){return function(){t(ee(e))}};return(0,c.jsxs)(On,{children:[(0,c.jsx)(h,kn({onClick:e("daily")},{children:"Daily"})),(0,c.jsx)(h,kn({onClick:e("hourly")},{children:"Hourly"}))]})},zn=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},Ln=d.ZP.div(je||(je=zn(["\n\tdisplay: grid;\n\tgrid-template-areas: '. . .' '. main .' '. . .';\n\tgrid-template-columns: auto minmax(0, ","px) auto;\n\tgrid-template-rows: auto auto auto;\n\n\tbackground: url(",") repeat;\n\tbackground-size: cover;\n\n\twidth: ","vw;\n\tmin-height: ","vh;\n"],["\n\tdisplay: grid;\n\tgrid-template-areas: '. . .' '. main .' '. . .';\n\tgrid-template-columns: auto minmax(0, ","px) auto;\n\tgrid-template-rows: auto auto auto;\n\n\tbackground: url(",") repeat;\n\tbackground-size: cover;\n\n\twidth: ","vw;\n\tmin-height: ","vh;\n"])),(function(t){return t.theme.width[1]}),(function(t){return t.background}),(function(t){return t.theme.width[2]}),(function(t){return t.theme.height[2]})),Cn=d.ZP.main(Se||(Se=zn(["\n\tgrid-area: main;\n\trow-gap: ","px;\n\n\tdisplay: grid;\n\tgrid-template-areas:\n\t\t'clock search'\n\t\t'calendar .'\n\t\t'calendar .'\n\t\t'todayswitcher forecastswitch'\n\t\t'weather weather';\n\n\tbackground-color: ",";\n\tbackdrop-filter: blur(","px);\n\n\tpadding: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\tpadding: ","px;\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-template-areas:\n\t\t\t'clock'\n\t\t\t'search'\n\t\t\t'calendar'\n\t\t\t'forecastswitch'\n\t\t\t'weather';\n\t}\n"],["\n\tgrid-area: main;\n\trow-gap: ","px;\n\n\tdisplay: grid;\n\tgrid-template-areas:\n\t\t'clock search'\n\t\t'calendar .'\n\t\t'calendar .'\n\t\t'todayswitcher forecastswitch'\n\t\t'weather weather';\n\n\tbackground-color: ",";\n\tbackdrop-filter: blur(","px);\n\n\tpadding: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\tpadding: ","px;\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-template-areas:\n\t\t\t'clock'\n\t\t\t'search'\n\t\t\t'calendar'\n\t\t\t'forecastswitch'\n\t\t\t'weather';\n\t}\n"])),(function(t){return t.theme.gaps[5]}),(function(t){return t.theme.colors.transparentWhite}),(function(t){return t.theme.blur[0]}),(function(t){return t.theme.padding[0]}),(function(t){return t.theme.breakpoints.xl}),(function(t){return t.theme.padding[3]})),Wn=d.ZP.div(Oe||(Oe=zn(["\n\tgrid-area: weather;\n\tdisplay: grid;\n\tgrid-template-columns: minmax(0px, 200px) 1fr;\n\n\tbackground-color: ",";\n\tborder-radius: ","px;\n\tpadding: ","px;\n\n\tgrid-template-areas: 'today forecast';\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: 1fr;\n\t\trow-gap: ","px;\n\t\tgrid-template-rows: auto;\n\t\tgrid-template-areas: 'today' 'forecast';\n\t}\n"],["\n\tgrid-area: weather;\n\tdisplay: grid;\n\tgrid-template-columns: minmax(0px, 200px) 1fr;\n\n\tbackground-color: ",";\n\tborder-radius: ","px;\n\tpadding: ","px;\n\n\tgrid-template-areas: 'today forecast';\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: 1fr;\n\t\trow-gap: ","px;\n\t\tgrid-template-rows: auto;\n\t\tgrid-template-areas: 'today' 'forecast';\n\t}\n"])),(function(t){return t.theme.colors.transparentWhite}),(function(t){return t.theme.borderRadius[1]}),(function(t){return t.theme.padding[3]}),(function(t){return t.theme.breakpoints.xl}),(function(t){return t.theme.gaps[1]})),En=function(){return En=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},En.apply(this,arguments)},Dn=function(){var t,e=(0,l.v9)(Ue);return(0,c.jsx)(Ln,En({background:(t=null==e?void 0:e.id,void 0===t&&(t=800),t>=200&&t<300?W:t>=300&&t<400?z:t>=500&&t<600?L:t>=600&&t<700?C:t>=600&&t<700?P:800===t?O:t>800&&t<900?k:O)},{children:(0,c.jsxs)(Cn,{children:[(0,c.jsx)(an,{}),(0,c.jsx)(An,{}),(0,c.jsx)(Ye,{}),(0,c.jsx)(Pn,{}),(0,c.jsxs)(Wn,{children:[(0,c.jsx)(nr,{}),(0,c.jsx)(mn,{})]})]})}))},Rn=n(386),In=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},Mn=d.ZP.div(ke||(ke=In(["\n\tposition: relative;\n\tgrid-area: search;\n"],["\n\tposition: relative;\n\tgrid-area: search;\n"]))),Tn=d.ZP.input(Pe||(Pe=In(["\n\theight: ","px;\n\tpadding: ","px;\n\n\tfont-size: ","px;\n\n\tborder-radius: ","px;\n\n\t&:focus {\n\t\toutline: 1px solid;\n\t}\n\n\twidth: 100%;\n\n\ttransition: all 0.2s ease;\n"],["\n\theight: ","px;\n\tpadding: ","px;\n\n\tfont-size: ","px;\n\n\tborder-radius: ","px;\n\n\t&:focus {\n\t\toutline: 1px solid;\n\t}\n\n\twidth: 100%;\n\n\ttransition: all 0.2s ease;\n"])),(function(t){return t.theme.height[3]}),(function(t){return t.theme.padding[2]}),(function(t){return t.theme.fontSize[3]}),(function(t){return t.theme.borderRadius[0]})),Zn=function(){return Zn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},Zn.apply(this,arguments)},Nn={city:""},An=function(){var t=H().location,e=(0,l.I0)(),n=function(){e(Qt(t))},r=function(t){return function(n){t(n),e(Vt(n.target.value))}},i=function(t){return function(n){var r;t(n),e(Vt(null!==(r=null==n?void 0:n.target.value)&&void 0!==r?r:""))}};return(0,c.jsx)(Mn,{children:(0,c.jsx)(Rn.J9,Zn({initialValues:Nn,onSubmit:function(t){e(Vt(t.city))}},{children:function(t){var e=t.values,a=t.handleChange,o=t.handleReset;return(0,c.jsxs)(Rn.l0,{children:[(0,c.jsx)(h,Zn({onClick:n},{children:"Reset City"})),(0,c.jsx)("h3",{children:"Search city"}),(0,c.jsx)(Tn,{name:"city",id:"city","data-test-id":"city-search-input",type:"search",value:e.city,onChange:r(a)}),(0,c.jsx)(Un,{onClearInputValue:i(o)})]})}}))})},_n=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},Gn=d.ZP.div(ze||(ze=_n(["\n\tbackground-color: ",";\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(1fr, auto);\n\n\twidth: ","%;\n\tleft: 0;\n\n\tposition: absolute;\n\tz-index: 1;\n\tmax-height: ","px;\n\toverflow-y: auto;\n"],["\n\tbackground-color: ",";\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(1fr, auto);\n\n\twidth: ","%;\n\tleft: 0;\n\n\tposition: absolute;\n\tz-index: 1;\n\tmax-height: ","px;\n\toverflow-y: auto;\n"])),(function(t){return t.theme.colors.white}),(function(t){return t.theme.width[2]}),(function(t){return t.theme.height[4]})),Fn=d.ZP.div(Le||(Le=_n(["\n\theight: ","px;\n\tborder-bottom: 1px solid ",";\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto;\n\n\talign-items: center;\n\tpadding: ","px;\n"],["\n\theight: ","px;\n\tborder-bottom: 1px solid ",";\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto;\n\n\talign-items: center;\n\tpadding: ","px;\n"])),(function(t){return t.theme.height[5]}),(function(t){return t.theme.colors.black}),(function(t){return t.theme.padding[3]})),Hn=d.ZP.p(Ce||(Ce=_n(["\n\tfont-size: ",";\n"],["\n\tfont-size: ",";\n"])),(function(t){return t.theme.fontSize[0]})),Bn=function(){return Bn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},Bn.apply(this,arguments)},Un=function(t){var e=t.onClearInputValue,n=(0,l.I0)(),r=(0,l.v9)(Ze),a=(0,l.v9)(Ne),o=function(t){return function(){n(Ht(t));var r=t.lon,i=t.lat;n(Qt({lon:r,lat:i})),e()}};return r===i.LOADING?(0,c.jsx)(Gn,{children:(0,c.jsx)(Kn,{"data-test-id":"city-search-spinner",size:w.LARGE})}):(0,c.jsx)(Gn,Bn({"data-test-id":"city-search-result-wrapper"},{children:null==a?void 0:a.map((function(t){var e=t.id,n=t.name,r=t.country,i=t.countryCode;return(0,c.jsxs)(Fn,{children:[(0,c.jsxs)(Hn,{children:[n,", ",r,", ",i]}),(0,c.jsx)(h,Bn({onClick:o(t)},{children:"select"}))]},e)}))}))},Vn=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},$n=d.ZP.img(We||(We=Vn(["\n\talign-self: center;\n\tjustify-self: center;\n\n\twidth: ","px;\n\theight: ","px;\n"],["\n\talign-self: center;\n\tjustify-self: center;\n\n\twidth: ","px;\n\theight: ","px;\n"])),(function(t){return t.size}),(function(t){return t.size})),qn=d.ZP.div(Ee||(Ee=Vn(["\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: grid;\n\tgrid-template-rows: 1fr;\n\tgrid-template-columns: 1fr;\n\talign-items: center;\n\tjustify-content: center;\n"],["\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: grid;\n\tgrid-template-rows: 1fr;\n\tgrid-template-columns: 1fr;\n\talign-items: center;\n\tjustify-content: center;\n"]))),Jn=function(){return Jn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},Jn.apply(this,arguments)},Kn=function(t){var e=t.size,n=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}(t,["size"]);return(0,c.jsx)(qn,Jn({"data-test-id":"spinner-wrapper"},n,{children:(0,c.jsx)($n,{src:Z,size:e,alt:"Loading",title:"Loading"})}))},Yn=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},Qn=d.ZP.div(De||(De=Yn(["\n\tgrid-area: today;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(auto, 5);\n\tjustify-content: center;\n\talign-items: center;\n\n\n"],["\n\tgrid-area: today;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(auto, 5);\n\tjustify-content: center;\n\talign-items: center;\n\n\n"]))),Xn=d.ZP.p(Re||(Re=Yn(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),tr=d.ZP.img(Ie||(Ie=Yn(["\n\tjustify-self: center;\n"],["\n\tjustify-self: center;\n"]))),er=function(){return er=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},er.apply(this,arguments)},nr=function(){var t=function(){var t=(0,l.I0)(),e=(0,l.v9)(Ue),n=(0,l.v9)(Ve),r=(0,l.v9)(Be),a=H().location;return(0,g.useEffect)((function(){null!==a&&t(Qt(a))}),[a]),(0,g.useEffect)((function(){null!==r&&t(gt(r))}),[r]),null===r?{todayWeather:e,replaceContent:(0,c.jsx)("p",{children:"Вы отказались от обработки вашей геолокации. Выберите город"})}:n===i.LOADING?{todayWeather:e,replaceContent:(0,c.jsx)(Kn,{size:w.LARGE})}:{todayWeather:e,replaceContent:null}}(),e=t.todayWeather,n=t.replaceContent;if(null!==n)return(0,c.jsx)(Qn,er({"data-test-id":"today-weather-spinner-wrapper"},{children:n}));if(null===e)return null;var r=e.iconCode,a=e.description,o=e.feelsLike,u=e.temperature,s=e.cityName;return(0,c.jsxs)(Qn,er({"data-test-id":"today-weather-wrapper"},{children:[(0,c.jsx)(Xn,er({"data-test-id":"today-weather-title"},{children:"Today"})),(0,c.jsx)(Xn,er({"data-test-id":"today-weather-text"},{children:s})),(0,c.jsx)(tr,{"data-test-id":"today-weather-image",src:"https://openweathermap.org/img/wn/".concat(r,"@2x.png"),alt:a,title:a}),(0,c.jsx)(Xn,{children:a}),(0,c.jsxs)(Xn,{children:[u.toFixed(0),"°"]}),(0,c.jsxs)(Xn,{children:["feels like ",o.toFixed(0),"°"]})]}))},rr=(0,d.vJ)(Me||(Me=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}(['\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\thtml,\n\tbody {\n\t\toverflow-x: hidden;\n\t\tdisplay: grid;\n\t\tgrid-template-rows: 100%;\n\t\tgrid-template-columns: 1fr;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: var(--font-family);\n\t}\n\n\ta {\n\t\ttext-decoration: none;\n\t\tcolor: inherit;\n\t}\n\n\tbutton {\n\t\tborder: none;\n\t}\n\n\tli {\n\t\tlist-style-type: none; \n\t}\n\t\n\tul {\n\t\tmargin-left: 0;\n\t\tpadding-left: 0; \n\t}\n\n\t:root {\n\t\t--font-family: "Helvetica Neue", sans-serif;\n\t}\n'],['\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\thtml,\n\tbody {\n\t\toverflow-x: hidden;\n\t\tdisplay: grid;\n\t\tgrid-template-rows: 100%;\n\t\tgrid-template-columns: 1fr;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: var(--font-family);\n\t}\n\n\ta {\n\t\ttext-decoration: none;\n\t\tcolor: inherit;\n\t}\n\n\tbutton {\n\t\tborder: none;\n\t}\n\n\tli {\n\t\tlist-style-type: none; \n\t}\n\t\n\tul {\n\t\tmargin-left: 0;\n\t\tpadding-left: 0; \n\t}\n\n\t:root {\n\t\t--font-family: "Helvetica Neue", sans-serif;\n\t}\n']))),ir={colors:{white:"#FFFFFF",transparentWhite:"rgba(217, 217, 217, 0.3)",blue:"rgb(26, 115, 232)",black:"#000000",lightBlack:"#222831"},borderRadius:[5,10,20],width:[90,1110,100,60],height:[30,974,100,38,300,60],padding:[50,70,15,10,5],fontSize:[17,20,19,25,30,41,12],gaps:[28,36,39,48,58,10],margin:[20,250,150],breakpoints:{xl:1e3},blur:[7.5],transition:{light:"all 0.2s ease"}},ar=function(){return ar=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},ar.apply(this,arguments)},or=function(){return or=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},or.apply(this,arguments)},cr=document.getElementById("root");if(null===cr)throw new Error("Container element not found");(0,u.s)(cr).render((0,c.jsx)(l.zt,or({store:ce},{children:(0,c.jsx)(s.r,or({loading:null,persistor:Te},{children:(0,c.jsx)(cn,{children:(0,c.jsx)((function(){return(0,c.jsxs)(d.f6,ar({theme:ir},{children:[(0,c.jsx)(rr,{}),(0,c.jsx)(Dn,{})]}))}),{})})}))})))}},n={};function r(t){var i=n[t];if(void 0!==i)return i.exports;var a=n[t]={exports:{}};return e[t].call(a.exports,a,a.exports,r),a.exports}r.m=e,t=[],r.O=(e,n,i,a)=>{if(!n){var o=1/0;for(s=0;s<t.length;s++){for(var[n,i,a]=t[s],c=!0,u=0;u<n.length;u++)(!1&a||o>=a)&&Object.keys(r.O).every((t=>r.O[t](n[u])))?n.splice(u--,1):(c=!1,a<o&&(o=a));if(c){t.splice(s--,1);var l=i();void 0!==l&&(e=l)}}return e}a=a||0;for(var s=t.length;s>0&&t[s-1][2]>a;s--)t[s]=t[s-1];t[s]=[n,i,a]},r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{var t={143:0};r.O.j=e=>0===t[e];var e=(e,n)=>{var i,a,[o,c,u]=n,l=0;if(o.some((e=>0!==t[e]))){for(i in c)r.o(c,i)&&(r.m[i]=c[i]);if(u)var s=u(r)}for(e&&e(n);l<o.length;l++)a=o[l],r.o(t,a)&&t[a]&&t[a][0](),t[a]=0;return r.O(s)},n=self.webpackChunk=self.webpackChunk||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})(),r.nc=void 0;var i=r.O(void 0,[230],(()=>r(356)));i=r.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,