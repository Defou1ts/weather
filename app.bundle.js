(()=>{"use strict";var t,e={692:(t,e,n)=>{var r,i,a,o=n(246),c=n(634),u=n(780),l=n(536),s=n(924),d=s.ZP.button(r||(i=["\n\tmin-width: ","px;\n\tmin-height: ","px;\n\n\tborder-radius: ","px;\n\n\tbackground-color: ",";\n\tcolor: ",";\n\n\tfont-size: ","px;\n\n\tdisplay: grid;\n\talign-items: center;\n\tjustify-content: center;\n\tcursor: pointer;\n\n\ttransition: ",";\n\n\t&:hover {\n\t\ttransform: scale(1.01);\n\t\tbackground-color: ",";\n\t}\n"],a=["\n\tmin-width: ","px;\n\tmin-height: ","px;\n\n\tborder-radius: ","px;\n\n\tbackground-color: ",";\n\tcolor: ",";\n\n\tfont-size: ","px;\n\n\tdisplay: grid;\n\talign-items: center;\n\tjustify-content: center;\n\tcursor: pointer;\n\n\ttransition: ",";\n\n\t&:hover {\n\t\ttransform: scale(1.01);\n\t\tbackground-color: ",";\n\t}\n"],Object.defineProperty?Object.defineProperty(i,"raw",{value:a}):i.raw=a,r=i),(function(t){return t.theme.width[0]}),(function(t){return t.theme.height[0]}),(function(t){return t.theme.borderRadius[1]}),(function(t){return t.theme.colors.black}),(function(t){return t.theme.colors.white}),(function(t){return t.theme.fontSize[2]}),(function(t){return t.theme.transition.light}),(function(t){return t.theme.colors.lightBlack})),p=function(){return p=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},p.apply(this,arguments)},f=function(t){var e=t.children,n=t.onClick;return(0,o.jsx)(d,p({"data-test-id":"button",onClick:n},{children:e}))},h=n(378),g=n(278),y={clientId:null!=="126193467251-3km52qm9oejptlll0gkgefs1kceu9kni.apps.googleusercontent.com"?"126193467251-3km52qm9oejptlll0gkgefs1kceu9kni.apps.googleusercontent.com":"",apiKey:null!=="AIzaSyB3uVQBS8rSzchO6oXWV6Mx45KtYwEoN9U"?"AIzaSyB3uVQBS8rSzchO6oXWV6Mx45KtYwEoN9U":"",scope:"https://www.googleapis.com/auth/calendar.events",discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"]},m=new Date;m.setHours(23),m.setMinutes(59),m.setSeconds(59),m.setMilliseconds(999);var b,w={calendarId:"primary",timeMin:(new Date).toISOString(),showDeleted:!1,singleEvents:!0,maxResults:10,orderBy:"startTime",timeMax:m.toISOString()};!function(t){t.IDLE="idle",t.ERROR="error",t.SUCCESS="success",t.LOADING="loading"}(b||(b={}));var v,x={hour:"numeric",minute:"numeric",second:"numeric"},j={weekday:"long",month:"long",year:"numeric",day:"numeric"},S={weekday:"long"},O={hour:"numeric",minute:"numeric"};!function(t){t[t.SMALL=16]="SMALL",t[t.MEDIUM=32]="MEDIUM",t[t.LARGE=64]="LARGE"}(v||(v={}));const k=n.p+"d7a3523274339e38d70487e6204c5ac1.jpg",P=n.p+"33a640e8b41480258625a8e839dae962.jpg",z=n.p+"aad0e23868dd1b2e57e07be34cd384cc.jpg",L=n.p+"7f797542afc59a7e98ef715c289c758a.jpg",C=n.p+"9510fdd0c1c2ed01f95b9f6da8724f77.jpg",E=n.p+"eda59e439ac27aacd88ba7594a46179e.jpg",W=n.p+"b7987f014cb31ddbdc1d84847e4e2d84.jpg",D=(n.p,n.p+"21d0166d556b45f9d0fbb67bd5c33715.png"),I=(n.p,n.p+"7eb74c4e0a99eebd4f9f79884f33d629.png"),R=(n.p,n.p+"85ba87958a828a21ba4b4c19cce69c33.png"),M=n.p+"eaa6309e7e00f8a46060e019c4c2a7fd.png",T=(n.p,n.p,n.p,n.p+"e78c8c56627e697f1174f9287922bcda.png"),A=n.p+"b3004cf8bc60dbb89df301fce2c813c0.png",Z=n.p+"8af844f50b1bed4dd315722dff786bcd.gif",N=n.p+"fb274bd2c737e393f248104b34170bd6.png";var _,G={0:{iconSrc:D,description:"Clear sky"},1:{iconSrc:I,description:"Mainly clear"},2:{iconSrc:I,description:"Partly cloudy"},3:{iconSrc:I,description:"Overcast"},45:{iconSrc:R,description:"Fog"},48:{iconSrc:R,description:"depositing rime fog"},51:{iconSrc:M,description:"Drizzle Light"},53:{iconSrc:M,description:"Drizzle Moderate"},55:{iconSrc:T,description:"Drizzle Intesity"},56:{iconSrc:M,description:"Freezing Drizzle Light"},57:{iconSrc:T,description:"Freezing Drizzle Intensity"},61:{iconSrc:M,description:"Slight rain"},63:{iconSrc:T,description:"Moderate rain"},65:{iconSrc:T,description:"Heavy intensity rain"},66:{iconSrc:M,description:"Light freezing Rain"},67:{iconSrc:T,description:"Heavy intensity freezing rain"},71:{iconSrc:A,description:"Slight snow fall"},73:{iconSrc:A,description:"Moderate snow fall"},75:{iconSrc:A,description:"Heavy intensity snow fall"},77:{iconSrc:A,description:"Snow grains"},80:{iconSrc:T,description:"Slight rain showers"},81:{iconSrc:T,description:"Moderate rain showers"},82:{iconSrc:T,description:"Heavy intensity rain showers"},85:{iconSrc:A,description:"Slight snow shower"},86:{iconSrc:A,description:"Heavy snow shower"},95:{iconSrc:N,description:"Thunderstorm"},96:{iconSrc:N,description:"Thunderstorm with slight hail"},99:{iconSrc:N,description:"Thunderstorm with heavy hail"}},F=n(878),H=n(494),B=n(845),U=n(609),V=n(758),$=n(701),q=n(960),J=n(268),K=function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function c(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,c)}u((r=r.apply(t,e||[])).next())}))},Y=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},Q="api.open-meteo.com",X=J.Z.create({baseURL:"https://".concat(Q,"/v1/forecast"),params:{timezone:"Europe/Moscow",timeformat:"unixtime"}}),tt={getHourlyWeather:function(t,e){return K(this,void 0,void 0,(function(){return Y(this,(function(n){switch(n.label){case 0:return[4,X.get("",{params:{longitude:t,latitude:e,hourly:["temperature_2m","weathercode"].join(","),forecast_days:1}})];case 1:return[2,n.sent().data]}}))}))},getDailyWeather:function(t,e){return K(this,void 0,void 0,(function(){return Y(this,(function(n){switch(n.label){case 0:return[4,X.get("",{params:{longitude:t,latitude:e,daily:["weathercode","temperature_2m_max","temperature_2m_min"].join(",")}})];case 1:return[2,n.sent().data]}}))}))},searchCityByName:function(t){return K(this,void 0,void 0,(function(){return Y(this,(function(e){switch(e.label){case 0:return[4,J.Z.get("https://geocoding-".concat(Q,"/v1/search"),{params:{name:t}})];case 1:return[2,e.sent().data]}}))}))}},et=function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function c(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,c)}u((r=r.apply(t,e||[])).next())}))},nt=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},rt=J.Z.create({baseURL:"https://api.openweathermap.org/data/2.5",params:{appid:"aebbeabbc9b460ceaa8d3cd753952c38",units:"metric"}}),it={getTodayWeatherByCityName:function(t){return et(this,void 0,void 0,(function(){return nt(this,(function(e){switch(e.label){case 0:return[4,rt.get("/weather",{params:{q:t}})];case 1:return[2,e.sent().data]}}))}))},getTodayWeatherByCoords:function(t,e){return et(this,void 0,void 0,(function(){return nt(this,(function(n){switch(n.label){case 0:return[4,rt.get("/weather",{params:{lat:e,lon:t}})];case 1:return[2,n.sent().data]}}))}))}},at=function(t){return t.toLocaleString("en-US",x)},ot=function(t){return t.toLocaleString("en-US",j)},ct=function(t){return t.toLocaleString("ru-RU",O)},ut=function(t){var e=t.id,n=t.name,r=t.country;return{id:e,name:n,countryCode:t.country_code,country:r,lon:t.longitude,lat:t.latitude}},lt={weather:null,loadingStatus:b.IDLE},st=(0,U.oM)({name:"todayWeather",initialState:lt,reducers:{fetchTodayWeather:function(t,e){},setTodayWeather:function(t,e){t.weather=function(t){var e=t.weather,n=t.main,r=t.name,i=e[0],a=i.icon,o=i.description,c=i.id;return{iconCode:a,description:o,feelsLike:n.feels_like,temperature:n.temp,cityName:r,id:c}}(e.payload)},setTodayLoadingStatus:function(t,e){t.loadingStatus=e.payload}}}),dt=(_=st.actions).setTodayWeather,pt=_.setTodayLoadingStatus,ft=_.fetchTodayWeather;const ht=st.reducer;var gt,yt=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function mt(t){var e;return yt(this,(function(n){switch(n.label){case 0:return[4,(0,q.gz)(pt(b.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,(0,q.RE)(it.getTodayWeatherByCoords,t.payload.lon,t.payload.lat)];case 3:return e=n.sent(),[4,(0,q.gz)(dt(e))];case 4:return n.sent(),[4,(0,q.gz)(pt(b.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,(0,q.gz)(pt(b.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function bt(){return yt(this,(function(t){switch(t.label){case 0:return[4,(0,q.ib)(ft.type,mt)];case 1:return t.sent(),[2]}}))}var wt={weather:null,loadingStatus:b.IDLE},vt=(0,U.oM)({name:"hourlyWeather",initialState:wt,reducers:{fetchHourlyWeather:function(t,e){},setHourlyWeather:function(t,e){t.weather=function(t){var e=t.hourly;return{weatherCodeList:e.weathercode,temperatureList:e.temperature_2m,timeList:e.time}}(e.payload)},setHourlyLoadingStatus:function(t,e){t.loadingStatus=e.payload}}}),xt=(gt=vt.actions).fetchHourlyWeather,jt=gt.setHourlyWeather,St=gt.setHourlyLoadingStatus;const Ot=vt.reducer;var kt,Pt=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function zt(t){var e;return Pt(this,(function(n){switch(n.label){case 0:return[4,(0,q.gz)(St(b.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,(0,q.RE)(tt.getHourlyWeather,t.payload.lon,t.payload.lat)];case 3:return e=n.sent(),[4,(0,q.gz)(jt(e))];case 4:return n.sent(),[4,(0,q.gz)(St(b.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,(0,q.gz)(St(b.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function Lt(){return Pt(this,(function(t){switch(t.label){case 0:return[4,(0,q.ib)(xt.type,zt)];case 1:return t.sent(),[2]}}))}var Ct={weather:null,loadingStatus:b.IDLE},Et=(0,U.oM)({name:"dailyWeather",initialState:Ct,reducers:{fetchDailyWeather:function(t,e){},setDailyWeather:function(t,e){t.weather=function(t){var e=t.daily,n=e.weathercode,r=e.temperature_2m_max;return{weatherCodeList:n,temperatureMinList:e.temperature_2m_min,temperatureMaxList:r,times:e.time}}(e.payload)},setDailyLoadingStatus:function(t,e){t.loadingStatus=e.payload}}}),Wt=(kt=Et.actions).fetchDailyWeather,Dt=kt.setDailyWeather,It=kt.setDailyLoadingStatus;const Rt=Et.reducer;var Mt,Tt=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function At(t){var e;return Tt(this,(function(n){switch(n.label){case 0:return[4,(0,q.gz)(It(b.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,(0,q.RE)(tt.getDailyWeather,t.payload.lon,t.payload.lat)];case 3:return e=n.sent(),[4,(0,q.gz)(Dt(e))];case 4:return n.sent(),[4,(0,q.gz)(It(b.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,(0,q.gz)(It(b.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function Zt(){return Tt(this,(function(t){switch(t.label){case 0:return[4,(0,q.ib)(Wt.type,At)];case 1:return t.sent(),[2]}}))}var Nt={currentCity:null,citySearchResult:null,searchCitiesLoadingStatus:b.IDLE},_t=(0,U.oM)({name:"city",initialState:Nt,reducers:{setCurrentCity:function(t,e){t.currentCity=e.payload},setSearchCitiesLoadingStatus:function(t,e){t.searchCitiesLoadingStatus=e.payload},setCitiesSearchResult:function(t,e){var n,r;t.citySearchResult=null!==(r=null===(n=e.payload.results)||void 0===n?void 0:n.map(ut))&&void 0!==r?r:null},fetchCityByName:function(t,e){}}}),Gt=(Mt=_t.actions).setCurrentCity,Ft=Mt.setSearchCitiesLoadingStatus,Ht=Mt.setCitiesSearchResult,Bt=Mt.fetchCityByName;const Ut=_t.reducer;var Vt=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};function $t(t){var e;return Vt(this,(function(n){switch(n.label){case 0:return[4,(0,q.gz)(Ft(b.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,(0,q.RE)(tt.searchCityByName,t.payload)];case 3:return e=n.sent(),[4,(0,q.gz)(Ht(e))];case 4:return n.sent(),[4,(0,q.gz)(Ft(b.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,(0,q.gz)(Ft(b.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function qt(){return Vt(this,(function(t){switch(t.label){case 0:return[4,(0,q.Fm)(Bt.type,$t)];case 1:return t.sent(),[2]}}))}var Jt=(0,U.oM)({name:"location",initialState:{location:null},reducers:{setLocation:function(t,e){t.location=e.payload}}}),Kt=Jt.actions.setLocation;const Yt=Jt.reducer;var Qt=(0,U.oM)({name:"forecastWeather",initialState:{forecastWeatherType:"daily"},reducers:{setForecastWeatherType:function(t,e){t.forecastWeatherType=e.payload}}}),Xt=Qt.actions.setForecastWeatherType;const te=Qt.reducer;var ee,ne=(0,U.oM)({name:"calendar",initialState:{events:[],isAuth:!1},reducers:{setCalendarEvents:function(t,e){t.events=e.payload},setCalendarAuth:function(t,e){t.isAuth=e.payload}}}),re=(ee=ne.actions).setCalendarEvents,ie=ee.setCalendarAuth;const ae=ne.reducer;var oe=(0,B.UY)({todayWeather:ht,hourlyWeather:Ot,dailyWeather:Rt,forecastWeather:te,city:Ut,location:Yt,calendar:ae}),ce=(0,V.getPersistConfig)({key:"root",storage:H.Z,blacklist:[],rootReducer:oe}),ue=(0,F.OJ)(ce,oe),le=(0,$.ZP)(),se=(0,U.xC)({reducer:ue,middleware:function(t){return t({serializableCheck:{ignoredActions:[F._P,F.I2,F.E7,F.ex,F.e,F.Nz]},sagaMiddleware:le}).concat(le)}});le.run((function(){return function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}(this,(function(t){switch(t.label){case 0:return[4,(0,q.$6)([bt(),Lt(),Zt(),qt()])];case 1:return t.sent(),[2]}}))}));var de,pe,fe,he,ge,ye,me,be,we,ve,xe,je,Se,Oe,ke,Pe,ze,Le,Ce,Ee,We,De,Ie,Re,Me,Te,Ae,Ze,Ne=(0,F.p5)(se),_e=function(t){return t.calendar.events},Ge=function(t){return t.calendar.isAuth},Fe=function(t){return t.city.searchCitiesLoadingStatus},He=function(t){return t.city.citySearchResult},Be=function(t){return t.dailyWeather.weather},Ue=function(t){return t.dailyWeather.loadingStatus},Ve=function(t){return t.forecastWeather.forecastWeatherType},$e=function(t){return t.hourlyWeather.weather},qe=function(t){return t.hourlyWeather.loadingStatus},Je=function(t){return t.location.location},Ke=function(t){return t.todayWeather.weather},Ye=function(t){return t.todayWeather.loadingStatus},Qe=function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function c(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,c)}u((r=r.apply(t,e||[])).next())}))},Xe=function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){o.label=c[1];break}if(6===c[0]&&o.label<i[1]){o.label=i[1],i=c;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(c);break}i[2]&&o.ops.pop(),o.trys.pop();continue}c=e.call(t,o)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},tn=function(t){void 0===t&&(t={});var e=(0,h.useState)(null),n=e[0],r=e[1],i=(0,h.useState)(null),a=i[0],o=i[1],c=function(t){var e=t.coords,n=e.latitude,i=e.longitude;r({lat:n,lon:i})},u=function(t){o(t)};return(0,h.useEffect)((function(){navigator.geolocation.getCurrentPosition(c,u,t)}),[]),{location:n,error:a}},en=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},nn=s.ZP.div(de||(de=en(["\n\tgrid-area: calendar;\n"],["\n\tgrid-area: calendar;\n"]))),rn=s.ZP.div(pe||(pe=en(["\n\tmargin-top: ","px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\trow-gap: ","px;\n"],["\n\tmargin-top: ","px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\trow-gap: ","px;\n"])),(function(t){return t.theme.margin[0]}),(function(t){return t.theme.gaps[5]})),an=function(){return an=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},an.apply(this,arguments)},on=function(){var t=function(){var t=(0,u.v9)(Ge),e=(0,u.v9)(_e),n=(0,u.I0)();return(0,h.useEffect)((function(){g.MN.load("client:auth2",(function(){g.MN.client.init(y)}))}),[]),{isAuth:t,events:e,handleAuth:function(){g.MN.load("client:auth2",(function(){return Qe(void 0,void 0,void 0,(function(){var t,e;return Xe(this,(function(r){switch(r.label){case 0:return[4,g.MN.auth2.getAuthInstance().signIn()];case 1:return r.sent(),n(ie(!0)),[4,g.MN.client.calendar.events.list(w)];case 2:return t=r.sent(),e=t.result.items,n(re(e)),[2]}}))}))}))},handleSignOut:function(){g.MN.load("client:auth2",(function(){return Qe(void 0,void 0,void 0,(function(){return Xe(this,(function(t){switch(t.label){case 0:return[4,g.MN.auth2.getAuthInstance().signOut()];case 1:return t.sent(),n(ie(!1)),n(re([])),[2]}}))}))}))}}}(),e=t.isAuth,n=t.events,r=t.handleAuth,i=t.handleSignOut;return(0,o.jsxs)(nn,{children:[e&&(0,o.jsx)(f,an({onClick:i},{children:"Sign out"})),!e&&(0,o.jsx)(f,an({onClick:r},{children:"Sign in"})),(0,o.jsx)(rn,{children:n.map((function(t){return(0,o.jsx)(un,{event:t},t.id)}))})]})},cn=s.ZP.div(fe||(fe=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}(["\n\t/* width: ","%; */\n\tborder-radius: ","px;\n\tpadding: ","px;\n\tfont-size: ","px;\n\tbackground-color: ",";\n\tcolor: ",";\n"],["\n\t/* width: ","%; */\n\tborder-radius: ","px;\n\tpadding: ","px;\n\tfont-size: ","px;\n\tbackground-color: ",";\n\tcolor: ",";\n"])),(function(t){return t.theme.width[2]}),(function(t){return t.theme.borderRadius[1]}),(function(t){return t.theme.padding[4]}),(function(t){return t.theme.fontSize[6]}),(function(t){return t.theme.colors.blue}),(function(t){return t.theme.colors.white})),un=function(t){var e=t.event,n=e.start,r=e.end,i=e.summary,a=new Date(n.dateTime),c=new Date(r.dateTime);return(0,o.jsxs)(cn,{children:[(0,o.jsx)("p",{children:i}),(0,o.jsxs)("p",{children:[ct(a)," - ",ct(c)]})]})},ln=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},sn=s.ZP.p(he||(he=ln(["\n\tcolor: ",";\n\tfont-size: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\ttext-align: center;\n\t}\n"],["\n\tcolor: ",";\n\tfont-size: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\ttext-align: center;\n\t}\n"])),(function(t){return t.theme.colors.black}),(function(t){return t.theme.fontSize[5]}),(function(t){return t.theme.breakpoints.xl})),dn=s.ZP.div(ge||(ge=ln(["\n\tgrid-area: clock;\n\n\t@media screen and (max-width: ","px) {\n\t\tjustify-self: center;\n\t}\n"],["\n\tgrid-area: clock;\n\n\t@media screen and (max-width: ","px) {\n\t\tjustify-self: center;\n\t}\n"])),(function(t){return t.theme.breakpoints.xl})),pn=function(){return pn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},pn.apply(this,arguments)},fn=function(){var t=function(){var t=(0,h.useState)(new Date),e=t[0],n=t[1],r=(0,h.useRef)(null),i=function(){n(new Date)},a=function(){null!==r.current&&clearInterval(r.current)};return(0,h.useEffect)((function(){return r.current=setInterval(i,1e3),a}),[]),e}();return(0,o.jsxs)(dn,{children:[(0,o.jsx)(sn,pn({"data-test-id":"time-clock"},{children:at(t)})),(0,o.jsx)(sn,pn({"data-test-id":"date-clock"},{children:ot(t)}))]})},hn=(ye=function(t,e){return ye=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},ye(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}ye(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),gn=function(t){function e(e){var n=t.call(this,e)||this;return n.state={error:!1},n}return hn(e,t),e.getDerivedStateFromError=function(){return{error:!0}},e.prototype.componentDidCatch=function(t,e){console.log(t),console.log(e.componentStack)},e.prototype.render=function(){return this.state.error?(0,o.jsx)("h1",{children:"Произошла ошибка"}):this.props.children},e}(h.Component),yn=s.ZP.p(me||(me=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),mn=function(){return mn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},mn.apply(this,arguments)},bn=function(){var t=function(){var t=(0,u.v9)(Be),e=(0,u.v9)(Ue),n=(0,u.v9)(Je),r=(0,u.I0)();return(0,h.useEffect)((function(){null!==n&&r(Wt(n))}),[n]),{dailyWeather:t,dailyWeatherLoadingStatus:e}}(),e=t.dailyWeather;if(t.dailyWeatherLoadingStatus===b.LOADING)return(0,o.jsx)(ir,{"data-test-id":"daily-weather-spinner",size:v.LARGE});if(null===e)return null;var n=e.weatherCodeList,r=e.temperatureMaxList,i=e.temperatureMinList,a=e.times;return(0,o.jsx)(o.Fragment,{children:a.map((function(t,e){var a,c=n[e],u=new Date(1e3*t),l=G[c],s=l.iconSrc,d=l.description;return(0,o.jsxs)(Wn,mn({timestamp:(a=u,a.toLocaleString("en-US",S)),iconProps:{src:s,alt:d,title:d}},{children:[(0,o.jsx)(yn,mn({"data-test-id":"daily-weather-title"},{children:d})),(0,o.jsxs)(yn,{children:["Max: ",r[e].toFixed(0),"°"]}),(0,o.jsxs)(yn,{children:["Min: ",i[e].toFixed(0),"°"]})]}),t)}))})},wn=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},vn=s.ZP.p(be||(be=wn(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),xn=s.ZP.p(we||(we=wn(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[0]})),jn=function(){return jn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},jn.apply(this,arguments)},Sn=function(){var t=function(){var t=(0,u.v9)($e),e=(0,u.v9)(qe),n=(0,u.v9)(Je),r=(0,u.I0)();return(0,h.useEffect)((function(){null!==n&&r(xt(n))}),[n]),{hourlyWeather:t,hourlyWeatherLoadingStatus:e}}(),e=t.hourlyWeather;if(t.hourlyWeatherLoadingStatus===b.LOADING)return(0,o.jsx)(ir,{size:v.LARGE});if(null===e)return null;var n,r,i=e.temperatureList,a=e.weatherCodeList,c=e.timeList;return(0,o.jsx)(o.Fragment,{children:(n=c,r=new Date,n.map((function(t){return new Date(1e3*t)})).filter((function(t){return t.getHours()>=r.getHours()})).slice(0,7)).map((function(t,e){var n=a[e],r=G[n],c=r.iconSrc,u=r.description;return(0,o.jsxs)(Wn,jn({"data-test-id":"hourly-weather-item",timestamp:ct(t),iconProps:{src:c,alt:u,title:u}},{children:[(0,o.jsxs)(vn,jn({"data-test-id":"hourly-weather-title"},{children:[i[e].toFixed(0),"°"]})),(0,o.jsx)(xn,{children:u})]}),t.getTime())}))})},On=s.ZP.div(ve||(ve=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}(["\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n\tgrid-template-rows: 1fr;\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: repeat(auto-fit, minmax(95px, 1fr));\n\t\trow-gap: ","px;\n\t}\n"],["\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n\tgrid-template-rows: 1fr;\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: repeat(auto-fit, minmax(95px, 1fr));\n\t\trow-gap: ","px;\n\t}\n"])),(function(t){return t.theme.breakpoints.xl}),(function(t){return t.theme.gaps[0]})),kn=function(){var t=(0,u.v9)(Ve);return null===(0,u.v9)(Je)?(0,o.jsx)("p",{children:"Вы отказались от обработки вашей геолокации. Выберите город"}):(0,o.jsxs)(On,{children:["daily"===t&&(0,o.jsx)(bn,{}),"hourly"===t&&(0,o.jsx)(Sn,{})]})},Pn=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},zn=s.ZP.div(xe||(xe=Pn(["\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: 1fr 82px repeat(auto, 1fr);\n\talign-items: center;\n"],["\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: 1fr 82px repeat(auto, 1fr);\n\talign-items: center;\n"]))),Ln=s.ZP.p(je||(je=Pn(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),Cn=s.ZP.div(Se||(Se=Pn(["\n\tjustify-self: center;\n"],["\n\tjustify-self: center;\n"]))),En=function(){return En=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},En.apply(this,arguments)},Wn=function(t){var e=t.timestamp,n=t.iconProps,r=t.children;return(0,o.jsxs)(zn,{children:[(0,o.jsx)(Ln,{children:e}),(0,o.jsx)(Cn,{children:(0,o.jsx)("img",En({},n))}),r]})},Dn=s.ZP.div(Oe||(Oe=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}(["\n\tgrid-area: forecastswitch;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: ","px;\n\tcolumn-gap: ","px;\n"],["\n\tgrid-area: forecastswitch;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: ","px;\n\tcolumn-gap: ","px;\n"])),(function(t){return t.theme.height[0]}),(function(t){return t.theme.gaps[0]})),In=function(){return In=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},In.apply(this,arguments)},Rn=function(){var t=(0,u.I0)(),e=function(e){return function(){t(Xt(e))}};return(0,o.jsxs)(Dn,{children:[(0,o.jsx)(f,In({onClick:e("daily")},{children:"Daily"})),(0,o.jsx)(f,In({onClick:e("hourly")},{children:"Hourly"}))]})},Mn=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},Tn=s.ZP.div(ke||(ke=Mn(["\n\tdisplay: grid;\n\tgrid-template-areas: '. . .' '. main .' '. . .';\n\tgrid-template-columns: auto minmax(0, ","px) auto;\n\tgrid-template-rows: auto auto auto;\n\n\tbackground: url(",") repeat;\n\tbackground-size: cover;\n\n\twidth: ","vw;\n\tmin-height: ","vh;\n"],["\n\tdisplay: grid;\n\tgrid-template-areas: '. . .' '. main .' '. . .';\n\tgrid-template-columns: auto minmax(0, ","px) auto;\n\tgrid-template-rows: auto auto auto;\n\n\tbackground: url(",") repeat;\n\tbackground-size: cover;\n\n\twidth: ","vw;\n\tmin-height: ","vh;\n"])),(function(t){return t.theme.width[1]}),(function(t){return t.background}),(function(t){return t.theme.width[2]}),(function(t){return t.theme.height[2]})),An=s.ZP.main(Pe||(Pe=Mn(["\n\tgrid-area: main;\n\trow-gap: ","px;\n\n\tdisplay: grid;\n\tgrid-template-areas:\n\t\t'clock search'\n\t\t'calendar .'\n\t\t'calendar .'\n\t\t'todayswitcher forecastswitch'\n\t\t'weather weather';\n\n\tbackground-color: ",";\n\tbackdrop-filter: blur(","px);\n\n\tpadding: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\tpadding: ","px;\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-template-areas:\n\t\t\t'clock'\n\t\t\t'search'\n\t\t\t'calendar'\n\t\t\t'forecastswitch'\n\t\t\t'weather';\n\t}\n"],["\n\tgrid-area: main;\n\trow-gap: ","px;\n\n\tdisplay: grid;\n\tgrid-template-areas:\n\t\t'clock search'\n\t\t'calendar .'\n\t\t'calendar .'\n\t\t'todayswitcher forecastswitch'\n\t\t'weather weather';\n\n\tbackground-color: ",";\n\tbackdrop-filter: blur(","px);\n\n\tpadding: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\tpadding: ","px;\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-template-areas:\n\t\t\t'clock'\n\t\t\t'search'\n\t\t\t'calendar'\n\t\t\t'forecastswitch'\n\t\t\t'weather';\n\t}\n"])),(function(t){return t.theme.gaps[5]}),(function(t){return t.theme.colors.transparentWhite}),(function(t){return t.theme.blur[0]}),(function(t){return t.theme.padding[0]}),(function(t){return t.theme.breakpoints.xl}),(function(t){return t.theme.padding[3]})),Zn=s.ZP.div(ze||(ze=Mn(["\n\tgrid-area: weather;\n\tdisplay: grid;\n\tgrid-template-columns: minmax(0px, 200px) 1fr;\n\n\tbackground-color: ",";\n\tborder-radius: ","px;\n\tpadding: ","px;\n\n\tgrid-template-areas: 'today forecast';\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: 1fr;\n\t\trow-gap: ","px;\n\t\tgrid-template-rows: auto;\n\t\tgrid-template-areas: 'today' 'forecast';\n\t}\n"],["\n\tgrid-area: weather;\n\tdisplay: grid;\n\tgrid-template-columns: minmax(0px, 200px) 1fr;\n\n\tbackground-color: ",";\n\tborder-radius: ","px;\n\tpadding: ","px;\n\n\tgrid-template-areas: 'today forecast';\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: 1fr;\n\t\trow-gap: ","px;\n\t\tgrid-template-rows: auto;\n\t\tgrid-template-areas: 'today' 'forecast';\n\t}\n"])),(function(t){return t.theme.colors.transparentWhite}),(function(t){return t.theme.borderRadius[1]}),(function(t){return t.theme.padding[3]}),(function(t){return t.theme.breakpoints.xl}),(function(t){return t.theme.gaps[1]})),Nn=function(){return Nn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},Nn.apply(this,arguments)},_n=function(){var t,e=(0,u.v9)(Ke);return(0,o.jsx)(Tn,Nn({background:(t=null==e?void 0:e.id,void 0===t&&(t=800),t>=200&&t<300?W:t>=300&&t<400?L:t>=500&&t<600?C:t>=600&&t<700?E:t>=600&&t<700?z:800===t?k:t>800&&t<900?P:k)},{children:(0,o.jsxs)(An,{children:[(0,o.jsx)(fn,{}),(0,o.jsx)($n,{}),(0,o.jsx)(on,{}),(0,o.jsx)(Rn,{}),(0,o.jsxs)(Zn,{children:[(0,o.jsx)(sr,{}),(0,o.jsx)(kn,{})]})]})}))},Gn=n(386),Fn=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},Hn=s.ZP.div(Le||(Le=Fn(["\n\tposition: relative;\n\tgrid-area: search;\n"],["\n\tposition: relative;\n\tgrid-area: search;\n"]))),Bn=s.ZP.input(Ce||(Ce=Fn(["\n\theight: ","px;\n\tpadding: ","px;\n\n\tfont-size: ","px;\n\n\tborder-radius: ","px;\n\n\t&:focus {\n\t\toutline: 1px solid;\n\t}\n\n\twidth: 100%;\n\n\ttransition: all 0.2s ease;\n"],["\n\theight: ","px;\n\tpadding: ","px;\n\n\tfont-size: ","px;\n\n\tborder-radius: ","px;\n\n\t&:focus {\n\t\toutline: 1px solid;\n\t}\n\n\twidth: 100%;\n\n\ttransition: all 0.2s ease;\n"])),(function(t){return t.theme.height[3]}),(function(t){return t.theme.padding[2]}),(function(t){return t.theme.fontSize[3]}),(function(t){return t.theme.borderRadius[0]})),Un=function(){return Un=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},Un.apply(this,arguments)},Vn={city:""},$n=function(){var t=tn().location,e=(0,u.I0)(),n=function(){e(Kt(t))},r=function(t){return function(n){t(n),e(Bt(n.target.value))}},i=function(t){return function(n){var r;t(n),e(Bt(null!==(r=null==n?void 0:n.target.value)&&void 0!==r?r:""))}};return(0,o.jsx)(Hn,{children:(0,o.jsx)(Gn.J9,Un({initialValues:Vn,onSubmit:function(t){e(Bt(t.city))}},{children:function(t){var e=t.values,a=t.handleChange,c=t.handleReset;return(0,o.jsxs)(Gn.l0,{children:[(0,o.jsx)(f,Un({onClick:n},{children:"Reset City"})),(0,o.jsx)("h3",{children:"Search city"}),(0,o.jsx)(Bn,{name:"city",id:"city","data-test-id":"city-search-input",type:"search",value:e.city,onChange:r(a)}),(0,o.jsx)(Xn,{onClearInputValue:i(c)})]})}}))})},qn=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},Jn=s.ZP.div(Ee||(Ee=qn(["\n\tbackground-color: ",";\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(1fr, auto);\n\n\twidth: ","%;\n\tleft: 0;\n\n\tposition: absolute;\n\tz-index: 1;\n\tmax-height: ","px;\n\toverflow-y: auto;\n"],["\n\tbackground-color: ",";\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(1fr, auto);\n\n\twidth: ","%;\n\tleft: 0;\n\n\tposition: absolute;\n\tz-index: 1;\n\tmax-height: ","px;\n\toverflow-y: auto;\n"])),(function(t){return t.theme.colors.white}),(function(t){return t.theme.width[2]}),(function(t){return t.theme.height[4]})),Kn=s.ZP.div(We||(We=qn(["\n\theight: ","px;\n\tborder-bottom: 1px solid ",";\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto;\n\n\talign-items: center;\n\tpadding: ","px;\n"],["\n\theight: ","px;\n\tborder-bottom: 1px solid ",";\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto;\n\n\talign-items: center;\n\tpadding: ","px;\n"])),(function(t){return t.theme.height[5]}),(function(t){return t.theme.colors.black}),(function(t){return t.theme.padding[3]})),Yn=s.ZP.p(De||(De=qn(["\n\tfont-size: ",";\n"],["\n\tfont-size: ",";\n"])),(function(t){return t.theme.fontSize[0]})),Qn=function(){return Qn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},Qn.apply(this,arguments)},Xn=function(t){var e=t.onClearInputValue,n=(0,u.I0)(),r=(0,u.v9)(Fe),i=(0,u.v9)(He),a=function(t){return function(){n(Gt(t));var r=t.lon,i=t.lat;n(Kt({lon:r,lat:i})),e()}};return r===b.LOADING?(0,o.jsx)(Jn,{children:(0,o.jsx)(ir,{"data-test-id":"city-search-spinner",size:v.LARGE})}):(0,o.jsx)(Jn,Qn({"data-test-id":"city-search-result-wrapper"},{children:null==i?void 0:i.map((function(t){var e=t.id,n=t.name,r=t.country,i=t.countryCode;return(0,o.jsxs)(Kn,{children:[(0,o.jsxs)(Yn,{children:[n,", ",r,", ",i]}),(0,o.jsx)(f,Qn({onClick:a(t)},{children:"select"}))]},e)}))}))},tr=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},er=s.ZP.img(Ie||(Ie=tr(["\n\talign-self: center;\n\tjustify-self: center;\n\n\twidth: ","px;\n\theight: ","px;\n"],["\n\talign-self: center;\n\tjustify-self: center;\n\n\twidth: ","px;\n\theight: ","px;\n"])),(function(t){return t.size}),(function(t){return t.size})),nr=s.ZP.div(Re||(Re=tr(["\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: grid;\n\tgrid-template-rows: 1fr;\n\tgrid-template-columns: 1fr;\n\talign-items: center;\n\tjustify-content: center;\n"],["\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: grid;\n\tgrid-template-rows: 1fr;\n\tgrid-template-columns: 1fr;\n\talign-items: center;\n\tjustify-content: center;\n"]))),rr=function(){return rr=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},rr.apply(this,arguments)},ir=function(t){var e=t.size,n=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}(t,["size"]);return(0,o.jsx)(nr,rr({"data-test-id":"spinner-wrapper"},n,{children:(0,o.jsx)(er,{src:Z,size:e,alt:"Loading",title:"Loading"})}))},ar=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},or=s.ZP.div(Me||(Me=ar(["\n\tgrid-area: today;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(auto, 5);\n\tjustify-content: center;\n\talign-items: center;\n\n\n"],["\n\tgrid-area: today;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(auto, 5);\n\tjustify-content: center;\n\talign-items: center;\n\n\n"]))),cr=s.ZP.p(Te||(Te=ar(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(t){return t.theme.fontSize[2]})),ur=s.ZP.img(Ae||(Ae=ar(["\n\tjustify-self: center;\n"],["\n\tjustify-self: center;\n"]))),lr=function(){return lr=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},lr.apply(this,arguments)},sr=function(){var t=function(){var t=(0,u.I0)(),e=(0,u.v9)(Ke),n=(0,u.v9)(Ye),r=(0,u.v9)(Je),i=tn().location;return(0,h.useEffect)((function(){null!==i&&t(Kt(i))}),[i]),(0,h.useEffect)((function(){null!==r&&t(ft(r))}),[r]),null===r?{todayWeather:e,replaceContent:(0,o.jsx)("p",{children:"Вы отказались от обработки вашей геолокации. Выберите город"})}:n===b.LOADING?{todayWeather:e,replaceContent:(0,o.jsx)(ir,{size:v.LARGE})}:{todayWeather:e,replaceContent:null}}(),e=t.todayWeather,n=t.replaceContent;if(null!==n)return(0,o.jsx)(or,lr({"data-test-id":"today-weather-spinner-wrapper"},{children:n}));if(null===e)return null;var r=e.iconCode,i=e.description,a=e.feelsLike,c=e.temperature,l=e.cityName;return(0,o.jsxs)(or,lr({"data-test-id":"today-weather-wrapper"},{children:[(0,o.jsx)(cr,lr({"data-test-id":"today-weather-title"},{children:"Today"})),(0,o.jsx)(cr,lr({"data-test-id":"today-weather-text"},{children:l})),(0,o.jsx)(ur,{"data-test-id":"today-weather-image",src:"https://openweathermap.org/img/wn/".concat(r,"@2x.png"),alt:i,title:i}),(0,o.jsx)(cr,{children:i}),(0,o.jsxs)(cr,{children:[c.toFixed(0),"°"]}),(0,o.jsxs)(cr,{children:["feels like ",a.toFixed(0),"°"]})]}))},dr=(0,s.vJ)(Ze||(Ze=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}(['\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\thtml,\n\tbody {\n\t\toverflow-x: hidden;\n\t\tdisplay: grid;\n\t\tgrid-template-rows: 100%;\n\t\tgrid-template-columns: 1fr;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: var(--font-family);\n\t}\n\n\ta {\n\t\ttext-decoration: none;\n\t\tcolor: inherit;\n\t}\n\n\tbutton {\n\t\tborder: none;\n\t}\n\n\tli {\n\t\tlist-style-type: none; \n\t}\n\t\n\tul {\n\t\tmargin-left: 0;\n\t\tpadding-left: 0; \n\t}\n\n\t:root {\n\t\t--font-family: "Helvetica Neue", sans-serif;\n\t}\n'],['\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\thtml,\n\tbody {\n\t\toverflow-x: hidden;\n\t\tdisplay: grid;\n\t\tgrid-template-rows: 100%;\n\t\tgrid-template-columns: 1fr;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: var(--font-family);\n\t}\n\n\ta {\n\t\ttext-decoration: none;\n\t\tcolor: inherit;\n\t}\n\n\tbutton {\n\t\tborder: none;\n\t}\n\n\tli {\n\t\tlist-style-type: none; \n\t}\n\t\n\tul {\n\t\tmargin-left: 0;\n\t\tpadding-left: 0; \n\t}\n\n\t:root {\n\t\t--font-family: "Helvetica Neue", sans-serif;\n\t}\n']))),pr={colors:{white:"#FFFFFF",transparentWhite:"rgba(217, 217, 217, 0.3)",blue:"rgb(26, 115, 232)",black:"#000000",lightBlack:"#222831"},borderRadius:[5,10,20],width:[90,1110,100,60],height:[30,974,100,38,300,60],padding:[50,70,15,10,5],fontSize:[17,20,19,25,30,41,12],gaps:[28,36,39,48,58,10],margin:[20,250,150],breakpoints:{xl:1e3},blur:[7.5],transition:{light:"all 0.2s ease"}},fr=function(){return fr=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},fr.apply(this,arguments)},hr=function(){return hr=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},hr.apply(this,arguments)},gr=document.getElementById("root");if(null===gr)throw new Error("Container element not found");(0,c.s)(gr).render((0,o.jsx)(u.zt,hr({store:se},{children:(0,o.jsx)(l.r,hr({loading:null,persistor:Ne},{children:(0,o.jsx)(gn,{children:(0,o.jsx)((function(){return(0,o.jsxs)(s.f6,fr({theme:pr},{children:[(0,o.jsx)(dr,{}),(0,o.jsx)(_n,{})]}))}),{})})}))})))}},n={};function r(t){var i=n[t];if(void 0!==i)return i.exports;var a=n[t]={exports:{}};return e[t].call(a.exports,a,a.exports,r),a.exports}r.m=e,t=[],r.O=(e,n,i,a)=>{if(!n){var o=1/0;for(s=0;s<t.length;s++){for(var[n,i,a]=t[s],c=!0,u=0;u<n.length;u++)(!1&a||o>=a)&&Object.keys(r.O).every((t=>r.O[t](n[u])))?n.splice(u--,1):(c=!1,a<o&&(o=a));if(c){t.splice(s--,1);var l=i();void 0!==l&&(e=l)}}return e}a=a||0;for(var s=t.length;s>0&&t[s-1][2]>a;s--)t[s]=t[s-1];t[s]=[n,i,a]},r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{var t={143:0};r.O.j=e=>0===t[e];var e=(e,n)=>{var i,a,[o,c,u]=n,l=0;if(o.some((e=>0!==t[e]))){for(i in c)r.o(c,i)&&(r.m[i]=c[i]);if(u)var s=u(r)}for(e&&e(n);l<o.length;l++)a=o[l],r.o(t,a)&&t[a]&&t[a][0](),t[a]=0;return r.O(s)},n=self.webpackChunk=self.webpackChunk||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})(),r.nc=void 0;var i=r.O(void 0,[230],(()=>r(692)));i=r.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,