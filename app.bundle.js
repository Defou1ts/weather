/*! For license information please see app.bundle.js.LICENSE.txt */
(()=>{var __webpack_modules__={337:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{M:()=>gapi});var gapi=window.gapi=window.gapi||{};gapi._bs=(new Date).getTime(),function(){var aa="function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,n){return e==Array.prototype||e==Object.prototype||(e[t]=n.value),e},da=function(e){e=["object"==typeof globalThis&&globalThis,e,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof __webpack_require__.g&&__webpack_require__.g];for(var t=0;t<e.length;++t){var n=e[t];if(n&&n.Math==Math)return n}throw Error("Cannot find global object")},ea=da(this),fa=function(e,t){if(t)e:{var n=ea;e=e.split(".");for(var r=0;r<e.length-1;r++){var o=e[r];if(!(o in n))break e;n=n[o]}(t=t(r=n[e=e[e.length-1]]))!=r&&null!=t&&aa(n,e,{configurable:!0,writable:!0,value:t})}},ha=function(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}};fa("Symbol",(function(e){if(e)return e;var t=function(e,t){this.ba=e,aa(this,"description",{configurable:!0,writable:!0,value:t})};t.prototype.toString=function(){return this.ba};var n=0,r=function(e){if(this instanceof r)throw new TypeError("Symbol is not a constructor");return new t("jscomp_symbol_"+(e||"")+"_"+n++,e)};return r})),fa("Symbol.iterator",(function(e){if(e)return e;e=Symbol("Symbol.iterator");for(var t="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),n=0;n<t.length;n++){var r=ea[t[n]];"function"==typeof r&&"function"!=typeof r.prototype[e]&&aa(r.prototype,e,{configurable:!0,writable:!0,value:function(){return ia(ha(this))}})}return e}));var ia=function(e){return(e={next:e})[Symbol.iterator]=function(){return this},e},ja=function(e,t){e instanceof String&&(e+="");var n=0,r=!1,o={next:function(){if(!r&&n<e.length){var o=n++;return{value:t(o,e[o]),done:!1}}return r=!0,{done:!0,value:void 0}}};return o[Symbol.iterator]=function(){return o},o};fa("Array.prototype.keys",(function(e){return e||function(){return ja(this,(function(e){return e}))}}));var m=this||self,ka=function(e){var t=typeof e;return"object"!=t?t:e?Array.isArray(e)?"array":t:"null"},la=function(e,t,n){return e.call.apply(e.bind,arguments)},ma=function(e,t,n){if(!e)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),e.apply(t,n)}}return function(){return e.apply(t,arguments)}},na=function(e,t,n){return(na=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?la:ma).apply(null,arguments)},oa=function(e,t){function n(){}n.prototype=t.prototype,e.ma=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.A=function(e,n,r){for(var o=Array(arguments.length-2),i=2;i<arguments.length;i++)o[i-2]=arguments[i];return t.prototype[n].apply(e,o)}},pa=function(e){return e},qa=function(e){var t=null,n=m.trustedTypes;if(!n||!n.createPolicy)return t;try{t=n.createPolicy(e,{createHTML:pa,createScript:pa,createScriptURL:pa})}catch(e){m.console&&m.console.error(e.message)}return t};function q(e){if(Error.captureStackTrace)Error.captureStackTrace(this,q);else{var t=Error().stack;t&&(this.stack=t)}e&&(this.message=String(e))}oa(q,Error),q.prototype.name="CustomError";var ra=function(e,t){for(var n="",r=(e=e.split("%s")).length-1,o=0;o<r;o++)n+=e[o]+(o<t.length?t[o]:"%s");q.call(this,n+e[r])};oa(ra,q),ra.prototype.name="AssertionError";var sa=function(e,t,n,r){var o="Assertion failed";if(n){o+=": "+n;var i=r}else e&&(o+=": "+e,i=t);throw new ra(""+o,i||[])},ta=function(e,t,n){return e||sa("",null,t,Array.prototype.slice.call(arguments,2)),e},ua=function(e,t){throw new ra("Failure"+(e?": "+e:""),Array.prototype.slice.call(arguments,1))},va=function(e,t,n){"string"!=typeof e&&sa("Expected string but got %s: %s.",[ka(e),e],t,Array.prototype.slice.call(arguments,2))},xa=function(e,t){e:{try{var n=e&&e.ownerDocument,r=n&&(n.defaultView||n.parentWindow);if((r=r||m).Element&&r.Location){var o=r;break e}}catch(e){}o=null}if(o&&void 0!==o[t]&&(!e||!(e instanceof o[t])&&(e instanceof o.Location||e instanceof o.Element))){if("object"==(o=typeof e)&&null!=e||"function"==o)try{var i=e.constructor.displayName||e.constructor.name||Object.prototype.toString.call(e)}catch(e){i="<object could not be stringified>"}else i=void 0===e?"undefined":null===e?"null":typeof e;ua("Argument is not a %s (or a non-Element, non-Location mock); got: %s",t,i)}return e},ya,t=function(e,t){this.P=e===za&&t||"",this.ca=Aa};t.prototype.J=!0,t.prototype.H=function(){return this.P},t.prototype.toString=function(){return"Const{"+this.P+"}"};var Ba=function(e){return e instanceof t&&e.constructor===t&&e.ca===Aa?e.P:(ua("expected object of type Const, got '"+e+"'"),"type_error:Const")},Aa={},za={},v=function(e,t){this.N=t===Ca?e:""};v.prototype.J=!0,v.prototype.H=function(){return this.N.toString()},v.prototype.toString=function(){return"SafeUrl{"+this.N+"}"};var Da=function(e){return e instanceof v&&e.constructor===v?e.N:(ua("expected object of type SafeUrl, got '"+e+"' of type "+ka(e)),"type_error:SafeUrl")},Ea=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i,Fa=function(e){return e instanceof v?e:(e="object"==typeof e&&e.J?e.H():String(e),ta(Ea.test(e),"%s does not match the safe URL pattern",e)||(e="about:invalid#zClosurez"),new v(e,Ca))},Ca={},w=function(e,t,n){this.M=n===Ga?e:""};w.prototype.J=!0,w.prototype.H=function(){return this.M.toString()},w.prototype.toString=function(){return"SafeHtml{"+this.M+"}"};var Ha=function(e){return e instanceof w&&e.constructor===w?e.M:(ua("expected object of type SafeHtml, got '"+e+"' of type "+ka(e)),"type_error:SafeHtml")},Ga={},Ia=new w(m.trustedTypes&&m.trustedTypes.emptyHTML||"",0,Ga),Ja={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0},Ka=(b=!1,function(){return b||(c=function(){if("undefined"==typeof document)return!1;var e=document.createElement("div"),t=document.createElement("div");return t.appendChild(document.createElement("div")),e.appendChild(t),!!e.firstChild&&(t=e.firstChild.firstChild,e.innerHTML=Ha(Ia),!t.parentElement)}(),b=!0),c}),c,b,x=window,z=document,La=x.location,Ma=function(){},Na=/\[native code\]/,A=function(e,t,n){return e[t]=e[t]||n},Oa=function(e){for(var t=0;t<this.length;t++)if(this[t]===e)return t;return-1},Pa=function(e){e=e.sort();for(var t=[],n=void 0,r=0;r<e.length;r++){var o=e[r];o!=n&&t.push(o),n=o}return t},Qa=/&/g,Ra=/</g,Sa=/>/g,Ua=/"/g,Va=/'/g,Wa=function(e){return String(e).replace(Qa,"&amp;").replace(Ra,"&lt;").replace(Sa,"&gt;").replace(Ua,"&quot;").replace(Va,"&#39;")},B=function(){var e;if((e=Object.create)&&Na.test(e))e=e(null);else for(var t in e={})e[t]=void 0;return e},C=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},Xa=function(e){if(Na.test(Object.keys))return Object.keys(e);var t,n=[];for(t in e)C(e,t)&&n.push(t);return n},D=function(e,t){for(var n in e=e||{})C(e,n)&&(t[n]=e[n])},Ya=function(e){return function(){x.setTimeout(e,0)}},E=function(e,t){if(!e)throw Error(t||"")},F=A(x,"gapi",{}),H=function(e,t,n){var r=new RegExp("([#].*&|[#])"+t+"=([^&#]*)","g");if(t=new RegExp("([?#].*&|[?#])"+t+"=([^&#]*)","g"),e=e&&(r.exec(e)||t.exec(e)))try{n=decodeURIComponent(e[2])}catch(e){}return n},Za=new RegExp(/^/.source+/([a-zA-Z][-+.a-zA-Z0-9]*:)?/.source+/(\/\/[^\/?#]*)?/.source+/([^?#]*)?/.source+/(\?([^#]*))?/.source+/(#((#|[^#])*))?/.source+/$/.source),$a=/[\ud800-\udbff][\udc00-\udfff]|[^!-~]/g,ab=new RegExp(/(%([^0-9a-fA-F%]|[0-9a-fA-F]([^0-9a-fA-F%])?)?)*/.source+/%($|[^0-9a-fA-F]|[0-9a-fA-F]($|[^0-9a-fA-F]))/.source,"g"),bb=/%([a-f]|[0-9a-fA-F][a-f])/g,cb=/^(https?|ftp|file|chrome-extension):$/i,I=function(e){e=(e=(e=String(e)).replace($a,(function(e){try{return encodeURIComponent(e)}catch(t){return encodeURIComponent(e.replace(/^[^%]+$/g,"ï¿½"))}})).replace(ab,(function(e){return e.replace(/%/g,"%25")})).replace(bb,(function(e){return e.toUpperCase()}))).match(Za)||[];var t=B(),n=function(e){return e.replace(/\\/g,"%5C").replace(/\^/g,"%5E").replace(/`/g,"%60").replace(/\{/g,"%7B").replace(/\|/g,"%7C").replace(/\}/g,"%7D")},r=!!(e[1]||"").match(cb);return t.A=n((e[1]||"")+(e[2]||"")+(e[3]||(e[2]&&r?"/":""))),r=function(e){return n(e.replace(/\?/g,"%3F").replace(/#/g,"%23"))},t.query=e[5]?[r(e[5])]:[],t.g=e[7]?[r(e[7])]:[],t},db=function(e){return e.A+(0<e.query.length?"?"+e.query.join("&"):"")+(0<e.g.length?"#"+e.g.join("&"):"")},eb=function(e,t){var n=[];if(e)for(var r in e)if(C(e,r)&&null!=e[r]){var o=t?t(e[r]):e[r];n.push(encodeURIComponent(r)+"="+encodeURIComponent(o))}return n},fb=function(e,t,n,r){return(e=I(e)).query.push.apply(e.query,eb(t,r)),e.g.push.apply(e.g,eb(n,r)),db(e)},gb=new RegExp(/\/?\??#?/.source+"("+/[\/?#]/i.source+"|"+/[\uD800-\uDBFF]/i.source+"|"+/%[c-f][0-9a-f](%[89ab][0-9a-f]){0,2}(%[89ab]?)?/i.source+"|"+/%[0-9a-f]?/i.source+")$","i"),hb=function(e,n){var r=I(n);n=r.A,r.query.length&&(n+="?"+r.query.join("")),r.g.length&&(n+="#"+r.g.join(""));var o="";2e3<n.length&&(o=n,n=(n=n.substr(0,2e3)).replace(gb,""),o=o.substr(n.length));var i=e.createElement("div");if(e=e.createElement("a"),n=(r=I(n)).A,r.query.length&&(n+="?"+r.query.join("")),r.g.length&&(n+="#"+r.g.join("")),n=new v(n,Ca),xa(e,"HTMLAnchorElement"),n=n instanceof v?n:Fa(n),e.href=Da(n),i.appendChild(e),n=i.innerHTML,r=new t(za,"Assignment to self."),va(Ba(r),"must provide justification"),ta(!/^[\s\xa0]*$/.test(Ba(r)),"must provide non-empty justification"),void 0===ya&&(ya=qa("gapi#html")),n=(r=ya)?r.createHTML(n):n,n=new w(n,null,Ga),i.tagName&&Ja[i.tagName.toUpperCase()])throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of "+i.tagName+".");if(Ka())for(;i.lastChild;)i.removeChild(i.lastChild);return i.innerHTML=Ha(n),n=String(i.firstChild.href),i.parentNode&&i.parentNode.removeChild(i),o=(r=I(n+o)).A,r.query.length&&(o+="?"+r.query.join("")),r.g.length&&(o+="#"+r.g.join("")),o},ib=/^https?:\/\/[^\/%\\?#\s]+\/[^\s]*$/i,jb=function(e,t,n,r){x[n+"EventListener"]?x[n+"EventListener"](e,t,!1):x[r+"tachEvent"]&&x[r+"tachEvent"]("on"+e,t)},kb=function(){var e=z.readyState;return"complete"===e||"interactive"===e&&-1==navigator.userAgent.indexOf("MSIE")},nb=function(e){var t=lb;if(!kb())try{t()}catch(e){}mb(e)},mb=function(e){if(kb())e();else{var t=!1,n=function(){if(!t)return t=!0,e.apply(this,arguments)};x.addEventListener?(x.addEventListener("load",n,!1),x.addEventListener("DOMContentLoaded",n,!1)):x.attachEvent&&(x.attachEvent("onreadystatechange",(function(){kb()&&n.apply(this,arguments)})),x.attachEvent("onload",n))}},ob=function(e){for(;e.firstChild;)e.removeChild(e.firstChild)},pb={button:!0,div:!0,span:!0},K;K=A(x,"___jsl",B()),A(K,"I",0),A(K,"hel",10);var qb=function(e){return K.dpo?K.h:H(e,"jsh",K.h)},rb=function(e){var t=A(K,"sws",[]);t.push.apply(t,e)},sb=function(e){return A(K,"watt",B())[e]},tb=function(e){var t=A(K,"PQ",[]);K.PQ=[];var n=t.length;if(0===n)e();else for(var r=0,o=function(){++r===n&&e()},i=0;i<n;i++)t[i](o)},ub=function(e){return A(A(K,"H",B()),e,B())},vb=A(K,"perf",B()),wb=A(vb,"g",B()),xb=A(vb,"i",B());A(vb,"r",[]),B(),B();var yb=function(e,t,n){var r=vb.r;"function"==typeof r?r(e,t,n):r.push([e,t,n])},L=function(e,t,n){wb[e]=!t&&wb[e]||n||(new Date).getTime(),yb(e)},Ab=function(e,t,n){t&&0<t.length&&(t=zb(t),n&&0<n.length&&(t+="___"+zb(n)),28<t.length&&(t=t.substr(0,28)+(t.length-28)),n=t,t=A(xb,"_p",B()),A(t,n,B())[e]=(new Date).getTime(),yb(e,"_p",n))},zb=function(e){return e.join("__").replace(/\./g,"_").replace(/\-/g,"_").replace(/,/g,"_")},Bb=B(),N=[],O=function(e){throw Error("Bad hint"+(e?": "+e:""))};N.push(["jsl",function(e){for(var t in e)if(C(e,t)){var n=e[t];"object"==typeof n?K[t]=A(K,t,[]).concat(n):A(K,t,n)}(t=e.u)&&((e=A(K,"us",[])).push(t),(t=/^https:(.*)$/.exec(t))&&e.push("http:"+t[1]))}]);var Cb=/^(\/[a-zA-Z0-9_\-]+)+$/,Db=[/\/amp\//,/\/amp$/,/^\/amp$/],Eb=/^[a-zA-Z0-9\-_\.,!]+$/,Fb=/^gapi\.loaded_[0-9]+$/,Gb=/^[a-zA-Z0-9,._-]+$/,Kb=function(e,t,n,r){var o=e.split(";"),i=o.shift(),a=Bb[i],l=null;return a?l=a(o,t,n,r):O("no hint processor for: "+i),l||O("failed to generate load url"),n=(t=l).match(Hb),(r=t.match(Ib))&&1===r.length&&Jb.test(t)&&n&&1===n.length||O("failed sanity: "+e),l},Nb=function(e,t,n,r){e=Lb(e),Fb.test(n)||O("invalid_callback"),t=Mb(t),r=r&&r.length?Mb(r):null;var o=function(e){return encodeURIComponent(e).replace(/%2C/g,",")};return[encodeURIComponent(e.pathPrefix).replace(/%2C/g,",").replace(/%2F/g,"/"),"/k=",o(e.version),"/m=",o(t),r?"/exm="+o(r):"","/rt=j/sv=1/d=1/ed=1",e.S?"/am="+o(e.S):"",e.Z?"/rs="+o(e.Z):"",e.aa?"/t="+o(e.aa):"","/cb=",o(n)].join("")},Lb=function(e){"/"!==e.charAt(0)&&O("relative path");for(var t=e.substring(1).split("/"),n=[];t.length;){if((e=t.shift()).length&&0!=e.indexOf(".")){if(0<e.indexOf("=")){t.unshift(e);break}}else O("empty/relative directory");n.push(e)}e={};for(var r=0,o=t.length;r<o;++r){var i=t[r].split("="),a=decodeURIComponent(i[0]),l=decodeURIComponent(i[1]);2==i.length&&a&&l&&(e[a]=e[a]||l)}for(t="/"+n.join("/"),Cb.test(t)||O("invalid_prefix"),n=0,r=Db.length;n<r;++n)Db[n].test(t)&&O("invalid_prefix");return{pathPrefix:t,version:n=Ob(e,"k",!0),S:r=Ob(e,"am"),Z:o=Ob(e,"rs"),aa:e=Ob(e,"t")}},Mb=function(e){for(var t=[],n=0,r=e.length;n<r;++n){var o=e[n].replace(/\./g,"_").replace(/-/g,"_");Gb.test(o)&&t.push(o)}return t.join(",")},Ob=function(e,t,n){if(!(e=e[t])&&n&&O("missing: "+t),e){if(Eb.test(e))return e;O("invalid: "+t)}return null},Jb=/^https?:\/\/[a-z0-9_.-]+\.google(rs)?\.com(:\d+)?\/[a-zA-Z0-9_.,!=\-\/]+$/,Ib=/\/cb=/g,Hb=/\/\//g,Pb=function(){var e=qb(La.href);if(!e)throw Error("Bad hint");return e};Bb.m=function(e,t,n,r){return(e=e[0])||O("missing_hint"),"https://apis.google.com"+Nb(e,t,n,r)};var Qb=decodeURI("%73cript"),Rb=/^[-+_0-9\/A-Za-z]+={0,2}$/,Sb=function(e,t){for(var n=[],r=0;r<e.length;++r){var o=e[r];o&&0>Oa.call(t,o)&&n.push(o)}return n},Tb=function(){var e=K.nonce;return void 0!==e?e&&e===String(e)&&e.match(Rb)?e:K.nonce=null:z.querySelector&&(e=z.querySelector("script[nonce]"))?(e=e.nonce||e.getAttribute("nonce")||"")&&e===String(e)&&e.match(Rb)?K.nonce=e:K.nonce=null:null},Wb=function(e){if("loading"!=z.readyState)Ub(e);else{var t=Tb(),n="";null!==t&&(n=' nonce="'+t+'"'),e="<"+Qb+' src="'+encodeURI(e)+'"'+n+"></"+Qb+">",z.write(Vb?Vb.createHTML(e):e)}},Ub=function(e){var t=z.createElement(Qb);t.setAttribute("src",Vb?Vb.createScriptURL(e):e),null!==(e=Tb())&&t.setAttribute("nonce",e),t.async="true",(e=z.getElementsByTagName(Qb)[0])?e.parentNode.insertBefore(t,e):(z.head||z.body||z.documentElement).appendChild(t)},Xb=function(e,t){var n=t&&t._c;if(n)for(var r=0;r<N.length;r++){var o=N[r][0],i=N[r][1];i&&C(n,o)&&i(n[o],e,t)}},Zb=function(e,t,n){Yb((function(){var n=t===qb(La.href)?A(F,"_",B()):B();n=A(ub(t),"_",n),e(n)}),n)},ac=function(e,t){var n=t||{};"function"==typeof t&&((n={}).callback=t),Xb(e,n),t=e?e.split(":"):[];var r=n.h||Pb(),o=A(K,"ah",B());if(o["::"]&&t.length){e=[];for(var i=null;i=t.shift();){var a=i.split(".");a=o[i]||o[a[1]&&"ns:"+a[0]||""]||r;var l=e.length&&e[e.length-1]||null,u=l;l&&l.hint==a||(u={hint:a,V:[]},e.push(u)),u.V.push(i)}var s=e.length;if(1<s){var c=n.callback;c&&(n.callback=function(){0==--s&&c()})}for(;t=e.shift();)$b(t.V,n,t.hint)}else $b(t||[],n,r)},$b=function(e,t,n){e=Pa(e)||[];var r=t.callback,o=t.config,i=t.timeout,a=t.ontimeout,l=t.onerror,u=void 0;"function"==typeof l&&(u=l);var s=null,c=!1;if(i&&!a||!i&&a)throw"Timeout requires both the timeout parameter and ontimeout parameter to be set";l=A(ub(n),"r",[]).sort();var f=A(ub(n),"L",[]).sort(),d=[].concat(l),p=function(e,t){if(c)return 0;x.clearTimeout(s),f.push.apply(f,h);var r=((F||{}).config||{}).update;if(r?r(o):o&&A(K,"cu",[]).push(o),t){Ab("me0",e,d);try{Zb(t,n,u)}finally{Ab("me1",e,d)}}return 1};0<i&&(s=x.setTimeout((function(){c=!0,a()}),i));var h=Sb(e,f);if(h.length){h=Sb(e,l);var g=A(K,"CP",[]),m=g.length;if(g[m]=function(e){if(!e)return 0;Ab("ml1",h,d);var t=function(t){g[m]=null,p(h,e)&&tb((function(){r&&r(),t()}))},n=function(){var e=g[m+1];e&&e()};0<m&&g[m-1]?g[m]=function(){t(n)}:t(n)},h.length){var y="loaded_"+K.I++;F[y]=function(e){g[m](e),F[y]=null},e=Kb(n,h,"gapi."+y,l),l.push.apply(l,h),Ab("ml0",h,d),t.sync||x.___gapisync?Wb(e):Ub(e)}else g[m](Ma)}else p(h)&&r&&r()},Vb=qa("gapi#gapi"),Yb=function(e,t){if(K.hee&&0<K.hel)try{return e()}catch(e){t&&t(e),K.hel--,ac("debug_error",(function(){try{window.___jsl.hefn(e)}catch(t){throw e}}))}else try{return e()}catch(e){throw t&&t(e),e}};F.load=function(e,t){return Yb((function(){return ac(e,t)}))};var bc=function(e){var t=window.___jsl=window.___jsl||{};return t[e]=t[e]||[],t[e]},cc=function(e){var t=window.___jsl=window.___jsl||{};return t.cfg=!e&&t.cfg||{},t.cfg},dc=function(e){return"object"==typeof e&&/\[native code\]/.test(e.push)},P=function(e,t,n){if(t&&"object"==typeof t)for(var r in t)!Object.prototype.hasOwnProperty.call(t,r)||n&&"___goc"===r&&void 0===t[r]||(e[r]&&t[r]&&"object"==typeof e[r]&&"object"==typeof t[r]&&!dc(e[r])&&!dc(t[r])?P(e[r],t[r]):t[r]&&"object"==typeof t[r]?(e[r]=dc(t[r])?[]:{},P(e[r],t[r])):e[r]=t[r])},ec=function(e){if(e&&!/^\s+$/.test(e)){for(;0==e.charCodeAt(e.length-1);)e=e.substring(0,e.length-1);try{var t=window.JSON.parse(e)}catch(e){}if("object"==typeof t)return t;try{t=new Function("return ("+e+"\n)")()}catch(e){}if("object"==typeof t)return t;try{t=new Function("return ({"+e+"\n})")()}catch(e){}return"object"==typeof t?t:{}}},fc=function(e,t){var n={___goc:void 0};e.length&&e[e.length-1]&&Object.hasOwnProperty.call(e[e.length-1],"___goc")&&void 0===e[e.length-1].___goc&&(n=e.pop()),P(n,t),e.push(n)},gc=function(e){cc(!0);var t=window.___gcfg,n=bc("cu"),r=window.___gu;t&&t!==r&&(fc(n,t),window.___gu=t),t=bc("cu");var o=document.scripts||document.getElementsByTagName("script")||[];r=[];var i=[];i.push.apply(i,bc("us"));for(var a=0;a<o.length;++a)for(var l=o[a],u=0;u<i.length;++u)l.src&&0==l.src.indexOf(i[u])&&r.push(l);for(0==r.length&&0<o.length&&o[o.length-1].src&&r.push(o[o.length-1]),o=0;o<r.length;++o)r[o].getAttribute("gapi_processed")||(r[o].setAttribute("gapi_processed",!0),i=(i=r[o])?3==(a=i.nodeType)||4==a?i.nodeValue:i.textContent||i.innerText||i.innerHTML||"":void 0,(i=ec(i))&&t.push(i));for(e&&fc(n,e),e=0,t=(r=bc("cd")).length;e<t;++e)P(cc(),r[e],!0);for(e=0,t=(r=bc("ci")).length;e<t;++e)P(cc(),r[e],!0);for(e=0,t=n.length;e<t;++e)P(cc(),n[e],!0)},Q=function(e){var t=cc();if(!e)return t;for(var n=0,r=(e=e.split("/")).length;t&&"object"==typeof t&&n<r;++n)t=t[e[n]];return n===e.length&&void 0!==t?t:void 0},hc=function(e,t){var n;if("string"==typeof e){for(var r=n={},o=0,i=(e=e.split("/")).length;o<i-1;++o)r=r[e[o]]={};r[e[o]]=t}else n=e;gc(n)},ic=function(){var e=window.__GOOGLEAPIS;e&&(e.googleapis&&!e["googleapis.config"]&&(e["googleapis.config"]=e.googleapis),A(K,"ci",[]).push(e),window.__GOOGLEAPIS=void 0)},jc={callback:1,clientid:1,cookiepolicy:1,openidrealm:-1,includegrantedscopes:-1,requestvisibleactions:1,scope:1},kc=!1,lc=B(),mc=function(){if(!kc){for(var e=document.getElementsByTagName("meta"),t=0;t<e.length;++t){var n=e[t].name.toLowerCase();if(0==n.lastIndexOf("google-signin-",0)){n=n.substring(14);var r=e[t].content;jc[n]&&r&&(lc[n]=r)}}if(window.self!==window.top)for(var o in e=document.location.toString(),jc)0<jc[o]&&(t=H(e,o,""))&&(lc[o]=t);kc=!0}return o=B(),D(lc,o),o},nc=function(e){return!!(e.clientid&&e.scope&&e.callback)},oc=window.console,pc=function(e){oc&&oc.log&&oc.log(e)},qc=function(){return!!K.oa},rc=function(){},R=A(K,"rw",B()),sc=function(e){for(var t in R)e(R[t])},tc=function(e,t){(e=R[e])&&e.state<t&&(e.state=t)},uc,vc=/^https?:\/\/(?:\w|[\-\.])+\.google\.(?:\w|[\-:\.])+(?:\/[^\?#]*)?\/u\/(\d)\//,wc=/^https?:\/\/(?:\w|[\-\.])+\.google\.(?:\w|[\-:\.])+(?:\/[^\?#]*)?\/b\/(\d{10,21})\//,xc=function(e){var t=Q("googleapis.config/sessionIndex");if("string"==typeof t&&254<t.length&&(t=null),null==t&&(t=window.__X_GOOG_AUTHUSER),"string"==typeof t&&254<t.length&&(t=null),null==t){var n=window.google;n&&(t=n.authuser)}return"string"==typeof t&&254<t.length&&(t=null),null==t&&(e=e||window.location.href,null==(t=H(e,"authuser")||null)&&(t=(t=e.match(vc))?t[1]:null)),null==t?null:(254<(t=String(t)).length&&(t=null),t)},yc=function(e){var t=Q("googleapis.config/sessionDelegate");return"string"==typeof t&&21<t.length&&(t=null),null==t&&(t=(e=(e||window.location.href).match(wc))?e[1]:null),null==t?null:(21<(t=String(t)).length&&(t=null),t)},zc,S,T=void 0,U=function(e){try{return m.JSON.parse.call(m.JSON,e)}catch(e){return!1}},V=function(e){return Object.prototype.toString.call(e)},Ac=V(0),Bc=V(new Date(0)),Cc=V(!0),Dc=V(""),Ec=V({}),Fc=V([]),W=function(e,t){if(t)for(var n=0,r=t.length;n<r;++n)if(e===t[n])throw new TypeError("Converting circular structure to JSON");if("undefined"!=(r=typeof e)){(n=Array.prototype.slice.call(t||[],0))[n.length]=e,t=[];var o=V(e);if(null!=e&&"function"==typeof e.toJSON&&(Object.prototype.hasOwnProperty.call(e,"toJSON")||(o!==Fc||e.constructor!==Array&&e.constructor!==Object)&&(o!==Ec||e.constructor!==Array&&e.constructor!==Object)&&o!==Dc&&o!==Ac&&o!==Cc&&o!==Bc))return W(e.toJSON.call(e),n);if(null==e)t[t.length]="null";else if(o===Ac)e=Number(e),isNaN(e)||isNaN(e-e)?e="null":-0===e&&0>1/e&&(e="-0"),t[t.length]=String(e);else if(o===Cc)t[t.length]=String(!!Number(e));else{if(o===Bc)return W(e.toISOString.call(e),n);if(o===Fc&&V(e.length)===Ac){t[t.length]="[";var i=0;for(r=Number(e.length)>>0;i<r;++i)i&&(t[t.length]=","),t[t.length]=W(e[i],n)||"null";t[t.length]="]"}else if(o==Dc&&V(e.length)===Ac){for(t[t.length]='"',i=0,n=Number(e.length)>>0;i<n;++i)r=String.prototype.charAt.call(e,i),o=String.prototype.charCodeAt.call(e,i),t[t.length]="\b"===r?"\\b":"\f"===r?"\\f":"\n"===r?"\\n":"\r"===r?"\\r":"\t"===r?"\\t":"\\"===r||'"'===r?"\\"+r:31>=o?"\\u"+(o+65536).toString(16).substr(1):32<=o&&65535>=o?r:"ï¿½";t[t.length]='"'}else{if("object"!==r)return;for(i in t[t.length]="{",r=0,e)Object.prototype.hasOwnProperty.call(e,i)&&void 0!==(o=W(e[i],n))&&(r++&&(t[t.length]=","),t[t.length]=W(i),t[t.length]=":",t[t.length]=o);t[t.length]="}"}}return t.join("")}},Gc=/[\0-\x07\x0b\x0e-\x1f]/,Hc=/^([^"]*"([^\\"]|\\.)*")*[^"]*"([^"\\]|\\.)*[\0-\x1f]/,Ic=/^([^"]*"([^\\"]|\\.)*")*[^"]*"([^"\\]|\\.)*\\[^\\\/"bfnrtu]/,Jc=/^([^"]*"([^\\"]|\\.)*")*[^"]*"([^"\\]|\\.)*\\u([0-9a-fA-F]{0,3}[^0-9a-fA-F])/,Kc=/"([^\0-\x1f\\"]|\\[\\\/"bfnrt]|\\u[0-9a-fA-F]{4})*"/g,Lc=/-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][-+]?[0-9]+)?/g,Mc=/[ \t\n\r]+/g,Nc=/[^"]:/,Oc=/""/g,Pc=/true|false|null/g,Qc=/00/,Rc=/[\{]([^0\}]|0[^:])/,Sc=/(^|\[)[,:]|[,:](\]|\}|[,:]|$)/,Tc=/[^\[,:][\[\{]/,Uc=/^(\{|\}|\[|\]|,|:|0)+/,Vc=/\u2028/g,Wc=/\u2029/g,Xc=function(a){if(a=String(a),Gc.test(a)||Hc.test(a)||Ic.test(a)||Jc.test(a))return!1;var b=a.replace(Kc,'""');if(b=b.replace(Lc,"0"),b=b.replace(Mc,""),Nc.test(b))return!1;if(b=b.replace(Oc,"0"),b=b.replace(Pc,"0"),Qc.test(b)||Rc.test(b)||Sc.test(b)||Tc.test(b)||!b||(b=b.replace(Uc,"")))return!1;a=a.replace(Vc,"\\u2028").replace(Wc,"\\u2029"),b=void 0;try{b=T?[U(a)]:eval("(function (var_args) {\n  return Array.prototype.slice.call(arguments, 0);\n})(\n"+a+"\n)")}catch(e){return!1}return!(!b||1!==b.length)&&b[0]},Yc=function(){var e=((m.document||{}).scripts||[]).length;if((void 0===zc||void 0===T||S!==e)&&-1!==S){zc=T=!1,S=-1;try{try{T=!!m.JSON&&'{"a":[3,true,"1970-01-01T00:00:00.000Z"]}'===m.JSON.stringify.call(m.JSON,{a:[3,!0,new Date(0)],c:function(){}})&&!0===U("true")&&3===U('[{"a":3}]')[0].a}catch(e){}zc=T&&!U("[00]")&&!U('""')&&!U('"\\0"')&&!U('"\\v"')}finally{S=e}}},Zc=function(e){return-1!==S&&(Yc(),(zc?U:Xc)(e))},$c=function(e){if(-1!==S)return Yc(),T?m.JSON.stringify.call(m.JSON,e):W(e)},ad=!Date.prototype.toISOString||"function"!=typeof Date.prototype.toISOString||"1970-01-01T00:00:00.000Z"!==new Date(0).toISOString(),bd=function(){var e=Date.prototype.getUTCFullYear.call(this);return[0>e?"-"+String(1e6-e).substr(1):9999>=e?String(1e4+e).substr(1):"+"+String(1e6+e).substr(1),"-",String(101+Date.prototype.getUTCMonth.call(this)).substr(1),"-",String(100+Date.prototype.getUTCDate.call(this)).substr(1),"T",String(100+Date.prototype.getUTCHours.call(this)).substr(1),":",String(100+Date.prototype.getUTCMinutes.call(this)).substr(1),":",String(100+Date.prototype.getUTCSeconds.call(this)).substr(1),".",String(1e3+Date.prototype.getUTCMilliseconds.call(this)).substr(1),"Z"].join("")};Date.prototype.toISOString=ad?bd:Date.prototype.toISOString;var cd=function(){this.j=-1},dd=function(){this.j=64,this.b=[],this.G=[],this.da=[],this.C=[],this.C[0]=128;for(var e=1;e<this.j;++e)this.C[e]=0;this.D=this.o=0,this.reset()};oa(dd,cd),dd.prototype.reset=function(){this.b[0]=1732584193,this.b[1]=4023233417,this.b[2]=2562383102,this.b[3]=271733878,this.b[4]=3285377520,this.D=this.o=0};var ed=function(e,t,n){n||(n=0);var r=e.da;if("string"==typeof t)for(var o=0;16>o;o++)r[o]=t.charCodeAt(n)<<24|t.charCodeAt(n+1)<<16|t.charCodeAt(n+2)<<8|t.charCodeAt(n+3),n+=4;else for(o=0;16>o;o++)r[o]=t[n]<<24|t[n+1]<<16|t[n+2]<<8|t[n+3],n+=4;for(o=16;80>o;o++){var i=r[o-3]^r[o-8]^r[o-14]^r[o-16];r[o]=4294967295&(i<<1|i>>>31)}t=e.b[0],n=e.b[1];var a=e.b[2],l=e.b[3],u=e.b[4];for(o=0;80>o;o++){if(40>o)if(20>o){i=l^n&(a^l);var s=1518500249}else i=n^a^l,s=1859775393;else 60>o?(i=n&a|l&(n|a),s=2400959708):(i=n^a^l,s=3395469782);i=(t<<5|t>>>27)+i+u+s+r[o]&4294967295,u=l,l=a,a=4294967295&(n<<30|n>>>2),n=t,t=i}e.b[0]=e.b[0]+t&4294967295,e.b[1]=e.b[1]+n&4294967295,e.b[2]=e.b[2]+a&4294967295,e.b[3]=e.b[3]+l&4294967295,e.b[4]=e.b[4]+u&4294967295};dd.prototype.update=function(e,t){if(null!=e){void 0===t&&(t=e.length);for(var n=t-this.j,r=0,o=this.G,i=this.o;r<t;){if(0==i)for(;r<=n;)ed(this,e,r),r+=this.j;if("string"==typeof e){for(;r<t;)if(o[i]=e.charCodeAt(r),++r,++i==this.j){ed(this,o),i=0;break}}else for(;r<t;)if(o[i]=e[r],++r,++i==this.j){ed(this,o),i=0;break}}this.o=i,this.D+=t}},dd.prototype.digest=function(){var e=[],t=8*this.D;56>this.o?this.update(this.C,56-this.o):this.update(this.C,this.j-(this.o-56));for(var n=this.j-1;56<=n;n--)this.G[n]=255&t,t/=256;for(ed(this,this.G),n=t=0;5>n;n++)for(var r=24;0<=r;r-=8)e[t]=this.b[n]>>r&255,++t;return e};var fd=function(){this.O=new dd};fd.prototype.reset=function(){this.O.reset()};var gd=x.crypto,hd=!1,id=0,jd=0,kd=1,ld=0,md="",nd=function(e){var t=(e=e||x.event).screenX+e.clientX<<16;t+=e.screenY+e.clientY,t*=(new Date).getTime()%1e6,kd=kd*t%ld,0<id&&++jd==id&&jb("mousemove",nd,"remove","de")},od=function(e){for(var t=new fd,n=[],r=0,o=(e=unescape(encodeURIComponent(e))).length;r<o;++r)n.push(e.charCodeAt(r));for(t.O.update(n),t=t.O.digest(),e="",n=0;n<t.length;n++)e+="0123456789ABCDEF".charAt(Math.floor(t[n]/16))+"0123456789ABCDEF".charAt(t[n]%16);return e};hd=!!gd&&"function"==typeof gd.getRandomValues,hd||(ld=1e6*(screen.width*screen.width+screen.height),md=od(z.cookie+"|"+z.location+"|"+(new Date).getTime()+"|"+Math.random()),id=Q("random/maxObserveMousemove")||0,0!=id&&jb("mousemove",nd,"add","at"));var pd=function(){var e=kd;return e+=parseInt(md.substr(0,20),16),md=od(md),e/(ld+Math.pow(16,20))},qd=function(){var e=new x.Uint32Array(1);return gd.getRandomValues(e),Number("0."+e[0])},rd=function(){var e=K.onl;if(!e){e=B(),K.onl=e;var t=B();e.e=function(e){var n=t[e];n&&(delete t[e],n())},e.a=function(e,n){t[e]=n},e.r=function(e){delete t[e]}}return e},sd=function(e,t){return"function"==typeof(t=t.onload)?(rd().a(e,t),t):null},td=function(e){return E(/^\w+$/.test(e),"Unsupported id - "+e),rd(),'onload="window.___jsl.onl.e(&#34;'+e+'&#34;)"'},ud=function(e){rd().r(e)},vd={allowtransparency:"true",frameborder:"0",hspace:"0",marginheight:"0",marginwidth:"0",scrolling:"no",style:"",tabindex:"0",vspace:"0",width:"100%"},wd={allowtransparency:!0,onload:!0},xd=0,yd=function(e){E(!e||ib.test(e),"Illegal url for new iframe - "+e)},zd=function(e,t,n,r,o){yd(n.src);var i,a=sd(r,n),l=a?td(r):"";try{document.all&&(i=e.createElement('<iframe frameborder="'+Wa(String(n.frameborder))+'" scrolling="'+Wa(String(n.scrolling))+'" '+l+' name="'+Wa(String(n.name))+'"/>'))}catch(e){}finally{i||(i=e.createElement("iframe"),a&&(i.onload=function(){i.onload=null,a.call(this)},ud(r)))}for(var u in i.setAttribute("ng-non-bindable",""),n)e=n[u],"style"===u&&"object"==typeof e?D(e,i.style):wd[u]||i.setAttribute(u,String(e));return(u=o&&o.beforeNode||null)||o&&o.dontclear||ob(t),t.insertBefore(i,u),i=u?u.previousSibling:t.lastChild,n.allowtransparency&&(i.allowTransparency=!0),i},Ad=/^:[\w]+$/,Bd=/:([a-zA-Z_]+):/g,Cd=function(){var e=xc()||"0",t=yc(),n=xc(void 0)||e,r=yc(void 0),o="";n&&(o+="u/"+encodeURIComponent(String(n))+"/"),r&&(o+="b/"+encodeURIComponent(String(r))+"/"),n=o||null,(o=(r=!1===Q("isLoggedIn"))?"_/im/":"")&&(n="");var i=Q("iframes/:socialhost:"),a=Q("iframes/:im_socialhost:");return uc={socialhost:i,ctx_socialhost:r?a:i,session_index:e,session_delegate:t,session_prefix:n,im_prefix:o}},Dd=function(e,t){return Cd()[t]||""},Ed=function(e){return function(t,n){return e?Cd()[n]||e[n]||"":Cd()[n]||""}},Fd=function(e){var t;return e.match(/^https?%3A/i)&&(t=decodeURIComponent(e)),hb(document,t||e)},Gd=function(e){e=e||"canonical";for(var t=document.getElementsByTagName("link"),n=0,r=t.length;n<r;n++){var o=t[n],i=o.getAttribute("rel");if(i&&i.toLowerCase()==e&&(o=o.getAttribute("href"))&&(o=Fd(o))&&null!=o.match(/^https?:\/\/[\w\-_\.]+/i))return o}return window.location.href},Hd={se:"0"},Id={post:!0},Jd={style:"position:absolute;top:-10000px;width:450px;margin:0px;border-style:none"},Kd="onPlusOne _ready _close _open _resizeMe _renderstart oncircled drefresh erefresh".split(" "),Ld=A(K,"WI",B()),Md=function(e,t,n){var r,o={},i=r=e;for(var a in"plus"==e&&t.action&&(r=e+"_"+t.action,i=e+"/"+t.action),(r=Q("iframes/"+r+"/url"))||(r=":im_socialhost:/:session_prefix::im_prefix:_/widget/render/"+i+"?usegapi=1"),Hd)o[a]=a+"/"+(t[a]||Hd[a])+"/";if(o=hb(z,r.replace(Bd,Ed(o))),a="iframes/"+e+"/params/",D(t,i={}),(r=Q("lang")||Q("gwidget/lang"))&&(i.hl=r),Id[e]||(i.origin=window.location.origin||window.location.protocol+"//"+window.location.host),i.exp=Q(a+"exp"),a=Q(a+"location"))for(r=0;r<a.length;r++){var l=a[r];i[l]=x.location[l]}switch(e){case"plus":case"follow":a=i.href,r=t.action?void 0:"publisher",a=(a="string"==typeof a?a:void 0)?Fd(a):Gd(r),i.url=a,delete i.href;break;case"plusone":a=(a=t.href)?Fd(a):Gd(),i.url=a,a=t.db,r=Q(),null==a&&r&&null==(a=r.db)&&(a=r.gwidget&&r.gwidget.db),i.db=a||void 0,a=t.ecp,r=Q(),null==a&&r&&null==(a=r.ecp)&&(a=r.gwidget&&r.gwidget.ecp),i.ecp=a||void 0,delete i.href;break;case"signin":i.url=Gd()}for(var u in K.ILI&&(i.iloader="1"),delete i["data-onload"],delete i.rd,Hd)i[u]&&delete i[u];for(var s in i.gsrc=Q("iframes/:source:"),void 0!==(u=Q("inline/css"))&&0<n&&u>=n&&(i.ic="1"),u=/^#|^fr-/,n={},i)C(i,s)&&u.test(s)&&(n[s.replace(u,"")]=i[s],delete i[s]);for(var c in s="q"==Q("iframes/"+e+"/params/si")?i:n,u=mc())!C(u,c)||C(i,c)||C(n,c)||(s[c]=u[c]);for(var f in c=[].concat(Kd),(s=Q("iframes/"+e+"/methods"))&&"object"==typeof s&&Na.test(s.push)&&(c=c.concat(s)),t)C(t,f)&&/^on/.test(f)&&("plus"!=e||"onconnect"!=f)&&(c.push(f),delete i[f]);return delete i.callback,n._methods=c.join(","),fb(o,i,n)},Nd=["style","data-gapiscan"],Pd=function(e){for(var t=B(),n=0!=e.nodeName.toLowerCase().indexOf("g:"),r=0,o=e.attributes.length;r<o;r++){var i=e.attributes[r],a=i.name,l=i.value;0<=Oa.call(Nd,a)||n&&0!=a.indexOf("data-")||"null"===l||"specified"in i&&!i.specified||(n&&(a=a.substr(5)),t[a.toLowerCase()]=l)}return e=e.style,(n=Od(e&&e.height))&&(t.height=String(n)),(e=Od(e&&e.width))&&(t.width=String(e)),t},Od=function(e){var t=void 0;return"number"==typeof e?t=e:"string"==typeof e&&(t=parseInt(e,10)),t},Rd=function(){var e=K.drw;sc((function(t){if(e!==t.id&&4!=t.state&&"share"!=t.type){var n=t.id,r=t.type,o=t.url;t=t.userParams;var i=z.getElementById(n);if(i){var a=Md(r,t,0);a?(i=i.parentNode,o.replace(/#.*/,"").replace(/(\?|&)ic=1/,"")!==a.replace(/#.*/,"").replace(/(\?|&)ic=1/,"")&&(t.dontclear=!0,t.rd=!0,t.ri=!0,t.type=r,Qd(i,t),(r=R[i.lastChild.id])&&(r.oid=n),tc(n,4))):delete R[n]}else delete R[n]}}))},Sd,Td,X,Ud,Vd,Wd=/(?:^|\s)g-((\S)*)(?:$|\s)/,Xd={plusone:!0,autocomplete:!0,profile:!0,signin:!0,signin2:!0};Sd=A(K,"SW",B()),Td=A(K,"SA",B()),X=A(K,"SM",B()),Ud=A(K,"FW",[]),Vd=null;var Zd=function(e,t){Yd(void 0,!1,e,t)},Yd=function(e,t,n,r){L("ps0",!0),n=("string"==typeof n?document.getElementById(n):n)||z;var o=z.documentMode;if(n.querySelectorAll&&(!o||8<o)){o=r?[r]:Xa(Sd).concat(Xa(Td)).concat(Xa(X));for(var i=[],a=0;a<o.length;a++){var l=o[a];i.push(".g-"+l,"g\\:"+l)}o=n.querySelectorAll(i.join(","))}else o=n.getElementsByTagName("*");for(n=B(),i=0;i<o.length;i++){var u=a=o[i];l=r;var s=u.nodeName.toLowerCase(),c=void 0;if(u.getAttribute("data-gapiscan"))l=null;else{var f=s.indexOf("g:");0==f?c=s.substr(2):(f=(f=String(u.className||u.getAttribute("class")))&&Wd.exec(f))&&(c=f[1]),l=!c||!(Sd[c]||Td[c]||X[c])||l&&c!==l?null:c}l&&(Xd[l]||0==a.nodeName.toLowerCase().indexOf("g:")||0!=Xa(Pd(a)).length)&&(a.setAttribute("data-gapiscan",!0),A(n,l,[]).push(a))}if(t)for(var d in n)for(t=n[d],r=0;r<t.length;r++)t[r].setAttribute("data-onload",!0);for(var p in n)Ud.push(p);if(L("ps1",!0),(d=Ud.join(":"))||e)try{F.load(d,e)}catch(e){return void pc(e)}if($d(Vd||{}))for(var h in n){for(p=0,t=(e=n[h]).length;p<t;p++)e[p].removeAttribute("data-gapiscan");ae(h)}else{for(h in r=[],n)for(p=0,t=(e=n[h]).length;p<t;p++)o=e[p],be(h,o,Pd(o),r,t);ce(d,r)}},de=function(e){var t=A(F,e,{});t.go||(t.go=function(t){return Zd(t,e)},t.render=function(t,n){return(n=n||{}).type=e,Qd(t,n)})},ee=function(e){Sd[e]=!0},fe=function(e){Td[e]=!0},ge=function(e){X[e]=!0},ae=function(e,t){var n=sb(e);t&&n?(n(t),(n=t.iframeNode)&&n.setAttribute("data-gapiattached",!0)):F.load(e,(function(){var n=sb(e),r=t&&t.iframeNode,o=t&&t.userParams;r&&n?(n(t),r.setAttribute("data-gapiattached",!0)):(n=F[e].go)("signin2"==e?r:r&&r.parentNode,o)}))},$d=function(){return!1},ce=function(){},be=function(e,t,n,r,o,i,a){switch(he(t,e,i)){case 0:e=X[e]?e+"_annotation":e,(r={}).iframeNode=t,r.userParams=n,ae(e,r);break;case 1:if(t.parentNode){for(var l in n)if((i=C(n,l))&&(i=!(!(i=n[l])||"object"!=typeof i||i.toString&&i.toString!==Object.prototype.toString&&i.toString!==Array.prototype.toString)),i)try{n[l]=$c(n[l])}catch(e){delete n[l]}if(i=!0,n.dontclear&&(i=!1),delete n.dontclear,rc(),l=Md(e,n,o),(o=a||{}).allowPost=1,o.attributes=Jd,o.dontclear=!i,(a={}).userParams=n,a.url=l,a.type=e,n.rd)var u=t;else u=document.createElement("div"),t.setAttribute("data-gapistub",!0),u.style.cssText="position:absolute;width:450px;left:-10000px;",t.parentNode.insertBefore(u,t);a.siteElement=u,u.id||(t=u,A(Ld,e,0),i="___"+e+"_"+Ld[e]++,t.id=i),(t=B())[">type"]=e,D(n,t),i=l,n=u,t=(l=o||{}).attributes||{},E(!(l.allowPost||l.forcePost)||!t.onload,"onload is not supported by post iframe (allowPost or forcePost)"),o=t=i,Ad.test(t)&&(o=Q("iframes/"+o.substring(1)+"/url"),E(!!o,"Unknown iframe url config for - "+t)),i=hb(z,o.replace(Bd,Dd)),t=n.ownerDocument||z,u=0;do{o=l.id||["I",xd++,"_",(new Date).getTime()].join("")}while(t.getElementById(o)&&5>++u);E(5>u,"Error creating iframe id"),u={};var s={};t.documentMode&&9>t.documentMode&&(u.hostiemode=t.documentMode),D(l.queryParams||{},u),D(l.fragmentParams||{},s);var c=l.pfname,f=B();Q("iframes/dropLegacyIdParam")||(f.id=o),f._gfid=o,f.parent=t.location.protocol+"//"+t.location.host;var d=H(t.location.href,"parent");if(!(c=c||"")&&d&&(d=H(t.location.href,"_gfid","")||H(t.location.href,"id",""),c=H(t.location.href,"pfname",""),c=d?c+"/"+d:""),c||(d=Zc(H(t.location.href,"jcp","")))&&"object"==typeof d&&(c=(c=d.id)?d.pfname+"/"+c:""),f.pfname=c,l.connectWithJsonParam&&((d={}).jcp=$c(f),f=d),(d=H(i,"rpctoken")||u.rpctoken||s.rpctoken)||(d=l.rpctoken||String(Math.round(1e8*(hd?qd():pd()))),f.rpctoken=d),l.rpctoken=d,D(f,l.connectWithQueryParams?u:s),d=t.location.href,f=B(),(c=H(d,"_bsh",K.bsh))&&(f._bsh=c),(d=qb(d))&&(f.jsh=d),l.hintInFragment?D(f,s):D(f,u),i=fb(i,u,s,l.paramsSerializer),s=B(),D(vd,s),D(l.attributes,s),s.name=s.id=o,s.src=i,l.eurl=i,f=!!(u=l||{}).allowPost,u.forcePost||f&&2e3<i.length){if(u=I(i),s.src="",l.dropDataPostorigin||(s["data-postorigin"]=i),i=zd(t,n,s,o),-1!=navigator.userAgent.indexOf("WebKit")){var p=i.contentWindow.document;p.open(),s=p.createElement("div"),(f={}).name=d=o+"_inner",f.src="",f.style="display:none",zd(t,s,f,d,l)}for(s=(l=u.query[0])?l.split("&"):[],l=[],f=0;f<s.length;f++)d=s[f].split("=",2),l.push([decodeURIComponent(d[0]),decodeURIComponent(d[1])]);for(u.query=[],s=db(u),E(ib.test(s),"Invalid URL: "+s),(u=t.createElement("form")).method="POST",u.target=o,u.style.display="none",o=s instanceof v?s:Fa(s),xa(u,"HTMLFormElement").action=Da(o),o=0;o<l.length;o++)(s=t.createElement("input")).type="hidden",s.name=l[o][0],s.value=l[o][1],u.appendChild(s);n.appendChild(u),u.submit(),u.parentNode.removeChild(u),p&&p.close(),p=i}else p=zd(t,n,s,o,l);a.iframeNode=p,a.id=p.getAttribute("id"),p=a.id,(n=B()).id=p,n.userParams=a.userParams,n.url=a.url,n.type=a.type,n.state=1,R[p]=n,p=a}else p=null;p&&((a=p.id)&&r.push(a),ae(e,p))}},he=function(e,t,n){if(e&&1===e.nodeType&&t){if(n)return 1;if(X[t]){if(pb[e.nodeName.toLowerCase()])return(e=e.innerHTML)&&e.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")?0:1}else{if(Td[t])return 0;if(Sd[t])return 1}}return null},Qd=function(e,t){var n=t.type;delete t.type;var r=("string"==typeof e?document.getElementById(e):e)||void 0;if(r){for(var o in e={},t)C(t,o)&&(e[o.toLowerCase()]=t[o]);e.rd=1,(t=!!e.ri)&&delete e.ri,be(n,r,e,o=[],0,t,void 0),ce(n,o)}else pc("string"=="gapi."+n+".render: missing element "+typeof e?e:"")};A(F,"platform",{}).go=Zd,$d=function(e){for(var t=["_c","jsl","h"],n=0;n<t.length&&e;n++)e=e[t[n]];return t=qb(La.href),!e||0!=e.indexOf("n;")&&0!=t.indexOf("n;")&&e!==t},ce=function(e,t){ie(e,t)};var lb=function(e){Yd(e,!0)},je=function(e,t){t=t||[];for(var n=0;n<t.length;++n)e(t[n]);for(e=0;e<t.length;e++)de(t[e])};N.push(["platform",function(e,t,n){if(Vd=n,t&&Ud.push(t),je(ee,e),je(fe,n._c.annotation),je(ge,n._c.bimodal),ic(),gc(),"explicit"!=Q("parsetags")){if(rb(e),nc(mc())&&!Q("disableRealtimeCallback")&&rc(),n&&(e=n.callback)){var r=Ya(e);delete n.callback}nb((function(){lb(r)}))}}]),F._pl=!0;var ke=function(e){if(e=(e=R[e])?e.oid:void 0){var t=z.getElementById(e);t&&t.parentNode.removeChild(t),delete R[e],ke(e)}},le=/^\{h:'/,me=/^!_/,ne="",ie=function(e,t){function n(){jb("message",r,"remove","de")}function r(r){var i=r.data,a=r.origin;if(oe(i,t)){var l=o;o=!1,l&&L("rqe"),pe(e,(function(){l&&L("rqd"),n();for(var e=A(K,"RPMQ",[]),t=0;t<e.length;t++)e[t]({data:i,origin:a})}))}}if(0!==t.length){ne=H(La.href,"pfname","");var o=!0;jb("message",r,"add","at"),ac(e,n)}},oe=function(e,t){if(e=String(e),le.test(e))return!0;var n=!1;if(me.test(e)&&(n=!0,e=e.substr(2)),!/^\{/.test(e))return!1;var r=Zc(e);if(!r)return!1;if(e=r.f,r.s&&e&&-1!=Oa.call(t,e)){if(("_renderstart"===r.s||r.s===ne+"/"+e+"::_renderstart")&&(r=r.a&&r.a[n?0:1],t=z.getElementById(e),tc(e,2),r&&t&&r.width&&r.height)){e:{if(n=t.parentNode,e=r||{},qc()){var o=t.id;if(o){if(1===(r=(r=R[o])?r.state:void 0)||4===r)break e;ke(o)}}(r=n.nextSibling)&&r.getAttribute&&r.getAttribute("data-gapistub")&&(n.parentNode.removeChild(r),n.style.cssText=""),r=e.width;var i=e.height,a=n.style;a.textIndent="0",a.margin="0",a.padding="0",a.background="transparent",a.borderStyle="none",a.cssFloat="none",a.styleFloat="none",a.lineHeight="normal",a.fontSize="1px",a.verticalAlign="baseline",(n=n.style).display="inline-block",(a=t.style).position="static",a.left="0",a.top="0",a.visibility="visible",r&&(n.width=a.width=r+"px"),i&&(n.height=a.height=i+"px"),e.verticalAlign&&(n.verticalAlign=e.verticalAlign),o&&tc(o,3)}t["data-csi-wdt"]=(new Date).getTime()}return!0}return!1},pe=function(e,t){ac(e,t)},qe=function(e,t){this.L=e,e=t||{},this.fa=Number(e.maxAge)||0,this.U=e.domain,this.X=e.path,this.ga=!!e.secure};qe.prototype.read=function(){for(var e=this.L+"=",t=document.cookie.split(/;\s*/),n=0;n<t.length;++n){var r=t[n];if(0==r.indexOf(e))return r.substr(e.length)}},qe.prototype.write=function(e,t){if(!re.test(this.L))throw"Invalid cookie name";if(!se.test(e))throw"Invalid cookie value";if(e=this.L+"="+e,this.U&&(e+=";domain="+this.U),this.X&&(e+=";path="+this.X),0<=(t="number"==typeof t?t:this.fa)){var n=new Date;n.setSeconds(n.getSeconds()+t),e+=";expires="+n.toUTCString()}return this.ga&&(e+=";secure"),document.cookie=e,!0},qe.prototype.clear=function(){this.write("",0)};var se=/^[-+/_=.:|%&a-zA-Z0-9@]*$/,re=/^[A-Z_][A-Z0-9_]{0,63}$/;qe.iterate=function(e){for(var t=document.cookie.split(/;\s*/),n=0;n<t.length;++n){var r=t[n].split("=");e(r.shift(),r.join("="))}};var te=function(e){this.B=e};te.prototype.read=function(){if(Y.hasOwnProperty(this.B))return Y[this.B]},te.prototype.write=function(e){return Y[this.B]=e,!0},te.prototype.clear=function(){delete Y[this.B]};var Y={};te.iterate=function(e){for(var t in Y)Y.hasOwnProperty(t)&&e(t,Y[t])};var ue="https:"===window.location.protocol,ve=ue||"http:"===window.location.protocol?qe:te,we=function(e){var t=e.substr(1),n="",r=window.location.hostname;if(""!==t){if(n=parseInt(t,10),isNaN(n))return null;if((t=r.split(".")).length<n-1)return null;t.length==n-1&&(r="."+r)}else r="";return{i:"S"==e.charAt(0),domain:r,l:n}},xe=function(){var e,t=null;return ve.iterate((function(n,r){0===n.indexOf("G_AUTHUSER_")&&(n=we(n.substring(11)),!e||n.i&&!e.i||n.i==e.i&&n.l>e.l)&&(e=n,t=r)})),{ea:e,F:t}},ye=function(e){if(0!==e.indexOf("GCSC"))return null;var t={W:!1};if(!(e=e.substr(4)))return t;var n=e.charAt(0),r=(e=e.substr(1)).lastIndexOf("_");if(-1==r)return t;var o=we(e.substr(r+1));return null==o||"_"!==(e=e.substring(0,r)).charAt(0)||!(r="E"===n&&o.i)&&("U"!==n||o.i)||r&&!ue?t:{W:!0,i:r,ja:e.substr(1),domain:o.domain,l:o.l}},ze=function(e){return e&&(e=e.split("="))[1]?e[1].split("|"):[]},Ae=function(e){return{clientId:(e=e.split(":"))[0].split("=")[1],ia:ze(e[1]),la:ze(e[2]),ka:ze(e[3])}},Be=function(){var e,t=xe(),n=t.ea;if(null!==(t=t.F)&&(ve.iterate((function(t,r){(t=ye(t))&&t.W&&t.i==n.i&&t.l==n.l&&(e=r)})),e)){var r=Ae(e),o=r&&r.ia[Number(t)];if(r=r&&r.clientId,o)return{F:t,ha:o,clientId:r}}return null},Z=function(){this.T=Ce};Z.prototype.$=function(){this.K||(this.v=0,this.K=!0,this.Y())},Z.prototype.Y=function(){this.K&&(this.T()?this.v=this.R:this.v=Math.min(2*(this.v||this.R),120),window.setTimeout(na(this.Y,this),1e3*this.v))},Z.prototype.v=0,Z.prototype.R=2,Z.prototype.T=null,Z.prototype.K=!1;for(var De=0;64>De;++De);var Ee=null;qc=function(){return K.oa=!0},rc=function(){K.oa=!0;var e=Be();(e=e&&e.F)&&hc("googleapis.config/sessionIndex",e),Ee||(Ee=A(K,"ss",new Z)),(e=Ee).$&&e.$()};var Ce=function(){var e=Be(),t=e&&e.ha||null,n=e&&e.clientId;return ac("auth",{callback:function(){var e=x.gapi.auth,r={client_id:n,session_state:t};e.checkSessionState(r,(function(t){var n=r.session_state,o=Q("isLoggedIn");(o=o!=(t=!Q("debug/forceIm")&&(n&&t||!n&&!t)))&&(hc("isLoggedIn",t),rc(),Rd(),t||((t=e.signOut)?t():(t=e.setToken)&&t(null))),t=mc();var i=Q("savedUserState");i=i!=(n=e._guss(t.cookiepolicy))&&void 0!==i,hc("savedUserState",n),(o||i)&&nc(t)&&!Q("disableRealtimeCallback")&&e._pimf(t,!0)}))}}),!0};L("bs0",!0,window.gapi._bs),L("bs1",!0),delete window.gapi._bs}.call(void 0);var gapiComplete=gapi.load("",{callback:window.gapi_onload,_c:{jsl:{ci:{deviceType:"desktop","oauth-flow":{authUrl:"https://accounts.google.com/o/oauth2/auth",proxyUrl:"https://accounts.google.com/o/oauth2/postmessageRelay",disableOpt:!0,idpIframeUrl:"https://accounts.google.com/o/oauth2/iframe",usegapi:!1},debug:{reportExceptionRate:.05,forceIm:!1,rethrowException:!1,host:"https://apis.google.com"},enableMultilogin:!0,"googleapis.config":{auth:{useFirstPartyAuthV2:!0}},isPlusUser:!1,inline:{css:1},disableRealtimeCallback:!1,drive_share:{skipInitCommand:!0},csi:{rate:.01},client:{cors:!1},isLoggedIn:!0,signInDeprecation:{rate:0},include_granted_scopes:!0,llang:"pt",iframes:{youtube:{params:{location:["search","hash"]},url:":socialhost:/:session_prefix:_/widget/render/youtube?usegapi=1",methods:["scroll","openwindow"]},ytsubscribe:{url:"https://www.youtube.com/subscribe_embed?usegapi=1"},plus_circle:{params:{url:""},url:":socialhost:/:session_prefix::se:_/widget/plus/circle?usegapi=1"},plus_share:{params:{url:""},url:":socialhost:/:session_prefix::se:_/+1/sharebutton?plusShare=true&usegapi=1"},rbr_s:{params:{url:""},url:":socialhost:/:session_prefix::se:_/widget/render/recobarsimplescroller"},":source:":"3p",playemm:{url:"https://play.google.com/work/embedded/search?usegapi=1&usegapi=1"},savetoandroidpay:{url:"https://pay.google.com/gp/v/widget/save"},blogger:{params:{location:["search","hash"]},url:":socialhost:/:session_prefix:_/widget/render/blogger?usegapi=1",methods:["scroll","openwindow"]},evwidget:{params:{url:""},url:":socialhost:/:session_prefix:_/events/widget?usegapi=1"},partnersbadge:{url:"https://www.gstatic.com/partners/badge/templates/badge.html?usegapi=1"},dataconnector:{url:"https://dataconnector.corp.google.com/:session_prefix:ui/widgetview?usegapi=1"},surveyoptin:{url:"https://www.google.com/shopping/customerreviews/optin?usegapi=1"},":socialhost:":"https://apis.google.com",shortlists:{url:""},hangout:{url:"https://talkgadget.google.com/:session_prefix:talkgadget/_/widget"},plus_followers:{params:{url:""},url:":socialhost:/_/im/_/widget/render/plus/followers?usegapi=1"},post:{params:{url:""},url:":socialhost:/:session_prefix::im_prefix:_/widget/render/post?usegapi=1"},":gplus_url:":"https://plus.google.com",signin:{params:{url:""},url:":socialhost:/:session_prefix:_/widget/render/signin?usegapi=1",methods:["onauth"]},rbr_i:{params:{url:""},url:":socialhost:/:session_prefix::se:_/widget/render/recobarinvitation"},share:{url:":socialhost:/:session_prefix::im_prefix:_/widget/render/share?usegapi=1"},plusone:{params:{count:"",size:"",url:""},url:":socialhost:/:session_prefix::se:_/+1/fastbutton?usegapi=1"},comments:{params:{location:["search","hash"]},url:":socialhost:/:session_prefix:_/widget/render/comments?usegapi=1",methods:["scroll","openwindow"]},":im_socialhost:":"https://plus.googleapis.com",backdrop:{url:"https://clients3.google.com/cast/chromecast/home/widget/backdrop?usegapi=1"},visibility:{params:{url:""},url:":socialhost:/:session_prefix:_/widget/render/visibility?usegapi=1"},autocomplete:{params:{url:""},url:":socialhost:/:session_prefix:_/widget/render/autocomplete"},additnow:{url:"https://apis.google.com/marketplace/button?usegapi=1",methods:["launchurl"]},":signuphost:":"https://plus.google.com",ratingbadge:{url:"https://www.google.com/shopping/customerreviews/badge?usegapi=1"},appcirclepicker:{url:":socialhost:/:session_prefix:_/widget/render/appcirclepicker"},follow:{url:":socialhost:/:session_prefix:_/widget/render/follow?usegapi=1"},community:{url:":ctx_socialhost:/:session_prefix::im_prefix:_/widget/render/community?usegapi=1"},sharetoclassroom:{url:"https://classroom.google.com/sharewidget?usegapi=1"},ytshare:{params:{url:""},url:":socialhost:/:session_prefix:_/widget/render/ytshare?usegapi=1"},plus:{url:":socialhost:/:session_prefix:_/widget/render/badge?usegapi=1"},family_creation:{params:{url:""},url:"https://families.google.com/webcreation?usegapi=1&usegapi=1"},commentcount:{url:":socialhost:/:session_prefix:_/widget/render/commentcount?usegapi=1"},configurator:{url:":socialhost:/:session_prefix:_/plusbuttonconfigurator?usegapi=1"},zoomableimage:{url:"https://ssl.gstatic.com/microscope/embed/"},appfinder:{url:"https://workspace.google.com/:session_prefix:marketplace/appfinder?usegapi=1"},savetowallet:{url:"https://pay.google.com/gp/v/widget/save"},person:{url:":socialhost:/:session_prefix:_/widget/render/person?usegapi=1"},savetodrive:{url:"https://drive.google.com/savetodrivebutton?usegapi=1",methods:["save"]},page:{url:":socialhost:/:session_prefix:_/widget/render/page?usegapi=1"},card:{url:":socialhost:/:session_prefix:_/hovercard/card"}}},h:"m;/_/scs/apps-static/_/js/k=oz.gapi.pt_BR.l4Bv_WkVC6g.O/am=wQE/d=1/ct=zgms/rs=AGLTcCOuH5S2uqmF6E8zOW7n3yiqiwhzNQ/m=__features__",u:"https://apis.google.com/js/platform.js",hee:!0,fp:"821a251b140e4add32f87f4a7a08f044a59aa0e9",dpo:!1},platform:["additnow","backdrop","blogger","comments","commentcount","community","donation","family_creation","follow","hangout","health","page","partnersbadge","person","playemm","playreview","plus","plusone","post","ratingbadge","savetoandroidpay","savetodrive","savetowallet","sharetoclassroom","shortlists","signin2","surveyoptin","visibility","youtube","ytsubscribe","zoomableimage"],fp:"821a251b140e4add32f87f4a7a08f044a59aa0e9",annotation:["interactivepost","recobar","signin2","autocomplete","profile"],bimodal:["signin","share"]}})},839:(e,t,n)=>{"use strict";var r=n(97),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var l=u(t),g=u(n),m=0;m<a.length;++m){var y=a[m];if(!(i[y]||r&&r[y]||g&&g[y]||l&&l[y])){var v=d(n,y);try{s(t,y,v)}catch(e){}}}}return t}},173:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,g=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case l:case a:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case m:case g:case u:return e;default:return t}}case o:return t}}}function k(e){return S(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=m,t.Memo=g,t.Portal=o,t.Profiler=l,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||S(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return S(e)===s},t.isContextProvider=function(e){return S(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===d},t.isFragment=function(e){return S(e)===i},t.isLazy=function(e){return S(e)===m},t.isMemo=function(e){return S(e)===g},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===a},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===l||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===g||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===v||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=S},97:(e,t,n)=>{"use strict";e.exports=n(173)},577:(e,t,n)=>{"use strict";var r=n(378),o=n(102);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function g(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=m.hasOwnProperty(t)?m[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,v);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,v);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,v);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),k=Symbol.for("react.portal"),_=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),O=Symbol.for("react.provider"),C=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),j=Symbol.for("react.suspense"),A=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var I=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=I&&e[I]||e["@@iterator"])?e:null}var D,z=Object.assign;function M(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var F=!1;function U(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l]){var u="\n"+o[a].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=a&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function B(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case _:return"Fragment";case k:return"Portal";case E:return"Profiler";case x:return"StrictMode";case j:return"Suspense";case A:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:$(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function q(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function V(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return z({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return z({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function ie(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=z({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,_e=null,xe=null;function Ee(e){if(e=wo(e)){if("function"!=typeof ke)throw Error(i(280));var t=e.stateNode;t&&(t=ko(t),ke(e.stateNode,e.type,t))}}function Oe(e){_e?xe?xe.push(e):xe=[e]:_e=e}function Ce(){if(_e){var e=_e,t=xe;if(xe=_e=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Pe(e,t){return e(t)}function je(){}var Ae=!1;function Te(e,t,n){if(Ae)return e(t,n);Ae=!0;try{return Pe(e,t,n)}finally{Ae=!1,(null!==_e||null!==xe)&&(je(),Ce())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=ko(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Re=!1;if(c)try{var Ie={};Object.defineProperty(Ie,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Ie,Ie),window.removeEventListener("test",Ie,Ie)}catch(ce){Re=!1}function Le(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var De=!1,ze=null,Me=!1,Fe=null,Ue={onError:function(e){De=!0,ze=e}};function Be(e,t,n,r,o,i,a,l,u){De=!1,ze=null,Le.apply(Ue,arguments)}function $e(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if($e(e)!==e)throw Error(i(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return We(o),e;if(a===r)return We(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?Ve(e):null}function Ve(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ve(e);if(null!==t)return t;e=e.sibling}return null}var Ke=o.unstable_scheduleCallback,Ge=o.unstable_cancelCallback,Qe=o.unstable_shouldYield,Ye=o.unstable_requestPaint,Xe=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,it=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var l=a&~o;0!==l?r=ft(l):0!=(i&=a)&&(r=ft(i))}else 0!=(a=n&~o)?r=ft(a):0!==i&&(r=ft(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-at(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var St,kt,_t,xt,Et,Ot=!1,Ct=[],Pt=null,jt=null,At=null,Tt=new Map,Nt=new Map,Rt=[],It="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":jt=null;break;case"mouseover":case"mouseout":At=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function Dt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function zt(e){var t=bo(e.target);if(null!==t){var n=$e(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=qe(n)))return e.blockedOn=t,void Et(e.priority,(function(){_t(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){Mt(e)&&n.delete(t)}function Ut(){Ot=!1,null!==Pt&&Mt(Pt)&&(Pt=null),null!==jt&&Mt(jt)&&(jt=null),null!==At&&Mt(At)&&(At=null),Tt.forEach(Ft),Nt.forEach(Ft)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Ot||(Ot=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ut)))}function $t(e){function t(t){return Bt(t,e)}if(0<Ct.length){Bt(Ct[0],e);for(var n=1;n<Ct.length;n++){var r=Ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&Bt(Pt,e),null!==jt&&Bt(jt,e),null!==At&&Bt(At,e),Tt.forEach(t),Nt.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)zt(n),null===n.blockedOn&&Rt.shift()}var qt=w.ReactCurrentBatchConfig,Wt=!0;function Ht(e,t,n,r){var o=bt,i=qt.transition;qt.transition=null;try{bt=1,Kt(e,t,n,r)}finally{bt=o,qt.transition=i}}function Vt(e,t,n,r){var o=bt,i=qt.transition;qt.transition=null;try{bt=4,Kt(e,t,n,r)}finally{bt=o,qt.transition=i}}function Kt(e,t,n,r){if(Wt){var o=Qt(e,t,n,r);if(null===o)Wr(e,t,r,Gt,n),Lt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Pt=Dt(Pt,e,t,n,r,o),!0;case"dragenter":return jt=Dt(jt,e,t,n,r,o),!0;case"mouseover":return At=Dt(At,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Tt.set(i,Dt(Tt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Nt.set(i,Dt(Nt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<It.indexOf(e)){for(;null!==o;){var i=wo(o);if(null!==i&&St(i),null===(i=Qt(e,t,n,r))&&Wr(e,t,r,Gt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var Gt=null;function Qt(e,t,n,r){if(Gt=null,null!==(e=bo(e=Se(r))))if(null===(t=$e(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=qe(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return z(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(sn),fn=z({},sn,{view:0,detail:0}),dn=on(fn),pn=z({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),gn=on(z({},pn,{dataTransfer:0})),mn=on(z({},fn,{relatedTarget:0})),yn=on(z({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=z({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(vn),wn=on(z({},sn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_n={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=_n[e])&&!!t[e]}function En(){return xn}var On=z({},fn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cn=on(On),Pn=on(z({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),jn=on(z({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),An=on(z({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=z({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=on(Tn),Rn=[9,13,27,32],In=c&&"CompositionEvent"in window,Ln=null;c&&"documentMode"in document&&(Ln=document.documentMode);var Dn=c&&"TextEvent"in window&&!Ln,zn=c&&(!In||Ln&&8<Ln&&11>=Ln),Mn=String.fromCharCode(32),Fn=!1;function Un(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qn[e.type]:"textarea"===t}function Hn(e,t,n,r){Oe(r),0<(t=Vr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Vn=null,Kn=null;function Gn(e){Mr(e,0)}function Qn(e){if(K(So(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Jn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Vn&&(Vn.detachEvent("onpropertychange",nr),Kn=Vn=null)}function nr(e){if("value"===e.propertyName&&Qn(Kn)){var t=[];Hn(t,Kn,e,Se(e)),Te(Gn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,(Vn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Kn)}function ir(e,t){if("click"===e)return Qn(t)}function ar(e,t){if("input"===e||"change"===e)return Qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=cr(n,i);var a=cr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=c&&"documentMode"in document&&11>=document.documentMode,mr=null,yr=null,vr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==mr||mr!==G(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Vr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},_r={},xr={};function Er(e){if(_r[e])return _r[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in xr)return _r[e]=n[t];return e}c&&(xr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Or=Er("animationend"),Cr=Er("animationiteration"),Pr=Er("animationstart"),jr=Er("transitionend"),Ar=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nr(e,t){Ar.set(e,t),u(t,[e])}for(var Rr=0;Rr<Tr.length;Rr++){var Ir=Tr[Rr];Nr(Ir.toLowerCase(),"on"+(Ir[0].toUpperCase()+Ir.slice(1)))}Nr(Or,"onAnimationEnd"),Nr(Cr,"onAnimationIteration"),Nr(Pr,"onAnimationStart"),Nr("dblclick","onDoubleClick"),Nr("focusin","onFocus"),Nr("focusout","onBlur"),Nr(jr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function zr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,s){if(Be.apply(this,arguments),De){if(!De)throw Error(i(198));var c=ze;De=!1,ze=null,Me||(Me=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;zr(o,l,s),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,s=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;zr(o,l,s),i=u}}}if(Me)throw e=Fe,Me=!1,Fe=null,e}function Fr(e,t){var n=t[mo];void 0===n&&(n=t[mo]=new Set);var r=e+"__bubble";n.has(r)||(qr(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),qr(n,e,r,t)}var Br="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[Br]){e[Br]=!0,a.forEach((function(t){"selectionchange"!==t&&(Dr.has(t)||Ur(t,!1,e),Ur(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Br]||(t[Br]=!0,Ur("selectionchange",!1,t))}}function qr(e,t,n,r){switch(Yt(t)){case 1:var o=Ht;break;case 4:o=Vt;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=bo(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}Te((function(){var r=i,o=Se(n),a=[];e:{var l=Ar.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Cn;break;case"focusin":s="focus",u=mn;break;case"focusout":s="blur",u=mn;break;case"beforeblur":case"afterblur":u=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=jn;break;case Or:case Cr:case Pr:u=yn;break;case jr:u=An;break;case"scroll":u=dn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var g=(p=h).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==d&&null!=(g=Ne(h,d))&&c.push(Hr(h,g,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!bo(s)&&!s[go])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?bo(s):null)&&(s!==(f=$e(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,g="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,g="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:So(u),p=null==s?l:So(s),(l=new c(g,h+"leave",u,n,o)).target=f,l.relatedTarget=p,g=null,bo(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,g=c),f=g,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Kr(p))h++;for(p=0,g=d;g;g=Kr(g))p++;for(;0<h-p;)c=Kr(c),h--;for(;0<p-h;)d=Kr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Kr(c),d=Kr(d)}c=null}else c=null;null!==u&&Gr(a,l,u,c,!1),null!==s&&null!==f&&Gr(a,f,s,c,!0)}if("select"===(u=(l=r?So(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var m=Yn;else if(Wn(l))if(Xn)m=ar;else{m=or;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(m=ir);switch(m&&(m=m(e,r))?Hn(a,m,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?So(r):window,e){case"focusin":(Wn(y)||"true"===y.contentEditable)&&(mr=y,yr=r,vr=null);break;case"focusout":vr=yr=mr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(a,n,o);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":wr(a,n,o)}var v;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $n?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(zn&&"ko"!==n.locale&&($n||"onCompositionStart"!==b?"onCompositionEnd"===b&&$n&&(v=en()):(Jt="value"in(Xt=o)?Xt.value:Xt.textContent,$n=!0)),0<(y=Vr(r,b)).length&&(b=new wn(b,e,null,n,o),a.push({event:b,listeners:y}),(v||null!==(v=Bn(n)))&&(b.data=v))),(v=Dn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Fn=!0,Mn);case"textInput":return(e=t.data)===Mn&&Fn?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!In&&Un(e,t)?(e=en(),Zt=Jt=Xt=null,$n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Vr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=v)}Mr(a,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Vr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Ne(e,n))&&r.unshift(Hr(e,i,o)),null!=(i=Ne(e,t))&&r.push(Hr(e,i,o))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Ne(n,i))&&a.unshift(Hr(n,u,l)):o||null!=(u=Ne(n,i))&&a.push(Hr(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Qr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Yr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(i(425))}function Zr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void $t(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);$t(t)}function so(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,go="__reactContainer$"+fo,mo="__reactEvents$"+fo,yo="__reactListeners$"+fo,vo="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[go]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[go])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function So(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function ko(e){return e[ho]||null}var _o=[],xo=-1;function Eo(e){return{current:e}}function Oo(e){0>xo||(e.current=_o[xo],_o[xo]=null,xo--)}function Co(e,t){xo++,_o[xo]=e.current,e.current=t}var Po={},jo=Eo(Po),Ao=Eo(!1),To=Po;function No(e,t){var n=e.type.contextTypes;if(!n)return Po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Ro(e){return null!=e.childContextTypes}function Io(){Oo(Ao),Oo(jo)}function Lo(e,t,n){if(jo.current!==Po)throw Error(i(168));Co(jo,t),Co(Ao,n)}function Do(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(i(108,q(e)||"Unknown",o));return z({},n,r)}function zo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Po,To=jo.current,Co(jo,e),Co(Ao,Ao.current),!0}function Mo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Do(e,t,To),r.__reactInternalMemoizedMergedChildContext=e,Oo(Ao),Oo(jo),Co(jo,e)):Oo(Ao),Co(Ao,n)}var Fo=null,Uo=!1,Bo=!1;function $o(e){null===Fo?Fo=[e]:Fo.push(e)}function qo(){if(!Bo&&null!==Fo){Bo=!0;var e=0,t=bt;try{var n=Fo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fo=null,Uo=!1}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),Ke(Ze,qo),t}finally{bt=t,Bo=!1}}return null}var Wo=[],Ho=0,Vo=null,Ko=0,Go=[],Qo=0,Yo=null,Xo=1,Jo="";function Zo(e,t){Wo[Ho++]=Ko,Wo[Ho++]=Vo,Vo=e,Ko=t}function ei(e,t,n){Go[Qo++]=Xo,Go[Qo++]=Jo,Go[Qo++]=Yo,Yo=e;var r=Xo;e=Jo;var o=32-at(r)-1;r&=~(1<<o),n+=1;var i=32-at(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xo=1<<32-at(t)+o|n<<o|r,Jo=i+e}else Xo=1<<i|n<<o|r,Jo=e}function ti(e){null!==e.return&&(Zo(e,1),ei(e,1,0))}function ni(e){for(;e===Vo;)Vo=Wo[--Ho],Wo[Ho]=null,Ko=Wo[--Ho],Wo[Ho]=null;for(;e===Yo;)Yo=Go[--Qo],Go[Qo]=null,Jo=Go[--Qo],Go[Qo]=null,Xo=Go[--Qo],Go[Qo]=null}var ri=null,oi=null,ii=!1,ai=null;function li(e,t){var n=Ns(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ui(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ri=e,oi=so(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ri=e,oi=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Yo?{id:Xo,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ns(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ri=e,oi=null,!0);default:return!1}}function si(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ci(e){if(ii){var t=oi;if(t){var n=t;if(!ui(e,t)){if(si(e))throw Error(i(418));t=so(n.nextSibling);var r=ri;t&&ui(e,t)?li(r,n):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(si(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function fi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function di(e){if(e!==ri)return!1;if(!ii)return fi(e),ii=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oi)){if(si(e))throw pi(),Error(i(418));for(;t;)li(e,t),t=so(t.nextSibling)}if(fi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oi=so(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oi=null}}else oi=ri?so(e.stateNode.nextSibling):null;return!0}function pi(){for(var e=oi;e;)e=so(e.nextSibling)}function hi(){oi=ri=null,ii=!1}function gi(e){null===ai?ai=[e]:ai.push(e)}var mi=w.ReactCurrentBatchConfig;function yi(e,t){if(e&&e.defaultProps){for(var n in t=z({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var vi=Eo(null),bi=null,wi=null,Si=null;function ki(){Si=wi=bi=null}function _i(e){var t=vi.current;Oo(vi),e._currentValue=t}function xi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ei(e,t){bi=e,Si=wi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function Oi(e){var t=e._currentValue;if(Si!==e)if(e={context:e,memoizedValue:t,next:null},null===wi){if(null===bi)throw Error(i(308));wi=e,bi.dependencies={lanes:0,firstContext:e}}else wi=wi.next=e;return t}var Ci=null;function Pi(e){null===Ci?Ci=[e]:Ci.push(e)}function ji(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Pi(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ai(e,r)}function Ai(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ti=!1;function Ni(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ri(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ii(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Li(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&ju)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ai(e,n)}return null===(o=r.interleaved)?(t.next=t,Pi(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ai(e,n)}function Di(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function zi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Mi(e,t,n,r){var o=e.updateQueue;Ti=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,s=u.next;u.next=null,null===a?i=s:a.next=s,a=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==i){var f=o.baseState;for(a=0,c=s=u=null,l=i;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,g=l;switch(d=t,p=n,g.tag){case 1:if("function"==typeof(h=g.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=g.payload)?h.call(p,f,d):h))break e;f=z({},f,d);break e;case 2:Ti=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,a|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(u=f),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);zu|=a,e.lanes=a,e.memoizedState=f}}function Fi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Ui=(new r.Component).refs;function Bi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:z({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var $i={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ts(),o=ns(e),i=Ii(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Li(e,i,o))&&(rs(t,e,o,r),Di(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ts(),o=ns(e),i=Ii(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Li(e,i,o))&&(rs(t,e,o,r),Di(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ts(),r=ns(e),o=Ii(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Li(e,o,r))&&(rs(t,e,r,n),Di(t,e,r))}};function qi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,i))}function Wi(e,t,n){var r=!1,o=Po,i=t.contextType;return"object"==typeof i&&null!==i?i=Oi(i):(o=Ro(t)?To:jo.current,i=(r=null!=(r=t.contextTypes))?No(e,o):Po),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=$i,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Hi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&$i.enqueueReplaceState(t,t.state,null)}function Vi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ui,Ni(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=Oi(i):(i=Ro(t)?To:jo.current,o.context=No(e,i)),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(Bi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&$i.enqueueReplaceState(o,o.state,null),Mi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;t===Ui&&(t=o.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Gi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Qi(e){return(0,e._init)(e._payload)}function Yi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Is(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Ms(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var i=n.type;return i===_?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===N&&Qi(i)===t.type)?((r=o(t,n.props)).ref=Ki(e,t,n),r.return=e,r):((r=Ls(n.type,n.key,n.props,null,e.mode,r)).ref=Ki(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Ds(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ms(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Ls(t.type,t.key,t.props,null,e.mode,n)).ref=Ki(e,null,t),n.return=e,n;case k:return(t=Fs(t,e.mode,n)).return=e,t;case N:return d(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=Ds(t,e.mode,n,null)).return=e,t;Gi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?s(e,t,n,r):null;case k:return n.key===o?c(e,t,n,r):null;case N:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||L(n))return null!==o?null:f(e,t,n,r,null);Gi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case N:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||L(r))return f(t,e=e.get(n)||null,r,o,null);Gi(t,r)}return null}function g(o,i,l,u){for(var s=null,c=null,f=i,g=i=0,m=null;null!==f&&g<l.length;g++){f.index>g?(m=f,f=null):m=f.sibling;var y=p(o,f,l[g],u);if(null===y){null===f&&(f=m);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,g),null===c?s=y:c.sibling=y,c=y,f=m}if(g===l.length)return n(o,f),ii&&Zo(o,g),s;if(null===f){for(;g<l.length;g++)null!==(f=d(o,l[g],u))&&(i=a(f,i,g),null===c?s=f:c.sibling=f,c=f);return ii&&Zo(o,g),s}for(f=r(o,f);g<l.length;g++)null!==(m=h(f,o,g,l[g],u))&&(e&&null!==m.alternate&&f.delete(null===m.key?g:m.key),i=a(m,i,g),null===c?s=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(o,e)})),ii&&Zo(o,g),s}function m(o,l,u,s){var c=L(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,g=l,m=l=0,y=null,v=u.next();null!==g&&!v.done;m++,v=u.next()){g.index>m?(y=g,g=null):y=g.sibling;var b=p(o,g,v.value,s);if(null===b){null===g&&(g=y);break}e&&g&&null===b.alternate&&t(o,g),l=a(b,l,m),null===f?c=b:f.sibling=b,f=b,g=y}if(v.done)return n(o,g),ii&&Zo(o,m),c;if(null===g){for(;!v.done;m++,v=u.next())null!==(v=d(o,v.value,s))&&(l=a(v,l,m),null===f?c=v:f.sibling=v,f=v);return ii&&Zo(o,m),c}for(g=r(o,g);!v.done;m++,v=u.next())null!==(v=h(g,o,m,v.value,s))&&(e&&null!==v.alternate&&g.delete(null===v.key?m:v.key),l=a(v,l,m),null===f?c=v:f.sibling=v,f=v);return e&&g.forEach((function(e){return t(o,e)})),ii&&Zo(o,m),c}return function e(r,i,a,u){if("object"==typeof a&&null!==a&&a.type===_&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case S:e:{for(var s=a.key,c=i;null!==c;){if(c.key===s){if((s=a.type)===_){if(7===c.tag){n(r,c.sibling),(i=o(c,a.props.children)).return=r,r=i;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===N&&Qi(s)===c.type){n(r,c.sibling),(i=o(c,a.props)).ref=Ki(r,c,a),i.return=r,r=i;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===_?((i=Ds(a.props.children,r.mode,u,a.key)).return=r,r=i):((u=Ls(a.type,a.key,a.props,null,r.mode,u)).ref=Ki(r,i,a),u.return=r,r=u)}return l(r);case k:e:{for(c=a.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=Fs(a,r.mode,u)).return=r,r=i}return l(r);case N:return e(r,i,(c=a._init)(a._payload),u)}if(te(a))return g(r,i,a,u);if(L(a))return m(r,i,a,u);Gi(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(r,i.sibling),(i=o(i,a)).return=r,r=i):(n(r,i),(i=Ms(a,r.mode,u)).return=r,r=i),l(r)):n(r,i)}}var Xi=Yi(!0),Ji=Yi(!1),Zi={},ea=Eo(Zi),ta=Eo(Zi),na=Eo(Zi);function ra(e){if(e===Zi)throw Error(i(174));return e}function oa(e,t){switch(Co(na,t),Co(ta,e),Co(ea,Zi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Oo(ea),Co(ea,t)}function ia(){Oo(ea),Oo(ta),Oo(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=ue(t,e.type);t!==n&&(Co(ta,e),Co(ea,n))}function la(e){ta.current===e&&(Oo(ea),Oo(ta))}var ua=Eo(0);function sa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ca=[];function fa(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var da=w.ReactCurrentDispatcher,pa=w.ReactCurrentBatchConfig,ha=0,ga=null,ma=null,ya=null,va=!1,ba=!1,wa=0,Sa=0;function ka(){throw Error(i(321))}function _a(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function xa(e,t,n,r,o,a){if(ha=a,ga=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,da.current=null===e||null===e.memoizedState?ll:ul,e=n(r,o),ba){a=0;do{if(ba=!1,wa=0,25<=a)throw Error(i(301));a+=1,ya=ma=null,t.updateQueue=null,da.current=sl,e=n(r,o)}while(ba)}if(da.current=al,t=null!==ma&&null!==ma.next,ha=0,ya=ma=ga=null,va=!1,t)throw Error(i(300));return e}function Ea(){var e=0!==wa;return wa=0,e}function Oa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ya?ga.memoizedState=ya=e:ya=ya.next=e,ya}function Ca(){if(null===ma){var e=ga.alternate;e=null!==e?e.memoizedState:null}else e=ma.next;var t=null===ya?ga.memoizedState:ya.next;if(null!==t)ya=t,ma=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ma=e).memoizedState,baseState:ma.baseState,baseQueue:ma.baseQueue,queue:ma.queue,next:null},null===ya?ga.memoizedState=ya=e:ya=ya.next=e}return ya}function Pa(e,t){return"function"==typeof t?t(e):t}function ja(e){var t=Ca(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ma,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var u=l=null,s=null,c=a;do{var f=c.lane;if((ha&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,l=r):s=s.next=d,ga.lanes|=f,zu|=f}c=c.next}while(null!==c&&c!==a);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,ga.lanes|=a,zu|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Aa(e){var t=Ca(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);lr(a,t.memoizedState)||(wl=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Ta(){}function Na(e,t){var n=ga,r=Ca(),o=t(),a=!lr(r.memoizedState,o);if(a&&(r.memoizedState=o,wl=!0),r=r.queue,Wa(La.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ya&&1&ya.memoizedState.tag){if(n.flags|=2048,Fa(9,Ia.bind(null,n,r,o,t),void 0,null),null===Au)throw Error(i(349));0!=(30&ha)||Ra(n,t,o)}return o}function Ra(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ga.updateQueue)?(t={lastEffect:null,stores:null},ga.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ia(e,t,n,r){t.value=n,t.getSnapshot=r,Da(t)&&za(e)}function La(e,t,n){return n((function(){Da(t)&&za(e)}))}function Da(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function za(e){var t=Ai(e,1);null!==t&&rs(t,e,1,-1)}function Ma(e){var t=Oa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Pa,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,ga,e),[t.memoizedState,e]}function Fa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ga.updateQueue)?(t={lastEffect:null,stores:null},ga.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ua(){return Ca().memoizedState}function Ba(e,t,n,r){var o=Oa();ga.flags|=e,o.memoizedState=Fa(1|t,n,void 0,void 0===r?null:r)}function $a(e,t,n,r){var o=Ca();r=void 0===r?null:r;var i=void 0;if(null!==ma){var a=ma.memoizedState;if(i=a.destroy,null!==r&&_a(r,a.deps))return void(o.memoizedState=Fa(t,n,i,r))}ga.flags|=e,o.memoizedState=Fa(1|t,n,i,r)}function qa(e,t){return Ba(8390656,8,e,t)}function Wa(e,t){return $a(2048,8,e,t)}function Ha(e,t){return $a(4,2,e,t)}function Va(e,t){return $a(4,4,e,t)}function Ka(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ga(e,t,n){return n=null!=n?n.concat([e]):null,$a(4,4,Ka.bind(null,t,e),n)}function Qa(){}function Ya(e,t){var n=Ca();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&_a(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xa(e,t){var n=Ca();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&_a(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ja(e,t,n){return 0==(21&ha)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(lr(n,t)||(n=gt(),ga.lanes|=n,zu|=n,e.baseState=!0),t)}function Za(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pa.transition;pa.transition={};try{e(!1),t()}finally{bt=n,pa.transition=r}}function el(){return Ca().memoizedState}function tl(e,t,n){var r=ns(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=ji(e,t,n,r))&&(rs(n,e,r,ts()),il(n,t,r))}function nl(e,t,n){var r=ns(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,a)){var u=t.interleaved;return null===u?(o.next=o,Pi(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=ji(e,t,o,r))&&(rs(n,e,r,o=ts()),il(n,t,r))}}function rl(e){var t=e.alternate;return e===ga||null!==t&&t===ga}function ol(e,t){ba=va=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function il(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var al={readContext:Oi,useCallback:ka,useContext:ka,useEffect:ka,useImperativeHandle:ka,useInsertionEffect:ka,useLayoutEffect:ka,useMemo:ka,useReducer:ka,useRef:ka,useState:ka,useDebugValue:ka,useDeferredValue:ka,useTransition:ka,useMutableSource:ka,useSyncExternalStore:ka,useId:ka,unstable_isNewReconciler:!1},ll={readContext:Oi,useCallback:function(e,t){return Oa().memoizedState=[e,void 0===t?null:t],e},useContext:Oi,useEffect:qa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ba(4194308,4,Ka.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ba(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ba(4,2,e,t)},useMemo:function(e,t){var n=Oa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Oa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,ga,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Oa().memoizedState=e},useState:Ma,useDebugValue:Qa,useDeferredValue:function(e){return Oa().memoizedState=e},useTransition:function(){var e=Ma(!1),t=e[0];return e=Za.bind(null,e[1]),Oa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ga,o=Oa();if(ii){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===Au)throw Error(i(349));0!=(30&ha)||Ra(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,qa(La.bind(null,r,a,e),[e]),r.flags|=2048,Fa(9,Ia.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=Oa(),t=Au.identifierPrefix;if(ii){var n=Jo;t=":"+t+"R"+(n=(Xo&~(1<<32-at(Xo)-1)).toString(32)+n),0<(n=wa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Sa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:Oi,useCallback:Ya,useContext:Oi,useEffect:Wa,useImperativeHandle:Ga,useInsertionEffect:Ha,useLayoutEffect:Va,useMemo:Xa,useReducer:ja,useRef:Ua,useState:function(){return ja(Pa)},useDebugValue:Qa,useDeferredValue:function(e){return Ja(Ca(),ma.memoizedState,e)},useTransition:function(){return[ja(Pa)[0],Ca().memoizedState]},useMutableSource:Ta,useSyncExternalStore:Na,useId:el,unstable_isNewReconciler:!1},sl={readContext:Oi,useCallback:Ya,useContext:Oi,useEffect:Wa,useImperativeHandle:Ga,useInsertionEffect:Ha,useLayoutEffect:Va,useMemo:Xa,useReducer:Aa,useRef:Ua,useState:function(){return Aa(Pa)},useDebugValue:Qa,useDeferredValue:function(e){var t=Ca();return null===ma?t.memoizedState=e:Ja(t,ma.memoizedState,e)},useTransition:function(){return[Aa(Pa)[0],Ca().memoizedState]},useMutableSource:Ta,useSyncExternalStore:Na,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Ii(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hu||(Hu=!0,Vu=r),dl(0,t)},n}function gl(e,t,n){(n=Ii(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){dl(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Ku?Ku=new Set([this]):Ku.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ml(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Os.bind(null,e,t,n),t.then(e,e))}function yl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ii(-1,1)).tag=2,Li(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=w.ReactCurrentOwner,wl=!1;function Sl(e,t,n,r){t.child=null===e?Ji(t,null,n,r):Xi(t,e.child,n,r)}function kl(e,t,n,r,o){n=n.render;var i=t.ref;return Ei(t,o),r=xa(e,t,n,r,i,o),n=Ea(),null===e||wl?(ii&&n&&ti(t),t.flags|=1,Sl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function _l(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Rs(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ls(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,xl(e,t,i,r,o))}if(i=e.child,0==(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(a,r)&&e.ref===t.ref)return Hl(e,t,o)}return t.flags|=1,(e=Is(i,r)).ref=t.ref,e.return=t,t.child=e}function xl(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(ur(i,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=i,0==(e.lanes&o))return t.lanes=e.lanes,Hl(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return Cl(e,t,n,r,o)}function El(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Co(Iu,Ru),Ru|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Co(Iu,Ru),Ru|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,Co(Iu,Ru),Ru|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,Co(Iu,Ru),Ru|=r;return Sl(e,t,o,n),t.child}function Ol(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Cl(e,t,n,r,o){var i=Ro(n)?To:jo.current;return i=No(t,i),Ei(t,o),n=xa(e,t,n,r,i,o),r=Ea(),null===e||wl?(ii&&r&&ti(t),t.flags|=1,Sl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Pl(e,t,n,r,o){if(Ro(n)){var i=!0;zo(t)}else i=!1;if(Ei(t,o),null===t.stateNode)Wl(e,t),Wi(t,n,r),Vi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;s="object"==typeof s&&null!==s?Oi(s):No(t,s=Ro(n)?To:jo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&Hi(t,a,r,s),Ti=!1;var d=t.memoizedState;a.state=d,Mi(t,r,a,o),u=t.memoizedState,l!==r||d!==u||Ao.current||Ti?("function"==typeof c&&(Bi(t,n,c,r),u=t.memoizedState),(l=Ti||qi(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Ri(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:yi(t.type,l),a.props=s,f=t.pendingProps,d=a.context,u="object"==typeof(u=n.contextType)&&null!==u?Oi(u):No(t,u=Ro(n)?To:jo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==f||d!==u)&&Hi(t,a,r,u),Ti=!1,d=t.memoizedState,a.state=d,Mi(t,r,a,o);var h=t.memoizedState;l!==f||d!==h||Ao.current||Ti?("function"==typeof p&&(Bi(t,n,p,r),h=t.memoizedState),(s=Ti||qi(t,n,s,r,d,h,u)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=u,r=s):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return jl(e,t,n,r,i,o)}function jl(e,t,n,r,o,i){Ol(e,t);var a=0!=(128&t.flags);if(!r&&!a)return o&&Mo(t,n,!1),Hl(e,t,i);r=t.stateNode,bl.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Xi(t,e.child,null,i),t.child=Xi(t,null,l,i)):Sl(e,t,l,i),t.memoizedState=r.state,o&&Mo(t,n,!0),t.child}function Al(e){var t=e.stateNode;t.pendingContext?Lo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Lo(0,t.context,!1),oa(e,t.containerInfo)}function Tl(e,t,n,r,o){return hi(),gi(o),t.flags|=256,Sl(e,t,n,r),t.child}var Nl,Rl,Il,Ll,Dl={dehydrated:null,treeContext:null,retryLane:0};function zl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ml(e,t,n){var r,o=t.pendingProps,a=ua.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Co(ua,1&a),null===e)return ci(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=zs(u,o,0,null),e=Ds(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=zl(n),t.memoizedState=Dl,e):Fl(t,u));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,o,a,l){if(n)return 256&t.flags?(t.flags&=-257,Ul(e,t,l,r=fl(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,o=t.mode,r=zs({mode:"visible",children:r.children},o,0,null),(a=Ds(a,o,l,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Xi(t,e.child,null,l),t.child.memoizedState=zl(l),t.memoizedState=Dl,a);if(0==(1&t.mode))return Ul(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Ul(e,t,l,r=fl(a=Error(i(419)),r,void 0))}if(u=0!=(l&e.childLanes),wl||u){if(null!==(r=Au)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Ai(e,o),rs(r,e,o,-1))}return ms(),Ul(e,t,l,r=fl(Error(i(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Ps.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,oi=so(o.nextSibling),ri=t,ii=!0,ai=null,null!==e&&(Go[Qo++]=Xo,Go[Qo++]=Jo,Go[Qo++]=Yo,Xo=e.id,Jo=e.overflow,Yo=t),(t=Fl(t,r.children)).flags|=4096,t)}(e,t,u,o,r,a,n);if(l){l=o.fallback,u=t.mode,r=(a=e.child).sibling;var s={mode:"hidden",children:o.children};return 0==(1&u)&&t.child!==a?((o=t.child).childLanes=0,o.pendingProps=s,t.deletions=null):(o=Is(a,s)).subtreeFlags=14680064&a.subtreeFlags,null!==r?l=Is(r,l):(l=Ds(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?zl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Dl,o}return e=(l=e.child).sibling,o=Is(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Fl(e,t){return(t=zs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ul(e,t,n,r){return null!==r&&gi(r),Xi(t,e.child,null,n),(e=Fl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Bl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),xi(e.return,t,n)}function $l(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function ql(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Sl(e,t,r.children,n),0!=(2&(r=ua.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bl(e,n,t);else if(19===e.tag)Bl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Co(ua,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===sa(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),$l(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===sa(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}$l(t,!0,n,null,i);break;case"together":$l(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Wl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Is(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Is(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vl(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Kl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gl(e,t,n){var r=t.pendingProps;switch(ni(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Kl(t),null;case 1:case 17:return Ro(t.type)&&Io(),Kl(t),null;case 3:return r=t.stateNode,ia(),Oo(Ao),Oo(jo),fa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(di(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ai&&(ls(ai),ai=null))),Rl(e,t),Kl(t),null;case 5:la(t);var o=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Il(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Kl(t),null}if(e=ra(ea.current),di(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[po]=t,r[ho]=a,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(o=0;o<Lr.length;o++)Fr(Lr[o],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":Y(r,a),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Fr("invalid",r);break;case"textarea":oe(r,a),Fr("invalid",r)}for(var u in ve(n,a),o=null,a)if(a.hasOwnProperty(u)){var s=a[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":V(r),Z(r,a,!0);break;case"textarea":V(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Zr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,Nl(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),o=r;break;case"iframe":case"object":case"embed":Fr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Lr.length;o++)Fr(Lr[o],e);o=r;break;case"source":Fr("error",e),o=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),o=r;break;case"details":Fr("toggle",e),o=r;break;case"input":Y(e,r),o=Q(e,r),Fr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=z({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Fr("invalid",e)}for(a in ve(n,o),s=o)if(s.hasOwnProperty(a)){var c=s[a];"style"===a?me(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(l.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Fr("scroll",e):null!=c&&b(e,a,c,u))}switch(n){case"input":V(e),Z(e,r,!1);break;case"textarea":V(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Kl(t),null;case 6:if(e&&null!=t.stateNode)Ll(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=ra(na.current),ra(ea.current),di(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(a=r.nodeValue!==n)&&null!==(e=ri))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Kl(t),null;case 13:if(Oo(ua),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&0!=(1&t.mode)&&0==(128&t.flags))pi(),hi(),t.flags|=98560,a=!1;else if(a=di(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[po]=t}else hi(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Kl(t),a=!1}else null!==ai&&(ls(ai),ai=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ua.current)?0===Lu&&(Lu=3):ms())),null!==t.updateQueue&&(t.flags|=4),Kl(t),null);case 4:return ia(),Rl(e,t),null===e&&$r(t.stateNode.containerInfo),Kl(t),null;case 10:return _i(t.type._context),Kl(t),null;case 19:if(Oo(ua),null===(a=t.memoizedState))return Kl(t),null;if(r=0!=(128&t.flags),null===(u=a.rendering))if(r)Vl(a,!1);else{if(0!==Lu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=sa(e))){for(t.flags|=128,Vl(a,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(u=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=u.childLanes,a.lanes=u.lanes,a.child=u.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=u.memoizedProps,a.memoizedState=u.memoizedState,a.updateQueue=u.updateQueue,a.type=u.type,e=u.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Co(ua,1&ua.current|2),t.child}e=e.sibling}null!==a.tail&&Xe()>qu&&(t.flags|=128,r=!0,Vl(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=sa(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vl(a,!0),null===a.tail&&"hidden"===a.tailMode&&!u.alternate&&!ii)return Kl(t),null}else 2*Xe()-a.renderingStartTime>qu&&1073741824!==n&&(t.flags|=128,r=!0,Vl(a,!1),t.lanes=4194304);a.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=a.last)?n.sibling=u:t.child=u,a.last=u)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Xe(),t.sibling=null,n=ua.current,Co(ua,r?1&n|2:1&n),t):(Kl(t),null);case 22:case 23:return ds(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ru)&&(Kl(t),6&t.subtreeFlags&&(t.flags|=8192)):Kl(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Ql(e,t){switch(ni(t),t.tag){case 1:return Ro(t.type)&&Io(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ia(),Oo(Ao),Oo(jo),fa(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return la(t),null;case 13:if(Oo(ua),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));hi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Oo(ua),null;case 4:return ia(),null;case 10:return _i(t.type._context),null;case 22:case 23:return ds(),null;default:return null}}Nl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Rl=function(){},Il=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ra(ea.current);var i,a=null;switch(n){case"input":o=Q(e,o),r=Q(e,r),a=[];break;case"select":o=z({},o,{value:void 0}),r=z({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ve(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var u=o[c];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(i in u)!u.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&u[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(a||(a=[]),a.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(a=a||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),a||u===s||(a=[])):(a=a||[]).push(c,s))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Ll=function(e,t,n,r){n!==r&&(t.flags|=4)};var Yl=!1,Xl=!1,Jl="function"==typeof WeakSet?WeakSet:Set,Zl=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Es(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){Es(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&tu(t,n,i)}o=o.next}while(o!==r)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function iu(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[mo],delete t[yo],delete t[vo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var fu=null,du=!1;function pu(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Xl||eu(n,t);case 6:var r=fu,o=du;fu=null,pu(e,t,n),du=o,null!==(fu=r)&&(du?(e=fu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fu.removeChild(n.stateNode));break;case 18:null!==fu&&(du?(e=fu,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),$t(e)):uo(fu,n.stateNode));break;case 4:r=fu,o=du,fu=n.stateNode.containerInfo,du=!0,pu(e,t,n),fu=r,du=o;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(0!=(2&i)||0!=(4&i))&&tu(n,t,a),o=o.next}while(o!==r)}pu(e,t,n);break;case 1:if(!Xl&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Es(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,pu(e,t,n),Xl=r):pu(e,t,n);break;default:pu(e,t,n)}}function gu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Jl),t.forEach((function(t){var r=js.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var a=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,du=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===fu)throw Error(i(160));hu(a,l,o),fu=null,du=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){Es(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yu(t,e),t=t.sibling}function yu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mu(t,e),vu(e),4&r){try{ru(3,e,e.return),ou(3,e)}catch(t){Es(e,e.return,t)}try{ru(5,e,e.return)}catch(t){Es(e,e.return,t)}}break;case 1:mu(t,e),vu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(mu(t,e),vu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){Es(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,l=null!==n?n.memoizedProps:a,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===a.type&&null!=a.name&&X(o,a),be(u,l);var c=be(u,a);for(l=0;l<s.length;l+=2){var f=s[l],d=s[l+1];"style"===f?me(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,c)}switch(u){case"input":J(o,a);break;case"textarea":ie(o,a);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(o,!!a.multiple,h,!1):p!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(t){Es(e,e.return,t)}}break;case 6:if(mu(t,e),vu(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){Es(e,e.return,t)}}break;case 3:if(mu(t,e),vu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{$t(t.containerInfo)}catch(t){Es(e,e.return,t)}break;case 4:default:mu(t,e),vu(e);break;case 13:mu(t,e),vu(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||($u=Xe())),4&r&&gu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(c=Xl)||f,mu(t,e),Xl=c):mu(t,e),vu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Zl=e,f=e.child;null!==f;){for(d=Zl=f;null!==Zl;){switch(h=(p=Zl).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var g=p.stateNode;if("function"==typeof g.componentWillUnmount){r=p,n=p.return;try{t=r,g.props=t.memoizedProps,g.state=t.memoizedState,g.componentWillUnmount()}catch(e){Es(r,n,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){ku(d);continue}}null!==h?(h.return=p,Zl=h):ku(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(u=d.stateNode,l=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=ge("display",l))}catch(t){Es(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){Es(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:mu(t,e),vu(e),4&r&&gu(e);case 21:}}function vu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lu(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),cu(e,uu(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;su(e,uu(e),a);break;default:throw Error(i(161))}}catch(t){Es(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Zl=e,wu(e,t,n)}function wu(e,t,n){for(var r=0!=(1&e.mode);null!==Zl;){var o=Zl,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Yl;if(!a){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Xl;l=Yl;var s=Xl;if(Yl=a,(Xl=u)&&!s)for(Zl=o;null!==Zl;)u=(a=Zl).child,22===a.tag&&null!==a.memoizedState?_u(o):null!==u?(u.return=a,Zl=u):_u(o);for(;null!==i;)Zl=i,wu(i,t,n),i=i.sibling;Zl=o,Yl=l,Xl=s}Su(e)}else 0!=(8772&o.subtreeFlags)&&null!==i?(i.return=o,Zl=i):Su(e)}}function Su(e){for(;null!==Zl;){var t=Zl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xl||ou(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:yi(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Fi(t,a,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fi(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&$t(d)}}}break;default:throw Error(i(163))}Xl||512&t.flags&&iu(t)}catch(e){Es(t,t.return,e)}}if(t===e){Zl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zl=n;break}Zl=t.return}}function ku(e){for(;null!==Zl;){var t=Zl;if(t===e){Zl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zl=n;break}Zl=t.return}}function _u(e){for(;null!==Zl;){var t=Zl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ou(4,t)}catch(e){Es(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Es(t,o,e)}}var i=t.return;try{iu(t)}catch(e){Es(t,i,e)}break;case 5:var a=t.return;try{iu(t)}catch(e){Es(t,a,e)}}}catch(e){Es(t,t.return,e)}if(t===e){Zl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Zl=l;break}Zl=t.return}}var xu,Eu=Math.ceil,Ou=w.ReactCurrentDispatcher,Cu=w.ReactCurrentOwner,Pu=w.ReactCurrentBatchConfig,ju=0,Au=null,Tu=null,Nu=0,Ru=0,Iu=Eo(0),Lu=0,Du=null,zu=0,Mu=0,Fu=0,Uu=null,Bu=null,$u=0,qu=1/0,Wu=null,Hu=!1,Vu=null,Ku=null,Gu=!1,Qu=null,Yu=0,Xu=0,Ju=null,Zu=-1,es=0;function ts(){return 0!=(6&ju)?Xe():-1!==Zu?Zu:Zu=Xe()}function ns(e){return 0==(1&e.mode)?1:0!=(2&ju)&&0!==Nu?Nu&-Nu:null!==mi.transition?(0===es&&(es=gt()),es):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type)}function rs(e,t,n,r){if(50<Xu)throw Xu=0,Ju=null,Error(i(185));yt(e,n,r),0!=(2&ju)&&e===Au||(e===Au&&(0==(2&ju)&&(Mu|=n),4===Lu&&us(e,Nu)),os(e,r),1===n&&0===ju&&0==(1&t.mode)&&(qu=Xe()+500,Uo&&qo()))}function os(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-at(i),l=1<<a,u=o[a];-1===u?0!=(l&n)&&0==(l&r)||(o[a]=pt(l,t)):u<=t&&(e.expiredLanes|=l),i&=~l}}(e,t);var r=dt(e,e===Au?Nu:0);if(0===r)null!==n&&Ge(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ge(n),1===t)0===e.tag?function(e){Uo=!0,$o(e)}(ss.bind(null,e)):$o(ss.bind(null,e)),ao((function(){0==(6&ju)&&qo()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=As(n,is.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function is(e,t){if(Zu=-1,es=0,0!=(6&ju))throw Error(i(327));var n=e.callbackNode;if(_s()&&e.callbackNode!==n)return null;var r=dt(e,e===Au?Nu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=ys(e,r);else{t=r;var o=ju;ju|=2;var a=gs();for(Au===e&&Nu===t||(Wu=null,qu=Xe()+500,ps(e,t));;)try{bs();break}catch(t){hs(e,t)}ki(),Ou.current=a,ju=o,null!==Tu?t=0:(Au=null,Nu=0,t=Lu)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=as(e,o)),1===t)throw n=Du,ps(e,0),us(e,r),os(e,Xe()),n;if(6===t)us(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!lr(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=ys(e,r))&&0!==(a=ht(e))&&(r=a,t=as(e,a)),1===t))throw n=Du,ps(e,0),us(e,r),os(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:ks(e,Bu,Wu);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=$u+500-Xe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){ts(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(ks.bind(null,e,Bu,Wu),t);break}ks(e,Bu,Wu);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-at(r);a=1<<l,(l=t[l])>o&&(o=l),r&=~a}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Eu(r/1960))-r)){e.timeoutHandle=ro(ks.bind(null,e,Bu,Wu),r);break}ks(e,Bu,Wu);break;default:throw Error(i(329))}}}return os(e,Xe()),e.callbackNode===n?is.bind(null,e):null}function as(e,t){var n=Uu;return e.current.memoizedState.isDehydrated&&(ps(e,t).flags|=256),2!==(e=ys(e,t))&&(t=Bu,Bu=n,null!==t&&ls(t)),e}function ls(e){null===Bu?Bu=e:Bu.push.apply(Bu,e)}function us(e,t){for(t&=~Fu,t&=~Mu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function ss(e){if(0!=(6&ju))throw Error(i(327));_s();var t=dt(e,0);if(0==(1&t))return os(e,Xe()),null;var n=ys(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=as(e,r))}if(1===n)throw n=Du,ps(e,0),us(e,t),os(e,Xe()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ks(e,Bu,Wu),os(e,Xe()),null}function cs(e,t){var n=ju;ju|=1;try{return e(t)}finally{0===(ju=n)&&(qu=Xe()+500,Uo&&qo())}}function fs(e){null!==Qu&&0===Qu.tag&&0==(6&ju)&&_s();var t=ju;ju|=1;var n=Pu.transition,r=bt;try{if(Pu.transition=null,bt=1,e)return e()}finally{bt=r,Pu.transition=n,0==(6&(ju=t))&&qo()}}function ds(){Ru=Iu.current,Oo(Iu)}function ps(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Tu)for(n=Tu.return;null!==n;){var r=n;switch(ni(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Io();break;case 3:ia(),Oo(Ao),Oo(jo),fa();break;case 5:la(r);break;case 4:ia();break;case 13:case 19:Oo(ua);break;case 10:_i(r.type._context);break;case 22:case 23:ds()}n=n.return}if(Au=e,Tu=e=Is(e.current,null),Nu=Ru=t,Lu=0,Du=null,Fu=Mu=zu=0,Bu=Uu=null,null!==Ci){for(t=0;t<Ci.length;t++)if(null!==(r=(n=Ci[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}Ci=null}return e}function hs(e,t){for(;;){var n=Tu;try{if(ki(),da.current=al,va){for(var r=ga.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}va=!1}if(ha=0,ya=ma=ga=null,ba=!1,wa=0,Cu.current=null,null===n||null===n.return){Lu=1,Du=t,Tu=null;break}e:{var a=e,l=n.return,u=n,s=t;if(t=Nu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yl(l);if(null!==h){h.flags&=-257,vl(h,l,u,0,t),1&h.mode&&ml(a,c,t),s=c;var g=(t=h).updateQueue;if(null===g){var m=new Set;m.add(s),t.updateQueue=m}else g.add(s);break e}if(0==(1&t)){ml(a,c,t),ms();break e}s=Error(i(426))}else if(ii&&1&u.mode){var y=yl(l);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),vl(y,l,u,0,t),gi(cl(s,u));break e}}a=s=cl(s,u),4!==Lu&&(Lu=2),null===Uu?Uu=[a]:Uu.push(a),a=l;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,zi(a,hl(0,s,t));break e;case 1:u=s;var v=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Ku||!Ku.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,zi(a,gl(a,u,t));break e}}a=a.return}while(null!==a)}Ss(n)}catch(e){t=e,Tu===n&&null!==n&&(Tu=n=n.return);continue}break}}function gs(){var e=Ou.current;return Ou.current=al,null===e?al:e}function ms(){0!==Lu&&3!==Lu&&2!==Lu||(Lu=4),null===Au||0==(268435455&zu)&&0==(268435455&Mu)||us(Au,Nu)}function ys(e,t){var n=ju;ju|=2;var r=gs();for(Au===e&&Nu===t||(Wu=null,ps(e,t));;)try{vs();break}catch(t){hs(e,t)}if(ki(),ju=n,Ou.current=r,null!==Tu)throw Error(i(261));return Au=null,Nu=0,Lu}function vs(){for(;null!==Tu;)ws(Tu)}function bs(){for(;null!==Tu&&!Qe();)ws(Tu)}function ws(e){var t=xu(e.alternate,e,Ru);e.memoizedProps=e.pendingProps,null===t?Ss(e):Tu=t,Cu.current=null}function Ss(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Gl(n,t,Ru)))return void(Tu=n)}else{if(null!==(n=Ql(n,t)))return n.flags&=32767,void(Tu=n);if(null===e)return Lu=6,void(Tu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Tu=t);Tu=t=e}while(null!==t);0===Lu&&(Lu=5)}function ks(e,t,n){var r=bt,o=Pu.transition;try{Pu.transition=null,bt=1,function(e,t,n,r){do{_s()}while(null!==Qu);if(0!=(6&ju))throw Error(i(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,a),e===Au&&(Tu=Au=null,Nu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Gu||(Gu=!0,As(tt,(function(){return _s(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=Pu.transition,Pu.transition=null;var l=bt;bt=1;var u=ju;ju|=4,Cu.current=null,function(e,t){if(eo=Wt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(u=l+o),d!==a||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===o&&(u=l),p===a&&++f===r&&(s=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Wt=!1,Zl=t;null!==Zl;)if(e=(t=Zl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zl=e;else for(;null!==Zl;){t=Zl;try{var g=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var m=g.memoizedProps,y=g.memoizedState,v=t.stateNode,b=v.getSnapshotBeforeUpdate(t.elementType===t.type?m:yi(t.type,m),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(i(163))}}catch(e){Es(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zl=e;break}Zl=t.return}g=nu,nu=!1}(e,n),yu(n,e),hr(to),Wt=!!eo,to=eo=null,e.current=n,bu(n,e,o),Ye(),ju=u,bt=l,Pu.transition=a}else e.current=n;if(Gu&&(Gu=!1,Qu=e,Yu=o),0===(a=e.pendingLanes)&&(Ku=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),os(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Hu)throw Hu=!1,e=Vu,Vu=null,e;0!=(1&Yu)&&0!==e.tag&&_s(),0!=(1&(a=e.pendingLanes))?e===Ju?Xu++:(Xu=0,Ju=e):Xu=0,qo()}(e,t,n,r)}finally{Pu.transition=o,bt=r}return null}function _s(){if(null!==Qu){var e=wt(Yu),t=Pu.transition,n=bt;try{if(Pu.transition=null,bt=16>e?16:e,null===Qu)var r=!1;else{if(e=Qu,Qu=null,Yu=0,0!=(6&ju))throw Error(i(331));var o=ju;for(ju|=4,Zl=e.current;null!==Zl;){var a=Zl,l=a.child;if(0!=(16&Zl.flags)){var u=a.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Zl=c;null!==Zl;){var f=Zl;switch(f.tag){case 0:case 11:case 15:ru(8,f,a)}var d=f.child;if(null!==d)d.return=f,Zl=d;else for(;null!==Zl;){var p=(f=Zl).sibling,h=f.return;if(au(f),f===c){Zl=null;break}if(null!==p){p.return=h,Zl=p;break}Zl=h}}}var g=a.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var y=m.sibling;m.sibling=null,m=y}while(null!==m)}}Zl=a}}if(0!=(2064&a.subtreeFlags)&&null!==l)l.return=a,Zl=l;else e:for(;null!==Zl;){if(0!=(2048&(a=Zl).flags))switch(a.tag){case 0:case 11:case 15:ru(9,a,a.return)}var v=a.sibling;if(null!==v){v.return=a.return,Zl=v;break e}Zl=a.return}}var b=e.current;for(Zl=b;null!==Zl;){var w=(l=Zl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Zl=w;else e:for(l=b;null!==Zl;){if(0!=(2048&(u=Zl).flags))try{switch(u.tag){case 0:case 11:case 15:ou(9,u)}}catch(e){Es(u,u.return,e)}if(u===l){Zl=null;break e}var S=u.sibling;if(null!==S){S.return=u.return,Zl=S;break e}Zl=u.return}}if(ju=o,qo(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Pu.transition=t}}return!1}function xs(e,t,n){e=Li(e,t=hl(0,t=cl(n,t),1),1),t=ts(),null!==e&&(yt(e,1,t),os(e,t))}function Es(e,t,n){if(3===e.tag)xs(e,e,n);else for(;null!==t;){if(3===t.tag){xs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ku||!Ku.has(r))){t=Li(t,e=gl(t,e=cl(n,e),1),1),e=ts(),null!==t&&(yt(t,1,e),os(t,e));break}}t=t.return}}function Os(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ts(),e.pingedLanes|=e.suspendedLanes&n,Au===e&&(Nu&n)===n&&(4===Lu||3===Lu&&(130023424&Nu)===Nu&&500>Xe()-$u?ps(e,0):Fu|=n),os(e,t)}function Cs(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=ts();null!==(e=Ai(e,t))&&(yt(e,t,n),os(e,n))}function Ps(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cs(e,n)}function js(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),Cs(e,n)}function As(e,t){return Ke(e,t)}function Ts(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ns(e,t,n,r){return new Ts(e,t,n,r)}function Rs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Is(e,t){var n=e.alternate;return null===n?((n=Ns(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ls(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Rs(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case _:return Ds(n.children,o,a,t);case x:l=8,o|=8;break;case E:return(e=Ns(12,n,t,2|o)).elementType=E,e.lanes=a,e;case j:return(e=Ns(13,n,t,o)).elementType=j,e.lanes=a,e;case A:return(e=Ns(19,n,t,o)).elementType=A,e.lanes=a,e;case R:return zs(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:l=10;break e;case C:l=9;break e;case P:l=11;break e;case T:l=14;break e;case N:l=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ns(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Ds(e,t,n,r){return(e=Ns(7,e,r,t)).lanes=n,e}function zs(e,t,n,r){return(e=Ns(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function Ms(e,t,n){return(e=Ns(6,e,null,t)).lanes=n,e}function Fs(e,t,n){return(t=Ns(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Us(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Bs(e,t,n,r,o,i,a,l,u){return e=new Us(e,t,n,l,u),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Ns(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ni(i),e}function $s(e){if(!e)return Po;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ro(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(Ro(n))return Do(e,n,t)}return t}function qs(e,t,n,r,o,i,a,l,u){return(e=Bs(n,r,!0,e,0,i,0,l,u)).context=$s(null),n=e.current,(i=Ii(r=ts(),o=ns(n))).callback=null!=t?t:null,Li(n,i,o),e.current.lanes=o,yt(e,o,r),os(e,r),e}function Ws(e,t,n,r){var o=t.current,i=ts(),a=ns(o);return n=$s(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ii(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Li(o,t,a))&&(rs(e,o,a,i),Di(e,o,a)),a}function Hs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Vs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ks(e,t){Vs(e,t),(e=e.alternate)&&Vs(e,t)}xu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ao.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:Al(t),hi();break;case 5:aa(t);break;case 1:Ro(t.type)&&zo(t);break;case 4:oa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Co(vi,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Co(ua,1&ua.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ml(e,t,n):(Co(ua,1&ua.current),null!==(e=Hl(e,t,n))?e.sibling:null);Co(ua,1&ua.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return ql(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Co(ua,ua.current),r)break;return null;case 22:case 23:return t.lanes=0,El(e,t,n)}return Hl(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,ii&&0!=(1048576&t.flags)&&ei(t,Ko,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Wl(e,t),e=t.pendingProps;var o=No(t,jo.current);Ei(t,n),o=xa(null,t,r,e,o,n);var a=Ea();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ro(r)?(a=!0,zo(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ni(t),o.updater=$i,t.stateNode=o,o._reactInternals=t,Vi(t,r,e,n),t=jl(null,t,r,!0,a,n)):(t.tag=0,ii&&a&&ti(t),Sl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Wl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Rs(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===T)return 14}return 2}(r),e=yi(r,e),o){case 0:t=Cl(null,t,r,e,n);break e;case 1:t=Pl(null,t,r,e,n);break e;case 11:t=kl(null,t,r,e,n);break e;case 14:t=_l(null,t,r,yi(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Cl(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 1:return r=t.type,o=t.pendingProps,Pl(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 3:e:{if(Al(t),null===e)throw Error(i(387));r=t.pendingProps,o=(a=t.memoizedState).element,Ri(e,t),Mi(t,r,null,n);var l=t.memoizedState;if(r=l.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Tl(e,t,r,n,o=cl(Error(i(423)),t));break e}if(r!==o){t=Tl(e,t,r,n,o=cl(Error(i(424)),t));break e}for(oi=so(t.stateNode.containerInfo.firstChild),ri=t,ii=!0,ai=null,n=Ji(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(hi(),r===o){t=Hl(e,t,n);break e}Sl(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&ci(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==a&&no(r,a)&&(t.flags|=32),Ol(e,t),Sl(e,t,l,n),t.child;case 6:return null===e&&ci(t),null;case 13:return Ml(e,t,n);case 4:return oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xi(t,null,r,n):Sl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,kl(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 7:return Sl(e,t,t.pendingProps,n),t.child;case 8:case 12:return Sl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,l=o.value,Co(vi,r._currentValue),r._currentValue=l,null!==a)if(lr(a.value,l)){if(a.children===o.children&&!Ao.current){t=Hl(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var u=a.dependencies;if(null!==u){l=a.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===a.tag){(s=Ii(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),xi(a.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===a.tag)l=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(l=a.return))throw Error(i(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),xi(l,n,t),l=a.sibling}else l=a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===t){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}Sl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ei(t,n),r=r(o=Oi(o)),t.flags|=1,Sl(e,t,r,n),t.child;case 14:return o=yi(r=t.type,t.pendingProps),_l(e,t,r,o=yi(r.type,o),n);case 15:return xl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:yi(r,o),Wl(e,t),t.tag=1,Ro(r)?(e=!0,zo(t)):e=!1,Ei(t,n),Wi(t,r,o),Vi(t,r,o,n),jl(null,t,r,!0,e,n);case 19:return ql(e,t,n);case 22:return El(e,t,n)}throw Error(i(156,t.tag))};var Gs="function"==typeof reportError?reportError:function(e){console.error(e)};function Qs(e){this._internalRoot=e}function Ys(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zs(){}function ec(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var l=o;o=function(){var e=Hs(a);l.call(e)}}Ws(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=Hs(a);i.call(e)}}var a=qs(t,r,e,0,null,!1,0,"",Zs);return e._reactRootContainer=a,e[go]=a.current,$r(8===e.nodeType?e.parentNode:e),fs(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Hs(u);l.call(e)}}var u=Bs(e,0,!1,null,0,!1,0,"",Zs);return e._reactRootContainer=u,e[go]=u.current,$r(8===e.nodeType?e.parentNode:e),fs((function(){Ws(t,u,n,r)})),u}(n,t,e,o,r);return Hs(a)}Ys.prototype.render=Qs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Ws(e,t,null,null)},Ys.prototype.unmount=Qs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fs((function(){Ws(null,e,null,null)})),t[go]=null}},Ys.prototype.unstable_scheduleHydration=function(e){if(e){var t=xt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&zt(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(vt(t,1|n),os(t,Xe()),0==(6&ju)&&(qu=Xe()+500,qo()))}break;case 13:fs((function(){var t=Ai(e,1);if(null!==t){var n=ts();rs(t,e,1,n)}})),Ks(e,1)}},kt=function(e){if(13===e.tag){var t=Ai(e,134217728);null!==t&&rs(t,e,134217728,ts()),Ks(e,134217728)}},_t=function(e){if(13===e.tag){var t=ns(e),n=Ai(e,t);null!==n&&rs(n,e,t,ts()),Ks(e,t)}},xt=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},ke=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=ko(r);if(!o)throw Error(i(90));K(r),J(r,o)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=cs,je=fs;var tc={usingClientEntryPoint:!1,Events:[wo,So,ko,Oe,Ce,cs]},nc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(rc),it=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(i(299));var n=!1,r="",o=Gs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Bs(e,1,!1,null,0,n,0,r,o),e[go]=t.current,$r(8===e.nodeType?e.parentNode:e),new Qs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return fs(e)},t.hydrate=function(e,t,n){if(!Js(t))throw Error(i(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",l=Gs;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=qs(t,null,e,1,null!=n?n:null,o,0,a,l),e[go]=t.current,$r(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Ys(t)},t.render=function(e,t,n){if(!Js(t))throw Error(i(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Js(e))throw Error(i(40));return!!e._reactRootContainer&&(fs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[go]=null}))})),!0)},t.unstable_batchedUpdates=cs,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Js(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},634:(e,t,n)=>{"use strict";var r=n(542);t.s=r.createRoot,r.hydrateRoot},542:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(577)},702:(e,t)=>{"use strict";var n,r=Symbol.for("react.element"),o=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),g=Symbol.for("react.lazy"),m=Symbol.for("react.offscreen");n=Symbol.for("react.module.reference"),t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===l||e===a||e===d||e===p||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===u||e.$$typeof===s||e.$$typeof===f||e.$$typeof===n||void 0!==e.getModuleId)},t.typeOf=function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case i:case l:case a:case d:case p:return e;default:switch(e=e&&e.$$typeof){case c:case s:case f:case g:case h:case u:return e;default:return t}}case o:return t}}}},185:(e,t,n)=>{"use strict";e.exports=n(702)},426:(e,t,n)=>{"use strict";var r=n(378),o=Symbol.for("react.element"),i=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,i={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!u.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:s,ref:c,props:i,_owner:l.current}}t.Fragment=i,t.jsx=s,t.jsxs=s},535:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,g(w,y.prototype),w.isPureReactComponent=!0;var S=Array.isArray,k=Object.prototype.hasOwnProperty,_={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var o,i={},a=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,o)&&!x.hasOwnProperty(o)&&(i[o]=t[o]);var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===i[o]&&(i[o]=u[o]);return{$$typeof:n,type:e,key:a,ref:l,props:i,_owner:_.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function j(e,t,o,i,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return a=a(u=e),e=""===i?"."+P(u,0):i,S(a)?(o="",null!=e&&(o=e.replace(C,"$&/")+"/"),j(a,t,o,"",(function(e){return e}))):null!=a&&(O(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(u=0,i=""===i?".":i+":",S(e))for(var s=0;s<e.length;s++){var c=i+P(l=e[s],s);u+=j(l,t,o,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=j(l=l.value,t,o,c=i+P(l,s++),a);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function A(e,t,n){if(null==e)return e;var r=[],o=0;return j(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},R={transition:null},I={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:R,ReactCurrentOwner:_};t.Children={map:A,forEach:function(e,t,n){A(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return A(e,(function(){t++})),t},toArray:function(e){return A(e,(function(e){return e}))||[]},only:function(e){if(!O(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=a,t.PureComponent=b,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=g({},e.props),i=e.key,a=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,l=_.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)k.call(t,s)&&!x.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}return{$$typeof:n,type:e.type,key:i,ref:a,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.2.0"},378:(e,t,n)=>{"use strict";e.exports=n(535)},246:(e,t,n)=>{"use strict";e.exports=n(426)},612:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PLACEHOLDER_UNDEFINED=t.PACKAGE_NAME=void 0,t.PACKAGE_NAME="redux-deep-persist",t.PLACEHOLDER_UNDEFINED="@@placeholder/undefined"},758:function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.getPersistConfig=t.getTransforms=t.createBlacklist=t.createWhitelist=t.autoMergeDeep=void 0;const o=n(937),i=n(612),a=n(67),l=function(e,t,n={}){const r=n.whitelist||null,o=n.blacklist||null;function i(e){return!(!r||-1!==r.indexOf(e))||!(!o||-1===o.indexOf(e))}return{in:(t,n,r)=>!i(n)&&e?e(t,n,r):t,out:(e,n,r)=>!i(n)&&t?t(e,n,r):e,deepPersistKey:r&&r[0]}};t.autoMergeDeep=(e,t,n,{debug:r,whitelist:a,blacklist:l,transforms:u})=>{if(a||l)throw new Error("State reconciler autoMergeDeep uses custom transforms instead of old whitelist or blacklist config properties. Please use createWhitelist or createBlacklist transforms.");(0,o.transformsValidator)(u);const s=(0,o.cloneDeep)(n);let c=e;if(c&&(0,o.isObjectLike)(c)){const a=(0,o.difference)(t,n);(0,o.isEmpty)(a)||(c=(0,o.mergeDeep)(e,a,{preserveUndefined:!0}),r&&console.log(`${i.PACKAGE_NAME}/autoMergeDeep: sub state of your state was modified by reducer during rehydration. Values from reducer will be kept: ${JSON.stringify(a)}`)),Object.keys(c).forEach((e=>{"_persist"!==e&&((0,o.isObjectLike)(s[e])?s[e]=(0,o.mergeDeep)(s[e],c[e]):s[e]=c[e])}))}return r&&c&&(0,o.isObjectLike)(c)&&console.log(`${i.PACKAGE_NAME}/autoMergeDeep: rehydrated keys ${JSON.stringify(c)}`),s},t.createWhitelist=(e,t)=>((0,o.singleTransformValidator)(t,e,a.ConfigType.WHITELIST),l((e=>{if(!t||!t.length)return e;let n,r=null;return t.forEach((t=>{const a=t.split(".");n=(0,o.path)(e,a),void 0===n&&(0,o.isIntegerString)(a[a.length-1])&&(n=i.PLACEHOLDER_UNDEFINED);const l=(0,o.assocPath)(a,n),u=(0,o.isArray)(l)?[]:{};r=(0,o.mergeDeep)(r||u,l,{preservePlaceholder:!0})})),r||e}),(e=>(0,o.preserveUndefined)(e,t,a.ConfigType.WHITELIST)),{whitelist:[e]})),t.createBlacklist=(e,t)=>((0,o.singleTransformValidator)(t,e,a.ConfigType.BLACKLIST),l((e=>{if(!t||!t.length)return;const n=(0,o.preserveUndefined)(e,t,a.ConfigType.BLACKLIST,!0);return t.map((e=>e.split("."))).reduce(((e,t)=>(0,o.dissocPath)(e,t)),n)}),(e=>(0,o.preserveUndefined)(e,t,a.ConfigType.BLACKLIST)),{whitelist:[e]})),t.getTransforms=function(e,n){return n.map((n=>{const r=Object.keys(n)[0],o=n[r];return e===a.ConfigType.WHITELIST?(0,t.createWhitelist)(r,o):(0,t.createBlacklist)(r,o)}))},t.getPersistConfig=e=>{var{key:n,whitelist:i,blacklist:l,storage:u,transforms:s,rootReducer:c}=e,f=r(e,["key","whitelist","blacklist","storage","transforms","rootReducer"]);(0,o.configValidator)({whitelist:i,blacklist:l});const d=(0,o.getRootKeysGroup)(i),p=(0,o.getRootKeysGroup)(l),h=Object.keys(c(void 0,{type:""})),g=d.map((e=>Object.keys(e)[0])),m=p.map((e=>Object.keys(e)[0])),y=h.filter((e=>-1===g.indexOf(e)&&-1===m.indexOf(e))),v=(0,t.getTransforms)(a.ConfigType.WHITELIST,d),b=(0,t.getTransforms)(a.ConfigType.BLACKLIST,p),w=(0,o.isArray)(i)?y.map((e=>(0,t.createBlacklist)(e))):[];return Object.assign(Object.assign({},f),{key:n,storage:u,transforms:[...v,...b,...w,...s||[]],stateReconciler:t.autoMergeDeep})}},67:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigType=void 0,(n=t.ConfigType||(t.ConfigType={}))[n.WHITELIST=0]="WHITELIST",n[n.BLACKLIST=1]="BLACKLIST"},937:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getRootKeysGroup=t.throwError=t.configValidator=t.transformsValidator=t.singleTransformValidator=t.findDuplicatesAndSubsets=t.unique=t.preserveUndefined=t.mergeDeep=t.dissocPath=t.assocPath=t.path=t.difference=t.cloneDeep=t._cloneDeep=t.getCircularPath=t.isEmpty=t.isDate=t.isString=t.isIntegerString=t.isPlainObject=t.isArray=t.isLength=t.isObjectLike=void 0;const r=n(612),o=n(67);t.isObjectLike=function(e){return"object"==typeof e&&null!==e},t.isLength=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=Number.MAX_SAFE_INTEGER},t.isArray=Array.isArray||function(e){return(0,t.isLength)(e&&e.length)&&"[object Array]"===Object.prototype.toString.call(e)},t.isPlainObject=function(e){return!!e&&"object"==typeof e&&!(0,t.isArray)(e)},t.isIntegerString=function(e){return String(~~e)===e&&Number(e)>=0},t.isString=function(e){return"[object String]"===Object.prototype.toString.call(e)},t.isDate=function(e){return"[object Date]"===Object.prototype.toString.call(e)},t.isEmpty=function(e){return 0===Object.keys(e).length};const i=Object.prototype.hasOwnProperty;t.getCircularPath=function(e,n,r){r||(r=new Set([e])),n||(n="");for(const o in e){const i=n?`${n}.${o}`:o,a=e[o];if((0,t.isObjectLike)(a))return r.has(a)?`${n}.${o}:<Circular>`:(r.add(a),(0,t.getCircularPath)(a,i,r))}return null},t._cloneDeep=function(e){if(!(0,t.isObjectLike)(e))return e;if((0,t.isDate)(e))return new Date(+e);const n=(0,t.isArray)(e)?[]:{};for(const r in e){const o=e[r];n[r]=(0,t._cloneDeep)(o)}return n},t.cloneDeep=function(e){const n=(0,t.getCircularPath)(e);if(n)throw new Error(`${r.PACKAGE_NAME}: circular dependency detected under the path '${n}' of object you're trying to persist: ${e}`);return(0,t._cloneDeep)(e)},t.difference=function(e,n){if(e===n)return{};if(!(0,t.isObjectLike)(e)||!(0,t.isObjectLike)(n))return n;const r=(0,t.cloneDeep)(e),o=(0,t.cloneDeep)(n),a=Object.keys(r).reduce(((e,t)=>(i.call(o,t)||(e[t]=void 0),e)),{});if((0,t.isDate)(r)||(0,t.isDate)(o))return r.valueOf()===o.valueOf()?{}:o;const l=Object.keys(o).reduce(((e,n)=>{if(!i.call(r,n))return e[n]=o[n],e;const a=(0,t.difference)(r[n],o[n]);return(0,t.isObjectLike)(a)&&(0,t.isEmpty)(a)&&!(0,t.isDate)(a)?(0,t.isArray)(r)&&!(0,t.isArray)(o)||!(0,t.isArray)(r)&&(0,t.isArray)(o)?o:e:(e[n]=a,e)}),a);return delete l._persist,l},t.path=function(e,n){return n.reduce(((e,n)=>{if(e){const r=parseInt(n,10),o=(0,t.isIntegerString)(n)&&r<0?e.length+r:n;return(0,t.isString)(e)?e.charAt(o):e[o]}}),e)},t.assocPath=function(e,n){return[...e].reverse().reduce(((e,r,o)=>{const i=(0,t.isIntegerString)(r)?[]:{};return i[r]=0===o?n:e,i}),{})},t.dissocPath=function(e,n){const r=(0,t.cloneDeep)(e);return n.reduce(((e,r,o)=>(o===n.length-1&&e&&(0,t.isObjectLike)(e)&&delete e[r],e&&e[r])),r),r};const a=function(e,n,...o){if(!o||!o.length)return n;const i=o.shift(),{preservePlaceholder:l,preserveUndefined:u}=e;if((0,t.isObjectLike)(n)&&(0,t.isObjectLike)(i))for(const o in i)if((0,t.isObjectLike)(i[o])&&(0,t.isObjectLike)(n[o]))n[o]||(n[o]={}),a(e,n[o],i[o]);else if((0,t.isArray)(n)){let e=i[o];const t=l?r.PLACEHOLDER_UNDEFINED:void 0;u||(e=void 0!==e?e:n[parseInt(o,10)]),e=e!==r.PLACEHOLDER_UNDEFINED?e:t,n[parseInt(o,10)]=e}else{const e=i[o]!==r.PLACEHOLDER_UNDEFINED?i[o]:void 0;n[o]=e}return a(e,n,...o)};t.mergeDeep=function(e,n,r){return a({preservePlaceholder:null==r?void 0:r.preservePlaceholder,preserveUndefined:null==r?void 0:r.preserveUndefined},(0,t.cloneDeep)(e),(0,t.cloneDeep)(n))};const l=function(e,n=[],i,a,u){if(!(0,t.isObjectLike)(e))return e;for(const s in e){const c=e[s],f=(0,t.isArray)(e),d=a?a+"."+s:s;null===c&&(i===o.ConfigType.WHITELIST&&-1===n.indexOf(d)||i===o.ConfigType.BLACKLIST&&-1!==n.indexOf(d))&&f&&(e[parseInt(s,10)]=void 0),void 0===c&&u&&i===o.ConfigType.BLACKLIST&&-1===n.indexOf(d)&&f&&(e[parseInt(s,10)]=r.PLACEHOLDER_UNDEFINED),l(c,n,i,d,u)}};t.preserveUndefined=function(e,n,r,o){const i=(0,t.cloneDeep)(e);return l(i,n,r,"",o),i},t.unique=function(e,t,n){return n.indexOf(e)===t},t.findDuplicatesAndSubsets=function(e){return e.reduce(((n,r)=>{const o=e.filter((e=>e===r)),i=e.filter((e=>0===(r+".").indexOf(e+"."))),{duplicates:a,subsets:l}=n,u=o.length>1&&-1===a.indexOf(r),s=i.length>1;return{duplicates:[...a,...u?o:[]],subsets:[...l,...s?i:[]].filter(t.unique).sort()}}),{duplicates:[],subsets:[]})},t.singleTransformValidator=function(e,n,i){const a=i===o.ConfigType.WHITELIST?"whitelist":"blacklist",l=`${r.PACKAGE_NAME}: incorrect ${a} configuration.`,u=`Check your create${i===o.ConfigType.WHITELIST?"White":"Black"}list arguments.\n\n`;if(!(0,t.isString)(n)||n.length<1)throw new Error(`${l} Name (key) of reducer is required. ${u}`);if(!e||!e.length)return;const{duplicates:s,subsets:c}=(0,t.findDuplicatesAndSubsets)(e);if(s.length>1)throw new Error(`${l} Duplicated paths.\n\n ${JSON.stringify(s)}\n\n ${u}`);if(c.length>1)throw new Error(`${l} You are trying to persist an entire property and also some of its subset.\n\n${JSON.stringify(c)}\n\n ${u}`)},t.transformsValidator=function(e){if(!(0,t.isArray)(e))return;const n=(null==e?void 0:e.map((e=>e.deepPersistKey)).filter((e=>e)))||[];if(n.length){const e=n.filter(((e,t)=>n.indexOf(e)!==t));if(e.length)throw new Error(`${r.PACKAGE_NAME}: found duplicated keys in transforms creators. You can createWhitelist or createBlacklist for a specific root reducer key only once. Duplicated keys among createWhitelist and createBlacklist transforms are not allowed.\n\n Duplicates: ${JSON.stringify(e)}`)}},t.configValidator=function({whitelist:e,blacklist:n}){if(e&&e.length&&n&&n.length)throw new Error(`${r.PACKAGE_NAME}: you should not define a whitelist and blacklist in parallel. It is allowed to use only one of these lists per config.`);if(e){const{duplicates:n,subsets:r}=(0,t.findDuplicatesAndSubsets)(e);(0,t.throwError)({duplicates:n,subsets:r},"whitelist")}if(n){const{duplicates:e,subsets:r}=(0,t.findDuplicatesAndSubsets)(n);(0,t.throwError)({duplicates:e,subsets:r},"blacklist")}},t.throwError=function({duplicates:e,subsets:t},n){if(e.length)throw new Error(`${r.PACKAGE_NAME}: duplicates of paths found in your ${n}.\n\n ${JSON.stringify(e)}`);if(t.length)throw new Error(`${r.PACKAGE_NAME}: subsets of some parent keys found in your ${n}. You must decide if you want to persist an entire path or its specific subset.\n\n ${JSON.stringify(t)}`)},t.getRootKeysGroup=function(e){return(0,t.isArray)(e)?e.filter(t.unique).reduce(((e,t)=>{const n=t.split("."),r=n[0],o=n.slice(1).join(".")||void 0,i=e.filter((e=>Object.keys(e)[0]===r))[0],a=i?Object.values(i)[0]:void 0;return i||e.push({[r]:o?[o]:void 0}),i&&!a&&o&&(i[r]=[o]),i&&a&&o&&a.push(o),e}),[]):[]}},316:(e,t,n)=>{"use strict";t.__esModule=!0,t.default=function(e){var t=(0,o.default)(e);return{getItem:function(e){return new Promise((function(n,r){n(t.getItem(e))}))},setItem:function(e,n){return new Promise((function(r,o){r(t.setItem(e,n))}))},removeItem:function(e){return new Promise((function(n,r){n(t.removeItem(e))}))}}};var r,o=(r=n(39))&&r.__esModule?r:{default:r}},39:(e,t)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function r(){}t.__esModule=!0,t.default=function(e){var t="".concat(e,"Storage");return function(e){if("object"!==("undefined"==typeof self?"undefined":n(self))||!(e in self))return!1;try{var t=self[e],r="redux-persist ".concat(e," test");t.setItem(r,"test"),t.getItem(r),t.removeItem(r)}catch(e){return!1}return!0}(t)?self[t]:o};var o={getItem:r,setItem:r,removeItem:r}},494:(e,t,n)=>{"use strict";var r;t.Z=void 0;var o=(0,((r=n(316))&&r.__esModule?r:{default:r}).default)("local");t.Z=o},323:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>i(u,n))s<o&&0>i(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<o&&0>i(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,g=!1,m=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function S(e){if(m=!1,w(e),!g)if(null!==r(s))g=!0,R(k);else{var t=r(c);null!==t&&I(S,t.startTime-e)}}function k(e,n){g=!1,m&&(m=!1,v(O),O=-1),h=!0;var i=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!j());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var l=a(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(s)&&o(s),w(n)}else o(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&I(S,f.startTime-n),u=!1}return u}finally{d=null,p=i,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var _,x=!1,E=null,O=-1,C=5,P=-1;function j(){return!(t.unstable_now()-P<C)}function A(){if(null!==E){var e=t.unstable_now();P=e;var n=!0;try{n=E(!0,e)}finally{n?_():(x=!1,E=null)}}else x=!1}if("function"==typeof b)_=function(){b(A)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,N=T.port2;T.port1.onmessage=A,_=function(){N.postMessage(null)}}else _=function(){y(A,0)};function R(e){E=e,x||(x=!0,_())}function I(e,n){O=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||h||(g=!0,R(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>a?(e.sortIndex=i,n(c,e),null===r(s)&&e===r(c)&&(m?(v(O),O=-1):m=!0,I(S,i-a))):(e.sortIndex=l,n(s,e),g||h||(g=!0,R(k))),e},t.unstable_shouldYield=j,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},102:(e,t,n)=>{"use strict";e.exports=n(323)},445:e=>{e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var i=Object.keys(e),a=Object.keys(t);if(i.length!==a.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),u=0;u<i.length;u++){var s=i[u];if(!l(s))return!1;var c=e[s],f=t[s];if(!1===(o=n?n.call(r,c,f,s):void 0)||void 0===o&&c!==f)return!1}return!0}},47:(e,t,n)=>{"use strict";var r=n(378),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=r.useState,a=r.useEffect,l=r.useLayoutEffect,u=r.useDebugValue;function s(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var c="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=i({inst:{value:n,getSnapshot:t}}),o=r[0].inst,c=r[1];return l((function(){o.value=n,o.getSnapshot=t,s(o)&&c({inst:o})}),[e,n,t]),a((function(){return s(o)&&c({inst:o}),e((function(){s(o)&&c({inst:o})}))}),[e]),u(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:c},693:(e,t,n)=>{"use strict";var r=n(378),o=n(644),i="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=o.useSyncExternalStore,l=r.useRef,u=r.useEffect,s=r.useMemo,c=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var f=l(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=s((function(){function e(e){if(!u){if(u=!0,a=e,e=r(e),void 0!==o&&d.hasValue){var t=d.value;if(o(t,e))return l=t}return l=e}if(t=l,i(a,e))return t;var n=r(e);return void 0!==o&&o(t,n)?t:(a=e,l=n)}var a,l,u=!1,s=void 0===n?null:n;return[function(){return e(t())},null===s?void 0:function(){return e(s())}]}),[t,n,r,o]);var p=a(e,f[0],f[1]);return u((function(){d.hasValue=!0,d.value=p}),[p]),c(p),p}},644:(e,t,n)=>{"use strict";e.exports=n(47)},626:(e,t,n)=>{"use strict";e.exports=n(693)}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;__webpack_require__.g.importScripts&&(e=__webpack_require__.g.location+"");var t=__webpack_require__.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=e})(),__webpack_require__.nc=void 0;var __webpack_exports__={};(()=>{"use strict";var e=__webpack_require__(246),t=__webpack_require__(634),n=__webpack_require__(644),r=__webpack_require__(626),o=__webpack_require__(542);let i=function(e){e()};const a=()=>i;var l=__webpack_require__(378);const u=(0,l.createContext)(null);function s(){return(0,l.useContext)(u)}let c=()=>{throw new Error("uSES not initialized!")};const f=(e,t)=>e===t;function d(e=u){const t=e===u?s:()=>(0,l.useContext)(e);return function(e,n=f){const{store:r,subscription:o,getServerState:i}=t(),a=c(o.addNestedSub,r.getState,i||r.getState,e,n);return(0,l.useDebugValue)(a),a}}const p=d();var h=__webpack_require__(839),g=__webpack_require__.n(h),m=__webpack_require__(185);const y={notify(){},get:()=>[]};const v="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?l.useLayoutEffect:l.useEffect;let b=null;function w(e=u){const t=e===u?s:()=>(0,l.useContext)(e);return function(){const{store:e}=t();return e}}const S=w();function k(e=u){const t=e===u?S:w(e);return function(){return t().dispatch}}const _=k();var x;function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(e){return C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},C(e)}function P(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function j(e,t){return j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},j(e,t)}function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}(e=>{c=e})(r.useSyncExternalStoreWithSelector),(e=>{b=e})(n.useSyncExternalStore),x=o.unstable_batchedUpdates,i=x;var T=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=function(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?P(e):t}(this,(e=C(t)).call.apply(e,[this].concat(o))),A(P(n),"state",{bootstrapped:!1}),A(P(n),"_unsubscribe",void 0),A(P(n),"handlePersistorState",(function(){n.props.persistor.getState().bootstrapped&&(n.props.onBeforeLift?Promise.resolve(n.props.onBeforeLift()).finally((function(){return n.setState({bootstrapped:!0})})):n.setState({bootstrapped:!0}),n._unsubscribe&&n._unsubscribe())})),n}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this._unsubscribe=this.props.persistor.subscribe(this.handlePersistorState),this.handlePersistorState()}},{key:"componentWillUnmount",value:function(){this._unsubscribe&&this._unsubscribe()}},{key:"render",value:function(){return"function"==typeof this.props.children?this.props.children(this.state.bootstrapped):this.state.bootstrapped?this.props.children:this.props.loading}}])&&O(n.prototype,r),t}(l.PureComponent);A(T,"defaultProps",{children:null,loading:null});var N=__webpack_require__(445),R=__webpack_require__.n(N);const I=function(e){function t(e,r,u,s,d){for(var p,h,g,m,w,k=0,_=0,x=0,E=0,O=0,N=0,I=g=p=0,D=0,z=0,M=0,F=0,U=u.length,B=U-1,$="",q="",W="",H="";D<U;){if(h=u.charCodeAt(D),D===B&&0!==_+E+x+k&&(0!==_&&(h=47===_?10:47),E=x=k=0,U++,B++),0===_+E+x+k){if(D===B&&(0<z&&($=$.replace(f,"")),0<$.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:$+=u.charAt(D)}h=59}switch(h){case 123:for(p=($=$.trim()).charCodeAt(0),g=1,F=++D;D<U;){switch(h=u.charCodeAt(D)){case 123:g++;break;case 125:g--;break;case 47:switch(h=u.charCodeAt(D+1)){case 42:case 47:e:{for(I=D+1;I<B;++I)switch(u.charCodeAt(I)){case 47:if(42===h&&42===u.charCodeAt(I-1)&&D+2!==I){D=I+1;break e}break;case 10:if(47===h){D=I+1;break e}}D=I}}break;case 91:h++;case 40:h++;case 34:case 39:for(;D++<B&&u.charCodeAt(D)!==h;);}if(0===g)break;D++}if(g=u.substring(F,D),0===p&&(p=($=$.replace(c,"").trim()).charCodeAt(0)),64===p){switch(0<z&&($=$.replace(f,"")),h=$.charCodeAt(1)){case 100:case 109:case 115:case 45:z=r;break;default:z=T}if(F=(g=t(r,z,g,h,d+1)).length,0<R&&(w=l(3,g,z=n(T,$,M),r,P,C,F,h,d,s),$=z.join(""),void 0!==w&&0===(F=(g=w.trim()).length)&&(h=0,g="")),0<F)switch(h){case 115:$=$.replace(S,a);case 100:case 109:case 45:g=$+"{"+g+"}";break;case 107:g=($=$.replace(y,"$1 $2"))+"{"+g+"}",g=1===A||2===A&&i("@"+g,3)?"@-webkit-"+g+"@"+g:"@"+g;break;default:g=$+g,112===s&&(q+=g,g="")}else g=""}else g=t(r,n(r,$,M),g,s,d+1);W+=g,g=M=z=I=p=0,$="",h=u.charCodeAt(++D);break;case 125:case 59:if(1<(F=($=(0<z?$.replace(f,""):$).trim()).length))switch(0===I&&(p=$.charCodeAt(0),45===p||96<p&&123>p)&&(F=($=$.replace(" ",":")).length),0<R&&void 0!==(w=l(1,$,r,e,P,C,q.length,s,d,s))&&0===(F=($=w.trim()).length)&&($="\0\0"),p=$.charCodeAt(0),h=$.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){H+=$+u.charAt(D);break}default:58!==$.charCodeAt(F-1)&&(q+=o($,p,h,$.charCodeAt(2)))}M=z=I=p=0,$="",h=u.charCodeAt(++D)}}switch(h){case 13:case 10:47===_?_=0:0===1+p&&107!==s&&0<$.length&&(z=1,$+="\0"),0<R*L&&l(0,$,r,e,P,C,q.length,s,d,s),C=1,P++;break;case 59:case 125:if(0===_+E+x+k){C++;break}default:switch(C++,m=u.charAt(D),h){case 9:case 32:if(0===E+k+_)switch(O){case 44:case 58:case 9:case 32:m="";break;default:32!==h&&(m=" ")}break;case 0:m="\\0";break;case 12:m="\\f";break;case 11:m="\\v";break;case 38:0===E+_+k&&(z=M=1,m="\f"+m);break;case 108:if(0===E+_+k+j&&0<I)switch(D-I){case 2:112===O&&58===u.charCodeAt(D-3)&&(j=O);case 8:111===N&&(j=N)}break;case 58:0===E+_+k&&(I=D);break;case 44:0===_+x+E+k&&(z=1,m+="\r");break;case 34:case 39:0===_&&(E=E===h?0:0===E?h:E);break;case 91:0===E+_+x&&k++;break;case 93:0===E+_+x&&k--;break;case 41:0===E+_+k&&x--;break;case 40:0===E+_+k&&(0===p&&(2*O+3*N==533||(p=1)),x++);break;case 64:0===_+x+E+k+I+g&&(g=1);break;case 42:case 47:if(!(0<E+k+x))switch(_){case 0:switch(2*h+3*u.charCodeAt(D+1)){case 235:_=47;break;case 220:F=D,_=42}break;case 42:47===h&&42===O&&F+2!==D&&(33===u.charCodeAt(F+2)&&(q+=u.substring(F,D+1)),m="",_=0)}}0===_&&($+=m)}N=O,O=h,D++}if(0<(F=q.length)){if(z=r,0<R&&void 0!==(w=l(2,q,z,e,P,C,F,s,d,s))&&0===(q=w).length)return H+q+W;if(q=z.join(",")+"{"+q+"}",0!=A*j){switch(2!==A||i(q,2)||(j=0),j){case 111:q=q.replace(b,":-moz-$1")+q;break;case 112:q=q.replace(v,"::-webkit-input-$1")+q.replace(v,"::-moz-$1")+q.replace(v,":-ms-input-$1")+q}j=0}}return H+q+W}function n(e,t,n){var o=t.trim().split(g);t=o;var i=o.length,a=e.length;switch(a){case 0:case 1:var l=0;for(e=0===a?"":e[0]+" ";l<i;++l)t[l]=r(e,t[l],n).trim();break;default:var u=l=0;for(t=[];l<i;++l)for(var s=0;s<a;++s)t[u++]=r(e[s]+" ",o[l],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(m,"$1"+e.trim());case 58:return e.trim()+t.replace(m,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(m,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var a=e+";",l=2*t+3*n+4*r;if(944===l){e=a.indexOf(":",9)+1;var u=a.substring(e,a.length-1).trim();return u=a.substring(0,e).trim()+u+";",1===A||2===A&&i(u,1)?"-webkit-"+u+u:u}if(0===A||2===A&&!i(a,1))return a;switch(l){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(O,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(u=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+u+a;case 1005:return p.test(a)?a.replace(d,":-webkit-")+a.replace(d,":-moz-")+a:a;case 1e3:switch(t=(u=a.substring(13).trim()).indexOf("-")+1,u.charCodeAt(0)+u.charCodeAt(t)){case 226:u=a.replace(w,"tb");break;case 232:u=a.replace(w,"tb-rl");break;case 220:u=a.replace(w,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+u+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,l=(u=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|u.charCodeAt(7))){case 203:if(111>u.charCodeAt(8))break;case 115:a=a.replace(u,"-webkit-"+u)+";"+a;break;case 207:case 102:a=a.replace(u,"-webkit-"+(102<l?"inline-":"")+"box")+";"+a.replace(u,"-webkit-"+u)+";"+a.replace(u,"-ms-"+u+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return u=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+u+"-ms-flex-"+u+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(_,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(_,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===E.test(e))return 115===(u=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):a.replace(u,"-webkit-"+u)+a.replace(u,"-moz-"+u.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+r&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+a}return a}function i(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),I(2!==t?r:r.replace(x,"$1"),n,t)}function a(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function l(e,t,n,r,o,i,a,l,u,c){for(var f,d=0,p=t;d<R;++d)switch(f=N[d].call(s,e,p,n,r,o,i,a,l,u,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function u(e){return void 0!==(e=e.prefix)&&(I=null,e?"function"!=typeof e?A=1:(A=2,I=e):A=0),u}function s(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<R){var o=l(-1,n,r,r,P,C,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var i=t(T,r,n,0,0);return 0<R&&void 0!==(o=l(-2,i,r,r,P,C,i.length,0,0,0))&&(i=o),j=0,C=P=1,i}var c=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,g=/,\r+?/g,m=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,S=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,_=/-self|flex-/g,x=/[^]*?(:[rp][el]a[\w-]+)[^]*/,E=/stretch|:\s*\w+\-(?:conte|avail)/,O=/([^-])(image-set\()/,C=1,P=1,j=0,A=1,T=[],N=[],R=0,I=null,L=0;return s.use=function e(t){switch(t){case void 0:case null:R=N.length=0;break;default:if("function"==typeof t)N[R++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else L=0|!!t}return e},s.set=u,void 0!==e&&u(e),s},L={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},D=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var z=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const M=D((function(e){return z.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));function F(){return(F=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var U=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},B=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,m.typeOf)(e)},$=Object.freeze([]),q=Object.freeze({});function W(e){return"function"==typeof e}function H(e){return e.displayName||e.name||"Component"}function V(e){return e&&"string"==typeof e.styledComponentId}var K="undefined"!=typeof process&&("MISSING_ENV_VAR".REACT_APP_SC_ATTR||"MISSING_ENV_VAR".SC_ATTR)||"data-styled",G="undefined"!=typeof window&&"HTMLElement"in window,Q=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&(void 0!=="MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY&&""!=="MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY?"false"!=="MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY&&"MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY:void 0!=="MISSING_ENV_VAR".SC_DISABLE_SPEEDY&&""!=="MISSING_ENV_VAR".SC_DISABLE_SPEEDY&&"false"!=="MISSING_ENV_VAR".SC_DISABLE_SPEEDY&&"MISSING_ENV_VAR".SC_DISABLE_SPEEDY)),Y={};function X(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var J=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&X(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var i=r;i<o;i++)this.groupSizes[i]=0}for(var a=this.indexOfGroup(e+1),l=0,u=t.length;l<u;l++)this.tag.insertRule(a,t[l])&&(this.groupSizes[e]++,a++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,i=r;i<o;i++)t+=this.tag.getRule(i)+"/*!sc*/\n";return t},e}(),Z=new Map,ee=new Map,te=1,ne=function(e){if(Z.has(e))return Z.get(e);for(;ee.has(te);)te++;var t=te++;return Z.set(e,t),ee.set(t,e),t},re=function(e){return ee.get(e)},oe=function(e,t){t>=te&&(te=t+1),Z.set(e,t),ee.set(t,e)},ie="style["+K+'][data-styled-version="5.3.9"]',ae=new RegExp("^"+K+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),le=function(e,t,n){for(var r,o=n.split(","),i=0,a=o.length;i<a;i++)(r=o[i])&&e.registerName(t,r)},ue=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,i=n.length;o<i;o++){var a=n[o].trim();if(a){var l=a.match(ae);if(l){var u=0|parseInt(l[1],10),s=l[2];0!==u&&(oe(s,u),le(e,s,l[3]),e.getTag().insertRules(u,r)),r.length=0}else r.push(a)}}},se=function(){return __webpack_require__.nc},ce=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(K))return r}}(n),i=void 0!==o?o.nextSibling:null;r.setAttribute(K,"active"),r.setAttribute("data-styled-version","5.3.9");var a=se();return a&&r.setAttribute("nonce",a),n.insertBefore(r,i),r},fe=function(){function e(e){var t=this.element=ce(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}X(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),de=function(){function e(e){var t=this.element=ce(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),pe=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),he=G,ge={isServer:!G,useCSSOMInjection:!Q},me=function(){function e(e,t,n){void 0===e&&(e=q),void 0===t&&(t={}),this.options=F({},ge,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&G&&he&&(he=!1,function(e){for(var t=document.querySelectorAll(ie),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(K)&&(ue(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return ne(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(F({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new pe(o):r?new fe(o):new de(o),new J(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(ne(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(ne(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(ne(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var i=re(o);if(void 0!==i){var a=e.names.get(i),l=t.getGroup(o);if(a&&l&&a.size){var u=K+".g"+o+'[id="'+i+'"]',s="";void 0!==a&&a.forEach((function(e){e.length>0&&(s+=e+",")})),r+=""+l+u+'{content:"'+s+'"}/*!sc*/\n'}}}return r}(this)},e}(),ye=/(a)(d)/gi,ve=function(e){return String.fromCharCode(e+(e>25?39:97))};function be(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=ve(t%52)+n;return(ve(t%52)+n).replace(ye,"$1-$2")}var we=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},Se=function(e){return we(5381,e)};function ke(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(W(n)&&!V(n))return!1}return!0}var _e=Se("5.3.9"),xe=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&ke(e),this.componentId=t,this.baseHash=we(_e,t),this.baseStyle=n,me.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var i=$e(this.rules,e,t,n).join(""),a=be(we(this.baseHash,i)>>>0);if(!t.hasNameForId(r,a)){var l=n(i,"."+a,void 0,r);t.insertRules(r,a,l)}o.push(a),this.staticRulesId=a}else{for(var u=this.rules.length,s=we(this.baseHash,n.hash),c="",f=0;f<u;f++){var d=this.rules[f];if("string"==typeof d)c+=d;else if(d){var p=$e(d,e,t,n),h=Array.isArray(p)?p.join(""):p;s=we(s,h+f),c+=h}}if(c){var g=be(s>>>0);if(!t.hasNameForId(r,g)){var m=n(c,"."+g,void 0,r);t.insertRules(r,g,m)}o.push(g)}}return o.join(" ")},e}(),Ee=/^\s*\/\/.*$/gm,Oe=[":","[",".","#"];function Ce(e){var t,n,r,o,i=void 0===e?q:e,a=i.options,l=void 0===a?q:a,u=i.plugins,s=void 0===u?$:u,c=new I(l),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,a,l,u,s,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===s)return r+"/*|*/";break;case 3:switch(s){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,i){return 0===r&&-1!==Oe.indexOf(i[n.length])||i.match(o)?e:"."+t};function h(e,i,a,l){void 0===l&&(l="&");var u=e.replace(Ee,""),s=i&&a?a+" "+i+" { "+u+" }":u;return t=l,n=i,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),c(a||!i?"":i,s)}return c.use([].concat(s,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=s.length?s.reduce((function(e,t){return t.name||X(15),we(e,t.name)}),5381).toString():"",h}var Pe=l.createContext(),je=(Pe.Consumer,l.createContext()),Ae=(je.Consumer,new me),Te=Ce();function Ne(){return(0,l.useContext)(Pe)||Ae}function Re(){return(0,l.useContext)(je)||Te}function Ie(e){var t=(0,l.useState)(e.stylisPlugins),n=t[0],r=t[1],o=Ne(),i=(0,l.useMemo)((function(){var t=o;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),a=(0,l.useMemo)((function(){return Ce({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return(0,l.useEffect)((function(){R()(n,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]),l.createElement(Pe.Provider,{value:i},l.createElement(je.Provider,{value:a},e.children))}var Le=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Te);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return X(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Te),this.name+e.hash},e}(),De=/([A-Z])/,ze=/([A-Z])/g,Me=/^ms-/,Fe=function(e){return"-"+e.toLowerCase()};function Ue(e){return De.test(e)?e.replace(ze,Fe).replace(Me,"-ms-"):e}var Be=function(e){return null==e||!1===e||""===e};function $e(e,t,n,r){if(Array.isArray(e)){for(var o,i=[],a=0,l=e.length;a<l;a+=1)""!==(o=$e(e[a],t,n,r))&&(Array.isArray(o)?i.push.apply(i,o):i.push(o));return i}return Be(e)?"":V(e)?"."+e.styledComponentId:W(e)?"function"!=typeof(u=e)||u.prototype&&u.prototype.isReactComponent||!t?e:$e(e(t),t,n,r):e instanceof Le?n?(e.inject(n,r),e.getName(r)):e:B(e)?function e(t,n){var r,o,i=[];for(var a in t)t.hasOwnProperty(a)&&!Be(t[a])&&(Array.isArray(t[a])&&t[a].isCss||W(t[a])?i.push(Ue(a)+":",t[a],";"):B(t[a])?i.push.apply(i,e(t[a],a)):i.push(Ue(a)+": "+(r=a,(null==(o=t[a])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in L?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(i,["}"]):i}(e):e.toString();var u}var qe=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function We(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return W(e)||B(e)?qe($e(U($,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:qe($e(U(e,n)))}new Set;var He=function(e,t,n){return void 0===n&&(n=q),e.theme!==n.theme&&e.theme||t||n.theme},Ve=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Ke=/(^-|-$)/g;function Ge(e){return e.replace(Ve,"-").replace(Ke,"")}var Qe=function(e){return be(Se(e)>>>0)};function Ye(e){return"string"==typeof e&&!0}var Xe=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Je=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Ze(e,t,n){var r=e[n];Xe(t)&&Xe(r)?et(r,t):e[n]=t}function et(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,i=n;o<i.length;o++){var a=i[o];if(Xe(a))for(var l in a)Je(l)&&Ze(e,a[l],l)}return e}var tt=l.createContext();function nt(e){var t=(0,l.useContext)(tt),n=(0,l.useMemo)((function(){return function(e,t){return e?W(e)?e(t):Array.isArray(e)||"object"!=typeof e?X(8):t?F({},t,{},e):e:X(14)}(e.theme,t)}),[e.theme,t]);return e.children?l.createElement(tt.Provider,{value:n},e.children):null}tt.Consumer;var rt={};function ot(e,t,n){var r=V(e),o=!Ye(e),i=t.attrs,a=void 0===i?$:i,u=t.componentId,s=void 0===u?function(e,t){var n="string"!=typeof e?"sc":Ge(e);rt[n]=(rt[n]||0)+1;var r=n+"-"+Qe("5.3.9"+n+rt[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):u,c=t.displayName,f=void 0===c?function(e){return Ye(e)?"styled."+e:"Styled("+H(e)+")"}(e):c,d=t.displayName&&t.componentId?Ge(t.displayName)+"-"+t.componentId:t.componentId||s,p=r&&e.attrs?Array.prototype.concat(e.attrs,a).filter(Boolean):a,h=t.shouldForwardProp;r&&e.shouldForwardProp&&(h=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var m,y=new xe(n,d,r?e.componentStyle:void 0),v=y.isStatic&&0===a.length,b=function(e,t){return function(e,t,n,r){var o=e.attrs,i=e.componentStyle,a=e.defaultProps,u=e.foldedComponentIds,s=e.shouldForwardProp,c=e.styledComponentId,f=e.target,d=function(e,t,n){void 0===e&&(e=q);var r=F({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,i,a=e;for(t in W(a)&&(a=a(r)),a)r[t]=o[t]="className"===t?(n=o[t],i=a[t],n&&i?n+" "+i:n||i):a[t]})),[r,o]}(He(t,(0,l.useContext)(tt),a)||q,t,o),p=d[0],h=d[1],g=function(e,t,n,r){var o=Ne(),i=Re();return t?e.generateAndInjectStyles(q,o,i):e.generateAndInjectStyles(n,o,i)}(i,r,p),m=n,y=h.$as||t.$as||h.as||t.as||f,v=Ye(y),b=h!==t?F({},t,{},h):t,w={};for(var S in b)"$"!==S[0]&&"as"!==S&&("forwardedAs"===S?w.as=b[S]:(s?s(S,M,y):!v||M(S))&&(w[S]=b[S]));return t.style&&h.style!==t.style&&(w.style=F({},t.style,{},h.style)),w.className=Array.prototype.concat(u,c,g!==c?g:null,t.className,h.className).filter(Boolean).join(" "),w.ref=m,(0,l.createElement)(y,w)}(m,e,t,v)};return b.displayName=f,(m=l.forwardRef(b)).attrs=p,m.componentStyle=y,m.displayName=f,m.shouldForwardProp=h,m.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):$,m.styledComponentId=d,m.target=r?e.target:e,m.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),i=r&&r+"-"+(Ye(e)?e:Ge(H(e)));return ot(e,F({},o,{attrs:p,componentId:i}),n)},Object.defineProperty(m,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?et({},e.defaultProps,t):t}}),Object.defineProperty(m,"toString",{value:function(){return"."+m.styledComponentId}}),o&&g()(m,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),m}var it=function(e){return function e(t,n,r){if(void 0===r&&(r=q),!(0,m.isValidElementType)(n))return X(1,String(n));var o=function(){return t(n,r,We.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,F({},r,{},o))},o.attrs=function(o){return e(t,n,F({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(ot,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){it[e]=it(e)}));var at=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=ke(e),me.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r($e(this.rules,t,n,r).join(""),""),i=this.componentId+e;n.insertRules(i,i,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&me.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();!function(){var e=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=se();return"<style "+[n&&'nonce="'+n+'"',K+'="true"','data-styled-version="5.3.9"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?X(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return X(2);var n=((t={})[K]="",t["data-styled-version"]="5.3.9",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),r=se();return r&&(n.nonce=r),[l.createElement("style",F({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new me({isServer:!0}),this.sealed=!1}.prototype;e.collectStyles=function(e){return this.sealed?X(2):l.createElement(Ie,{sheet:this.instance},e)},e.interleaveWithNodeStream=function(e){return X(3)}}();const lt=it;var ut,st,ct,ft,dt=lt.button(ut||(st=["\n\tmin-width: ","px;\n\tmin-height: ","px;\n\n\tborder-radius: ","px;\n\n\tbackground-color: ",";\n\tcolor: ",";\n\n\tfont-size: ","px;\n\n\tdisplay: grid;\n\talign-items: center;\n\tjustify-content: center;\n\tcursor: pointer;\n\n\ttransition: ",";\n\n\t&:hover {\n\t\ttransform: scale(1.01);\n\t\tbackground-color: ",";\n\t}\n"],ct=["\n\tmin-width: ","px;\n\tmin-height: ","px;\n\n\tborder-radius: ","px;\n\n\tbackground-color: ",";\n\tcolor: ",";\n\n\tfont-size: ","px;\n\n\tdisplay: grid;\n\talign-items: center;\n\tjustify-content: center;\n\tcursor: pointer;\n\n\ttransition: ",";\n\n\t&:hover {\n\t\ttransform: scale(1.01);\n\t\tbackground-color: ",";\n\t}\n"],Object.defineProperty?Object.defineProperty(st,"raw",{value:ct}):st.raw=ct,ut=st),(function(e){return e.theme.width[0]}),(function(e){return e.theme.height[0]}),(function(e){return e.theme.borderRadius[1]}),(function(e){return e.theme.colors.black}),(function(e){return e.theme.colors.white}),(function(e){return e.theme.fontSize[2]}),(function(e){return e.theme.transition.light}),(function(e){return e.theme.colors.lightBlack})),pt=function(){return pt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},pt.apply(this,arguments)},ht=function(t){var n=t.children,r=t.onClick,o=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["children","onClick"]);return(0,e.jsx)(dt,pt({},o,{onClick:r},{children:n}))},gt=__webpack_require__(337),mt={clientId:null!=="126193467251-3km52qm9oejptlll0gkgefs1kceu9kni.apps.googleusercontent.com"?"126193467251-3km52qm9oejptlll0gkgefs1kceu9kni.apps.googleusercontent.com":"",apiKey:null!=="AIzaSyB3uVQBS8rSzchO6oXWV6Mx45KtYwEoN9U"?"AIzaSyB3uVQBS8rSzchO6oXWV6Mx45KtYwEoN9U":"",scope:"https://www.googleapis.com/auth/calendar.events",discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"]},yt={calendarId:"primary",timeMin:(new Date).toISOString(),showDeleted:!1,singleEvents:!0,maxResults:10,orderBy:"startTime"};!function(e){e.IDLE="idle",e.ERROR="error",e.SUCCESS="success",e.LOADING="loading"}(ft||(ft={}));var vt,bt={hour:"numeric",minute:"numeric",second:"numeric"},wt={weekday:"long",month:"long",year:"numeric",day:"numeric"},St={weekday:"long"},kt={hour:"numeric",minute:"numeric"};!function(e){e[e.SMALL=16]="SMALL",e[e.MEDIUM=32]="MEDIUM",e[e.LARGE=64]="LARGE"}(vt||(vt={}));const _t=__webpack_require__.p+"d7a3523274339e38d70487e6204c5ac1.jpg",xt=__webpack_require__.p+"33a640e8b41480258625a8e839dae962.jpg",Et=__webpack_require__.p+"aad0e23868dd1b2e57e07be34cd384cc.jpg",Ot=__webpack_require__.p+"7f797542afc59a7e98ef715c289c758a.jpg",Ct=__webpack_require__.p+"9510fdd0c1c2ed01f95b9f6da8724f77.jpg",Pt=__webpack_require__.p+"eda59e439ac27aacd88ba7594a46179e.jpg",jt=__webpack_require__.p+"b7987f014cb31ddbdc1d84847e4e2d84.jpg",At=(__webpack_require__.p,__webpack_require__.p+"21d0166d556b45f9d0fbb67bd5c33715.png"),Tt=(__webpack_require__.p,__webpack_require__.p+"7eb74c4e0a99eebd4f9f79884f33d629.png"),Nt=(__webpack_require__.p,__webpack_require__.p+"85ba87958a828a21ba4b4c19cce69c33.png"),Rt=__webpack_require__.p+"eaa6309e7e00f8a46060e019c4c2a7fd.png",It=(__webpack_require__.p,__webpack_require__.p,__webpack_require__.p,__webpack_require__.p+"e78c8c56627e697f1174f9287922bcda.png"),Lt=__webpack_require__.p+"b3004cf8bc60dbb89df301fce2c813c0.png",Dt=__webpack_require__.p+"8af844f50b1bed4dd315722dff786bcd.gif",zt=__webpack_require__.p+"fb274bd2c737e393f248104b34170bd6.png";var Mt={0:{icon:At,description:"Clear sky"},1:{icon:Tt,description:"Mainly clear"},2:{icon:Tt,description:"Partly cloudy"},3:{icon:Tt,description:"Overcast"},45:{icon:Nt,description:"Fog"},48:{icon:Nt,description:"depositing rime fog"},51:{icon:Rt,description:"Drizzle Light"},53:{icon:Rt,description:"Drizzle Moderate"},55:{icon:It,description:"Drizzle Intesity"},56:{icon:Rt,description:"Freezing Drizzle Light"},57:{icon:It,description:"Freezing Drizzle Intensity"},61:{icon:Rt,description:"Slight rain"},63:{icon:It,description:"Moderate rain"},65:{icon:It,description:"Heavy intensity rain"},66:{icon:Rt,description:"Light freezing Rain"},67:{icon:It,description:"Heavy intensity freezing rain"},71:{icon:Lt,description:"Slight snow fall"},73:{icon:Lt,description:"Moderate snow fall"},75:{icon:Lt,description:"Heavy intensity snow fall"},77:{icon:Lt,description:"Snow grains"},80:{icon:It,description:"Slight rain showers"},81:{icon:It,description:"Moderate rain showers"},82:{icon:It,description:"Heavy intensity rain showers"},85:{icon:Lt,description:"Slight snow shower"},86:{icon:Lt,description:"Heavy snow shower"},95:{icon:zt,description:"Thunderstorm"},96:{icon:zt,description:"Thunderstorm with slight hail"},99:{icon:zt,description:"Thunderstorm with heavy hail"}},Ft=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}u((r=r.apply(e,t||[])).next())}))},Ut=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}},Bt=function(e){void 0===e&&(e={});var t=(0,l.useState)(null),n=t[0],r=t[1],o=(0,l.useState)(null),i=o[0],a=o[1],u=function(e){var t=e.coords,n=t.latitude,o=t.longitude;r({lat:n,lon:o})},s=function(e){a(e)};return(0,l.useEffect)((function(){navigator.geolocation.getCurrentPosition(u,s,e)}),[]),{location:n,error:i}},$t="persist:",qt="persist/FLUSH",Wt="persist/REHYDRATE",Ht="persist/PAUSE",Vt="persist/PERSIST",Kt="persist/PURGE",Gt="persist/REGISTER";function Qt(e){return Qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qt(e)}function Yt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Jt(e){return JSON.stringify(e)}function Zt(e){return JSON.parse(e)}function en(e){}function tn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function nn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?tn(n,!0).forEach((function(t){rn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):tn(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function rn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function on(e){return on="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},on(e)}function an(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==on(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==on(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===on(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ln(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function un(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ln(Object(n),!0).forEach((function(t){an(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ln(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function sn(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var cn="function"==typeof Symbol&&Symbol.observable||"@@observable",fn=function(){return Math.random().toString(36).substring(7).split("").join(".")},dn={INIT:"@@redux/INIT"+fn(),REPLACE:"@@redux/REPLACE"+fn(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+fn()}};function pn(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(sn(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(sn(1));return n(pn)(e,t)}if("function"!=typeof e)throw new Error(sn(2));var o=e,i=t,a=[],l=a,u=!1;function s(){l===a&&(l=a.slice())}function c(){if(u)throw new Error(sn(3));return i}function f(e){if("function"!=typeof e)throw new Error(sn(4));if(u)throw new Error(sn(5));var t=!0;return s(),l.push(e),function(){if(t){if(u)throw new Error(sn(6));t=!1,s();var n=l.indexOf(e);l.splice(n,1),a=null}}}function d(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(sn(7));if(void 0===e.type)throw new Error(sn(8));if(u)throw new Error(sn(9));try{u=!0,i=o(i,e)}finally{u=!1}for(var t=a=l,n=0;n<t.length;n++)(0,t[n])();return e}return d({type:dn.INIT}),(r={dispatch:d,subscribe:f,getState:c,replaceReducer:function(e){if("function"!=typeof e)throw new Error(sn(10));o=e,d({type:dn.REPLACE})}})[cn]=function(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(sn(11));function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[cn]=function(){return this},e},r}function hn(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:dn.INIT}))throw new Error(sn(12));if(void 0===n(void 0,{type:dn.PROBE_UNKNOWN_ACTION()}))throw new Error(sn(13))}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},l=0;l<a.length;l++){var u=a[l],s=n[u],c=e[u],f=s(c,t);if(void 0===f)throw t&&t.type,new Error(sn(14));o[u]=f,r=r||f!==c}return(r=r||a.length!==Object.keys(e).length)?o:e}}function gn(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function mn(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(sn(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return r=gn.apply(void 0,i)(n.dispatch),un(un({},n),{},{dispatch:r})}}}function yn(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function vn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function bn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?vn(n,!0).forEach((function(t){wn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):vn(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function wn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Sn={registry:[],bootstrapped:!1},kn=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Sn,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Gt:return bn({},e,{registry:[].concat(yn(e.registry),[t.key])});case Wt:var n=e.registry.indexOf(t.key),r=yn(e.registry);return r.splice(n,1),bn({},e,{registry:r,bootstrapped:0===r.length});default:return e}},_n=__webpack_require__(494);function xn(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function En(e){return!!e&&!!e[fr]}function On(e){var t;return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===dr}(e)||Array.isArray(e)||!!e[cr]||!!(null===(t=e.constructor)||void 0===t?void 0:t[cr])||Nn(e)||Rn(e))}function Cn(e,t,n){void 0===n&&(n=!1),0===Pn(e)?(n?Object.keys:pr)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function Pn(e){var t=e[fr];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:Nn(e)?2:Rn(e)?3:0}function jn(e,t){return 2===Pn(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function An(e,t,n){var r=Pn(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function Tn(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function Nn(e){return ar&&e instanceof Map}function Rn(e){return lr&&e instanceof Set}function In(e){return e.o||e.t}function Ln(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=hr(e);delete t[fr];for(var n=pr(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function Dn(e,t){return void 0===t&&(t=!1),Mn(e)||En(e)||!On(e)||(Pn(e)>1&&(e.set=e.add=e.clear=e.delete=zn),Object.freeze(e),t&&Cn(e,(function(e,t){return Dn(t,!0)}),!0)),e}function zn(){xn(2)}function Mn(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function Fn(e){var t=gr[e];return t||xn(18,e),t}function Un(){return or}function Bn(e,t){t&&(Fn("Patches"),e.u=[],e.s=[],e.v=t)}function $n(e){qn(e),e.p.forEach(Hn),e.p=null}function qn(e){e===or&&(or=e.l)}function Wn(e){return or={p:[],l:or,h:e,m:!0,_:0}}function Hn(e){var t=e[fr];0===t.i||1===t.i?t.j():t.g=!0}function Vn(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.O||Fn("ES5").S(t,e,r),r?(n[fr].P&&($n(t),xn(4)),On(e)&&(e=Kn(t,e),t.l||Qn(t,e)),t.u&&Fn("Patches").M(n[fr].t,e,t.u,t.s)):e=Kn(t,n,[]),$n(t),t.u&&t.v(t.u,t.s),e!==sr?e:void 0}function Kn(e,t,n){if(Mn(t))return t;var r=t[fr];if(!r)return Cn(t,(function(o,i){return Gn(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return Qn(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=Ln(r.k):r.o,i=o,a=!1;3===r.i&&(i=new Set(o),o.clear(),a=!0),Cn(i,(function(t,i){return Gn(e,r,o,t,i,n,a)})),Qn(e,o,!1),n&&e.u&&Fn("Patches").N(r,n,e.u,e.s)}return r.o}function Gn(e,t,n,r,o,i,a){if(En(o)){var l=Kn(e,o,i&&t&&3!==t.i&&!jn(t.R,r)?i.concat(r):void 0);if(An(n,r,l),!En(l))return;e.m=!1}else a&&n.add(o);if(On(o)&&!Mn(o)){if(!e.h.D&&e._<1)return;Kn(e,o),t&&t.A.l||Qn(e,o)}}function Qn(e,t,n){void 0===n&&(n=!1),!e.l&&e.h.D&&e.m&&Dn(t,n)}function Yn(e,t){var n=e[fr];return(n?In(n):e)[t]}function Xn(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function Jn(e){e.P||(e.P=!0,e.l&&Jn(e.l))}function Zn(e){e.o||(e.o=Ln(e.t))}function er(e,t,n){var r=Nn(t)?Fn("MapSet").F(t,n):Rn(t)?Fn("MapSet").T(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:Un(),P:!1,I:!1,R:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=mr;n&&(o=[r],i=yr);var a=Proxy.revocable(o,i),l=a.revoke,u=a.proxy;return r.k=u,r.j=l,u}(t,n):Fn("ES5").J(t,n);return(n?n.A:Un()).p.push(r),r}function tr(e){return En(e)||xn(22,e),function e(t){if(!On(t))return t;var n,r=t[fr],o=Pn(t);if(r){if(!r.P&&(r.i<4||!Fn("ES5").K(r)))return r.t;r.I=!0,n=nr(t,o),r.I=!1}else n=nr(t,o);return Cn(n,(function(t,o){r&&function(e,t){return 2===Pn(e)?e.get(t):e[t]}(r.t,t)===o||An(n,t,e(o))})),3===o?new Set(n):n}(e)}function nr(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return Ln(e)}var rr,or,ir="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),ar="undefined"!=typeof Map,lr="undefined"!=typeof Set,ur="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,sr=ir?Symbol.for("immer-nothing"):((rr={})["immer-nothing"]=!0,rr),cr=ir?Symbol.for("immer-draftable"):"__$immer_draftable",fr=ir?Symbol.for("immer-state"):"__$immer_state",dr=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),pr="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,hr=Object.getOwnPropertyDescriptors||function(e){var t={};return pr(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},gr={},mr={get:function(e,t){if(t===fr)return e;var n=In(e);if(!jn(n,t))return function(e,t,n){var r,o=Xn(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!On(r)?r:r===Yn(e.t,t)?(Zn(e),e.o[t]=er(e.A.h,r,e)):r},has:function(e,t){return t in In(e)},ownKeys:function(e){return Reflect.ownKeys(In(e))},set:function(e,t,n){var r=Xn(In(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=Yn(In(e),t),i=null==o?void 0:o[fr];if(i&&i.t===n)return e.o[t]=n,e.R[t]=!1,!0;if(Tn(n,o)&&(void 0!==n||jn(e.t,t)))return!0;Zn(e),Jn(e)}return e.o[t]===n&&(void 0!==n||t in e.o)||Number.isNaN(n)&&Number.isNaN(e.o[t])||(e.o[t]=n,e.R[t]=!0),!0},deleteProperty:function(e,t){return void 0!==Yn(e.t,t)||t in e.t?(e.R[t]=!1,Zn(e),Jn(e)):delete e.R[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=In(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){xn(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){xn(12)}},yr={};Cn(mr,(function(e,t){yr[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),yr.deleteProperty=function(e,t){return yr.set.call(this,e,t,void 0)},yr.set=function(e,t,n){return mr.set.call(this,e[0],t,n,e[0])};var vr=function(){function e(e){var t=this;this.O=ur,this.D=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var i=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,a=Array(r>1?r-1:0),l=1;l<r;l++)a[l-1]=arguments[l];return i.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(a))}))}}var a;if("function"!=typeof n&&xn(6),void 0!==r&&"function"!=typeof r&&xn(7),On(e)){var l=Wn(t),u=er(t,e,void 0),s=!0;try{a=n(u),s=!1}finally{s?$n(l):qn(l)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return Bn(l,r),Vn(e,l)}),(function(e){throw $n(l),e})):(Bn(l,r),Vn(a,l))}if(!e||"object"!=typeof e){if(void 0===(a=n(e))&&(a=e),a===sr&&(a=void 0),t.D&&Dn(a,!0),r){var c=[],f=[];Fn("Patches").M(e,a,c,f),r(c,f)}return a}xn(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))};var r,o,i=t.produce(e,n,(function(e,t){r=e,o=t}));return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return[e,r,o]})):[i,r,o]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){On(e)||xn(8),En(e)&&(e=tr(e));var t=Wn(this),n=er(this,e,void 0);return n[fr].C=!0,qn(t),n},t.finishDraft=function(e,t){var n=(e&&e[fr]).A;return Bn(n,t),Vn(void 0,n)},t.setAutoFreeze=function(e){this.D=e},t.setUseProxies=function(e){e&&!ur&&xn(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var o=Fn("Patches").$;return En(e)?o(e,t):this.produce(e,(function(e){return o(e,t)}))},e}(),br=new vr,wr=br.produce;br.produceWithPatches.bind(br),br.setAutoFreeze.bind(br),br.setUseProxies.bind(br),br.applyPatches.bind(br),br.createDraft.bind(br),br.finishDraft.bind(br);const Sr=wr;function kr(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var _r=kr();_r.withExtraArgument=kr;const xr=_r;var Er,Or=(Er=function(e,t){return Er=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Er(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Er(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Cr=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},Pr=Object.defineProperty,jr=Object.defineProperties,Ar=Object.getOwnPropertyDescriptors,Tr=Object.getOwnPropertySymbols,Nr=Object.prototype.hasOwnProperty,Rr=Object.prototype.propertyIsEnumerable,Ir=function(e,t,n){return t in e?Pr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},Lr=function(e,t){for(var n in t||(t={}))Nr.call(t,n)&&Ir(e,n,t[n]);if(Tr)for(var r=0,o=Tr(t);r<o.length;r++)n=o[r],Rr.call(t,n)&&Ir(e,n,t[n]);return e},Dr=function(e,t){return jr(e,Ar(t))},zr="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?gn:gn.apply(null,arguments)};"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var Mr=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return Or(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,Cr([void 0],e[0].concat(this)))):new(t.bind.apply(t,Cr([void 0],e.concat(this))))},t}(Array);function Fr(e){return On(e)?Sr(e,(function(){})):e}function Ur(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var o=t.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return Lr(Lr({type:e,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Br(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function $r(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,r="function"==typeof e.initialState?e.initialState:Fr(e.initialState),o=e.reducers||{},i=Object.keys(o),a={},l={},u={};function s(){var t="function"==typeof e.extraReducers?Br(e.extraReducers):[e.extraReducers],n=t[0],o=void 0===n?{}:n,i=t[1],a=void 0===i?[]:i,u=t[2],s=void 0===u?void 0:u,c=Lr(Lr({},o),l);return function(e,t,n,r){void 0===n&&(n=[]);var o,i=Br(t),a=i[0],l=i[1],u=i[2];if(function(e){return"function"==typeof e}(e))o=function(){return Fr(e())};else{var s=Fr(e);o=function(){return s}}function c(e,t){void 0===e&&(e=o());var n=Cr([a[t.type]],l.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[u]),n.reduce((function(e,n){if(n){var r;if(En(e))return void 0===(r=n(e,t))?e:r;if(On(e))return Sr(e,(function(e){return n(e,t)}));if(void 0===(r=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return e}),e)}return c.getInitialState=o,c}(r,(function(e){for(var t in c)e.addCase(t,c[t]);for(var n=0,r=a;n<r.length;n++){var o=r[n];e.addMatcher(o.matcher,o.reducer)}s&&e.addDefaultCase(s)}))}return i.forEach((function(e){var n,r,i=o[e],s=t+"/"+e;"reducer"in i?(n=i.reducer,r=i.prepare):n=i,a[e]=n,l[s]=n,u[e]=r?Ur(s,r):Ur(s)})),{name:t,reducer:function(e,t){return n||(n=s()),n(e,t)},actions:u,caseReducers:a,getInitialState:function(){return n||(n=s()),n.getInitialState()}}}var qr=["name","message","stack","code"],Wr=function(e,t){this.payload=e,this.meta=t},Hr=function(e,t){this.payload=e,this.meta=t},Vr=function(e){if("object"==typeof e&&null!==e){for(var t={},n=0,r=qr;n<r.length;n++){var o=r[n];"string"==typeof e[o]&&(t[o]=e[o])}return t}return{message:String(e)}};function Kr(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}!function(){function e(e,t,n){var r=Ur(e+"/fulfilled",(function(e,t,n,r){return{payload:e,meta:Dr(Lr({},r||{}),{arg:n,requestId:t,requestStatus:"fulfilled"})}})),o=Ur(e+"/pending",(function(e,t,n){return{payload:void 0,meta:Dr(Lr({},n||{}),{arg:t,requestId:e,requestStatus:"pending"})}})),i=Ur(e+"/rejected",(function(e,t,r,o,i){return{payload:o,error:(n&&n.serializeError||Vr)(e||"Rejected"),meta:Dr(Lr({},i||{}),{arg:r,requestId:t,rejectedWithValue:!!o,requestStatus:"rejected",aborted:"AbortError"===(null==e?void 0:e.name),condition:"ConditionError"===(null==e?void 0:e.name)})}})),a="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){},reason:void 0,throwIfAborted:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(l,u,s){var c,f=(null==n?void 0:n.idGenerator)?n.idGenerator(e):function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t}(),d=new a;function p(e){c=e,d.abort()}var h=function(){return a=this,h=null,g=function(){var a,h,g,m,y,v;return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}}(this,(function(b){switch(b.label){case 0:return b.trys.push([0,4,,5]),null===(w=m=null==(a=null==n?void 0:n.condition)?void 0:a.call(n,e,{getState:u,extra:s}))||"object"!=typeof w||"function"!=typeof w.then?[3,2]:[4,m];case 1:m=b.sent(),b.label=2;case 2:if(!1===m||d.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return y=new Promise((function(e,t){return d.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:c||"Aborted"})}))})),l(o(f,e,null==(h=null==n?void 0:n.getPendingMeta)?void 0:h.call(n,{requestId:f,arg:e},{getState:u,extra:s}))),[4,Promise.race([y,Promise.resolve(t(e,{dispatch:l,getState:u,extra:s,requestId:f,signal:d.signal,abort:p,rejectWithValue:function(e,t){return new Wr(e,t)},fulfillWithValue:function(e,t){return new Hr(e,t)}})).then((function(t){if(t instanceof Wr)throw t;return t instanceof Hr?r(t.payload,f,e,t.meta):r(t,f,e)}))])];case 3:return g=b.sent(),[3,5];case 4:return v=b.sent(),g=v instanceof Wr?i(null,f,e,v.payload,v.meta):i(v,f,e),[3,5];case 5:return n&&!n.dispatchConditionRejection&&i.match(g)&&g.meta.condition||l(g),[2,g]}var w}))},new Promise((function(e,t){var n=function(e){try{o(g.next(e))}catch(e){t(e)}},r=function(e){try{o(g.throw(e))}catch(e){t(e)}},o=function(t){return t.done?e(t.value):Promise.resolve(t.value).then(n,r)};o((g=g.apply(a,h)).next())}));var a,h,g}();return Object.assign(h,{abort:p,requestId:f,arg:e,unwrap:function(){return h.then(Kr)}})}}),{pending:o,rejected:i,fulfilled:r,typePrefix:e})}e.withTypes=function(){return e}}(),Object.assign;var Gr="listenerMiddleware";Ur(Gr+"/add"),Ur(Gr+"/removeAll"),Ur(Gr+"/remove"),"function"==typeof queueMicrotask&&queueMicrotask.bind("undefined"!=typeof window?window:void 0!==__webpack_require__.g?__webpack_require__.g:globalThis);"undefined"!=typeof window&&window.requestAnimationFrame&&window.requestAnimationFrame,function(){function e(e,t){var n=o[e];return n?n.enumerable=t:o[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[fr];return mr.get(t,e)},set:function(t){var n=this[fr];mr.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][fr];if(!o.P)switch(o.i){case 5:r(o)&&Jn(o);break;case 4:n(o)&&Jn(o)}}}function n(e){for(var t=e.t,n=e.k,r=pr(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==fr){var a=t[i];if(void 0===a&&!jn(t,i))return!0;var l=n[i],u=l&&l[fr];if(u?u.t!==a:!Tn(l,a))return!0}}var s=!!t[fr];return r.length!==pr(t).length+(s?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var r=0;r<t.length;r++)if(!t.hasOwnProperty(r))return!0;return!1}var o={};!function(e,t){gr[e]||(gr[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=hr(n);delete i[fr];for(var a=pr(i),l=0;l<a.length;l++){var u=a[l];i[u]=e(u,t||!!i[u].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:Un(),P:!1,I:!1,R:{},l:n,t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,fr,{value:i,writable:!0}),o},S:function(e,n,o){o?En(n)&&n[fr].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[fr];if(n){var o=n.t,i=n.k,a=n.R,l=n.i;if(4===l)Cn(i,(function(t){t!==fr&&(void 0!==o[t]||jn(o,t)?a[t]||e(i[t]):(a[t]=!0,Jn(n)))})),Cn(o,(function(e){void 0!==i[e]||jn(i,e)||(a[e]=!1,Jn(n))}));else if(5===l){if(r(n)&&(Jn(n),a.length=!0),i.length<o.length)for(var u=i.length;u<o.length;u++)a[u]=!1;else for(var s=o.length;s<i.length;s++)a[s]=!0;for(var c=Math.min(i.length,o.length),f=0;f<c;f++)i.hasOwnProperty(f)||(a[f]=!0),void 0===a[f]&&e(i[f])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}();var Qr=__webpack_require__(758),Yr=function(e){return"@@redux-saga/"+e},Xr=Yr("CANCEL_PROMISE"),Jr=Yr("CHANNEL_END"),Zr=Yr("IO"),eo=Yr("MATCH"),to=Yr("MULTICAST"),no=Yr("SAGA_ACTION"),ro=Yr("SELF_CANCELLATION"),oo=Yr("TASK"),io=Yr("TASK_CANCEL"),ao=Yr("TERMINATE"),lo=Yr("LOCATION");function uo(){return uo=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},uo.apply(this,arguments)}var so=function(e){return null==e},co=function(e){return null!=e},fo=function(e){return"function"==typeof e},po=function(e){return"string"==typeof e},ho=Array.isArray,go=function(e){return e&&fo(e.then)},mo=function(e){return e&&fo(e.next)&&fo(e.throw)},yo=function e(t){return t&&(po(t)||wo(t)||fo(t)||ho(t)&&t.every(e))},vo=function(e){return e&&fo(e.take)&&fo(e.close)},bo=function(e){return fo(e)&&e.hasOwnProperty("toString")},wo=function(e){return Boolean(e)&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype},So=function(e){return vo(e)&&e[to]},ko=function(e){return function(){return e}},_o=ko(!0),xo=function(){},Eo=function(e){return e};"function"==typeof Symbol&&Symbol.asyncIterator&&Symbol.asyncIterator;var Oo=function(e,t){uo(e,t),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(t).forEach((function(n){e[n]=t[n]}))};function Co(e,t){var n=e.indexOf(t);n>=0&&e.splice(n,1)}var Po=function(e){throw e},jo=function(e){return{value:e,done:!0}};function Ao(e,t,n){void 0===t&&(t=Po),void 0===n&&(n="iterator");var r={meta:{name:n},next:e,throw:t,return:jo,isSagaIterator:!0};return"undefined"!=typeof Symbol&&(r[Symbol.iterator]=function(){return r}),r}function To(e,t){var n=t.sagaStack;console.error(e),console.error(n)}var No=function(e){return Array.apply(null,new Array(e))},Ro=function(e){return function(t){return e(Object.defineProperty(t,no,{value:!0}))}},Io=function(e){return e===ao},Lo=function(e){return e===io},Do=function(e){return Io(e)||Lo(e)};function zo(e,t){var n,r=Object.keys(e),o=r.length,i=0,a=ho(e)?No(o):{},l={};return r.forEach((function(e){var r=function(r,l){n||(l||Do(r)?(t.cancel(),t(r,l)):(a[e]=r,++i===o&&(n=!0,t(a))))};r.cancel=xo,l[e]=r})),t.cancel=function(){n||(n=!0,r.forEach((function(e){return l[e].cancel()})))},l}function Mo(e){return{name:e.name||"anonymous",location:Fo(e)}}function Fo(e){return e[lo]}var Uo=4;var Bo=function(e){return function(e,t){void 0===e&&(e=10);var n=new Array(e),r=0,o=0,i=0,a=function(t){n[o]=t,o=(o+1)%e,r++},l=function(){if(0!=r){var t=n[i];return n[i]=null,r--,i=(i+1)%e,t}},u=function(){for(var e=[];r;)e.push(l());return e};return{isEmpty:function(){return 0==r},put:function(l){var s;if(r<e)a(l);else switch(t){case 1:throw new Error("Channel's Buffer overflow!");case 3:n[o]=l,i=o=(o+1)%e;break;case Uo:s=2*e,n=u(),r=n.length,o=n.length,i=0,n.length=s,e=s,a(l)}},take:l,flush:u}}(e,Uo)},$o="TAKE",qo="PUT",Wo="CALL",Ho="FORK",Vo="CANCEL",Ko=function(e,t){var n;return(n={})[Zr]=!0,n.combinator=!1,n.type=e,n.payload=t,n};function Go(e,t){return void 0===e&&(e="*"),yo(e)?(co(t)&&console.warn("take(pattern) takes one argument but two were provided. Consider passing an array for listening to several action types"),Ko($o,{pattern:e})):So(e)&&co(t)&&yo(t)?Ko($o,{channel:e,pattern:t}):vo(e)?(co(t)&&console.warn("take(channel) takes one argument but two were provided. Second argument is ignored."),Ko($o,{channel:e})):void 0}function Qo(e,t){return so(t)&&(t=e,e=void 0),Ko(qo,{channel:e,action:t})}function Yo(e,t){var n,r=null;return fo(e)?n=e:(ho(e)?(r=e[0],n=e[1]):(r=e.context,n=e.fn),r&&po(n)&&fo(r[n])&&(n=r[n])),{context:r,fn:n,args:t}}function Xo(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return Ko(Wo,Yo(e,n))}function Jo(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return Ko(Ho,Yo(e,n))}const Zo=function(){var e={};return e.promise=new Promise((function(t,n){e.resolve=t,e.reject=n})),e};var ei=[],ti=0;function ni(e){try{ii(),e()}finally{ai()}}function ri(e){ei.push(e),ti||(ii(),li())}function oi(e){try{return ii(),e()}finally{li()}}function ii(){ti++}function ai(){ti--}function li(){var e;for(ai();!ti&&void 0!==(e=ei.shift());)ni(e)}var ui=function(e){return function(t){return e.some((function(e){return pi(e)(t)}))}},si=function(e){return function(t){return e(t)}},ci=function(e){return function(t){return t.type===String(e)}},fi=function(e){return function(t){return t.type===e}},di=function(){return _o};function pi(e){var t="*"===e?di:po(e)?ci:ho(e)?ui:bo(e)?ci:fo(e)?si:wo(e)?fi:null;if(null===t)throw new Error("invalid pattern: "+e);return t(e)}var hi={type:Jr},gi=function(e){return e&&e.type===Jr};function mi(){var e,t,n,r,o,i,a=(t=!1,r=n=[],o=function(){r===n&&(r=n.slice())},i=function(){t=!0;var e=n=r;r=[],e.forEach((function(e){e(hi)}))},(e={})[to]=!0,e.put=function(e){if(!t)if(gi(e))i();else for(var o=n=r,a=0,l=o.length;a<l;a++){var u=o[a];u[eo](e)&&(u.cancel(),u(e))}},e.take=function(e,n){var i;void 0===n&&(n=di),t?e(hi):(e[eo]=n,o(),r.push(e),e.cancel=(i=!1,function(){i||(i=!0,o(),Co(r,e))}))},e.close=i,e),l=a.put;return a.put=function(e){e[no]?l(e):ri((function(){l(e)}))},a}var yi=0,vi=1,bi=2,wi=3;function Si(e,t){var n=e[Xr];fo(n)&&(t.cancel=n),e.then(t,(function(e){t(e,!0)}))}var ki,_i=0,xi=function(){return++_i};function Ei(e){e.isRunning()&&e.cancel()}var Oi=((ki={})[$o]=function(e,t,n){var r=t.channel,o=void 0===r?e.channel:r,i=t.pattern,a=t.maybe,l=function(e){e instanceof Error?n(e,!0):!gi(e)||a?n(e):n(ao)};try{o.take(l,co(i)?pi(i):null)}catch(e){return void n(e,!0)}n.cancel=l.cancel},ki[qo]=function(e,t,n){var r=t.channel,o=t.action,i=t.resolve;ri((function(){var t;try{t=(r?r.put:e.dispatch)(o)}catch(e){return void n(e,!0)}i&&go(t)?Si(t,n):n(t)}))},ki.ALL=function(e,t,n,r){var o=r.digestEffect,i=_i,a=Object.keys(t);if(0!==a.length){var l=zo(t,n);a.forEach((function(e){o(t[e],i,l[e],e)}))}else n(ho(t)?[]:{})},ki.RACE=function(e,t,n,r){var o=r.digestEffect,i=_i,a=Object.keys(t),l=ho(t)?No(a.length):{},u={},s=!1;a.forEach((function(e){var t=function(t,r){s||(r||Do(t)?(n.cancel(),n(t,r)):(n.cancel(),s=!0,l[e]=t,n(l)))};t.cancel=xo,u[e]=t})),n.cancel=function(){s||(s=!0,a.forEach((function(e){return u[e].cancel()})))},a.forEach((function(e){s||o(t[e],i,u[e],e)}))},ki[Wo]=function(e,t,n,r){var o=t.context,i=t.fn,a=t.args,l=r.task;try{var u=i.apply(o,a);if(go(u))return void Si(u,n);if(mo(u))return void Di(e,u,l.context,_i,Mo(i),!1,n);n(u)}catch(e){n(e,!0)}},ki.CPS=function(e,t,n){var r=t.context,o=t.fn,i=t.args;try{var a=function(e,t){so(e)?n(t):n(e,!0)};o.apply(r,i.concat(a)),a.cancel&&(n.cancel=a.cancel)}catch(e){n(e,!0)}},ki[Ho]=function(e,t,n,r){var o=t.context,i=t.fn,a=t.args,l=t.detached,u=r.task,s=function(e){var t=e.context,n=e.fn,r=e.args;try{var o=n.apply(t,r);if(mo(o))return o;var i=!1;return Ao((function(e){return i?{value:e,done:!0}:(i=!0,{value:o,done:!go(o)})}))}catch(e){return Ao((function(){throw e}))}}({context:o,fn:i,args:a}),c=function(e,t){return e.isSagaIterator?{name:e.meta.name}:Mo(t)}(s,i);oi((function(){var t=Di(e,s,u.context,_i,c,l,void 0);l?n(t):t.isRunning()?(u.queue.addTask(t),n(t)):t.isAborted()?u.queue.abort(t.error()):n(t)}))},ki.JOIN=function(e,t,n,r){var o=r.task,i=function(e,t){if(e.isRunning()){var n={task:o,cb:t};t.cancel=function(){e.isRunning()&&Co(e.joiners,n)},e.joiners.push(n)}else e.isAborted()?t(e.error(),!0):t(e.result())};if(ho(t)){if(0===t.length)return void n([]);var a=zo(t,n);t.forEach((function(e,t){i(e,a[t])}))}else i(t,n)},ki[Vo]=function(e,t,n,r){var o=r.task;t===ro?Ei(o):ho(t)?t.forEach(Ei):Ei(t),n()},ki.SELECT=function(e,t,n){var r=t.selector,o=t.args;try{n(r.apply(void 0,[e.getState()].concat(o)))}catch(e){n(e,!0)}},ki.ACTION_CHANNEL=function(e,t,n){var r=t.pattern,o=function(e){void 0===e&&(e=Bo());var t=!1,n=[];return{take:function(r){t&&e.isEmpty()?r(hi):e.isEmpty()?(n.push(r),r.cancel=function(){Co(n,r)}):r(e.take())},put:function(r){if(!t){if(0===n.length)return e.put(r);n.shift()(r)}},flush:function(n){t&&e.isEmpty()?n(hi):n(e.flush())},close:function(){if(!t){t=!0;var e=n;n=[];for(var r=0,o=e.length;r<o;r++)(0,e[r])(hi)}}}}(t.buffer),i=pi(r),a=function t(n){gi(n)||e.channel.take(t,i),o.put(n)},l=o.close;o.close=function(){a.cancel(),l()},e.channel.take(a,i),n(o)},ki.CANCELLED=function(e,t,n,r){n(r.task.isCancelled())},ki.FLUSH=function(e,t,n){t.flush(n)},ki.GET_CONTEXT=function(e,t,n,r){n(r.task.context[t])},ki.SET_CONTEXT=function(e,t,n,r){var o=r.task;Oo(o.context,t),n()},ki);function Ci(e,t){return e+"?"+t}function Pi(e){var t=e.name,n=e.location;return n?t+"  "+Ci(n.fileName,n.lineNumber):t}function ji(e){var t,n,r,o=(t=function(e){return e.cancelledTasks},n=e,(r=[]).concat.apply(r,n.map(t)));return o.length?["Tasks cancelled due to error:"].concat(o).join("\n"):""}var Ai=null,Ti=[],Ni=function(e){e.crashedEffect=Ai,Ti.push(e)},Ri=function(){Ai=null,Ti.length=0},Ii=function(e){Ai=e},Li=function(){var e,t,n=Ti[0],r=Ti.slice(1),o=n.crashedEffect?(e=n.crashedEffect,(t=Fo(e))?t.code+"  "+Ci(t.fileName,t.lineNumber):""):null;return["The above error occurred in task "+Pi(n.meta)+(o?" \n when executing effect "+o:"")].concat(r.map((function(e){return"    created by "+Pi(e.meta)})),[ji(Ti)]).join("\n")};function Di(e,t,n,r,o,i,a){var l=e.finalizeRunEffect((function(t,n,r){go(t)?Si(t,r):mo(t)?Di(e,t,s.context,n,o,!1,r):t&&t[Zr]?(0,Oi[t.type])(e,t.payload,r,c):r(t)}));f.cancel=xo;var u={meta:o,cancel:function(){u.status===yi&&(u.status=vi,f(io))},status:yi},s=function(e,t,n,r,o,i,a){var l;void 0===a&&(a=xo);var u,s,c=yi,f=null,d=[],p=Object.create(n),h=function(e,t,n){var r,o=[],i=!1;function a(e){t(),u(),n(e,!0)}function l(t){o.push(t),t.cont=function(l,u){i||(Co(o,t),t.cont=xo,u?a(l):(t===e&&(r=l),o.length||(i=!0,n(r))))}}function u(){i||(i=!0,o.forEach((function(e){e.cont=xo,e.cancel()})),o=[])}return l(e),{addTask:l,cancelAll:u,abort:a,getTasks:function(){return o}}}(t,(function(){d.push.apply(d,h.getTasks().map((function(e){return e.meta.name})))}),g);function g(t,n){if(n){if(c=bi,Ni({meta:o,cancelledTasks:d}),m.isRoot){var r=Li();Ri(),e.onError(t,{sagaStack:r})}s=t,f&&f.reject(t)}else t===io?c=vi:c!==vi&&(c=wi),u=t,f&&f.resolve(t);m.cont(t,n),m.joiners.forEach((function(e){e.cb(t,n)})),m.joiners=null}var m=((l={})[oo]=!0,l.id=r,l.meta=o,l.isRoot=i,l.context=p,l.joiners=[],l.queue=h,l.cancel=function(){c===yi&&(c=vi,h.cancelAll(),g(io,!1))},l.cont=a,l.end=g,l.setContext=function(e){Oo(p,e)},l.toPromise=function(){return f||(f=Zo(),c===bi?f.reject(s):c!==yi&&f.resolve(u)),f.promise},l.isRunning=function(){return c===yi},l.isCancelled=function(){return c===vi||c===yi&&t.status===vi},l.isAborted=function(){return c===bi},l.result=function(){return u},l.error=function(){return s},l);return m}(e,u,n,r,o,i,a),c={task:s,digestEffect:d};return a&&(a.cancel=s.cancel),f(),s;function f(e,n){try{var o;n?(o=t.throw(e),Ri()):Lo(e)?(u.status=vi,f.cancel(),o=fo(t.return)?t.return(io):{done:!0,value:io}):o=Io(e)?fo(t.return)?t.return():{done:!0}:t.next(e),o.done?(u.status!==vi&&(u.status=wi),u.cont(o.value)):d(o.value,r,f)}catch(e){if(u.status===vi)throw e;u.status=bi,u.cont(e,!0)}}function d(t,n,r,o){void 0===o&&(o="");var i,a=xi();function u(n,o){i||(i=!0,r.cancel=xo,e.sagaMonitor&&(o?e.sagaMonitor.effectRejected(a,n):e.sagaMonitor.effectResolved(a,n)),o&&Ii(t),r(n,o))}e.sagaMonitor&&e.sagaMonitor.effectTriggered({effectId:a,parentEffectId:n,label:o,effect:t}),u.cancel=xo,r.cancel=function(){i||(i=!0,u.cancel(),u.cancel=xo,e.sagaMonitor&&e.sagaMonitor.effectCancelled(a))},l(t,a,u)}}function zi(e,t){for(var n=e.channel,r=void 0===n?mi():n,o=e.dispatch,i=e.getState,a=e.context,l=void 0===a?{}:a,u=e.sagaMonitor,s=e.effectMiddlewares,c=e.onError,f=void 0===c?To:c,d=arguments.length,p=new Array(d>2?d-2:0),h=2;h<d;h++)p[h-2]=arguments[h];var g,m=t.apply(void 0,p),y=xi();if(u&&(u.rootSagaStarted=u.rootSagaStarted||xo,u.effectTriggered=u.effectTriggered||xo,u.effectResolved=u.effectResolved||xo,u.effectRejected=u.effectRejected||xo,u.effectCancelled=u.effectCancelled||xo,u.actionDispatched=u.actionDispatched||xo,u.rootSagaStarted({effectId:y,saga:t,args:p})),s){var v=gn.apply(void 0,s);g=function(e){return function(t,n,r){return v((function(t){return e(t,n,r)}))(t)}}}else g=Eo;var b={channel:r,dispatch:Ro(o),getState:i,sagaMonitor:u,onError:f,finalizeRunEffect:g};return oi((function(){var e=Di(b,m,l,y,Mo(t),!0,void 0);return u&&u.effectResolved(y,e),e}))}const Mi=function(e){var t,n=void 0===e?{}:e,r=n.context,o=void 0===r?{}:r,i=n.channel,a=void 0===i?mi():i,l=n.sagaMonitor,u=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["context","channel","sagaMonitor"]);function s(e){var n=e.getState,r=e.dispatch;return t=zi.bind(null,uo({},u,{context:o,channel:a,dispatch:r,getState:n,sagaMonitor:l})),function(e){return function(t){l&&l.actionDispatched&&l.actionDispatched(t);var n=e(t);return a.put(t),n}}}return s.run=function(){return t.apply(void 0,arguments)},s.setContext=function(e){Oo(o,e)},s};var Fi=function(e){return{done:!0,value:e}},Ui={};function Bi(e){return vo(e)?"channel":bo(e)?String(e):fo(e)?e.name:String(e)}function $i(e,t,n){var r,o,i,a=t;function l(t,n){if(a===Ui)return Fi(t);if(n&&!o)throw a=Ui,n;r&&r(t);var l=n?e[o](n):e[a]();return a=l.nextState,i=l.effect,r=l.stateUpdater,o=l.errorState,a===Ui?Fi(t):i}return Ao(l,(function(e){return l(null,e)}),n)}function qi(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var i,a={done:!1,value:Go(e)},l=function(e){return i=e};return $i({q1:function(){return{nextState:"q2",effect:a,stateUpdater:l}},q2:function(){return{nextState:"q1",effect:(e=i,{done:!1,value:Jo.apply(void 0,[t].concat(r,[e]))})};var e}},"q1","takeEvery("+Bi(e)+", "+t.name+")")}function Wi(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var i,a,l={done:!1,value:Go(e)},u=function(e){return{done:!1,value:Jo.apply(void 0,[t].concat(r,[e]))}},s=function(e){return{done:!1,value:(t=e,void 0===t&&(t=ro),Ko(Vo,t))};var t},c=function(e){return i=e},f=function(e){return a=e};return $i({q1:function(){return{nextState:"q2",effect:l,stateUpdater:f}},q2:function(){return i?{nextState:"q3",effect:s(i)}:{nextState:"q1",effect:u(a),stateUpdater:c}},q3:function(){return{nextState:"q1",effect:u(a),stateUpdater:c}}},"q1","takeLatest("+Bi(e)+", "+t.name+")")}function Hi(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];return Jo.apply(void 0,[qi,e,t].concat(r))}function Vi(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];return Jo.apply(void 0,[Wi,e,t].concat(r))}function Ki(e,t){return function(){return e.apply(t,arguments)}}const{toString:Gi}=Object.prototype,{getPrototypeOf:Qi}=Object,Yi=(Xi=Object.create(null),e=>{const t=Gi.call(e);return Xi[t]||(Xi[t]=t.slice(8,-1).toLowerCase())});var Xi;const Ji=e=>(e=e.toLowerCase(),t=>Yi(t)===e),Zi=e=>t=>typeof t===e,{isArray:ea}=Array,ta=Zi("undefined"),na=Ji("ArrayBuffer"),ra=Zi("string"),oa=Zi("function"),ia=Zi("number"),aa=e=>null!==e&&"object"==typeof e,la=e=>{if("object"!==Yi(e))return!1;const t=Qi(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},ua=Ji("Date"),sa=Ji("File"),ca=Ji("Blob"),fa=Ji("FileList"),da=Ji("URLSearchParams");function pa(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),ea(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),i=o.length;let a;for(r=0;r<i;r++)a=o[r],t.call(null,e[a],a,e)}}function ha(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const ga="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,ma=e=>!ta(e)&&e!==ga,ya=(va="undefined"!=typeof Uint8Array&&Qi(Uint8Array),e=>va&&e instanceof va);var va;const ba=Ji("HTMLFormElement"),wa=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),Sa=Ji("RegExp"),ka=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};pa(n,((n,o)=>{!1!==t(n,o,e)&&(r[o]=n)})),Object.defineProperties(e,r)},_a="abcdefghijklmnopqrstuvwxyz",xa="0123456789",Ea={DIGIT:xa,ALPHA:_a,ALPHA_DIGIT:_a+_a.toUpperCase()+xa},Oa={isArray:ea,isArrayBuffer:na,isBuffer:function(e){return null!==e&&!ta(e)&&null!==e.constructor&&!ta(e.constructor)&&oa(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{const t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||Gi.call(e)===t||oa(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&na(e.buffer),t},isString:ra,isNumber:ia,isBoolean:e=>!0===e||!1===e,isObject:aa,isPlainObject:la,isUndefined:ta,isDate:ua,isFile:sa,isBlob:ca,isRegExp:Sa,isFunction:oa,isStream:e=>aa(e)&&oa(e.pipe),isURLSearchParams:da,isTypedArray:ya,isFileList:fa,forEach:pa,merge:function e(){const{caseless:t}=ma(this)&&this||{},n={},r=(r,o)=>{const i=t&&ha(n,o)||o;la(n[i])&&la(r)?n[i]=e(n[i],r):la(r)?n[i]=e({},r):ea(r)?n[i]=r.slice():n[i]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&pa(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(pa(t,((t,r)=>{n&&oa(t)?e[r]=Ki(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,i,a;const l={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),i=o.length;i-- >0;)a=o[i],r&&!r(a,e,t)||l[a]||(t[a]=e[a],l[a]=!0);e=!1!==n&&Qi(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:Yi,kindOfTest:Ji,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(ea(e))return e;let t=e.length;if(!ia(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:ba,hasOwnProperty:wa,hasOwnProp:wa,reduceDescriptors:ka,freezeMethods:e=>{ka(e,((t,n)=>{if(oa(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];oa(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return ea(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:ha,global:ga,isContextDefined:ma,ALPHABET:Ea,generateString:(e=16,t=Ea.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&oa(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(aa(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=ea(e)?[]:{};return pa(e,((e,t)=>{const i=n(e,r+1);!ta(i)&&(o[t]=i)})),t[r]=void 0,o}}return e};return n(e,0)}};function Ca(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}Oa.inherits(Ca,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Oa.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Pa=Ca.prototype,ja={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{ja[e]={value:e}})),Object.defineProperties(Ca,ja),Object.defineProperty(Pa,"isAxiosError",{value:!0}),Ca.from=(e,t,n,r,o,i)=>{const a=Object.create(Pa);return Oa.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),Ca.call(a,e.message,t,n,r,o),a.cause=e,a.name=e.name,i&&Object.assign(a,i),a};const Aa=Ca;function Ta(e){return Oa.isPlainObject(e)||Oa.isArray(e)}function Na(e){return Oa.endsWith(e,"[]")?e.slice(0,-2):e}function Ra(e,t,n){return e?e.concat(t).map((function(e,t){return e=Na(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const Ia=Oa.toFlatObject(Oa,{},null,(function(e){return/^is[A-Z]/.test(e)})),La=function(e,t,n){if(!Oa.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=Oa.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!Oa.isUndefined(t[e])}))).metaTokens,o=n.visitor||s,i=n.dots,a=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&Oa.isSpecCompliantForm(t);if(!Oa.isFunction(o))throw new TypeError("visitor must be a function");function u(e){if(null===e)return"";if(Oa.isDate(e))return e.toISOString();if(!l&&Oa.isBlob(e))throw new Aa("Blob is not supported. Use a Buffer instead.");return Oa.isArrayBuffer(e)||Oa.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function s(e,n,o){let l=e;if(e&&!o&&"object"==typeof e)if(Oa.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(Oa.isArray(e)&&function(e){return Oa.isArray(e)&&!e.some(Ta)}(e)||(Oa.isFileList(e)||Oa.endsWith(n,"[]"))&&(l=Oa.toArray(e)))return n=Na(n),l.forEach((function(e,r){!Oa.isUndefined(e)&&null!==e&&t.append(!0===a?Ra([n],r,i):null===a?n:n+"[]",u(e))})),!1;return!!Ta(e)||(t.append(Ra(o,n,i),u(e)),!1)}const c=[],f=Object.assign(Ia,{defaultVisitor:s,convertValue:u,isVisitable:Ta});if(!Oa.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!Oa.isUndefined(n)){if(-1!==c.indexOf(n))throw Error("Circular reference detected in "+r.join("."));c.push(n),Oa.forEach(n,(function(n,i){!0===(!(Oa.isUndefined(n)||null===n)&&o.call(t,n,Oa.isString(i)?i.trim():i,r,f))&&e(n,r?r.concat(i):[i])})),c.pop()}}(e),t};function Da(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function za(e,t){this._pairs=[],e&&La(e,this,t)}const Ma=za.prototype;Ma.append=function(e,t){this._pairs.push([e,t])},Ma.toString=function(e){const t=e?function(t){return e.call(this,t,Da)}:Da;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const Fa=za;function Ua(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ba(e,t,n){if(!t)return e;const r=n&&n.encode||Ua,o=n&&n.serialize;let i;if(i=o?o(t,n):Oa.isURLSearchParams(t)?t.toString():new Fa(t,n).toString(r),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}const $a=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Oa.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},qa={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Wa={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Fa,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},isStandardBrowserEnv:(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),isStandardBrowserWebWorkerEnv:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,protocols:["http","https","file","blob","url","data"]},Ha=function(e){function t(e,n,r,o){let i=e[o++];const a=Number.isFinite(+i),l=o>=e.length;return i=!i&&Oa.isArray(r)?r.length:i,l?(Oa.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!a):(r[i]&&Oa.isObject(r[i])||(r[i]=[]),t(e,n,r[i],o)&&Oa.isArray(r[i])&&(r[i]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let i;for(r=0;r<o;r++)i=n[r],t[i]=e[i];return t}(r[i])),!a)}if(Oa.isFormData(e)&&Oa.isFunction(e.entries)){const n={};return Oa.forEachEntry(e,((e,r)=>{t(function(e){return Oa.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},Va={"Content-Type":void 0},Ka={transitional:qa,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=Oa.isObject(e);if(o&&Oa.isHTMLForm(e)&&(e=new FormData(e)),Oa.isFormData(e))return r&&r?JSON.stringify(Ha(e)):e;if(Oa.isArrayBuffer(e)||Oa.isBuffer(e)||Oa.isStream(e)||Oa.isFile(e)||Oa.isBlob(e))return e;if(Oa.isArrayBufferView(e))return e.buffer;if(Oa.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return La(e,new Wa.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return Wa.isNode&&Oa.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=Oa.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return La(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(Oa.isString(e))try{return(0,JSON.parse)(e),Oa.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||Ka.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&Oa.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw Aa.from(e,Aa.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Wa.classes.FormData,Blob:Wa.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};Oa.forEach(["delete","get","head"],(function(e){Ka.headers[e]={}})),Oa.forEach(["post","put","patch"],(function(e){Ka.headers[e]=Oa.merge(Va)}));const Ga=Ka,Qa=Oa.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Ya=Symbol("internals");function Xa(e){return e&&String(e).trim().toLowerCase()}function Ja(e){return!1===e||null==e?e:Oa.isArray(e)?e.map(Ja):String(e)}function Za(e,t,n,r,o){return Oa.isFunction(r)?r.call(this,t,n):(o&&(t=n),Oa.isString(t)?Oa.isString(r)?-1!==t.indexOf(r):Oa.isRegExp(r)?r.test(t):void 0:void 0)}class el{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=Xa(t);if(!o)throw new Error("header name must be a non-empty string");const i=Oa.findKey(r,o);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||t]=Ja(e))}const i=(e,t)=>Oa.forEach(e,((e,n)=>o(e,n,t)));return Oa.isPlainObject(e)||e instanceof this.constructor?i(e,t):Oa.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?i((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&Qa[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=Xa(e)){const n=Oa.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(Oa.isFunction(t))return t.call(this,e,n);if(Oa.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Xa(e)){const n=Oa.findKey(this,e);return!(!n||void 0===this[n]||t&&!Za(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=Xa(e)){const o=Oa.findKey(n,e);!o||t&&!Za(0,n[o],o,t)||(delete n[o],r=!0)}}return Oa.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!Za(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return Oa.forEach(this,((r,o)=>{const i=Oa.findKey(n,o);if(i)return t[i]=Ja(r),void delete t[o];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();a!==o&&delete t[o],t[a]=Ja(r),n[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return Oa.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&Oa.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[Ya]=this[Ya]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=Xa(e);t[r]||(function(e,t){const n=Oa.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return Oa.isArray(e)?e.forEach(r):r(e),this}}el.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Oa.freezeMethods(el.prototype),Oa.freezeMethods(el);const tl=el;function nl(e,t){const n=this||Ga,r=t||n,o=tl.from(r.headers);let i=r.data;return Oa.forEach(e,(function(e){i=e.call(n,i,o.normalize(),t?t.status:void 0)})),o.normalize(),i}function rl(e){return!(!e||!e.__CANCEL__)}function ol(e,t,n){Aa.call(this,null==e?"canceled":e,Aa.ERR_CANCELED,t,n),this.name="CanceledError"}Oa.inherits(ol,Aa,{__CANCEL__:!0});const il=ol,al=Wa.isStandardBrowserEnv?{write:function(e,t,n,r,o,i){const a=[];a.push(e+"="+encodeURIComponent(t)),Oa.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),Oa.isString(r)&&a.push("path="+r),Oa.isString(o)&&a.push("domain="+o),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function ll(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const ul=Wa.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=Oa.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function sl(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,i=0,a=0;return t=void 0!==t?t:1e3,function(l){const u=Date.now(),s=r[a];o||(o=u),n[i]=l,r[i]=u;let c=a,f=0;for(;c!==i;)f+=n[c++],c%=e;if(i=(i+1)%e,i===a&&(a=(a+1)%e),u-o<t)return;const d=s&&u-s;return d?Math.round(1e3*f/d):void 0}}(50,250);return o=>{const i=o.loaded,a=o.lengthComputable?o.total:void 0,l=i-n,u=r(l);n=i;const s={loaded:i,total:a,progress:a?i/a:void 0,bytes:l,rate:u||void 0,estimated:u&&a&&i<=a?(a-i)/u:void 0,event:o};s[t?"download":"upload"]=!0,e(s)}}const cl="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=tl.from(e.headers).normalize(),i=e.responseType;let a;function l(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}Oa.isFormData(r)&&(Wa.isStandardBrowserEnv||Wa.isStandardBrowserWebWorkerEnv)&&o.setContentType(!1);let u=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const s=ll(e.baseURL,e.url);function c(){if(!u)return;const r=tl.from("getAllResponseHeaders"in u&&u.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new Aa("Request failed with status code "+n.status,[Aa.ERR_BAD_REQUEST,Aa.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),l()}),(function(e){n(e),l()}),{data:i&&"text"!==i&&"json"!==i?u.response:u.responseText,status:u.status,statusText:u.statusText,headers:r,config:e,request:u}),u=null}if(u.open(e.method.toUpperCase(),Ba(s,e.params,e.paramsSerializer),!0),u.timeout=e.timeout,"onloadend"in u?u.onloadend=c:u.onreadystatechange=function(){u&&4===u.readyState&&(0!==u.status||u.responseURL&&0===u.responseURL.indexOf("file:"))&&setTimeout(c)},u.onabort=function(){u&&(n(new Aa("Request aborted",Aa.ECONNABORTED,e,u)),u=null)},u.onerror=function(){n(new Aa("Network Error",Aa.ERR_NETWORK,e,u)),u=null},u.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||qa;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new Aa(t,r.clarifyTimeoutError?Aa.ETIMEDOUT:Aa.ECONNABORTED,e,u)),u=null},Wa.isStandardBrowserEnv){const t=(e.withCredentials||ul(s))&&e.xsrfCookieName&&al.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in u&&Oa.forEach(o.toJSON(),(function(e,t){u.setRequestHeader(t,e)})),Oa.isUndefined(e.withCredentials)||(u.withCredentials=!!e.withCredentials),i&&"json"!==i&&(u.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&u.addEventListener("progress",sl(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&u.upload&&u.upload.addEventListener("progress",sl(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{u&&(n(!t||t.type?new il(null,e,u):t),u.abort(),u=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const f=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(s);f&&-1===Wa.protocols.indexOf(f)?n(new Aa("Unsupported protocol "+f+":",Aa.ERR_BAD_REQUEST,e)):u.send(r||null)}))},fl={http:null,xhr:cl};Oa.forEach(fl,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));function dl(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new il(null,e)}function pl(e){return dl(e),e.headers=tl.from(e.headers),e.data=nl.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),(e=>{e=Oa.isArray(e)?e:[e];const{length:t}=e;let n,r;for(let o=0;o<t&&(n=e[o],!(r=Oa.isString(n)?fl[n.toLowerCase()]:n));o++);if(!r){if(!1===r)throw new Aa(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT");throw new Error(Oa.hasOwnProp(fl,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`)}if(!Oa.isFunction(r))throw new TypeError("adapter is not a function");return r})(e.adapter||Ga.adapter)(e).then((function(t){return dl(e),t.data=nl.call(e,e.transformResponse,t),t.headers=tl.from(t.headers),t}),(function(t){return rl(t)||(dl(e),t&&t.response&&(t.response.data=nl.call(e,e.transformResponse,t.response),t.response.headers=tl.from(t.response.headers))),Promise.reject(t)}))}const hl=e=>e instanceof tl?e.toJSON():e;function gl(e,t){t=t||{};const n={};function r(e,t,n){return Oa.isPlainObject(e)&&Oa.isPlainObject(t)?Oa.merge.call({caseless:n},e,t):Oa.isPlainObject(t)?Oa.merge({},t):Oa.isArray(t)?t.slice():t}function o(e,t,n){return Oa.isUndefined(t)?Oa.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function i(e,t){if(!Oa.isUndefined(t))return r(void 0,t)}function a(e,t){return Oa.isUndefined(t)?Oa.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,i){return i in t?r(n,o):i in e?r(void 0,n):void 0}const u={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:l,headers:(e,t)=>o(hl(e),hl(t),!0)};return Oa.forEach(Object.keys(e).concat(Object.keys(t)),(function(r){const i=u[r]||o,a=i(e[r],t[r],r);Oa.isUndefined(a)&&i!==l||(n[r]=a)})),n}const ml={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{ml[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const yl={};ml.transitional=function(e,t,n){function r(e,t){return"[Axios v1.3.5] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,i)=>{if(!1===e)throw new Aa(r(o," has been removed"+(t?" in "+t:"")),Aa.ERR_DEPRECATED);return t&&!yl[o]&&(yl[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,i)}};const vl={assertOptions:function(e,t,n){if("object"!=typeof e)throw new Aa("options must be an object",Aa.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const i=r[o],a=t[i];if(a){const t=e[i],n=void 0===t||a(t,i,e);if(!0!==n)throw new Aa("option "+i+" must be "+n,Aa.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new Aa("Unknown option "+i,Aa.ERR_BAD_OPTION)}},validators:ml},bl=vl.validators;class wl{constructor(e){this.defaults=e,this.interceptors={request:new $a,response:new $a}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=gl(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;let i;void 0!==n&&vl.assertOptions(n,{silentJSONParsing:bl.transitional(bl.boolean),forcedJSONParsing:bl.transitional(bl.boolean),clarifyTimeoutError:bl.transitional(bl.boolean)},!1),null!=r&&(Oa.isFunction(r)?t.paramsSerializer={serialize:r}:vl.assertOptions(r,{encode:bl.function,serialize:bl.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase(),i=o&&Oa.merge(o.common,o[t.method]),i&&Oa.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=tl.concat(i,o);const a=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const u=[];let s;this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)}));let c,f=0;if(!l){const e=[pl.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,u),c=e.length,s=Promise.resolve(t);f<c;)s=s.then(e[f++],e[f++]);return s}c=a.length;let d=t;for(f=0;f<c;){const e=a[f++],t=a[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{s=pl.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,c=u.length;f<c;)s=s.then(u[f++],u[f++]);return s}getUri(e){return Ba(ll((e=gl(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}Oa.forEach(["delete","get","head","options"],(function(e){wl.prototype[e]=function(t,n){return this.request(gl(n||{},{method:e,url:t,data:(n||{}).data}))}})),Oa.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(gl(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}wl.prototype[e]=t(),wl.prototype[e+"Form"]=t(!0)}));const Sl=wl;class kl{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new il(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;const t=new kl((function(t){e=t}));return{token:t,cancel:e}}}const _l=kl,xl={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(xl).forEach((([e,t])=>{xl[t]=e}));const El=xl,Ol=function e(t){const n=new Sl(t),r=Ki(Sl.prototype.request,n);return Oa.extend(r,Sl.prototype,n,{allOwnKeys:!0}),Oa.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(gl(t,n))},r}(Ga);Ol.Axios=Sl,Ol.CanceledError=il,Ol.CancelToken=_l,Ol.isCancel=rl,Ol.VERSION="1.3.5",Ol.toFormData=La,Ol.AxiosError=Aa,Ol.Cancel=Ol.CanceledError,Ol.all=function(e){return Promise.all(e)},Ol.spread=function(e){return function(t){return e.apply(null,t)}},Ol.isAxiosError=function(e){return Oa.isObject(e)&&!0===e.isAxiosError},Ol.mergeConfig=gl,Ol.AxiosHeaders=tl,Ol.formToJSON=e=>Ha(Oa.isHTMLForm(e)?new FormData(e):e),Ol.HttpStatusCode=El,Ol.default=Ol;const Cl=Ol;var Pl,jl=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}u((r=r.apply(e,t||[])).next())}))},Al=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}},Tl="api.open-meteo.com",Nl=Cl.create({baseURL:"https://".concat(Tl,"/v1/forecast"),params:{timezone:"Europe/Moscow",timeformat:"unixtime"}}),Rl={getHourlyWeather:function(e,t){return jl(this,void 0,void 0,(function(){return Al(this,(function(n){switch(n.label){case 0:return[4,Nl.get("",{params:{longitude:e,latitude:t,hourly:["temperature_2m","weathercode"].join(","),forecast_days:1}})];case 1:return[2,n.sent().data]}}))}))},getDailyWeather:function(e,t){return jl(this,void 0,void 0,(function(){return Al(this,(function(n){switch(n.label){case 0:return[4,Nl.get("",{params:{longitude:e,latitude:t,daily:["weathercode","temperature_2m_max","temperature_2m_min"].join(",")}})];case 1:return[2,n.sent().data]}}))}))},searchCityByName:function(e){return jl(this,void 0,void 0,(function(){return Al(this,(function(t){switch(t.label){case 0:return[4,Cl.get("https://geocoding-".concat(Tl,"/v1/search"),{params:{name:e}})];case 1:return[2,t.sent().data]}}))}))}},Il=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}u((r=r.apply(e,t||[])).next())}))},Ll=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}},Dl=Cl.create({baseURL:"https://api.openweathermap.org/data/2.5",params:{appid:"aebbeabbc9b460ceaa8d3cd753952c38",units:"metric"}}),zl={getTodayWeatherByCityName:function(e){return Il(this,void 0,void 0,(function(){return Ll(this,(function(t){switch(t.label){case 0:return[4,Dl.get("/weather",{params:{q:e}})];case 1:return[2,t.sent().data]}}))}))},getTodayWeatherByCoords:function(e,t){return Il(this,void 0,void 0,(function(){return Ll(this,(function(n){switch(n.label){case 0:return[4,Dl.get("/weather",{params:{lat:t,lon:e}})];case 1:return[2,n.sent().data]}}))}))}},Ml=$r({name:"todayWeather",initialState:{weather:null,loadingStatus:ft.IDLE},reducers:{fetchTodayWeather:function(e,t){},setTodayWeather:function(e,t){e.weather=t.payload},setTodayLoadingStatus:function(e,t){e.loadingStatus=t.payload}}}),Fl=(Pl=Ml.actions).setTodayWeather,Ul=Pl.setTodayLoadingStatus,Bl=Pl.fetchTodayWeather;const $l=Ml.reducer;var ql,Wl=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}};function Hl(e){var t;return Wl(this,(function(n){switch(n.label){case 0:return[4,Qo(Ul(ft.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,Xo(zl.getTodayWeatherByCoords,e.payload.lon,e.payload.lat)];case 3:return t=n.sent(),[4,Qo(Fl(t))];case 4:return n.sent(),[4,Qo(Ul(ft.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,Qo(Ul(ft.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function Vl(){return Wl(this,(function(e){switch(e.label){case 0:return[4,Hi(Bl.type,Hl)];case 1:return e.sent(),[2]}}))}var Kl=$r({name:"hourlyWeather",initialState:{weather:null,loadingStatus:ft.IDLE},reducers:{fetchHourlyWeather:function(e,t){},setHourlyWeather:function(e,t){e.weather=t.payload},setHourlyLoadingStatus:function(e,t){e.loadingStatus=t.payload}}}),Gl=(ql=Kl.actions).fetchHourlyWeather,Ql=ql.setHourlyWeather,Yl=ql.setHourlyLoadingStatus;const Xl=Kl.reducer;var Jl,Zl=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}};function eu(e){var t;return Zl(this,(function(n){switch(n.label){case 0:return[4,Qo(Yl(ft.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,Xo(Rl.getHourlyWeather,e.payload.lon,e.payload.lat)];case 3:return t=n.sent(),[4,Qo(Ql(t))];case 4:return n.sent(),[4,Qo(Yl(ft.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,Qo(Yl(ft.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function tu(){return Zl(this,(function(e){switch(e.label){case 0:return[4,Hi(Gl.type,eu)];case 1:return e.sent(),[2]}}))}var nu=$r({name:"dailyWeather",initialState:{weather:null,loadingStatus:ft.IDLE},reducers:{fetchDailyWeather:function(e,t){},setDailyWeather:function(e,t){e.weather=t.payload},setDailyLoadingStatus:function(e,t){e.loadingStatus=t.payload}}}),ru=(Jl=nu.actions).fetchDailyWeather,ou=Jl.setDailyWeather,iu=Jl.setDailyLoadingStatus;const au=nu.reducer;var lu,uu=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}};function su(e){var t;return uu(this,(function(n){switch(n.label){case 0:return[4,Qo(iu(ft.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,Xo(Rl.getDailyWeather,e.payload.lon,e.payload.lat)];case 3:return t=n.sent(),[4,Qo(ou(t))];case 4:return n.sent(),[4,Qo(iu(ft.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,Qo(iu(ft.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function cu(){return uu(this,(function(e){switch(e.label){case 0:return[4,Hi(ru.type,su)];case 1:return e.sent(),[2]}}))}var fu=$r({name:"city",initialState:{currentCity:null,citySearchResult:null,searchCitiesLoadingStatus:ft.IDLE},reducers:{setCurrentCity:function(e,t){e.currentCity=t.payload},setSearchCitiesLoadingStatus:function(e,t){e.searchCitiesLoadingStatus=t.payload},setCitiesSearchResult:function(e,t){e.citySearchResult=t.payload},fetchCityByName:function(e,t){}}}),du=(lu=fu.actions).setCurrentCity,pu=lu.setSearchCitiesLoadingStatus,hu=lu.setCitiesSearchResult,gu=lu.fetchCityByName;const mu=fu.reducer;var yu=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}};function vu(e){var t;return yu(this,(function(n){switch(n.label){case 0:return[4,Qo(pu(ft.LOADING))];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,6,,8]),[4,Xo(Rl.searchCityByName,e.payload)];case 3:return t=n.sent(),[4,Qo(hu(t))];case 4:return n.sent(),[4,Qo(pu(ft.IDLE))];case 5:return n.sent(),[3,8];case 6:return n.sent(),[4,Qo(pu(ft.ERROR))];case 7:return n.sent(),[3,8];case 8:return[2]}}))}function bu(){return yu(this,(function(e){switch(e.label){case 0:return[4,Vi(gu.type,vu)];case 1:return e.sent(),[2]}}))}var wu=$r({name:"location",initialState:{location:null},reducers:{setLocation:function(e,t){e.location=t.payload}}}),Su=wu.actions.setLocation;const ku=wu.reducer;var _u,xu,Eu,Ou,Cu,Pu,ju,Au,Tu,Nu,Ru=$r({name:"forecastWeather",initialState:{forecastWeatherType:"daily"},reducers:{setForecastWeatherType:function(e,t){e.forecastWeatherType=t.payload}}}),Iu=Ru.actions.setForecastWeatherType,Lu=hn({todayWeather:$l,hourlyWeather:Xl,dailyWeather:au,forecastWeather:Ru.reducer,city:mu,location:ku}),Du=(0,Qr.getPersistConfig)({key:"root",storage:_n.Z,blacklist:[],rootReducer:Lu}),zu=(xu=Lu,Eu=void 0!==(_u=Du).version?_u.version:-1,_u.debug,Ou=void 0===_u.stateReconciler?function(e,t,n,r){r.debug;var o=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Yt(n,!0).forEach((function(t){Xt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Yt(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n);return e&&"object"===Qt(e)&&Object.keys(e).forEach((function(r){"_persist"!==r&&t[r]===n[r]&&(o[r]=e[r])})),o}:_u.stateReconciler,Cu=_u.getStoredState||function(e){var t,n=e.transforms||[],r="".concat(void 0!==e.keyPrefix?e.keyPrefix:$t).concat(e.key),o=e.storage;return e.debug,t=!1===e.deserialize?function(e){return e}:"function"==typeof e.deserialize?e.deserialize:Zt,o.getItem(r).then((function(e){if(e)try{var r={},o=t(e);return Object.keys(o).forEach((function(e){r[e]=n.reduceRight((function(t,n){return n.out(t,e,o)}),t(o[e]))})),r}catch(e){throw e}}))},Pu=void 0!==_u.timeout?_u.timeout:5e3,ju=null,Au=!1,Tu=!0,Nu=function(e){return e._persist.rehydrated&&ju&&!Tu&&ju.update(e),e},function(e,t){var n=e||{},r=n._persist,o=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(n,["_persist"]);if(t.type===Vt){var i=!1,a=function(e,n){i||(t.rehydrate(_u.key,e,n),i=!0)};if(Pu&&setTimeout((function(){!i&&a(void 0,new Error('redux-persist: persist timed out for persist key "'.concat(_u.key,'"')))}),Pu),Tu=!1,ju||(ju=function(e){var t,n=e.blacklist||null,r=e.whitelist||null,o=e.transforms||[],i=e.throttle||0,a="".concat(void 0!==e.keyPrefix?e.keyPrefix:$t).concat(e.key),l=e.storage;t=!1===e.serialize?function(e){return e}:"function"==typeof e.serialize?e.serialize:Jt;var u=e.writeFailHandler||null,s={},c={},f=[],d=null,p=null;function h(){if(0===f.length)return d&&clearInterval(d),void(d=null);var e=f.shift(),n=o.reduce((function(t,n){return n.in(t,e,s)}),s[e]);if(void 0!==n)try{c[e]=t(n)}catch(e){console.error("redux-persist/createPersistoid: error serializing state",e)}else delete c[e];0===f.length&&(Object.keys(c).forEach((function(e){void 0===s[e]&&delete c[e]})),p=l.setItem(a,t(c)).catch(m))}function g(e){return!(r&&-1===r.indexOf(e)&&"_persist"!==e||n&&-1!==n.indexOf(e))}function m(e){u&&u(e)}return{update:function(e){Object.keys(e).forEach((function(t){g(t)&&s[t]!==e[t]&&-1===f.indexOf(t)&&f.push(t)})),Object.keys(s).forEach((function(t){void 0===e[t]&&g(t)&&-1===f.indexOf(t)&&void 0!==s[t]&&f.push(t)})),null===d&&(d=setInterval(h,i)),s=e},flush:function(){for(;0!==f.length;)h();return p||Promise.resolve()}}}(_u)),r)return nn({},xu(o,t),{_persist:r});if("function"!=typeof t.rehydrate||"function"!=typeof t.register)throw new Error("redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.");return t.register(_u.key),Cu(_u).then((function(e){(_u.migrate||function(e,t){return Promise.resolve(e)})(e,Eu).then((function(e){a(e)}),(function(e){a(void 0,e)}))}),(function(e){a(void 0,e)})),nn({},xu(o,t),{_persist:{version:Eu,rehydrated:!1}})}if(t.type===Kt)return Au=!0,t.result(function(e){var t=e.storage,n="".concat(void 0!==e.keyPrefix?e.keyPrefix:$t).concat(e.key);return t.removeItem(n,en)}(_u)),nn({},xu(o,t),{_persist:r});if(t.type===qt)return t.result(ju&&ju.flush()),nn({},xu(o,t),{_persist:r});if(t.type===Ht)Tu=!0;else if(t.type===Wt){if(Au)return nn({},o,{_persist:nn({},r,{rehydrated:!0})});if(t.key===_u.key){var l=xu(o,t),u=t.payload,s=nn({},!1!==Ou&&void 0!==u?Ou(u,e,l,_u):l,{_persist:nn({},r,{rehydrated:!0})});return Nu(s)}}if(!r)return xu(e,t);var c=xu(o,t);return c===o?e:Nu(nn({},c,{_persist:r}))}),Mu=Mi(),Fu=function(e){var t,n=function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new Mr);return n&&(function(e){return"boolean"==typeof e}(n)?r.push(xr):r.push(xr.withExtraArgument(n.extraArgument))),r}(e)},r=e||{},o=r.reducer,i=void 0===o?void 0:o,a=r.middleware,l=void 0===a?n():a,u=r.devTools,s=void 0===u||u,c=r.preloadedState,f=void 0===c?void 0:c,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)t=i;else{if(!function(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=hn(i)}var h=l;"function"==typeof h&&(h=h(n));var g=mn.apply(void 0,h),m=gn;s&&(m=zr(Lr({trace:!1},"object"==typeof s&&s)));var y=[g];return Array.isArray(p)?y=Cr([g],p):"function"==typeof p&&(y=p(y)),pn(t,f,m.apply(void 0,y))}({reducer:zu,middleware:function(e){return e({serializableCheck:{ignoredActions:[qt,Wt,Ht,Vt,Kt,Gt]},sagaMiddleware:Mu}).concat(Mu)}});Mu.run((function(){return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}}(this,(function(e){switch(e.label){case 0:return[4,(t=[Vl(),tu(),cu(),bu()],n=Ko("ALL",t),n.combinator=!0,n)];case 1:return e.sent(),[2]}var t,n}))}));var Uu,Bu,$u,qu,Wu,Hu,Vu,Ku,Gu,Qu,Yu,Xu,Ju,Zu,es,ts,ns,rs,os,is,as,ls,us,ss,cs,fs,ds=function(e,t,n){var r=!1,o=pn(kn,Sn,void 0),i=function(e){o.dispatch({type:Gt,key:e})},a=function(t,n,i){var a={type:Wt,payload:n,err:i,key:t};e.dispatch(a),o.dispatch(a),r&&l.getState().bootstrapped&&(r(),r=!1)},l=bn({},o,{purge:function(){var t=[];return e.dispatch({type:Kt,result:function(e){t.push(e)}}),Promise.all(t)},flush:function(){var t=[];return e.dispatch({type:qt,result:function(e){t.push(e)}}),Promise.all(t)},pause:function(){e.dispatch({type:Ht})},persist:function(){e.dispatch({type:Vt,register:i,rehydrate:a})}});return l.persist(),l}(Fu),ps=function(e){return e.city.searchCitiesLoadingStatus},hs=function(e){return e.city.citySearchResult},gs=function(e){return e.dailyWeather.weather},ms=function(e){return e.dailyWeather.loadingStatus},ys=function(e){return e.forecastWeather.forecastWeatherType},vs=function(e){return e.hourlyWeather.weather},bs=function(e){return e.hourlyWeather.loadingStatus},ws=function(e){return e.location.location},Ss=function(e){return e.todayWeather.weather},ks=function(e){return e.todayWeather.loadingStatus},_s=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},xs=lt.div(Uu||(Uu=_s(["\n\tgrid-area: calendar;\n"],["\n\tgrid-area: calendar;\n"]))),Es=lt.div(Bu||(Bu=_s(["\n\tmargin-top: ","px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\trow-gap: ","px;\n"],["\n\tmargin-top: ","px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\trow-gap: ","px;\n"])),(function(e){return e.theme.margin[0]}),(function(e){return e.theme.gaps[5]})),Os=function(){return Os=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Os.apply(this,arguments)},Cs=function(){var t=function(){var e=(0,l.useState)(!1),t=e[0],n=e[1],r=(0,l.useState)([]),o=r[0],i=r[1];return(0,l.useEffect)((function(){gt.M.load("client:auth2",(function(){gt.M.client.init(mt)}))}),[]),{isAuth:t,events:o,handleAuth:function(){gt.M.load("client:auth2",(function(){return Ft(void 0,void 0,void 0,(function(){var e,t;return Ut(this,(function(r){switch(r.label){case 0:return[4,gt.M.auth2.getAuthInstance().signIn()];case 1:return r.sent(),n(!0),[4,gt.M.client.calendar.events.list(yt)];case 2:return e=r.sent(),t=e.result.items,i(t),[2]}}))}))}))},handleSignOut:function(){gt.M.load("client:auth2",(function(){return Ft(void 0,void 0,void 0,(function(){return Ut(this,(function(e){switch(e.label){case 0:return[4,gt.M.auth2.getAuthInstance().signOut()];case 1:return e.sent(),n(!1),i([]),[2]}}))}))}))}}}(),n=t.isAuth,r=t.events,o=t.handleAuth,i=t.handleSignOut;return(0,e.jsxs)(xs,{children:[n&&(0,e.jsx)(ht,Os({"data-test-id":"calendar-sign-out",onClick:i},{children:"Sign out"})),!n&&(0,e.jsx)(ht,Os({"data-test-id":"calendar-sign-in",onClick:o},{children:"Sign in"})),(0,e.jsx)(Es,{children:r.map((function(t){return(0,e.jsx)(Ns,{event:t},t.id)}))})]})},Ps=function(e){return e.toLocaleString("en-US",bt)},js=function(e){return e.toLocaleString("en-US",wt)},As=function(e){return e.toLocaleString("ru-RU",kt)},Ts=lt.div($u||($u=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n\t/* width: ","%; */\n\tborder-radius: ","px;\n\tpadding: ","px;\n\tfont-size: ","px;\n\tbackground-color: ",";\n\tcolor: ",";\n"],["\n\t/* width: ","%; */\n\tborder-radius: ","px;\n\tpadding: ","px;\n\tfont-size: ","px;\n\tbackground-color: ",";\n\tcolor: ",";\n"])),(function(e){return e.theme.width[2]}),(function(e){return e.theme.borderRadius[1]}),(function(e){return e.theme.padding[4]}),(function(e){return e.theme.fontSize[6]}),(function(e){return e.theme.colors.blue}),(function(e){return e.theme.colors.white})),Ns=function(t){var n=t.event,r=n.start,o=n.end,i=new Date(r.dateTime),a=new Date(o.dateTime);return(0,e.jsxs)(Ts,{children:[(0,e.jsx)("p",{children:n.summary}),(0,e.jsxs)("p",{children:[As(i)," - ",As(a)]})]})},Rs=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Is=lt.p(qu||(qu=Rs(["\n\tcolor: ",";\n\tfont-size: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\ttext-align: center;\n\t}\n"],["\n\tcolor: ",";\n\tfont-size: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\ttext-align: center;\n\t}\n"])),(function(e){return e.theme.colors.black}),(function(e){return e.theme.fontSize[5]}),(function(e){return e.theme.breakpoints.xl})),Ls=lt.div(Wu||(Wu=Rs(["\n\tgrid-area: clock;\n\n\t@media screen and (max-width: ","px) {\n\t\tjustify-self: center;\n\t}\n"],["\n\tgrid-area: clock;\n\n\t@media screen and (max-width: ","px) {\n\t\tjustify-self: center;\n\t}\n"])),(function(e){return e.theme.breakpoints.xl})),Ds=function(){return Ds=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Ds.apply(this,arguments)},zs=function(){var t=function(){var e=(0,l.useState)(new Date),t=e[0],n=e[1],r=(0,l.useRef)(null),o=function(){n(new Date)},i=function(){null!==r.current&&clearInterval(r.current)};return(0,l.useEffect)((function(){return r.current=setInterval(o,1e3),i}),[]),t}();return(0,e.jsxs)(Ls,{children:[(0,e.jsx)(Is,Ds({"data-test-id":"time-clock"},{children:Ps(t)})),(0,e.jsx)(Is,Ds({"data-test-id":"date-clock"},{children:js(t)}))]})},Ms=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Fs=function(t){function n(e){var n=t.call(this,e)||this;return n.state={error:!1},n}return Ms(n,t),n.getDerivedStateFromError=function(){return{error:!0}},n.prototype.componentDidCatch=function(e,t){console.log(e),console.log(t.componentStack)},n.prototype.render=function(){return this.state.error?(0,e.jsx)("h1",{children:"ÐÑÐ¾Ð¸Ð·Ð¾ÑÐ»Ð° Ð¾ÑÐ¸Ð±ÐºÐ°"}):this.props.children},n}(l.Component),Us=lt.p(Hu||(Hu=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(e){return e.theme.fontSize[2]})),Bs=function(){return Bs=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Bs.apply(this,arguments)},$s=function(){var t=p(gs),n=p(ms),r=p(ws),o=_();if((0,l.useEffect)((function(){null!==r&&o(ru(r))}),[r]),n===ft.LOADING)return(0,e.jsx)(xc,{"data-test-id":"daily-weather-spinner",size:vt.LARGE});if(null===t)return null;var i=t.daily,a=i.weathercode,u=i.temperature_2m_max,s=i.temperature_2m_min;return(0,e.jsx)(e.Fragment,{children:null==t?void 0:t.daily.time.map((function(t,n){var r,o=a[n],i=new Date(1e3*t),l=Mt[o],c=l.icon,f=l.description;return(0,e.jsxs)(ec,Bs({timestamp:(r=i,r.toLocaleString("en-US",St)),icon:(0,e.jsx)("img",{src:c,alt:f,title:f})},{children:[(0,e.jsx)(Us,Bs({"data-test-id":"daily-weather-title"},{children:f})),(0,e.jsx)(Us,{children:"Max:"}),(0,e.jsxs)(Us,{children:[u[n],"Â°"]}),(0,e.jsx)(Us,{children:"Min:"}),(0,e.jsxs)(Us,{children:[s[n],"Â°"]})]}),t)}))})},qs=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Ws=lt.p(Vu||(Vu=qs(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(e){return e.theme.fontSize[2]})),Hs=lt.p(Ku||(Ku=qs(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(e){return e.theme.fontSize[0]})),Vs=function(){return Vs=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Vs.apply(this,arguments)},Ks=function(){var t=p(vs),n=p(bs),r=p(ws),o=_();if((0,l.useEffect)((function(){null!==r&&o(Gl(r))}),[r]),n===ft.LOADING)return(0,e.jsx)(xc,{size:vt.LARGE});if(null===t)return null;var i,a,u=t.hourly,s=u.weathercode,c=u.temperature_2m,f=u.time;return(0,e.jsx)(e.Fragment,{children:(i=f,a=new Date,i.map((function(e){return new Date(1e3*e)})).filter((function(e){return e.getHours()>=a.getHours()})).slice(0,7)).map((function(t,n){var r=s[n],o=Mt[r],i=o.icon,a=o.description;return(0,e.jsxs)(ec,Vs({"data-test-id":"hourly-weather-item",timestamp:As(t),icon:(0,e.jsx)("img",{src:i,alt:a,title:a})},{children:[(0,e.jsxs)(Ws,Vs({"data-test-id":"hourly-weather-title"},{children:[c[n],"Â°"]})),(0,e.jsx)(Hs,{children:a})]}),t.getTime())}))})},Gs=lt.div(Gu||(Gu=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n\tgrid-template-rows: 1fr;\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: repeat(auto-fit, minmax(95px, 1fr));\n\t\trow-gap: ","px;\n\t}\n"],["\n\tdisplay: grid;\n\tgrid-template-columns: repeat(7, 1fr);\n\tgrid-template-rows: 1fr;\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: repeat(auto-fit, minmax(95px, 1fr));\n\t\trow-gap: ","px;\n\t}\n"])),(function(e){return e.theme.breakpoints.xl}),(function(e){return e.theme.gaps[0]})),Qs=function(){var t=p(ys);return null===p(ws)?(0,e.jsx)("p",{children:"ÐÑ Ð¾ÑÐºÐ°Ð·Ð°Ð»Ð¸ÑÑ Ð¾Ñ Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ¸ Ð²Ð°ÑÐµÐ¹ Ð³ÐµÐ¾Ð»Ð¾ÐºÐ°ÑÐ¸Ð¸. ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð³Ð¾ÑÐ¾Ð´"}):(0,e.jsxs)(Gs,{children:["daily"===t&&(0,e.jsx)($s,{}),"hourly"===t&&(0,e.jsx)(Ks,{})]})},Ys=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Xs=lt.div(Qu||(Qu=Ys(["\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: 1fr 82px repeat(auto, 1fr);\n\talign-items: center;\n"],["\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: 1fr 82px repeat(auto, 1fr);\n\talign-items: center;\n"]))),Js=lt.p(Yu||(Yu=Ys(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(e){return e.theme.fontSize[2]})),Zs=lt.div(Xu||(Xu=Ys(["\n\tjustify-self: center;\n"],["\n\tjustify-self: center;\n"]))),ec=function(t){var n=t.timestamp,r=t.icon,o=t.children;return(0,e.jsxs)(Xs,{children:[(0,e.jsx)(Js,{children:n}),(0,e.jsx)(Zs,{children:r}),o]})},tc=lt.div(Ju||(Ju=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n\tgrid-area: forecastswitch;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: ","px;\n\tcolumn-gap: ","px;\n"],["\n\tgrid-area: forecastswitch;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: ","px;\n\tcolumn-gap: ","px;\n"])),(function(e){return e.theme.height[0]}),(function(e){return e.theme.gaps[0]})),nc=function(){return nc=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},nc.apply(this,arguments)},rc=function(){var t=_(),n=function(e){return function(){t(Iu(e))}};return(0,e.jsxs)(tc,{children:[(0,e.jsx)(ht,nc({"data-test-id":"set-daily-weather",onClick:n("daily")},{children:"Daily"})),(0,e.jsx)(ht,nc({"data-test-id":"set-hourly-weather",onClick:n("hourly")},{children:"Hourly"}))]})},oc=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},ic=lt.div(Zu||(Zu=oc(["\n\tdisplay: grid;\n\tgrid-template-areas: '. . .' '. main .' '. . .';\n\tgrid-template-columns: auto minmax(0, ","px) auto;\n\tgrid-template-rows: auto auto auto;\n\n\tbackground: url(",") repeat;\n\tbackground-size: cover;\n\n\twidth: ","vw;\n\tmin-height: ","vh;\n"],["\n\tdisplay: grid;\n\tgrid-template-areas: '. . .' '. main .' '. . .';\n\tgrid-template-columns: auto minmax(0, ","px) auto;\n\tgrid-template-rows: auto auto auto;\n\n\tbackground: url(",") repeat;\n\tbackground-size: cover;\n\n\twidth: ","vw;\n\tmin-height: ","vh;\n"])),(function(e){return e.theme.width[1]}),(function(e){return e.background}),(function(e){return e.theme.width[2]}),(function(e){return e.theme.height[2]})),ac=lt.main(es||(es=oc(["\n\tgrid-area: main;\n\trow-gap: ","px;\n\n\tdisplay: grid;\n\tgrid-template-areas:\n\t\t'clock search'\n\t\t'calendar .'\n\t\t'calendar .'\n\t\t'todayswitcher forecastswitch'\n\t\t'weather weather';\n\n\tbackground-color: ",";\n\tbackdrop-filter: blur(","px);\n\n\tpadding: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\tpadding: ","px;\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-template-areas:\n\t\t\t'clock'\n\t\t\t'search'\n\t\t\t'calendar'\n\t\t\t'forecastswitch'\n\t\t\t'weather';\n\t}\n"],["\n\tgrid-area: main;\n\trow-gap: ","px;\n\n\tdisplay: grid;\n\tgrid-template-areas:\n\t\t'clock search'\n\t\t'calendar .'\n\t\t'calendar .'\n\t\t'todayswitcher forecastswitch'\n\t\t'weather weather';\n\n\tbackground-color: ",";\n\tbackdrop-filter: blur(","px);\n\n\tpadding: ","px;\n\n\t@media screen and (max-width: ","px) {\n\t\tpadding: ","px;\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-template-areas:\n\t\t\t'clock'\n\t\t\t'search'\n\t\t\t'calendar'\n\t\t\t'forecastswitch'\n\t\t\t'weather';\n\t}\n"])),(function(e){return e.theme.gaps[5]}),(function(e){return e.theme.colors.transparentWhite}),(function(e){return e.theme.blur[0]}),(function(e){return e.theme.padding[0]}),(function(e){return e.theme.breakpoints.xl}),(function(e){return e.theme.padding[3]})),lc=lt.div(ts||(ts=oc(["\n\tgrid-area: weather;\n\tdisplay: grid;\n\tgrid-template-columns: minmax(0px, 200px) 1fr;\n\n\tbackground-color: ",";\n\tborder-radius: ","px;\n\tpadding: ","px;\n\n\tgrid-template-areas: 'today forecast';\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: 1fr;\n\t\trow-gap: ","px;\n\t\tgrid-template-rows: auto;\n\t\tgrid-template-areas: 'today' 'forecast';\n\t}\n"],["\n\tgrid-area: weather;\n\tdisplay: grid;\n\tgrid-template-columns: minmax(0px, 200px) 1fr;\n\n\tbackground-color: ",";\n\tborder-radius: ","px;\n\tpadding: ","px;\n\n\tgrid-template-areas: 'today forecast';\n\n\t@media screen and (max-width: ","px) {\n\t\tgrid-template-columns: 1fr;\n\t\trow-gap: ","px;\n\t\tgrid-template-rows: auto;\n\t\tgrid-template-areas: 'today' 'forecast';\n\t}\n"])),(function(e){return e.theme.colors.transparentWhite}),(function(e){return e.theme.borderRadius[1]}),(function(e){return e.theme.padding[3]}),(function(e){return e.theme.breakpoints.xl}),(function(e){return e.theme.gaps[1]})),uc=function(){return uc=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},uc.apply(this,arguments)},sc=function(){var t,n=p(Ss);return(0,e.jsx)(ic,uc({background:(t=null==n?void 0:n.weather[0].id,void 0===t&&(t=800),t>=200&&t<300?jt:t>=300&&t<400?Ot:t>=500&&t<600?Ct:t>=600&&t<700?Pt:t>=600&&t<700?Et:800===t?_t:t>800&&t<900?xt:_t)},{children:(0,e.jsxs)(ac,{children:[(0,e.jsx)(zs,{}),(0,e.jsx)(hc,{}),(0,e.jsx)(Cs,{}),(0,e.jsx)(rc,{}),(0,e.jsxs)(lc,{children:[(0,e.jsx)(Ac,{}),(0,e.jsx)(Qs,{})]})]})}))},cc=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},fc=lt.div(ns||(ns=cc(["\n\tposition: relative;\n\tgrid-area: search;\n"],["\n\tposition: relative;\n\tgrid-area: search;\n"]))),dc=lt.input(rs||(rs=cc(["\n\theight: ","px;\n\tpadding: ","px;\n\n\tfont-size: ","px;\n\n\tborder-radius: ","px;\n\n\t&:focus {\n\t\toutline: 1px solid;\n\t}\n\n\twidth: 100%;\n\n\ttransition: all 0.2s ease;\n"],["\n\theight: ","px;\n\tpadding: ","px;\n\n\tfont-size: ","px;\n\n\tborder-radius: ","px;\n\n\t&:focus {\n\t\toutline: 1px solid;\n\t}\n\n\twidth: 100%;\n\n\ttransition: all 0.2s ease;\n"])),(function(e){return e.theme.height[3]}),(function(e){return e.theme.padding[2]}),(function(e){return e.theme.fontSize[3]}),(function(e){return e.theme.borderRadius[0]})),pc=function(){return pc=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},pc.apply(this,arguments)},hc=function(){var t=Bt().location,n=_(),r=(0,l.useState)(null),o=r[0],i=r[1];return(0,l.useEffect)((function(){null!==o&&n(gu(o))}),[o]),(0,e.jsxs)(fc,{children:[(0,e.jsx)(ht,pc({"data-test-id":"city-search-reset",onClick:function(){n(Su(t))}},{children:"Reset City"})),(0,e.jsx)("h3",{children:"Search city"}),(0,e.jsx)(dc,{"data-test-id":"city-search-input",type:"search",value:null!=o?o:"",onChange:function(e){i(e.target.value)}}),(0,e.jsx)(bc,{onClearInputValue:function(){i("")}})]})},gc=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},mc=lt.div(os||(os=gc(["\n\tbackground-color: ",";\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(1fr, auto);\n\n\twidth: ","%;\n\tleft: 0;\n\n\tposition: absolute;\n\tz-index: 1;\n\tmax-height: ","px;\n\toverflow-y: auto;\n"],["\n\tbackground-color: ",";\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(1fr, auto);\n\n\twidth: ","%;\n\tleft: 0;\n\n\tposition: absolute;\n\tz-index: 1;\n\tmax-height: ","px;\n\toverflow-y: auto;\n"])),(function(e){return e.theme.colors.white}),(function(e){return e.theme.width[2]}),(function(e){return e.theme.height[4]})),yc=lt.div(is||(is=gc(["\n\theight: ","px;\n\tborder-bottom: 1px solid ",";\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto;\n\n\talign-items: center;\n\tpadding: ","px;\n"],["\n\theight: ","px;\n\tborder-bottom: 1px solid ",";\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto;\n\n\talign-items: center;\n\tpadding: ","px;\n"])),(function(e){return e.theme.height[5]}),(function(e){return e.theme.colors.black}),(function(e){return e.theme.padding[3]})),vc=function(){return vc=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},vc.apply(this,arguments)},bc=function(t){var n,r=t.onClearInputValue,o=_(),i=p(ps),a=p(hs),l=function(e){return function(){o(du(e));var t=e.longitude,n=e.latitude;o(Su({lon:t,lat:n})),r()}};return i===ft.LOADING?(0,e.jsx)(mc,{children:(0,e.jsx)(xc,{"data-test-id":"city-search-spinner",size:vt.LARGE})}):(0,e.jsx)(mc,vc({"data-test-id":"city-search-result-wrapper"},{children:null===(n=null==a?void 0:a.results)||void 0===n?void 0:n.map((function(t){var n=t.id,r=t.name,o=t.country,i=t.country_code;return(0,e.jsxs)(yc,{children:[(0,e.jsxs)("p",{children:[r,", ",o,", ",i]}),(0,e.jsx)(ht,vc({"data-test-id":"city-search-select",onClick:l(t)},{children:"select"}))]},n)}))}))},wc=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Sc=lt.img(as||(as=wc(["\n\talign-self: center;\n\tjustify-self: center;\n\n\twidth: ","px;\n\theight: ","px;\n"],["\n\talign-self: center;\n\tjustify-self: center;\n\n\twidth: ","px;\n\theight: ","px;\n"])),(function(e){return e.size}),(function(e){return e.size})),kc=lt.div(ls||(ls=wc(["\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: grid;\n\tgrid-template-rows: 1fr;\n\tgrid-template-columns: 1fr;\n\talign-items: center;\n\tjustify-content: center;\n"],["\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: grid;\n\tgrid-template-rows: 1fr;\n\tgrid-template-columns: 1fr;\n\talign-items: center;\n\tjustify-content: center;\n"]))),_c=function(){return _c=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},_c.apply(this,arguments)},xc=function(t){var n=t.size,r=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["size"]);return(0,e.jsx)(kc,_c({"data-test-id":"spinner-wrapper"},r,{children:(0,e.jsx)(Sc,{src:Dt,size:n,alt:"Loading",title:"Loading"})}))},Ec=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Oc=lt.div(us||(us=Ec(["\n\tgrid-area: today;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(auto, 5);\n\tjustify-content: center;\n\talign-items: center;\n\n\n"],["\n\tgrid-area: today;\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: repeat(auto, 5);\n\tjustify-content: center;\n\talign-items: center;\n\n\n"]))),Cc=lt.p(ss||(ss=Ec(["\n\tfont-size: ","px;\n\ttext-align: center;\n"],["\n\tfont-size: ","px;\n\ttext-align: center;\n"])),(function(e){return e.theme.fontSize[2]})),Pc=lt.img(cs||(cs=Ec(["\n\tjustify-self: center;\n"],["\n\tjustify-self: center;\n"]))),jc=function(){return jc=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},jc.apply(this,arguments)},Ac=function(){var t=function(){var t=_(),n=p(Ss),r=p(ks),o=p(ws),i=Bt().location;return(0,l.useEffect)((function(){null!==i&&t(Su(i))}),[i]),(0,l.useEffect)((function(){null!==o&&t(Bl(o))}),[o]),null===o?{todayWeather:n,replaceContent:(0,e.jsx)("p",{children:"ÐÑ Ð¾ÑÐºÐ°Ð·Ð°Ð»Ð¸ÑÑ Ð¾Ñ Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ¸ Ð²Ð°ÑÐµÐ¹ Ð³ÐµÐ¾Ð»Ð¾ÐºÐ°ÑÐ¸Ð¸. ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð³Ð¾ÑÐ¾Ð´"})}:r===ft.LOADING?{todayWeather:n,replaceContent:(0,e.jsx)(xc,{size:vt.LARGE})}:{todayWeather:n,replaceContent:null}}(),n=t.todayWeather,r=t.replaceContent;if(null!==r)return(0,e.jsx)(Oc,jc({"data-test-id":"today-weather-spinner-wrapper"},{children:r}));if(null===n)return null;var o=n.weather,i=n.main,a=n.name,u=o[0],s=u.icon,c=u.description,f=i.feels_like,d=i.temp;return(0,e.jsxs)(Oc,jc({"data-test-id":"today-weather-wrapper"},{children:[(0,e.jsx)(Cc,jc({"data-test-id":"today-weather-title"},{children:"Today"})),(0,e.jsx)(Cc,jc({"data-test-id":"today-weather-text"},{children:a})),(0,e.jsx)(Pc,{"data-test-id":"today-weather-image",src:"https://openweathermap.org/img/wn/".concat(s,"@2x.png"),alt:c,title:c}),(0,e.jsx)(Cc,{children:c}),(0,e.jsxs)(Cc,{children:[d.toFixed(0),"Â°"]}),(0,e.jsxs)(Cc,{children:["feels like ",f.toFixed(0),"Â°"]})]}))},Tc=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=We.apply(void 0,[e].concat(n)),i="sc-global-"+Qe(JSON.stringify(o)),a=new at(o,i);function u(e){var t=Ne(),n=Re(),r=(0,l.useContext)(tt),o=(0,l.useRef)(t.allocateGSInstance(i)).current;return t.server&&s(o,e,t,r,n),(0,l.useLayoutEffect)((function(){if(!t.server)return s(o,e,t,r,n),function(){return a.removeStyles(o,t)}}),[o,e,t,r,n]),null}function s(e,t,n,r,o){if(a.isStatic)a.renderStyles(e,Y,n,o);else{var i=F({},t,{theme:He(t,r,u.defaultProps)});a.renderStyles(e,i,n,o)}}return l.memo(u)}(fs||(fs=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(['\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\thtml,\n\tbody {\n\t\toverflow-x: hidden;\n\t\tdisplay: grid;\n\t\tgrid-template-rows: 100%;\n\t\tgrid-template-columns: 1fr;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: var(--font-family);\n\t}\n\n\ta {\n\t\ttext-decoration: none;\n\t\tcolor: inherit;\n\t}\n\n\tbutton {\n\t\tborder: none;\n\t}\n\n\tli {\n\t\tlist-style-type: none; \n\t}\n\t\n\tul {\n\t\tmargin-left: 0;\n\t\tpadding-left: 0; \n\t}\n\n\t:root {\n\t\t--font-family: "Helvetica Neue", sans-serif;\n\t}\n'],['\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\thtml,\n\tbody {\n\t\toverflow-x: hidden;\n\t\tdisplay: grid;\n\t\tgrid-template-rows: 100%;\n\t\tgrid-template-columns: 1fr;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: var(--font-family);\n\t}\n\n\ta {\n\t\ttext-decoration: none;\n\t\tcolor: inherit;\n\t}\n\n\tbutton {\n\t\tborder: none;\n\t}\n\n\tli {\n\t\tlist-style-type: none; \n\t}\n\t\n\tul {\n\t\tmargin-left: 0;\n\t\tpadding-left: 0; \n\t}\n\n\t:root {\n\t\t--font-family: "Helvetica Neue", sans-serif;\n\t}\n']))),Nc={colors:{white:"#FFFFFF",transparentWhite:"rgba(217, 217, 217, 0.3)",blue:"rgb(26, 115, 232)",black:"#000000",lightBlack:"#222831"},borderRadius:[5,10,20],width:[90,1110,100,60],height:[30,974,100,38,300,60],padding:[50,70,15,10,5],fontSize:[17,20,19,25,30,41,12],gaps:[28,36,39,48,58,10],margin:[20,250,150],breakpoints:{xl:1e3},blur:[7.5],transition:{light:"all 0.2s ease"}},Rc=function(){return Rc=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Rc.apply(this,arguments)},Ic=function(){return Ic=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Ic.apply(this,arguments)},Lc=document.getElementById("root");if(null===Lc)throw new Error("Container element not found");(0,t.s)(Lc).render((0,e.jsx)((function({store:e,context:t,children:n,serverState:r}){const o=(0,l.useMemo)((()=>{const t=function(e,t){let n,r=y;function o(){l.onStateChange&&l.onStateChange()}function i(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){const e=a();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}const l={addNestedSub:function(e){return i(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:i,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=y)},getListeners:()=>r};return l}(e);return{store:e,subscription:t,getServerState:r?()=>r:void 0}}),[e,r]),i=(0,l.useMemo)((()=>e.getState()),[e]);v((()=>{const{subscription:t}=o;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),i!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[o,i]);const s=t||u;return l.createElement(s.Provider,{value:o},n)}),Ic({store:Fu},{children:(0,e.jsx)(T,Ic({loading:null,persistor:ds},{children:(0,e.jsx)(Fs,{children:(0,e.jsx)((function(){return(0,e.jsxs)(nt,Rc({theme:Nc},{children:[(0,e.jsx)(Tc,{}),(0,e.jsx)(sc,{})]}))}),{})})}))})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzRLQUFBLElBQUlBLEtBQUtDLE9BQU9ELEtBQUtDLE9BQU9ELE1BQU0sQ0FBQyxFQUFFQSxLQUFLRSxLQUFJLElBQUlDLE1BQU9DLFVBQVUsV0FLbEUsSUFBSUMsR0FBRyxtQkFBbUJDLE9BQU9DLGlCQUFpQkQsT0FBT0UsZUFBZSxTQUFTQyxFQUFFQyxFQUFFQyxHQUFHLE9BQUdGLEdBQUdHLE1BQU1DLFdBQVdKLEdBQUdILE9BQU9PLFlBQW1CSixFQUFFQyxHQUFHQyxFQUFFRyxPQUFUTCxDQUF1QixFQUFFTSxHQUFHLFNBQVNOLEdBQUdBLEVBQUUsQ0FBQyxpQkFBaUJPLFlBQVlBLFdBQVdQLEVBQUUsaUJBQWlCUixRQUFRQSxPQUFPLGlCQUFpQmdCLE1BQU1BLEtBQUssaUJBQWlCLG9CQUFBQyxHQUFRLG9CQUFBQSxHQUFRLElBQUksSUFBSVIsRUFBRSxFQUFFQSxFQUFFRCxFQUFFVSxTQUFTVCxFQUFFLENBQUMsSUFBSUMsRUFBRUYsRUFBRUMsR0FBRyxHQUFHQyxHQUFHQSxFQUFFUyxNQUFNQSxLQUFLLE9BQU9ULENBQUMsQ0FBQyxNQUFNVSxNQUFNLDRCQUE2QixFQUFFQyxHQUFHUCxHQUFHUSxNQUFNQyxHQUFHLFNBQVNmLEVBQUVDLEdBQUcsR0FBR0EsRUFBRUQsRUFBRSxDQUFDLElBQUlFLEVBQUVXLEdBQUdiLEVBQUVBLEVBQUVnQixNQUFNLEtBQUssSUFBSSxJQUFJQyxFQUFFLEVBQUVBLEVBQ25makIsRUFBRVUsT0FBTyxFQUFFTyxJQUFJLENBQUMsSUFBSUMsRUFBRWxCLEVBQUVpQixHQUFHLEtBQUtDLEtBQUtoQixHQUFHLE1BQU1GLEVBQUVFLEVBQUVBLEVBQUVnQixFQUFFLEVBQXdCakIsRUFBRUEsRUFBVGdCLEVBQUVmLEVBQWxCRixFQUFFQSxFQUFFQSxFQUFFVSxPQUFPLE9BQW9CTyxHQUFHLE1BQU1oQixHQUFHTCxHQUFHTSxFQUFFRixFQUFFLENBQUNtQixjQUFhLEVBQUdDLFVBQVMsRUFBR2YsTUFBTUosR0FBRyxDQUFDLEVBQUVvQixHQUFHLFNBQVNyQixHQUFHLElBQUlDLEVBQUUsRUFBRSxPQUFPLFdBQVcsT0FBT0EsRUFBRUQsRUFBRVUsT0FBTyxDQUFDWSxNQUFLLEVBQUdqQixNQUFNTCxFQUFFQyxNQUFNLENBQUNxQixNQUFLLEVBQUcsQ0FBQyxFQUNoUFAsR0FBRyxVQUFTLFNBQVNmLEdBQUcsR0FBR0EsRUFBRSxPQUFPQSxFQUFFLElBQUlDLEVBQUUsU0FBU2lCLEVBQUVLLEdBQUdULEtBQUtVLEdBQUdOLEVBQUV0QixHQUFHa0IsS0FBSyxjQUFjLENBQUNLLGNBQWEsRUFBR0MsVUFBUyxFQUFHZixNQUFNa0IsR0FBRyxFQUFFdEIsRUFBRUcsVUFBVXFCLFNBQVMsV0FBVyxPQUFPWCxLQUFLVSxFQUFFLEVBQUUsSUFBSXRCLEVBQUUsRUFBRWUsRUFBRSxTQUFTQyxHQUFHLEdBQUdKLGdCQUFnQkcsRUFBRSxNQUFNLElBQUlTLFVBQVUsK0JBQStCLE9BQU8sSUFBSXpCLEVBQUUsa0JBQWtCaUIsR0FBRyxJQUFJLElBQUloQixJQUFJZ0IsRUFBRSxFQUFFLE9BQU9ELENBQUMsSUFDMVVGLEdBQUcsbUJBQWtCLFNBQVNmLEdBQUcsR0FBR0EsRUFBRSxPQUFPQSxFQUFFQSxFQUFFMkIsT0FBTyxtQkFBbUIsSUFBSSxJQUFJMUIsRUFBRSx1SEFBdUhlLE1BQU0sS0FBS2QsRUFBRSxFQUFFQSxFQUFFRCxFQUFFUyxPQUFPUixJQUFJLENBQUMsSUFBSWUsRUFBRUosR0FBR1osRUFBRUMsSUFBSSxtQkFBb0JlLEdBQUcsbUJBQW1CQSxFQUFFYixVQUFVSixJQUFJSixHQUFHcUIsRUFBRWIsVUFBVUosRUFBRSxDQUFDbUIsY0FBYSxFQUFHQyxVQUFTLEVBQUdmLE1BQU0sV0FBVyxPQUFPdUIsR0FBR1AsR0FBR1AsTUFBTSxHQUFHLENBQUMsT0FBT2QsQ0FBQyxJQUNsWixJQUFJNEIsR0FBRyxTQUFTNUIsR0FBeUQsT0FBdERBLEVBQUUsQ0FBQzZCLEtBQUs3QixJQUFLMkIsT0FBT0csVUFBVSxXQUFXLE9BQU9oQixJQUFJLEVBQVNkLENBQUMsRUFBRStCLEdBQUcsU0FBUy9CLEVBQUVDLEdBQUdELGFBQWFnQyxTQUFTaEMsR0FBRyxJQUFJLElBQUlFLEVBQUUsRUFBRWUsR0FBRSxFQUFHQyxFQUFFLENBQUNXLEtBQUssV0FBVyxJQUFJWixHQUFHZixFQUFFRixFQUFFVSxPQUFPLENBQUMsSUFBSWEsRUFBRXJCLElBQUksTUFBTSxDQUFDRyxNQUFNSixFQUFFc0IsRUFBRXZCLEVBQUV1QixJQUFJRCxNQUFLLEVBQUcsQ0FBTSxPQUFMTCxHQUFFLEVBQVMsQ0FBQ0ssTUFBSyxFQUFHakIsV0FBTSxFQUFPLEdBQTJDLE9BQXhDYSxFQUFFUyxPQUFPRyxVQUFVLFdBQVcsT0FBT1osQ0FBQyxFQUFTQSxDQUFDLEVBQUVILEdBQUcsd0JBQXVCLFNBQVNmLEdBQUcsT0FBT0EsR0FBSSxXQUFXLE9BQU8rQixHQUFHakIsTUFBSyxTQUFTYixHQUFHLE9BQU9BLENBQUMsR0FBRSxDQUFDLElBQ3RaLElBQUlnQyxFQUFFbkIsTUFBTU4sS0FBSzBCLEdBQUcsU0FBU2xDLEdBQUcsSUFBSUMsU0FBU0QsRUFBRSxNQUFNLFVBQVVDLEVBQUVBLEVBQUVELEVBQUVHLE1BQU1nQyxRQUFRbkMsR0FBRyxRQUFRQyxFQUFFLE1BQU0sRUFBRW1DLEdBQUcsU0FBU3BDLEVBQUVDLEVBQUVDLEdBQUcsT0FBT0YsRUFBRXFDLEtBQUtDLE1BQU10QyxFQUFFdUMsS0FBS0MsVUFBVSxFQUFFQyxHQUFHLFNBQVN6QyxFQUFFQyxFQUFFQyxHQUFHLElBQUlGLEVBQUUsTUFBTVksUUFBUSxHQUFHLEVBQUU0QixVQUFVOUIsT0FBTyxDQUFDLElBQUlPLEVBQUVkLE1BQU1DLFVBQVVzQyxNQUFNTCxLQUFLRyxVQUFVLEdBQUcsT0FBTyxXQUFXLElBQUl0QixFQUFFZixNQUFNQyxVQUFVc0MsTUFBTUwsS0FBS0csV0FBOEMsT0FBbkNyQyxNQUFNQyxVQUFVdUMsUUFBUUwsTUFBTXBCLEVBQUVELEdBQVVqQixFQUFFc0MsTUFBTXJDLEVBQUVpQixFQUFFLENBQUMsQ0FBQyxPQUFPLFdBQVcsT0FBT2xCLEVBQUVzQyxNQUFNckMsRUFBRXVDLFVBQVUsQ0FBQyxFQUFFSSxHQUFHLFNBQVM1QyxFQUFFQyxFQUFFQyxHQUM5YixPQURpYzBDLEdBQUdDLFNBQVN6QyxVQUFVbUMsT0FBTyxHQUFHTSxTQUFTekMsVUFBVW1DLEtBQUtkLFdBQVdxQixRQUFRLGVBQ2xoQlYsR0FBR0ssSUFBYUgsTUFBTSxLQUFLRSxVQUFVLEVBQUVPLEdBQUcsU0FBUy9DLEVBQUVDLEdBQUcsU0FBU0MsSUFBSSxDQUFDQSxFQUFFRSxVQUFVSCxFQUFFRyxVQUFVSixFQUFFeUMsR0FBR3hDLEVBQUVHLFVBQVVKLEVBQUVJLFVBQVUsSUFBSUYsRUFBRUYsRUFBRUksVUFBVTRDLFlBQVloRCxFQUFFQSxFQUFFaUQsRUFBRSxTQUFTaEMsRUFBRUMsRUFBRUssR0FBRyxJQUFJLElBQUlkLEVBQUVOLE1BQU1xQyxVQUFVOUIsT0FBTyxHQUFHd0MsRUFBRSxFQUFFQSxFQUFFVixVQUFVOUIsT0FBT3dDLElBQUl6QyxFQUFFeUMsRUFBRSxHQUFHVixVQUFVVSxHQUFHLE9BQU9qRCxFQUFFRyxVQUFVYyxHQUFHb0IsTUFBTXJCLEVBQUVSLEVBQUUsQ0FBQyxFQUFFMEMsR0FBRyxTQUFTbkQsR0FBRyxPQUFPQSxDQUFDLEVBQUVvRCxHQUFHLFNBQVNwRCxHQUFHLElBQUlDLEVBQUUsS0FBS0MsRUFBRStCLEVBQUVvQixhQUFhLElBQUluRCxJQUFJQSxFQUFFb0QsYUFBYSxPQUFPckQsRUFBRSxJQUFJQSxFQUFFQyxFQUFFb0QsYUFBYXRELEVBQUUsQ0FBQ3VELFdBQVdKLEdBQUdLLGFBQWFMLEdBQUdNLGdCQUFnQk4sSUFBSSxDQUFDLE1BQU1sQyxHQUFHZ0IsRUFBRXlCLFNBQVN6QixFQUFFeUIsUUFBUUMsTUFBTTFDLEVBQUUyQyxRQUFRLENBQUMsT0FBTzNELENBQUMsRUFBRSxTQUFTNEQsRUFBRTdELEdBQUcsR0FBR1ksTUFBTWtELGtCQUFrQmxELE1BQU1rRCxrQkFBa0JoRCxLQUFLK0MsT0FBTyxDQUFDLElBQUk1RCxFQUFFVyxRQUFRbUQsTUFBTTlELElBQUlhLEtBQUtpRCxNQUFNOUQsRUFBRSxDQUFDRCxJQUFJYyxLQUFLOEMsUUFBUTVCLE9BQU9oQyxHQUFHLENBQUMrQyxHQUFHYyxFQUFFakQsT0FBT2lELEVBQUV6RCxVQUFVNEQsS0FBSyxjQUFjLElBQUlDLEdBQUcsU0FBU2pFLEVBQUVDLEdBQW1CLElBQUksSUFBSUMsRUFBRSxHQUFHZSxHQUE3QmpCLEVBQUVBLEVBQUVnQixNQUFNLE9BQXVCTixPQUFPLEVBQUVRLEVBQUUsRUFBRUEsRUFBRUQsRUFBRUMsSUFBSWhCLEdBQUdGLEVBQUVrQixJQUFJQSxFQUFFakIsRUFBRVMsT0FBT1QsRUFBRWlCLEdBQUcsTUFBTTJDLEVBQUV4QixLQUFLdkIsS0FBS1osRUFBRUYsRUFBRWlCLEdBQUcsRUFBRThCLEdBQUdrQixHQUFHSixHQUFHSSxHQUFHN0QsVUFBVTRELEtBQUssaUJBQ2wyQixJQUFJRSxHQUFHLFNBQVNsRSxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHLElBQUlDLEVBQUUsbUJBQW1CLEdBQUdoQixFQUFFLENBQUNnQixHQUFHLEtBQUtoQixFQUFFLElBQUlxQixFQUFFTixDQUFDLE1BQU1qQixJQUFJa0IsR0FBRyxLQUFLbEIsRUFBRXVCLEVBQUV0QixHQUFHLE1BQU0sSUFBSWdFLEdBQUcsR0FBRy9DLEVBQUVLLEdBQUcsR0FBSSxFQUFFNEMsR0FBRyxTQUFTbkUsRUFBRUMsRUFBRUMsR0FBNEQsT0FBekRGLEdBQUdrRSxHQUFHLEdBQUcsS0FBS2pFLEVBQUVFLE1BQU1DLFVBQVVzQyxNQUFNTCxLQUFLRyxVQUFVLElBQVd4QyxDQUFDLEVBQUVvRSxHQUFHLFNBQVNwRSxFQUFFQyxHQUFHLE1BQU0sSUFBSWdFLEdBQUcsV0FBV2pFLEVBQUUsS0FBS0EsRUFBRSxJQUFJRyxNQUFNQyxVQUFVc0MsTUFBTUwsS0FBS0csVUFBVSxHQUFJLEVBQUU2QixHQUFHLFNBQVNyRSxFQUFFQyxFQUFFQyxHQUFHLGlCQUFrQkYsR0FBR2tFLEdBQUcsa0NBQWtDLENBQUNoQyxHQUFHbEMsR0FBR0EsR0FBR0MsRUFBRUUsTUFBTUMsVUFBVXNDLE1BQU1MLEtBQUtHLFVBQVUsR0FBRyxFQUFNOEIsR0FBRyxTQUFTdEUsRUFBRUMsR0FBR0QsRUFBRSxDQUFDLElBQUksSUFBSUUsRUFBRUYsR0FBR0EsRUFBRXVFLGNBQWN0RCxFQUFFZixJQUFJQSxFQUFFc0UsYUFBYXRFLEVBQUV1RSxjQUFxQixJQUFQeEQsRUFBRUEsR0FBR2dCLEdBQU95QyxTQUFTekQsRUFBRTBELFNBQVMsQ0FBQyxJQUFJekQsRUFBRUQsRUFBRSxNQUFNakIsQ0FBQyxDQUFDLENBQUMsTUFBTVMsR0FBRyxDQUFDUyxFQUFFLElBQUksQ0FBQyxHQUFHQSxRQUFHLElBQW9CQSxFQUFFakIsTUFBTUQsS0FBS0EsYUFBYWtCLEVBQUVqQixNQUFNRCxhQUFha0IsRUFBRXlELFVBQVUzRSxhQUFha0IsRUFBRXdELFVBQVUsQ0FBWSxHQUFHLFdBQWR4RCxTQUFTbEIsSUFBa0IsTUFBTUEsR0FBRyxZQUFZa0IsRUFBRSxJQUFJLElBQUlLLEVBQUV2QixFQUFFZ0QsWUFBWTRCLGFBQWE1RSxFQUFFZ0QsWUFBWWdCLE1BQU1uRSxPQUFPTyxVQUFVcUIsU0FBU1ksS0FBS3JDLEVBQUUsQ0FBQyxNQUFNUyxHQUFHYyxFQUFFLG1DQUFtQyxNQUFNQSxPQUFFLElBQVN2QixFQUFFLFlBQVksT0FBT0EsRUFBRSxjQUMvNUJBLEVBQUVvRSxHQUFHLHNFQUFzRW5FLEVBQUVzQixFQUFFLENBQUMsT0FBT3ZCLENBQUMsRUFBTTZFLEdBQU9DLEVBQUUsU0FBUzlFLEVBQUVDLEdBQUdhLEtBQUtpRSxFQUFFL0UsSUFBSWdGLElBQUkvRSxHQUFHLEdBQUdhLEtBQUttRSxHQUFHQyxFQUFFLEVBQUVKLEVBQUUxRSxVQUFVK0UsR0FBRSxFQUFHTCxFQUFFMUUsVUFBVWdGLEVBQUUsV0FBVyxPQUFPdEUsS0FBS2lFLENBQUMsRUFBRUQsRUFBRTFFLFVBQVVxQixTQUFTLFdBQVcsTUFBTSxTQUFTWCxLQUFLaUUsRUFBRSxHQUFHLEVBQUUsSUFBSU0sR0FBRyxTQUFTckYsR0FBRyxPQUFHQSxhQUFhOEUsR0FBRzlFLEVBQUVnRCxjQUFjOEIsR0FBRzlFLEVBQUVpRixLQUFLQyxHQUFVbEYsRUFBRStFLEdBQUVYLEdBQUcsdUNBQXVDcEUsRUFBRSxLQUFXLG1CQUFrQixFQUFFa0YsR0FBRyxDQUFDLEVBQUVGLEdBQUcsQ0FBQyxFQUFNTSxFQUFFLFNBQVN0RixFQUFFQyxHQUFHYSxLQUFLeUUsRUFBRXRGLElBQUl1RixHQUFHeEYsRUFBRSxFQUFFLEVBQUVzRixFQUFFbEYsVUFBVStFLEdBQUUsRUFBR0csRUFBRWxGLFVBQVVnRixFQUFFLFdBQVcsT0FBT3RFLEtBQUt5RSxFQUFFOUQsVUFBVSxFQUFFNkQsRUFBRWxGLFVBQVVxQixTQUFTLFdBQVcsTUFBTSxXQUFXWCxLQUFLeUUsRUFBRSxHQUFHLEVBQzdsQixJQUFJRSxHQUFHLFNBQVN6RixHQUFHLE9BQUdBLGFBQWFzRixHQUFHdEYsRUFBRWdELGNBQWNzQyxFQUFTdEYsRUFBRXVGLEdBQUVuQixHQUFHLHlDQUF5Q3BFLEVBQUUsYUFBYWtDLEdBQUdsQyxJQUFVLHFCQUFvQixFQUFFMEYsR0FBRyxtREFBbURDLEdBQUcsU0FBUzNGLEdBQUcsT0FBR0EsYUFBYXNGLEVBQVN0RixHQUFFQSxFQUFFLGlCQUFpQkEsR0FBR0EsRUFBRW1GLEVBQUVuRixFQUFFb0YsSUFBSXBELE9BQU9oQyxHQUFHbUUsR0FBR3VCLEdBQUdFLEtBQUs1RixHQUFHLHlDQUF5Q0EsS0FBS0EsRUFBRSwyQkFBa0MsSUFBSXNGLEVBQUV0RixFQUFFd0YsSUFBRyxFQUFFQSxHQUFHLENBQUMsRUFBTUssRUFBRSxTQUFTN0YsRUFBRUMsRUFBRUMsR0FBR1ksS0FBS2dGLEVBQUU1RixJQUFJNkYsR0FBRy9GLEVBQUUsRUFBRSxFQUFFNkYsRUFBRXpGLFVBQVUrRSxHQUFFLEVBQUdVLEVBQUV6RixVQUFVZ0YsRUFBRSxXQUFXLE9BQU90RSxLQUFLZ0YsRUFBRXJFLFVBQVUsRUFBRW9FLEVBQUV6RixVQUFVcUIsU0FBUyxXQUFXLE1BQU0sWUFBWVgsS0FBS2dGLEVBQUUsR0FBRyxFQUFFLElBQUlFLEdBQUcsU0FBU2hHLEdBQUcsT0FBR0EsYUFBYTZGLEdBQUc3RixFQUFFZ0QsY0FBYzZDLEVBQVM3RixFQUFFOEYsR0FBRTFCLEdBQUcsMENBQTBDcEUsRUFBRSxhQUFha0MsR0FBR2xDLElBQVUsc0JBQXFCLEVBQUUrRixHQUFHLENBQUMsRUFBRUUsR0FBRyxJQUFJSixFQUFFNUQsRUFBRW9CLGNBQWNwQixFQUFFb0IsYUFBYTZDLFdBQVcsR0FBRyxFQUFFSCxJQUFRSSxHQUFHLENBQUNDLE1BQUssRUFBR0MsUUFBTyxFQUFHQyxPQUFNLEVBQUdDLEtBQUksRUFBR0MsVUFBUyxHQUFJQyxJQUFtQnhHLEdBQUUsRUFBWSxXQUEyQixPQUFoQkEsSUFBSUMsRUFBdUIsV0FBVyxHQUFHLG9CQUFxQndHLFNBQVMsT0FBTSxFQUFHLElBQUkxRyxFQUFFMEcsU0FBU0MsY0FBYyxPQUFPMUcsRUFBRXlHLFNBQVNDLGNBQWMsT0FBcUUsT0FBOUQxRyxFQUFFMkcsWUFBWUYsU0FBU0MsY0FBYyxRQUFRM0csRUFBRTRHLFlBQVkzRyxLQUFPRCxFQUFFNkcsYUFBb0I1RyxFQUFFRCxFQUFFNkcsV0FBV0EsV0FBVzdHLEVBQUU4RyxVQUFVZCxHQUFHQyxLQUFXaEcsRUFBRThHLGNBQWEsQ0FBelMvRyxHQUFJQyxHQUFFLEdBQVdDLENBQUMsR0FBNUNBLEVBQUxELEVBRXIzQitHLEVBQUV4SCxPQUFPeUgsRUFBRVAsU0FBU1EsR0FBR0YsRUFBRUcsU0FBU0MsR0FBRyxXQUFXLEVBQUVDLEdBQUcsa0JBQWtCcEUsRUFBRSxTQUFTakQsRUFBRUMsRUFBRUMsR0FBRyxPQUFPRixFQUFFQyxHQUFHRCxFQUFFQyxJQUFJQyxDQUFDLEVBQUVvSCxHQUFHLFNBQVN0SCxHQUFHLElBQUksSUFBSUMsRUFBRSxFQUFFQSxFQUFFYSxLQUFLSixPQUFPVCxJQUFJLEdBQUdhLEtBQUtiLEtBQUtELEVBQUUsT0FBT0MsRUFBRSxPQUFPLENBQUMsRUFBRXNILEdBQUcsU0FBU3ZILEdBQUdBLEVBQUVBLEVBQUV3SCxPQUFPLElBQUksSUFBSXZILEVBQUUsR0FBR0MsT0FBRSxFQUFPZSxFQUFFLEVBQUVBLEVBQUVqQixFQUFFVSxPQUFPTyxJQUFJLENBQUMsSUFBSUMsRUFBRWxCLEVBQUVpQixHQUFHQyxHQUFHaEIsR0FBR0QsRUFBRXdILEtBQUt2RyxHQUFHaEIsRUFBRWdCLENBQUMsQ0FBQyxPQUFPakIsQ0FBQyxFQUFFeUgsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsU0FBUy9ILEdBQUcsT0FBT2dDLE9BQU9oQyxHQUFHZ0ksUUFBUU4sR0FBRyxTQUFTTSxRQUFRTCxHQUFHLFFBQVFLLFFBQVFKLEdBQUcsUUFBUUksUUFBUUgsR0FBRyxVQUFVRyxRQUFRRixHQUFHLFFBQVEsRUFBRUcsRUFBRSxXQUFXLElBQUlqSSxFQUFFLElBQUlBLEVBQUVILE9BQU9xSSxTQUMxZmIsR0FBR3pCLEtBQUs1RixHQUFHQSxFQUFFQSxFQUFFLFdBQWdCLElBQUksSUFBSUMsS0FBYkQsRUFBRSxDQUFDLEVBQWlCQSxFQUFFQyxRQUFHLEVBQU8sT0FBT0QsQ0FBQyxFQUFFbUksRUFBRSxTQUFTbkksRUFBRUMsR0FBRyxPQUFPSixPQUFPTyxVQUFVZ0ksZUFBZS9GLEtBQUtyQyxFQUFFQyxFQUFFLEVBQUVvSSxHQUFHLFNBQVNySSxHQUFHLEdBQUdxSCxHQUFHekIsS0FBSy9GLE9BQU95SSxNQUFNLE9BQU96SSxPQUFPeUksS0FBS3RJLEdBQUcsSUFBU0UsRUFBTEQsRUFBRSxHQUFLLElBQUlDLEtBQUtGLEVBQUVtSSxFQUFFbkksRUFBRUUsSUFBSUQsRUFBRXdILEtBQUt2SCxHQUFHLE9BQU9ELENBQUMsRUFBRXNJLEVBQUUsU0FBU3ZJLEVBQUVDLEdBQVcsSUFBSSxJQUFJQyxLQUFoQkYsRUFBRUEsR0FBRyxDQUFDLEVBQWlCbUksRUFBRW5JLEVBQUVFLEtBQUtELEVBQUVDLEdBQUdGLEVBQUVFLEdBQUcsRUFBRXNJLEdBQUcsU0FBU3hJLEdBQUcsT0FBTyxXQUFXZ0gsRUFBRXlCLFdBQVd6SSxFQUFFLEVBQUUsQ0FBQyxFQUFFMEksRUFBRSxTQUFTMUksRUFBRUMsR0FBRyxJQUFJRCxFQUFFLE1BQU1ZLE1BQU1YLEdBQUcsR0FBSSxFQUFFMEksRUFBRTFGLEVBQUUrRCxFQUFFLE9BQU8sQ0FBQyxHQUFPNUIsRUFBRSxTQUFTcEYsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZSxFQUFFLElBQUkySCxPQUFPLGVBQWUzSSxFQUFFLFlBQVksS0FBc0QsR0FBakRBLEVBQUUsSUFBSTJJLE9BQU8saUJBQWlCM0ksRUFBRSxZQUFZLEtBQVFELEVBQUVBLElBQUlpQixFQUFFNEgsS0FBSzdJLElBQUlDLEVBQUU0SSxLQUFLN0ksSUFBSSxJQUFJRSxFQUFFNEksbUJBQW1COUksRUFBRSxHQUFHLENBQUMsTUFBTWtCLEdBQUcsQ0FBQyxPQUFPaEIsQ0FBQyxFQUFFNkksR0FBRyxJQUFJSCxPQUFPLElBQUlJLE9BQU8sOEJBQThCQSxPQUFPLGtCQUFrQkEsT0FBTyxZQUFZQSxPQUFPLGVBQWVBLE9BQU8sa0JBQWtCQSxPQUFPLElBQUlBLFFBQVFDLEdBQUcseUNBQXlDQyxHQUFHLElBQUlOLE9BQU8sbURBQW1ESSxPQUFPLGdEQUFnREEsT0FDdjdCLEtBQUtHLEdBQUcsNkJBQTZCQyxHQUFHLHlDQUF5Q0MsRUFBRSxTQUFTckosR0FBdVBBLEdBQXhPQSxHQUFaQSxFQUFFZ0MsT0FBT2hDLElBQU9nSSxRQUFRaUIsSUFBRyxTQUFTL0gsR0FBRyxJQUFJLE9BQU9vSSxtQkFBbUJwSSxFQUFFLENBQUMsTUFBTUssR0FBRyxPQUFPK0gsbUJBQW1CcEksRUFBRThHLFFBQVEsV0FBVyxLQUFVLENBQUMsSUFBR0EsUUFBUWtCLElBQUcsU0FBU2hJLEdBQUcsT0FBT0EsRUFBRThHLFFBQVEsS0FBSyxNQUFNLElBQUdBLFFBQVFtQixJQUFHLFNBQVNqSSxHQUFHLE9BQU9BLEVBQUVxSSxhQUFhLEtBQU9DLE1BQU1ULEtBQUssR0FBRyxJQUFJOUksRUFBRWdJLElBQUkvSCxFQUFFLFNBQVNnQixHQUFHLE9BQU9BLEVBQUU4RyxRQUFRLE1BQU0sT0FBT0EsUUFBUSxNQUFNLE9BQU9BLFFBQVEsS0FBSyxPQUFPQSxRQUFRLE1BQU0sT0FBT0EsUUFBUSxNQUFNLE9BQU9BLFFBQVEsTUFDdGYsTUFBTSxFQUFFL0csS0FBS2pCLEVBQUUsSUFBSSxJQUFJd0osTUFBTUosSUFBOEssT0FBMUtuSixFQUFFZ0QsRUFBRS9DLEdBQUdGLEVBQUUsSUFBSSxLQUFLQSxFQUFFLElBQUksS0FBS0EsRUFBRSxLQUFLQSxFQUFFLElBQUlpQixFQUFFLElBQUksTUFBTUEsRUFBRSxTQUFTQyxHQUFHLE9BQU9oQixFQUFFZ0IsRUFBRThHLFFBQVEsTUFBTSxPQUFPQSxRQUFRLEtBQUssT0FBTyxFQUFFL0gsRUFBRXdKLE1BQU16SixFQUFFLEdBQUcsQ0FBQ2lCLEVBQUVqQixFQUFFLEtBQUssR0FBR0MsRUFBRVEsRUFBRVQsRUFBRSxHQUFHLENBQUNpQixFQUFFakIsRUFBRSxLQUFLLEdBQVVDLENBQUMsRUFBRXlKLEdBQUcsU0FBUzFKLEdBQUcsT0FBT0EsRUFBRWlELEdBQUcsRUFBRWpELEVBQUV5SixNQUFNL0ksT0FBTyxJQUFJVixFQUFFeUosTUFBTUUsS0FBSyxLQUFLLEtBQUssRUFBRTNKLEVBQUVTLEVBQUVDLE9BQU8sSUFBSVYsRUFBRVMsRUFBRWtKLEtBQUssS0FBSyxHQUFHLEVBQUVDLEdBQUcsU0FBUzVKLEVBQUVDLEdBQUcsSUFBSUMsRUFBRSxHQUFHLEdBQUdGLEVBQUUsSUFBSSxJQUFJaUIsS0FBS2pCLEVBQUUsR0FBR21JLEVBQUVuSSxFQUFFaUIsSUFBSSxNQUFNakIsRUFBRWlCLEdBQUcsQ0FBQyxJQUFJQyxFQUFFakIsRUFBRUEsRUFBRUQsRUFBRWlCLElBQUlqQixFQUFFaUIsR0FBR2YsRUFBRXVILEtBQUs2QixtQkFBbUJySSxHQUFHLElBQUlxSSxtQkFBbUJwSSxHQUFHLENBQUMsT0FBT2hCLENBQUMsRUFBRTJKLEdBQUcsU0FBUzdKLEVBQUVDLEVBQUVDLEVBQUVlLEdBQzlhLE9BRGliakIsRUFBRXFKLEVBQUVySixJQUNuZnlKLE1BQU1oQyxLQUFLbkYsTUFBTXRDLEVBQUV5SixNQUFNRyxHQUFHM0osRUFBRWdCLElBQUlqQixFQUFFUyxFQUFFZ0gsS0FBS25GLE1BQU10QyxFQUFFUyxFQUFFbUosR0FBRzFKLEVBQUVlLElBQVd5SSxHQUFHMUosRUFBRSxFQUFFOEosR0FBRyxJQUFJbEIsT0FBTyxXQUFXSSxPQUFPLElBQUksVUFBVUEsT0FBTyxJQUFJLG1CQUFtQkEsT0FBTyxJQUFJLG1EQUFtREEsT0FBTyxJQUFJLGNBQWNBLE9BQU8sS0FBSyxLQUFLZSxHQUFHLFNBQVMvSixFQUFFQyxHQUFHLElBQUlDLEVBQUVtSixFQUFFcEosR0FBR0EsRUFBRUMsRUFBRStDLEVBQUUvQyxFQUFFdUosTUFBTS9JLFNBQVNULEdBQUcsSUFBSUMsRUFBRXVKLE1BQU1FLEtBQUssS0FBS3pKLEVBQUVPLEVBQUVDLFNBQVNULEdBQUcsSUFBSUMsRUFBRU8sRUFBRWtKLEtBQUssS0FBSyxJQUFJMUksRUFBRSxHQUFHLElBQUloQixFQUFFUyxTQUFTTyxFQUFFaEIsRUFBb0JBLEdBQWxCQSxFQUFFQSxFQUFFK0osT0FBTyxFQUFFLE1BQVNoQyxRQUFROEIsR0FBRyxJQUFJN0ksRUFBRUEsRUFBRStJLE9BQU8vSixFQUFFUyxTQUFTLElBQUlRLEVBQUVsQixFQUFFMkcsY0FBYyxPQUN4RCxHQUQrRDNHLEVBQUVBLEVBQUUyRyxjQUFjLEtBQy9lMUcsR0FBUEMsRUFBRW1KLEVBQUVwSixJQUFPZ0QsRUFBRS9DLEVBQUV1SixNQUFNL0ksU0FBU1QsR0FBRyxJQUFJQyxFQUFFdUosTUFBTUUsS0FBSyxLQUFLekosRUFBRU8sRUFBRUMsU0FBU1QsR0FBRyxJQUFJQyxFQUFFTyxFQUFFa0osS0FBSyxLQUFLMUosRUFBRSxJQUFJcUYsRUFBRXJGLEVBQUV1RixJQUFJbEIsR0FBR3RFLEVBQUUscUJBQXFCQyxFQUFFQSxhQUFhcUYsRUFBRXJGLEVBQUUwRixHQUFHMUYsR0FBR0QsRUFBRWlLLEtBQUt4RSxHQUFHeEYsR0FBR2lCLEVBQUUwRixZQUFZNUcsR0FBR0MsRUFBRWlCLEVBQUU0RixVQUFVNUcsRUFBRSxJQUFJNEUsRUFBRUUsR0FBRyx1QkFBdUJYLEdBQUdnQixHQUFHbkYsR0FBRyw4QkFBOEJpRSxJQUFJLGNBQWN5QixLQUFLUCxHQUFHbkYsSUFBSSw2Q0FBd0MsSUFBUzJFLEtBQUtBLEdBQUd6QixHQUFHLGNBQWNuRCxHQUFHQyxFQUFFMkUsSUFBSTNFLEVBQUVxRCxXQUFXdEQsR0FBR0EsRUFBRUEsRUFBRSxJQUFJNEYsRUFBRTVGLEVBQUUsS0FBSzhGLElBQU83RSxFQUFFZ0osU0FBUy9ELEdBQUdqRixFQUFFZ0osUUFBUVgsZUFBZSxNQUFNM0ksTUFBTSwrREFDM2RNLEVBQUVnSixRQUFRLEtBQUssR0FBR3pELEtBQUssS0FBS3ZGLEVBQUVpSixXQUFXakosRUFBRWtKLFlBQVlsSixFQUFFaUosV0FBOEwsT0FBbkxqSixFQUFFNEYsVUFBVWQsR0FBRy9GLEdBQUdBLEVBQUUrQixPQUFPZCxFQUFFMkYsV0FBV29ELE1BQU0vSSxFQUFFbUosWUFBWW5KLEVBQUVtSixXQUFXRCxZQUFZbEosR0FBWUQsR0FBVGYsRUFBRW1KLEVBQUVwSixFQUFFZ0IsSUFBT2dDLEVBQUUvQyxFQUFFdUosTUFBTS9JLFNBQVNPLEdBQUcsSUFBSWYsRUFBRXVKLE1BQU1FLEtBQUssS0FBS3pKLEVBQUVPLEVBQUVDLFNBQVNPLEdBQUcsSUFBSWYsRUFBRU8sRUFBRWtKLEtBQUssS0FBWTFJLENBQUMsRUFBRXFKLEdBQUcsc0NBQTBDQyxHQUFHLFNBQVN2SyxFQUFFQyxFQUFFQyxFQUFFZSxHQUFNK0YsRUFBRTlHLEVBQUUsaUJBQWlCOEcsRUFBRTlHLEVBQUUsaUJBQWlCRixFQUFFQyxHQUFFLEdBQVkrRyxFQUFFL0YsRUFBRSxjQUFhK0YsRUFBRS9GLEVBQUUsYUFBYSxLQUFLakIsRUFBRUMsRUFBRSxFQUFFdUssR0FBRyxXQUFXLElBQUl4SyxFQUFFaUgsRUFBRXdELFdBQVcsTUFBTSxhQUFhekssR0FBRyxnQkFBZ0JBLElBQUksR0FBRzBLLFVBQVVDLFVBQVU3SCxRQUFRLE9BQU8sRUFBRThILEdBQUcsU0FBUzVLLEdBQUcsSUFBSUMsRUFBRTRLLEdBQUcsSUFBSUwsS0FBSyxJQUFJdkssR0FBRyxDQUFDLE1BQU1DLEdBQUcsQ0FBQzRLLEdBQUc5SyxFQUFFLEVBQUU4SyxHQUFHLFNBQVM5SyxHQUFHLEdBQUd3SyxLQUFLeEssUUFBUSxDQUFDLElBQUlDLEdBQUUsRUFBR0MsRUFBRSxXQUFXLElBQUlELEVBQUUsT0FBT0EsR0FBRSxFQUFHRCxFQUFFc0MsTUFBTXhCLEtBQUswQixVQUFVLEVBQUV3RSxFQUFFK0Qsa0JBQWtCL0QsRUFBRStELGlCQUFpQixPQUFPN0ssR0FBRSxHQUFJOEcsRUFBRStELGlCQUFpQixtQkFBbUI3SyxHQUFFLElBQUs4RyxFQUFFZ0UsY0FDN3hCaEUsRUFBRWdFLFlBQVksc0JBQXFCLFdBQVdSLE1BQU10SyxFQUFFb0MsTUFBTXhCLEtBQUswQixVQUFVLElBQUd3RSxFQUFFZ0UsWUFBWSxTQUFTOUssR0FBRyxDQUFDLEVBQUUrSyxHQUFHLFNBQVNqTCxHQUFHLEtBQUtBLEVBQUU2RyxZQUFZN0csRUFBRW9LLFlBQVlwSyxFQUFFNkcsV0FBVyxFQUFFcUUsR0FBRyxDQUFDQyxRQUFPLEVBQUdDLEtBQUksRUFBR0MsTUFBSyxHQUFRQyxFQUFFQSxFQUFFckksRUFBRStELEVBQUUsU0FBU2lCLEtBQUtoRixFQUFFcUksRUFBRSxJQUFJLEdBQUdySSxFQUFFcUksRUFBRSxNQUFNLElBQUksSUFBSUMsR0FBRyxTQUFTdkwsR0FBRyxPQUFPc0wsRUFBRUUsSUFBSUYsRUFBRXBJLEVBQUVrQyxFQUFFcEYsRUFBRSxNQUFNc0wsRUFBRXBJLEVBQUUsRUFBRXVJLEdBQUcsU0FBU3pMLEdBQUcsSUFBSUMsRUFBRWdELEVBQUVxSSxFQUFFLE1BQU0sSUFBSXJMLEVBQUV3SCxLQUFLbkYsTUFBTXJDLEVBQUVELEVBQUUsRUFBRTBMLEdBQUcsU0FBUzFMLEdBQUcsT0FBT2lELEVBQUVxSSxFQUFFLE9BQU9yRCxLQUFLakksRUFBRSxFQUFFMkwsR0FBRyxTQUFTM0wsR0FBRyxJQUFJQyxFQUFFZ0QsRUFBRXFJLEVBQUUsS0FBSyxJQUFJQSxFQUFFTSxHQUFHLEdBQUcsSUFBSTFMLEVBQUVELEVBQUVTLE9BQU8sR0FBRyxJQUFJUixFQUFFRixTQUFTLElBQUksSUFBSWlCLEVBQUUsRUFBRUMsRUFBRSxhQUFhRCxJQUFJZixHQUFHRixHQUFHLEVBQUV1QixFQUFFLEVBQUVBLEVBQUVyQixFQUFFcUIsSUFBSXRCLEVBQUVzQixHQUFHTCxFQUFFLEVBQUUySyxHQUFHLFNBQVM3TCxHQUFHLE9BQU9pRCxFQUFFQSxFQUFFcUksRUFBRSxJQUFJckQsS0FBS2pJLEVBQUVpSSxJQUFJLEVBQU02RCxHQUFHN0ksRUFBRXFJLEVBQUUsT0FBT3JELEtBQUs4RCxHQUFHOUksRUFBRTZJLEdBQUcsSUFBSTdELEtBQUsrRCxHQUFHL0ksRUFBRTZJLEdBQUcsSUFBSTdELEtBQUtoRixFQUFFNkksR0FBRyxJQUFJLElBQUk3RCxJQUFJQSxJQUM5b0IsSUFBSWdFLEdBQUcsU0FBU2pNLEVBQUVDLEVBQUVDLEdBQUcsSUFBSWUsRUFBRTZLLEdBQUdJLEVBQUUsbUJBQW9CakwsRUFBRUEsRUFBRWpCLEVBQUVDLEVBQUVDLEdBQUdlLEVBQUV3RyxLQUFLLENBQUN6SCxFQUFFQyxFQUFFQyxHQUFHLEVBQUVpTSxFQUFFLFNBQVNuTSxFQUFFQyxFQUFFQyxHQUFHNkwsR0FBRy9MLElBQUlDLEdBQUc4TCxHQUFHL0wsSUFBSUUsSUFBRyxJQUFLUixNQUFNQyxVQUFVc00sR0FBR2pNLEVBQUUsRUFBRW9NLEdBQUcsU0FBU3BNLEVBQUVDLEVBQUVDLEdBQUdELEdBQUcsRUFBRUEsRUFBRVMsU0FBU1QsRUFBRW9NLEdBQUdwTSxHQUFHQyxHQUFHLEVBQUVBLEVBQUVRLFNBQVNULEdBQUcsTUFBTW9NLEdBQUduTSxJQUFJLEdBQUdELEVBQUVTLFNBQVNULEVBQUVBLEVBQUUrSixPQUFPLEVBQUUsS0FBSy9KLEVBQUVTLE9BQU8sS0FBS1IsRUFBRUQsRUFBRUEsRUFBRWdELEVBQUUrSSxHQUFHLEtBQUsvRCxLQUFLaEYsRUFBRWhELEVBQUVDLEVBQUUrSCxLQUFLakksSUFBRyxJQUFLTixNQUFNQyxVQUFVc00sR0FBR2pNLEVBQUUsS0FBS0UsR0FBRyxFQUFFbU0sR0FBRyxTQUFTck0sR0FBRyxPQUFPQSxFQUFFMkosS0FBSyxNQUFNM0IsUUFBUSxNQUFNLEtBQUtBLFFBQVEsTUFBTSxLQUFLQSxRQUFRLEtBQUssSUFBSSxFQUFNc0UsR0FBR3JFLElBQUkxQyxFQUFFLEdBQUdnSCxFQUFFLFNBQVN2TSxHQUFHLE1BQU1ZLE1BQU0sWUFBWVosRUFBRSxLQUFLQSxFQUFFLElBQUssRUFBRXVGLEVBQUVrQyxLQUFLLENBQUMsTUFBTSxTQUFTekgsR0FBRyxJQUFJLElBQUlDLEtBQUtELEVBQUUsR0FBR21JLEVBQUVuSSxFQUFFQyxHQUFHLENBQUMsSUFBSUMsRUFBRUYsRUFBRUMsR0FBRyxpQkFBaUJDLEVBQUVvTCxFQUFFckwsR0FBR2dELEVBQUVxSSxFQUFFckwsRUFBRSxJQUFJdU0sT0FBT3RNLEdBQUcrQyxFQUFFcUksRUFBRXJMLEVBQUVDLEVBQUUsRUFBSUQsRUFBRUQsRUFBRXlNLE1BQUV6TSxFQUFFaUQsRUFBRXFJLEVBQUUsS0FBSyxLQUFNN0QsS0FBS3hILElBQUlBLEVBQUUsZUFBZTRJLEtBQUs1SSxLQUFLRCxFQUFFeUgsS0FBSyxRQUFReEgsRUFBRSxJQUFHLElBQUksSUFBSXlNLEdBQUcseUJBQXlCQyxHQUFHLENBQUMsVUFBVSxTQUFTLFdBQVdDLEdBQUcsd0JBQXdCQyxHQUFHLHdCQUF3QkMsR0FBRyxxQkFBcUJDLEdBQUcsU0FBUy9NLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUcsSUFBSUMsRUFBRWxCLEVBQUVnQixNQUFNLEtBQUtPLEVBQUVMLEVBQUU4TCxRQUFRdk0sRUFBRTZMLEdBQUcvSyxHQUFHMkIsRUFBRSxLQUE0TCxPQUF2THpDLEVBQUV5QyxFQUFFekMsRUFBRVMsRUFBRWpCLEVBQUVDLEVBQUVlLEdBQUdzTCxFQUFFLDBCQUEwQmhMLEdBQUcyQixHQUFHcUosRUFBRSwrQkFBbUNyTSxHQUFKRCxFQUFFaUQsR0FBTXNHLE1BQU15RCxLQUFLaE0sRUFBRWhCLEVBQUV1SixNQUFNMEQsTUFBTSxJQUFJak0sRUFBRVAsUUFBUXlNLEdBQUd2SCxLQUFLM0YsSUFBSUMsR0FBRyxJQUFJQSxFQUFFUSxRQUFRNkwsRUFBRSxrQkFBa0J2TSxHQUFVa0QsQ0FBQyxFQUFFa0ssR0FBRyxTQUFTcE4sRUFBRUMsRUFBRUMsRUFBRWUsR0FBR2pCLEVBQUVxTixHQUFHck4sR0FBRzZNLEdBQUdqSCxLQUFLMUYsSUFBSXFNLEVBQUUsb0JBQW9CdE0sRUFBRXFOLEdBQUdyTixHQUFHZ0IsRUFBRUEsR0FBR0EsRUFBRVAsT0FBTzRNLEdBQUdyTSxHQUFHLEtBQUssSUFBSUMsRUFDeHJDLFNBQVNLLEdBQUcsT0FBTytILG1CQUFtQi9ILEdBQUd5RyxRQUFRLE9BQU8sSUFBSSxFQUFFLE1BQU0sQ0FBQ3NCLG1CQUFtQnRKLEVBQUV1TixZQUFZdkYsUUFBUSxPQUFPLEtBQUtBLFFBQVEsT0FBTyxLQUFLLE1BQU05RyxFQUFFbEIsRUFBRXdOLFNBQVMsTUFBTXRNLEVBQUVqQixHQUFHZ0IsRUFBRSxRQUFRQyxFQUFFRCxHQUFHLEdBQUcsc0JBQXNCakIsRUFBRXlOLEVBQUUsT0FBT3ZNLEVBQUVsQixFQUFFeU4sR0FBRyxHQUFHek4sRUFBRTBOLEVBQUUsT0FBT3hNLEVBQUVsQixFQUFFME4sR0FBRyxHQUFHMU4sRUFBRUosR0FBRyxNQUFNc0IsRUFBRWxCLEVBQUVKLElBQUksR0FBRyxPQUFPc0IsRUFBRWhCLElBQUl5SixLQUFLLEdBQUcsRUFBRTBELEdBQUcsU0FBU3JOLEdBQUcsTUFBTUEsRUFBRTJOLE9BQU8sSUFBSXBCLEVBQUUsaUJBQWlCLElBQUksSUFBSXRNLEVBQUVELEVBQUU0TixVQUFVLEdBQUc1TSxNQUFNLEtBQUtkLEVBQUUsR0FBR0QsRUFBRVMsUUFBUSxDQUFhLElBQVpWLEVBQUVDLEVBQUUrTSxTQUFjdE0sUUFBUSxHQUFHVixFQUFFOEMsUUFBUSxNQUF3QyxHQUFHLEVBQUU5QyxFQUFFOEMsUUFBUSxLQUFLLENBQUM3QyxFQUFFMEMsUUFBUTNDLEdBQ2xnQixLQUFLLE9BRDJidU0sRUFBRSw0QkFDNWJyTSxFQUFFdUgsS0FBS3pILEVBQUUsQ0FBQ0EsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJaUIsRUFBRSxFQUFFQyxFQUFFakIsRUFBRVMsT0FBT08sRUFBRUMsSUFBSUQsRUFBRSxDQUFDLElBQUlNLEVBQUV0QixFQUFFZ0IsR0FBR0QsTUFBTSxLQUFLUCxFQUFFcUksbUJBQW1CdkgsRUFBRSxJQUFJMkIsRUFBRTRGLG1CQUFtQnZILEVBQUUsSUFBSSxHQUFHQSxFQUFFYixRQUFRRCxHQUFHeUMsSUFBSWxELEVBQUVTLEdBQUdULEVBQUVTLElBQUl5QyxFQUFFLENBQXVELElBQXREakQsRUFBRSxJQUFJQyxFQUFFeUosS0FBSyxLQUFLK0MsR0FBRzlHLEtBQUszRixJQUFJc00sRUFBRSxrQkFBa0JyTSxFQUFFLEVBQU1lLEVBQUUwTCxHQUFHak0sT0FBT1IsRUFBRWUsSUFBSWYsRUFBRXlNLEdBQUd6TSxHQUFHMEYsS0FBSzNGLElBQUlzTSxFQUFFLGtCQUF1RSxNQUFNLENBQUNnQixXQUFXdE4sRUFBRXVOLFFBQXpFdE4sRUFBRTJOLEdBQUc3TixFQUFFLEtBQUksR0FBd0V5TixFQUFwRXhNLEVBQUU0TSxHQUFHN04sRUFBRSxNQUFpRTBOLEVBQTNEeE0sRUFBRTJNLEdBQUc3TixFQUFFLE1BQXdESixHQUFsREksRUFBRTZOLEdBQUc3TixFQUFFLEtBQWdELEVBQUVzTixHQUFHLFNBQVN0TixHQUFHLElBQUksSUFBSUMsRUFBRSxHQUFHQyxFQUFFLEVBQUVlLEVBQUVqQixFQUFFVSxPQUFPUixFQUFFZSxJQUFJZixFQUFFLENBQUMsSUFBSWdCLEVBQUVsQixFQUFFRSxHQUFHOEgsUUFBUSxNQUFNLEtBQUtBLFFBQVEsS0FBSyxLQUFLOEUsR0FBR2xILEtBQUsxRSxJQUFJakIsRUFBRXdILEtBQUt2RyxFQUFFLENBQUMsT0FBT2pCLEVBQUUwSixLQUFLLElBQUksRUFDbGdCa0UsR0FBRyxTQUFTN04sRUFBRUMsRUFBRUMsR0FBa0MsS0FBL0JGLEVBQUVBLEVBQUVDLEtBQU9DLEdBQUdxTSxFQUFFLFlBQVl0TSxHQUFNRCxFQUFFLENBQUMsR0FBRzRNLEdBQUdoSCxLQUFLNUYsR0FBRyxPQUFPQSxFQUFFdU0sRUFBRSxZQUFZdE0sRUFBRSxDQUFDLE9BQU8sSUFBSSxFQUFFa04sR0FBRyw0RUFBNEVELEdBQUcsU0FBU0QsR0FBRyxRQUFRYSxHQUFHLFdBQVcsSUFBSTlOLEVBQUV1TCxHQUFHckUsR0FBRytDLE1BQU0sSUFBSWpLLEVBQUUsTUFBTVksTUFBTSxZQUFZLE9BQU9aLENBQUMsRUFBRXNNLEdBQUdySyxFQUFFLFNBQVNqQyxFQUFFQyxFQUFFQyxFQUFFZSxHQUErQixPQUEzQmpCLEVBQUVBLEVBQUUsS0FBS3VNLEVBQUUsZ0JBQXNCLDBCQUEwQmEsR0FBR3BOLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUUsRUFBRSxJQUFJOE0sR0FBR0MsVUFBVSxZQUFZQyxHQUFHLDRCQUE0QkMsR0FBRyxTQUFTbE8sRUFBRUMsR0FBRyxJQUFJLElBQUlDLEVBQUUsR0FBR2UsRUFBRSxFQUFFQSxFQUFFakIsRUFBRVUsU0FBU08sRUFBRSxDQUFDLElBQUlDLEVBQUVsQixFQUFFaUIsR0FBR0MsR0FBRyxFQUFFb0csR0FBR2pGLEtBQUtwQyxFQUFFaUIsSUFBSWhCLEVBQUV1SCxLQUFLdkcsRUFBRSxDQUFDLE9BQU9oQixDQUFDLEVBQUVpTyxHQUFHLFdBQVcsSUFBSW5PLEVBQUVzTCxFQUFFOEMsTUFBTSxZQUFPLElBQVNwTyxFQUFFQSxHQUFHQSxJQUFJZ0MsT0FBT2hDLElBQUlBLEVBQUV3SixNQUFNeUUsSUFBSWpPLEVBQUVzTCxFQUFFOEMsTUFBTSxLQUFLbkgsRUFBRW9ILGdCQUFlck8sRUFBRWlILEVBQUVvSCxjQUFjLG1CQUFtQnJPLEVBQUVBLEVBQUVvTyxPQUFPcE8sRUFBRXNPLGFBQWEsVUFBVSxLQUFNdE8sSUFBSWdDLE9BQU9oQyxJQUFJQSxFQUFFd0osTUFBTXlFLElBQUkzQyxFQUFFOEMsTUFBTXBPLEVBQUVzTCxFQUFFOEMsTUFBTSxLQUFXLElBQUksRUFBRUcsR0FBRyxTQUFTdk8sR0FBRyxHQUFHLFdBQVdpSCxFQUFFd0QsV0FBVytELEdBQUd4TyxPQUFPLENBQUMsSUFBSUMsRUFBRWtPLEtBQUtqTyxFQUFFLEdBQUcsT0FBT0QsSUFBSUMsRUFBRSxXQUN0MkJELEVBQUUsS0FBS0QsRUFBRSxJQUFJK04sR0FBRyxTQUFTVSxVQUFVek8sR0FBRyxJQUFJRSxFQUFFLE1BQU02TixHQUFHLElBQUk5RyxFQUFFeUgsTUFBTUMsR0FBR0EsR0FBR3BMLFdBQVd2RCxHQUFHQSxFQUFFLENBQUMsRUFBRXdPLEdBQUcsU0FBU3hPLEdBQUcsSUFBSUMsRUFBRWdILEVBQUVOLGNBQWNvSCxJQUFJOU4sRUFBRTJPLGFBQWEsTUFBTUQsR0FBR0EsR0FBR2xMLGdCQUFnQnpELEdBQUdBLEdBQVUsUUFBUEEsRUFBRW1PLE9BQWVsTyxFQUFFMk8sYUFBYSxRQUFRNU8sR0FBR0MsRUFBRTRPLE1BQU0sUUFBUTdPLEVBQUVpSCxFQUFFNkgscUJBQXFCZixJQUFJLElBQUkvTixFQUFFcUssV0FBVzBFLGFBQWE5TyxFQUFFRCxJQUFJaUgsRUFBRStILE1BQU0vSCxFQUFFZ0ksTUFBTWhJLEVBQUVpSSxpQkFBaUJ0SSxZQUFZM0csRUFBRSxFQUFFa1AsR0FBRyxTQUFTblAsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRCxHQUFHQSxFQUFFbVAsR0FBRyxHQUFHbFAsRUFBRSxJQUFJLElBQUllLEVBQUUsRUFBRUEsRUFBRXNFLEVBQUU3RSxPQUFPTyxJQUFJLENBQUMsSUFBSUMsRUFBRXFFLEVBQUV0RSxHQUFHLEdBQUdNLEVBQUVnRSxFQUFFdEUsR0FBRyxHQUFHTSxHQUFHNEcsRUFBRWpJLEVBQUVnQixJQUFJSyxFQUFFckIsRUFBRWdCLEdBQUdsQixFQUFFQyxFQUFFLENBQUMsRUFBRW9QLEdBQUcsU0FBU3JQLEVBQUVDLEVBQUVDLEdBQUdvUCxJQUFHLFdBQVcsSUFBSXJPLEVBQ3pmaEIsSUFBSXNMLEdBQUdyRSxHQUFHK0MsTUFBTWhILEVBQUUwRixFQUFFLElBQUlWLEtBQUtBLElBQUloSCxFQUFFZ0MsRUFBRTRJLEdBQUc1TCxHQUFHLElBQUlnQixHQUFHakIsRUFBRWlCLEVBQUUsR0FBRWYsRUFBRSxFQUFFcVAsR0FBRyxTQUFTdlAsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRCxHQUFHLENBQUMsRUFBRSxtQkFBbUJBLEtBQUlDLEVBQUUsQ0FBQyxHQUFJc1AsU0FBU3ZQLEdBQUdrUCxHQUFHblAsRUFBRUUsR0FBR0QsRUFBRUQsRUFBRUEsRUFBRWdCLE1BQU0sS0FBSyxHQUFHLElBQUlDLEVBQUVmLEVBQUVnRCxHQUFHNEssS0FBSzVNLEVBQUUrQixFQUFFcUksRUFBRSxLQUFLckQsS0FBSyxHQUFHL0csRUFBRSxPQUFPakIsRUFBRVMsT0FBTyxDQUFDVixFQUFFLEdBQUcsSUFBSSxJQUFJdUIsRUFBRSxLQUFLQSxFQUFFdEIsRUFBRStNLFNBQVMsQ0FBQyxJQUFJdk0sRUFBRWMsRUFBRVAsTUFBTSxLQUFLUCxFQUFFUyxFQUFFSyxJQUFJTCxFQUFFVCxFQUFFLElBQUksTUFBTUEsRUFBRSxJQUFJLEtBQUtRLEVBQUUsSUFBSWlDLEVBQUVsRCxFQUFFVSxRQUFRVixFQUFFQSxFQUFFVSxPQUFPLElBQUksS0FBSytPLEVBQUV2TSxFQUFFQSxHQUFHQSxFQUFFd00sTUFBTWpQLElBQUlnUCxFQUFFLENBQUNDLEtBQUtqUCxFQUFFa1AsRUFBRSxJQUFJM1AsRUFBRXlILEtBQUtnSSxJQUFJQSxFQUFFRSxFQUFFbEksS0FBS2xHLEVBQUUsQ0FBQyxJQUFJcU8sRUFBRTVQLEVBQUVVLE9BQU8sR0FBRyxFQUFFa1AsRUFBRSxDQUFDLElBQUlDLEVBQUUzUCxFQUFFc1AsU0FBU0ssSUFBSTNQLEVBQUVzUCxTQUFTLFdBQVcsS0FBS0ksR0FBR0MsR0FBRyxFQUFFLENBQUMsS0FBSzVQLEVBQUVELEVBQUVnTixTQUFTOEMsR0FBRzdQLEVBQUUwUCxFQUFFelAsRUFDcGZELEVBQUV5UCxLQUFLLE1BQU1JLEdBQUc3UCxHQUFHLEdBQUdDLEVBQUVlLEVBQUUsRUFBRTZPLEdBQUcsU0FBUzlQLEVBQUVDLEVBQUVDLEdBQUdGLEVBQUV1SCxHQUFHdkgsSUFBSSxHQUFHLElBQUlpQixFQUFFaEIsRUFBRXVQLFNBQVN0TyxFQUFFakIsRUFBRThQLE9BQU94TyxFQUFFdEIsRUFBRStQLFFBQVF2UCxFQUFFUixFQUFFZ1EsVUFBVS9NLEVBQUVqRCxFQUFFaVEsUUFBUVQsT0FBRSxFQUFPLG1CQUFtQnZNLElBQUl1TSxFQUFFdk0sR0FBRyxJQUFJME0sRUFBRSxLQUFLQyxHQUFFLEVBQUcsR0FBR3RPLElBQUlkLElBQUljLEdBQUdkLEVBQUUsS0FBSyxnRkFBZ0Z5QyxFQUFFRCxFQUFFNEksR0FBRzNMLEdBQUcsSUFBSSxJQUFJc0gsT0FBTyxJQUFJMkksRUFBRWxOLEVBQUU0SSxHQUFHM0wsR0FBRyxJQUFJLElBQUlzSCxPQUFPMEUsRUFBRSxHQUFHTSxPQUFPdEosR0FBR3VKLEVBQUUsU0FBUzNHLEVBQUV0RSxHQUFJLEdBQUdxTyxFQUFFLE9BQU8sRUFBRTdJLEVBQUVvSixhQUFhUixHQUFHTyxFQUFFMUksS0FBS25GLE1BQU02TixFQUFFRSxHQUFHLElBQUlwTCxJQUFLMEQsR0FBRyxDQUFDLEdBQUdvSCxRQUFRLENBQUMsR0FBR08sT0FBd0MsR0FBakNyTCxFQUFHQSxFQUFHL0QsR0FBR0EsR0FBRytCLEVBQUVxSSxFQUFFLEtBQUssSUFBSTdELEtBQUt2RyxHQUFNTSxFQUFHLENBQUM0SyxHQUFHLE1BQU10RyxFQUNuZm9HLEdBQUcsSUFBSW1ELEdBQUc3TixFQUFHdEIsRUFBRXVQLEVBQUUsQ0FBQyxRQUFRckQsR0FBRyxNQUFNdEcsRUFBRW9HLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUzSyxJQUFJcU8sRUFBRTVJLEVBQUV5QixZQUFXLFdBQVdvSCxHQUFFLEVBQUdwUCxHQUFHLEdBQUVjLElBQUksSUFBSThPLEVBQUVuQyxHQUFHbE8sRUFBRW1RLEdBQUcsR0FBR0UsRUFBRTNQLE9BQU8sQ0FBQzJQLEVBQUVuQyxHQUFHbE8sRUFBRWtELEdBQUcsSUFBSXFOLEVBQUV0TixFQUFFcUksRUFBRSxLQUFLLElBQUluRyxFQUFFb0wsRUFBRTdQLE9BQTBNLEdBQW5NNlAsRUFBRXBMLEdBQUcsU0FBU1csR0FBRyxJQUFJQSxFQUFFLE9BQU8sRUFBRXNHLEdBQUcsTUFBTWlFLEVBQUVuRSxHQUFHLElBQUkxSyxFQUFHLFNBQVNnUCxHQUFJRCxFQUFFcEwsR0FBRyxLQUFLc0gsRUFBRTRELEVBQUV2SyxJQUFJNkYsSUFBRyxXQUFXMUssR0FBR0EsSUFBSXVQLEdBQUksR0FBRSxFQUFFdkwsRUFBRyxXQUFXLElBQUl1TCxFQUFHRCxFQUFFcEwsRUFBRSxHQUFHcUwsR0FBSUEsR0FBSSxFQUFFLEVBQUVyTCxHQUFHb0wsRUFBRXBMLEVBQUUsR0FBR29MLEVBQUVwTCxHQUFHLFdBQVczRCxFQUFHeUQsRUFBRyxFQUFFekQsRUFBR3lELEVBQUcsRUFBS29MLEVBQUUzUCxPQUFPLENBQUMsSUFBSStQLEVBQUcsVUFBVW5GLEVBQUVqQyxJQUFJVixFQUFFOEgsR0FBSSxTQUFTM0ssR0FBR3lLLEVBQUVwTCxHQUFHVyxHQUFHNkMsRUFBRThILEdBQUksSUFBSSxFQUFFelEsRUFBRStNLEdBQUc3TSxFQUFFbVEsRUFBRSxRQUFRSSxFQUFHdk4sR0FBR0EsRUFBRXVFLEtBQUtuRixNQUFNWSxFQUFFbU4sR0FBR2pFLEdBQUcsTUFBTWlFLEVBQUVuRSxHQUFHak0sRUFBRXlRLE1BQU0xSixFQUFFMkosWUFDbGZwQyxHQUFHdk8sR0FBR3dPLEdBQUd4TyxFQUFFLE1BQU11USxFQUFFcEwsR0FBR2lDLEdBQUcsTUFBTXFGLEVBQUU0RCxJQUFJcFAsR0FBR0EsR0FBRyxFQUFFME4sR0FBR3ZMLEdBQUcsYUFBaUJrTSxHQUFHLFNBQVN0UCxFQUFFQyxHQUFHLEdBQUdxTCxFQUFFc0YsS0FBSyxFQUFFdEYsRUFBRXVGLElBQUksSUFBSSxPQUFPN1EsR0FBRyxDQUFDLE1BQU1FLEdBQUdELEdBQUdBLEVBQUVDLEdBQUdvTCxFQUFFdUYsTUFBTXRCLEdBQUcsZUFBYyxXQUFXLElBQUkvUCxPQUFPc1IsT0FBT0MsS0FBSzdRLEVBQUUsQ0FBQyxNQUFNZSxHQUFHLE1BQU1mLENBQUUsQ0FBQyxHQUFFLE1BQU0sSUFBSSxPQUFPRixHQUFHLENBQUMsTUFBTUUsR0FBRyxNQUFNRCxHQUFHQSxFQUFFQyxHQUFHQSxDQUFFLENBQUMsRUFBRXlJLEVBQUVxSSxLQUFLLFNBQVNoUixFQUFFQyxHQUFHLE9BQU9xUCxJQUFHLFdBQVcsT0FBT0MsR0FBR3ZQLEVBQUVDLEVBQUUsR0FBRSxFQUFFLElBQUlnUixHQUFHLFNBQVNqUixHQUFHLElBQUlDLEVBQUVULE9BQU9zUixPQUFPdFIsT0FBT3NSLFFBQVEsQ0FBQyxFQUFnQixPQUFkN1EsRUFBRUQsR0FBR0MsRUFBRUQsSUFBSSxHQUFVQyxFQUFFRCxFQUFFLEVBQUVrUixHQUFHLFNBQVNsUixHQUFHLElBQUlDLEVBQUVULE9BQU9zUixPQUFPdFIsT0FBT3NSLFFBQVEsQ0FBQyxFQUFzQixPQUFwQjdRLEVBQUVrUixLQUFLblIsR0FBR0MsRUFBRWtSLEtBQUssQ0FBQyxFQUFTbFIsRUFBRWtSLEdBQUcsRUFBRUMsR0FBRyxTQUFTcFIsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxrQkFBa0I0RixLQUFLNUYsRUFBRXlILEtBQUssRUFBRTFDLEVBQUUsU0FBUy9FLEVBQUVDLEVBQUVDLEdBQUcsR0FBR0QsR0FBRyxpQkFBa0JBLEVBQUUsSUFBSSxJQUFJZ0IsS0FBS2hCLEdBQUdKLE9BQU9PLFVBQVVnSSxlQUFlL0YsS0FBS3BDLEVBQUVnQixJQUFJZixHQUFHLFdBQVdlLFFBQUcsSUFBcUJoQixFQUFFZ0IsS0FBS2pCLEVBQUVpQixJQUFJaEIsRUFBRWdCLElBQUksaUJBQWtCakIsRUFBRWlCLElBQUksaUJBQWtCaEIsRUFBRWdCLEtBQUttUSxHQUFHcFIsRUFBRWlCLE1BQU1tUSxHQUFHblIsRUFBRWdCLElBQUk4RCxFQUFFL0UsRUFBRWlCLEdBQUdoQixFQUFFZ0IsSUFBSWhCLEVBQUVnQixJQUFJLGlCQUM1eUJoQixFQUFFZ0IsSUFBSWpCLEVBQUVpQixHQUFHbVEsR0FBR25SLEVBQUVnQixJQUFJLEdBQUcsQ0FBQyxFQUFFOEQsRUFBRS9FLEVBQUVpQixHQUFHaEIsRUFBRWdCLEtBQUtqQixFQUFFaUIsR0FBR2hCLEVBQUVnQixHQUFHLEVBQUVvUSxHQUFHLFNBQVNyUixHQUFHLEdBQUdBLElBQUksUUFBUTRGLEtBQUs1RixHQUFHLENBQUMsS0FBSyxHQUFHQSxFQUFFc1IsV0FBV3RSLEVBQUVVLE9BQU8sSUFBSVYsRUFBRUEsRUFBRTROLFVBQVUsRUFBRTVOLEVBQUVVLE9BQU8sR0FBRyxJQUFJLElBQUlULEVBQUVULE9BQU8rUixLQUFLQyxNQUFNeFIsRUFBRSxDQUFDLE1BQU1FLEdBQUcsQ0FBQyxHQUFHLGlCQUFrQkQsRUFBRSxPQUFPQSxFQUFFLElBQUlBLEVBQUUsSUFBSzRDLFNBQVMsV0FBVzdDLEVBQUUsTUFBM0IsRUFBb0MsQ0FBQyxNQUFNRSxHQUFHLENBQUMsR0FBRyxpQkFBa0JELEVBQUUsT0FBT0EsRUFBRSxJQUFJQSxFQUFFLElBQUs0QyxTQUFTLFlBQVk3QyxFQUFFLE9BQTVCLEVBQXNDLENBQUMsTUFBTUUsR0FBRyxDQUFDLE1BQU0saUJBQWtCRCxFQUFFQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUV3UixHQUFHLFNBQVN6UixFQUFFQyxHQUFHLElBQUlDLEVBQUUsQ0FBQ3dSLFlBQU8sR0FBUTFSLEVBQUVVLFFBQVFWLEVBQUVBLEVBQUVVLE9BQU8sSUFBSWIsT0FBT3VJLGVBQWUvRixLQUFLckMsRUFBRUEsRUFBRVUsT0FDcmYsR0FBRyxnQkFBVyxJQUFxQlYsRUFBRUEsRUFBRVUsT0FBTyxHQUFHZ1IsU0FBU3hSLEVBQUVGLEVBQUUyUixPQUFPNU0sRUFBRTdFLEVBQUVELEdBQUdELEVBQUV5SCxLQUFLdkgsRUFBRSxFQUFFMFIsR0FBRyxTQUFTNVIsR0FBR2tSLElBQUcsR0FBSSxJQUFJalIsRUFBRVQsT0FBT3FTLFFBQVEzUixFQUFFK1EsR0FBRyxNQUFNaFEsRUFBRXpCLE9BQU9zUyxNQUFNN1IsR0FBR0EsSUFBSWdCLElBQUl3USxHQUFHdlIsRUFBRUQsR0FBR1QsT0FBT3NTLE1BQU03UixHQUFHQSxFQUFFZ1IsR0FBRyxNQUFNLElBQUkvUCxFQUFFd0YsU0FBU3FMLFNBQVNyTCxTQUFTb0kscUJBQXFCLFdBQVcsR0FBRzdOLEVBQUUsR0FBRyxJQUFJTSxFQUFFLEdBQUdBLEVBQUVrRyxLQUFLbkYsTUFBTWYsRUFBRTBQLEdBQUcsT0FBTyxJQUFJLElBQUl4USxFQUFFLEVBQUVBLEVBQUVTLEVBQUVSLFNBQVNELEVBQUUsSUFBSSxJQUFJeUMsRUFBRWhDLEVBQUVULEdBQUdnUCxFQUFFLEVBQUVBLEVBQUVsTyxFQUFFYixTQUFTK08sRUFBRXZNLEVBQUU4TyxLQUFLLEdBQUc5TyxFQUFFOE8sSUFBSWxQLFFBQVF2QixFQUFFa08sS0FBS3hPLEVBQUV3RyxLQUFLdkUsR0FBcUUsSUFBbEUsR0FBR2pDLEVBQUVQLFFBQVEsRUFBRVEsRUFBRVIsUUFBUVEsRUFBRUEsRUFBRVIsT0FBTyxHQUFHc1IsS0FBSy9RLEVBQUV3RyxLQUFLdkcsRUFBRUEsRUFBRVIsT0FBTyxJQUFRUSxFQUFFLEVBQUVBLEVBQUVELEVBQUVQLFNBQVNRLEVBQUVELEVBQUVDLEdBQUdvTixhQUFhLG9CQUNyZ0JyTixFQUFFQyxHQUFHME4sYUFBYSxrQkFBaUIsR0FBMkJyTixHQUF0QkEsRUFBRU4sRUFBRUMsSUFBb0IsSUFBZlQsRUFBRWMsRUFBRTBRLFdBQWlCLEdBQUd4UixFQUFFYyxFQUFFMlEsVUFBVTNRLEVBQUU0USxhQUFhNVEsRUFBRTZRLFdBQVc3USxFQUFFdUYsV0FBVyxRQUFNLEdBQVF2RixFQUFFOFAsR0FBRzlQLEtBQUt0QixFQUFFd0gsS0FBS2xHLElBQThCLElBQTFCdkIsR0FBR3lSLEdBQUd2UixFQUFFRixHQUFjQSxFQUFFLEVBQU1DLEdBQW5CZ0IsRUFBRWdRLEdBQUcsT0FBa0J2USxPQUFPVixFQUFFQyxJQUFJRCxFQUFFK0UsRUFBRW1NLEtBQUtqUSxFQUFFakIsSUFBRyxHQUFtQixJQUFKQSxFQUFFLEVBQU1DLEdBQW5CZ0IsRUFBRWdRLEdBQUcsT0FBa0J2USxPQUFPVixFQUFFQyxJQUFJRCxFQUFFK0UsRUFBRW1NLEtBQUtqUSxFQUFFakIsSUFBRyxHQUFRLElBQUpBLEVBQUUsRUFBTUMsRUFBRUMsRUFBRVEsT0FBT1YsRUFBRUMsSUFBSUQsRUFBRStFLEVBQUVtTSxLQUFLaFIsRUFBRUYsSUFBRyxFQUFHLEVBQUVxUyxFQUFFLFNBQVNyUyxHQUFHLElBQUlDLEVBQUVpUixLQUFLLElBQUlsUixFQUFFLE9BQU9DLEVBQWlCLElBQUksSUFBSUMsRUFBRSxFQUFFZSxHQUEzQmpCLEVBQUVBLEVBQUVnQixNQUFNLE1BQXFCTixPQUFPVCxHQUFHLGlCQUFrQkEsR0FBR0MsRUFBRWUsSUFBSWYsRUFBRUQsRUFBRUEsRUFBRUQsRUFBRUUsSUFBSSxPQUFPQSxJQUFJRixFQUFFVSxhQUFRLElBQVNULEVBQUVBLE9BQUUsQ0FBTSxFQUFFcVMsR0FBRyxTQUFTdFMsRUFDcmZDLEdBQUcsSUFBSUMsRUFBRSxHQUFHLGlCQUFrQkYsRUFBRSxDQUEyQixJQUExQixJQUFJaUIsRUFBRWYsRUFBRSxDQUFDLEVBQXlCZ0IsRUFBRSxFQUFFSyxHQUEzQnZCLEVBQUVBLEVBQUVnQixNQUFNLE1BQXFCTixPQUFPUSxFQUFFSyxFQUFFLElBQUlMLEVBQVlELEVBQUVBLEVBQUVqQixFQUFFa0IsSUFBVCxDQUFDLEVBQWNELEVBQUVqQixFQUFFa0IsSUFBSWpCLENBQUMsTUFBTUMsRUFBRUYsRUFBRTRSLEdBQUcxUixFQUFFLEVBQU1xUyxHQUFHLFdBQVcsSUFBSXZTLEVBQUVSLE9BQU9nVCxhQUFheFMsSUFBSUEsRUFBRXlTLGFBQWF6UyxFQUFFLHVCQUF1QkEsRUFBRSxxQkFBcUJBLEVBQUV5UyxZQUFZeFAsRUFBRXFJLEVBQUUsS0FBSyxJQUFJN0QsS0FBS3pILEdBQUdSLE9BQU9nVCxrQkFBYSxFQUFPLEVBQU1FLEdBQUcsQ0FBQ2xELFNBQVMsRUFBRW1ELFNBQVMsRUFBRUMsYUFBYSxFQUFFQyxhQUFhLEVBQUVDLHNCQUFzQixFQUFFQyxzQkFBc0IsRUFBRUMsTUFBTSxHQUFHQyxJQUFHLEVBQUdDLEdBQUdqTCxJQUFJa0wsR0FBRyxXQUFXLElBQUlGLEdBQUcsQ0FBQyxJQUFJLElBQUlqVCxFQUFFMEcsU0FBU29JLHFCQUFxQixRQUFRN08sRUFBRSxFQUFFQSxFQUFFRCxFQUFFVSxTQUFTVCxFQUFFLENBQUMsSUFBSUMsRUFBRUYsRUFBRUMsR0FBRytELEtBQUtvUCxjQUFjLEdBQUcsR0FBR2xULEVBQUVtVCxZQUFZLGlCQUFpQixHQUFHLENBQUNuVCxFQUFFQSxFQUFFME4sVUFBVSxJQUFJLElBQUkzTSxFQUFFakIsRUFBRUMsR0FBR3FULFFBQVFaLEdBQUd4UyxJQUFJZSxJQUFJaVMsR0FBR2hULEdBQUdlLEVBQUUsQ0FBQyxDQUFDLEdBQUd6QixPQUFPZ0IsT0FBT2hCLE9BQU8rVCxJQUFvQyxJQUFJLElBQUlyUyxLQUF2Q2xCLEVBQUUwRyxTQUFTUyxTQUFTMUYsV0FBd0JpUixHQUFHLEVBQUVBLEdBQUd4UixLQUFLakIsRUFBRW1GLEVBQUVwRixFQUFFa0IsRUFBRSxPQUFPZ1MsR0FBR2hTLEdBQUdqQixHQUFHZ1QsSUFBRyxDQUFFLENBQWUsT0FBZC9SLEVBQUUrRyxJQUFJTSxFQUFFMkssR0FBR2hTLEdBQVVBLENBQUMsRUFBRXNTLEdBQUcsU0FBU3hULEdBQUcsU0FBU0EsRUFBRTJTLFVBQzl6QjNTLEVBQUVnVCxPQUFPaFQsRUFBRXdQLFNBQVMsRUFBTWlFLEdBQUdqVSxPQUFPa0UsUUFBUWdRLEdBQUcsU0FBUzFULEdBQUd5VCxJQUFJQSxHQUFHRSxLQUFLRixHQUFHRSxJQUFJM1QsRUFBRSxFQUFNNFQsR0FBRyxXQUFXLFFBQVF0SSxFQUFFdkksRUFBRSxFQUFFOFEsR0FBRyxXQUFXLEVBQU1DLEVBQUU3USxFQUFFcUksRUFBRSxLQUFLckQsS0FBSzhMLEdBQUcsU0FBUy9ULEdBQUcsSUFBSSxJQUFJQyxLQUFLNlQsRUFBRTlULEVBQUU4VCxFQUFFN1QsR0FBRyxFQUFFK1QsR0FBRyxTQUFTaFUsRUFBRUMsSUFBSUQsRUFBRThULEVBQUU5VCxLQUFLQSxFQUFFaVUsTUFBTWhVLElBQUlELEVBQUVpVSxNQUFNaFUsRUFBRSxFQUFNaVUsR0FBT0MsR0FBRywrRUFBK0VDLEdBQUcsc0ZBQXNGQyxHQUFHLFNBQVNyVSxHQUFHLElBQUlDLEVBQUVvUyxFQUFFLGtDQUFnSyxHQUE5SCxpQkFBa0JwUyxHQUFHLElBQUlBLEVBQUVTLFNBQVNULEVBQUUsTUFBTSxNQUFNQSxJQUFJQSxFQUFFVCxPQUFPOFUsbUJBQW1CLGlCQUFrQnJVLEdBQUcsSUFBSUEsRUFBRVMsU0FBU1QsRUFBRSxNQUFTLE1BQU1BLEVBQUUsQ0FBQyxJQUFJQyxFQUFFVixPQUFPK1UsT0FBT3JVLElBQUlELEVBQUVDLEVBQUVzVSxTQUFTLENBQ2ptQixNQURrbUIsaUJBQWtCdlUsR0FBRyxJQUFJQSxFQUFFUyxTQUFTVCxFQUFFLE1BQU0sTUFBTUEsSUFBSUQsRUFBRUEsR0FBR1IsT0FBTzJILFNBQVM4QyxLQUNydEIsT0FEMHRCaEssRUFBRW1GLEVBQUVwRixFQUFFLGFBQ3J1QixRQUFlQyxHQUFHQSxFQUFFRCxFQUFFd0osTUFBTTJLLEtBQUtsVSxFQUFFLEdBQUcsT0FBVSxNQUFNQSxFQUFTLE1BQWlCLEtBQVpBLEVBQUUrQixPQUFPL0IsSUFBU1MsU0FBU1QsRUFBRSxNQUFhQSxFQUFDLEVBQUV3VSxHQUFHLFNBQVN6VSxHQUFHLElBQUlDLEVBQUVvUyxFQUFFLHFDQUErSSxNQUExRyxpQkFBa0JwUyxHQUFHLEdBQUdBLEVBQUVTLFNBQVNULEVBQUUsTUFBTSxNQUFNQSxJQUFJQSxHQUFHRCxHQUFHQSxHQUFHUixPQUFPMkgsU0FBUzhDLE1BQU1ULE1BQU00SyxLQUFLcFUsRUFBRSxHQUFHLE1BQVMsTUFBTUMsRUFBUyxNQUFpQixJQUFaQSxFQUFFK0IsT0FBTy9CLElBQVFTLFNBQVNULEVBQUUsTUFBYUEsRUFBQyxFQUFNeVUsR0FBR2pILEVBQUVrSCxPQUFFLEVBQU9DLEVBQUUsU0FBUzVVLEdBQUcsSUFBSSxPQUFPaUMsRUFBRXNQLEtBQUtDLE1BQU1uUCxLQUFLSixFQUFFc1AsS0FBS3ZSLEVBQUUsQ0FBQyxNQUFNQyxHQUFHLE9BQU0sQ0FBRSxDQUFDLEVBQUUwUCxFQUFFLFNBQVMzUCxHQUFHLE9BQU9ILE9BQU9PLFVBQVVxQixTQUFTWSxLQUFLckMsRUFBRSxFQUFFNlUsR0FBR2xGLEVBQUUsR0FBR21GLEdBQUduRixFQUFFLElBQUlqUSxLQUFLLElBQUlxVixHQUFHcEYsR0FBRSxHQUFJcUYsR0FBR3JGLEVBQUUsSUFBSXNGLEdBQUd0RixFQUFFLENBQUMsR0FBR3VGLEdBQUd2RixFQUFFLElBQUl3RixFQUFFLFNBQVNuVixFQUFFQyxHQUFHLEdBQUdBLEVBQUUsSUFBSSxJQUFJQyxFQUFFLEVBQUVlLEVBQUVoQixFQUFFUyxPQUFPUixFQUFFZSxJQUFJZixFQUFFLEdBQUdGLElBQUlDLEVBQUVDLEdBQUcsTUFBTSxJQUFJd0IsVUFBVSx5Q0FBb0QsR0FBRyxjQUFkVCxTQUFTakIsR0FBcUIsRUFBQ0UsRUFBRUMsTUFBTUMsVUFBVXNDLE1BQU1MLEtBQUtwQyxHQUFHLEdBQUcsSUFBS0MsRUFBRVEsUUFBUVYsRUFBRUMsRUFBRSxHQUFHLElBQUlpQixFQUFFeU8sRUFBRTNQLEdBQUcsR0FBRyxNQUFNQSxHQUFHLG1CQUFvQkEsRUFBRW9WLFNBQVN2VixPQUFPTyxVQUFVZ0ksZUFBZS9GLEtBQUtyQyxFQUMzMUIsWUFBWWtCLElBQUlnVSxJQUFJbFYsRUFBRWdELGNBQWM3QyxPQUFPSCxFQUFFZ0QsY0FBY25ELFVBQVVxQixJQUFJK1QsSUFBSWpWLEVBQUVnRCxjQUFjN0MsT0FBT0gsRUFBRWdELGNBQWNuRCxTQUFTcUIsSUFBSThULElBQUk5VCxJQUFJMlQsSUFBSTNULElBQUk2VCxJQUFJN1QsSUFBSTRULElBQUksT0FBT0ssRUFBRW5WLEVBQUVvVixPQUFPL1MsS0FBS3JDLEdBQUdFLEdBQUcsR0FBRyxNQUFNRixFQUFFQyxFQUFFQSxFQUFFUyxRQUFRLFlBQVksR0FBR1EsSUFBSTJULEdBQUc3VSxFQUFFcVYsT0FBT3JWLEdBQUdzVixNQUFNdFYsSUFBSXNWLE1BQU10VixFQUFFQSxHQUFHQSxFQUFFLFFBQVEsSUFBSUEsR0FBRyxFQUFFLEVBQUVBLElBQUlBLEVBQUUsTUFBTUMsRUFBRUEsRUFBRVMsUUFBUXNCLE9BQU9oQyxRQUFRLEdBQUdrQixJQUFJNlQsR0FBRzlVLEVBQUVBLEVBQUVTLFFBQVFzQixTQUFTcVQsT0FBT3JWLFFBQVEsQ0FBQyxHQUFHa0IsSUFBSTRULEdBQUcsT0FBT0ssRUFBRW5WLEVBQUV1VixZQUFZbFQsS0FBS3JDLEdBQUdFLEdBQUcsR0FBR2dCLElBQUlnVSxJQUFJdkYsRUFBRTNQLEVBQUVVLFVBQVVtVSxHQUFHLENBQUM1VSxFQUFFQSxFQUFFUyxRQUFRLElBQUksSUFBSWEsRUFBRSxFQUFFLElBQUlOLEVBQUVvVSxPQUFPclYsRUFBRVUsU0FBUyxFQUFFYSxFQUFFTixJQUFJTSxFQUFFQSxJQUNyZnRCLEVBQUVBLEVBQUVTLFFBQVEsS0FBS1QsRUFBRUEsRUFBRVMsUUFBUXlVLEVBQUVuVixFQUFFdUIsR0FBR3JCLElBQUksT0FBT0QsRUFBRUEsRUFBRVMsUUFBUSxHQUFHLE1BQU0sR0FBR1EsR0FBRzhULElBQUlyRixFQUFFM1AsRUFBRVUsVUFBVW1VLEdBQUcsQ0FBcUIsSUFBcEI1VSxFQUFFQSxFQUFFUyxRQUFRLElBQUlhLEVBQUUsRUFBTXJCLEVBQUVtVixPQUFPclYsRUFBRVUsU0FBUyxFQUFFYSxFQUFFckIsSUFBSXFCLEVBQUVOLEVBQUVlLE9BQU81QixVQUFVdU4sT0FBT3RMLEtBQUtyQyxFQUFFdUIsR0FBR0wsRUFBRWMsT0FBTzVCLFVBQVVrUixXQUFXalAsS0FBS3JDLEVBQUV1QixHQUFHdEIsRUFBRUEsRUFBRVMsUUFBUSxPQUFPTyxFQUFFLE1BQU0sT0FBT0EsRUFBRSxNQUFNLE9BQU9BLEVBQUUsTUFBTSxPQUFPQSxFQUFFLE1BQU0sT0FBT0EsRUFBRSxNQUFNLE9BQU9BLEdBQUcsTUFBTUEsRUFBRSxLQUFLQSxFQUFFLElBQUlDLEVBQUUsT0FBT0EsRUFBRSxPQUFPTyxTQUFTLElBQUl1SSxPQUFPLEdBQUcsSUFBSTlJLEdBQUcsT0FBT0EsRUFBRUQsRUFBRSxJQUFTaEIsRUFBRUEsRUFBRVMsUUFBUSxHQUFHLEtBQU0sSUFBRyxXQUFXTyxFQUNuVSxPQUQwVixJQUFJTSxLQUF4QnRCLEVBQUVBLEVBQUVTLFFBQVEsSUFBSU8sRUFBRSxFQUFXakIsRUFBRUgsT0FBT08sVUFBVWdJLGVBQWUvRixLQUFLckMsRUFDcmdCdUIsU0FBaUIsS0FBWkwsRUFBRWlVLEVBQUVuVixFQUFFdUIsR0FBR3JCLE1BQWdCZSxNQUFNaEIsRUFBRUEsRUFBRVMsUUFBUSxLQUFLVCxFQUFFQSxFQUFFUyxRQUFReVUsRUFBRTVULEdBQUd0QixFQUFFQSxFQUFFUyxRQUFRLElBQUlULEVBQUVBLEVBQUVTLFFBQVFRLEdBQUlqQixFQUFFQSxFQUFFUyxRQUFRLEdBQVMsQ0FBTSxDQUFDLE9BQU9ULEVBQUUwSixLQUFLLEdBQUcsQ0FBQyxFQUFFNkwsR0FBRyx5QkFBeUJDLEdBQUcsdURBQXVEQyxHQUFHLDhEQUE4REMsR0FBRywrRUFBK0VDLEdBQUcsdURBQXVEQyxHQUFHLGtEQUFrREMsR0FBRyxjQUNqZkMsR0FBRyxRQUFRQyxHQUFHLE1BQU1DLEdBQUcsbUJBQW1CQyxHQUFHLEtBQUtDLEdBQUcscUJBQXFCQyxHQUFHLGdDQUFnQ0MsR0FBRyxnQkFBZ0JDLEdBQUcsd0JBQXdCQyxHQUFHLFVBQVVDLEdBQUcsVUFBVUMsR0FBRyxTQUFTelcsR0FBZSxHQUFaQSxFQUFFZ0MsT0FBT2hDLEdBQU13VixHQUFHNVAsS0FBSzVGLElBQUl5VixHQUFHN1AsS0FBSzVGLElBQUkwVixHQUFHOVAsS0FBSzVGLElBQUkyVixHQUFHL1AsS0FBSzVGLEdBQUcsT0FBTSxFQUFHLElBQUlDLEVBQUVELEVBQUVnSSxRQUFRNE4sR0FBRyxNQUE2QyxHQUF2QzNWLEVBQUVBLEVBQUUrSCxRQUFRNk4sR0FBRyxLQUFLNVYsRUFBRUEsRUFBRStILFFBQVE4TixHQUFHLElBQU9DLEdBQUduUSxLQUFLM0YsR0FBRyxPQUFNLEVBQTJDLEdBQXhDQSxFQUFFQSxFQUFFK0gsUUFBUWdPLEdBQUcsS0FBSy9WLEVBQUVBLEVBQUUrSCxRQUFRaU8sR0FBRyxLQUFRQyxHQUFHdFEsS0FBSzNGLElBQUlrVyxHQUFHdlEsS0FBSzNGLElBQUltVyxHQUFHeFEsS0FBSzNGLElBQUlvVyxHQUFHelEsS0FBSzNGLEtBQUtBLElBQUlBLEVBQUVBLEVBQUUrSCxRQUFRc08sR0FBRyxLQUFLLE9BQU0sRUFBR3RXLEVBQUVBLEVBQUVnSSxRQUFRdU8sR0FBRyxXQUFXdk8sUUFBUXdPLEdBQ2pnQixXQUFXdlcsT0FBRSxFQUFPLElBQUlBLEVBQUUwVSxFQUFFLENBQUNDLEVBQUU1VSxJQUFJMFcsS0FBSyxvRkFBb0YxVyxFQUFFLE1BQU0sQ0FBQyxNQUFNRSxHQUFHLE9BQU0sQ0FBRSxDQUFDLFNBQU9ELEdBQUcsSUFBSUEsRUFBRVMsU0FBT1QsRUFBRSxFQUFLLEVBQUUwVyxHQUFHLFdBQVcsSUFBSTNXLElBQUlpQyxFQUFFeUUsVUFBVSxDQUFDLEdBQUdxTCxTQUFTLElBQUlyUixPQUFPLFNBQUksSUFBU2dVLFNBQUksSUFBU0MsR0FBR2xILElBQUl6TixLQUFLLElBQUl5TixFQUFFLENBQUNpSCxHQUFHQyxHQUFFLEVBQUdsSCxHQUFHLEVBQUUsSUFBSSxJQUFJa0gsSUFBSTFTLEVBQUVzUCxNQUFNLDhDQUE4Q3RQLEVBQUVzUCxLQUFLcUYsVUFBVXZVLEtBQUtKLEVBQUVzUCxLQUFLLENBQUN2UixFQUFFLENBQUMsR0FBRSxFQUFHLElBQUlOLEtBQUssSUFBSVEsRUFBRSxXQUFXLE1BQUssSUFBSzBVLEVBQUUsU0FBUyxJQUFJQSxFQUFFLGFBQWEsR0FBRzVVLENBQUMsQ0FBQyxNQUFNQyxHQUFHLENBQUN5VSxHQUFHQyxJQUFJQyxFQUFFLFVBQzVlQSxFQUFFLFNBQWNBLEVBQUUsV0FBV0EsRUFBRSxRQUFRLENBQUMsUUFBUW5ILEVBQUV6TixDQUFDLENBQUMsQ0FBQyxFQUFFNlcsR0FBRyxTQUFTN1csR0FBRyxPQUFJLElBQUl5TixJQUFXa0osTUFBWWpDLEdBQUdFLEVBQUU2QixJQUFJelcsR0FBRSxFQUFFOFcsR0FBRyxTQUFTOVcsR0FBRyxJQUFJLElBQUl5TixFQUFFLE9BQU9rSixLQUFLaEMsRUFBRTFTLEVBQUVzUCxLQUFLcUYsVUFBVXZVLEtBQUtKLEVBQUVzUCxLQUFLdlIsR0FBR21WLEVBQUVuVixFQUFFLEVBQUUrVyxJQUFJclgsS0FBS1UsVUFBVW1WLGFBQWEsbUJBQW9CN1YsS0FBS1UsVUFBVW1WLGFBQWEsNkJBQTZCLElBQUs3VixLQUFLLEdBQUk2VixjQUFjeUIsR0FBRyxXQUFXLElBQUloWCxFQUFFTixLQUFLVSxVQUFVNlcsZUFBZTVVLEtBQUt2QixNQUFNLE1BQU0sQ0FBQyxFQUFFZCxFQUFFLElBQUlnQyxPQUFPLElBQUloQyxHQUFHZ0ssT0FBTyxHQUFHLE1BQU1oSyxFQUFFZ0MsT0FBTyxJQUFJaEMsR0FBR2dLLE9BQU8sR0FBRyxJQUFJaEksT0FBTyxJQUFJaEMsR0FBR2dLLE9BQU8sR0FBRyxJQUFJaEksT0FBTyxJQUNwZnRDLEtBQUtVLFVBQVU4VyxZQUFZN1UsS0FBS3ZCLE9BQU9rSixPQUFPLEdBQUcsSUFBSWhJLE9BQU8sSUFBSXRDLEtBQUtVLFVBQVUrVyxXQUFXOVUsS0FBS3ZCLE9BQU9rSixPQUFPLEdBQUcsSUFBSWhJLE9BQU8sSUFBSXRDLEtBQUtVLFVBQVVnWCxZQUFZL1UsS0FBS3ZCLE9BQU9rSixPQUFPLEdBQUcsSUFBSWhJLE9BQU8sSUFBSXRDLEtBQUtVLFVBQVVpWCxjQUFjaFYsS0FBS3ZCLE9BQU9rSixPQUFPLEdBQUcsSUFBSWhJLE9BQU8sSUFBSXRDLEtBQUtVLFVBQVVrWCxjQUFjalYsS0FBS3ZCLE9BQU9rSixPQUFPLEdBQUcsSUFBSWhJLE9BQU8sSUFBSXRDLEtBQUtVLFVBQVVtWCxtQkFBbUJsVixLQUFLdkIsT0FBT2tKLE9BQU8sR0FBRyxLQUFLTCxLQUFLLEdBQUcsRUFBRWpLLEtBQUtVLFVBQVVtVixZQUFZd0IsR0FBR0MsR0FBR3RYLEtBQUtVLFVBQVVtVixZQUFZLElBQUlpQyxHQUFHLFdBQVcxVyxLQUFLMlcsR0FBRyxDQUFDLEVBQU1DLEdBQUcsV0FBVzVXLEtBQUsyVyxFQUFFLEdBQUczVyxLQUFLYixFQUFFLEdBQUdhLEtBQUt5UCxFQUFFLEdBQUd6UCxLQUFLUixHQUFHLEdBQUdRLEtBQUtxSCxFQUFFLEdBQUdySCxLQUFLcUgsRUFBRSxHQUFHLElBQUksSUFBSSxJQUFJbkksRUFBRSxFQUFFQSxFQUFFYyxLQUFLMlcsSUFBSXpYLEVBQUVjLEtBQUtxSCxFQUFFbkksR0FBRyxFQUFFYyxLQUFLeUgsRUFBRXpILEtBQUs2VyxFQUFFLEVBQUU3VyxLQUFLOFcsT0FBTyxFQUFFN1UsR0FBRzJVLEdBQUdGLElBQUlFLEdBQUd0WCxVQUFVd1gsTUFBTSxXQUFXOVcsS0FBS2IsRUFBRSxHQUFHLFdBQVdhLEtBQUtiLEVBQUUsR0FBRyxXQUFXYSxLQUFLYixFQUFFLEdBQUcsV0FBV2EsS0FBS2IsRUFBRSxHQUFHLFVBQVVhLEtBQUtiLEVBQUUsR0FBRyxXQUFXYSxLQUFLeUgsRUFBRXpILEtBQUs2VyxFQUFFLENBQUMsRUFDeHhCLElBQUlFLEdBQUcsU0FBUzdYLEVBQUVDLEVBQUVDLEdBQUdBLElBQUlBLEVBQUUsR0FBRyxJQUFJZSxFQUFFakIsRUFBRU0sR0FBRyxHQUFHLGlCQUFrQkwsRUFBRSxJQUFJLElBQUlpQixFQUFFLEVBQUUsR0FBR0EsRUFBRUEsSUFBSUQsRUFBRUMsR0FBR2pCLEVBQUVxUixXQUFXcFIsSUFBSSxHQUFHRCxFQUFFcVIsV0FBV3BSLEVBQUUsSUFBSSxHQUFHRCxFQUFFcVIsV0FBV3BSLEVBQUUsSUFBSSxFQUFFRCxFQUFFcVIsV0FBV3BSLEVBQUUsR0FBR0EsR0FBRyxPQUFPLElBQUlnQixFQUFFLEVBQUUsR0FBR0EsRUFBRUEsSUFBSUQsRUFBRUMsR0FBR2pCLEVBQUVDLElBQUksR0FBR0QsRUFBRUMsRUFBRSxJQUFJLEdBQUdELEVBQUVDLEVBQUUsSUFBSSxFQUFFRCxFQUFFQyxFQUFFLEdBQUdBLEdBQUcsRUFBRSxJQUFJZ0IsRUFBRSxHQUFHLEdBQUdBLEVBQUVBLElBQUksQ0FBQyxJQUFJSyxFQUFFTixFQUFFQyxFQUFFLEdBQUdELEVBQUVDLEVBQUUsR0FBR0QsRUFBRUMsRUFBRSxJQUFJRCxFQUFFQyxFQUFFLElBQUlELEVBQUVDLEdBQWlCLFlBQWJLLEdBQUcsRUFBRUEsSUFBSSxHQUFjLENBQUN0QixFQUFFRCxFQUFFQyxFQUFFLEdBQUdDLEVBQUVGLEVBQUVDLEVBQUUsR0FBRyxJQUFJUSxFQUFFVCxFQUFFQyxFQUFFLEdBQUdpRCxFQUFFbEQsRUFBRUMsRUFBRSxHQUFHd1AsRUFBRXpQLEVBQUVDLEVBQUUsR0FBRyxJQUFJaUIsRUFBRSxFQUFFLEdBQUdBLEVBQUVBLElBQUksQ0FBQyxHQUFHLEdBQUdBLEVBQUUsR0FBRyxHQUFHQSxFQUFFLENBQUNLLEVBQUUyQixFQUFFaEQsR0FBR08sRUFBRXlDLEdBQUcsSUFBSTBNLEVBQUUsVUFBVSxNQUFNck8sRUFBRXJCLEVBQUVPLEVBQUV5QyxFQUFFME0sRUFBRSxnQkFBZ0IsR0FBRzFPLEdBQUdLLEVBQUVyQixFQUFFTyxFQUFFeUMsR0FBR2hELEVBQUVPLEdBQUdtUCxFQUFFLGFBQ2pmck8sRUFBRXJCLEVBQUVPLEVBQUV5QyxFQUFFME0sRUFBRSxZQUFZck8sR0FBR3RCLEdBQUcsRUFBRUEsSUFBSSxJQUFJc0IsRUFBRWtPLEVBQUVHLEVBQUUzTyxFQUFFQyxHQUFHLFdBQVd1TyxFQUFFdk0sRUFBRUEsRUFBRXpDLEVBQUVBLEVBQWdCLFlBQWJQLEdBQUcsR0FBR0EsSUFBSSxHQUFjQSxFQUFFRCxFQUFFQSxFQUFFc0IsQ0FBQyxDQUFDdkIsRUFBRUMsRUFBRSxHQUFHRCxFQUFFQyxFQUFFLEdBQUdBLEVBQUUsV0FBV0QsRUFBRUMsRUFBRSxHQUFHRCxFQUFFQyxFQUFFLEdBQUdDLEVBQUUsV0FBV0YsRUFBRUMsRUFBRSxHQUFHRCxFQUFFQyxFQUFFLEdBQUdRLEVBQUUsV0FBV1QsRUFBRUMsRUFBRSxHQUFHRCxFQUFFQyxFQUFFLEdBQUdpRCxFQUFFLFdBQVdsRCxFQUFFQyxFQUFFLEdBQUdELEVBQUVDLEVBQUUsR0FBR3dQLEVBQUUsVUFBVSxFQUM5T2lJLEdBQUd0WCxVQUFVa1EsT0FBTyxTQUFTdFEsRUFBRUMsR0FBRyxHQUFHLE1BQU1ELEVBQUUsTUFBQyxJQUFTQyxJQUFJQSxFQUFFRCxFQUFFVSxRQUFRLElBQUksSUFBSVIsRUFBRUQsRUFBRWEsS0FBSzJXLEVBQUV4VyxFQUFFLEVBQUVDLEVBQUVKLEtBQUt5UCxFQUFFaFAsRUFBRVQsS0FBSzZXLEVBQUUxVyxFQUFFaEIsR0FBRyxDQUFDLEdBQUcsR0FBR3NCLEVBQUUsS0FBS04sR0FBR2YsR0FBRzJYLEdBQUcvVyxLQUFLZCxFQUFFaUIsR0FBR0EsR0FBR0gsS0FBSzJXLEVBQUUsR0FBRyxpQkFBa0J6WCxHQUFFLEtBQUtpQixFQUFFaEIsR0FBSSxHQUFHaUIsRUFBRUssR0FBR3ZCLEVBQUVzUixXQUFXclEsS0FBU0EsSUFBSk0sR0FBU1QsS0FBSzJXLEVBQUUsQ0FBQ0ksR0FBRy9XLEtBQUtJLEdBQUdLLEVBQUUsRUFBRSxLQUFLLE9BQU8sS0FBS04sRUFBRWhCLEdBQUcsR0FBR2lCLEVBQUVLLEdBQUd2QixFQUFFaUIsS0FBU0EsSUFBSk0sR0FBU1QsS0FBSzJXLEVBQUUsQ0FBQ0ksR0FBRy9XLEtBQUtJLEdBQUdLLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQ1QsS0FBSzZXLEVBQUVwVyxFQUFFVCxLQUFLeUgsR0FBR3RJLENBQUMsQ0FBQyxFQUMzVnlYLEdBQUd0WCxVQUFVMFgsT0FBTyxXQUFXLElBQUk5WCxFQUFFLEdBQUdDLEVBQUUsRUFBRWEsS0FBS3lILEVBQUUsR0FBR3pILEtBQUs2VyxFQUFFN1csS0FBS3dQLE9BQU94UCxLQUFLcUgsRUFBRSxHQUFHckgsS0FBSzZXLEdBQUc3VyxLQUFLd1AsT0FBT3hQLEtBQUtxSCxFQUFFckgsS0FBSzJXLEdBQUczVyxLQUFLNlcsRUFBRSxLQUFLLElBQUksSUFBSXpYLEVBQUVZLEtBQUsyVyxFQUFFLEVBQUUsSUFBSXZYLEVBQUVBLElBQUlZLEtBQUt5UCxFQUFFclEsR0FBSyxJQUFGRCxFQUFNQSxHQUFHLElBQW9CLElBQWhCNFgsR0FBRy9XLEtBQUtBLEtBQUt5UCxHQUFPclEsRUFBRUQsRUFBRSxFQUFFLEVBQUVDLEVBQUVBLElBQUksSUFBSSxJQUFJZSxFQUFFLEdBQUcsR0FBR0EsRUFBRUEsR0FBRyxFQUFFakIsRUFBRUMsR0FBR2EsS0FBS2IsRUFBRUMsSUFBSWUsRUFBRSxNQUFNaEIsRUFBRSxPQUFPRCxDQUFDLEVBQUUsSUFBSStYLEdBQUcsV0FBV2pYLEtBQUt5TCxFQUFFLElBQUltTCxFQUFFLEVBQUVLLEdBQUczWCxVQUFVd1gsTUFBTSxXQUFXOVcsS0FBS3lMLEVBQUVxTCxPQUFPLEVBQUUsSUFBSUksR0FBR2hSLEVBQUVpUixPQUFPQyxJQUFHLEVBQUdDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxHQUFHQyxHQUFHLFNBQVN4WSxHQUFnQixJQUFJQyxHQUFqQkQsRUFBRUEsR0FBR2dILEVBQUV5UixPQUFjQyxRQUFRMVksRUFBRTJZLFNBQVMsR0FBRzFZLEdBQUdELEVBQUU0WSxRQUFRNVksRUFBRTZZLFFBQVE1WSxJQUFHLElBQUtQLE1BQU1DLFVBQVUsSUFBSTBZLEdBQUdBLEdBQUdwWSxFQUFFcVksR0FBRyxFQUFFSCxNQUFNQyxJQUFJRCxJQUFJNU4sR0FBRyxZQUFZaU8sR0FBRyxTQUFTLEtBQUssRUFBRU0sR0FBRyxTQUFTOVksR0FBa0QsSUFBL0MsSUFBSUMsRUFBRSxJQUFJOFgsR0FBNkM3WCxFQUFFLEdBQUdlLEVBQUUsRUFBRUMsR0FBbkRsQixFQUFFK1ksU0FBU3pQLG1CQUFtQnRKLEtBQXlCVSxPQUFPTyxFQUFFQyxJQUFJRCxFQUFFZixFQUFFdUgsS0FBS3pILEVBQUVzUixXQUFXclEsSUFBc0MsSUFBbENoQixFQUFFc00sRUFBRStELE9BQU9wUSxHQUFHRCxFQUFFQSxFQUFFc00sRUFBRXVMLFNBQVM5WCxFQUFFLEdBQU9FLEVBQUUsRUFBRUEsRUFBRUQsRUFBRVMsT0FBT1IsSUFBSUYsR0FBRyxtQkFBbUIyTixPQUFPaE4sS0FBS3FZLE1BQU0vWSxFQUFFQyxHQUFHLEtBQUssbUJBQW1CeU4sT0FBTzFOLEVBQUVDLEdBQUcsSUFBSSxPQUFPRixDQUFDLEVBQzUwQmtZLEtBQUtGLElBQUksbUJBQW1CQSxHQUFHaUIsZ0JBQWdCZixLQUFLSSxHQUFHLEtBQUtZLE9BQU9DLE1BQU1ELE9BQU9DLE1BQU1ELE9BQU9FLFFBQVFiLEdBQUdPLEdBQUc3UixFQUFFb1MsT0FBTyxJQUFJcFMsRUFBRUUsU0FBUyxLQUFJLElBQUt6SCxNQUFNQyxVQUFVLElBQUlnQixLQUFLMlksVUFBVW5CLEdBQUc5RixFQUFFLCtCQUErQixFQUFFLEdBQUc4RixJQUFJNU4sR0FBRyxZQUFZaU8sR0FBRyxNQUFNLE9BQU8sSUFBSWUsR0FBRyxXQUFXLElBQUl2WixFQUFFcVksR0FBNkMsT0FBMUNyWSxHQUFHd1osU0FBU2pCLEdBQUd2TyxPQUFPLEVBQUUsSUFBSSxJQUFJdU8sR0FBR08sR0FBR1AsSUFBV3ZZLEdBQUdzWSxHQUFHM1gsS0FBSzhZLElBQUksR0FBRyxJQUFJLEVBQUVDLEdBQUcsV0FBVyxJQUFJMVosRUFBRSxJQUFJZ0gsRUFBRTJTLFlBQVksR0FBeUIsT0FBdEIzQixHQUFHaUIsZ0JBQWdCalosR0FBVXFWLE9BQU8sS0FBS3JWLEVBQUUsR0FBRyxFQUFNNFosR0FBRyxXQUFXLElBQUk1WixFQUFFc0wsRUFBRXVPLElBQUksSUFBSTdaLEVBQUUsQ0FBQ0EsRUFBRWlJLElBQUlxRCxFQUFFdU8sSUFBSTdaLEVBQUUsSUFBSUMsRUFBRWdJLElBQUlqSSxFQUFFa0IsRUFBRSxTQUFTaEIsR0FBRyxJQUFJZSxFQUFFaEIsRUFBRUMsR0FBR2UsV0FBV2hCLEVBQUVDLEdBQUdlLElBQUksRUFBRWpCLEVBQUVBLEVBQUUsU0FBU0UsRUFBRWUsR0FBR2hCLEVBQUVDLEdBQUdlLENBQUMsRUFBRWpCLEVBQUVrTSxFQUFFLFNBQVNoTSxVQUFVRCxFQUFFQyxFQUFFLENBQUMsQ0FBQyxPQUFPRixDQUFDLEVBQUU4WixHQUFHLFNBQVM5WixFQUFFQyxHQUFjLE1BQU0sbUJBQWpCQSxFQUFFQSxFQUFFOFosU0FBb0NILEtBQUs1WixFQUFFQSxFQUFFQyxHQUFHQSxHQUFHLElBQUksRUFBRStaLEdBQUcsU0FBU2hhLEdBQWlELE9BQTlDMEksRUFBRSxRQUFROUMsS0FBSzVGLEdBQUcsb0JBQW9CQSxHQUFHNFosS0FBVyxvQ0FBb0M1WixFQUFFLFNBQVMsRUFBRWlhLEdBQUcsU0FBU2phLEdBQUc0WixLQUFLMU4sRUFBRWxNLEVBQUUsRUFBTWthLEdBQUcsQ0FBQ0Msa0JBQWtCLE9BQU9DLFlBQVksSUFBSUMsT0FBTyxJQUFJQyxhQUFhLElBQUlDLFlBQVksSUFBSUMsVUFBVSxLQUFLQyxNQUFNLEdBQUdDLFNBQVMsSUFBSUMsT0FBTyxJQUFJeEIsTUFBTSxRQUFReUIsR0FBRyxDQUFDVCxtQkFBa0IsRUFBR0osUUFBTyxHQUFJYyxHQUFHLEVBQUVDLEdBQUcsU0FBUzlhLEdBQUcwSSxHQUFHMUksR0FBR3NLLEdBQUcxRSxLQUFLNUYsR0FBRyxnQ0FBZ0NBLEVBQUUsRUFBRSthLEdBQUcsU0FBUy9hLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEdBQUc0WixHQUFHNWEsRUFBRThSLEtBQUssSUFBSXpRLEVBQUVkLEVBQUVxWixHQUFHN1ksRUFBRWYsR0FBR2dELEVBQUV6QyxFQUFFdVosR0FBRy9ZLEdBQUcsR0FBRyxJQUFJeUYsU0FBU3NVLE1BQU16WixFQUFFdkIsRUFBRTJHLGNBQWMsd0JBQXdCb0IsR0FBRy9GLE9BQU85QixFQUFFa2EsY0FBYyxnQkFBZ0JyUyxHQUFHL0YsT0FBTzlCLEVBQUVzYSxZQUFZLEtBQUt0WCxFQUFFLFVBQVU2RSxHQUFHL0YsT0FBTzlCLEVBQUU4RCxPQUFPLE9BQU8sQ0FBQyxNQUFNNEwsR0FBRyxDQUFDLFFBQVFyTyxJQUNyMENBLEVBQUV2QixFQUFFMkcsY0FBYyxVQUFVbEcsSUFBSWMsRUFBRXdZLE9BQU8sV0FBV3hZLEVBQUV3WSxPQUFPLEtBQUt0WixFQUFFNEIsS0FBS3ZCLEtBQUssRUFBRW1aLEdBQUdoWixJQUFJLENBQXNDLElBQUksSUFBSXdPLEtBQTdDbE8sRUFBRXFOLGFBQWEsa0JBQWtCLElBQWlCMU8sRUFBRUYsRUFBRUUsRUFBRXVQLEdBQUcsVUFBVUEsR0FBRyxpQkFBa0J6UCxFQUFFdUksRUFBRXZJLEVBQUV1QixFQUFFa1osT0FBT0csR0FBR25MLElBQUlsTyxFQUFFcU4sYUFBYWEsRUFBRXpOLE9BQU9oQyxJQUF5SixPQUFwSnlQLEVBQUV2TyxHQUFHQSxFQUFFK1osWUFBWSxPQUFPL1osR0FBR0EsRUFBRWdhLFdBQVdqUSxHQUFHaEwsR0FBR0EsRUFBRThPLGFBQWF4TixFQUFFa08sR0FBR2xPLEVBQUVrTyxFQUFFQSxFQUFFMEwsZ0JBQWdCbGIsRUFBRWtLLFVBQVVqSyxFQUFFaWEsb0JBQW9CNVksRUFBRTZaLG1CQUFrQixHQUFXN1osQ0FBQyxFQUFNOFosR0FBRyxXQUFXQyxHQUFHLGtCQUFrQkMsR0FBRyxXQUFXLElBQUl2YixFQUFFcVUsTUFBTSxJQUFJcFUsRUFBRXdVLEtBQVN2VSxFQUFFbVUsUUFBRyxJQUFTclUsRUFBTWlCLEVBQUV3VCxRQUFHLEdBQVF2VCxFQUFFLEdBQUdoQixJQUFJZ0IsR0FBRyxLQUFLb0ksbUJBQW1CdEgsT0FBTzlCLElBQUksS0FBS2UsSUFBSUMsR0FBRyxLQUFLb0ksbUJBQW1CdEgsT0FBT2YsSUFBSSxLQUFLZixFQUFFZ0IsR0FBRyxNQUFNQSxHQUFHRCxHQUFFLElBQUtvUixFQUFFLGVBQWUsUUFBUSxNQUFNblMsRUFBRSxJQUFJLElBQUlxQixFQUFFOFEsRUFBRSx3QkFBd0I1UixFQUFFNFIsRUFBRSwyQkFBMkIsT0FBTzZCLEdBQUcsQ0FBQ3NILFdBQVdqYSxFQUFFa2EsZUFBZXhhLEVBQUVSLEVBQUVjLEVBQUVtYSxjQUFjMWIsRUFBRTJiLGlCQUFpQjFiLEVBQUUyYixlQUFlMWIsRUFBRTJiLFVBQVUzYSxFQUFFLEVBQUU0YSxHQUFHLFNBQVM5YixFQUFFQyxHQUFHLE9BQU9zYixLQUFLdGIsSUFBSSxFQUFFLEVBQUU4YixHQUFHLFNBQVMvYixHQUFHLE9BQU8sU0FBU0MsRUFDcDRCQyxHQUFHLE9BQU9GLEVBQUV1YixLQUFLcmIsSUFBSUYsRUFBRUUsSUFBSSxHQUFHcWIsS0FBS3JiLElBQUksRUFBRSxDQUFDLEVBQU04YixHQUFHLFNBQVNoYyxHQUFHLElBQUlDLEVBQW9ELE9BQWxERCxFQUFFd0osTUFBTSxpQkFBaUJ2SixFQUFFNkksbUJBQW1COUksSUFBVytKLEdBQUdyRCxTQUFTekcsR0FBSUQsRUFBRSxFQUFFaWMsR0FBRyxTQUFTamMsR0FBR0EsRUFBRUEsR0FBRyxZQUFZLElBQUksSUFBSUMsRUFBRXlHLFNBQVNvSSxxQkFBcUIsUUFBUTVPLEVBQUUsRUFBRWUsRUFBRWhCLEVBQUVTLE9BQU9SLEVBQUVlLEVBQUVmLElBQUksQ0FBQyxJQUFJZ0IsRUFBRWpCLEVBQUVDLEdBQUdxQixFQUFFTCxFQUFFb04sYUFBYSxPQUFPLEdBQUcvTSxHQUFHQSxFQUFFNlIsZUFBZXBULElBQUlrQixFQUFFQSxFQUFFb04sYUFBYSxXQUFXcE4sRUFBRThhLEdBQUc5YSxLQUFLLE1BQU1BLEVBQUVzSSxNQUFNLDJCQUEyQixPQUFPdEksQ0FBQyxDQUFDLE9BQU8xQixPQUFPMkgsU0FBUzhDLElBQUksRUFBTWlTLEdBQUcsQ0FBQ0MsR0FBRyxLQUFLQyxHQUFHLENBQUNDLE1BQUssR0FBSUMsR0FBRyxDQUFDN0IsTUFBTSwyRUFBMkU4QixHQUFHLG1GQUFtRnZiLE1BQU0sS0FBS3diLEdBQUd2WixFQUFFcUksRUFBRSxLQUFLckQsS0FBS3dVLEdBQUcsU0FBU3pjLEVBQUVDLEVBQUVDLEdBQUcsSUFBSWUsRUFBTUMsRUFBRSxDQUFDLEVBQU1LLEVBQUVOLEVBQUVqQixFQUF3SyxJQUFJLElBQUlTLElBQTlLLFFBQVFULEdBQUdDLEVBQUV5YyxTQUFTemIsRUFBRWpCLEVBQUUsSUFBSUMsRUFBRXljLE9BQU9uYixFQUFFdkIsRUFBRSxJQUFJQyxFQUFFeWMsU0FBU3piLEVBQUVvUixFQUFFLFdBQVdwUixFQUFFLFdBQVdBLEVBQUUsOERBQThETSxFQUFFLGNBQTJCMmEsR0FBR2hiLEVBQUVULEdBQUdBLEVBQUUsS0FBS1IsRUFBRVEsSUFBSXliLEdBQUd6YixJQUFJLElBQ3JzQixHQUR5c0JTLEVBQUU2SSxHQUFHOUMsRUFBRWhHLEVBQUUrRyxRQUFRc1QsR0FDajZCUyxHQUFHN2EsS0FBS1QsRUFBRSxXQUFXVCxFQUFFLFdBQWdCdUksRUFBRXRJLEVBQVBzQixFQUFFLENBQUMsSUFBVU4sRUFBRW9SLEVBQUUsU0FBU0EsRUFBRSxtQkFBbUI5USxFQUFFb2IsR0FBRzFiLEdBQUdtYixHQUFHcGMsS0FBS3VCLEVBQUVxYixPQUFPcGQsT0FBTzJILFNBQVN5VixRQUFRcGQsT0FBTzJILFNBQVMwVixTQUFTLEtBQUtyZCxPQUFPMkgsU0FBUzJWLE1BQU12YixFQUFFd2IsSUFBSTFLLEVBQUU1UixFQUFFLE9BQVVBLEVBQUU0UixFQUFFNVIsRUFBRSxZQUFZLElBQUlRLEVBQUUsRUFBRUEsRUFBRVIsRUFBRUMsT0FBT08sSUFBSSxDQUFDLElBQUlpQyxFQUFFekMsRUFBRVEsR0FBR00sRUFBRTJCLEdBQUc4RCxFQUFFRyxTQUFTakUsRUFBRSxDQUFDLE9BQU9sRCxHQUFHLElBQUssT0FBTyxJQUFLLFNBQVNTLEVBQUVjLEVBQUUwSSxLQUFLaEosRUFBRWhCLEVBQUV5YyxZQUFPLEVBQU8sWUFBWWpjLEdBQUdBLEVBQUUsaUJBQWlCQSxFQUFFQSxPQUFFLEdBQVF1YixHQUFHdmIsR0FBR3diLEdBQUdoYixHQUFHTSxFQUFFeWIsSUFBSXZjLFNBQVNjLEVBQUUwSSxLQUFLLE1BQU0sSUFBSyxVQUFVeEosR0FBR0EsRUFBRVIsRUFBRWdLLE1BQU0rUixHQUFHdmIsR0FBR3diLEtBQUsxYSxFQUFFeWIsSUFBSXZjLEVBQUVBLEVBQUVSLEVBQUV5SixHQUFHekksRUFBRW9SLElBQUksTUFBTTVSLEdBQUdRLEdBQzVlLE9BRGdmUixFQUFFUSxFQUFFeUksTUFDMWVqSixFQUFFUSxFQUFFZ2MsU0FBU2hjLEVBQUVnYyxRQUFRdlQsSUFBS25JLEVBQUVtSSxHQUFHakosUUFBRyxFQUFPQSxFQUFFUixFQUFFaWQsSUFBSWpjLEVBQUVvUixJQUFJLE1BQU01UixHQUFHUSxHQUFZLE9BQVJSLEVBQUVRLEVBQUVpYyxPQUFjemMsRUFBRVEsRUFBRWdjLFNBQVNoYyxFQUFFZ2MsUUFBUUMsS0FBTTNiLEVBQUUyYixJQUFJemMsUUFBRyxTQUFjYyxFQUFFMEksS0FBSyxNQUFNLElBQUssU0FBUzFJLEVBQUV5YixJQUFJZixLQUFnRSxJQUFJLElBQUl4TSxLQUFuRW5FLEVBQUU2UixNQUFNNWIsRUFBRTZiLFFBQVEsWUFBWTdiLEVBQUUsc0JBQXNCQSxFQUFFcVksR0FBZ0JzQyxHQUFHM2EsRUFBRWtPLFdBQVdsTyxFQUFFa08sR0FBaUgsSUFBSSxJQUFJRyxLQUF0SHJPLEVBQUU4YixLQUFLaEwsRUFBRSx5QkFBc0MsS0FBbEI1QyxFQUFFNEMsRUFBRSxnQkFBc0MsRUFBRW5TLEdBQUd1UCxHQUFHdlAsSUFBSXFCLEVBQUVnUixHQUFHLEtBQUs5QyxFQUFFLFVBQVV2UCxFQUFFLENBQUMsRUFBZXFCLEVBQUU0RyxFQUFFNUcsRUFBRXFPLElBQUlILEVBQUU3SixLQUFLZ0ssS0FBSzFQLEVBQUUwUCxFQUFFNUgsUUFBUXlILEVBQUUsS0FBS2xPLEVBQUVxTyxVQUFVck8sRUFBRXFPLElBQ2xjLElBQUksSUFBSUMsS0FEOGJELEVBQUUsS0FBS3lDLEVBQUUsV0FBV3JTLEVBQUUsY0FBY3VCLEVBQ25mckIsRUFBRXVQLEVBQUUwRCxNQUFxQmhMLEVBQUVzSCxFQUFFSSxJQUFJMUgsRUFBRTVHLEVBQUVzTyxJQUFJMUgsRUFBRWpJLEVBQUUyUCxLQUFLRCxFQUFFQyxHQUFHSixFQUFFSSxJQUEwRyxJQUFJLElBQUlNLEtBQTlHTixFQUFFLEdBQUdyRCxPQUFPK1AsS0FBSzNNLEVBQUV5QyxFQUFFLFdBQVdyUyxFQUFFLGNBQWMsaUJBQWtCNFAsR0FBR3ZJLEdBQUd6QixLQUFLZ0ssRUFBRW5JLFFBQVFvSSxFQUFFQSxFQUFFckQsT0FBT29ELElBQWlCM1AsRUFBRWtJLEVBQUVsSSxFQUFFa1EsSUFBSSxNQUFNdkssS0FBS3VLLEtBQUssUUFBUW5RLEdBQUcsYUFBYW1RLEtBQUtOLEVBQUVwSSxLQUFLMEksVUFBVTVPLEVBQUU0TyxJQUE2QyxjQUFsQzVPLEVBQUVpTyxTQUFTdFAsRUFBRW9kLFNBQVN6TixFQUFFbEcsS0FBSyxLQUFZRSxHQUFHM0ksRUFBRUssRUFBRXJCLEVBQUUsRUFBRXFkLEdBQUcsQ0FBQyxRQUFRLGlCQUFpQkMsR0FBRyxTQUFTeGQsR0FBRyxJQUFJLElBQUlDLEVBQUVnSSxJQUFJL0gsRUFBRSxHQUFHRixFQUFFeWQsU0FBU3JLLGNBQWN0USxRQUFRLE1BQU03QixFQUFFLEVBQUVDLEVBQUVsQixFQUFFMGQsV0FBV2hkLE9BQU9PLEVBQUVDLEVBQUVELElBQUksQ0FBQyxJQUFJTSxFQUFFdkIsRUFBRTBkLFdBQVd6YyxHQUFHUixFQUFFYyxFQUFFeUMsS0FBS2QsRUFBRTNCLEVBQUVsQixNQUFNLEdBQUdpSCxHQUFHakYsS0FBS2tiLEdBQ3RmOWMsSUFBSVAsR0FBRyxHQUFHTyxFQUFFcUMsUUFBUSxVQUFVLFNBQVNJLEdBQUcsY0FBYzNCLElBQUlBLEVBQUVvYyxZQUFZemQsSUFBSU8sRUFBRUEsRUFBRXVKLE9BQU8sSUFBSS9KLEVBQUVRLEVBQUUyUyxlQUFlbFEsRUFBRSxDQUE2RixPQUE1RmxELEVBQUVBLEVBQUV5YSxPQUFPdmEsRUFBRTBkLEdBQUc1ZCxHQUFHQSxFQUFFb1osV0FBV25aLEVBQUVtWixPQUFPcFgsT0FBTzlCLEtBQUtGLEVBQUU0ZCxHQUFHNWQsR0FBR0EsRUFBRW1aLFVBQVVsWixFQUFFa1osTUFBTW5YLE9BQU9oQyxJQUFXQyxDQUFDLEVBQUUyZCxHQUFHLFNBQVM1ZCxHQUFHLElBQUlDLE9BQUUsRUFBdUUsTUFBaEUsaUJBQWtCRCxFQUFFQyxFQUFFRCxFQUFFLGlCQUFrQkEsSUFBSUMsRUFBRXVaLFNBQVN4WixFQUFFLEtBQVlDLENBQUMsRUFBRTRkLEdBQUcsV0FBVyxJQUFJN2QsRUFBRXNMLEVBQUV3UyxJQUFJL0osSUFBRyxTQUFTOVQsR0FBRyxHQUFHRCxJQUFJQyxFQUFFa1ksSUFBSSxHQUFHbFksRUFBRWdVLE9BQU8sU0FBU2hVLEVBQUU4ZCxLQUFLLENBQUMsSUFBSTdkLEVBQUVELEVBQUVrWSxHQUFHbFgsRUFBRWhCLEVBQUU4ZCxLQUFLN2MsRUFBRWpCLEVBQUUrYyxJQUFJL2MsRUFBRUEsRUFBRStkLFdBQVcsSUFBSXpjLEVBQUUwRixFQUFFZ1gsZUFBZS9kLEdBQUcsR0FBR3FCLEVBQUUsQ0FBQyxJQUFJZCxFQUFFZ2MsR0FBR3hiLEVBQUVoQixFQUFFLEdBQUdRLEdBQUdjLEVBQUVBLEVBQUU4SSxXQUNwZm5KLEVBQUU4RyxRQUFRLE1BQU0sSUFBSUEsUUFBUSxhQUFhLE1BQU12SCxFQUFFdUgsUUFBUSxNQUFNLElBQUlBLFFBQVEsYUFBYSxNQUFNL0gsRUFBRWliLFdBQVUsRUFBR2piLEVBQUUyWixJQUFHLEVBQUczWixFQUFFaWUsSUFBRyxFQUFHamUsRUFBRThkLEtBQUs5YyxFQUFFa2QsR0FBRzVjLEVBQUV0QixJQUFJZ0IsRUFBRTZTLEVBQUV2UyxFQUFFNEksVUFBVWdPLE9BQU9sWCxFQUFFbWQsSUFBSWxlLEdBQUc4VCxHQUFHOVQsRUFBRSxZQUFZNFQsRUFBRTVULEVBQUUsYUFBYTRULEVBQUU1VCxFQUFFLENBQUMsR0FBRSxFQUFNbWUsR0FBR0MsR0FBR0MsRUFBRUMsR0FBR0MsR0FBR0MsR0FBRyw0QkFBNEJDLEdBQUcsQ0FBQ0MsU0FBUSxFQUFHQyxjQUFhLEVBQUdDLFNBQVEsRUFBR0MsUUFBTyxFQUFHQyxTQUFRLEdBQUlYLEdBQUdwYixFQUFFcUksRUFBRSxLQUFLckQsS0FBS3FXLEdBQUdyYixFQUFFcUksRUFBRSxLQUFLckQsS0FBS3NXLEVBQUV0YixFQUFFcUksRUFBRSxLQUFLckQsS0FBS3VXLEdBQUd2YixFQUFFcUksRUFBRSxLQUFLLElBQUltVCxHQUFHLEtBQ2haLElBQUlRLEdBQUcsU0FBU2pmLEVBQUVDLEdBQUdpZixRQUFHLEdBQU8sRUFBR2xmLEVBQUVDLEVBQUUsRUFBRWlmLEdBQUcsU0FBU2xmLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUdrTCxFQUFFLE9BQU0sR0FBSWpNLEdBQUcsaUJBQWtCQSxFQUFFd0csU0FBU3VYLGVBQWUvZCxHQUFHQSxJQUFJK0csRUFBRSxJQUFJL0YsRUFBRStGLEVBQUVrWSxhQUFhLEdBQUdqZixFQUFFa2Ysb0JBQW9CbGUsR0FBRyxFQUFFQSxHQUFHLENBQUNBLEVBQUVELEVBQUUsQ0FBQ0EsR0FBR29ILEdBQUdnVyxJQUFJN1IsT0FBT25FLEdBQUdpVyxLQUFLOVIsT0FBT25FLEdBQUdrVyxJQUFJLElBQUksSUFBSWhkLEVBQUUsR0FBR2QsRUFBRSxFQUFFQSxFQUFFUyxFQUFFUixPQUFPRCxJQUFJLENBQUMsSUFBSXlDLEVBQUVoQyxFQUFFVCxHQUFHYyxFQUFFa0csS0FBSyxNQUFNdkUsRUFBRSxPQUFPQSxFQUFFLENBQUNoQyxFQUFFaEIsRUFBRWtmLGlCQUFpQjdkLEVBQUVvSSxLQUFLLEtBQUssTUFBTXpJLEVBQUVoQixFQUFFNE8scUJBQXFCLEtBQVcsSUFBTjVPLEVBQUUrSCxJQUFRMUcsRUFBRSxFQUFFQSxFQUFFTCxFQUFFUixPQUFPYSxJQUFJLENBQVEsSUFBSWtPLEVBQVhoUCxFQUFFUyxFQUFFSyxHQUFXMkIsRUFBRWpDLEVBQUUsSUFBSTJPLEVBQUVILEVBQUVnTyxTQUFTckssY0FBY3ZELE9BQUUsRUFBTyxHQUFHSixFQUFFbkIsYUFBYSxpQkFBaUJwTCxFQUFFLFNBQVMsQ0FBQyxJQUFJaU4sRUFDMWZQLEVBQUU5TSxRQUFRLE1BQU0sR0FBR3FOLEVBQUVOLEVBQUVELEVBQUU1RixPQUFPLElBQUltRyxHQUFHQSxFQUFFbk8sT0FBT3lOLEVBQUU0UCxXQUFXNVAsRUFBRW5CLGFBQWEsWUFBWW9RLEdBQUc3VixLQUFLc0gsTUFBTU4sRUFBRU0sRUFBRSxJQUFJak4sR0FBRzJNLEtBQUt3TyxHQUFHeE8sSUFBSXlPLEdBQUd6TyxJQUFJME8sRUFBRTFPLEtBQUszTSxHQUFHMk0sSUFBSTNNLEVBQUUsS0FBSzJNLENBQUMsQ0FBQzNNLElBQUl5YixHQUFHemIsSUFBSSxHQUFHekMsRUFBRWdkLFNBQVNySyxjQUFjdFEsUUFBUSxPQUFPLEdBQUd1RixHQUFHbVYsR0FBRy9jLElBQUlDLFVBQVVELEVBQUVtTyxhQUFhLGlCQUFnQixHQUFJM0wsRUFBRS9DLEVBQUVnRCxFQUFFLElBQUl1RSxLQUFLaEgsR0FBRyxDQUFDLEdBQUdSLEVBQUUsSUFBSSxJQUFJaU0sS0FBS2hNLEVBQUUsSUFBSUQsRUFBRUMsRUFBRWdNLEdBQUdqTCxFQUFFLEVBQUVBLEVBQUVoQixFQUFFUyxPQUFPTyxJQUFJaEIsRUFBRWdCLEdBQUcyTixhQUFhLGVBQWMsR0FBSSxJQUFJLElBQUluQyxLQUFLdk0sRUFBRXNlLEdBQUcvVyxLQUFLZ0YsR0FBZSxHQUFaTixFQUFFLE9BQU0sSUFBUUQsRUFBRXNTLEdBQUc3VSxLQUFLLE9BQU8zSixFQUFFLElBQUkySSxFQUFFcUksS0FBSzlFLEVBQUVsTSxFQUFFLENBQUMsTUFBTXVRLEdBQVMsWUFBTm1ELEdBQUduRCxFQUFTLENBQUMsR0FBRytPLEdBQUdiLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSXBPLEtBQUtuUSxFQUFFLENBQzNlLElBQUp1TSxFQUFFLEVBQU14TSxHQUR3ZUQsRUFDcmZFLEVBQUVtUSxJQUFlM1AsT0FBTytMLEVBQUV4TSxFQUFFd00sSUFBSXpNLEVBQUV5TSxHQUFHOFMsZ0JBQWdCLGlCQUFpQkMsR0FBR25QLEVBQUUsS0FBSyxDQUFNLElBQUlBLEtBQVRwUCxFQUFFLEdBQVlmLEVBQUUsSUFBV3VNLEVBQUUsRUFBRXhNLEdBQVhELEVBQUVFLEVBQUVtUSxJQUFXM1AsT0FBTytMLEVBQUV4TSxFQUFFd00sSUFBSXZMLEVBQUVsQixFQUFFeU0sR0FBR2dULEdBQUdwUCxFQUFFblAsRUFBRXNjLEdBQUd0YyxHQUFHRCxFQUFFaEIsR0FBR3lmLEdBQUd4VCxFQUFFakwsRUFBRSxDQUFDLEVBQUUwZSxHQUFHLFNBQVMzZixHQUFHLElBQUlDLEVBQUVnRCxFQUFFMEYsRUFBRTNJLEVBQUUsQ0FBQyxHQUFHQyxFQUFFMmYsS0FBSzNmLEVBQUUyZixHQUFHLFNBQVMxZixHQUFHLE9BQU8rZSxHQUFHL2UsRUFBRUYsRUFBRSxFQUFFQyxFQUFFNGYsT0FBTyxTQUFTM2YsRUFBRWUsR0FBb0IsT0FBakJBLEVBQUVBLEdBQUcsQ0FBQyxHQUFJOGMsS0FBSy9kLEVBQVNtZSxHQUFHamUsRUFBRWUsRUFBRSxFQUFFLEVBQUU2ZSxHQUFHLFNBQVM5ZixHQUFHcWUsR0FBR3JlLElBQUcsQ0FBRSxFQUFFK2YsR0FBRyxTQUFTL2YsR0FBR3NlLEdBQUd0ZSxJQUFHLENBQUUsRUFBRWdnQixHQUFHLFNBQVNoZ0IsR0FBR3VlLEVBQUV2ZSxJQUFHLENBQUUsRUFBTXdmLEdBQUcsU0FBU3hmLEVBQUVDLEdBQUcsSUFBSUMsRUFBRXdMLEdBQUcxTCxHQUFHQyxHQUFHQyxHQUFHQSxFQUFFRCxJQUFJQyxFQUFFRCxFQUFFZ2dCLGFBQWEvZixFQUFFME8sYUFBYSxxQkFBb0IsSUFBS2pHLEVBQUVxSSxLQUFLaFIsR0FBRSxXQUFXLElBQUlpQixFQUFFeUssR0FBRzFMLEdBQUdrQixFQUFFakIsR0FBR0EsRUFBRWdnQixXQUFXMWUsRUFBRXRCLEdBQUdBLEVBQUUrZCxXQUFXOWMsR0FBR0QsR0FBR0EsRUFBRWhCLEdBQUdpQixFQUFFME4sYUFBYSxxQkFBb0IsS0FBTTNOLEVBQUUwSCxFQUFFM0ksR0FBRzRmLElBQUcsV0FBVzVmLEVBQUlrQixFQUFPQSxHQUFHQSxFQUFFbUosV0FBVjlJLEVBQXdCLEdBQUUsRUFBRStkLEdBQUcsV0FBVyxPQUFNLENBQUUsRUFBRUksR0FBRyxXQUFXLEVBQUVELEdBQUcsU0FBU3pmLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEVBQUVLLEVBQUVkLEdBQUcsT0FBT3lmLEdBQUdqZ0IsRUFBRUQsRUFBRXVCLElBQUksS0FBSyxFQUFFdkIsRUFBRXVlLEVBQUV2ZSxHQUFHQSxFQUFFLGNBQWNBLEdBQUVpQixFQUFFLENBQUMsR0FBSWdmLFdBQVdoZ0IsRUFBRWdCLEVBQUUrYyxXQUFXOWQsRUFBRXNmLEdBQUd4ZixFQUFFaUIsR0FBRyxNQUFNLEtBQUssRUFBRSxHQUFHaEIsRUFBRW9LLFdBQVcsQ0FBQyxJQUFJLElBQUluSCxLQUFLaEQsRUFDeHRCLElBRDh0QnFCLEVBQUU0RyxFQUFFakksRUFBRWdELE1BQzcxQjNCLE1BRGcyQkEsRUFBRXJCLEVBQUVnRCxLQUM3MUIsaUJBQWtCM0IsR0FBS0EsRUFBRUUsVUFBVUYsRUFBRUUsV0FBVzVCLE9BQU9PLFVBQVVxQixVQUFVRixFQUFFRSxXQUFXdEIsTUFBTUMsVUFBVXFCLFdBQWFGLEVBQUUsSUFBSXJCLEVBQUVnRCxHQUFHNFQsR0FBRzVXLEVBQUVnRCxHQUFHLENBQUMsTUFBTW1OLFVBQVVuUSxFQUFFZ0QsRUFBRSxDQUF5SixHQUF2SjNCLEdBQUUsRUFBR3JCLEVBQUVnYixZQUFZM1osR0FBRSxVQUFXckIsRUFBRWdiLFVBQVVySCxLQUFLM1EsRUFBRXVaLEdBQUd6YyxFQUFFRSxFQUFFZ0IsSUFBR0EsRUFBRVQsR0FBRyxDQUFDLEdBQUkwZixVQUFVLEVBQUVqZixFQUFFd2MsV0FBV3BCLEdBQUdwYixFQUFFZ2EsV0FBVzNaLEdBQUVkLEVBQUUsQ0FBQyxHQUFJdWQsV0FBVzlkLEVBQUVPLEVBQUV1YyxJQUFJOVosRUFBRXpDLEVBQUVzZCxLQUFLL2QsRUFBS0UsRUFBRTBaLEdBQUcsSUFBSW5LLEVBQUV4UCxPQUFPd1AsRUFBRS9JLFNBQVNDLGNBQWMsT0FBTzFHLEVBQUUyTyxhQUFhLGlCQUFnQixHQUFJYSxFQUFFZ0wsTUFBTTJGLFFBQVEsK0NBQStDbmdCLEVBQUVvSyxXQUFXMEUsYUFBYVUsRUFBRXhQLEdBQUdRLEVBQUU0ZixZQUNyZjVRLEVBQUVBLEVBQUUwSSxLQUFLbFksRUFBRXdQLEVBQUV4TSxFQUFFdVosR0FBR3hjLEVBQUUsR0FBR3VCLEVBQUUsTUFBTXZCLEVBQUUsSUFBSXdjLEdBQUd4YyxLQUFLQyxFQUFFa1ksR0FBRzVXLElBQUd0QixFQUFFZ0ksS0FBTSxTQUFTakksRUFBRXVJLEVBQUVySSxFQUFFRCxHQUFHc0IsRUFBRTJCLEVBQUVoRCxFQUFFdVAsRUFBVXhQLEdBQVJpRCxFQUFFaEMsR0FBRyxDQUFDLEdBQU13YyxZQUFZLENBQUMsRUFBRWhWLElBQUl4RixFQUFFaWQsV0FBV2pkLEVBQUVvZCxhQUFhcmdCLEVBQUU4WixPQUFPLG1FQUFtRTdZLEVBQUVqQixFQUFFc0IsRUFBRThaLEdBQUd6VixLQUFLM0YsS0FBS2lCLEVBQUVtUixFQUFFLFdBQVduUixFQUFFME0sVUFBVSxHQUFHLFFBQVFsRixJQUFJeEgsRUFBRSxtQ0FBbUNqQixJQUFJc0IsRUFBRXdJLEdBQUc5QyxFQUFFL0YsRUFBRThHLFFBQVFzVCxHQUFHUSxLQUFLN2IsRUFBRUMsRUFBRXFFLGVBQWUwQyxFQUFFd0ksRUFBRSxFQUFFLEdBQUd2TyxFQUFFZ0MsRUFBRWlWLElBQUksQ0FBQyxJQUFJMEMsS0FBSyxLQUFJLElBQUtuYixNQUFNQyxXQUFXZ0ssS0FBSyxVQUFVMUosRUFBRWdlLGVBQWUvYyxJQUFJLElBQUl1TyxHQUFHL0csRUFBRSxFQUFFK0csRUFBRSw0QkFBNEJBLEVBQUUsQ0FBQyxFQUNyZixJQUFJRyxFQUFFLENBQUMsRUFBRTNQLEVBQUVrZixjQUFjLEVBQUVsZixFQUFFa2YsZUFBZTFQLEVBQUU4USxXQUFXdGdCLEVBQUVrZixjQUFjNVcsRUFBRXJGLEVBQUVzZCxhQUFhLENBQUMsRUFBRS9RLEdBQUdsSCxFQUFFckYsRUFBRXVkLGdCQUFnQixDQUFDLEVBQUU3USxHQUFHLElBQUlDLEVBQUUzTSxFQUFFd2QsT0FBV3ZRLEVBQUVsSSxJQUFJb0ssRUFBRSwrQkFBK0JsQyxFQUFFZ0ksR0FBR2pYLEdBQUdpUCxFQUFFd1EsTUFBTXpmLEVBQUVpUCxFQUFFeVEsT0FBTzNnQixFQUFFa0gsU0FBUzBWLFNBQVMsS0FBSzVjLEVBQUVrSCxTQUFTMlYsS0FBSyxJQUFJNVEsRUFBRTlHLEVBQUVuRixFQUFFa0gsU0FBUzhDLEtBQUssVUFDcUssS0FEM0o0RixFQUFFQSxHQUFHLEtBQU8zRCxJQUFJQSxFQUFFOUcsRUFBRW5GLEVBQUVrSCxTQUFTOEMsS0FBSyxRQUFRLEtBQUs3RSxFQUFFbkYsRUFBRWtILFNBQVM4QyxLQUFLLEtBQUssSUFBSTRGLEVBQUV6SyxFQUFFbkYsRUFBRWtILFNBQVM4QyxLQUFLLFNBQVMsSUFBSTRGLEVBQUUzRCxFQUFFMkQsRUFBRSxJQUFJM0QsRUFBRSxJQUFJMkQsSUFBSTNELEVBQUUySyxHQUFHelIsRUFBRW5GLEVBQUVrSCxTQUFTOEMsS0FBSyxNQUFNLE9BQU8saUJBQWlCaUMsSUFBSTJELEdBQUdBLEVBQUUzRCxFQUFFaU0sSUFBSWpNLEVBQUV3VSxPQUFPLElBQUk3USxFQUFFLElBQUlNLEVBQUV1USxPQUNwZjdRLEVBQUUzTSxFQUFFMmQsd0JBQXVCM1UsRUFBRSxDQUFDLEdBQUk0VSxJQUFJaEssR0FBRzNHLEdBQUdBLEVBQUVqRSxJQUFHQSxFQUFFOUcsRUFBRTdELEVBQUUsYUFBYWtPLEVBQUVzUixVQUFVblIsRUFBRW1SLFlBQWE3VSxFQUFFaEosRUFBRTZkLFVBQVUvZSxPQUFPckIsS0FBS3FnQixNQUFNLEtBQUs5SSxHQUFHd0IsS0FBS0gsUUFBUXBKLEVBQUU0USxTQUFTN1UsR0FBR2hKLEVBQUU2ZCxTQUFTN1UsRUFBRTNELEVBQUU0SCxFQUFFak4sRUFBRStkLHVCQUF1QnhSLEVBQUVHLEdBQUcxRCxFQUFFak0sRUFBRWtILFNBQVM4QyxLQUFLa0csRUFBRWxJLEtBQUs0SCxFQUFFekssRUFBRThHLEVBQUUsT0FBT1osRUFBRTRWLFFBQVEvUSxFQUFFZ1IsS0FBS3RSLElBQUkzRCxFQUFFWCxHQUFHVyxNQUFNaUUsRUFBRWlSLElBQUlsVixHQUFHaEosRUFBRW1lLGVBQWU5WSxFQUFFNEgsRUFBRVAsR0FBR3JILEVBQUU0SCxFQUFFVixHQUFHbE8sRUFBRXNJLEdBQUd0SSxFQUFFa08sRUFBRUcsRUFBRTFNLEVBQUVvZSxrQkFBa0IxUixFQUFFM0gsSUFBSU0sRUFBRTJSLEdBQUd0SyxHQUFHckgsRUFBRXJGLEVBQUV3YSxXQUFXOU4sR0FBR0EsRUFBRTVMLEtBQUs0TCxFQUFFdUksR0FBR2pYLEVBQUUwTyxFQUFFb0MsSUFBSXpRLEVBQUUyQixFQUFFcWUsS0FBS2hnQixFQUFVNE8sS0FBUlYsRUFBRXZNLEdBQUcsQ0FBQyxHQUFRaWQsVUFBYTFRLEVBQUU2USxXQUFXblEsR0FBRyxJQUFJNU8sRUFBRWIsT0FBTyxDQUM5YSxHQUQrYStPLEVBQUVwRyxFQUFFOUgsR0FBR3FPLEVBQUVvQyxJQUFJLEdBQUc5TyxFQUFFc2UscUJBQ3ZlNVIsRUFBRSxtQkFBbUJyTyxHQUFHQSxFQUFFd1osR0FBRzlhLEVBQUVDLEVBQUUwUCxFQUFFMU8sSUFBTyxHQUFHd0osVUFBVUMsVUFBVTdILFFBQVEsVUFBVSxDQUFDLElBQUkySixFQUFFbEwsRUFBRWtnQixjQUFjL2EsU0FBUytGLEVBQUVpVixPQUFPOVIsRUFBRW5ELEVBQUU5RixjQUFjLFFBQU93SixFQUFFLENBQUMsR0FBaUJuTSxLQUFma0ksRUFBRWhMLEVBQUUsU0FBa0JpUCxFQUFFNkIsSUFBSSxHQUFHN0IsRUFBRXNLLE1BQU0sZUFBZU0sR0FBRzlhLEVBQUUyUCxFQUFFTyxFQUFFakUsRUFBRWhKLEVBQUUsQ0FBdUMsSUFBdEMwTSxHQUFHMU0sRUFBRXVNLEVBQUVoRyxNQUFNLElBQUl2RyxFQUFFbEMsTUFBTSxLQUFLLEdBQUdrQyxFQUFFLEdBQU9pTixFQUFFLEVBQUVBLEVBQUVQLEVBQUVsUCxPQUFPeVAsSUFBSWpFLEVBQUUwRCxFQUFFTyxHQUFHblAsTUFBTSxJQUFJLEdBQUdrQyxFQUFFdUUsS0FBSyxDQUFDcUIsbUJBQW1Cb0QsRUFBRSxJQUFJcEQsbUJBQW1Cb0QsRUFBRSxNQUN2VCxJQUQ2VHVELEVBQUVoRyxNQUFNLEdBQUdtRyxFQUFFbEcsR0FBRytGLEdBQUcvRyxFQUFFNEIsR0FBRzFFLEtBQUtnSyxHQUFHLGdCQUFnQkEsSUFBR0gsRUFBRXhQLEVBQUUwRyxjQUFjLFNBQVVnYixPQUFPLE9BQU9sUyxFQUFFbVMsT0FBTzFnQixFQUFFdU8sRUFBRWdMLE1BQU1vSCxRQUFRLE9BQU8zZ0IsRUFBRTBPLGFBQzdldEssRUFBRXNLLEVBQUVqSyxHQUFHaUssR0FBR3RMLEdBQUdtTCxFQUFFLG1CQUFtQmlOLE9BQU9qWCxHQUFHdkUsR0FBT0EsRUFBRSxFQUFFQSxFQUFFZ0MsRUFBRXhDLE9BQU9RLEtBQUkwTyxFQUFFM1AsRUFBRTBHLGNBQWMsVUFBV29YLEtBQUssU0FBU25PLEVBQUU1TCxLQUFLZCxFQUFFaEMsR0FBRyxHQUFHME8sRUFBRXZQLE1BQU02QyxFQUFFaEMsR0FBRyxHQUFHdU8sRUFBRTdJLFlBQVlnSixHQUFHMVAsRUFBRTBHLFlBQVk2SSxHQUFHQSxFQUFFcVMsU0FBU3JTLEVBQUVwRixXQUFXRCxZQUFZcUYsR0FBR2hELEdBQUdBLEVBQUVzVixRQUFRdFYsRUFBRWxMLENBQUMsTUFBTWtMLEVBQUVzTyxHQUFHOWEsRUFBRUMsRUFBRTBQLEVBQUUxTyxFQUFFZ0MsR0FBR3pDLEVBQUV3ZixXQUFXeFQsRUFBRWhNLEVBQUUwWCxHQUFHMUwsRUFBRTZCLGFBQWEsTUFBTTdCLEVBQUVoTSxFQUFFMFgsSUFBR2pZLEVBQUUrSCxLQUFNa1EsR0FBRzFMLEVBQUV2TSxFQUFFOGQsV0FBV3ZkLEVBQUV1ZCxXQUFXOWQsRUFBRThjLElBQUl2YyxFQUFFdWMsSUFBSTljLEVBQUU2ZCxLQUFLdGQsRUFBRXNkLEtBQUs3ZCxFQUFFK1QsTUFBTSxFQUFFSCxFQUFFckgsR0FBR3ZNLEVBQUV1TSxFQUFFaE0sQ0FBQyxNQUFNZ00sRUFBRSxLQUFLQSxLQUFLaE0sRUFBRWdNLEVBQUUwTCxLQUFLbFgsRUFBRXdHLEtBQUtoSCxHQUFHK2UsR0FBR3hmLEVBQUV5TSxJQUFJLEVBQUV5VCxHQUFHLFNBQVNsZ0IsRUFBRUMsRUFBRUMsR0FBRyxHQUFHRixHQUFHLElBQUlBLEVBQUVpUyxVQUFVaFMsRUFBRSxDQUFDLEdBQUdDLEVBQUUsT0FBTyxFQUFFLEdBQUdxZSxFQUFFdGUsSUFBSSxHQUFHaUwsR0FBR2xMLEVBQUV5ZCxTQUFTckssZUFBZSxPQUFPcFQsRUFDOWhCQSxFQUFFOEcsWUFBWTlHLEVBQUVnSSxRQUFRLHlCQUF5QixJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUdzVyxHQUFHcmUsR0FBRyxPQUFPLEVBQUUsR0FBR29lLEdBQUdwZSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLEVBQUVrZSxHQUFHLFNBQVNuZSxFQUFFQyxHQUFHLElBQUlDLEVBQUVELEVBQUU4ZCxZQUFZOWQsRUFBRThkLEtBQUssSUFBSTljLEdBQUcsaUJBQWtCakIsRUFBRTBHLFNBQVN1WCxlQUFlamUsR0FBR0EsU0FBSSxFQUFPLEdBQUdpQixFQUFFLENBQU0sSUFBSSxJQUFJQyxLQUFibEIsRUFBRSxDQUFDLEVBQWVDLEVBQUVrSSxFQUFFbEksRUFBRWlCLEtBQUtsQixFQUFFa0IsRUFBRWtTLGVBQWVuVCxFQUFFaUIsSUFBSWxCLEVBQUU0WixHQUFHLEdBQUczWixJQUFJRCxFQUFFa2UsWUFBWWxlLEVBQUVrZSxHQUFRdUIsR0FBR3ZmLEVBQUVlLEVBQUVqQixFQUFaa0IsRUFBRSxHQUFjLEVBQUVqQixPQUFFLEdBQVF5ZixHQUFHeGYsRUFBRWdCLEVBQUUsTUFBTXdTLEdBQUcsVUFBVyxRQUFReFQsRUFBRSxtQ0FBbUNGLEVBQUVBLEVBQUUsR0FBRyxFQUFFaUQsRUFBRTBGLEVBQUUsV0FBVyxDQUFDLEdBQUdpWCxHQUFHWCxHQUFHSyxHQUFHLFNBQVN0ZixHQUFHLElBQUksSUFBSUMsRUFBRSxDQUFDLEtBQUssTUFBTSxLQUFLQyxFQUFFLEVBQUVBLEVBQUVELEVBQUVTLFFBQVFWLEVBQUVFLElBQUlGLEVBQUVBLEVBQUVDLEVBQUVDLElBQWtCLE9BQWRELEVBQUVzTCxHQUFHckUsR0FBRytDLE9BQWFqSyxHQUFHLEdBQUdBLEVBQUU4QyxRQUFRLE9BQU8sR0FBRzdDLEVBQUU2QyxRQUFRLE9BQU85QyxJQUFJQyxDQUFDLEVBQUV5ZixHQUFHLFNBQVMxZixFQUFFQyxHQUFHK2hCLEdBQUdoaUIsRUFBRUMsRUFBRSxFQUFFLElBQUk0SyxHQUFHLFNBQVM3SyxHQUFHa2YsR0FBR2xmLEdBQUUsRUFBRyxFQUFFaWlCLEdBQUcsU0FBU2ppQixFQUFFQyxHQUFHQSxFQUFFQSxHQUFHLEdBQUcsSUFBSSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVELEVBQUVTLFNBQVNSLEVBQUVGLEVBQUVDLEVBQUVDLElBQUksSUFBSUYsRUFBRSxFQUFFQSxFQUFFQyxFQUFFUyxPQUFPVixJQUFJMmYsR0FBRzFmLEVBQUVELEdBQUcsRUFDanVCdUYsRUFBRWtDLEtBQUssQ0FBQyxXQUFXLFNBQVN6SCxFQUFFQyxFQUFFQyxHQUFvRixHQUFqRnVlLEdBQUd2ZSxFQUFFRCxHQUFHdWUsR0FBRy9XLEtBQUt4SCxHQUFHZ2lCLEdBQUduQyxHQUFHOWYsR0FBR2lpQixHQUFHbEMsR0FBRzdmLEVBQUVrUCxHQUFHOFMsWUFBWUQsR0FBR2pDLEdBQUc5ZixFQUFFa1AsR0FBRytTLFNBQVM1UCxLQUFLWCxLQUFRLFlBQVlTLEVBQUUsYUFBYSxDQUFxRCxHQUFwRDVHLEdBQUd6TCxHQUFHd1QsR0FBR0wsUUFBUWQsRUFBRSw0QkFBNEJ3QixLQUFRM1QsSUFBSUYsRUFBRUUsRUFBRXNQLFVBQVUsQ0FBQyxJQUFJdk8sRUFBRXVILEdBQUd4SSxVQUFVRSxFQUFFc1AsUUFBUSxDQUFDNUUsSUFBRyxXQUFXQyxHQUFHNUosRUFBRSxHQUFFLENBQUMsSUFBSTBILEVBQUV5WixLQUFJLEVBQUcsSUFBSUMsR0FBRyxTQUFTcmlCLEdBQTJCLEdBQXhCQSxHQUFHQSxFQUFFOFQsRUFBRTlULElBQUlBLEVBQUVvZSxTQUFJLEVBQVksQ0FBQyxJQUFJbmUsRUFBRWdILEVBQUVnWCxlQUFlamUsR0FBR0MsR0FBR0EsRUFBRW9LLFdBQVdELFlBQVluSyxVQUFVNlQsRUFBRTlULEdBQUdxaUIsR0FBR3JpQixFQUFFLENBQUMsRUFBTXNpQixHQUFHLFNBQVNDLEdBQUcsTUFBTUMsR0FBRyxHQUFHUixHQUFHLFNBQVNoaUIsRUFBRUMsR0FBRyxTQUFTQyxJQUFJcUssR0FBRyxVQUFVdEosRUFBRSxTQUFTLEtBQUssQ0FBQyxTQUFTQSxFQUFFTSxHQUFHLElBQUlkLEVBQUVjLEVBQUVraEIsS0FBS3ZmLEVBQUUzQixFQUFFcWIsT0FBTyxHQUFHOEYsR0FBR2ppQixFQUFFUixHQUFHLENBQUMsSUFBSXdQLEVBQUV2TyxFQUFFQSxHQUFFLEVBQUd1TyxHQUFHdEQsRUFBRSxPQUFPd1csR0FBRzNpQixHQUFFLFdBQVd5UCxHQUFHdEQsRUFBRSxPQUFPak0sSUFBSSxJQUFJLElBQUkwUCxFQUFFM00sRUFBRXFJLEVBQUUsT0FBTyxJQUFJdUUsRUFBRSxFQUFFQSxFQUFFRCxFQUFFbFAsT0FBT21QLElBQUlELEVBQUVDLEdBQUcsQ0FBQzRTLEtBQUtoaUIsRUFBRW1jLE9BQU8xWixHQUFHLEdBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSWpELEVBQUVTLE9BQU8sQ0FBQzhoQixHQUFHcGQsRUFBRThCLEdBQUcrQyxLQUFLLFNBQVMsSUFBSSxJQUFJL0ksR0FBRSxFQUFHcUosR0FBRyxVQUFVdEosRUFBRSxNQUFNLE1BQU1zTyxHQUFHdlAsRUFBRUUsRUFBRSxDQUFDLEVBQUV3aUIsR0FBRyxTQUFTMWlCLEVBQUVDLEdBQWUsR0FBWkQsRUFBRWdDLE9BQU9oQyxHQUFNc2lCLEdBQUcxYyxLQUFLNUYsR0FBRyxPQUFNLEVBQUcsSUFBSUUsR0FBRSxFQUFvQyxHQUFqQ3FpQixHQUFHM2MsS0FBSzVGLEtBQUtFLEdBQUUsRUFBR0YsRUFBRUEsRUFBRWdLLE9BQU8sS0FBUSxNQUFNcEUsS0FBSzVGLEdBQUcsT0FBTSxFQUFHLElBQUlpQixFQUFFNFYsR0FBRzdXLEdBQUcsSUFBSWlCLEVBQUUsT0FBTSxFQUM3NEIsR0FBTmpCLEVBQUVpQixFQUFFTSxFQUFLTixFQUFFMmhCLEdBQUc1aUIsSUFBSSxHQUFHc0gsR0FBR2pGLEtBQUtwQyxFQUFFRCxHQUFHLENBQUMsSUFBRyxpQkFBaUJpQixFQUFFMmhCLEdBQUczaEIsRUFBRTJoQixJQUFJSixHQUFHLElBQUl4aUIsRUFBRSxvQkFBb0JpQixFQUFFQSxFQUFFakIsR0FBR2lCLEVBQUVqQixFQUFFRSxFQUFFLEVBQUUsR0FBR0QsRUFBRWdILEVBQUVnWCxlQUFlamUsR0FBR2dVLEdBQUdoVSxFQUFFLEdBQUdpQixHQUFHaEIsR0FBR2dCLEVBQUVrWSxPQUFPbFksRUFBRW1ZLFFBQU8sQ0FBQ3BaLEVBQUUsQ0FBd0IsR0FBdkJFLEVBQUVELEVBQUVvSyxXQUFXckssRUFBRWlCLEdBQUcsQ0FBQyxFQUFLMlMsS0FBSyxDQUFDLElBQUkxUyxFQUFFakIsRUFBRWtZLEdBQUcsR0FBR2pYLEVBQUUsQ0FBMkIsR0FBRyxLQUE3QkQsR0FBR0EsRUFBRTZTLEVBQUU1UyxJQUFJRCxFQUFFZ1QsV0FBTSxJQUFpQixJQUFJaFQsRUFBRSxNQUFNakIsRUFBRXFpQixHQUFHbmhCLEVBQUUsQ0FBQyxFQUFFRCxFQUFFZixFQUFFMmlCLGNBQWM1aEIsRUFBRXFOLGNBQWNyTixFQUFFcU4sYUFBYSxtQkFBbUJwTyxFQUFFbUssV0FBV0QsWUFBWW5KLEdBQUdmLEVBQUV1YSxNQUFNMkYsUUFBUSxJQUFJbmYsRUFBRWpCLEVBQUVtWixNQUFNLElBQUk1WCxFQUFFdkIsRUFBRW9aLE9BQU8zWSxFQUFFUCxFQUFFdWEsTUFBTWhhLEVBQUVxaUIsV0FBVyxJQUFJcmlCLEVBQUVzaUIsT0FBTyxJQUFJdGlCLEVBQUV1aUIsUUFBUSxJQUFJdmlCLEVBQUV3aUIsV0FBVyxjQUFjeGlCLEVBQUV5aUIsWUFDdGYsT0FBT3ppQixFQUFFMGlCLFNBQVMsT0FBTzFpQixFQUFFMmlCLFdBQVcsT0FBTzNpQixFQUFFNGlCLFdBQVcsU0FBUzVpQixFQUFFNmlCLFNBQVMsTUFBTTdpQixFQUFFOGlCLGNBQWMsWUFBV3JqQixFQUFFQSxFQUFFdWEsT0FBUW9ILFFBQVEsZ0JBQWVwaEIsRUFBRVIsRUFBRXdhLE9BQVErSSxTQUFTLFNBQVMvaUIsRUFBRWdqQixLQUFLLElBQUloakIsRUFBRThTLElBQUksSUFBSTlTLEVBQUVpakIsV0FBVyxVQUFVemlCLElBQUlmLEVBQUVpWixNQUFNMVksRUFBRTBZLE1BQU1sWSxFQUFFLE1BQU1NLElBQUlyQixFQUFFa1osT0FBTzNZLEVBQUUyWSxPQUFPN1gsRUFBRSxNQUFNdkIsRUFBRXVqQixnQkFBZ0JyakIsRUFBRXFqQixjQUFjdmpCLEVBQUV1akIsZUFBZXJpQixHQUFHOFMsR0FBRzlTLEVBQUUsRUFBRSxDQUFDakIsRUFBRSxpQkFBZ0IsSUFBS1AsTUFBTUMsU0FBUyxDQUFDLE9BQU0sQ0FBRSxDQUFDLE9BQU0sQ0FBRSxFQUFFZ2pCLEdBQUcsU0FBUzNpQixFQUFFQyxHQUFHc1AsR0FBR3ZQLEVBQUVDLEVBQUUsRUFBTTBqQixHQUFHLFNBQVMzakIsRUFBRUMsR0FBR2EsS0FBS3FMLEVBQUVuTSxFQUFFQSxFQUFFQyxHQUFHLENBQUMsRUFBRWEsS0FBS0MsR0FBR3NVLE9BQU9yVixFQUFFNGpCLFNBQVMsRUFBRTlpQixLQUFLOFQsRUFBRTVVLEVBQUU2akIsT0FBTy9pQixLQUFLeWQsRUFBRXZlLEVBQUU4akIsS0FBS2hqQixLQUFLaWpCLEtBQUsvakIsRUFBRWdrQixNQUFNLEVBQUVMLEdBQUd2akIsVUFBVTZqQixLQUFLLFdBQVcsSUFBSSxJQUFJamtCLEVBQUVjLEtBQUtxTCxFQUFFLElBQUlsTSxFQUFFeUcsU0FBUzJTLE9BQU9yWSxNQUFNLFFBQVFkLEVBQUUsRUFBRUEsRUFBRUQsRUFBRVMsU0FBU1IsRUFBRSxDQUFDLElBQUllLEVBQUVoQixFQUFFQyxHQUFHLEdBQUcsR0FBR2UsRUFBRTZCLFFBQVE5QyxHQUFHLE9BQU9pQixFQUFFK0ksT0FBT2hLLEVBQUVVLE9BQU8sQ0FBQyxFQUMxckJpakIsR0FBR3ZqQixVQUFVc08sTUFBTSxTQUFTMU8sRUFBRUMsR0FBRyxJQUFJaWtCLEdBQUd0ZSxLQUFLOUUsS0FBS3FMLEdBQUcsS0FBSyxzQkFBc0IsSUFBSWdRLEdBQUd2VyxLQUFLNUYsR0FBRyxLQUFLLHVCQUFrSSxHQUEzR0EsRUFBRWMsS0FBS3FMLEVBQUUsSUFBSW5NLEVBQUVjLEtBQUs4VCxJQUFJNVUsR0FBRyxXQUFXYyxLQUFLOFQsR0FBRzlULEtBQUt5ZCxJQUFJdmUsR0FBRyxTQUFTYyxLQUFLeWQsR0FBc0MsSUFBbkN0ZSxFQUFFLGlCQUFrQkEsRUFBRUEsRUFBRWEsS0FBS0MsSUFBVyxDQUFDLElBQUliLEVBQUUsSUFBSVIsS0FBS1EsRUFBRWlrQixXQUFXamtCLEVBQUVra0IsYUFBYW5rQixHQUFHRCxHQUFHLFlBQVlFLEVBQUVta0IsYUFBYSxDQUEyQyxPQUExQ3ZqQixLQUFLaWpCLEtBQUsvakIsR0FBRyxXQUFXMEcsU0FBUzJTLE9BQU9yWixHQUFRLENBQUUsRUFBRTJqQixHQUFHdmpCLFVBQVVra0IsTUFBTSxXQUFXeGpCLEtBQUs0TixNQUFNLEdBQUcsRUFBRSxFQUFFLElBQUl5TixHQUFHLDRCQUE0QitILEdBQUcsMEJBQ3RjUCxHQUFHWSxRQUFRLFNBQVN2a0IsR0FBRyxJQUFJLElBQUlDLEVBQUV5RyxTQUFTMlMsT0FBT3JZLE1BQU0sUUFBUWQsRUFBRSxFQUFFQSxFQUFFRCxFQUFFUyxTQUFTUixFQUFFLENBQUMsSUFBSWUsRUFBRWhCLEVBQUVDLEdBQUdjLE1BQU0sS0FBaUJoQixFQUFWaUIsRUFBRStMLFFBQVkvTCxFQUFFMEksS0FBSyxLQUFLLENBQUMsRUFBRSxJQUFJNmEsR0FBRyxTQUFTeGtCLEdBQUdjLEtBQUttSCxFQUFFakksQ0FBQyxFQUFFd2tCLEdBQUdwa0IsVUFBVTZqQixLQUFLLFdBQVcsR0FBR1EsRUFBRXJjLGVBQWV0SCxLQUFLbUgsR0FBRyxPQUFPd2MsRUFBRTNqQixLQUFLbUgsRUFBRSxFQUFFdWMsR0FBR3BrQixVQUFVc08sTUFBTSxTQUFTMU8sR0FBZSxPQUFaeWtCLEVBQUUzakIsS0FBS21ILEdBQUdqSSxHQUFRLENBQUUsRUFBRXdrQixHQUFHcGtCLFVBQVVra0IsTUFBTSxrQkFBa0JHLEVBQUUzakIsS0FBS21ILEVBQUUsRUFBRSxJQUFJd2MsRUFBRSxDQUFDLEVBQUVELEdBQUdELFFBQVEsU0FBU3ZrQixHQUFHLElBQUksSUFBSUMsS0FBS3drQixFQUFFQSxFQUFFcmMsZUFBZW5JLElBQUlELEVBQUVDLEVBQUV3a0IsRUFBRXhrQixHQUFHLEVBQUUsSUFBSXlrQixHQUFHLFdBQVdsbEIsT0FBTzJILFNBQVMwVixTQUFTOEgsR0FBR0QsSUFBSSxVQUFVbGxCLE9BQU8ySCxTQUFTMFYsU0FBUzhHLEdBQUdhLEdBQUdJLEdBQUcsU0FBUzVrQixHQUFHLElBQUlDLEVBQUVELEVBQUVnSyxPQUFPLEdBQUc5SixFQUFFLEdBQUdlLEVBQUV6QixPQUFPMkgsU0FBUzBkLFNBQVMsR0FBRyxLQUFLNWtCLEVBQUUsQ0FBa0IsR0FBakJDLEVBQUVzWixTQUFTdlosRUFBRSxJQUFPcVYsTUFBTXBWLEdBQUcsT0FBTyxLQUFvQixJQUFmRCxFQUFFZ0IsRUFBRUQsTUFBTSxNQUFVTixPQUFPUixFQUFFLEVBQUUsT0FBTyxLQUFLRCxFQUFFUyxRQUFRUixFQUFFLElBQUllLEVBQUUsSUFBSUEsRUFBRSxNQUFNQSxFQUFFLEdBQUcsTUFBTSxDQUFDNmpCLEVBQUUsS0FBSzlrQixFQUFFMk4sT0FBTyxHQUFHa1csT0FBTzVpQixFQUFFMk8sRUFBRTFQLEVBQUUsRUFBRTZrQixHQUFHLFdBQVcsSUFBSS9rQixFQUFFQyxFQUFFLEtBQWtJLE9BQTdIMGtCLEdBQUdKLFNBQVEsU0FBU3JrQixFQUFFZSxHQUFHLElBQUlmLEVBQUU0QyxRQUFRLGlCQUFpQjVDLEVBQUUwa0IsR0FBRzFrQixFQUFFME4sVUFBVSxNQUFNNU4sR0FBR0UsRUFBRTRrQixJQUFJOWtCLEVBQUU4a0IsR0FBRzVrQixFQUFFNGtCLEdBQUc5a0IsRUFBRThrQixHQUFHNWtCLEVBQUUwUCxFQUFFNVAsRUFBRTRQLEtBQUs1UCxFQUFFRSxFQUFFRCxFQUFFZ0IsRUFBRSxJQUFTLENBQUNKLEdBQUdiLEVBQUUySSxFQUFFMUksRUFBRSxFQUFNK2tCLEdBQUcsU0FBU2hsQixHQUFHLEdBQUcsSUFBSUEsRUFBRThDLFFBQVEsUUFBUSxPQUFPLEtBQUssSUFBSTdDLEVBQUUsQ0FBQ2tWLEdBQUUsR0FBa0IsS0FBZG5WLEVBQUVBLEVBQUVnSyxPQUFPLElBQVMsT0FBTy9KLEVBQUUsSUFBSUMsRUFBRUYsRUFBRTJOLE9BQU8sR0FBcUIxTSxHQUFsQmpCLEVBQUVBLEVBQUVnSyxPQUFPLElBQVdxSixZQUFZLEtBQUssSUFBSSxHQUFHcFMsRUFBRSxPQUFPaEIsRUFBRSxJQUFJaUIsRUFBRTBqQixHQUFHNWtCLEVBQUVnSyxPQUFPL0ksRUFBRSxJQUFJLE9BQUcsTUFBTUMsR0FBaUMsT0FBdEJsQixFQUFFQSxFQUFFNE4sVUFBVSxFQUFFM00sSUFBYzBNLE9BQU8sTUFBWTFNLEVBQUUsTUFBTWYsR0FBR2dCLEVBQUU0akIsS0FBYSxNQUFNNWtCLEdBQUdnQixFQUFFNGpCLElBQUk3akIsSUFBSXlqQixHQUFoR3prQixFQUFxRyxDQUFDa1YsR0FBRSxFQUFHMlAsRUFBRTdqQixFQUFFYyxHQUFHL0IsRUFBRWdLLE9BQU8sR0FBRzZaLE9BQU8zaUIsRUFBRTJpQixPQUFPalUsRUFBRTFPLEVBQUUwTyxFQUFFLEVBQUVxVixHQUFHLFNBQVNqbEIsR0FBRyxPQUFJQSxJQUFXQSxFQUFFQSxFQUFFZ0IsTUFBTSxNQUFjLEdBQUdoQixFQUFFLEdBQUdnQixNQUFNLEtBQXpDLEVBQWdELEVBQUVra0IsR0FBRyxTQUFTbGxCLEdBQWtCLE1BQU0sQ0FBQ21sQixVQUF0Qm5sQixFQUFFQSxFQUFFZ0IsTUFBTSxNQUF1QixHQUFHQSxNQUFNLEtBQUssR0FDNzRDWSxHQUFHcWpCLEdBQUdqbEIsRUFBRSxJQUFJb0MsR0FBRzZpQixHQUFHamxCLEVBQUUsSUFBSWtDLEdBQUcraUIsR0FBR2psQixFQUFFLElBQUksRUFBRW9sQixHQUFHLFdBQVcsSUFBeUNsbEIsRUFBckNGLEVBQUUra0IsS0FBSzlrQixFQUFFRCxFQUFFYSxHQUFTLEdBQUcsUUFBVGIsRUFBRUEsRUFBRTJJLEtBQXFCZ2MsR0FBR0osU0FBUSxTQUFTaGpCLEVBQUVkLElBQUljLEVBQUV5akIsR0FBR3pqQixLQUFLQSxFQUFFNFQsR0FBRzVULEVBQUV1akIsR0FBRzdrQixFQUFFNmtCLEdBQUd2akIsRUFBRXFPLEdBQUczUCxFQUFFMlAsSUFBSTFQLEVBQUVPLEVBQUUsSUFBTVAsR0FBRSxDQUFDLElBQUllLEVBQUVpa0IsR0FBR2hsQixHQUFHZ0IsRUFBRUQsR0FBR0EsRUFBRVcsR0FBR3lULE9BQU9yVixJQUFvQixHQUFoQmlCLEVBQUVBLEdBQUdBLEVBQUVra0IsU0FBWWprQixFQUFFLE1BQU0sQ0FBQ3lILEVBQUUzSSxFQUFFcUIsR0FBR0gsRUFBRWlrQixTQUFTbGtCLEVBQUUsQ0FBRSxPQUFPLElBQUksRUFBTXlNLEVBQUUsV0FBVzVNLEtBQUs2VCxFQUFFMFEsRUFBRSxFQUFFM1gsRUFBRXROLFVBQVVrbEIsRUFBRSxXQUFXeGtCLEtBQUt3SyxJQUFJeEssS0FBS3dFLEVBQUUsRUFBRXhFLEtBQUt3SyxHQUFFLEVBQUd4SyxLQUFLMmpCLElBQUksRUFBRS9XLEVBQUV0TixVQUFVcWtCLEVBQUUsV0FBVzNqQixLQUFLd0ssSUFBSXhLLEtBQUs2VCxJQUFJN1QsS0FBS3dFLEVBQUV4RSxLQUFLZ1QsRUFBRWhULEtBQUt3RSxFQUFFM0UsS0FBSzRrQixJQUFJLEdBQUd6a0IsS0FBS3dFLEdBQUd4RSxLQUFLZ1QsR0FBRyxLQUFLdFUsT0FBT2lKLFdBQVc3RixHQUFHOUIsS0FBSzJqQixFQUFFM2pCLE1BQU0sSUFBSUEsS0FBS3dFLEdBQUcsRUFBRW9JLEVBQUV0TixVQUFVa0YsRUFBRSxFQUFFb0ksRUFBRXROLFVBQVUwVCxFQUFFLEVBQUVwRyxFQUFFdE4sVUFBVXVVLEVBQUUsS0FBS2pILEVBQUV0TixVQUFVa0wsR0FBRSxFQUFHLElBQUksSUFBSWthLEdBQUcsRUFBRSxHQUFHQSxLQUFLQSxJQUFJLElBQUlDLEdBQUcsS0FBSzdSLEdBQUcsV0FBVyxPQUFPdEksRUFBRXZJLElBQUcsQ0FBRSxFQUFFOFEsR0FBRyxXQUFXdkksRUFBRXZJLElBQUcsRUFBRyxJQUFJL0MsRUFBRW9sQixNQUFNcGxCLEVBQUVBLEdBQUdBLEVBQUUySSxJQUFJMkosR0FBRyxpQ0FBaUN0UyxHQUFHeWxCLEtBQUtBLEdBQUd4aUIsRUFBRXFJLEVBQUUsS0FBSyxJQUFJb0MsS0FBSTFOLEVBQUV5bEIsSUFBS0gsR0FBR3RsQixFQUFFc2xCLEdBQUcsRUFDMXZCLElBQUlELEdBQUcsV0FBVyxJQUFJcmxCLEVBQUVvbEIsS0FBS25sQixFQUFFRCxHQUFHQSxFQUFFcUIsSUFBSSxLQUFLbkIsRUFBRUYsR0FBR0EsRUFBRW1sQixTQUMzQyxPQURvRDVWLEdBQUcsT0FBTyxDQUFDQyxTQUFTLFdBQVcsSUFBSXZPLEVBQUUrRixFQUFFekgsS0FBS21tQixLQUFLeGtCLEVBQUUsQ0FBQ3lrQixVQUFVemxCLEVBQUUwbEIsY0FBYzNsQixHQUFHZ0IsRUFBRTRrQixrQkFBa0Iza0IsR0FBRSxTQUFTSyxHQUFHLElBQUlkLEVBQUVTLEVBQUUwa0IsY0FBYzFpQixFQUFFbVAsRUFBRSxlQUFzRG5QLEVBQUVBLElBQTFDM0IsR0FBRThRLEVBQUUsbUJBQW9CNVIsR0FBR2MsSUFBSWQsSUFBSWMsT0FBWStRLEdBQUcsYUFBYS9RLEdBQUdzUyxLQUFLZ0ssS0FBS3RjLEtBQUtBLEVBQUVOLEVBQUU2a0IsU0FBU3ZrQixLQUFLQSxFQUFFTixFQUFFOGtCLFdBQVd4a0IsRUFBRSxRQUFPQSxFQUFFNFIsS0FBSyxJQUFJMUQsRUFBRTRDLEVBQUUsa0JBQTRDNUMsRUFBRUEsSUFBNUJoUCxFQUFFUSxFQUFFK2tCLE1BQU16a0IsRUFBRXFSLHFCQUFzQixJQUFvQm5ELEVBQUU2QyxHQUFHLGlCQUFpQjdSLElBQUl5QyxHQUFHdU0sSUFBSStELEdBQUdqUyxLQUFLOFEsRUFBRSw0QkFBNEJwUixFQUFFZ2xCLE1BQU0xa0IsR0FDemYsRUFBRyxHQUFFLEtBQVUsQ0FBRSxFQUFFNEssRUFBRSxPQUFNLEVBQUczTSxPQUFPRCxLQUFLRSxLQUFLME0sRUFBRSxPQUFNLFVBQVczTSxPQUFPRCxLQUFLRSxHQUFLLEVBQUU0QyxVQUFLLEdBQzFGLElBQUk2akIsYUFBZTNtQixLQUFLeVIsS0FBSyxHQUFHLENBQUN4QixTQUFTaFEsT0FBb0IsWUFBRTRQLEdBQUcsQ0FBQyxJQUFNLENBQUMsR0FBSyxDQUFDLFdBQWEsVUFBVSxhQUFhLENBQUMsUUFBVSw0Q0FBNEMsU0FBVyx3REFBd0QsWUFBYSxFQUFLLGFBQWUsOENBQThDLFNBQVUsR0FBTyxNQUFRLENBQUMsb0JBQXNCLElBQUssU0FBVSxFQUFNLGtCQUFtQixFQUFNLEtBQU8sMkJBQTJCLGtCQUFtQixFQUFLLG9CQUFvQixDQUFDLEtBQU8sQ0FBQyxxQkFBc0IsSUFBTyxZQUFhLEVBQU0sT0FBUyxDQUFDLElBQU0sR0FBRyx5QkFBMEIsRUFBTSxZQUFjLENBQUMsaUJBQWtCLEdBQU0sSUFBTSxDQUFDLEtBQU8sS0FBTSxPQUFTLENBQUMsTUFBTyxHQUFPLFlBQWEsRUFBSyxrQkFBb0IsQ0FBQyxLQUFPLEdBQUssd0JBQXlCLEVBQUssTUFBUSxLQUFLLFFBQVUsQ0FBQyxRQUFVLENBQUMsT0FBUyxDQUFDLFNBQVcsQ0FBQyxTQUFTLFNBQVMsSUFBTSxpRUFBc0UsUUFBVSxDQUFDLFNBQVMsZUFBZSxZQUFjLENBQUMsSUFBTSxxREFBMEQsWUFBYyxDQUFDLE9BQVMsQ0FBQyxJQUFNLElBQUksSUFBTSxtRUFBd0UsV0FBYSxDQUFDLE9BQVMsQ0FBQyxJQUFNLElBQUksSUFBTSw4RUFBNkYsTUFBUSxDQUFDLE9BQVMsQ0FBQyxJQUFNLElBQUksSUFBTSwwRUFBMEUsV0FBVyxLQUFLLFFBQVUsQ0FBQyxJQUFNLG9FQUFtRixpQkFBbUIsQ0FBQyxJQUFNLDJDQUEyQyxRQUFVLENBQUMsT0FBUyxDQUFDLFNBQVcsQ0FBQyxTQUFTLFNBQVMsSUFBTSxpRUFBc0UsUUFBVSxDQUFDLFNBQVMsZUFBZSxTQUFXLENBQUMsT0FBUyxDQUFDLElBQU0sSUFBSSxJQUFNLDBEQUErRCxjQUFnQixDQUFDLElBQU0seUVBQThFLGNBQWdCLENBQUMsSUFBTSxpRkFBc0YsWUFBYyxDQUFDLElBQU0sbUVBQXdFLGVBQWUsMEJBQTBCLFdBQWEsQ0FBQyxJQUFNLElBQUksUUFBVSxDQUFDLElBQU0scUVBQXFFLGVBQWlCLENBQUMsT0FBUyxDQUFDLElBQU0sSUFBSSxJQUFNLDhEQUFtRSxLQUFPLENBQUMsT0FBUyxDQUFDLElBQU0sSUFBSSxJQUFNLDBFQUErRSxjQUFjLDBCQUEwQixPQUFTLENBQUMsT0FBUyxDQUFDLElBQU0sSUFBSSxJQUFNLGdFQUFxRSxRQUFVLENBQUMsV0FBVyxNQUFRLENBQUMsT0FBUyxDQUFDLElBQU0sSUFBSSxJQUFNLHNFQUFzRSxNQUFRLENBQUMsSUFBTSwyRUFBZ0YsUUFBVSxDQUFDLE9BQVMsQ0FBQyxNQUFRLEdBQUcsS0FBTyxHQUFHLElBQU0sSUFBSSxJQUFNLDhEQUFtRSxTQUFXLENBQUMsT0FBUyxDQUFDLFNBQVcsQ0FBQyxTQUFTLFNBQVMsSUFBTSxrRUFBdUUsUUFBVSxDQUFDLFNBQVMsZUFBZSxrQkFBa0IsOEJBQThCLFNBQVcsQ0FBQyxJQUFNLDhFQUFtRixXQUFhLENBQUMsT0FBUyxDQUFDLElBQU0sSUFBSSxJQUFNLHFFQUEwRSxhQUFlLENBQUMsT0FBUyxDQUFDLElBQU0sSUFBSSxJQUFNLDZEQUE2RCxTQUFXLENBQUMsSUFBTSx1REFBNEQsUUFBVSxDQUFDLGNBQWMsZUFBZSwwQkFBMEIsWUFBYyxDQUFDLElBQU0sbUVBQXdFLGdCQUFrQixDQUFDLElBQU0sZ0VBQWdFLE9BQVMsQ0FBQyxJQUFNLGlFQUFzRSxVQUFZLENBQUMsSUFBTSxtRkFBd0YsaUJBQW1CLENBQUMsSUFBTSxzREFBMkQsUUFBVSxDQUFDLE9BQVMsQ0FBQyxJQUFNLElBQUksSUFBTSxrRUFBdUUsS0FBTyxDQUFDLElBQU0sZ0VBQXFFLGdCQUFrQixDQUFDLE9BQVMsQ0FBQyxJQUFNLElBQUksSUFBTSwrREFBOEUsYUFBZSxDQUFDLElBQU0sdUVBQTRFLGFBQWUsQ0FBQyxJQUFNLG1FQUF3RSxjQUFnQixDQUFDLElBQU0sNkNBQTZDLFVBQVksQ0FBQyxJQUFNLGdGQUFxRixhQUFlLENBQUMsSUFBTSwyQ0FBMkMsT0FBUyxDQUFDLElBQU0saUVBQXNFLFlBQWMsQ0FBQyxJQUFNLHVEQUE0RCxRQUFVLENBQUMsU0FBUyxLQUFPLENBQUMsSUFBTSwrREFBb0UsS0FBTyxDQUFDLElBQU0sbURBQW1ELEVBQUksa0lBQWdLLEVBQUkseUNBQXlDLEtBQU0sRUFBSyxHQUFLLDJDQUEyQyxLQUFNLEdBQU8sU0FBVyxDQUFDLFdBQVcsV0FBVyxVQUFVLFdBQVcsZUFBZSxZQUFZLFdBQVcsa0JBQWtCLFNBQVMsVUFBVSxTQUFTLE9BQU8sZ0JBQWdCLFNBQVMsVUFBVSxhQUFhLE9BQU8sVUFBVSxPQUFPLGNBQWMsbUJBQW1CLGNBQWMsZUFBZSxtQkFBbUIsYUFBYSxVQUFVLGNBQWMsYUFBYSxVQUFVLGNBQWMsaUJBQWlCLEdBQUssMkNBQTJDLFdBQWEsQ0FBQyxrQkFBa0IsVUFBVSxVQUFVLGVBQWUsV0FBVyxRQUFVLENBQUMsU0FBUyx3Q0MxRTc0TCxJQUFJK1csRUFBVSxFQUFRLElBTWxCQyxFQUFnQixDQUNsQkMsbUJBQW1CLEVBQ25CQyxhQUFhLEVBQ2JDLGNBQWMsRUFDZEMsY0FBYyxFQUNkNWhCLGFBQWEsRUFDYjZoQixpQkFBaUIsRUFDakJDLDBCQUEwQixFQUMxQkMsMEJBQTBCLEVBQzFCQyxRQUFRLEVBQ1JDLFdBQVcsRUFDWDlJLE1BQU0sR0FFSitJLEVBQWdCLENBQ2xCOWlCLE1BQU0sRUFDTnRELFFBQVEsRUFDUk4sV0FBVyxFQUNYMm1CLFFBQVEsRUFDUkMsUUFBUSxFQUNSeGtCLFdBQVcsRUFDWHlrQixPQUFPLEdBU0xDLEVBQWUsQ0FDakIsVUFBWSxFQUNaQyxTQUFTLEVBQ1RYLGNBQWMsRUFDZDVoQixhQUFhLEVBQ2JpaUIsV0FBVyxFQUNYOUksTUFBTSxHQUVKcUosRUFBZSxDQUFDLEVBSXBCLFNBQVNDLEVBQVdDLEdBRWxCLE9BQUluQixFQUFRb0IsT0FBT0QsR0FDVkosRUFJRkUsRUFBYUUsRUFBb0IsV0FBTWxCLENBQ2hELENBWEFnQixFQUFhakIsRUFBUXFCLFlBaEJLLENBQ3hCLFVBQVksRUFDWjNILFFBQVEsRUFDUjJHLGNBQWMsRUFDZDVoQixhQUFhLEVBQ2JpaUIsV0FBVyxHQVliTyxFQUFhakIsRUFBUXNCLE1BQVFQLEVBWTdCLElBQUlubkIsRUFBaUJGLE9BQU9FLGVBQ3hCMm5CLEVBQXNCN25CLE9BQU82bkIsb0JBQzdCQyxFQUF3QjluQixPQUFPOG5CLHNCQUMvQkMsRUFBMkIvbkIsT0FBTytuQix5QkFDbENDLEVBQWlCaG9CLE9BQU9nb0IsZUFDeEJDLEVBQWtCam9CLE9BQU9PLFVBc0M3QjJuQixFQUFPQyxRQXJDUCxTQUFTQyxFQUFxQkMsRUFBaUJDLEVBQWlCQyxHQUM5RCxHQUErQixpQkFBcEJELEVBQThCLENBRXZDLEdBQUlMLEVBQWlCLENBQ25CLElBQUlPLEVBQXFCUixFQUFlTSxHQUVwQ0UsR0FBc0JBLElBQXVCUCxHQUMvQ0csRUFBcUJDLEVBQWlCRyxFQUFvQkQsRUFFOUQsQ0FFQSxJQUFJOWYsRUFBT29mLEVBQW9CUyxHQUUzQlIsSUFDRnJmLEVBQU9BLEVBQUtrRSxPQUFPbWIsRUFBc0JRLEtBTTNDLElBSEEsSUFBSUcsRUFBZ0JqQixFQUFXYSxHQUMzQkssRUFBZ0JsQixFQUFXYyxHQUV0QnJELEVBQUksRUFBR0EsRUFBSXhjLEVBQUs1SCxTQUFVb2tCLEVBQUcsQ0FDcEMsSUFBSTBELEVBQU1sZ0IsRUFBS3djLEdBRWYsS0FBS2dDLEVBQWMwQixJQUFVSixHQUFhQSxFQUFVSSxJQUFXRCxHQUFpQkEsRUFBY0MsSUFBV0YsR0FBaUJBLEVBQWNFLElBQU8sQ0FDN0ksSUFBSUMsRUFBYWIsRUFBeUJPLEVBQWlCSyxHQUUzRCxJQUVFem9CLEVBQWVtb0IsRUFBaUJNLEVBQUtDLEVBQ3ZDLENBQUUsTUFBT3ZuQixHQUFJLENBQ2YsQ0FDRixDQUNGLENBRUEsT0FBT2duQixDQUNULDRCQzNGYSxJQUFJam9CLEVBQUUsbUJBQW9CMEIsUUFBUUEsT0FBTyttQixJQUFJeG9CLEVBQUVELEVBQUUwQixPQUFPK21CLElBQUksaUJBQWlCLE1BQU16bkIsRUFBRWhCLEVBQUUwQixPQUFPK21CLElBQUksZ0JBQWdCLE1BQU14bkIsRUFBRWpCLEVBQUUwQixPQUFPK21CLElBQUksa0JBQWtCLE1BQU1ubkIsRUFBRXRCLEVBQUUwQixPQUFPK21CLElBQUkscUJBQXFCLE1BQU1qb0IsRUFBRVIsRUFBRTBCLE9BQU8rbUIsSUFBSSxrQkFBa0IsTUFBTXhsQixFQUFFakQsRUFBRTBCLE9BQU8rbUIsSUFBSSxrQkFBa0IsTUFBTWpaLEVBQUV4UCxFQUFFMEIsT0FBTyttQixJQUFJLGlCQUFpQixNQUFNOVksRUFBRTNQLEVBQUUwQixPQUFPK21CLElBQUksb0JBQW9CLE1BQU16bUIsRUFBRWhDLEVBQUUwQixPQUFPK21CLElBQUkseUJBQXlCLE1BQU03WSxFQUFFNVAsRUFBRTBCLE9BQU8rbUIsSUFBSSxxQkFBcUIsTUFBTXZZLEVBQUVsUSxFQUFFMEIsT0FBTyttQixJQUFJLGtCQUFrQixNQUFNN2tCLEVBQUU1RCxFQUNwZjBCLE9BQU8rbUIsSUFBSSx1QkFBdUIsTUFBTXhjLEVBQUVqTSxFQUFFMEIsT0FBTyttQixJQUFJLGNBQWMsTUFBTTVqQixFQUFFN0UsRUFBRTBCLE9BQU8rbUIsSUFBSSxjQUFjLE1BQU1wakIsRUFBRXJGLEVBQUUwQixPQUFPK21CLElBQUksZUFBZSxNQUFNN2lCLEVBQUU1RixFQUFFMEIsT0FBTyttQixJQUFJLHFCQUFxQixNQUFNMWhCLEVBQUUvRyxFQUFFMEIsT0FBTyttQixJQUFJLG1CQUFtQixNQUFNclksRUFBRXBRLEVBQUUwQixPQUFPK21CLElBQUksZUFBZSxNQUNsUSxTQUFTemhCLEVBQUVqSCxHQUFHLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxJQUFJeU0sRUFBRXpNLEVBQUUyb0IsU0FBUyxPQUFPbGMsR0FBRyxLQUFLdk0sRUFBRSxPQUFPRixFQUFFQSxFQUFFK2QsTUFBUSxLQUFLbk8sRUFBRSxLQUFLM04sRUFBRSxLQUFLZixFQUFFLEtBQUtULEVBQUUsS0FBS2MsRUFBRSxLQUFLNE8sRUFBRSxPQUFPblEsRUFBRSxRQUFRLE9BQU9BLEVBQUVBLEdBQUdBLEVBQUUyb0IsVUFBWSxLQUFLbFosRUFBRSxLQUFLSSxFQUFFLEtBQUsvSyxFQUFFLEtBQUtvSCxFQUFFLEtBQUtoSixFQUFFLE9BQU9sRCxFQUFFLFFBQVEsT0FBT3lNLEdBQUcsS0FBS3hMLEVBQUUsT0FBT3dMLEVBQUUsQ0FBQyxDQUFDLFNBQVN4SixFQUFFakQsR0FBRyxPQUFPaUgsRUFBRWpILEtBQUtpQyxDQUFDLENBQUMrbEIsRUFBUVksVUFBVWhaLEVBQUVvWSxFQUFRYSxlQUFlNW1CLEVBQUUrbEIsRUFBUWMsZ0JBQWdCclosRUFBRXVZLEVBQVFlLGdCQUFnQjdsQixFQUFFOGtCLEVBQVF0akIsUUFBUXhFLEVBQUU4bkIsRUFBUVIsV0FBVzNYLEVBQUVtWSxFQUFRZ0IsU0FBUzluQixFQUFFOG1CLEVBQVFpQixLQUFLbmtCLEVBQUVrakIsRUFBUVAsS0FBS3ZiLEVBQUU4YixFQUFRa0IsT0FBT2pvQixFQUNoZittQixFQUFRbUIsU0FBUzFvQixFQUFFdW5CLEVBQVFvQixXQUFXN25CLEVBQUV5bUIsRUFBUXFCLFNBQVNsWixFQUFFNlgsRUFBUXNCLFlBQVksU0FBU3RwQixHQUFHLE9BQU9pRCxFQUFFakQsSUFBSWlILEVBQUVqSCxLQUFLNFAsQ0FBQyxFQUFFb1ksRUFBUXVCLGlCQUFpQnRtQixFQUFFK2tCLEVBQVF3QixrQkFBa0IsU0FBU3hwQixHQUFHLE9BQU9pSCxFQUFFakgsS0FBS3lQLENBQUMsRUFBRXVZLEVBQVF5QixrQkFBa0IsU0FBU3pwQixHQUFHLE9BQU9pSCxFQUFFakgsS0FBS2tELENBQUMsRUFBRThrQixFQUFRMEIsVUFBVSxTQUFTMXBCLEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBR0EsRUFBRTJvQixXQUFXem9CLENBQUMsRUFBRThuQixFQUFRMkIsYUFBYSxTQUFTM3BCLEdBQUcsT0FBT2lILEVBQUVqSCxLQUFLNlAsQ0FBQyxFQUFFbVksRUFBUTRCLFdBQVcsU0FBUzVwQixHQUFHLE9BQU9pSCxFQUFFakgsS0FBS2tCLENBQUMsRUFBRThtQixFQUFRNkIsT0FBTyxTQUFTN3BCLEdBQUcsT0FBT2lILEVBQUVqSCxLQUFLOEUsQ0FBQyxFQUMxZGtqQixFQUFRVCxPQUFPLFNBQVN2bkIsR0FBRyxPQUFPaUgsRUFBRWpILEtBQUtrTSxDQUFDLEVBQUU4YixFQUFROEIsU0FBUyxTQUFTOXBCLEdBQUcsT0FBT2lILEVBQUVqSCxLQUFLaUIsQ0FBQyxFQUFFK21CLEVBQVErQixXQUFXLFNBQVMvcEIsR0FBRyxPQUFPaUgsRUFBRWpILEtBQUtTLENBQUMsRUFBRXVuQixFQUFRZ0MsYUFBYSxTQUFTaHFCLEdBQUcsT0FBT2lILEVBQUVqSCxLQUFLdUIsQ0FBQyxFQUFFeW1CLEVBQVFpQyxXQUFXLFNBQVNqcUIsR0FBRyxPQUFPaUgsRUFBRWpILEtBQUttUSxDQUFDLEVBQzFPNlgsRUFBUWtDLG1CQUFtQixTQUFTbHFCLEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsbUJBQW9CQSxHQUFHQSxJQUFJa0IsR0FBR2xCLElBQUlpQyxHQUFHakMsSUFBSVMsR0FBR1QsSUFBSXVCLEdBQUd2QixJQUFJbVEsR0FBR25RLElBQUk2RCxHQUFHLGlCQUFrQjdELEdBQUcsT0FBT0EsSUFBSUEsRUFBRTJvQixXQUFXN2pCLEdBQUc5RSxFQUFFMm9CLFdBQVd6YyxHQUFHbE0sRUFBRTJvQixXQUFXemxCLEdBQUdsRCxFQUFFMm9CLFdBQVdsWixHQUFHelAsRUFBRTJvQixXQUFXOVksR0FBRzdQLEVBQUUyb0IsV0FBVzlpQixHQUFHN0YsRUFBRTJvQixXQUFXM2hCLEdBQUdoSCxFQUFFMm9CLFdBQVd0WSxHQUFHclEsRUFBRTJvQixXQUFXcmpCLEVBQUUsRUFBRTBpQixFQUFRbUMsT0FBT2xqQiw2QkNYalU4Z0IsRUFBT0MsUUFBVSxFQUFqQixpQ0NTVyxJQUFJcG9CLEVBQUcsRUFBUSxLQUFTcUYsRUFBRyxFQUFRLEtBQWEsU0FBU2tMLEVBQUVuUSxHQUFHLElBQUksSUFBSUMsRUFBRSx5REFBeURELEVBQUVFLEVBQUUsRUFBRUEsRUFBRXNDLFVBQVU5QixPQUFPUixJQUFJRCxHQUFHLFdBQVdxSixtQkFBbUI5RyxVQUFVdEMsSUFBSSxNQUFNLHlCQUF5QkYsRUFBRSxXQUFXQyxFQUFFLGdIQUFnSCxDQUFDLElBQUlLLEVBQUcsSUFBSThwQixJQUFJdnBCLEVBQUcsQ0FBQyxFQUFFLFNBQVNFLEVBQUdmLEVBQUVDLEdBQUdvQixFQUFHckIsRUFBRUMsR0FBR29CLEVBQUdyQixFQUFFLFVBQVVDLEVBQUUsQ0FDeGIsU0FBU29CLEVBQUdyQixFQUFFQyxHQUFXLElBQVJZLEVBQUdiLEdBQUdDLEVBQU1ELEVBQUUsRUFBRUEsRUFBRUMsRUFBRVMsT0FBT1YsSUFBSU0sRUFBRytwQixJQUFJcHFCLEVBQUVELEdBQUcsQ0FDNUQsSUFBSTRCLElBQUssb0JBQXFCcEMsYUFBUSxJQUFxQkEsT0FBT2tILGVBQVUsSUFBcUJsSCxPQUFPa0gsU0FBU0MsZUFBZTVFLEVBQUdsQyxPQUFPTyxVQUFVZ0ksZUFBZWxHLEVBQUcsOFZBQThWRSxFQUNwZ0IsQ0FBQyxFQUFFSyxFQUFHLENBQUMsRUFDaU4sU0FBUzZDLEVBQUV0RixFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxFQUFFSyxFQUFFZCxHQUFHSyxLQUFLd3BCLGdCQUFnQixJQUFJcnFCLEdBQUcsSUFBSUEsR0FBRyxJQUFJQSxFQUFFYSxLQUFLeXBCLGNBQWN0cEIsRUFBRUgsS0FBSzBwQixtQkFBbUJ0cEIsRUFBRUosS0FBSzJwQixnQkFBZ0J2cUIsRUFBRVksS0FBSzRwQixhQUFhMXFCLEVBQUVjLEtBQUtpZCxLQUFLOWQsRUFBRWEsS0FBSzZwQixZQUFZcHBCLEVBQUVULEtBQUs4cEIsa0JBQWtCbnFCLENBQUMsQ0FBQyxJQUFJd0csRUFBRSxDQUFDLEVBQ3BiLHVJQUF1SWpHLE1BQU0sS0FBSzZwQixTQUFRLFNBQVM3cUIsR0FBR2lILEVBQUVqSCxHQUFHLElBQUlzRixFQUFFdEYsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLEVBQUcsSUFBRyxDQUFDLENBQUMsZ0JBQWdCLGtCQUFrQixDQUFDLFlBQVksU0FBUyxDQUFDLFVBQVUsT0FBTyxDQUFDLFlBQVksZUFBZTZxQixTQUFRLFNBQVM3cUIsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEdBQUdpSCxFQUFFaEgsR0FBRyxJQUFJcUYsRUFBRXJGLEVBQUUsR0FBRSxFQUFHRCxFQUFFLEdBQUcsTUFBSyxHQUFHLEVBQUcsSUFBRyxDQUFDLGtCQUFrQixZQUFZLGFBQWEsU0FBUzZxQixTQUFRLFNBQVM3cUIsR0FBR2lILEVBQUVqSCxHQUFHLElBQUlzRixFQUFFdEYsRUFBRSxHQUFFLEVBQUdBLEVBQUVvVCxjQUFjLE1BQUssR0FBRyxFQUFHLElBQzFlLENBQUMsY0FBYyw0QkFBNEIsWUFBWSxpQkFBaUJ5WCxTQUFRLFNBQVM3cUIsR0FBR2lILEVBQUVqSCxHQUFHLElBQUlzRixFQUFFdEYsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLEVBQUcsSUFBRyw4T0FBOE9nQixNQUFNLEtBQUs2cEIsU0FBUSxTQUFTN3FCLEdBQUdpSCxFQUFFakgsR0FBRyxJQUFJc0YsRUFBRXRGLEVBQUUsR0FBRSxFQUFHQSxFQUFFb1QsY0FBYyxNQUFLLEdBQUcsRUFBRyxJQUN4YixDQUFDLFVBQVUsV0FBVyxRQUFRLFlBQVl5WCxTQUFRLFNBQVM3cUIsR0FBR2lILEVBQUVqSCxHQUFHLElBQUlzRixFQUFFdEYsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLEVBQUcsSUFBRyxDQUFDLFVBQVUsWUFBWTZxQixTQUFRLFNBQVM3cUIsR0FBR2lILEVBQUVqSCxHQUFHLElBQUlzRixFQUFFdEYsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLEVBQUcsSUFBRyxDQUFDLE9BQU8sT0FBTyxPQUFPLFFBQVE2cUIsU0FBUSxTQUFTN3FCLEdBQUdpSCxFQUFFakgsR0FBRyxJQUFJc0YsRUFBRXRGLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxFQUFHLElBQUcsQ0FBQyxVQUFVLFNBQVM2cUIsU0FBUSxTQUFTN3FCLEdBQUdpSCxFQUFFakgsR0FBRyxJQUFJc0YsRUFBRXRGLEVBQUUsR0FBRSxFQUFHQSxFQUFFb1QsY0FBYyxNQUFLLEdBQUcsRUFBRyxJQUFHLElBQUluUCxFQUFHLGdCQUFnQixTQUFTQyxFQUFHbEUsR0FBRyxPQUFPQSxFQUFFLEdBQUd1SixhQUFhLENBSXhaLFNBQVNwRixFQUFHbkUsRUFBRUMsRUFBRUMsRUFBRWUsR0FBRyxJQUFJQyxFQUFFK0YsRUFBRW1CLGVBQWVuSSxHQUFHZ0gsRUFBRWhILEdBQUcsTUFBUSxPQUFPaUIsRUFBRSxJQUFJQSxFQUFFNmMsS0FBSzljLEtBQUssRUFBRWhCLEVBQUVTLFNBQVMsTUFBTVQsRUFBRSxJQUFJLE1BQU1BLEVBQUUsSUFBSSxNQUFNQSxFQUFFLElBQUksTUFBTUEsRUFBRSxNQVA5SSxTQUFZRCxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHLEdBQUcsTUFBT2hCLEdBRDZGLFNBQVlELEVBQUVDLEVBQUVDLEVBQUVlLEdBQUcsR0FBRyxPQUFPZixHQUFHLElBQUlBLEVBQUU2ZCxLQUFLLE9BQU0sRUFBRyxjQUFjOWQsR0FBRyxJQUFLLFdBQVcsSUFBSyxTQUFTLE9BQU0sRUFBRyxJQUFLLFVBQVUsT0FBR2dCLElBQWMsT0FBT2YsR0FBU0EsRUFBRW9xQixnQkFBbUQsV0FBbkN0cUIsRUFBRUEsRUFBRW9ULGNBQWMxUSxNQUFNLEVBQUUsS0FBc0IsVUFBVTFDLEdBQUUsUUFBUSxPQUFNLEVBQUcsQ0FDL1RtRCxDQUFHbkQsRUFBRUMsRUFBRUMsRUFBRWUsR0FBRyxPQUFNLEVBQUcsR0FBR0EsRUFBRSxPQUFNLEVBQUcsR0FBRyxPQUFPZixFQUFFLE9BQU9BLEVBQUU2ZCxNQUFNLEtBQUssRUFBRSxPQUFPOWQsRUFBRSxLQUFLLEVBQUUsT0FBTSxJQUFLQSxFQUFFLEtBQUssRUFBRSxPQUFPcVYsTUFBTXJWLEdBQUcsS0FBSyxFQUFFLE9BQU9xVixNQUFNclYsSUFBSSxFQUFFQSxFQUFFLE9BQU0sQ0FBRSxDQU90RW1ELENBQUduRCxFQUFFQyxFQUFFZ0IsRUFBRUQsS0FBS2YsRUFBRSxNQUFNZSxHQUFHLE9BQU9DLEVBUnhLLFNBQVlsQixHQUFHLFFBQUcrQixFQUFHTSxLQUFLSSxFQUFHekMsS0FBZStCLEVBQUdNLEtBQUtELEVBQUdwQyxLQUFla0MsRUFBRzBELEtBQUs1RixHQUFVeUMsRUFBR3pDLElBQUcsR0FBR29DLEVBQUdwQyxJQUFHLEdBQVMsR0FBRSxDQVF3RCtDLENBQUc5QyxLQUFLLE9BQU9DLEVBQUVGLEVBQUV1ZixnQkFBZ0J0ZixHQUFHRCxFQUFFNE8sYUFBYTNPLEVBQUUsR0FBR0MsSUFBSWdCLEVBQUV1cEIsZ0JBQWdCenFCLEVBQUVrQixFQUFFd3BCLGNBQWMsT0FBT3hxQixFQUFFLElBQUlnQixFQUFFNmMsTUFBUSxHQUFHN2QsR0FBR0QsRUFBRWlCLEVBQUVxcEIsY0FBY3RwQixFQUFFQyxFQUFFc3BCLG1CQUFtQixPQUFPdHFCLEVBQUVGLEVBQUV1ZixnQkFBZ0J0ZixJQUFhQyxFQUFFLEtBQVhnQixFQUFFQSxFQUFFNmMsT0FBYyxJQUFJN2MsSUFBRyxJQUFLaEIsRUFBRSxHQUFHLEdBQUdBLEVBQUVlLEVBQUVqQixFQUFFOHFCLGVBQWU3cEIsRUFBRWhCLEVBQUVDLEdBQUdGLEVBQUU0TyxhQUFhM08sRUFBRUMsS0FBSSxDQUhqZCwwakNBQTBqQ2MsTUFBTSxLQUFLNnBCLFNBQVEsU0FBUzdxQixHQUFHLElBQUlDLEVBQUVELEVBQUVnSSxRQUFRL0QsRUFDem1DQyxHQUFJK0MsRUFBRWhILEdBQUcsSUFBSXFGLEVBQUVyRixFQUFFLEdBQUUsRUFBR0QsRUFBRSxNQUFLLEdBQUcsRUFBRyxJQUFHLDJFQUEyRWdCLE1BQU0sS0FBSzZwQixTQUFRLFNBQVM3cUIsR0FBRyxJQUFJQyxFQUFFRCxFQUFFZ0ksUUFBUS9ELEVBQUdDLEdBQUkrQyxFQUFFaEgsR0FBRyxJQUFJcUYsRUFBRXJGLEVBQUUsR0FBRSxFQUFHRCxFQUFFLGdDQUErQixHQUFHLEVBQUcsSUFBRyxDQUFDLFdBQVcsV0FBVyxhQUFhNnFCLFNBQVEsU0FBUzdxQixHQUFHLElBQUlDLEVBQUVELEVBQUVnSSxRQUFRL0QsRUFBR0MsR0FBSStDLEVBQUVoSCxHQUFHLElBQUlxRixFQUFFckYsRUFBRSxHQUFFLEVBQUdELEVBQUUsd0NBQXVDLEdBQUcsRUFBRyxJQUFHLENBQUMsV0FBVyxlQUFlNnFCLFNBQVEsU0FBUzdxQixHQUFHaUgsRUFBRWpILEdBQUcsSUFBSXNGLEVBQUV0RixFQUFFLEdBQUUsRUFBR0EsRUFBRW9ULGNBQWMsTUFBSyxHQUFHLEVBQUcsSUFDbGRuTSxFQUFFOGpCLFVBQVUsSUFBSXpsQixFQUFFLFlBQVksR0FBRSxFQUFHLGFBQWEsZ0NBQStCLEdBQUcsR0FBSSxDQUFDLE1BQU0sT0FBTyxTQUFTLGNBQWN1bEIsU0FBUSxTQUFTN3FCLEdBQUdpSCxFQUFFakgsR0FBRyxJQUFJc0YsRUFBRXRGLEVBQUUsR0FBRSxFQUFHQSxFQUFFb1QsY0FBYyxNQUFLLEdBQUcsRUFBRyxJQUU1TCxJQUFJaFAsRUFBR3hFLEVBQUdvckIsbURBQW1EM21CLEVBQUcxQyxPQUFPK21CLElBQUksaUJBQWlCbFksRUFBRzdPLE9BQU8rbUIsSUFBSSxnQkFBZ0I3akIsRUFBR2xELE9BQU8rbUIsSUFBSSxrQkFBa0IxakIsRUFBR3JELE9BQU8rbUIsSUFBSSxxQkFBcUJ4akIsRUFBR3ZELE9BQU8rbUIsSUFBSSxrQkFBa0JyakIsRUFBRzFELE9BQU8rbUIsSUFBSSxrQkFBa0JsakIsRUFBRzdELE9BQU8rbUIsSUFBSSxpQkFBaUJqakIsRUFBRzlELE9BQU8rbUIsSUFBSSxxQkFBcUJoakIsRUFBRy9ELE9BQU8rbUIsSUFBSSxrQkFBa0IvaUIsRUFBR2hFLE9BQU8rbUIsSUFBSSx1QkFBdUIzaUIsRUFBR3BFLE9BQU8rbUIsSUFBSSxjQUFjMWlCLEVBQUdyRSxPQUFPK21CLElBQUksY0FBYy9tQixPQUFPK21CLElBQUksZUFBZS9tQixPQUFPK21CLElBQUksMEJBQ2plLElBQUl6aUIsRUFBR3RFLE9BQU8rbUIsSUFBSSxtQkFBbUIvbUIsT0FBTyttQixJQUFJLHVCQUF1Qi9tQixPQUFPK21CLElBQUksZUFBZS9tQixPQUFPK21CLElBQUksd0JBQXdCLElBQUl2aUIsRUFBR3hFLE9BQU9HLFNBQVMsU0FBUzJFLEVBQUd6RyxHQUFHLE9BQUcsT0FBT0EsR0FBRyxpQkFBa0JBLEVBQVMsS0FBd0MsbUJBQW5DQSxFQUFFbUcsR0FBSW5HLEVBQUVtRyxJQUFLbkcsRUFBRSxlQUEwQ0EsRUFBRSxJQUFJLENBQUMsSUFBb0JrSCxFQUFoQmpFLEVBQUVwRCxPQUFPb3JCLE9BQVUsU0FBUzdqQixFQUFHcEgsR0FBRyxRQUFHLElBQVNrSCxFQUFHLElBQUksTUFBTXRHLE9BQVEsQ0FBQyxNQUFNVixHQUFHLElBQUlELEVBQUVDLEVBQUU2RCxNQUFNbW5CLE9BQU8xaEIsTUFBTSxnQkFBZ0J0QyxFQUFHakgsR0FBR0EsRUFBRSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUtpSCxFQUFHbEgsQ0FBQyxDQUFDLElBQUlxSCxHQUFHLEVBQ3piLFNBQVNDLEVBQUd0SCxFQUFFQyxHQUFHLElBQUlELEdBQUdxSCxFQUFHLE1BQU0sR0FBR0EsR0FBRyxFQUFHLElBQUluSCxFQUFFVSxNQUFNdXFCLGtCQUFrQnZxQixNQUFNdXFCLHVCQUFrQixFQUFPLElBQUksR0FBR2xyQixFQUFFLEdBQUdBLEVBQUUsV0FBVyxNQUFNVyxPQUFRLEVBQUVmLE9BQU9FLGVBQWVFLEVBQUVHLFVBQVUsUUFBUSxDQUFDZ3JCLElBQUksV0FBVyxNQUFNeHFCLE9BQVEsSUFBSSxpQkFBa0J5cUIsU0FBU0EsUUFBUUMsVUFBVSxDQUFDLElBQUlELFFBQVFDLFVBQVVyckIsRUFBRSxHQUFHLENBQUMsTUFBTTJQLEdBQUcsSUFBSTNPLEVBQUUyTyxDQUFDLENBQUN5YixRQUFRQyxVQUFVdHJCLEVBQUUsR0FBR0MsRUFBRSxLQUFLLENBQUMsSUFBSUEsRUFBRW9DLE1BQU0sQ0FBQyxNQUFNdU4sR0FBRzNPLEVBQUUyTyxDQUFDLENBQUM1UCxFQUFFcUMsS0FBS3BDLEVBQUVHLFVBQVUsS0FBSyxDQUFDLElBQUksTUFBTVEsT0FBUSxDQUFDLE1BQU1nUCxHQUFHM08sRUFBRTJPLENBQUMsQ0FBQzVQLEdBQUcsQ0FBQyxDQUFDLE1BQU00UCxHQUFHLEdBQUdBLEdBQUczTyxHQUFHLGlCQUFrQjJPLEVBQUU3TCxNQUFNLENBQUMsSUFBSSxJQUFJN0MsRUFBRTBPLEVBQUU3TCxNQUFNL0MsTUFBTSxNQUNuZk8sRUFBRU4sRUFBRThDLE1BQU0vQyxNQUFNLE1BQU1QLEVBQUVTLEVBQUVSLE9BQU8sRUFBRXdDLEVBQUUzQixFQUFFYixPQUFPLEVBQUUsR0FBR0QsR0FBRyxHQUFHeUMsR0FBR2hDLEVBQUVULEtBQUtjLEVBQUUyQixJQUFJQSxJQUFJLEtBQUssR0FBR3pDLEdBQUcsR0FBR3lDLEVBQUV6QyxJQUFJeUMsSUFBSSxHQUFHaEMsRUFBRVQsS0FBS2MsRUFBRTJCLEdBQUcsQ0FBQyxHQUFHLElBQUl6QyxHQUFHLElBQUl5QyxFQUFHLE1BQU16QyxJQUFRLElBQUp5QyxHQUFTaEMsRUFBRVQsS0FBS2MsRUFBRTJCLEdBQUcsQ0FBQyxJQUFJdU0sRUFBRSxLQUFLdk8sRUFBRVQsR0FBR3VILFFBQVEsV0FBVyxRQUE2RixPQUFyRmhJLEVBQUU0RSxhQUFhNkssRUFBRThiLFNBQVMsaUJBQWlCOWIsRUFBRUEsRUFBRXpILFFBQVEsY0FBY2hJLEVBQUU0RSxjQUFxQjZLLENBQUMsUUFBTyxHQUFHaFAsR0FBRyxHQUFHeUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVFtRSxHQUFHLEVBQUd6RyxNQUFNdXFCLGtCQUFrQmpyQixDQUFDLENBQUMsT0FBT0YsRUFBRUEsRUFBRUEsRUFBRTRFLGFBQWE1RSxFQUFFZ0UsS0FBSyxJQUFJb0QsRUFBR3BILEdBQUcsRUFBRSxDQUM5WixTQUFTdUgsRUFBR3ZILEdBQUcsT0FBT0EsRUFBRXdyQixLQUFLLEtBQUssRUFBRSxPQUFPcGtCLEVBQUdwSCxFQUFFK2QsTUFBTSxLQUFLLEdBQUcsT0FBTzNXLEVBQUcsUUFBUSxLQUFLLEdBQUcsT0FBT0EsRUFBRyxZQUFZLEtBQUssR0FBRyxPQUFPQSxFQUFHLGdCQUFnQixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxPQUFTRSxFQUFHdEgsRUFBRStkLE1BQUssR0FBTSxLQUFLLEdBQUcsT0FBU3pXLEVBQUd0SCxFQUFFK2QsS0FBSzhCLFFBQU8sR0FBTSxLQUFLLEVBQUUsT0FBU3ZZLEVBQUd0SCxFQUFFK2QsTUFBSyxHQUFNLFFBQVEsTUFBTSxHQUFHLENBQ3hSLFNBQVNyVyxFQUFHMUgsR0FBRyxHQUFHLE1BQU1BLEVBQUUsT0FBTyxLQUFLLEdBQUcsbUJBQW9CQSxFQUFFLE9BQU9BLEVBQUU0RSxhQUFhNUUsRUFBRWdFLE1BQU0sS0FBSyxHQUFHLGlCQUFrQmhFLEVBQUUsT0FBT0EsRUFBRSxPQUFPQSxHQUFHLEtBQUs2RSxFQUFHLE1BQU0sV0FBVyxLQUFLMkwsRUFBRyxNQUFNLFNBQVMsS0FBS3RMLEVBQUcsTUFBTSxXQUFXLEtBQUtGLEVBQUcsTUFBTSxhQUFhLEtBQUtVLEVBQUcsTUFBTSxXQUFXLEtBQUtDLEVBQUcsTUFBTSxlQUFlLEdBQUcsaUJBQWtCM0YsRUFBRSxPQUFPQSxFQUFFMm9CLFVBQVUsS0FBS25qQixFQUFHLE9BQU94RixFQUFFNEUsYUFBYSxXQUFXLFlBQVksS0FBS1MsRUFBRyxPQUFPckYsRUFBRXlyQixTQUFTN21CLGFBQWEsV0FBVyxZQUFZLEtBQUthLEVBQUcsSUFBSXhGLEVBQUVELEVBQUU2ZixPQUM3WixPQURvYTdmLEVBQUVBLEVBQUU0RSxlQUNuZDVFLEVBQUUsTUFEaWVBLEVBQUVDLEVBQUUyRSxhQUNsZjNFLEVBQUUrRCxNQUFNLElBQVksY0FBY2hFLEVBQUUsSUFBSSxjQUFxQkEsRUFBRSxLQUFLK0YsRUFBRyxPQUE2QixRQUF0QjlGLEVBQUVELEVBQUU0RSxhQUFhLE1BQWMzRSxFQUFFeUgsRUFBRzFILEVBQUUrZCxPQUFPLE9BQU8sS0FBSy9YLEVBQUcvRixFQUFFRCxFQUFFMHJCLFNBQVMxckIsRUFBRUEsRUFBRTJyQixNQUFNLElBQUksT0FBT2prQixFQUFHMUgsRUFBRUMsR0FBRyxDQUFDLE1BQU1DLEdBQUcsRUFBRSxPQUFPLElBQUksQ0FDM00sU0FBU3lILEVBQUczSCxHQUFHLElBQUlDLEVBQUVELEVBQUUrZCxLQUFLLE9BQU8vZCxFQUFFd3JCLEtBQUssS0FBSyxHQUFHLE1BQU0sUUFBUSxLQUFLLEVBQUUsT0FBT3ZyQixFQUFFMkUsYUFBYSxXQUFXLFlBQVksS0FBSyxHQUFHLE9BQU8zRSxFQUFFd3JCLFNBQVM3bUIsYUFBYSxXQUFXLFlBQVksS0FBSyxHQUFHLE1BQU0scUJBQXFCLEtBQUssR0FBRyxPQUFrQjVFLEdBQVhBLEVBQUVDLEVBQUU0ZixRQUFXamIsYUFBYTVFLEVBQUVnRSxNQUFNLEdBQUcvRCxFQUFFMkUsY0FBYyxLQUFLNUUsRUFBRSxjQUFjQSxFQUFFLElBQUksY0FBYyxLQUFLLEVBQUUsTUFBTSxXQUFXLEtBQUssRUFBRSxPQUFPQyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsS0FBSyxFQUFFLE1BQU0sT0FBTyxLQUFLLEVBQUUsTUFBTSxPQUFPLEtBQUssR0FBRyxPQUFPeUgsRUFBR3pILEdBQUcsS0FBSyxFQUFFLE9BQU9BLElBQUkrRSxFQUFHLGFBQWEsT0FBTyxLQUFLLEdBQUcsTUFBTSxZQUN0ZixLQUFLLEdBQUcsTUFBTSxXQUFXLEtBQUssR0FBRyxNQUFNLFFBQVEsS0FBSyxHQUFHLE1BQU0sV0FBVyxLQUFLLEdBQUcsTUFBTSxlQUFlLEtBQUssR0FBRyxNQUFNLGdCQUFnQixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxHQUFHLG1CQUFvQi9FLEVBQUUsT0FBT0EsRUFBRTJFLGFBQWEzRSxFQUFFK0QsTUFBTSxLQUFLLEdBQUcsaUJBQWtCL0QsRUFBRSxPQUFPQSxFQUFFLE9BQU8sSUFBSSxDQUFDLFNBQVMySCxFQUFHNUgsR0FBRyxjQUFjQSxHQUFHLElBQUssVUFBVSxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssWUFBcUIsSUFBSyxTQUFTLE9BQU9BLEVBQUUsUUFBUSxNQUFNLEdBQUcsQ0FDcmEsU0FBU3lRLEVBQUd6USxHQUFHLElBQUlDLEVBQUVELEVBQUUrZCxLQUFLLE9BQU8vZCxFQUFFQSxFQUFFeWQsV0FBVyxVQUFVemQsRUFBRW9ULGdCQUFnQixhQUFhblQsR0FBRyxVQUFVQSxFQUFFLENBRXRGLFNBQVM2SCxFQUFHOUgsR0FBR0EsRUFBRTRyQixnQkFBZ0I1ckIsRUFBRTRyQixjQUR2RCxTQUFZNXJCLEdBQUcsSUFBSUMsRUFBRXdRLEVBQUd6USxHQUFHLFVBQVUsUUFBUUUsRUFBRUwsT0FBTytuQix5QkFBeUI1bkIsRUFBRWdELFlBQVk1QyxVQUFVSCxHQUFHZ0IsRUFBRSxHQUFHakIsRUFBRUMsR0FBRyxJQUFJRCxFQUFFb0ksZUFBZW5JLFNBQUksSUFBcUJDLEdBQUcsbUJBQW9CQSxFQUFFMnJCLEtBQUssbUJBQW9CM3JCLEVBQUVrckIsSUFBSSxDQUFDLElBQUlscUIsRUFBRWhCLEVBQUUyckIsSUFBSXRxQixFQUFFckIsRUFBRWtyQixJQUFpTCxPQUE3S3ZyQixPQUFPRSxlQUFlQyxFQUFFQyxFQUFFLENBQUNrQixjQUFhLEVBQUcwcUIsSUFBSSxXQUFXLE9BQU8zcUIsRUFBRW1CLEtBQUt2QixLQUFLLEVBQUVzcUIsSUFBSSxTQUFTcHJCLEdBQUdpQixFQUFFLEdBQUdqQixFQUFFdUIsRUFBRWMsS0FBS3ZCLEtBQUtkLEVBQUUsSUFBSUgsT0FBT0UsZUFBZUMsRUFBRUMsRUFBRSxDQUFDNnJCLFdBQVc1ckIsRUFBRTRyQixhQUFtQixDQUFDQyxTQUFTLFdBQVcsT0FBTzlxQixDQUFDLEVBQUUrcUIsU0FBUyxTQUFTaHNCLEdBQUdpQixFQUFFLEdBQUdqQixDQUFDLEVBQUVpc0IsYUFBYSxXQUFXanNCLEVBQUU0ckIsY0FDeGYsWUFBWTVyQixFQUFFQyxFQUFFLEVBQUUsQ0FBQyxDQUFrRDRILENBQUc3SCxHQUFHLENBQUMsU0FBUytILEVBQUcvSCxHQUFHLElBQUlBLEVBQUUsT0FBTSxFQUFHLElBQUlDLEVBQUVELEVBQUU0ckIsY0FBYyxJQUFJM3JCLEVBQUUsT0FBTSxFQUFHLElBQUlDLEVBQUVELEVBQUU4ckIsV0FBZTlxQixFQUFFLEdBQXFELE9BQWxEakIsSUFBSWlCLEVBQUV3UCxFQUFHelEsR0FBR0EsRUFBRWtzQixRQUFRLE9BQU8sUUFBUWxzQixFQUFFSyxRQUFPTCxFQUFFaUIsS0FBYWYsSUFBR0QsRUFBRStyQixTQUFTaHNCLElBQUcsRUFBTSxDQUFDLFNBQVNxSSxFQUFHckksR0FBd0QsUUFBRyxLQUF4REEsRUFBRUEsSUFBSSxvQkFBcUIwRyxTQUFTQSxjQUFTLElBQWtDLE9BQU8sS0FBSyxJQUFJLE9BQU8xRyxFQUFFbXNCLGVBQWVuc0IsRUFBRWlQLElBQUksQ0FBQyxNQUFNaFAsR0FBRyxPQUFPRCxFQUFFaVAsSUFBSSxDQUFDLENBQ3BhLFNBQVN6RyxFQUFHeEksRUFBRUMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFaXNCLFFBQVEsT0FBT2pwQixFQUFFLENBQUMsRUFBRWhELEVBQUUsQ0FBQ21zQixvQkFBZSxFQUFPQyxrQkFBYSxFQUFPaHNCLFdBQU0sRUFBTzZyQixRQUFRLE1BQU1oc0IsRUFBRUEsRUFBRUYsRUFBRXNzQixjQUFjQyxnQkFBZ0IsQ0FBQyxTQUFTeGpCLEVBQUcvSSxFQUFFQyxHQUFHLElBQUlDLEVBQUUsTUFBTUQsRUFBRW9zQixhQUFhLEdBQUdwc0IsRUFBRW9zQixhQUFhcHJCLEVBQUUsTUFBTWhCLEVBQUVpc0IsUUFBUWpzQixFQUFFaXNCLFFBQVFqc0IsRUFBRW1zQixlQUFlbHNCLEVBQUUwSCxFQUFHLE1BQU0zSCxFQUFFSSxNQUFNSixFQUFFSSxNQUFNSCxHQUFHRixFQUFFc3NCLGNBQWMsQ0FBQ0MsZUFBZXRyQixFQUFFdXJCLGFBQWF0c0IsRUFBRXVzQixXQUFXLGFBQWF4c0IsRUFBRThkLE1BQU0sVUFBVTlkLEVBQUU4ZCxLQUFLLE1BQU05ZCxFQUFFaXNCLFFBQVEsTUFBTWpzQixFQUFFSSxNQUFNLENBQUMsU0FBUzZJLEVBQUdsSixFQUFFQyxHQUFlLE9BQVpBLEVBQUVBLEVBQUVpc0IsVUFBaUIvbkIsRUFBR25FLEVBQUUsVUFBVUMsR0FBRSxFQUFHLENBQzlkLFNBQVNrSixFQUFHbkosRUFBRUMsR0FBR2lKLEVBQUdsSixFQUFFQyxHQUFHLElBQUlDLEVBQUUwSCxFQUFHM0gsRUFBRUksT0FBT1ksRUFBRWhCLEVBQUU4ZCxLQUFLLEdBQUcsTUFBTTdkLEVBQUssV0FBV2UsR0FBTSxJQUFJZixHQUFHLEtBQUtGLEVBQUVLLE9BQU9MLEVBQUVLLE9BQU9ILEtBQUVGLEVBQUVLLE1BQU0sR0FBR0gsR0FBT0YsRUFBRUssUUFBUSxHQUFHSCxJQUFJRixFQUFFSyxNQUFNLEdBQUdILFFBQVEsR0FBRyxXQUFXZSxHQUFHLFVBQVVBLEVBQThCLFlBQTNCakIsRUFBRXVmLGdCQUFnQixTQUFnQnRmLEVBQUVtSSxlQUFlLFNBQVNnQixHQUFHcEosRUFBRUMsRUFBRThkLEtBQUs3ZCxHQUFHRCxFQUFFbUksZUFBZSxpQkFBaUJnQixHQUFHcEosRUFBRUMsRUFBRThkLEtBQUtuVyxFQUFHM0gsRUFBRW9zQixlQUFlLE1BQU1wc0IsRUFBRWlzQixTQUFTLE1BQU1qc0IsRUFBRW1zQixpQkFBaUJwc0IsRUFBRW9zQixpQkFBaUJuc0IsRUFBRW1zQixlQUFlLENBQ2xhLFNBQVMxaUIsRUFBRzFKLEVBQUVDLEVBQUVDLEdBQUcsR0FBR0QsRUFBRW1JLGVBQWUsVUFBVW5JLEVBQUVtSSxlQUFlLGdCQUFnQixDQUFDLElBQUluSCxFQUFFaEIsRUFBRThkLEtBQUssS0FBSyxXQUFXOWMsR0FBRyxVQUFVQSxRQUFHLElBQVNoQixFQUFFSSxPQUFPLE9BQU9KLEVBQUVJLE9BQU8sT0FBT0osRUFBRSxHQUFHRCxFQUFFc3NCLGNBQWNFLGFBQWF0c0IsR0FBR0QsSUFBSUQsRUFBRUssUUFBUUwsRUFBRUssTUFBTUosR0FBR0QsRUFBRXFzQixhQUFhcHNCLENBQUMsQ0FBVSxNQUFUQyxFQUFFRixFQUFFZ0UsUUFBY2hFLEVBQUVnRSxLQUFLLElBQUloRSxFQUFFb3NCLGlCQUFpQnBzQixFQUFFc3NCLGNBQWNDLGVBQWUsS0FBS3JzQixJQUFJRixFQUFFZ0UsS0FBSzlELEVBQUUsQ0FDelYsU0FBU2tKLEdBQUdwSixFQUFFQyxFQUFFQyxHQUFNLFdBQVdELEdBQUdvSSxFQUFHckksRUFBRXVFLGlCQUFpQnZFLElBQUUsTUFBTUUsRUFBRUYsRUFBRXFzQixhQUFhLEdBQUdyc0IsRUFBRXNzQixjQUFjRSxhQUFheHNCLEVBQUVxc0IsZUFBZSxHQUFHbnNCLElBQUlGLEVBQUVxc0IsYUFBYSxHQUFHbnNCLEdBQUUsQ0FBQyxJQUFJMEosR0FBR3pKLE1BQU1nQyxRQUM3SyxTQUFTMEgsR0FBRzdKLEVBQUVDLEVBQUVDLEVBQUVlLEdBQWUsR0FBWmpCLEVBQUVBLEVBQUUwc0IsUUFBV3pzQixFQUFFLENBQUNBLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSWlCLEVBQUUsRUFBRUEsRUFBRWhCLEVBQUVRLE9BQU9RLElBQUlqQixFQUFFLElBQUlDLEVBQUVnQixLQUFJLEVBQUcsSUFBSWhCLEVBQUUsRUFBRUEsRUFBRUYsRUFBRVUsT0FBT1IsSUFBSWdCLEVBQUVqQixFQUFFbUksZUFBZSxJQUFJcEksRUFBRUUsR0FBR0csT0FBT0wsRUFBRUUsR0FBR3lzQixXQUFXenJCLElBQUlsQixFQUFFRSxHQUFHeXNCLFNBQVN6ckIsR0FBR0EsR0FBR0QsSUFBSWpCLEVBQUVFLEdBQUcwc0IsaUJBQWdCLEVBQUcsS0FBSyxDQUFtQixJQUFsQjFzQixFQUFFLEdBQUcwSCxFQUFHMUgsR0FBR0QsRUFBRSxLQUFTaUIsRUFBRSxFQUFFQSxFQUFFbEIsRUFBRVUsT0FBT1EsSUFBSSxDQUFDLEdBQUdsQixFQUFFa0IsR0FBR2IsUUFBUUgsRUFBaUQsT0FBOUNGLEVBQUVrQixHQUFHeXJCLFVBQVMsT0FBRzFyQixJQUFJakIsRUFBRWtCLEdBQUcwckIsaUJBQWdCLElBQVcsT0FBTzNzQixHQUFHRCxFQUFFa0IsR0FBRzJyQixXQUFXNXNCLEVBQUVELEVBQUVrQixHQUFHLENBQUMsT0FBT2pCLElBQUlBLEVBQUUwc0IsVUFBUyxFQUFHLENBQUMsQ0FDeFksU0FBUzdpQixHQUFHOUosRUFBRUMsR0FBRyxHQUFHLE1BQU1BLEVBQUU2c0Isd0JBQXdCLE1BQU1sc0IsTUFBTXVQLEVBQUUsS0FBSyxPQUFPbE4sRUFBRSxDQUFDLEVBQUVoRCxFQUFFLENBQUNJLFdBQU0sRUFBT2dzQixrQkFBYSxFQUFPVSxTQUFTLEdBQUcvc0IsRUFBRXNzQixjQUFjRSxjQUFjLENBQUMsU0FBU3ppQixHQUFHL0osRUFBRUMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFSSxNQUFNLEdBQUcsTUFBTUgsRUFBRSxDQUErQixHQUE5QkEsRUFBRUQsRUFBRThzQixTQUFTOXNCLEVBQUVBLEVBQUVvc0IsYUFBZ0IsTUFBTW5zQixFQUFFLENBQUMsR0FBRyxNQUFNRCxFQUFFLE1BQU1XLE1BQU11UCxFQUFFLEtBQUssR0FBR3ZHLEdBQUcxSixHQUFHLENBQUMsR0FBRyxFQUFFQSxFQUFFUSxPQUFPLE1BQU1FLE1BQU11UCxFQUFFLEtBQUtqUSxFQUFFQSxFQUFFLEVBQUUsQ0FBQ0QsRUFBRUMsQ0FBQyxDQUFDLE1BQU1ELElBQUlBLEVBQUUsSUFBSUMsRUFBRUQsQ0FBQyxDQUFDRCxFQUFFc3NCLGNBQWMsQ0FBQ0UsYUFBYTVrQixFQUFHMUgsR0FBRyxDQUNuWSxTQUFTb0ssR0FBR3RLLEVBQUVDLEdBQUcsSUFBSUMsRUFBRTBILEVBQUczSCxFQUFFSSxPQUFPWSxFQUFFMkcsRUFBRzNILEVBQUVvc0IsY0FBYyxNQUFNbnNCLEtBQUlBLEVBQUUsR0FBR0EsS0FBTUYsRUFBRUssUUFBUUwsRUFBRUssTUFBTUgsR0FBRyxNQUFNRCxFQUFFb3NCLGNBQWNyc0IsRUFBRXFzQixlQUFlbnNCLElBQUlGLEVBQUVxc0IsYUFBYW5zQixJQUFJLE1BQU1lLElBQUlqQixFQUFFcXNCLGFBQWEsR0FBR3ByQixFQUFFLENBQUMsU0FBU3NKLEdBQUd2SyxHQUFHLElBQUlDLEVBQUVELEVBQUVtUyxZQUFZbFMsSUFBSUQsRUFBRXNzQixjQUFjRSxjQUFjLEtBQUt2c0IsR0FBRyxPQUFPQSxJQUFJRCxFQUFFSyxNQUFNSixFQUFFLENBQUMsU0FBU3VLLEdBQUd4SyxHQUFHLE9BQU9BLEdBQUcsSUFBSyxNQUFNLE1BQU0sNkJBQTZCLElBQUssT0FBTyxNQUFNLHFDQUFxQyxRQUFRLE1BQU0sK0JBQStCLENBQzdjLFNBQVM2SyxHQUFHN0ssRUFBRUMsR0FBRyxPQUFPLE1BQU1ELEdBQUcsaUNBQWlDQSxFQUFFd0ssR0FBR3ZLLEdBQUcsK0JBQStCRCxHQUFHLGtCQUFrQkMsRUFBRSwrQkFBK0JELENBQUMsQ0FDaEssSUFBSThLLEdBQWU5SyxHQUFaNEssSUFBWTVLLEdBQXNKLFNBQVNBLEVBQUVDLEdBQUcsR0FBRywrQkFBK0JELEVBQUVndEIsY0FBYyxjQUFjaHRCLEVBQUVBLEVBQUU4RyxVQUFVN0csTUFBTSxDQUEyRixLQUExRjZLLEdBQUdBLElBQUlwRSxTQUFTQyxjQUFjLFFBQVVHLFVBQVUsUUFBUTdHLEVBQUVndEIsVUFBVXhyQixXQUFXLFNBQWF4QixFQUFFNkssR0FBR2pFLFdBQVc3RyxFQUFFNkcsWUFBWTdHLEVBQUVvSyxZQUFZcEssRUFBRTZHLFlBQVksS0FBSzVHLEVBQUU0RyxZQUFZN0csRUFBRTRHLFlBQVkzRyxFQUFFNEcsV0FBVyxDQUFDLEVBQXZiLG9CQUFxQnFtQixPQUFPQSxNQUFNQyx3QkFBd0IsU0FBU2x0QixFQUFFQyxFQUFFZSxFQUFFQyxHQUFHZ3NCLE1BQU1DLHlCQUF3QixXQUFXLE9BQU9udEIsR0FBRUMsRUFBRUMsRUFBTSxHQUFFLEVBQUVGLElBQ3RLLFNBQVNpTCxHQUFHakwsRUFBRUMsR0FBRyxHQUFHQSxFQUFFLENBQUMsSUFBSUMsRUFBRUYsRUFBRTZHLFdBQVcsR0FBRzNHLEdBQUdBLElBQUlGLEVBQUVtSyxXQUFXLElBQUlqSyxFQUFFK1IsU0FBd0IsWUFBZC9SLEVBQUVnUyxVQUFValMsRUFBUyxDQUFDRCxFQUFFbVMsWUFBWWxTLENBQUMsQ0FDdEgsSUFBSWlMLEdBQUcsQ0FBQ2tpQix5QkFBd0IsRUFBR0MsYUFBWSxFQUFHQyxtQkFBa0IsRUFBR0Msa0JBQWlCLEVBQUdDLGtCQUFpQixFQUFHQyxTQUFRLEVBQUdDLGNBQWEsRUFBR0MsaUJBQWdCLEVBQUdDLGFBQVksRUFBR0MsU0FBUSxFQUFHQyxNQUFLLEVBQUdDLFVBQVMsRUFBR0MsY0FBYSxFQUFHQyxZQUFXLEVBQUdDLGNBQWEsRUFBR0MsV0FBVSxFQUFHQyxVQUFTLEVBQUdDLFNBQVEsRUFBR0MsWUFBVyxFQUFHQyxhQUFZLEVBQUdDLGNBQWEsRUFBR0MsWUFBVyxFQUFHQyxlQUFjLEVBQUdDLGdCQUFlLEVBQUdDLGlCQUFnQixFQUFHQyxZQUFXLEVBQUdDLFdBQVUsRUFBR3pMLFlBQVcsRUFBRzBMLFNBQVEsRUFBR0MsT0FBTSxFQUFHQyxTQUFRLEVBQUdDLFNBQVEsRUFBR0MsUUFBTyxFQUFHQyxRQUFPLEVBQ2xmQyxNQUFLLEVBQUdDLGFBQVksRUFBR0MsY0FBYSxFQUFHQyxhQUFZLEVBQUdDLGlCQUFnQixFQUFHQyxrQkFBaUIsRUFBR0Msa0JBQWlCLEVBQUdDLGVBQWMsRUFBR0MsYUFBWSxHQUFJdGtCLEdBQUcsQ0FBQyxTQUFTLEtBQUssTUFBTSxLQUE2SCxTQUFTRSxHQUFHekwsRUFBRUMsRUFBRUMsR0FBRyxPQUFPLE1BQU1ELEdBQUcsa0JBQW1CQSxHQUFHLEtBQUtBLEVBQUUsR0FBR0MsR0FBRyxpQkFBa0JELEdBQUcsSUFBSUEsR0FBR2lMLEdBQUc5QyxlQUFlcEksSUFBSWtMLEdBQUdsTCxJQUFJLEdBQUdDLEdBQUdpckIsT0FBT2pyQixFQUFFLElBQUksQ0FDemIsU0FBU3lMLEdBQUcxTCxFQUFFQyxHQUFhLElBQUksSUFBSUMsS0FBbEJGLEVBQUVBLEVBQUV5YSxNQUFtQnhhLEVBQUUsR0FBR0EsRUFBRW1JLGVBQWVsSSxHQUFHLENBQUMsSUFBSWUsRUFBRSxJQUFJZixFQUFFNEMsUUFBUSxNQUFNNUIsRUFBRXVLLEdBQUd2TCxFQUFFRCxFQUFFQyxHQUFHZSxHQUFHLFVBQVVmLElBQUlBLEVBQUUsWUFBWWUsRUFBRWpCLEVBQUU4dkIsWUFBWTV2QixFQUFFZ0IsR0FBR2xCLEVBQUVFLEdBQUdnQixDQUFDLENBQUMsQ0FEWXJCLE9BQU95SSxLQUFLNEMsSUFBSTJmLFNBQVEsU0FBUzdxQixHQUFHdUwsR0FBR3NmLFNBQVEsU0FBUzVxQixHQUFHQSxFQUFFQSxFQUFFRCxFQUFFMk4sT0FBTyxHQUFHcEUsY0FBY3ZKLEVBQUU0TixVQUFVLEdBQUcxQyxHQUFHakwsR0FBR2lMLEdBQUdsTCxFQUFFLEdBQUUsSUFDaEksSUFBSTJMLEdBQUcxSSxFQUFFLENBQUM4c0IsVUFBUyxHQUFJLENBQUNDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxJQUFHLEVBQUdDLEtBQUksRUFBR0MsT0FBTSxFQUFHQyxJQUFHLEVBQUdDLEtBQUksRUFBR0MsT0FBTSxFQUFHQyxRQUFPLEVBQUdDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxPQUFNLEVBQUczbkIsUUFBTyxFQUFHNG5CLE9BQU0sRUFBR0MsS0FBSSxJQUNsVCxTQUFTaGxCLEdBQUc3TCxFQUFFQyxHQUFHLEdBQUdBLEVBQUUsQ0FBQyxHQUFHMEwsR0FBRzNMLEtBQUssTUFBTUMsRUFBRThzQixVQUFVLE1BQU05c0IsRUFBRTZzQix5QkFBeUIsTUFBTWxzQixNQUFNdVAsRUFBRSxJQUFJblEsSUFBSSxHQUFHLE1BQU1DLEVBQUU2c0Isd0JBQXdCLENBQUMsR0FBRyxNQUFNN3NCLEVBQUU4c0IsU0FBUyxNQUFNbnNCLE1BQU11UCxFQUFFLEtBQUssR0FBRyxpQkFBa0JsUSxFQUFFNnNCLDJCQUEyQixXQUFXN3NCLEVBQUU2c0IseUJBQXlCLE1BQU1sc0IsTUFBTXVQLEVBQUUsSUFBSyxDQUFDLEdBQUcsTUFBTWxRLEVBQUV3YSxPQUFPLGlCQUFrQnhhLEVBQUV3YSxNQUFNLE1BQU03WixNQUFNdVAsRUFBRSxJQUFLLENBQUMsQ0FDbFcsU0FBU3JFLEdBQUc5TCxFQUFFQyxHQUFHLElBQUksSUFBSUQsRUFBRThDLFFBQVEsS0FBSyxNQUFNLGlCQUFrQjdDLEVBQUU2d0IsR0FBRyxPQUFPOXdCLEdBQUcsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsSUFBSyxZQUFZLElBQUssZ0JBQWdCLElBQUssZ0JBQWdCLElBQUssbUJBQW1CLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLE9BQU0sRUFBRyxRQUFRLE9BQU0sRUFBRyxDQUFDLElBQUkrTCxHQUFHLEtBQUssU0FBU0MsR0FBR2hNLEdBQTZGLE9BQTFGQSxFQUFFQSxFQUFFNGhCLFFBQVE1aEIsRUFBRSt3QixZQUFZdnhCLFFBQVN3eEIsMEJBQTBCaHhCLEVBQUVBLEVBQUVneEIseUJBQWdDLElBQUloeEIsRUFBRWlTLFNBQVNqUyxFQUFFcUssV0FBV3JLLENBQUMsQ0FBQyxJQUFJaU0sR0FBRyxLQUFLSSxHQUFHLEtBQUtELEdBQUcsS0FDcGMsU0FBU0UsR0FBR3RNLEdBQUcsR0FBR0EsRUFBRTBNLEdBQUcxTSxHQUFHLENBQUMsR0FBRyxtQkFBb0JpTSxHQUFHLE1BQU1yTCxNQUFNdVAsRUFBRSxNQUFNLElBQUlsUSxFQUFFRCxFQUFFaXhCLFVBQVVoeEIsSUFBSUEsRUFBRTBNLEdBQUcxTSxHQUFHZ00sR0FBR2pNLEVBQUVpeEIsVUFBVWp4QixFQUFFK2QsS0FBSzlkLEdBQUcsQ0FBQyxDQUFDLFNBQVMyTSxHQUFHNU0sR0FBR3FNLEdBQUdELEdBQUdBLEdBQUczRSxLQUFLekgsR0FBR29NLEdBQUcsQ0FBQ3BNLEdBQUdxTSxHQUFHck0sQ0FBQyxDQUFDLFNBQVM2TSxLQUFLLEdBQUdSLEdBQUcsQ0FBQyxJQUFJck0sRUFBRXFNLEdBQUdwTSxFQUFFbU0sR0FBb0IsR0FBakJBLEdBQUdDLEdBQUcsS0FBS0MsR0FBR3RNLEdBQU1DLEVBQUUsSUFBSUQsRUFBRSxFQUFFQSxFQUFFQyxFQUFFUyxPQUFPVixJQUFJc00sR0FBR3JNLEVBQUVELEdBQUcsQ0FBQyxDQUFDLFNBQVM4TSxHQUFHOU0sRUFBRUMsR0FBRyxPQUFPRCxFQUFFQyxFQUFFLENBQUMsU0FBU2dOLEtBQUssQ0FBQyxJQUFJQyxJQUFHLEVBQUcsU0FBU0MsR0FBR25OLEVBQUVDLEVBQUVDLEdBQUcsR0FBR2dOLEdBQUcsT0FBT2xOLEVBQUVDLEVBQUVDLEdBQUdnTixJQUFHLEVBQUcsSUFBSSxPQUFPSixHQUFHOU0sRUFBRUMsRUFBRUMsRUFBRSxDQUFDLFFBQVdnTixJQUFHLEdBQUcsT0FBT2IsSUFBSSxPQUFPRCxNQUFHYSxLQUFLSixLQUFJLENBQUMsQ0FDaGIsU0FBU0UsR0FBRy9NLEVBQUVDLEdBQUcsSUFBSUMsRUFBRUYsRUFBRWl4QixVQUFVLEdBQUcsT0FBTy93QixFQUFFLE9BQU8sS0FBSyxJQUFJZSxFQUFFMEwsR0FBR3pNLEdBQUcsR0FBRyxPQUFPZSxFQUFFLE9BQU8sS0FBS2YsRUFBRWUsRUFBRWhCLEdBQUdELEVBQUUsT0FBT0MsR0FBRyxJQUFLLFVBQVUsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsSUFBSyx1QkFBdUIsSUFBSyxjQUFjLElBQUsscUJBQXFCLElBQUssY0FBYyxJQUFLLHFCQUFxQixJQUFLLFlBQVksSUFBSyxtQkFBbUIsSUFBSyxnQkFBZ0JnQixHQUFHQSxFQUFFNHJCLFlBQXFCNXJCLElBQUksWUFBYmpCLEVBQUVBLEVBQUUrZCxPQUF1QixVQUFVL2QsR0FBRyxXQUFXQSxHQUFHLGFBQWFBLElBQUlBLEdBQUdpQixFQUFFLE1BQU1qQixFQUFFLFFBQVFBLEdBQUUsRUFBRyxHQUFHQSxFQUFFLE9BQU8sS0FBSyxHQUFHRSxHQUFHLG1CQUNsZUEsRUFBRSxNQUFNVSxNQUFNdVAsRUFBRSxJQUFJbFEsU0FBU0MsSUFBSSxPQUFPQSxDQUFDLENBQUMsSUFBSW1OLElBQUcsRUFBRyxHQUFHekwsRUFBRyxJQUFJLElBQUkwTCxHQUFHLENBQUMsRUFBRXpOLE9BQU9FLGVBQWV1TixHQUFHLFVBQVUsQ0FBQ3VlLElBQUksV0FBV3hlLElBQUcsQ0FBRSxJQUFJN04sT0FBT3VMLGlCQUFpQixPQUFPdUMsR0FBR0EsSUFBSTlOLE9BQU8weEIsb0JBQW9CLE9BQU81akIsR0FBR0EsR0FBRyxDQUFDLE1BQU10TixJQUFHcU4sSUFBRyxDQUFFLENBQUMsU0FBU0QsR0FBR3BOLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEVBQUVLLEVBQUVkLEVBQUV5QyxFQUFFdU0sR0FBRyxJQUFJRyxFQUFFelAsTUFBTUMsVUFBVXNDLE1BQU1MLEtBQUtHLFVBQVUsR0FBRyxJQUFJdkMsRUFBRXFDLE1BQU1wQyxFQUFFMFAsRUFBRSxDQUFDLE1BQU0zTixHQUFHbkIsS0FBS3F3QixRQUFRbHZCLEVBQUUsQ0FBQyxDQUFDLElBQUk0TCxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsSUFBRyxFQUFHRSxHQUFHLEtBQUtDLEdBQUcsQ0FBQ2lqQixRQUFRLFNBQVNueEIsR0FBRzZOLElBQUcsRUFBR0MsR0FBRzlOLENBQUMsR0FBRyxTQUFTbU8sR0FBR25PLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEVBQUVLLEVBQUVkLEVBQUV5QyxFQUFFdU0sR0FBRzVCLElBQUcsRUFBR0MsR0FBRyxLQUFLVixHQUFHOUssTUFBTTRMLEdBQUcxTCxVQUFVLENBQ2pXLFNBQVNtTSxHQUFHM08sR0FBRyxJQUFJQyxFQUFFRCxFQUFFRSxFQUFFRixFQUFFLEdBQUdBLEVBQUVveEIsVUFBVSxLQUFLbnhCLEVBQUVveEIsUUFBUXB4QixFQUFFQSxFQUFFb3hCLFdBQVcsQ0FBQ3J4QixFQUFFQyxFQUFFLEdBQU8sSUFBYSxNQUFqQkEsRUFBRUQsR0FBU3N4QixTQUFjcHhCLEVBQUVELEVBQUVveEIsUUFBUXJ4QixFQUFFQyxFQUFFb3hCLGFBQWFyeEIsRUFBRSxDQUFDLE9BQU8sSUFBSUMsRUFBRXVyQixJQUFJdHJCLEVBQUUsSUFBSSxDQUFDLFNBQVNxTyxHQUFHdk8sR0FBRyxHQUFHLEtBQUtBLEVBQUV3ckIsSUFBSSxDQUFDLElBQUl2ckIsRUFBRUQsRUFBRXV4QixjQUFzRSxHQUF4RCxPQUFPdHhCLEdBQWtCLFFBQWRELEVBQUVBLEVBQUVveEIsYUFBcUJueEIsRUFBRUQsRUFBRXV4QixlQUFtQixPQUFPdHhCLEVBQUUsT0FBT0EsRUFBRXV4QixVQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsU0FBU3JpQixHQUFHblAsR0FBRyxHQUFHMk8sR0FBRzNPLEtBQUtBLEVBQUUsTUFBTVksTUFBTXVQLEVBQUUsS0FBTSxDQUUxUyxTQUFTZCxHQUFHclAsR0FBVyxPQUFPLFFBQWZBLEVBRHROLFNBQVlBLEdBQUcsSUFBSUMsRUFBRUQsRUFBRW94QixVQUFVLElBQUlueEIsRUFBRSxDQUFTLEdBQUcsUUFBWEEsRUFBRTBPLEdBQUczTyxJQUFlLE1BQU1ZLE1BQU11UCxFQUFFLE1BQU0sT0FBT2xRLElBQUlELEVBQUUsS0FBS0EsQ0FBQyxDQUFDLElBQUksSUFBSUUsRUFBRUYsRUFBRWlCLEVBQUVoQixJQUFJLENBQUMsSUFBSWlCLEVBQUVoQixFQUFFbXhCLE9BQU8sR0FBRyxPQUFPbndCLEVBQUUsTUFBTSxJQUFJSyxFQUFFTCxFQUFFa3dCLFVBQVUsR0FBRyxPQUFPN3ZCLEVBQUUsQ0FBWSxHQUFHLFFBQWROLEVBQUVDLEVBQUVtd0IsUUFBbUIsQ0FBQ254QixFQUFFZSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBR0MsRUFBRXV3QixRQUFRbHdCLEVBQUVrd0IsTUFBTSxDQUFDLElBQUlsd0IsRUFBRUwsRUFBRXV3QixNQUFNbHdCLEdBQUcsQ0FBQyxHQUFHQSxJQUFJckIsRUFBRSxPQUFPaVAsR0FBR2pPLEdBQUdsQixFQUFFLEdBQUd1QixJQUFJTixFQUFFLE9BQU9rTyxHQUFHak8sR0FBR2pCLEVBQUVzQixFQUFFQSxFQUFFbXdCLE9BQU8sQ0FBQyxNQUFNOXdCLE1BQU11UCxFQUFFLEtBQU0sQ0FBQyxHQUFHalEsRUFBRW14QixTQUFTcHdCLEVBQUVvd0IsT0FBT254QixFQUFFZ0IsRUFBRUQsRUFBRU0sTUFBTSxDQUFDLElBQUksSUFBSWQsR0FBRSxFQUFHeUMsRUFBRWhDLEVBQUV1d0IsTUFBTXZ1QixHQUFHLENBQUMsR0FBR0EsSUFBSWhELEVBQUUsQ0FBQ08sR0FBRSxFQUFHUCxFQUFFZ0IsRUFBRUQsRUFBRU0sRUFBRSxLQUFLLENBQUMsR0FBRzJCLElBQUlqQyxFQUFFLENBQUNSLEdBQUUsRUFBR1EsRUFBRUMsRUFBRWhCLEVBQUVxQixFQUFFLEtBQUssQ0FBQzJCLEVBQUVBLEVBQUV3dUIsT0FBTyxDQUFDLElBQUlqeEIsRUFBRSxDQUFDLElBQUl5QyxFQUFFM0IsRUFBRWt3QixNQUFNdnVCLEdBQUcsQ0FBQyxHQUFHQSxJQUM1ZmhELEVBQUUsQ0FBQ08sR0FBRSxFQUFHUCxFQUFFcUIsRUFBRU4sRUFBRUMsRUFBRSxLQUFLLENBQUMsR0FBR2dDLElBQUlqQyxFQUFFLENBQUNSLEdBQUUsRUFBR1EsRUFBRU0sRUFBRXJCLEVBQUVnQixFQUFFLEtBQUssQ0FBQ2dDLEVBQUVBLEVBQUV3dUIsT0FBTyxDQUFDLElBQUlqeEIsRUFBRSxNQUFNRyxNQUFNdVAsRUFBRSxLQUFNLENBQUMsQ0FBQyxHQUFHalEsRUFBRWt4QixZQUFZbndCLEVBQUUsTUFBTUwsTUFBTXVQLEVBQUUsS0FBTSxDQUFDLEdBQUcsSUFBSWpRLEVBQUVzckIsSUFBSSxNQUFNNXFCLE1BQU11UCxFQUFFLE1BQU0sT0FBT2pRLEVBQUUrd0IsVUFBVVUsVUFBVXp4QixFQUFFRixFQUFFQyxDQUFDLENBQWtCcVAsQ0FBR3RQLElBQW1COFAsR0FBRzlQLEdBQUcsSUFBSSxDQUFDLFNBQVM4UCxHQUFHOVAsR0FBRyxHQUFHLElBQUlBLEVBQUV3ckIsS0FBSyxJQUFJeHJCLEVBQUV3ckIsSUFBSSxPQUFPeHJCLEVBQUUsSUFBSUEsRUFBRUEsRUFBRXl4QixNQUFNLE9BQU96eEIsR0FBRyxDQUFDLElBQUlDLEVBQUU2UCxHQUFHOVAsR0FBRyxHQUFHLE9BQU9DLEVBQUUsT0FBT0EsRUFBRUQsRUFBRUEsRUFBRTB4QixPQUFPLENBQUMsT0FBTyxJQUFJLENBQzFYLElBQUluaUIsR0FBR3RLLEVBQUcyc0IsMEJBQTBCM2dCLEdBQUdoTSxFQUFHNHNCLHdCQUF3QjNnQixHQUFHak0sRUFBRzZzQixxQkFBcUIxZ0IsR0FBR25NLEVBQUc4c0Isc0JBQXNCOXBCLEdBQUVoRCxFQUFHK3NCLGFBQWEzZ0IsR0FBR3BNLEVBQUdndEIsaUNBQWlDeGdCLEdBQUd4TSxFQUFHaXRCLDJCQUEyQnRnQixHQUFHM00sRUFBR2t0Qiw4QkFBOEI3ZixHQUFHck4sRUFBR210Qix3QkFBd0I3ZixHQUFHdE4sRUFBR290QixxQkFBcUIzZixHQUFHek4sRUFBR3F0QixzQkFBc0JyZixHQUFHLEtBQUtDLEdBQUcsS0FDblZPLEdBQUc5UyxLQUFLNHhCLE1BQU01eEIsS0FBSzR4QixNQUFpQyxTQUFZdnlCLEdBQVUsT0FBTyxLQUFkQSxLQUFLLEdBQWUsR0FBRyxJQUFJMFQsR0FBRzFULEdBQUc0VCxHQUFHLEdBQUcsQ0FBQyxFQUEvRUYsR0FBRy9TLEtBQUtnVCxJQUFJQyxHQUFHalQsS0FBSzZ4QixJQUFnRTNlLEdBQUcsR0FBR0UsR0FBRyxRQUM3SCxTQUFTQyxHQUFHaFUsR0FBRyxPQUFPQSxHQUFHQSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLE9BQU8sS0FBSyxRQUFRLEtBQUssUUFBUSxPQUFTLFFBQUZBLEVBQVUsS0FBSyxRQUFRLEtBQUssUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssU0FBUyxPQUFTLFVBQUZBLEVBQVksS0FBSyxVQUFVLE9BQU8sVUFBVSxLQUFLLFVBQVUsT0FBTyxVQUFVLEtBQUssVUFBVSxPQUFPLFVBQVUsS0FBSyxXQUFXLE9BQU8sV0FDemdCLFFBQVEsT0FBT0EsRUFBRSxDQUFDLFNBQVNrVSxHQUFHbFUsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFeXlCLGFBQWEsR0FBRyxJQUFJdnlCLEVBQUUsT0FBTyxFQUFFLElBQUllLEVBQUUsRUFBRUMsRUFBRWxCLEVBQUUweUIsZUFBZW54QixFQUFFdkIsRUFBRTJ5QixZQUFZbHlCLEVBQUksVUFBRlAsRUFBWSxHQUFHLElBQUlPLEVBQUUsQ0FBQyxJQUFJeUMsRUFBRXpDLEdBQUdTLEVBQUUsSUFBSWdDLEVBQUVqQyxFQUFFK1MsR0FBRzlRLEdBQVMsSUFBTDNCLEdBQUdkLEtBQVVRLEVBQUUrUyxHQUFHelMsR0FBSSxNQUFhLElBQVBkLEVBQUVQLEdBQUdnQixHQUFRRCxFQUFFK1MsR0FBR3ZULEdBQUcsSUFBSWMsSUFBSU4sRUFBRStTLEdBQUd6UyxJQUFJLEdBQUcsSUFBSU4sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJaEIsR0FBR0EsSUFBSWdCLEdBQUcsSUFBS2hCLEVBQUVpQixNQUFLQSxFQUFFRCxHQUFHQSxLQUFFTSxFQUFFdEIsR0FBR0EsSUFBUSxLQUFLaUIsR0FBRyxJQUFPLFFBQUZLLElBQVksT0FBT3RCLEVBQTBDLEdBQXhDLElBQU8sRUFBRmdCLEtBQU9BLEdBQUssR0FBRmYsR0FBNEIsS0FBdEJELEVBQUVELEVBQUU0eUIsZ0JBQXdCLElBQUk1eUIsRUFBRUEsRUFBRTZ5QixjQUFjNXlCLEdBQUdnQixFQUFFLEVBQUVoQixHQUFjaUIsRUFBRSxJQUFiaEIsRUFBRSxHQUFHdVQsR0FBR3hULElBQVVnQixHQUFHakIsRUFBRUUsR0FBR0QsSUFBSWlCLEVBQUUsT0FBT0QsQ0FBQyxDQUN2YyxTQUFTa1QsR0FBR25VLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPQyxFQUFFLElBQUksS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLFFBQVEsS0FBSyxRQUFRLE9BQU9BLEVBQUUsSUFBdUosUUFBUSxPQUFPLEVBQUUsQ0FDck4sU0FBU29VLEdBQUdyVSxHQUFnQyxPQUFPLElBQXBDQSxHQUFrQixXQUFoQkEsRUFBRXl5QixjQUFzQ3p5QixFQUFJLFdBQUZBLEVBQWEsV0FBVyxDQUFDLENBQUMsU0FBU3lVLEtBQUssSUFBSXpVLEVBQUU2VCxHQUFvQyxPQUExQixJQUFRLFNBQWZBLEtBQUssTUFBcUJBLEdBQUcsSUFBVzdULENBQUMsQ0FBQyxTQUFTMFUsR0FBRzFVLEdBQUcsSUFBSSxJQUFJQyxFQUFFLEdBQUdDLEVBQUUsRUFBRSxHQUFHQSxFQUFFQSxJQUFJRCxFQUFFd0gsS0FBS3pILEdBQUcsT0FBT0MsQ0FBQyxDQUMzYSxTQUFTNFUsR0FBRzdVLEVBQUVDLEVBQUVDLEdBQUdGLEVBQUV5eUIsY0FBY3h5QixFQUFFLFlBQVlBLElBQUlELEVBQUUweUIsZUFBZSxFQUFFMXlCLEVBQUUyeUIsWUFBWSxJQUFHM3lCLEVBQUVBLEVBQUU4eUIsWUFBVzd5QixFQUFFLEdBQUd3VCxHQUFHeFQsSUFBUUMsQ0FBQyxDQUN6SCxTQUFTNlUsR0FBRy9VLEVBQUVDLEdBQUcsSUFBSUMsRUFBRUYsRUFBRTR5QixnQkFBZ0IzeUIsRUFBRSxJQUFJRCxFQUFFQSxFQUFFNnlCLGNBQWMzeUIsR0FBRyxDQUFDLElBQUllLEVBQUUsR0FBR3dTLEdBQUd2VCxHQUFHZ0IsRUFBRSxHQUFHRCxFQUFFQyxFQUFFakIsRUFBRUQsRUFBRWlCLEdBQUdoQixJQUFJRCxFQUFFaUIsSUFBSWhCLEdBQUdDLElBQUlnQixDQUFDLENBQUMsQ0FBQyxJQUFJaUgsR0FBRSxFQUFFLFNBQVM2TSxHQUFHaFYsR0FBUyxPQUFPLEdBQWJBLElBQUlBLEdBQWEsRUFBRUEsRUFBRSxJQUFPLFVBQUZBLEdBQWEsR0FBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUlpVixHQUFHQyxHQUFHTSxHQUFHQyxHQUFHQyxHQUFHQyxJQUFHLEVBQUdDLEdBQUcsR0FBR0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxJQUFJK2MsSUFBSTljLEdBQUcsSUFBSThjLElBQUk3YyxHQUFHLEdBQUdDLEdBQUcsNlBBQTZQblYsTUFBTSxLQUNoaUIsU0FBU29WLEdBQUdwVyxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxVQUFVLElBQUssV0FBVzZWLEdBQUcsS0FBSyxNQUFNLElBQUssWUFBWSxJQUFLLFlBQVlDLEdBQUcsS0FBSyxNQUFNLElBQUssWUFBWSxJQUFLLFdBQVdDLEdBQUcsS0FBSyxNQUFNLElBQUssY0FBYyxJQUFLLGFBQWFDLEdBQUdnZCxPQUFPL3lCLEVBQUVnekIsV0FBVyxNQUFNLElBQUssb0JBQW9CLElBQUsscUJBQXFCaGQsR0FBRytjLE9BQU8veUIsRUFBRWd6QixXQUFXLENBQ25ULFNBQVM1YyxHQUFHclcsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRUMsRUFBRUssR0FBRyxPQUFHLE9BQU92QixHQUFHQSxFQUFFa3pCLGNBQWMzeEIsR0FBU3ZCLEVBQUUsQ0FBQ216QixVQUFVbHpCLEVBQUVtekIsYUFBYWx6QixFQUFFbXpCLGlCQUFpQnB5QixFQUFFaXlCLFlBQVkzeEIsRUFBRSt4QixpQkFBaUIsQ0FBQ3B5QixJQUFJLE9BQU9qQixHQUFZLFFBQVJBLEVBQUV5TSxHQUFHek0sS0FBYWlWLEdBQUdqVixHQUFJRCxJQUFFQSxFQUFFcXpCLGtCQUFrQnB5QixFQUFFaEIsRUFBRUQsRUFBRXN6QixpQkFBaUIsT0FBT3B5QixJQUFJLElBQUlqQixFQUFFNkMsUUFBUTVCLElBQUlqQixFQUFFd0gsS0FBS3ZHLEdBQVVsQixFQUFDLENBRXBSLFNBQVN1VyxHQUFHdlcsR0FBRyxJQUFJQyxFQUFFdVcsR0FBR3hXLEVBQUU0aEIsUUFBUSxHQUFHLE9BQU8zaEIsRUFBRSxDQUFDLElBQUlDLEVBQUV5TyxHQUFHMU8sR0FBRyxHQUFHLE9BQU9DLEVBQUUsR0FBVyxNQUFSRCxFQUFFQyxFQUFFc3JCLE1BQVksR0FBVyxRQUFSdnJCLEVBQUVzTyxHQUFHck8sSUFBNEQsT0FBL0NGLEVBQUVtekIsVUFBVWx6QixPQUFFeVYsR0FBRzFWLEVBQUV1ekIsVUFBUyxXQUFXL2QsR0FBR3RWLEVBQUUsU0FBZ0IsR0FBRyxJQUFJRCxHQUFHQyxFQUFFK3dCLFVBQVVVLFFBQVFKLGNBQWNpQyxhQUFtRSxZQUFyRHh6QixFQUFFbXpCLFVBQVUsSUFBSWp6QixFQUFFc3JCLElBQUl0ckIsRUFBRSt3QixVQUFVd0MsY0FBYyxLQUFZLENBQUN6ekIsRUFBRW16QixVQUFVLElBQUksQ0FDbFQsU0FBUzFjLEdBQUd6VyxHQUFHLEdBQUcsT0FBT0EsRUFBRW16QixVQUFVLE9BQU0sRUFBRyxJQUFJLElBQUlsekIsRUFBRUQsRUFBRXN6QixpQkFBaUIsRUFBRXJ6QixFQUFFUyxRQUFRLENBQUMsSUFBSVIsRUFBRXlXLEdBQUczVyxFQUFFb3pCLGFBQWFwekIsRUFBRXF6QixpQkFBaUJwekIsRUFBRSxHQUFHRCxFQUFFa3pCLGFBQWEsR0FBRyxPQUFPaHpCLEVBQWlHLE9BQWUsUUFBUkQsRUFBRXlNLEdBQUd4TSxLQUFhZ1YsR0FBR2pWLEdBQUdELEVBQUVtekIsVUFBVWp6QixHQUFFLEVBQTNILElBQUllLEVBQUUsSUFBdEJmLEVBQUVGLEVBQUVrekIsYUFBd0Jsd0IsWUFBWTlDLEVBQUU2ZCxLQUFLN2QsR0FBRzZMLEdBQUc5SyxFQUFFZixFQUFFMGhCLE9BQU84UixjQUFjenlCLEdBQUc4SyxHQUFHLEtBQTBEOUwsRUFBRStNLE9BQU8sQ0FBQyxPQUFNLENBQUUsQ0FBQyxTQUFTNkosR0FBRzdXLEVBQUVDLEVBQUVDLEdBQUd1VyxHQUFHelcsSUFBSUUsRUFBRTh5QixPQUFPL3lCLEVBQUUsQ0FBQyxTQUFTNlcsS0FBS25CLElBQUcsRUFBRyxPQUFPRSxJQUFJWSxHQUFHWixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSVcsR0FBR1gsTUFBTUEsR0FBRyxNQUFNLE9BQU9DLElBQUlVLEdBQUdWLE1BQU1BLEdBQUcsTUFBTUMsR0FBRzZVLFFBQVFoVSxJQUFJWixHQUFHNFUsUUFBUWhVLEdBQUcsQ0FDbmYsU0FBU0UsR0FBRy9XLEVBQUVDLEdBQUdELEVBQUVtekIsWUFBWWx6QixJQUFJRCxFQUFFbXpCLFVBQVUsS0FBS3hkLEtBQUtBLElBQUcsRUFBRzFRLEVBQUcyc0IsMEJBQTBCM3NCLEVBQUdtdEIsd0JBQXdCdGIsS0FBSyxDQUM1SCxTQUFTRSxHQUFHaFgsR0FBRyxTQUFTQyxFQUFFQSxHQUFHLE9BQU84VyxHQUFHOVcsRUFBRUQsRUFBRSxDQUFDLEdBQUcsRUFBRTRWLEdBQUdsVixPQUFPLENBQUNxVyxHQUFHbkIsR0FBRyxHQUFHNVYsR0FBRyxJQUFJLElBQUlFLEVBQUUsRUFBRUEsRUFBRTBWLEdBQUdsVixPQUFPUixJQUFJLENBQUMsSUFBSWUsRUFBRTJVLEdBQUcxVixHQUFHZSxFQUFFa3lCLFlBQVluekIsSUFBSWlCLEVBQUVreUIsVUFBVSxLQUFLLENBQUMsQ0FBeUYsSUFBeEYsT0FBT3RkLElBQUlrQixHQUFHbEIsR0FBRzdWLEdBQUcsT0FBTzhWLElBQUlpQixHQUFHakIsR0FBRzlWLEdBQUcsT0FBTytWLElBQUlnQixHQUFHaEIsR0FBRy9WLEdBQUdnVyxHQUFHNlUsUUFBUTVxQixHQUFHZ1csR0FBRzRVLFFBQVE1cUIsR0FBT0MsRUFBRSxFQUFFQSxFQUFFZ1csR0FBR3hWLE9BQU9SLEtBQUllLEVBQUVpVixHQUFHaFcsSUFBS2l6QixZQUFZbnpCLElBQUlpQixFQUFFa3lCLFVBQVUsTUFBTSxLQUFLLEVBQUVqZCxHQUFHeFYsUUFBaUIsUUFBUlIsRUFBRWdXLEdBQUcsSUFBWWlkLFdBQVk1YyxHQUFHclcsR0FBRyxPQUFPQSxFQUFFaXpCLFdBQVdqZCxHQUFHbEosT0FBTyxDQUFDLElBQUl3SyxHQUFHcFQsRUFBR3V2Qix3QkFBd0JqYyxJQUFHLEVBQzVhLFNBQVNHLEdBQUc3WCxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHLElBQUlDLEVBQUVpSCxHQUFFNUcsRUFBRWlXLEdBQUdvYyxXQUFXcGMsR0FBR29jLFdBQVcsS0FBSyxJQUFJenJCLEdBQUUsRUFBRTRQLEdBQUcvWCxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFLENBQUMsUUFBUWtILEdBQUVqSCxFQUFFc1csR0FBR29jLFdBQVdyeUIsQ0FBQyxDQUFDLENBQUMsU0FBU3lXLEdBQUdoWSxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHLElBQUlDLEVBQUVpSCxHQUFFNUcsRUFBRWlXLEdBQUdvYyxXQUFXcGMsR0FBR29jLFdBQVcsS0FBSyxJQUFJenJCLEdBQUUsRUFBRTRQLEdBQUcvWCxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFLENBQUMsUUFBUWtILEdBQUVqSCxFQUFFc1csR0FBR29jLFdBQVdyeUIsQ0FBQyxDQUFDLENBQ2pPLFNBQVN3VyxHQUFHL1gsRUFBRUMsRUFBRUMsRUFBRWUsR0FBRyxHQUFHeVcsR0FBRyxDQUFDLElBQUl4VyxFQUFFeVYsR0FBRzNXLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUcsR0FBRyxPQUFPQyxFQUFFZ1gsR0FBR2xZLEVBQUVDLEVBQUVnQixFQUFFa1gsR0FBR2pZLEdBQUdrVyxHQUFHcFcsRUFBRWlCLFFBQVEsR0FOdEYsU0FBWWpCLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEdBQUcsT0FBT2pCLEdBQUcsSUFBSyxVQUFVLE9BQU80VixHQUFHUSxHQUFHUixHQUFHN1YsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRUMsSUFBRyxFQUFHLElBQUssWUFBWSxPQUFPNFUsR0FBR08sR0FBR1AsR0FBRzlWLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLElBQUcsRUFBRyxJQUFLLFlBQVksT0FBTzZVLEdBQUdNLEdBQUdOLEdBQUcvVixFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxJQUFHLEVBQUcsSUFBSyxjQUFjLElBQUlLLEVBQUVMLEVBQUUreEIsVUFBa0QsT0FBeENqZCxHQUFHb1YsSUFBSTdwQixFQUFFOFUsR0FBR0wsR0FBRzZWLElBQUl0cUIsSUFBSSxLQUFLdkIsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRUMsS0FBVSxFQUFHLElBQUssb0JBQW9CLE9BQU9LLEVBQUVMLEVBQUUreEIsVUFBVWhkLEdBQUdtVixJQUFJN3BCLEVBQUU4VSxHQUFHSixHQUFHNFYsSUFBSXRxQixJQUFJLEtBQUt2QixFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxLQUFJLEVBQUcsT0FBTSxDQUFFLENBTTFRb1YsQ0FBR3BWLEVBQUVsQixFQUFFQyxFQUFFQyxFQUFFZSxHQUFHQSxFQUFFNHlCLHVCQUF1QixHQUFHemQsR0FBR3BXLEVBQUVpQixHQUFLLEVBQUZoQixJQUFNLEVBQUVrVyxHQUFHclQsUUFBUTlDLEdBQUcsQ0FBQyxLQUFLLE9BQU9rQixHQUFHLENBQUMsSUFBSUssRUFBRW1MLEdBQUd4TCxHQUEwRCxHQUF2RCxPQUFPSyxHQUFHMFQsR0FBRzFULEdBQWlCLFFBQWRBLEVBQUVvVixHQUFHM1csRUFBRUMsRUFBRUMsRUFBRWUsS0FBYWlYLEdBQUdsWSxFQUFFQyxFQUFFZ0IsRUFBRWtYLEdBQUdqWSxHQUFNcUIsSUFBSUwsRUFBRSxNQUFNQSxFQUFFSyxDQUFDLENBQUMsT0FBT0wsR0FBR0QsRUFBRTR5QixpQkFBaUIsTUFBTTNiLEdBQUdsWSxFQUFFQyxFQUFFZ0IsRUFBRSxLQUFLZixFQUFFLENBQUMsQ0FBQyxJQUFJaVksR0FBRyxLQUNwVSxTQUFTeEIsR0FBRzNXLEVBQUVDLEVBQUVDLEVBQUVlLEdBQTJCLEdBQXhCa1gsR0FBRyxLQUF3QixRQUFYblksRUFBRXdXLEdBQVZ4VyxFQUFFZ00sR0FBRy9LLEtBQXVCLEdBQVcsUUFBUmhCLEVBQUUwTyxHQUFHM08sSUFBWUEsRUFBRSxVQUFVLEdBQVcsTUFBUkUsRUFBRUQsRUFBRXVyQixLQUFXLENBQVMsR0FBRyxRQUFYeHJCLEVBQUV1TyxHQUFHdE8sSUFBZSxPQUFPRCxFQUFFQSxFQUFFLElBQUksTUFBTSxHQUFHLElBQUlFLEVBQUUsQ0FBQyxHQUFHRCxFQUFFZ3hCLFVBQVVVLFFBQVFKLGNBQWNpQyxhQUFhLE9BQU8sSUFBSXZ6QixFQUFFdXJCLElBQUl2ckIsRUFBRWd4QixVQUFVd0MsY0FBYyxLQUFLenpCLEVBQUUsSUFBSSxNQUFNQyxJQUFJRCxJQUFJQSxFQUFFLE1BQVcsT0FBTG1ZLEdBQUduWSxFQUFTLElBQUksQ0FDN1MsU0FBU29ZLEdBQUdwWSxHQUFHLE9BQU9BLEdBQUcsSUFBSyxTQUFTLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSyxjQUFjLElBQUssT0FBTyxJQUFLLE1BQU0sSUFBSyxXQUFXLElBQUssV0FBVyxJQUFLLFVBQVUsSUFBSyxZQUFZLElBQUssT0FBTyxJQUFLLFVBQVUsSUFBSyxXQUFXLElBQUssUUFBUSxJQUFLLFVBQVUsSUFBSyxVQUFVLElBQUssV0FBVyxJQUFLLFFBQVEsSUFBSyxZQUFZLElBQUssVUFBVSxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUssT0FBTyxJQUFLLGdCQUFnQixJQUFLLGNBQWMsSUFBSyxZQUFZLElBQUssYUFBYSxJQUFLLFFBQVEsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxjQUFjLElBQUssV0FBVyxJQUFLLGFBQWEsSUFBSyxlQUFlLElBQUssU0FBUyxJQUFLLGtCQUFrQixJQUFLLFlBQVksSUFBSyxtQkFBbUIsSUFBSyxpQkFBaUIsSUFBSyxvQkFBb0IsSUFBSyxhQUFhLElBQUssWUFBWSxJQUFLLGNBQWMsSUFBSyxPQUFPLElBQUssbUJBQW1CLElBQUssUUFBUSxJQUFLLGFBQWEsSUFBSyxXQUFXLElBQUssU0FBUyxJQUFLLGNBQWMsT0FBTyxFQUFFLElBQUssT0FBTyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxjQUFjLElBQUssYUFBYSxJQUFLLGNBQWMsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFlBQVksSUFBSyxRQUFRLElBQUssYUFBYSxJQUFLLGFBQWEsSUFBSyxlQUFlLElBQUssZUFBZSxPQUFPLEVBQ3BxQyxJQUFLLFVBQVUsT0FBT3FSLE1BQU0sS0FBS0ksR0FBRyxPQUFPLEVBQUUsS0FBS0csR0FBRyxPQUFPLEVBQUUsS0FBS1UsR0FBRyxLQUFLQyxHQUFHLE9BQU8sR0FBRyxLQUFLRyxHQUFHLE9BQU8sVUFBVSxRQUFRLE9BQU8sR0FBRyxRQUFRLE9BQU8sR0FBRyxDQUFDLElBQUkyRixHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNDLEtBQUssR0FBR0QsR0FBRyxPQUFPQSxHQUFHLElBQUl2WSxFQUFrQmlCLEVBQWhCaEIsRUFBRXFZLEdBQUdwWSxFQUFFRCxFQUFFUyxPQUFTUSxFQUFFLFVBQVVtWCxHQUFHQSxHQUFHaFksTUFBTWdZLEdBQUdsRyxZQUFZNVEsRUFBRUwsRUFBRVIsT0FBTyxJQUFJVixFQUFFLEVBQUVBLEVBQUVFLEdBQUdELEVBQUVELEtBQUtrQixFQUFFbEIsR0FBR0EsS0FBSyxJQUFJUyxFQUFFUCxFQUFFRixFQUFFLElBQUlpQixFQUFFLEVBQUVBLEdBQUdSLEdBQUdSLEVBQUVDLEVBQUVlLEtBQUtDLEVBQUVLLEVBQUVOLEdBQUdBLEtBQUssT0FBT3NYLEdBQUdyWCxFQUFFd0IsTUFBTTFDLEVBQUUsRUFBRWlCLEVBQUUsRUFBRUEsT0FBRSxFQUFPLENBQ3hZLFNBQVM2WCxHQUFHOVksR0FBRyxJQUFJQyxFQUFFRCxFQUFFOHpCLFFBQStFLE1BQXZFLGFBQWE5ekIsRUFBZ0IsS0FBYkEsRUFBRUEsRUFBRSt6QixXQUFnQixLQUFLOXpCLElBQUlELEVBQUUsSUFBS0EsRUFBRUMsRUFBRSxLQUFLRCxJQUFJQSxFQUFFLElBQVcsSUFBSUEsR0FBRyxLQUFLQSxFQUFFQSxFQUFFLENBQUMsQ0FBQyxTQUFTdVosS0FBSyxPQUFNLENBQUUsQ0FBQyxTQUFTRyxLQUFLLE9BQU0sQ0FBRSxDQUM1SyxTQUFTRSxHQUFHNVosR0FBRyxTQUFTQyxFQUFFQSxFQUFFZ0IsRUFBRUMsRUFBRUssRUFBRWQsR0FBNkcsSUFBSSxJQUFJUCxLQUFsSFksS0FBS2t6QixXQUFXL3pCLEVBQUVhLEtBQUttekIsWUFBWS95QixFQUFFSixLQUFLaWQsS0FBSzljLEVBQUVILEtBQUtveUIsWUFBWTN4QixFQUFFVCxLQUFLOGdCLE9BQU9uaEIsRUFBRUssS0FBS296QixjQUFjLEtBQWtCbDBCLEVBQUVBLEVBQUVvSSxlQUFlbEksS0FBS0QsRUFBRUQsRUFBRUUsR0FBR1ksS0FBS1osR0FBR0QsRUFBRUEsRUFBRXNCLEdBQUdBLEVBQUVyQixJQUFnSSxPQUE1SFksS0FBS3F6QixvQkFBb0IsTUFBTTV5QixFQUFFNnlCLGlCQUFpQjd5QixFQUFFNnlCLGtCQUFpQixJQUFLN3lCLEVBQUU4eUIsYUFBYTlhLEdBQUdHLEdBQUc1WSxLQUFLd3pCLHFCQUFxQjVhLEdBQVU1WSxJQUFJLENBQzlFLE9BRCtFbUMsRUFBRWhELEVBQUVHLFVBQVUsQ0FBQ20wQixlQUFlLFdBQVd6ekIsS0FBS3N6QixrQkFBaUIsRUFBRyxJQUFJcDBCLEVBQUVjLEtBQUtveUIsWUFBWWx6QixJQUFJQSxFQUFFdTBCLGVBQWV2MEIsRUFBRXUwQixpQkFBaUIsa0JBQW1CdjBCLEVBQUVxMEIsY0FDN2VyMEIsRUFBRXEwQixhQUFZLEdBQUl2ekIsS0FBS3F6QixtQkFBbUI1YSxHQUFHLEVBQUVzYSxnQkFBZ0IsV0FBVyxJQUFJN3pCLEVBQUVjLEtBQUtveUIsWUFBWWx6QixJQUFJQSxFQUFFNnpCLGdCQUFnQjd6QixFQUFFNnpCLGtCQUFrQixrQkFBbUI3ekIsRUFBRXcwQixlQUFleDBCLEVBQUV3MEIsY0FBYSxHQUFJMXpCLEtBQUt3ekIscUJBQXFCL2EsR0FBRyxFQUFFa2IsUUFBUSxXQUFXLEVBQUVDLGFBQWFuYixLQUFZdFosQ0FBQyxDQUNqUixJQUFvTDJhLEdBQUdDLEdBQUdDLEdBQXRMaEIsR0FBRyxDQUFDNmEsV0FBVyxFQUFFQyxRQUFRLEVBQUVDLFdBQVcsRUFBRUMsVUFBVSxTQUFTOTBCLEdBQUcsT0FBT0EsRUFBRTgwQixXQUFXcDFCLEtBQUtxMUIsS0FBSyxFQUFFWCxpQkFBaUIsRUFBRVksVUFBVSxHQUFHaGIsR0FBR0osR0FBR0UsSUFBSUcsR0FBR2hYLEVBQUUsQ0FBQyxFQUFFNlcsR0FBRyxDQUFDbWIsS0FBSyxFQUFFQyxPQUFPLElBQUloYixHQUFHTixHQUFHSyxJQUFhb0IsR0FBR3BZLEVBQUUsQ0FBQyxFQUFFZ1gsR0FBRyxDQUFDdkIsUUFBUSxFQUFFRSxRQUFRLEVBQUVELFFBQVEsRUFBRUUsUUFBUSxFQUFFc2MsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsaUJBQWlCMWEsR0FBRzVQLE9BQU8sRUFBRXVxQixRQUFRLEVBQUVDLGNBQWMsU0FBUzMxQixHQUFHLFlBQU8sSUFBU0EsRUFBRTIxQixjQUFjMzFCLEVBQUU0MUIsY0FBYzUxQixFQUFFK3dCLFdBQVcvd0IsRUFBRTYxQixVQUFVNzFCLEVBQUU0MUIsWUFBWTUxQixFQUFFMjFCLGFBQWEsRUFBRUcsVUFBVSxTQUFTOTFCLEdBQUcsTUFBRyxjQUMzZUEsRUFBU0EsRUFBRTgxQixXQUFVOTFCLElBQUk4YSxLQUFLQSxJQUFJLGNBQWM5YSxFQUFFK2QsTUFBTW5ELEdBQUc1YSxFQUFFMFksUUFBUW9DLEdBQUdwQyxRQUFRbUMsR0FBRzdhLEVBQUU0WSxRQUFRa0MsR0FBR2xDLFNBQVNpQyxHQUFHRCxHQUFHLEVBQUVFLEdBQUc5YSxHQUFVNGEsR0FBRSxFQUFFbWIsVUFBVSxTQUFTLzFCLEdBQUcsTUFBTSxjQUFjQSxFQUFFQSxFQUFFKzFCLFVBQVVsYixFQUFFLElBQUlTLEdBQUcxQixHQUFHeUIsSUFBaUNTLEdBQUdsQyxHQUE3QjNXLEVBQUUsQ0FBQyxFQUFFb1ksR0FBRyxDQUFDMmEsYUFBYSxLQUE0Q2hhLEdBQUdwQyxHQUE5QjNXLEVBQUUsQ0FBQyxFQUFFZ1gsR0FBRyxDQUFDMGIsY0FBYyxLQUEwRXpaLEdBQUd0QyxHQUE1RDNXLEVBQUUsQ0FBQyxFQUFFNlcsR0FBRyxDQUFDbWMsY0FBYyxFQUFFQyxZQUFZLEVBQUVDLGNBQWMsS0FBYy9aLEdBQUduWixFQUFFLENBQUMsRUFBRTZXLEdBQUcsQ0FBQ3NjLGNBQWMsU0FBU3AyQixHQUFHLE1BQU0sa0JBQWtCQSxFQUFFQSxFQUFFbzJCLGNBQWM1MkIsT0FBTzQyQixhQUFhLElBQUk5WixHQUFHMUMsR0FBR3dDLElBQXlCSSxHQUFHNUMsR0FBckIzVyxFQUFFLENBQUMsRUFBRTZXLEdBQUcsQ0FBQzJJLEtBQUssS0FBY2hHLEdBQUcsQ0FBQzRaLElBQUksU0FDeGZDLFNBQVMsSUFBSUMsS0FBSyxZQUFZQyxHQUFHLFVBQVVDLE1BQU0sYUFBYUMsS0FBSyxZQUFZQyxJQUFJLFNBQVNDLElBQUksS0FBS0MsS0FBSyxjQUFjQyxLQUFLLGNBQWNDLE9BQU8sYUFBYUMsZ0JBQWdCLGdCQUFnQnpaLEdBQUcsQ0FBQyxFQUFFLFlBQVksRUFBRSxNQUFNLEdBQUcsUUFBUSxHQUFHLFFBQVEsR0FBRyxRQUFRLEdBQUcsVUFBVSxHQUFHLE1BQU0sR0FBRyxRQUFRLEdBQUcsV0FBVyxHQUFHLFNBQVMsR0FBRyxJQUFJLEdBQUcsU0FBUyxHQUFHLFdBQVcsR0FBRyxNQUFNLEdBQUcsT0FBTyxHQUFHLFlBQVksR0FBRyxVQUFVLEdBQUcsYUFBYSxHQUFHLFlBQVksR0FBRyxTQUFTLEdBQUcsU0FBUyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQ3RmLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFNLElBQUksTUFBTSxJQUFJLE1BQU0sSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFFBQVFLLEdBQUcsQ0FBQ3FaLElBQUksU0FBU0MsUUFBUSxVQUFVQyxLQUFLLFVBQVVDLE1BQU0sWUFBWSxTQUFTNVosR0FBR3hkLEdBQUcsSUFBSUMsRUFBRWEsS0FBS295QixZQUFZLE9BQU9qekIsRUFBRXcxQixpQkFBaUJ4MUIsRUFBRXcxQixpQkFBaUJ6MUIsTUFBSUEsRUFBRTRkLEdBQUc1ZCxPQUFNQyxFQUFFRCxFQUFLLENBQUMsU0FBUythLEtBQUssT0FBT3lDLEVBQUUsQ0FDaFMsSUFBSVcsR0FBR2xiLEVBQUUsQ0FBQyxFQUFFZ1gsR0FBRyxDQUFDdU8sSUFBSSxTQUFTeG9CLEdBQUcsR0FBR0EsRUFBRXdvQixJQUFJLENBQUMsSUFBSXZvQixFQUFFd2MsR0FBR3pjLEVBQUV3b0IsTUFBTXhvQixFQUFFd29CLElBQUksR0FBRyxpQkFBaUJ2b0IsRUFBRSxPQUFPQSxDQUFDLENBQUMsTUFBTSxhQUFhRCxFQUFFK2QsS0FBYyxNQUFSL2QsRUFBRThZLEdBQUc5WSxJQUFVLFFBQVFnQyxPQUFPcTFCLGFBQWFyM0IsR0FBSSxZQUFZQSxFQUFFK2QsTUFBTSxVQUFVL2QsRUFBRStkLEtBQUtSLEdBQUd2ZCxFQUFFOHpCLFVBQVUsZUFBZSxFQUFFLEVBQUV3RCxLQUFLLEVBQUVud0IsU0FBUyxFQUFFa3VCLFFBQVEsRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRStCLE9BQU8sRUFBRUMsT0FBTyxFQUFFL0IsaUJBQWlCMWEsR0FBR2daLFNBQVMsU0FBUy96QixHQUFHLE1BQU0sYUFBYUEsRUFBRStkLEtBQUtqRixHQUFHOVksR0FBRyxDQUFDLEVBQUU4ekIsUUFBUSxTQUFTOXpCLEdBQUcsTUFBTSxZQUFZQSxFQUFFK2QsTUFBTSxVQUFVL2QsRUFBRStkLEtBQUsvZCxFQUFFOHpCLFFBQVEsQ0FBQyxFQUFFMkQsTUFBTSxTQUFTejNCLEdBQUcsTUFBTSxhQUM3ZUEsRUFBRStkLEtBQUtqRixHQUFHOVksR0FBRyxZQUFZQSxFQUFFK2QsTUFBTSxVQUFVL2QsRUFBRStkLEtBQUsvZCxFQUFFOHpCLFFBQVEsQ0FBQyxJQUFJalcsR0FBR2pFLEdBQUd1RSxJQUFpSUcsR0FBRzFFLEdBQTdIM1csRUFBRSxDQUFDLEVBQUVvWSxHQUFHLENBQUM0WCxVQUFVLEVBQUU5WixNQUFNLEVBQUVDLE9BQU8sRUFBRXNlLFNBQVMsRUFBRUMsbUJBQW1CLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFlBQVksRUFBRUMsVUFBVSxLQUFtSXZaLEdBQUc3RSxHQUFySDNXLEVBQUUsQ0FBQyxFQUFFZ1gsR0FBRyxDQUFDZ2UsUUFBUSxFQUFFQyxjQUFjLEVBQUVDLGVBQWUsRUFBRTVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFSCxRQUFRLEVBQUVDLFNBQVMsRUFBRUcsaUJBQWlCMWEsTUFBMEU0RCxHQUFHL0UsR0FBM0QzVyxFQUFFLENBQUMsRUFBRTZXLEdBQUcsQ0FBQzRRLGFBQWEsRUFBRXdMLFlBQVksRUFBRUMsY0FBYyxLQUFjalgsR0FBR2pjLEVBQUUsQ0FBQyxFQUFFb1ksR0FBRyxDQUFDK2MsT0FBTyxTQUFTcDRCLEdBQUcsTUFBTSxXQUFXQSxFQUFFQSxFQUFFbzRCLE9BQU8sZ0JBQWdCcDRCLEdBQUdBLEVBQUVxNEIsWUFBWSxDQUFDLEVBQ25mQyxPQUFPLFNBQVN0NEIsR0FBRyxNQUFNLFdBQVdBLEVBQUVBLEVBQUVzNEIsT0FBTyxnQkFBZ0J0NEIsR0FBR0EsRUFBRXU0QixZQUFZLGVBQWV2NEIsR0FBR0EsRUFBRXc0QixXQUFXLENBQUMsRUFBRUMsT0FBTyxFQUFFQyxVQUFVLElBQUl6WixHQUFHckYsR0FBR3NGLElBQUlJLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJRSxHQUFHNWQsR0FBSSxxQkFBcUJwQyxPQUFPaWdCLEdBQUcsS0FBSzdkLEdBQUksaUJBQWlCOEUsV0FBVytZLEdBQUcvWSxTQUFTeVksY0FBYyxJQUFJTyxHQUFHOWQsR0FBSSxjQUFjcEMsU0FBU2lnQixHQUFHRSxHQUFHL2QsS0FBTTRkLElBQUlDLElBQUksRUFBRUEsSUFBSSxJQUFJQSxJQUFJSyxHQUFHOWQsT0FBT3ExQixhQUFhLElBQUl0WCxJQUFHLEVBQzFXLFNBQVNDLEdBQUdoZ0IsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBUSxPQUFPLElBQUlzZixHQUFHeGMsUUFBUTdDLEVBQUU2ekIsU0FBUyxJQUFLLFVBQVUsT0FBTyxNQUFNN3pCLEVBQUU2ekIsUUFBUSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssV0FBVyxPQUFNLEVBQUcsUUFBUSxPQUFNLEVBQUcsQ0FBQyxTQUFTNVQsR0FBR2xnQixHQUFjLE1BQU0saUJBQWpCQSxFQUFFQSxFQUFFazFCLFNBQWtDLFNBQVNsMUIsRUFBRUEsRUFBRXlpQixLQUFLLElBQUksQ0FBQyxJQUFJVCxJQUFHLEVBRTFRTSxHQUFHLENBQUNxVyxPQUFNLEVBQUdDLE1BQUssRUFBR0MsVUFBUyxFQUFHLGtCQUFpQixFQUFHQyxPQUFNLEVBQUdDLE9BQU0sRUFBR0MsUUFBTyxFQUFHQyxVQUFTLEVBQUdDLE9BQU0sRUFBR0MsUUFBTyxFQUFHQyxLQUFJLEVBQUdDLE1BQUssRUFBR0MsTUFBSyxFQUFHdGMsS0FBSSxFQUFHdWMsTUFBSyxHQUFJLFNBQVNoWCxHQUFHdmlCLEdBQUcsSUFBSUMsRUFBRUQsR0FBR0EsRUFBRXlkLFVBQVV6ZCxFQUFFeWQsU0FBU3JLLGNBQWMsTUFBTSxVQUFVblQsSUFBSXFpQixHQUFHdGlCLEVBQUUrZCxNQUFNLGFBQWE5ZCxDQUFPLENBQUMsU0FBU3VpQixHQUFHeGlCLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUcyTCxHQUFHM0wsR0FBc0IsR0FBbkJoQixFQUFFeWlCLEdBQUd6aUIsRUFBRSxhQUFnQlMsU0FBU1IsRUFBRSxJQUFJOFosR0FBRyxXQUFXLFNBQVMsS0FBSzlaLEVBQUVlLEdBQUdqQixFQUFFeUgsS0FBSyxDQUFDZ1IsTUFBTXZZLEVBQUVzNUIsVUFBVXY1QixJQUFJLENBQUMsSUFBSTBpQixHQUFHLEtBQUtnQixHQUFHLEtBQUssU0FBU08sR0FBR2xrQixHQUFHbWMsR0FBR25jLEVBQUUsRUFBRSxDQUFDLFNBQVN3a0IsR0FBR3hrQixHQUFlLEdBQUcrSCxFQUFUMmMsR0FBRzFrQixJQUFZLE9BQU9BLENBQUMsQ0FDcGUsU0FBUzJrQixHQUFHM2tCLEVBQUVDLEdBQUcsR0FBRyxXQUFXRCxFQUFFLE9BQU9DLENBQUMsQ0FBQyxJQUFJMmtCLElBQUcsRUFBRyxHQUFHaGpCLEVBQUcsQ0FBQyxJQUFJbWpCLEdBQUcsR0FBR25qQixFQUFHLENBQUMsSUFBSW9qQixHQUFHLFlBQVl0ZSxTQUFTLElBQUlzZSxHQUFHLENBQUMsSUFBSUMsR0FBR3ZlLFNBQVNDLGNBQWMsT0FBT3NlLEdBQUdyVyxhQUFhLFVBQVUsV0FBV29XLEdBQUcsbUJBQW9CQyxHQUFHd1UsT0FBTyxDQUFDMVUsR0FBR0MsRUFBRSxNQUFNRCxJQUFHLEVBQUdILEdBQUdHLE1BQU1yZSxTQUFTeVksY0FBYyxFQUFFelksU0FBU3lZLGFBQWEsQ0FBQyxTQUFTK0YsS0FBS3ZDLEtBQUtBLEdBQUcrVyxZQUFZLG1CQUFtQnRVLElBQUl6QixHQUFHaEIsR0FBRyxLQUFLLENBQUMsU0FBU3lDLEdBQUdwbEIsR0FBRyxHQUFHLFVBQVVBLEVBQUUwcUIsY0FBY2xHLEdBQUdiLElBQUksQ0FBQyxJQUFJMWpCLEVBQUUsR0FBR3VpQixHQUFHdmlCLEVBQUUwakIsR0FBRzNqQixFQUFFZ00sR0FBR2hNLElBQUltTixHQUFHK1csR0FBR2prQixFQUFFLENBQUMsQ0FDL2IsU0FBU29sQixHQUFHcmxCLEVBQUVDLEVBQUVDLEdBQUcsWUFBWUYsR0FBR2tsQixLQUFVdkIsR0FBR3pqQixHQUFSeWlCLEdBQUcxaUIsR0FBVStLLFlBQVksbUJBQW1Cb2EsS0FBSyxhQUFhcGxCLEdBQUdrbEIsSUFBSSxDQUFDLFNBQVNNLEdBQUd4bEIsR0FBRyxHQUFHLG9CQUFvQkEsR0FBRyxVQUFVQSxHQUFHLFlBQVlBLEVBQUUsT0FBT3drQixHQUFHYixHQUFHLENBQUMsU0FBUzhCLEdBQUd6bEIsRUFBRUMsR0FBRyxHQUFHLFVBQVVELEVBQUUsT0FBT3drQixHQUFHdmtCLEVBQUUsQ0FBQyxTQUFTMDVCLEdBQUczNUIsRUFBRUMsR0FBRyxHQUFHLFVBQVVELEdBQUcsV0FBV0EsRUFBRSxPQUFPd2tCLEdBQUd2a0IsRUFBRSxDQUFpRSxJQUFJMjVCLEdBQUcsbUJBQW9CLzVCLE9BQU9peEIsR0FBR2p4QixPQUFPaXhCLEdBQTVHLFNBQVk5d0IsRUFBRUMsR0FBRyxPQUFPRCxJQUFJQyxJQUFJLElBQUlELEdBQUcsRUFBRUEsR0FBSSxFQUFFQyxJQUFJRCxHQUFJQSxHQUFHQyxHQUFJQSxDQUFDLEVBQ3RXLFNBQVM0NUIsR0FBRzc1QixFQUFFQyxHQUFHLEdBQUcyNUIsR0FBRzU1QixFQUFFQyxHQUFHLE9BQU0sRUFBRyxHQUFHLGlCQUFrQkQsR0FBRyxPQUFPQSxHQUFHLGlCQUFrQkMsR0FBRyxPQUFPQSxFQUFFLE9BQU0sRUFBRyxJQUFJQyxFQUFFTCxPQUFPeUksS0FBS3RJLEdBQUdpQixFQUFFcEIsT0FBT3lJLEtBQUtySSxHQUFHLEdBQUdDLEVBQUVRLFNBQVNPLEVBQUVQLE9BQU8sT0FBTSxFQUFHLElBQUlPLEVBQUUsRUFBRUEsRUFBRWYsRUFBRVEsT0FBT08sSUFBSSxDQUFDLElBQUlDLEVBQUVoQixFQUFFZSxHQUFHLElBQUljLEVBQUdNLEtBQUtwQyxFQUFFaUIsS0FBSzA0QixHQUFHNTVCLEVBQUVrQixHQUFHakIsRUFBRWlCLElBQUksT0FBTSxDQUFFLENBQUMsT0FBTSxDQUFFLENBQUMsU0FBUzQ0QixHQUFHOTVCLEdBQUcsS0FBS0EsR0FBR0EsRUFBRTZHLFlBQVk3RyxFQUFFQSxFQUFFNkcsV0FBVyxPQUFPN0csQ0FBQyxDQUN0VSxTQUFTKzVCLEdBQUcvNUIsRUFBRUMsR0FBRyxJQUF3QmdCLEVBQXBCZixFQUFFNDVCLEdBQUc5NUIsR0FBTyxJQUFKQSxFQUFFLEVBQVlFLEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUUrUixTQUFTLENBQTBCLEdBQXpCaFIsRUFBRWpCLEVBQUVFLEVBQUVpUyxZQUFZelIsT0FBVVYsR0FBR0MsR0FBR2dCLEdBQUdoQixFQUFFLE1BQU0sQ0FBQys1QixLQUFLOTVCLEVBQUUrNUIsT0FBT2g2QixFQUFFRCxHQUFHQSxFQUFFaUIsQ0FBQyxDQUFDakIsRUFBRSxDQUFDLEtBQUtFLEdBQUcsQ0FBQyxHQUFHQSxFQUFFMmlCLFlBQVksQ0FBQzNpQixFQUFFQSxFQUFFMmlCLFlBQVksTUFBTTdpQixDQUFDLENBQUNFLEVBQUVBLEVBQUVtSyxVQUFVLENBQUNuSyxPQUFFLENBQU0sQ0FBQ0EsRUFBRTQ1QixHQUFHNTVCLEVBQUUsQ0FBQyxDQUFDLFNBQVNnNkIsR0FBR2w2QixFQUFFQyxHQUFHLFNBQU9ELElBQUdDLEtBQUVELElBQUlDLEtBQUtELEdBQUcsSUFBSUEsRUFBRWlTLFlBQVloUyxHQUFHLElBQUlBLEVBQUVnUyxTQUFTaW9CLEdBQUdsNkIsRUFBRUMsRUFBRW9LLFlBQVksYUFBYXJLLEVBQUVBLEVBQUVtNkIsU0FBU2w2QixLQUFHRCxFQUFFbzZCLDRCQUF3RCxHQUE3QnA2QixFQUFFbzZCLHdCQUF3Qm42QixLQUFZLENBQzlaLFNBQVNvNkIsS0FBSyxJQUFJLElBQUlyNkIsRUFBRVIsT0FBT1MsRUFBRW9JLElBQUtwSSxhQUFhRCxFQUFFczZCLG1CQUFtQixDQUFDLElBQUksSUFBSXA2QixFQUFFLGlCQUFrQkQsRUFBRXdoQixjQUFjdGEsU0FBUzhDLElBQUksQ0FBQyxNQUFNaEosR0FBR2YsR0FBRSxDQUFFLENBQUMsSUFBR0EsRUFBeUIsTUFBTUQsRUFBRW9JLEdBQS9CckksRUFBRUMsRUFBRXdoQixlQUFnQy9hLFNBQVMsQ0FBQyxPQUFPekcsQ0FBQyxDQUFDLFNBQVNzNkIsR0FBR3Y2QixHQUFHLElBQUlDLEVBQUVELEdBQUdBLEVBQUV5ZCxVQUFVemQsRUFBRXlkLFNBQVNySyxjQUFjLE9BQU9uVCxJQUFJLFVBQVVBLElBQUksU0FBU0QsRUFBRStkLE1BQU0sV0FBVy9kLEVBQUUrZCxNQUFNLFFBQVEvZCxFQUFFK2QsTUFBTSxRQUFRL2QsRUFBRStkLE1BQU0sYUFBYS9kLEVBQUUrZCxPQUFPLGFBQWE5ZCxHQUFHLFNBQVNELEVBQUV3NkIsZ0JBQWdCLENBQ3hhLFNBQVNDLEdBQUd6NkIsR0FBRyxJQUFJQyxFQUFFbzZCLEtBQUtuNkIsRUFBRUYsRUFBRTA2QixZQUFZejVCLEVBQUVqQixFQUFFMjZCLGVBQWUsR0FBRzE2QixJQUFJQyxHQUFHQSxHQUFHQSxFQUFFcUUsZUFBZTIxQixHQUFHaDZCLEVBQUVxRSxjQUFjMkssZ0JBQWdCaFAsR0FBRyxDQUFDLEdBQUcsT0FBT2UsR0FBR3M1QixHQUFHcjZCLEdBQUcsR0FBR0QsRUFBRWdCLEVBQUUyNUIsV0FBYyxLQUFSNTZCLEVBQUVpQixFQUFFNDVCLE9BQWlCNzZCLEVBQUVDLEdBQUcsbUJBQW1CQyxFQUFFQSxFQUFFNDZCLGVBQWU3NkIsRUFBRUMsRUFBRTY2QixhQUFhcDZCLEtBQUs0a0IsSUFBSXZsQixFQUFFRSxFQUFFRyxNQUFNSyxhQUFhLElBQUdWLEdBQUdDLEVBQUVDLEVBQUVxRSxlQUFlbUMsV0FBV3pHLEVBQUV1RSxhQUFhaEYsUUFBU3c3QixhQUFhLENBQUNoN0IsRUFBRUEsRUFBRWc3QixlQUFlLElBQUk5NUIsRUFBRWhCLEVBQUVpUyxZQUFZelIsT0FBT2EsRUFBRVosS0FBSzRrQixJQUFJdGtCLEVBQUUyNUIsTUFBTTE1QixHQUFHRCxPQUFFLElBQVNBLEVBQUU0NUIsSUFBSXQ1QixFQUFFWixLQUFLNGtCLElBQUl0a0IsRUFBRTQ1QixJQUFJMzVCLElBQUlsQixFQUFFaTdCLFFBQVExNUIsRUFBRU4sSUFBSUMsRUFBRUQsRUFBRUEsRUFBRU0sRUFBRUEsRUFBRUwsR0FBR0EsRUFBRTY0QixHQUFHNzVCLEVBQUVxQixHQUFHLElBQUlkLEVBQUVzNUIsR0FBRzc1QixFQUN2ZmUsR0FBR0MsR0FBR1QsSUFBSSxJQUFJVCxFQUFFazdCLFlBQVlsN0IsRUFBRW03QixhQUFhajZCLEVBQUU4NEIsTUFBTWg2QixFQUFFbzdCLGVBQWVsNkIsRUFBRSs0QixRQUFRajZCLEVBQUVxN0IsWUFBWTU2QixFQUFFdTVCLE1BQU1oNkIsRUFBRXM3QixjQUFjNzZCLEVBQUV3NUIsV0FBVWg2QixFQUFFQSxFQUFFczdCLGVBQWdCQyxTQUFTdDZCLEVBQUU4NEIsS0FBSzk0QixFQUFFKzRCLFFBQVFqNkIsRUFBRXk3QixrQkFBa0JsNkIsRUFBRU4sR0FBR2pCLEVBQUUwN0IsU0FBU3o3QixHQUFHRCxFQUFFaTdCLE9BQU94NkIsRUFBRXU1QixLQUFLdjVCLEVBQUV3NUIsVUFBVWg2QixFQUFFMDdCLE9BQU9sN0IsRUFBRXU1QixLQUFLdjVCLEVBQUV3NUIsUUFBUWo2QixFQUFFMDdCLFNBQVN6N0IsSUFBSSxDQUFNLElBQUxBLEVBQUUsR0FBT0QsRUFBRUUsRUFBRUYsRUFBRUEsRUFBRXFLLFlBQVksSUFBSXJLLEVBQUVpUyxVQUFVaFMsRUFBRXdILEtBQUssQ0FBQ20wQixRQUFRNTdCLEVBQUV5akIsS0FBS3pqQixFQUFFNjdCLFdBQVd0b0IsSUFBSXZULEVBQUU4N0IsWUFBbUQsSUFBdkMsbUJBQW9CNTdCLEVBQUU2N0IsT0FBTzc3QixFQUFFNjdCLFFBQVk3N0IsRUFBRSxFQUFFQSxFQUFFRCxFQUFFUyxPQUFPUixLQUFJRixFQUFFQyxFQUFFQyxJQUFLMDdCLFFBQVFDLFdBQVc3N0IsRUFBRXlqQixLQUFLempCLEVBQUU0N0IsUUFBUUUsVUFBVTk3QixFQUFFdVQsR0FBRyxDQUFDLENBQ3pmLElBQUl5b0IsR0FBR3A2QixHQUFJLGlCQUFpQjhFLFVBQVUsSUFBSUEsU0FBU3lZLGFBQWE4YyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQzNGLFNBQVNDLEdBQUdyOEIsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZSxFQUFFZixFQUFFVixTQUFTVSxFQUFFQSxFQUFFd0csU0FBUyxJQUFJeEcsRUFBRStSLFNBQVMvUixFQUFFQSxFQUFFcUUsY0FBYzYzQixJQUFJLE1BQU1ILElBQUlBLEtBQUs1ekIsRUFBR3BILEtBQXNDQSxFQUE1QixtQkFBTEEsRUFBRWc3QixLQUF5QjFCLEdBQUd0NUIsR0FBSyxDQUFDMjVCLE1BQU0zNUIsRUFBRTY1QixlQUFlRCxJQUFJNTVCLEVBQUU4NUIsY0FBeUYsQ0FBQ0ksWUFBM0VsNkIsR0FBR0EsRUFBRXNELGVBQWV0RCxFQUFFc0QsY0FBY0MsYUFBYWhGLFFBQVF3N0IsZ0JBQStCRyxXQUFXQyxhQUFhbjZCLEVBQUVtNkIsYUFBYUMsVUFBVXA2QixFQUFFbzZCLFVBQVVDLFlBQVlyNkIsRUFBRXE2QixhQUFjYSxJQUFJdEMsR0FBR3NDLEdBQUdsN0IsS0FBS2s3QixHQUFHbDdCLEVBQXNCLEdBQXBCQSxFQUFFeWhCLEdBQUd3WixHQUFHLGFBQWdCeDdCLFNBQVNULEVBQUUsSUFBSStaLEdBQUcsV0FBVyxTQUFTLEtBQUsvWixFQUFFQyxHQUFHRixFQUFFeUgsS0FBSyxDQUFDZ1IsTUFBTXhZLEVBQUV1NUIsVUFBVXY0QixJQUFJaEIsRUFBRTJoQixPQUFPcWEsS0FBSyxDQUN0ZixTQUFTSyxHQUFHdDhCLEVBQUVDLEdBQUcsSUFBSUMsRUFBRSxDQUFDLEVBQWlGLE9BQS9FQSxFQUFFRixFQUFFb1QsZUFBZW5ULEVBQUVtVCxjQUFjbFQsRUFBRSxTQUFTRixHQUFHLFNBQVNDLEVBQUVDLEVBQUUsTUFBTUYsR0FBRyxNQUFNQyxFQUFTQyxDQUFDLENBQUMsSUFBSXE4QixHQUFHLENBQUNDLGFBQWFGLEdBQUcsWUFBWSxnQkFBZ0JHLG1CQUFtQkgsR0FBRyxZQUFZLHNCQUFzQkksZUFBZUosR0FBRyxZQUFZLGtCQUFrQkssY0FBY0wsR0FBRyxhQUFhLGtCQUFrQk0sR0FBRyxDQUFDLEVBQUVDLEdBQUcsQ0FBQyxFQUNwRixTQUFTQyxHQUFHOThCLEdBQUcsR0FBRzQ4QixHQUFHNThCLEdBQUcsT0FBTzQ4QixHQUFHNThCLEdBQUcsSUFBSXU4QixHQUFHdjhCLEdBQUcsT0FBT0EsRUFBRSxJQUFZRSxFQUFSRCxFQUFFczhCLEdBQUd2OEIsR0FBSyxJQUFJRSxLQUFLRCxFQUFFLEdBQUdBLEVBQUVtSSxlQUFlbEksSUFBSUEsS0FBSzI4QixHQUFHLE9BQU9ELEdBQUc1OEIsR0FBR0MsRUFBRUMsR0FBRyxPQUFPRixDQUFDLENBQS9YNEIsSUFBS2k3QixHQUFHbjJCLFNBQVNDLGNBQWMsT0FBTzhULE1BQU0sbUJBQW1CamIsZ0JBQWdCKzhCLEdBQUdDLGFBQWFPLGlCQUFpQlIsR0FBR0UsbUJBQW1CTSxpQkFBaUJSLEdBQUdHLGVBQWVLLFdBQVcsb0JBQW9CdjlCLGVBQWUrOEIsR0FBR0ksY0FBYy9JLFlBQXdKLElBQUlvSixHQUFHRixHQUFHLGdCQUFnQkcsR0FBR0gsR0FBRyxzQkFBc0JJLEdBQUdKLEdBQUcsa0JBQWtCSyxHQUFHTCxHQUFHLGlCQUFpQk0sR0FBRyxJQUFJckssSUFBSXNLLEdBQUcsc21CQUFzbUJyOEIsTUFBTSxLQUMvbEMsU0FBU3M4QixHQUFHdDlCLEVBQUVDLEdBQUdtOUIsR0FBR2hTLElBQUlwckIsRUFBRUMsR0FBR2MsRUFBR2QsRUFBRSxDQUFDRCxHQUFHLENBQUMsSUFBSSxJQUFJdTlCLEdBQUcsRUFBRUEsR0FBR0YsR0FBRzM4QixPQUFPNjhCLEtBQUssQ0FBQyxJQUFJQyxHQUFHSCxHQUFHRSxJQUEyREQsR0FBcERFLEdBQUdwcUIsY0FBdUQsTUFBdENvcUIsR0FBRyxHQUFHajBCLGNBQWNpMEIsR0FBRzk2QixNQUFNLElBQWlCLENBQUM0NkIsR0FBR04sR0FBRyxrQkFBa0JNLEdBQUdMLEdBQUcsd0JBQXdCSyxHQUFHSixHQUFHLG9CQUFvQkksR0FBRyxXQUFXLGlCQUFpQkEsR0FBRyxVQUFVLFdBQVdBLEdBQUcsV0FBVyxVQUFVQSxHQUFHSCxHQUFHLG1CQUFtQjk3QixFQUFHLGVBQWUsQ0FBQyxXQUFXLGNBQWNBLEVBQUcsZUFBZSxDQUFDLFdBQVcsY0FBY0EsRUFBRyxpQkFBaUIsQ0FBQyxhQUFhLGdCQUM3Y0EsRUFBRyxpQkFBaUIsQ0FBQyxhQUFhLGdCQUFnQk4sRUFBRyxXQUFXLG9FQUFvRUMsTUFBTSxNQUFNRCxFQUFHLFdBQVcsdUZBQXVGQyxNQUFNLE1BQU1ELEVBQUcsZ0JBQWdCLENBQUMsaUJBQWlCLFdBQVcsWUFBWSxVQUFVQSxFQUFHLG1CQUFtQiwyREFBMkRDLE1BQU0sTUFBTUQsRUFBRyxxQkFBcUIsNkRBQTZEQyxNQUFNLE1BQy9mRCxFQUFHLHNCQUFzQiw4REFBOERDLE1BQU0sTUFBTSxJQUFJeThCLEdBQUcsNk5BQTZOejhCLE1BQU0sS0FBSzA4QixHQUFHLElBQUl0VCxJQUFJLDBDQUEwQ3BwQixNQUFNLEtBQUt3TCxPQUFPaXhCLEtBQ3paLFNBQVNFLEdBQUczOUIsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZSxFQUFFakIsRUFBRStkLE1BQU0sZ0JBQWdCL2QsRUFBRWswQixjQUFjaDBCLEVBbERqRSxTQUFZRixFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxFQUFFSyxFQUFFZCxFQUFFeUMsRUFBRXVNLEdBQTRCLEdBQXpCdEIsR0FBRzdMLE1BQU14QixLQUFLMEIsV0FBY3FMLEdBQUcsQ0FBQyxJQUFHQSxHQUFnQyxNQUFNak4sTUFBTXVQLEVBQUUsTUFBMUMsSUFBSVAsRUFBRTlCLEdBQUdELElBQUcsRUFBR0MsR0FBRyxLQUE4QkMsS0FBS0EsSUFBRyxFQUFHRSxHQUFHMkIsRUFBRSxDQUFDLENBa0RwRXBCLENBQUd2TixFQUFFaEIsT0FBRSxFQUFPRCxHQUFHQSxFQUFFazBCLGNBQWMsSUFBSSxDQUN4RyxTQUFTL1gsR0FBR25jLEVBQUVDLEdBQUdBLEVBQUUsSUFBTyxFQUFGQSxHQUFLLElBQUksSUFBSUMsRUFBRSxFQUFFQSxFQUFFRixFQUFFVSxPQUFPUixJQUFJLENBQUMsSUFBSWUsRUFBRWpCLEVBQUVFLEdBQUdnQixFQUFFRCxFQUFFd1gsTUFBTXhYLEVBQUVBLEVBQUV1NEIsVUFBVXg1QixFQUFFLENBQUMsSUFBSXVCLE9BQUUsRUFBTyxHQUFHdEIsRUFBRSxJQUFJLElBQUlRLEVBQUVRLEVBQUVQLE9BQU8sRUFBRSxHQUFHRCxFQUFFQSxJQUFJLENBQUMsSUFBSXlDLEVBQUVqQyxFQUFFUixHQUFHZ1AsRUFBRXZNLEVBQUUwNkIsU0FBU2h1QixFQUFFMU0sRUFBRWd4QixjQUEyQixHQUFiaHhCLEVBQUVBLEVBQUUyNkIsU0FBWXB1QixJQUFJbE8sR0FBR0wsRUFBRW96Qix1QkFBdUIsTUFBTXQwQixFQUFFMjlCLEdBQUd6OEIsRUFBRWdDLEVBQUUwTSxHQUFHck8sRUFBRWtPLENBQUMsTUFBTSxJQUFJaFAsRUFBRSxFQUFFQSxFQUFFUSxFQUFFUCxPQUFPRCxJQUFJLENBQW9ELEdBQTVDZ1AsR0FBUHZNLEVBQUVqQyxFQUFFUixJQUFPbTlCLFNBQVNodUIsRUFBRTFNLEVBQUVneEIsY0FBY2h4QixFQUFFQSxFQUFFMjZCLFNBQVlwdUIsSUFBSWxPLEdBQUdMLEVBQUVvekIsdUJBQXVCLE1BQU10MEIsRUFBRTI5QixHQUFHejhCLEVBQUVnQyxFQUFFME0sR0FBR3JPLEVBQUVrTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcxQixHQUFHLE1BQU0vTixFQUFFaU8sR0FBR0YsSUFBRyxFQUFHRSxHQUFHLEtBQUtqTyxDQUFFLENBQzVhLFNBQVN1SSxHQUFFdkksRUFBRUMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFNjlCLFNBQUksSUFBUzU5QixJQUFJQSxFQUFFRCxFQUFFNjlCLElBQUksSUFBSTFULEtBQUssSUFBSW5wQixFQUFFakIsRUFBRSxXQUFXRSxFQUFFNjlCLElBQUk5OEIsS0FBSys4QixHQUFHLzlCLEVBQUVELEVBQUUsR0FBRSxHQUFJRSxFQUFFbXFCLElBQUlwcEIsR0FBRyxDQUFDLFNBQVNnOUIsR0FBR2orQixFQUFFQyxFQUFFQyxHQUFHLElBQUllLEVBQUUsRUFBRWhCLElBQUlnQixHQUFHLEdBQUcrOEIsR0FBRzk5QixFQUFFRixFQUFFaUIsRUFBRWhCLEVBQUUsQ0FBQyxJQUFJaStCLEdBQUcsa0JBQWtCdjlCLEtBQUsyWSxTQUFTN1gsU0FBUyxJQUFJaUIsTUFBTSxHQUFHLFNBQVN5N0IsR0FBR24rQixHQUFHLElBQUlBLEVBQUVrK0IsSUFBSSxDQUFDbCtCLEVBQUVrK0IsS0FBSSxFQUFHNTlCLEVBQUd1cUIsU0FBUSxTQUFTNXFCLEdBQUcsb0JBQW9CQSxJQUFJeTlCLEdBQUdLLElBQUk5OUIsSUFBSWcrQixHQUFHaCtCLEdBQUUsRUFBR0QsR0FBR2krQixHQUFHaCtCLEdBQUUsRUFBR0QsR0FBRyxJQUFHLElBQUlDLEVBQUUsSUFBSUQsRUFBRWlTLFNBQVNqUyxFQUFFQSxFQUFFdUUsY0FBYyxPQUFPdEUsR0FBR0EsRUFBRWkrQixNQUFNaitCLEVBQUVpK0IsS0FBSSxFQUFHRCxHQUFHLG1CQUFrQixFQUFHaCtCLEdBQUcsQ0FBQyxDQUNqYixTQUFTKzlCLEdBQUdoK0IsRUFBRUMsRUFBRUMsRUFBRWUsR0FBRyxPQUFPbVgsR0FBR25ZLElBQUksS0FBSyxFQUFFLElBQUlpQixFQUFFMlcsR0FBRyxNQUFNLEtBQUssRUFBRTNXLEVBQUU4VyxHQUFHLE1BQU0sUUFBUTlXLEVBQUU2VyxHQUFHN1gsRUFBRWdCLEVBQUVxQixLQUFLLEtBQUt0QyxFQUFFQyxFQUFFRixHQUFHa0IsT0FBRSxHQUFRbU0sSUFBSSxlQUFlcE4sR0FBRyxjQUFjQSxHQUFHLFVBQVVBLElBQUlpQixHQUFFLEdBQUlELE9BQUUsSUFBU0MsRUFBRWxCLEVBQUUrSyxpQkFBaUI5SyxFQUFFQyxFQUFFLENBQUNrK0IsU0FBUSxFQUFHQyxRQUFRbjlCLElBQUlsQixFQUFFK0ssaUJBQWlCOUssRUFBRUMsR0FBRSxRQUFJLElBQVNnQixFQUFFbEIsRUFBRStLLGlCQUFpQjlLLEVBQUVDLEVBQUUsQ0FBQ20rQixRQUFRbjlCLElBQUlsQixFQUFFK0ssaUJBQWlCOUssRUFBRUMsR0FBRSxFQUFHLENBQ2xWLFNBQVNnWSxHQUFHbFksRUFBRUMsRUFBRUMsRUFBRWUsRUFBRUMsR0FBRyxJQUFJSyxFQUFFTixFQUFFLEdBQUcsSUFBTyxFQUFGaEIsSUFBTSxJQUFPLEVBQUZBLElBQU0sT0FBT2dCLEVBQUVqQixFQUFFLE9BQU8sQ0FBQyxHQUFHLE9BQU9pQixFQUFFLE9BQU8sSUFBSVIsRUFBRVEsRUFBRXVxQixJQUFJLEdBQUcsSUFBSS9xQixHQUFHLElBQUlBLEVBQUUsQ0FBQyxJQUFJeUMsRUFBRWpDLEVBQUVnd0IsVUFBVXdDLGNBQWMsR0FBR3Z3QixJQUFJaEMsR0FBRyxJQUFJZ0MsRUFBRStPLFVBQVUvTyxFQUFFbUgsYUFBYW5KLEVBQUUsTUFBTSxHQUFHLElBQUlULEVBQUUsSUFBSUEsRUFBRVEsRUFBRW93QixPQUFPLE9BQU81d0IsR0FBRyxDQUFDLElBQUlnUCxFQUFFaFAsRUFBRStxQixJQUFJLElBQUcsSUFBSS9iLEdBQUcsSUFBSUEsTUFBS0EsRUFBRWhQLEVBQUV3d0IsVUFBVXdDLGlCQUFrQnZ5QixHQUFHLElBQUl1TyxFQUFFd0MsVUFBVXhDLEVBQUVwRixhQUFhbkosR0FBRSxPQUFPVCxFQUFFQSxFQUFFNHdCLE1BQU0sQ0FBQyxLQUFLLE9BQU9udUIsR0FBRyxDQUFTLEdBQUcsUUFBWHpDLEVBQUUrVixHQUFHdFQsSUFBZSxPQUFlLEdBQUcsS0FBWHVNLEVBQUVoUCxFQUFFK3FCLE1BQWMsSUFBSS9iLEVBQUUsQ0FBQ3hPLEVBQUVNLEVBQUVkLEVBQUUsU0FBU1QsQ0FBQyxDQUFDa0QsRUFBRUEsRUFBRW1ILFVBQVUsQ0FBQyxDQUFDcEosRUFBRUEsRUFBRW93QixNQUFNLENBQUNsa0IsSUFBRyxXQUFXLElBQUlsTSxFQUFFTSxFQUFFTCxFQUFFOEssR0FBRzlMLEdBQUdPLEVBQUUsR0FDcGZULEVBQUUsQ0FBQyxJQUFJa0QsRUFBRWs2QixHQUFHdlIsSUFBSTdyQixHQUFHLFFBQUcsSUFBU2tELEVBQUUsQ0FBQyxJQUFJdU0sRUFBRXVLLEdBQUduSyxFQUFFN1AsRUFBRSxPQUFPQSxHQUFHLElBQUssV0FBVyxHQUFHLElBQUk4WSxHQUFHNVksR0FBRyxNQUFNRixFQUFFLElBQUssVUFBVSxJQUFLLFFBQVF5UCxFQUFFb08sR0FBRyxNQUFNLElBQUssVUFBVWhPLEVBQUUsUUFBUUosRUFBRXVNLEdBQUcsTUFBTSxJQUFLLFdBQVduTSxFQUFFLE9BQU9KLEVBQUV1TSxHQUFHLE1BQU0sSUFBSyxhQUFhLElBQUssWUFBWXZNLEVBQUV1TSxHQUFHLE1BQU0sSUFBSyxRQUFRLEdBQUcsSUFBSTliLEVBQUVpTCxPQUFPLE1BQU1uTCxFQUFFLElBQUssV0FBVyxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssWUFBWSxJQUFLLFVBQVUsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLGNBQWN5UCxFQUFFNkwsR0FBRyxNQUFNLElBQUssT0FBTyxJQUFLLFVBQVUsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLE9BQU83TCxFQUMxaUJxTSxHQUFHLE1BQU0sSUFBSyxjQUFjLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxhQUFhck0sRUFBRWdQLEdBQUcsTUFBTSxLQUFLdWUsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUd6dEIsRUFBRXlNLEdBQUcsTUFBTSxLQUFLaWhCLEdBQUcxdEIsRUFBRWtQLEdBQUcsTUFBTSxJQUFLLFNBQVNsUCxFQUFFeUssR0FBRyxNQUFNLElBQUssUUFBUXpLLEVBQUV3UCxHQUFHLE1BQU0sSUFBSyxPQUFPLElBQUssTUFBTSxJQUFLLFFBQVF4UCxFQUFFNk0sR0FBRyxNQUFNLElBQUssb0JBQW9CLElBQUsscUJBQXFCLElBQUssZ0JBQWdCLElBQUssY0FBYyxJQUFLLGNBQWMsSUFBSyxhQUFhLElBQUssY0FBYyxJQUFLLFlBQVk3TSxFQUFFNk8sR0FBRyxJQUFJeFosRUFBRSxJQUFPLEVBQUY3RSxHQUFLa0YsR0FBR0wsR0FBRyxXQUFXOUUsRUFBRWdILEVBQUVsQyxFQUFFLE9BQU81QixFQUFFQSxFQUFFLFVBQVUsS0FBS0EsRUFBRTRCLEVBQUUsR0FBRyxJQUFJLElBQVEySCxFQUFKNUcsRUFBRTVFLEVBQUksT0FDL2U0RSxHQUFHLENBQUssSUFBSThDLEdBQVI4RCxFQUFFNUcsR0FBVW9yQixVQUFzRixHQUE1RSxJQUFJeGtCLEVBQUUrZSxLQUFLLE9BQU83aUIsSUFBSThELEVBQUU5RCxFQUFFLE9BQU8zQixHQUFjLE9BQVYyQixFQUFFb0UsR0FBR2xILEVBQUVtQixLQUFZbEMsRUFBRTJDLEtBQUs2MkIsR0FBR3o0QixFQUFFOEMsRUFBRThELEtBQVN0SCxFQUFFLE1BQU1VLEVBQUVBLEVBQUV3ckIsTUFBTSxDQUFDLEVBQUV2c0IsRUFBRXBFLFNBQVN3QyxFQUFFLElBQUl1TSxFQUFFdk0sRUFBRTJNLEVBQUUsS0FBSzNQLEVBQUVnQixHQUFHVCxFQUFFZ0gsS0FBSyxDQUFDZ1IsTUFBTXZWLEVBQUVzMkIsVUFBVTEwQixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQU8sRUFBRjdFLEdBQUssQ0FBNEUsR0FBbkN3UCxFQUFFLGFBQWF6UCxHQUFHLGVBQWVBLEtBQXRFa0QsRUFBRSxjQUFjbEQsR0FBRyxnQkFBZ0JBLElBQTJDRSxJQUFJNkwsTUFBSzhELEVBQUUzUCxFQUFFeTFCLGVBQWV6MUIsRUFBRTAxQixlQUFlcGYsR0FBRzNHLEtBQUlBLEVBQUUwdUIsT0FBZ0I5dUIsR0FBR3ZNLEtBQUdBLEVBQUVoQyxFQUFFMUIsU0FBUzBCLEVBQUVBLEdBQUdnQyxFQUFFaEMsRUFBRXFELGVBQWVyQixFQUFFc0IsYUFBYXRCLEVBQUV1QixhQUFhakYsT0FBVWlRLEdBQXFDQSxFQUFFeE8sRUFBaUIsUUFBZjRPLEdBQW5DQSxFQUFFM1AsRUFBRXkxQixlQUFlejFCLEVBQUUyMUIsV0FBa0JyZixHQUFHM0csR0FBRyxRQUM5ZEEsS0FBUjFLLEVBQUV3SixHQUFHa0IsS0FBVSxJQUFJQSxFQUFFMmIsS0FBSyxJQUFJM2IsRUFBRTJiLE9BQUszYixFQUFFLFFBQVVKLEVBQUUsS0FBS0ksRUFBRTVPLEdBQUt3TyxJQUFJSSxHQUFFLENBQWdVLEdBQS9UL0ssRUFBRXdXLEdBQUczUyxFQUFFLGVBQWUzQixFQUFFLGVBQWVuQixFQUFFLFFBQVcsZUFBZTdGLEdBQUcsZ0JBQWdCQSxJQUFFOEUsRUFBRXdaLEdBQUczVixFQUFFLGlCQUFpQjNCLEVBQUUsaUJBQWlCbkIsRUFBRSxXQUFVVixFQUFFLE1BQU1zSyxFQUFFdk0sRUFBRXdoQixHQUFHalYsR0FBR2hELEVBQUUsTUFBTW9ELEVBQUUzTSxFQUFFd2hCLEdBQUc3VSxJQUFHM00sRUFBRSxJQUFJNEIsRUFBRTZELEVBQUU5QyxFQUFFLFFBQVE0SixFQUFFdlAsRUFBRWdCLElBQUswZ0IsT0FBT3pjLEVBQUVqQyxFQUFFeXlCLGNBQWNscEIsRUFBRTlELEVBQUUsS0FBSzZOLEdBQUd0VixLQUFLRCxLQUFJNkQsRUFBRSxJQUFJQSxFQUFFa0MsRUFBRW5CLEVBQUUsUUFBUWdLLEVBQUUzUCxFQUFFZ0IsSUFBSzBnQixPQUFPblYsRUFBRTNILEVBQUU2d0IsY0FBY3h3QixFQUFFd0QsRUFBRTdELEdBQUdLLEVBQUV3RCxFQUFLOEcsR0FBR0ksRUFBRTVQLEVBQUUsQ0FBYSxJQUFSK0csRUFBRTZJLEVBQUVoSyxFQUFFLEVBQU00RyxFQUFoQjNILEVBQUUySyxFQUFrQmhELEVBQUVBLEVBQUUreEIsR0FBRy94QixHQUFHNUcsSUFBUSxJQUFKNEcsRUFBRSxFQUFNOUQsRUFBRTNCLEVBQUUyQixFQUFFQSxFQUFFNjFCLEdBQUc3MUIsR0FBRzhELElBQUksS0FBSyxFQUFFNUcsRUFBRTRHLEdBQUczSCxFQUFFMDVCLEdBQUcxNUIsR0FBR2UsSUFBSSxLQUFLLEVBQUU0RyxFQUFFNUcsR0FBR21CLEVBQ3BmdzNCLEdBQUd4M0IsR0FBR3lGLElBQUksS0FBSzVHLEtBQUssQ0FBQyxHQUFHZixJQUFJa0MsR0FBRyxPQUFPQSxHQUFHbEMsSUFBSWtDLEVBQUVvcUIsVUFBVSxNQUFNbnhCLEVBQUU2RSxFQUFFMDVCLEdBQUcxNUIsR0FBR2tDLEVBQUV3M0IsR0FBR3gzQixFQUFFLENBQUNsQyxFQUFFLElBQUksTUFBTUEsRUFBRSxLQUFLLE9BQU8ySyxHQUFHZ3ZCLEdBQUdoK0IsRUFBRXlDLEVBQUV1TSxFQUFFM0ssR0FBRSxHQUFJLE9BQU8rSyxHQUFHLE9BQU8xSyxHQUFHczVCLEdBQUdoK0IsRUFBRTBFLEVBQUUwSyxFQUFFL0ssR0FBRSxFQUFHLENBQThELEdBQUcsWUFBMUMySyxHQUFqQnZNLEVBQUVqQyxFQUFFeWpCLEdBQUd6akIsR0FBR3pCLFFBQVdpZSxVQUFVdmEsRUFBRXVhLFNBQVNySyxnQkFBK0IsVUFBVTNELEdBQUcsU0FBU3ZNLEVBQUU2YSxLQUFLLElBQUluYixFQUFHK2hCLFFBQVEsR0FBR3BDLEdBQUdyZixHQUFHLEdBQUcwaEIsR0FBR2hpQixFQUFHKzJCLE9BQU8sQ0FBQy8yQixFQUFHNGlCLEdBQUcsSUFBSWxoQixFQUFHK2dCLEVBQUUsTUFBTTVWLEVBQUV2TSxFQUFFdWEsV0FBVyxVQUFVaE8sRUFBRTJELGdCQUFnQixhQUFhbFEsRUFBRTZhLE1BQU0sVUFBVTdhLEVBQUU2YSxRQUFRbmIsRUFBRzZpQixJQUNyVixPQUQ0VjdpQixJQUFLQSxFQUFHQSxFQUFHNUMsRUFBRWlCLElBQUt1aEIsR0FBRy9oQixFQUFFbUMsRUFBRzFDLEVBQUVnQixJQUFXb0QsR0FBSUEsRUFBR3RFLEVBQUVrRCxFQUFFakMsR0FBRyxhQUFhakIsSUFBSXNFLEVBQUdwQixFQUFFb3BCLGdCQUNsZmhvQixFQUFHbW9CLFlBQVksV0FBV3ZwQixFQUFFNmEsTUFBTTNVLEdBQUdsRyxFQUFFLFNBQVNBLEVBQUU3QyxRQUFPaUUsRUFBR3JELEVBQUV5akIsR0FBR3pqQixHQUFHekIsT0FBY1EsR0FBRyxJQUFLLFdBQWF1aUIsR0FBR2plLElBQUssU0FBU0EsRUFBR2syQixtQkFBZ0J5QixHQUFHMzNCLEVBQUc0M0IsR0FBR2o3QixFQUFFazdCLEdBQUcsTUFBSyxNQUFNLElBQUssV0FBV0EsR0FBR0QsR0FBR0QsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZRyxJQUFHLEVBQUcsTUFBTSxJQUFLLGNBQWMsSUFBSyxVQUFVLElBQUssVUFBVUEsSUFBRyxFQUFHQyxHQUFHNTdCLEVBQUVQLEVBQUVnQixHQUFHLE1BQU0sSUFBSyxrQkFBa0IsR0FBRzg2QixHQUFHLE1BQU0sSUFBSyxVQUFVLElBQUssUUFBUUssR0FBRzU3QixFQUFFUCxFQUFFZ0IsR0FBRyxJQUFJK0gsRUFBRyxHQUFHdVcsR0FBR3ZmLEVBQUUsQ0FBQyxPQUFPRCxHQUFHLElBQUssbUJBQW1CLElBQUl3QixFQUFHLHFCQUFxQixNQUFNdkIsRUFBRSxJQUFLLGlCQUFpQnVCLEVBQUcsbUJBQ3BlLE1BQU12QixFQUFFLElBQUssb0JBQW9CdUIsRUFBRyxzQkFBc0IsTUFBTXZCLEVBQUV1QixPQUFHLENBQU0sTUFBTXdnQixHQUFHaEMsR0FBR2hnQixFQUFFRSxLQUFLc0IsRUFBRyxvQkFBb0IsWUFBWXhCLEdBQUcsTUFBTUUsRUFBRTR6QixVQUFVdHlCLEVBQUcsc0JBQXNCQSxJQUFLbWUsSUFBSSxPQUFPemYsRUFBRXMzQixTQUFTeFYsSUFBSSx1QkFBdUJ4Z0IsRUFBRyxxQkFBcUJBLEdBQUl3Z0IsS0FBSy9ZLEVBQUd1UCxPQUFZRixHQUFHLFVBQVJELEdBQUduWCxHQUFrQm1YLEdBQUdoWSxNQUFNZ1ksR0FBR2xHLFlBQVk2UCxJQUFHLElBQWlCLEdBQVoxZCxFQUFHb2UsR0FBR3poQixFQUFFTyxJQUFTZCxTQUFTYyxFQUFHLElBQUlnYixHQUFHaGIsRUFBR3hCLEVBQUUsS0FBS0UsRUFBRWdCLEdBQUdULEVBQUVnSCxLQUFLLENBQUNnUixNQUFNalgsRUFBR2c0QixVQUFVbDFCLEtBQUsyRSxHQUF3QixRQUFUQSxFQUFHaVgsR0FBR2hnQixPQUFsQnNCLEVBQUdpaEIsS0FBS3haLE1BQTJDQSxFQUFHeVcsR0E1QmhNLFNBQVkxZixFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxpQkFBaUIsT0FBT2tnQixHQUFHamdCLEdBQUcsSUFBSyxXQUFXLE9BQUcsS0FBS0EsRUFBRXczQixNQUFhLE1BQUsxWCxJQUFHLEVBQVVELElBQUcsSUFBSyxZQUFZLE9BQU85ZixFQUFFQyxFQUFFd2lCLFFBQVMzQyxJQUFJQyxHQUFHLEtBQUsvZixFQUFFLFFBQVEsT0FBTyxLQUFLLENBNEJFaWlCLENBQUdqaUIsRUFBRUUsR0EzQnpkLFNBQVlGLEVBQUVDLEdBQUcsR0FBRytoQixHQUFHLE1BQU0sbUJBQW1CaGlCLElBQUl3ZixJQUFJUSxHQUFHaGdCLEVBQUVDLElBQUlELEVBQUV3WSxLQUFLRCxHQUFHRCxHQUFHRCxHQUFHLEtBQUsySixJQUFHLEVBQUdoaUIsR0FBRyxLQUFLLE9BQU9BLEdBQUcsSUFBSyxRQUFnUSxRQUFRLE9BQU8sS0FBM1AsSUFBSyxXQUFXLEtBQUtDLEVBQUVvMUIsU0FBU3AxQixFQUFFczFCLFFBQVF0MUIsRUFBRXUxQixVQUFVdjFCLEVBQUVvMUIsU0FBU3AxQixFQUFFczFCLE9BQU8sQ0FBQyxHQUFHdDFCLEVBQUV5K0IsTUFBTSxFQUFFeitCLEVBQUV5K0IsS0FBS2grQixPQUFPLE9BQU9ULEVBQUV5K0IsS0FBSyxHQUFHeitCLEVBQUV3M0IsTUFBTSxPQUFPejFCLE9BQU9xMUIsYUFBYXAzQixFQUFFdzNCLE1BQU0sQ0FBQyxPQUFPLEtBQUssSUFBSyxpQkFBaUIsT0FBTzlYLElBQUksT0FBTzFmLEVBQUV1M0IsT0FBTyxLQUFLdjNCLEVBQUV3aUIsS0FBeUIsQ0EyQnFGSixDQUFHcmlCLEVBQUVFLEtBQ2plLEdBRG9lZSxFQUFFeWhCLEdBQUd6aEIsRUFBRSxrQkFDdmVQLFNBQVNRLEVBQUUsSUFBSXNiLEdBQUcsZ0JBQWdCLGNBQWMsS0FBS3RjLEVBQUVnQixHQUFHVCxFQUFFZ0gsS0FBSyxDQUFDZ1IsTUFBTXZYLEVBQUVzNEIsVUFBVXY0QixJQUFJQyxFQUFFdWhCLEtBQUt4WixFQUFHLENBQUNrVCxHQUFHMWIsRUFBRVIsRUFBRSxHQUFFLENBQUMsU0FBU3ErQixHQUFHdCtCLEVBQUVDLEVBQUVDLEdBQUcsTUFBTSxDQUFDMDlCLFNBQVM1OUIsRUFBRTY5QixTQUFTNTlCLEVBQUVpMEIsY0FBY2gwQixFQUFFLENBQUMsU0FBU3dpQixHQUFHMWlCLEVBQUVDLEdBQUcsSUFBSSxJQUFJQyxFQUFFRCxFQUFFLFVBQVVnQixFQUFFLEdBQUcsT0FBT2pCLEdBQUcsQ0FBQyxJQUFJa0IsRUFBRWxCLEVBQUV1QixFQUFFTCxFQUFFK3ZCLFVBQVUsSUFBSS92QixFQUFFc3FCLEtBQUssT0FBT2pxQixJQUFJTCxFQUFFSyxFQUFZLE9BQVZBLEVBQUV3TCxHQUFHL00sRUFBRUUsS0FBWWUsRUFBRTBCLFFBQVEyN0IsR0FBR3QrQixFQUFFdUIsRUFBRUwsSUFBYyxPQUFWSyxFQUFFd0wsR0FBRy9NLEVBQUVDLEtBQVlnQixFQUFFd0csS0FBSzYyQixHQUFHdCtCLEVBQUV1QixFQUFFTCxLQUFLbEIsRUFBRUEsRUFBRXF4QixNQUFNLENBQUMsT0FBT3B3QixDQUFDLENBQUMsU0FBU3U5QixHQUFHeCtCLEdBQUcsR0FBRyxPQUFPQSxFQUFFLE9BQU8sS0FBSyxHQUFHQSxFQUFFQSxFQUFFcXhCLGFBQWFyeEIsR0FBRyxJQUFJQSxFQUFFd3JCLEtBQUssT0FBT3hyQixHQUFJLElBQUksQ0FDbmQsU0FBU3krQixHQUFHeitCLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEdBQUcsSUFBSSxJQUFJSyxFQUFFdEIsRUFBRSt6QixXQUFXdnpCLEVBQUUsR0FBRyxPQUFPUCxHQUFHQSxJQUFJZSxHQUFHLENBQUMsSUFBSWlDLEVBQUVoRCxFQUFFdVAsRUFBRXZNLEVBQUVrdUIsVUFBVXhoQixFQUFFMU0sRUFBRSt0QixVQUFVLEdBQUcsT0FBT3hoQixHQUFHQSxJQUFJeE8sRUFBRSxNQUFNLElBQUlpQyxFQUFFc29CLEtBQUssT0FBTzViLElBQUkxTSxFQUFFME0sRUFBRTFPLEVBQWEsT0FBVnVPLEVBQUUxQyxHQUFHN00sRUFBRXFCLEtBQVlkLEVBQUVrQyxRQUFRMjdCLEdBQUdwK0IsRUFBRXVQLEVBQUV2TSxJQUFLaEMsR0FBYyxPQUFWdU8sRUFBRTFDLEdBQUc3TSxFQUFFcUIsS0FBWWQsRUFBRWdILEtBQUs2MkIsR0FBR3ArQixFQUFFdVAsRUFBRXZNLEtBQU1oRCxFQUFFQSxFQUFFbXhCLE1BQU0sQ0FBQyxJQUFJNXdCLEVBQUVDLFFBQVFWLEVBQUV5SCxLQUFLLENBQUNnUixNQUFNeFksRUFBRXU1QixVQUFVLzRCLEdBQUcsQ0FBQyxJQUFJaytCLEdBQUcsU0FBU0MsR0FBRyxpQkFBaUIsU0FBU0MsR0FBRzcrQixHQUFHLE9BQU8saUJBQWtCQSxFQUFFQSxFQUFFLEdBQUdBLEdBQUdnSSxRQUFRMjJCLEdBQUcsTUFBTTMyQixRQUFRNDJCLEdBQUcsR0FBRyxDQUFDLFNBQVNFLEdBQUc5K0IsRUFBRUMsRUFBRUMsR0FBVyxHQUFSRCxFQUFFNCtCLEdBQUc1K0IsR0FBTTQrQixHQUFHNytCLEtBQUtDLEdBQUdDLEVBQUUsTUFBTVUsTUFBTXVQLEVBQUUsS0FBTSxDQUFDLFNBQVM0dUIsS0FBSyxDQUM5ZSxJQUFJQyxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxHQUFHbC9CLEVBQUVDLEdBQUcsTUFBTSxhQUFhRCxHQUFHLGFBQWFBLEdBQUcsaUJBQWtCQyxFQUFFOHNCLFVBQVUsaUJBQWtCOXNCLEVBQUU4c0IsVUFBVSxpQkFBa0I5c0IsRUFBRTZzQix5QkFBeUIsT0FBTzdzQixFQUFFNnNCLHlCQUF5QixNQUFNN3NCLEVBQUU2c0Isd0JBQXdCcVMsTUFBTSxDQUM1UCxJQUFJQyxHQUFHLG1CQUFvQjMyQixXQUFXQSxnQkFBVyxFQUFPNDJCLEdBQUcsbUJBQW9CanZCLGFBQWFBLGtCQUFhLEVBQU9rdkIsR0FBRyxtQkFBb0JDLFFBQVFBLGFBQVEsRUFBT0MsR0FBRyxtQkFBb0JDLGVBQWVBLG9CQUFlLElBQXFCSCxHQUFHLFNBQVN0L0IsR0FBRyxPQUFPcy9CLEdBQUdJLFFBQVEsTUFBTUMsS0FBSzMvQixHQUFHNC9CLE1BQU1DLEdBQUcsRUFBRVQsR0FBRyxTQUFTUyxHQUFHNy9CLEdBQUd5SSxZQUFXLFdBQVcsTUFBTXpJLENBQUUsR0FBRSxDQUNwVixTQUFTOC9CLEdBQUc5L0IsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFZ0IsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJQyxFQUFFaEIsRUFBRTJpQixZQUE2QixHQUFqQjdpQixFQUFFb0ssWUFBWWxLLEdBQU1nQixHQUFHLElBQUlBLEVBQUUrUSxTQUFTLEdBQVksUUFBVC9SLEVBQUVnQixFQUFFdWhCLE1BQWMsQ0FBQyxHQUFHLElBQUl4aEIsRUFBMEIsT0FBdkJqQixFQUFFb0ssWUFBWWxKLFFBQUc4VixHQUFHL1csR0FBVWdCLEdBQUcsS0FBSyxNQUFNZixHQUFHLE9BQU9BLEdBQUcsT0FBT0EsR0FBR2UsSUFBSWYsRUFBRWdCLENBQUMsT0FBT2hCLEdBQUc4VyxHQUFHL1csRUFBRSxDQUFDLFNBQVM4L0IsR0FBRy8vQixHQUFHLEtBQUssTUFBTUEsRUFBRUEsRUFBRUEsRUFBRTZpQixZQUFZLENBQUMsSUFBSTVpQixFQUFFRCxFQUFFaVMsU0FBUyxHQUFHLElBQUloUyxHQUFHLElBQUlBLEVBQUUsTUFBTSxHQUFHLElBQUlBLEVBQUUsQ0FBVSxHQUFHLE9BQVpBLEVBQUVELEVBQUV5aUIsT0FBaUIsT0FBT3hpQixHQUFHLE9BQU9BLEVBQUUsTUFBTSxHQUFHLE9BQU9BLEVBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPRCxDQUFDLENBQ2pZLFNBQVNnZ0MsR0FBR2hnQyxHQUFHQSxFQUFFQSxFQUFFbWIsZ0JBQWdCLElBQUksSUFBSWxiLEVBQUUsRUFBRUQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRWlTLFNBQVMsQ0FBQyxJQUFJL1IsRUFBRUYsRUFBRXlpQixLQUFLLEdBQUcsTUFBTXZpQixHQUFHLE9BQU9BLEdBQUcsT0FBT0EsRUFBRSxDQUFDLEdBQUcsSUFBSUQsRUFBRSxPQUFPRCxFQUFFQyxHQUFHLEtBQUssT0FBT0MsR0FBR0QsR0FBRyxDQUFDRCxFQUFFQSxFQUFFbWIsZUFBZSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUk4a0IsR0FBR3QvQixLQUFLMlksU0FBUzdYLFNBQVMsSUFBSWlCLE1BQU0sR0FBR3c5QixHQUFHLGdCQUFnQkQsR0FBR0UsR0FBRyxnQkFBZ0JGLEdBQUcxQixHQUFHLG9CQUFvQjBCLEdBQUduQyxHQUFHLGlCQUFpQm1DLEdBQUdHLEdBQUcsb0JBQW9CSCxHQUFHSSxHQUFHLGtCQUFrQkosR0FDbFgsU0FBU3pwQixHQUFHeFcsR0FBRyxJQUFJQyxFQUFFRCxFQUFFa2dDLElBQUksR0FBR2pnQyxFQUFFLE9BQU9BLEVBQUUsSUFBSSxJQUFJQyxFQUFFRixFQUFFcUssV0FBV25LLEdBQUcsQ0FBQyxHQUFHRCxFQUFFQyxFQUFFcStCLEtBQUtyK0IsRUFBRWdnQyxJQUFJLENBQWUsR0FBZGhnQyxFQUFFRCxFQUFFbXhCLFVBQWEsT0FBT254QixFQUFFd3hCLE9BQU8sT0FBT3Z4QixHQUFHLE9BQU9BLEVBQUV1eEIsTUFBTSxJQUFJenhCLEVBQUVnZ0MsR0FBR2hnQyxHQUFHLE9BQU9BLEdBQUcsQ0FBQyxHQUFHRSxFQUFFRixFQUFFa2dDLElBQUksT0FBT2hnQyxFQUFFRixFQUFFZ2dDLEdBQUdoZ0MsRUFBRSxDQUFDLE9BQU9DLENBQUMsQ0FBS0MsR0FBSkYsRUFBRUUsR0FBTW1LLFVBQVUsQ0FBQyxPQUFPLElBQUksQ0FBQyxTQUFTcUMsR0FBRzFNLEdBQWtCLFFBQWZBLEVBQUVBLEVBQUVrZ0MsS0FBS2xnQyxFQUFFdStCLE1BQWMsSUFBSXYrQixFQUFFd3JCLEtBQUssSUFBSXhyQixFQUFFd3JCLEtBQUssS0FBS3hyQixFQUFFd3JCLEtBQUssSUFBSXhyQixFQUFFd3JCLElBQUksS0FBS3hyQixDQUFDLENBQUMsU0FBUzBrQixHQUFHMWtCLEdBQUcsR0FBRyxJQUFJQSxFQUFFd3JCLEtBQUssSUFBSXhyQixFQUFFd3JCLElBQUksT0FBT3hyQixFQUFFaXhCLFVBQVUsTUFBTXJ3QixNQUFNdVAsRUFBRSxJQUFLLENBQUMsU0FBU3hELEdBQUczTSxHQUFHLE9BQU9BLEVBQUVtZ0MsS0FBSyxJQUFJLENBQUMsSUFBSUcsR0FBRyxHQUFHQyxJQUFJLEVBQUUsU0FBU0MsR0FBR3hnQyxHQUFHLE1BQU0sQ0FBQzJ4QixRQUFRM3hCLEVBQUUsQ0FDdmUsU0FBUzBJLEdBQUUxSSxHQUFHLEVBQUV1Z0MsS0FBS3ZnQyxFQUFFMnhCLFFBQVEyTyxHQUFHQyxJQUFJRCxHQUFHQyxJQUFJLEtBQUtBLEtBQUssQ0FBQyxTQUFTaHdCLEdBQUV2USxFQUFFQyxHQUFHc2dDLEtBQUtELEdBQUdDLElBQUl2Z0MsRUFBRTJ4QixRQUFRM3hCLEVBQUUyeEIsUUFBUTF4QixDQUFDLENBQUMsSUFBSXdnQyxHQUFHLENBQUMsRUFBRXI3QixHQUFFbzdCLEdBQUdDLElBQUlDLEdBQUdGLElBQUcsR0FBSUcsR0FBR0YsR0FBRyxTQUFTRyxHQUFHNWdDLEVBQUVDLEdBQUcsSUFBSUMsRUFBRUYsRUFBRStkLEtBQUt3SSxhQUFhLElBQUlybUIsRUFBRSxPQUFPdWdDLEdBQUcsSUFBSXgvQixFQUFFakIsRUFBRWl4QixVQUFVLEdBQUdod0IsR0FBR0EsRUFBRTQvQiw4Q0FBOEM1Z0MsRUFBRSxPQUFPZ0IsRUFBRTYvQiwwQ0FBMEMsSUFBU3YvQixFQUFMTCxFQUFFLENBQUMsRUFBSSxJQUFJSyxLQUFLckIsRUFBRWdCLEVBQUVLLEdBQUd0QixFQUFFc0IsR0FBb0gsT0FBakhOLEtBQUlqQixFQUFFQSxFQUFFaXhCLFdBQVk0UCw0Q0FBNEM1Z0MsRUFBRUQsRUFBRThnQywwQ0FBMEM1L0IsR0FBVUEsQ0FBQyxDQUM5ZCxTQUFTNi9CLEdBQUcvZ0MsR0FBeUIsT0FBTyxNQUEzQkEsRUFBRXFtQixpQkFBNkMsQ0FBQyxTQUFTMmEsS0FBS3Q0QixHQUFFZzRCLElBQUloNEIsR0FBRXRELEdBQUUsQ0FBQyxTQUFTNjdCLEdBQUdqaEMsRUFBRUMsRUFBRUMsR0FBRyxHQUFHa0YsR0FBRXVzQixVQUFVOE8sR0FBRyxNQUFNNy9CLE1BQU11UCxFQUFFLE1BQU1JLEdBQUVuTCxHQUFFbkYsR0FBR3NRLEdBQUVtd0IsR0FBR3hnQyxFQUFFLENBQUMsU0FBU2doQyxHQUFHbGhDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSWUsRUFBRWpCLEVBQUVpeEIsVUFBZ0MsR0FBdEJoeEIsRUFBRUEsRUFBRW9tQixrQkFBcUIsbUJBQW9CcGxCLEVBQUVrZ0MsZ0JBQWdCLE9BQU9qaEMsRUFBd0IsSUFBSSxJQUFJZ0IsS0FBOUJELEVBQUVBLEVBQUVrZ0Msa0JBQWlDLEtBQUtqZ0MsS0FBS2pCLEdBQUcsTUFBTVcsTUFBTXVQLEVBQUUsSUFBSXhJLEVBQUczSCxJQUFJLFVBQVVrQixJQUFJLE9BQU8rQixFQUFFLENBQUMsRUFBRS9DLEVBQUVlLEVBQUUsQ0FDeFgsU0FBU21nQyxHQUFHcGhDLEdBQTJHLE9BQXhHQSxHQUFHQSxFQUFFQSxFQUFFaXhCLFlBQVlqeEIsRUFBRXFoQywyQ0FBMkNaLEdBQUdFLEdBQUd2N0IsR0FBRXVzQixRQUFRcGhCLEdBQUVuTCxHQUFFcEYsR0FBR3VRLEdBQUVtd0IsR0FBR0EsR0FBRy9PLFVBQWUsQ0FBRSxDQUFDLFNBQVMyUCxHQUFHdGhDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSWUsRUFBRWpCLEVBQUVpeEIsVUFBVSxJQUFJaHdCLEVBQUUsTUFBTUwsTUFBTXVQLEVBQUUsTUFBTWpRLEdBQUdGLEVBQUVraEMsR0FBR2xoQyxFQUFFQyxFQUFFMGdDLElBQUkxL0IsRUFBRW9nQywwQ0FBMENyaEMsRUFBRTBJLEdBQUVnNEIsSUFBSWg0QixHQUFFdEQsSUFBR21MLEdBQUVuTCxHQUFFcEYsSUFBSTBJLEdBQUVnNEIsSUFBSW53QixHQUFFbXdCLEdBQUd4Z0MsRUFBRSxDQUFDLElBQUlxaEMsR0FBRyxLQUFLQyxJQUFHLEVBQUdDLElBQUcsRUFBRyxTQUFTQyxHQUFHMWhDLEdBQUcsT0FBT3VoQyxHQUFHQSxHQUFHLENBQUN2aEMsR0FBR3VoQyxHQUFHOTVCLEtBQUt6SCxFQUFFLENBQ2hXLFNBQVMyaEMsS0FBSyxJQUFJRixJQUFJLE9BQU9GLEdBQUcsQ0FBQ0UsSUFBRyxFQUFHLElBQUl6aEMsRUFBRSxFQUFFQyxFQUFFa0ksR0FBRSxJQUFJLElBQUlqSSxFQUFFcWhDLEdBQUcsSUFBSXA1QixHQUFFLEVBQUVuSSxFQUFFRSxFQUFFUSxPQUFPVixJQUFJLENBQUMsSUFBSWlCLEVBQUVmLEVBQUVGLEdBQUcsR0FBR2lCLEVBQUVBLEdBQUUsU0FBVSxPQUFPQSxFQUFFLENBQUNzZ0MsR0FBRyxLQUFLQyxJQUFHLENBQUUsQ0FBQyxNQUFNdGdDLEdBQUcsTUFBTSxPQUFPcWdDLEtBQUtBLEdBQUdBLEdBQUc3K0IsTUFBTTFDLEVBQUUsSUFBSXVQLEdBQUdrQyxHQUFHa3dCLElBQUl6Z0MsQ0FBRSxDQUFDLFFBQVFpSCxHQUFFbEksRUFBRXdoQyxJQUFHLENBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUlHLEdBQUcsR0FBR0MsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxHQUFHQyxHQUFHLEVBQUVDLEdBQUcsS0FBS0MsR0FBRyxFQUFFQyxHQUFHLEdBQUcsU0FBU0MsR0FBR3JpQyxFQUFFQyxHQUFHMmhDLEdBQUdDLE1BQU1FLEdBQUdILEdBQUdDLE1BQU1DLEdBQUdBLEdBQUc5aEMsRUFBRStoQyxHQUFHOWhDLENBQUMsQ0FDalYsU0FBU3FpQyxHQUFHdGlDLEVBQUVDLEVBQUVDLEdBQUc4aEMsR0FBR0MsTUFBTUUsR0FBR0gsR0FBR0MsTUFBTUcsR0FBR0osR0FBR0MsTUFBTUMsR0FBR0EsR0FBR2xpQyxFQUFFLElBQUlpQixFQUFFa2hDLEdBQUduaUMsRUFBRW9pQyxHQUFHLElBQUlsaEMsRUFBRSxHQUFHdVMsR0FBR3hTLEdBQUcsRUFBRUEsS0FBSyxHQUFHQyxHQUFHaEIsR0FBRyxFQUFFLElBQUlxQixFQUFFLEdBQUdrUyxHQUFHeFQsR0FBR2lCLEVBQUUsR0FBRyxHQUFHSyxFQUFFLENBQUMsSUFBSWQsRUFBRVMsRUFBRUEsRUFBRSxFQUFFSyxHQUFHTixHQUFHLEdBQUdSLEdBQUcsR0FBR2dCLFNBQVMsSUFBSVIsSUFBSVIsRUFBRVMsR0FBR1QsRUFBRTBoQyxHQUFHLEdBQUcsR0FBRzF1QixHQUFHeFQsR0FBR2lCLEVBQUVoQixHQUFHZ0IsRUFBRUQsRUFBRW1oQyxHQUFHN2dDLEVBQUV2QixDQUFDLE1BQU1taUMsR0FBRyxHQUFHNWdDLEVBQUVyQixHQUFHZ0IsRUFBRUQsRUFBRW1oQyxHQUFHcGlDLENBQUMsQ0FBQyxTQUFTdWlDLEdBQUd2aUMsR0FBRyxPQUFPQSxFQUFFcXhCLFNBQVNnUixHQUFHcmlDLEVBQUUsR0FBR3NpQyxHQUFHdGlDLEVBQUUsRUFBRSxHQUFHLENBQUMsU0FBU3dpQyxHQUFHeGlDLEdBQUcsS0FBS0EsSUFBSThoQyxJQUFJQSxHQUFHRixLQUFLQyxJQUFJRCxHQUFHQyxJQUFJLEtBQUtFLEdBQUdILEtBQUtDLElBQUlELEdBQUdDLElBQUksS0FBSyxLQUFLN2hDLElBQUlraUMsSUFBSUEsR0FBR0YsS0FBS0MsSUFBSUQsR0FBR0MsSUFBSSxLQUFLRyxHQUFHSixLQUFLQyxJQUFJRCxHQUFHQyxJQUFJLEtBQUtFLEdBQUdILEtBQUtDLElBQUlELEdBQUdDLElBQUksSUFBSSxDQUFDLElBQUlRLEdBQUcsS0FBS0MsR0FBRyxLQUFLcjVCLElBQUUsRUFBR3M1QixHQUFHLEtBQ2plLFNBQVNDLEdBQUc1aUMsRUFBRUMsR0FBRyxJQUFJQyxFQUFFMmlDLEdBQUcsRUFBRSxLQUFLLEtBQUssR0FBRzNpQyxFQUFFNGlDLFlBQVksVUFBVTVpQyxFQUFFK3dCLFVBQVVoeEIsRUFBRUMsRUFBRW14QixPQUFPcnhCLEVBQWdCLFFBQWRDLEVBQUVELEVBQUUraUMsWUFBb0IvaUMsRUFBRStpQyxVQUFVLENBQUM3aUMsR0FBR0YsRUFBRXN4QixPQUFPLElBQUlyeEIsRUFBRXdILEtBQUt2SCxFQUFFLENBQ3hKLFNBQVM4aUMsR0FBR2hqQyxFQUFFQyxHQUFHLE9BQU9ELEVBQUV3ckIsS0FBSyxLQUFLLEVBQUUsSUFBSXRyQixFQUFFRixFQUFFK2QsS0FBeUUsT0FBTyxRQUEzRTlkLEVBQUUsSUFBSUEsRUFBRWdTLFVBQVUvUixFQUFFa1QsZ0JBQWdCblQsRUFBRXdkLFNBQVNySyxjQUFjLEtBQUtuVCxLQUFtQkQsRUFBRWl4QixVQUFVaHhCLEVBQUV3aUMsR0FBR3ppQyxFQUFFMGlDLEdBQUczQyxHQUFHOS9CLEVBQUU0RyxhQUFZLEdBQU8sS0FBSyxFQUFFLE9BQW9ELFFBQTdDNUcsRUFBRSxLQUFLRCxFQUFFaWpDLGNBQWMsSUFBSWhqQyxFQUFFZ1MsU0FBUyxLQUFLaFMsS0FBWUQsRUFBRWl4QixVQUFVaHhCLEVBQUV3aUMsR0FBR3ppQyxFQUFFMGlDLEdBQUcsTUFBSyxHQUFPLEtBQUssR0FBRyxPQUErQixRQUF4QnppQyxFQUFFLElBQUlBLEVBQUVnUyxTQUFTLEtBQUtoUyxLQUFZQyxFQUFFLE9BQU9naUMsR0FBRyxDQUFDL3BCLEdBQUdncUIsR0FBR2UsU0FBU2QsSUFBSSxLQUFLcGlDLEVBQUV1eEIsY0FBYyxDQUFDQyxXQUFXdnhCLEVBQUVrakMsWUFBWWpqQyxFQUFFa2pDLFVBQVUsYUFBWWxqQyxFQUFFMmlDLEdBQUcsR0FBRyxLQUFLLEtBQUssSUFBSzVSLFVBQVVoeEIsRUFBRUMsRUFBRW14QixPQUFPcnhCLEVBQUVBLEVBQUV5eEIsTUFBTXZ4QixFQUFFdWlDLEdBQUd6aUMsRUFBRTBpQyxHQUNsZixNQUFLLEdBQU8sUUFBUSxPQUFNLEVBQUcsQ0FBQyxTQUFTVyxHQUFHcmpDLEdBQUcsT0FBTyxJQUFZLEVBQVBBLEVBQUVzakMsT0FBUyxJQUFhLElBQVJ0akMsRUFBRXN4QixNQUFVLENBQUMsU0FBU2lTLEdBQUd2akMsR0FBRyxHQUFHcUosR0FBRSxDQUFDLElBQUlwSixFQUFFeWlDLEdBQUcsR0FBR3ppQyxFQUFFLENBQUMsSUFBSUMsRUFBRUQsRUFBRSxJQUFJK2lDLEdBQUdoakMsRUFBRUMsR0FBRyxDQUFDLEdBQUdvakMsR0FBR3JqQyxHQUFHLE1BQU1ZLE1BQU11UCxFQUFFLE1BQU1sUSxFQUFFOC9CLEdBQUc3L0IsRUFBRTJpQixhQUFhLElBQUk1aEIsRUFBRXdoQyxHQUFHeGlDLEdBQUcraUMsR0FBR2hqQyxFQUFFQyxHQUFHMmlDLEdBQUczaEMsRUFBRWYsSUFBSUYsRUFBRXN4QixPQUFlLEtBQVR0eEIsRUFBRXN4QixNQUFZLEVBQUVqb0IsSUFBRSxFQUFHbzVCLEdBQUd6aUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHcWpDLEdBQUdyakMsR0FBRyxNQUFNWSxNQUFNdVAsRUFBRSxNQUFNblEsRUFBRXN4QixPQUFlLEtBQVR0eEIsRUFBRXN4QixNQUFZLEVBQUVqb0IsSUFBRSxFQUFHbzVCLEdBQUd6aUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTd2pDLEdBQUd4akMsR0FBRyxJQUFJQSxFQUFFQSxFQUFFcXhCLE9BQU8sT0FBT3J4QixHQUFHLElBQUlBLEVBQUV3ckIsS0FBSyxJQUFJeHJCLEVBQUV3ckIsS0FBSyxLQUFLeHJCLEVBQUV3ckIsS0FBS3hyQixFQUFFQSxFQUFFcXhCLE9BQU9vUixHQUFHemlDLENBQUMsQ0FDaGEsU0FBU3lqQyxHQUFHempDLEdBQUcsR0FBR0EsSUFBSXlpQyxHQUFHLE9BQU0sRUFBRyxJQUFJcDVCLEdBQUUsT0FBT202QixHQUFHeGpDLEdBQUdxSixJQUFFLEdBQUcsRUFBRyxJQUFJcEosRUFBa0csSUFBL0ZBLEVBQUUsSUFBSUQsRUFBRXdyQixRQUFRdnJCLEVBQUUsSUFBSUQsRUFBRXdyQixPQUFnQnZyQixFQUFFLFVBQVhBLEVBQUVELEVBQUUrZCxPQUFtQixTQUFTOWQsSUFBSWkvQixHQUFHbC9CLEVBQUUrZCxLQUFLL2QsRUFBRTBqQyxnQkFBbUJ6akMsSUFBSUEsRUFBRXlpQyxJQUFJLENBQUMsR0FBR1csR0FBR3JqQyxHQUFHLE1BQU0yakMsS0FBSy9pQyxNQUFNdVAsRUFBRSxNQUFNLEtBQUtsUSxHQUFHMmlDLEdBQUc1aUMsRUFBRUMsR0FBR0EsRUFBRTgvQixHQUFHOS9CLEVBQUU0aUIsWUFBWSxDQUFPLEdBQU4yZ0IsR0FBR3hqQyxHQUFNLEtBQUtBLEVBQUV3ckIsSUFBSSxDQUFnRCxLQUE3QnhyQixFQUFFLFFBQXBCQSxFQUFFQSxFQUFFdXhCLGVBQXlCdnhCLEVBQUV3eEIsV0FBVyxNQUFXLE1BQU01d0IsTUFBTXVQLEVBQUUsTUFBTW5RLEVBQUUsQ0FBaUIsSUFBaEJBLEVBQUVBLEVBQUU2aUIsWUFBZ0I1aUIsRUFBRSxFQUFFRCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFaVMsU0FBUyxDQUFDLElBQUkvUixFQUFFRixFQUFFeWlCLEtBQUssR0FBRyxPQUFPdmlCLEVBQUUsQ0FBQyxHQUFHLElBQUlELEVBQUUsQ0FBQ3lpQyxHQUFHM0MsR0FBRy8vQixFQUFFNmlCLGFBQWEsTUFBTTdpQixDQUFDLENBQUNDLEdBQUcsS0FBSyxNQUFNQyxHQUFHLE9BQU9BLEdBQUcsT0FBT0EsR0FBR0QsR0FBRyxDQUFDRCxFQUFFQSxFQUFFNmlCLFdBQVcsQ0FBQzZmLEdBQ2pnQixJQUFJLENBQUMsTUFBTUEsR0FBR0QsR0FBRzFDLEdBQUcvL0IsRUFBRWl4QixVQUFVcE8sYUFBYSxLQUFLLE9BQU0sQ0FBRSxDQUFDLFNBQVM4Z0IsS0FBSyxJQUFJLElBQUkzakMsRUFBRTBpQyxHQUFHMWlDLEdBQUdBLEVBQUUrL0IsR0FBRy8vQixFQUFFNmlCLFlBQVksQ0FBQyxTQUFTK2dCLEtBQUtsQixHQUFHRCxHQUFHLEtBQUtwNUIsSUFBRSxDQUFFLENBQUMsU0FBU3c2QixHQUFHN2pDLEdBQUcsT0FBTzJpQyxHQUFHQSxHQUFHLENBQUMzaUMsR0FBRzJpQyxHQUFHbDdCLEtBQUt6SCxFQUFFLENBQUMsSUFBSThqQyxHQUFHMS9CLEVBQUd1dkIsd0JBQXdCLFNBQVNvUSxHQUFHL2pDLEVBQUVDLEdBQUcsR0FBR0QsR0FBR0EsRUFBRXdtQixhQUFhLENBQTRCLElBQUksSUFBSXRtQixLQUFuQ0QsRUFBRWdELEVBQUUsQ0FBQyxFQUFFaEQsR0FBR0QsRUFBRUEsRUFBRXdtQixrQkFBNEIsSUFBU3ZtQixFQUFFQyxLQUFLRCxFQUFFQyxHQUFHRixFQUFFRSxJQUFJLE9BQU9ELENBQUMsQ0FBQyxPQUFPQSxDQUFDLENBQUMsSUFBSStqQyxHQUFHeEQsR0FBRyxNQUFNeUQsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxLQUFLRCxHQUFHRCxHQUFHRCxHQUFHLElBQUksQ0FBQyxTQUFTSSxHQUFHcmtDLEdBQUcsSUFBSUMsRUFBRStqQyxHQUFHclMsUUFBUWpwQixHQUFFczdCLElBQUloa0MsRUFBRXNrQyxjQUFjcmtDLENBQUMsQ0FDamQsU0FBU3NrQyxHQUFHdmtDLEVBQUVDLEVBQUVDLEdBQUcsS0FBSyxPQUFPRixHQUFHLENBQUMsSUFBSWlCLEVBQUVqQixFQUFFb3hCLFVBQStILElBQXBIcHhCLEVBQUV3a0MsV0FBV3ZrQyxLQUFLQSxHQUFHRCxFQUFFd2tDLFlBQVl2a0MsRUFBRSxPQUFPZ0IsSUFBSUEsRUFBRXVqQyxZQUFZdmtDLElBQUksT0FBT2dCLElBQUlBLEVBQUV1akMsV0FBV3ZrQyxLQUFLQSxJQUFJZ0IsRUFBRXVqQyxZQUFZdmtDLEdBQU1ELElBQUlFLEVBQUUsTUFBTUYsRUFBRUEsRUFBRXF4QixNQUFNLENBQUMsQ0FBQyxTQUFTb1QsR0FBR3prQyxFQUFFQyxHQUFHZ2tDLEdBQUdqa0MsRUFBRW1rQyxHQUFHRCxHQUFHLEtBQXNCLFFBQWpCbGtDLEVBQUVBLEVBQUUwa0MsZUFBdUIsT0FBTzFrQyxFQUFFMmtDLGVBQWUsSUFBSzNrQyxFQUFFNGtDLE1BQU0za0MsS0FBSzRrQyxJQUFHLEdBQUk3a0MsRUFBRTJrQyxhQUFhLEtBQUssQ0FDdFUsU0FBU0csR0FBRzlrQyxHQUFHLElBQUlDLEVBQUVELEVBQUVza0MsY0FBYyxHQUFHSCxLQUFLbmtDLEVBQUUsR0FBR0EsRUFBRSxDQUFDK2tDLFFBQVEva0MsRUFBRWdsQyxjQUFjL2tDLEVBQUU0QixLQUFLLE1BQU0sT0FBT3FpQyxHQUFHLENBQUMsR0FBRyxPQUFPRCxHQUFHLE1BQU1yakMsTUFBTXVQLEVBQUUsTUFBTSt6QixHQUFHbGtDLEVBQUVpa0MsR0FBR1MsYUFBYSxDQUFDRSxNQUFNLEVBQUVELGFBQWEza0MsRUFBRSxNQUFNa2tDLEdBQUdBLEdBQUdyaUMsS0FBSzdCLEVBQUUsT0FBT0MsQ0FBQyxDQUFDLElBQUlnbEMsR0FBRyxLQUFLLFNBQVNDLEdBQUdsbEMsR0FBRyxPQUFPaWxDLEdBQUdBLEdBQUcsQ0FBQ2psQyxHQUFHaWxDLEdBQUd4OUIsS0FBS3pILEVBQUUsQ0FBQyxTQUFTbWxDLEdBQUdubEMsRUFBRUMsRUFBRUMsRUFBRWUsR0FBRyxJQUFJQyxFQUFFakIsRUFBRW1sQyxZQUErRSxPQUFuRSxPQUFPbGtDLEdBQUdoQixFQUFFMkIsS0FBSzNCLEVBQUVnbEMsR0FBR2psQyxLQUFLQyxFQUFFMkIsS0FBS1gsRUFBRVcsS0FBS1gsRUFBRVcsS0FBSzNCLEdBQUdELEVBQUVtbEMsWUFBWWxsQyxFQUFTbWxDLEdBQUdybEMsRUFBRWlCLEVBQUUsQ0FDaFksU0FBU29rQyxHQUFHcmxDLEVBQUVDLEdBQUdELEVBQUU0a0MsT0FBTzNrQyxFQUFFLElBQUlDLEVBQUVGLEVBQUVveEIsVUFBcUMsSUFBM0IsT0FBT2x4QixJQUFJQSxFQUFFMGtDLE9BQU8za0MsR0FBR0MsRUFBRUYsRUFBTUEsRUFBRUEsRUFBRXF4QixPQUFPLE9BQU9yeEIsR0FBR0EsRUFBRXdrQyxZQUFZdmtDLEVBQWdCLFFBQWRDLEVBQUVGLEVBQUVveEIsYUFBcUJseEIsRUFBRXNrQyxZQUFZdmtDLEdBQUdDLEVBQUVGLEVBQUVBLEVBQUVBLEVBQUVxeEIsT0FBTyxPQUFPLElBQUlueEIsRUFBRXNyQixJQUFJdHJCLEVBQUUrd0IsVUFBVSxJQUFJLENBQUMsSUFBSXFVLElBQUcsRUFBRyxTQUFTQyxHQUFHdmxDLEdBQUdBLEVBQUV3bEMsWUFBWSxDQUFDQyxVQUFVemxDLEVBQUV1eEIsY0FBY21VLGdCQUFnQixLQUFLQyxlQUFlLEtBQUtDLE9BQU8sQ0FBQ0MsUUFBUSxLQUFLVCxZQUFZLEtBQUtSLE1BQU0sR0FBR2tCLFFBQVEsS0FBSyxDQUNwWCxTQUFTQyxHQUFHL2xDLEVBQUVDLEdBQUdELEVBQUVBLEVBQUV3bEMsWUFBWXZsQyxFQUFFdWxDLGNBQWN4bEMsSUFBSUMsRUFBRXVsQyxZQUFZLENBQUNDLFVBQVV6bEMsRUFBRXlsQyxVQUFVQyxnQkFBZ0IxbEMsRUFBRTBsQyxnQkFBZ0JDLGVBQWUzbEMsRUFBRTJsQyxlQUFlQyxPQUFPNWxDLEVBQUU0bEMsT0FBT0UsUUFBUTlsQyxFQUFFOGxDLFNBQVMsQ0FBQyxTQUFTRSxHQUFHaG1DLEVBQUVDLEdBQUcsTUFBTSxDQUFDZ21DLFVBQVVqbUMsRUFBRWttQyxLQUFLam1DLEVBQUV1ckIsSUFBSSxFQUFFMmEsUUFBUSxLQUFLMzJCLFNBQVMsS0FBSzNOLEtBQUssS0FBSyxDQUN0UixTQUFTdWtDLEdBQUdwbUMsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZSxFQUFFakIsRUFBRXdsQyxZQUFZLEdBQUcsT0FBT3ZrQyxFQUFFLE9BQU8sS0FBZ0IsR0FBWEEsRUFBRUEsRUFBRTJrQyxPQUFVLElBQU8sRUFBRnQ2QixJQUFLLENBQUMsSUFBSXBLLEVBQUVELEVBQUU0a0MsUUFBK0QsT0FBdkQsT0FBTzNrQyxFQUFFakIsRUFBRTRCLEtBQUs1QixHQUFHQSxFQUFFNEIsS0FBS1gsRUFBRVcsS0FBS1gsRUFBRVcsS0FBSzVCLEdBQUdnQixFQUFFNGtDLFFBQVE1bEMsRUFBU29sQyxHQUFHcmxDLEVBQUVFLEVBQUUsQ0FBb0YsT0FBbkUsUUFBaEJnQixFQUFFRCxFQUFFbWtDLGNBQXNCbmxDLEVBQUU0QixLQUFLNUIsRUFBRWlsQyxHQUFHamtDLEtBQUtoQixFQUFFNEIsS0FBS1gsRUFBRVcsS0FBS1gsRUFBRVcsS0FBSzVCLEdBQUdnQixFQUFFbWtDLFlBQVlubEMsRUFBU29sQyxHQUFHcmxDLEVBQUVFLEVBQUUsQ0FBQyxTQUFTbW1DLEdBQUdybUMsRUFBRUMsRUFBRUMsR0FBbUIsR0FBRyxRQUFuQkQsRUFBRUEsRUFBRXVsQyxlQUEwQnZsQyxFQUFFQSxFQUFFMmxDLE9BQU8sSUFBTyxRQUFGMWxDLElBQVksQ0FBQyxJQUFJZSxFQUFFaEIsRUFBRTJrQyxNQUF3QjFrQyxHQUFsQmUsR0FBR2pCLEVBQUV5eUIsYUFBa0J4eUIsRUFBRTJrQyxNQUFNMWtDLEVBQUU2VSxHQUFHL1UsRUFBRUUsRUFBRSxDQUFDLENBQ3JaLFNBQVNvbUMsR0FBR3RtQyxFQUFFQyxHQUFHLElBQUlDLEVBQUVGLEVBQUV3bEMsWUFBWXZrQyxFQUFFakIsRUFBRW94QixVQUFVLEdBQUcsT0FBT253QixHQUFvQmYsS0FBaEJlLEVBQUVBLEVBQUV1a0MsYUFBbUIsQ0FBQyxJQUFJdGtDLEVBQUUsS0FBS0ssRUFBRSxLQUF5QixHQUFHLFFBQXZCckIsRUFBRUEsRUFBRXdsQyxpQkFBNEIsQ0FBQyxFQUFFLENBQUMsSUFBSWpsQyxFQUFFLENBQUN3bEMsVUFBVS9sQyxFQUFFK2xDLFVBQVVDLEtBQUtobUMsRUFBRWdtQyxLQUFLMWEsSUFBSXRyQixFQUFFc3JCLElBQUkyYSxRQUFRam1DLEVBQUVpbUMsUUFBUTMyQixTQUFTdFAsRUFBRXNQLFNBQVMzTixLQUFLLE1BQU0sT0FBT04sRUFBRUwsRUFBRUssRUFBRWQsRUFBRWMsRUFBRUEsRUFBRU0sS0FBS3BCLEVBQUVQLEVBQUVBLEVBQUUyQixJQUFJLE9BQU8sT0FBTzNCLEdBQUcsT0FBT3FCLEVBQUVMLEVBQUVLLEVBQUV0QixFQUFFc0IsRUFBRUEsRUFBRU0sS0FBSzVCLENBQUMsTUFBTWlCLEVBQUVLLEVBQUV0QixFQUFpSCxPQUEvR0MsRUFBRSxDQUFDdWxDLFVBQVV4a0MsRUFBRXdrQyxVQUFVQyxnQkFBZ0J4a0MsRUFBRXlrQyxlQUFlcGtDLEVBQUVxa0MsT0FBTzNrQyxFQUFFMmtDLE9BQU9FLFFBQVE3a0MsRUFBRTZrQyxjQUFTOWxDLEVBQUV3bEMsWUFBWXRsQyxFQUFRLENBQW9CLFFBQW5CRixFQUFFRSxFQUFFeWxDLGdCQUF3QnpsQyxFQUFFd2xDLGdCQUFnQnpsQyxFQUFFRCxFQUFFNkIsS0FDbmY1QixFQUFFQyxFQUFFeWxDLGVBQWUxbEMsQ0FBQyxDQUNwQixTQUFTc21DLEdBQUd2bUMsRUFBRUMsRUFBRUMsRUFBRWUsR0FBRyxJQUFJQyxFQUFFbEIsRUFBRXdsQyxZQUFZRixJQUFHLEVBQUcsSUFBSS9qQyxFQUFFTCxFQUFFd2tDLGdCQUFnQmpsQyxFQUFFUyxFQUFFeWtDLGVBQWV6aUMsRUFBRWhDLEVBQUUwa0MsT0FBT0MsUUFBUSxHQUFHLE9BQU8zaUMsRUFBRSxDQUFDaEMsRUFBRTBrQyxPQUFPQyxRQUFRLEtBQUssSUFBSXAyQixFQUFFdk0sRUFBRTBNLEVBQUVILEVBQUU1TixLQUFLNE4sRUFBRTVOLEtBQUssS0FBSyxPQUFPcEIsRUFBRWMsRUFBRXFPLEVBQUVuUCxFQUFFb0IsS0FBSytOLEVBQUVuUCxFQUFFZ1AsRUFBRSxJQUFJeE4sRUFBRWpDLEVBQUVveEIsVUFBVSxPQUFPbnZCLElBQW9CaUIsR0FBaEJqQixFQUFFQSxFQUFFdWpDLGFBQWdCRyxrQkFBbUJsbEMsSUFBSSxPQUFPeUMsRUFBRWpCLEVBQUV5akMsZ0JBQWdCOTFCLEVBQUUxTSxFQUFFckIsS0FBSytOLEVBQUUzTixFQUFFMGpDLGVBQWVsMkIsRUFBRyxDQUFDLEdBQUcsT0FBT2xPLEVBQUUsQ0FBQyxJQUFJc0MsRUFBRTNDLEVBQUV1a0MsVUFBNkIsSUFBbkJobEMsRUFBRSxFQUFFd0IsRUFBRTJOLEVBQUVILEVBQUUsS0FBS3ZNLEVBQUUzQixJQUFJLENBQUMsSUFBSTJLLEVBQUVoSixFQUFFZ2pDLEtBQUs3MUIsRUFBRW5OLEVBQUUraUMsVUFBVSxJQUFJaGxDLEVBQUVpTCxLQUFLQSxFQUFFLENBQUMsT0FBT2pLLElBQUlBLEVBQUVBLEVBQUVKLEtBQUssQ0FBQ29rQyxVQUFVNTFCLEVBQUU2MUIsS0FBSyxFQUFFMWEsSUFBSXRvQixFQUFFc29CLElBQUkyYSxRQUFRampDLEVBQUVpakMsUUFBUTMyQixTQUFTdE0sRUFBRXNNLFNBQ3ZmM04sS0FBSyxPQUFPN0IsRUFBRSxDQUFDLElBQUk2UCxFQUFFN1AsRUFBRThFLEVBQUU1QixFQUFVLE9BQVJnSixFQUFFak0sRUFBRW9RLEVBQUVuUSxFQUFTNEUsRUFBRTBtQixLQUFLLEtBQUssRUFBYyxHQUFHLG1CQUFmM2IsRUFBRS9LLEVBQUVxaEMsU0FBaUMsQ0FBQ3RpQyxFQUFFZ00sRUFBRXhOLEtBQUtnTyxFQUFFeE0sRUFBRXFJLEdBQUcsTUFBTWxNLENBQUMsQ0FBQzZELEVBQUVnTSxFQUFFLE1BQU03UCxFQUFFLEtBQUssRUFBRTZQLEVBQUV5aEIsT0FBZSxNQUFUemhCLEVBQUV5aEIsTUFBYSxJQUFJLEtBQUssRUFBc0QsR0FBRyxPQUEzQ3BsQixFQUFFLG1CQUFkMkQsRUFBRS9LLEVBQUVxaEMsU0FBZ0N0MkIsRUFBRXhOLEtBQUtnTyxFQUFFeE0sRUFBRXFJLEdBQUcyRCxHQUEwQixNQUFNN1AsRUFBRTZELEVBQUVaLEVBQUUsQ0FBQyxFQUFFWSxFQUFFcUksR0FBRyxNQUFNbE0sRUFBRSxLQUFLLEVBQUVzbEMsSUFBRyxFQUFHLENBQUMsT0FBT3BpQyxFQUFFc00sVUFBVSxJQUFJdE0sRUFBRWdqQyxPQUFPbG1DLEVBQUVzeEIsT0FBTyxHQUFlLFFBQVpwbEIsRUFBRWhMLEVBQUU0a0MsU0FBaUI1a0MsRUFBRTRrQyxRQUFRLENBQUM1aUMsR0FBR2dKLEVBQUV6RSxLQUFLdkUsR0FBRyxNQUFNbU4sRUFBRSxDQUFDNDFCLFVBQVU1MUIsRUFBRTYxQixLQUFLaDZCLEVBQUVzZixJQUFJdG9CLEVBQUVzb0IsSUFBSTJhLFFBQVFqakMsRUFBRWlqQyxRQUFRMzJCLFNBQVN0TSxFQUFFc00sU0FBUzNOLEtBQUssTUFBTSxPQUFPSSxHQUFHMk4sRUFBRTNOLEVBQUVvTyxFQUFFWixFQUFFNUwsR0FBRzVCLEVBQUVBLEVBQUVKLEtBQUt3TyxFQUFFNVAsR0FBR3lMLEVBQzNlLEdBQUcsUUFBWmhKLEVBQUVBLEVBQUVyQixNQUFpQixJQUFzQixRQUFuQnFCLEVBQUVoQyxFQUFFMGtDLE9BQU9DLFNBQWlCLE1BQWUzaUMsR0FBSmdKLEVBQUVoSixHQUFNckIsS0FBS3FLLEVBQUVySyxLQUFLLEtBQUtYLEVBQUV5a0MsZUFBZXo1QixFQUFFaEwsRUFBRTBrQyxPQUFPQyxRQUFRLEtBQUksQ0FBc0csR0FBNUYsT0FBTzVqQyxJQUFJd04sRUFBRTVMLEdBQUczQyxFQUFFdWtDLFVBQVVoMkIsRUFBRXZPLEVBQUV3a0MsZ0JBQWdCOTFCLEVBQUUxTyxFQUFFeWtDLGVBQWUxakMsRUFBNEIsUUFBMUJoQyxFQUFFaUIsRUFBRTBrQyxPQUFPUixhQUF3QixDQUFDbGtDLEVBQUVqQixFQUFFLEdBQUdRLEdBQUdTLEVBQUVnbEMsS0FBS2hsQyxFQUFFQSxFQUFFVyxXQUFXWCxJQUFJakIsRUFBRSxNQUFNLE9BQU9zQixJQUFJTCxFQUFFMGtDLE9BQU9oQixNQUFNLEdBQUc0QixJQUFJL2xDLEVBQUVULEVBQUU0a0MsTUFBTW5rQyxFQUFFVCxFQUFFdXhCLGNBQWMxdEIsQ0FBQyxDQUFDLENBQzlWLFNBQVM0aUMsR0FBR3ptQyxFQUFFQyxFQUFFQyxHQUE4QixHQUEzQkYsRUFBRUMsRUFBRTZsQyxRQUFRN2xDLEVBQUU2bEMsUUFBUSxLQUFRLE9BQU85bEMsRUFBRSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVELEVBQUVVLE9BQU9ULElBQUksQ0FBQyxJQUFJZ0IsRUFBRWpCLEVBQUVDLEdBQUdpQixFQUFFRCxFQUFFdU8sU0FBUyxHQUFHLE9BQU90TyxFQUFFLENBQXFCLEdBQXBCRCxFQUFFdU8sU0FBUyxLQUFLdk8sRUFBRWYsRUFBSyxtQkFBb0JnQixFQUFFLE1BQU1OLE1BQU11UCxFQUFFLElBQUlqUCxJQUFJQSxFQUFFbUIsS0FBS3BCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSXlsQyxJQUFHLElBQUs5bUMsRUFBRyttQyxXQUFXQyxLQUFLLFNBQVNDLEdBQUc3bUMsRUFBRUMsRUFBRUMsRUFBRWUsR0FBOEJmLEVBQUUsT0FBWEEsRUFBRUEsRUFBRWUsRUFBdEJoQixFQUFFRCxFQUFFdXhCLGdCQUE4Q3R4QixFQUFFZ0QsRUFBRSxDQUFDLEVBQUVoRCxFQUFFQyxHQUFHRixFQUFFdXhCLGNBQWNyeEIsRUFBRSxJQUFJRixFQUFFNGtDLFFBQVE1a0MsRUFBRXdsQyxZQUFZQyxVQUFVdmxDLEVBQUUsQ0FDbFgsSUFBSTRtQyxHQUFHLENBQUNDLFVBQVUsU0FBUy9tQyxHQUFHLFNBQU9BLEVBQUVBLEVBQUVnbkMsa0JBQWlCcjRCLEdBQUczTyxLQUFLQSxDQUFJLEVBQUVpbkMsZ0JBQWdCLFNBQVNqbkMsRUFBRUMsRUFBRUMsR0FBR0YsRUFBRUEsRUFBRWduQyxnQkFBZ0IsSUFBSS9sQyxFQUFFa0wsS0FBSWpMLEVBQUVnbUMsR0FBR2xuQyxHQUFHdUIsRUFBRXlrQyxHQUFHL2tDLEVBQUVDLEdBQUdLLEVBQUU0a0MsUUFBUWxtQyxFQUFFLE1BQVNDLElBQWNxQixFQUFFaU8sU0FBU3RQLEdBQWUsUUFBWkQsRUFBRW1tQyxHQUFHcG1DLEVBQUV1QixFQUFFTCxNQUFjaW1DLEdBQUdsbkMsRUFBRUQsRUFBRWtCLEVBQUVELEdBQUdvbEMsR0FBR3BtQyxFQUFFRCxFQUFFa0IsR0FBRyxFQUFFa21DLG9CQUFvQixTQUFTcG5DLEVBQUVDLEVBQUVDLEdBQUdGLEVBQUVBLEVBQUVnbkMsZ0JBQWdCLElBQUkvbEMsRUFBRWtMLEtBQUlqTCxFQUFFZ21DLEdBQUdsbkMsR0FBR3VCLEVBQUV5a0MsR0FBRy9rQyxFQUFFQyxHQUFHSyxFQUFFaXFCLElBQUksRUFBRWpxQixFQUFFNGtDLFFBQVFsbUMsRUFBRSxNQUFTQyxJQUFjcUIsRUFBRWlPLFNBQVN0UCxHQUFlLFFBQVpELEVBQUVtbUMsR0FBR3BtQyxFQUFFdUIsRUFBRUwsTUFBY2ltQyxHQUFHbG5DLEVBQUVELEVBQUVrQixFQUFFRCxHQUFHb2xDLEdBQUdwbUMsRUFBRUQsRUFBRWtCLEdBQUcsRUFBRW1tQyxtQkFBbUIsU0FBU3JuQyxFQUFFQyxHQUFHRCxFQUFFQSxFQUFFZ25DLGdCQUFnQixJQUFJOW1DLEVBQUVpTSxLQUFJbEwsRUFDbmZpbUMsR0FBR2xuQyxHQUFHa0IsRUFBRThrQyxHQUFHOWxDLEVBQUVlLEdBQUdDLEVBQUVzcUIsSUFBSSxFQUFFLE1BQVN2ckIsSUFBY2lCLEVBQUVzTyxTQUFTdlAsR0FBZSxRQUFaQSxFQUFFbW1DLEdBQUdwbUMsRUFBRWtCLEVBQUVELE1BQWNrbUMsR0FBR2xuQyxFQUFFRCxFQUFFaUIsRUFBRWYsR0FBR21tQyxHQUFHcG1DLEVBQUVELEVBQUVpQixHQUFHLEdBQUcsU0FBU3FtQyxHQUFHdG5DLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEVBQUVLLEVBQUVkLEdBQWlCLE1BQU0sbUJBQXBCVCxFQUFFQSxFQUFFaXhCLFdBQXNDc1csc0JBQXNCdm5DLEVBQUV1bkMsc0JBQXNCdG1DLEVBQUVNLEVBQUVkLEtBQUdSLEVBQUVHLFdBQVdILEVBQUVHLFVBQVVvbkMsc0JBQXNCM04sR0FBRzM1QixFQUFFZSxJQUFLNDRCLEdBQUczNEIsRUFBRUssR0FBSyxDQUMxUyxTQUFTa21DLEdBQUd6bkMsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZSxHQUFFLEVBQUdDLEVBQUV1L0IsR0FBT2wvQixFQUFFdEIsRUFBRXFtQixZQUEyVyxNQUEvVixpQkFBa0Iva0IsR0FBRyxPQUFPQSxFQUFFQSxFQUFFdWpDLEdBQUd2akMsSUFBSUwsRUFBRTYvQixHQUFHOWdDLEdBQUcwZ0MsR0FBR3Y3QixHQUFFdXNCLFFBQXlCcHdCLEdBQUdOLEVBQUUsT0FBdEJBLEVBQUVoQixFQUFFc21CLGVBQXdDcWEsR0FBRzVnQyxFQUFFa0IsR0FBR3UvQixJQUFJeGdDLEVBQUUsSUFBSUEsRUFBRUMsRUFBRXFCLEdBQUd2QixFQUFFdXhCLGNBQWMsT0FBT3R4QixFQUFFZ1UsWUFBTyxJQUFTaFUsRUFBRWdVLE1BQU1oVSxFQUFFZ1UsTUFBTSxLQUFLaFUsRUFBRXluQyxRQUFRWixHQUFHOW1DLEVBQUVpeEIsVUFBVWh4QixFQUFFQSxFQUFFK21DLGdCQUFnQmhuQyxFQUFFaUIsS0FBSWpCLEVBQUVBLEVBQUVpeEIsV0FBWTRQLDRDQUE0QzMvQixFQUFFbEIsRUFBRThnQywwQ0FBMEN2L0IsR0FBVXRCLENBQUMsQ0FDNVosU0FBUzBuQyxHQUFHM25DLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUdqQixFQUFFQyxFQUFFZ1UsTUFBTSxtQkFBb0JoVSxFQUFFMm5DLDJCQUEyQjNuQyxFQUFFMm5DLDBCQUEwQjFuQyxFQUFFZSxHQUFHLG1CQUFvQmhCLEVBQUU0bkMsa0NBQWtDNW5DLEVBQUU0bkMsaUNBQWlDM25DLEVBQUVlLEdBQUdoQixFQUFFZ1UsUUFBUWpVLEdBQUc4bUMsR0FBR00sb0JBQW9Cbm5DLEVBQUVBLEVBQUVnVSxNQUFNLEtBQUssQ0FDcFEsU0FBUzZ6QixHQUFHOW5DLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUcsSUFBSUMsRUFBRWxCLEVBQUVpeEIsVUFBVS92QixFQUFFNm1DLE1BQU03bkMsRUFBRWdCLEVBQUUrUyxNQUFNalUsRUFBRXV4QixjQUFjcndCLEVBQUUwbEMsS0FBS0YsR0FBR25CLEdBQUd2bEMsR0FBRyxJQUFJdUIsRUFBRXRCLEVBQUVxbUIsWUFBWSxpQkFBa0Iva0IsR0FBRyxPQUFPQSxFQUFFTCxFQUFFNmpDLFFBQVFELEdBQUd2akMsSUFBSUEsRUFBRXcvQixHQUFHOWdDLEdBQUcwZ0MsR0FBR3Y3QixHQUFFdXNCLFFBQVF6d0IsRUFBRTZqQyxRQUFRbkUsR0FBRzVnQyxFQUFFdUIsSUFBSUwsRUFBRStTLE1BQU1qVSxFQUFFdXhCLGNBQTJDLG1CQUE3Qmh3QixFQUFFdEIsRUFBRTBtQiw0QkFBaURrZ0IsR0FBRzdtQyxFQUFFQyxFQUFFc0IsRUFBRXJCLEdBQUdnQixFQUFFK1MsTUFBTWpVLEVBQUV1eEIsZUFBZSxtQkFBb0J0eEIsRUFBRTBtQiwwQkFBMEIsbUJBQW9CemxCLEVBQUU4bUMseUJBQXlCLG1CQUFvQjltQyxFQUFFK21DLDJCQUEyQixtQkFBb0IvbUMsRUFBRWduQyxxQkFBcUJqb0MsRUFBRWlCLEVBQUUrUyxNQUNyZixtQkFBb0IvUyxFQUFFZ25DLG9CQUFvQmhuQyxFQUFFZ25DLHFCQUFxQixtQkFBb0JobkMsRUFBRSttQywyQkFBMkIvbUMsRUFBRSttQyw0QkFBNEJob0MsSUFBSWlCLEVBQUUrUyxPQUFPNnlCLEdBQUdNLG9CQUFvQmxtQyxFQUFFQSxFQUFFK1MsTUFBTSxNQUFNc3lCLEdBQUd2bUMsRUFBRUUsRUFBRWdCLEVBQUVELEdBQUdDLEVBQUUrUyxNQUFNalUsRUFBRXV4QixlQUFlLG1CQUFvQnJ3QixFQUFFaW5DLG9CQUFvQm5vQyxFQUFFc3hCLE9BQU8sUUFBUSxDQUNwUyxTQUFTOFcsR0FBR3BvQyxFQUFFQyxFQUFFQyxHQUFXLEdBQUcsUUFBWEYsRUFBRUUsRUFBRW1vQyxNQUFpQixtQkFBb0Jyb0MsR0FBRyxpQkFBa0JBLEVBQUUsQ0FBQyxHQUFHRSxFQUFFb29DLE9BQU8sQ0FBWSxHQUFYcG9DLEVBQUVBLEVBQUVvb0MsT0FBWSxDQUFDLEdBQUcsSUFBSXBvQyxFQUFFc3JCLElBQUksTUFBTTVxQixNQUFNdVAsRUFBRSxNQUFNLElBQUlsUCxFQUFFZixFQUFFK3dCLFNBQVMsQ0FBQyxJQUFJaHdCLEVBQUUsTUFBTUwsTUFBTXVQLEVBQUUsSUFBSW5RLElBQUksSUFBSWtCLEVBQUVELEVBQUVNLEVBQUUsR0FBR3ZCLEVBQUUsT0FBRyxPQUFPQyxHQUFHLE9BQU9BLEVBQUVvb0MsS0FBSyxtQkFBb0Jwb0MsRUFBRW9vQyxLQUFLcG9DLEVBQUVvb0MsSUFBSUUsYUFBYWhuQyxFQUFTdEIsRUFBRW9vQyxLQUFJcG9DLEVBQUUsU0FBU0QsR0FBRyxJQUFJQyxFQUFFaUIsRUFBRTBsQyxLQUFLM21DLElBQUl5bUMsS0FBS3ptQyxFQUFFaUIsRUFBRTBsQyxLQUFLLENBQUMsR0FBRyxPQUFPNW1DLFNBQVNDLEVBQUVzQixHQUFHdEIsRUFBRXNCLEdBQUd2QixDQUFDLEVBQUVDLEVBQUVzb0MsV0FBV2huQyxFQUFTdEIsRUFBQyxDQUFDLEdBQUcsaUJBQWtCRCxFQUFFLE1BQU1ZLE1BQU11UCxFQUFFLE1BQU0sSUFBSWpRLEVBQUVvb0MsT0FBTyxNQUFNMW5DLE1BQU11UCxFQUFFLElBQUluUSxHQUFJLENBQUMsT0FBT0EsQ0FBQyxDQUNyZSxTQUFTd29DLEdBQUd4b0MsRUFBRUMsR0FBdUMsTUFBcENELEVBQUVILE9BQU9PLFVBQVVxQixTQUFTWSxLQUFLcEMsR0FBU1csTUFBTXVQLEVBQUUsR0FBRyxvQkFBb0JuUSxFQUFFLHFCQUFxQkgsT0FBT3lJLEtBQUtySSxHQUFHMEosS0FBSyxNQUFNLElBQUkzSixHQUFJLENBQUMsU0FBU3lvQyxHQUFHem9DLEdBQWlCLE9BQU9DLEVBQWZELEVBQUUyckIsT0FBZTNyQixFQUFFMHJCLFNBQVMsQ0FDck0sU0FBU2dkLEdBQUcxb0MsR0FBRyxTQUFTQyxFQUFFQSxFQUFFQyxHQUFHLEdBQUdGLEVBQUUsQ0FBQyxJQUFJaUIsRUFBRWhCLEVBQUU4aUMsVUFBVSxPQUFPOWhDLEdBQUdoQixFQUFFOGlDLFVBQVUsQ0FBQzdpQyxHQUFHRCxFQUFFcXhCLE9BQU8sSUFBSXJ3QixFQUFFd0csS0FBS3ZILEVBQUUsQ0FBQyxDQUFDLFNBQVNBLEVBQUVBLEVBQUVlLEdBQUcsSUFBSWpCLEVBQUUsT0FBTyxLQUFLLEtBQUssT0FBT2lCLEdBQUdoQixFQUFFQyxFQUFFZSxHQUFHQSxFQUFFQSxFQUFFeXdCLFFBQVEsT0FBTyxJQUFJLENBQUMsU0FBU3p3QixFQUFFakIsRUFBRUMsR0FBRyxJQUFJRCxFQUFFLElBQUkreUIsSUFBSSxPQUFPOXlCLEdBQUcsT0FBT0EsRUFBRXVvQixJQUFJeG9CLEVBQUVvckIsSUFBSW5yQixFQUFFdW9CLElBQUl2b0IsR0FBR0QsRUFBRW9yQixJQUFJbnJCLEVBQUUwb0MsTUFBTTFvQyxHQUFHQSxFQUFFQSxFQUFFeXhCLFFBQVEsT0FBTzF4QixDQUFDLENBQUMsU0FBU2tCLEVBQUVsQixFQUFFQyxHQUFzQyxPQUFuQ0QsRUFBRTRvQyxHQUFHNW9DLEVBQUVDLElBQUswb0MsTUFBTSxFQUFFM29DLEVBQUUweEIsUUFBUSxLQUFZMXhCLENBQUMsQ0FBQyxTQUFTdUIsRUFBRXRCLEVBQUVDLEVBQUVlLEdBQWEsT0FBVmhCLEVBQUUwb0MsTUFBTTFuQyxFQUFNakIsRUFBNkMsUUFBakJpQixFQUFFaEIsRUFBRW14QixZQUE2Qm53QixFQUFFQSxFQUFFMG5DLE9BQVF6b0MsR0FBR0QsRUFBRXF4QixPQUFPLEVBQUVweEIsR0FBR2UsR0FBRWhCLEVBQUVxeEIsT0FBTyxFQUFTcHhCLElBQXJHRCxFQUFFcXhCLE9BQU8sUUFBUXB4QixFQUFxRixDQUFDLFNBQVNPLEVBQUVSLEdBQ3pkLE9BRDRkRCxHQUM3ZixPQUFPQyxFQUFFbXhCLFlBQVlueEIsRUFBRXF4QixPQUFPLEdBQVVyeEIsQ0FBQyxDQUFDLFNBQVNpRCxFQUFFbEQsRUFBRUMsRUFBRUMsRUFBRWUsR0FBRyxPQUFHLE9BQU9oQixHQUFHLElBQUlBLEVBQUV1ckIsTUFBV3ZyQixFQUFFNG9DLEdBQUczb0MsRUFBRUYsRUFBRXNqQyxLQUFLcmlDLElBQUtvd0IsT0FBT3J4QixFQUFFQyxLQUFFQSxFQUFFaUIsRUFBRWpCLEVBQUVDLElBQUtteEIsT0FBT3J4QixFQUFTQyxFQUFDLENBQUMsU0FBU3dQLEVBQUV6UCxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHLElBQUlNLEVBQUVyQixFQUFFNmQsS0FBSyxPQUFHeGMsSUFBSXNELEVBQVU1QyxFQUFFakMsRUFBRUMsRUFBRUMsRUFBRTZuQyxNQUFNaGIsU0FBUzlyQixFQUFFZixFQUFFc29CLEtBQVEsT0FBT3ZvQixJQUFJQSxFQUFFNmlDLGNBQWN2aEMsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBR0EsRUFBRW9uQixXQUFXM2lCLEdBQUl5aUMsR0FBR2xuQyxLQUFLdEIsRUFBRThkLFFBQWE5YyxFQUFFQyxFQUFFakIsRUFBRUMsRUFBRTZuQyxRQUFTTSxJQUFJRCxHQUFHcG9DLEVBQUVDLEVBQUVDLEdBQUdlLEVBQUVvd0IsT0FBT3J4QixFQUFFaUIsS0FBRUEsRUFBRTZuQyxHQUFHNW9DLEVBQUU2ZCxLQUFLN2QsRUFBRXNvQixJQUFJdG9CLEVBQUU2bkMsTUFBTSxLQUFLL25DLEVBQUVzakMsS0FBS3JpQyxJQUFLb25DLElBQUlELEdBQUdwb0MsRUFBRUMsRUFBRUMsR0FBR2UsRUFBRW93QixPQUFPcnhCLEVBQVNpQixFQUFDLENBQUMsU0FBUzJPLEVBQUU1UCxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHLE9BQUcsT0FBT2hCLEdBQUcsSUFBSUEsRUFBRXVyQixLQUNqZnZyQixFQUFFZ3hCLFVBQVV3QyxnQkFBZ0J2ekIsRUFBRXV6QixlQUFleHpCLEVBQUVneEIsVUFBVThYLGlCQUFpQjdvQyxFQUFFNm9DLGlCQUFzQjlvQyxFQUFFK29DLEdBQUc5b0MsRUFBRUYsRUFBRXNqQyxLQUFLcmlDLElBQUtvd0IsT0FBT3J4QixFQUFFQyxLQUFFQSxFQUFFaUIsRUFBRWpCLEVBQUVDLEVBQUU2c0IsVUFBVSxLQUFNc0UsT0FBT3J4QixFQUFTQyxFQUFDLENBQUMsU0FBU2dDLEVBQUVqQyxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFTSxHQUFHLE9BQUcsT0FBT3RCLEdBQUcsSUFBSUEsRUFBRXVyQixNQUFXdnJCLEVBQUVncEMsR0FBRy9vQyxFQUFFRixFQUFFc2pDLEtBQUtyaUMsRUFBRU0sSUFBSzh2QixPQUFPcnhCLEVBQUVDLEtBQUVBLEVBQUVpQixFQUFFakIsRUFBRUMsSUFBS214QixPQUFPcnhCLEVBQVNDLEVBQUMsQ0FBQyxTQUFTNEQsRUFBRTdELEVBQUVDLEVBQUVDLEdBQUcsR0FBRyxpQkFBa0JELEdBQUcsS0FBS0EsR0FBRyxpQkFBa0JBLEVBQUUsT0FBT0EsRUFBRTRvQyxHQUFHLEdBQUc1b0MsRUFBRUQsRUFBRXNqQyxLQUFLcGpDLElBQUtteEIsT0FBT3J4QixFQUFFQyxFQUFFLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFMG9CLFVBQVUsS0FBS3RrQixFQUFHLE9BQU9uRSxFQUFFNG9DLEdBQUc3b0MsRUFBRThkLEtBQUs5ZCxFQUFFdW9CLElBQUl2b0IsRUFBRThuQyxNQUFNLEtBQUsvbkMsRUFBRXNqQyxLQUFLcGpDLElBQ2pmbW9DLElBQUlELEdBQUdwb0MsRUFBRSxLQUFLQyxHQUFHQyxFQUFFbXhCLE9BQU9yeEIsRUFBRUUsRUFBRSxLQUFLc1EsRUFBRyxPQUFPdlEsRUFBRStvQyxHQUFHL29DLEVBQUVELEVBQUVzakMsS0FBS3BqQyxJQUFLbXhCLE9BQU9yeEIsRUFBRUMsRUFBRSxLQUFLK0YsRUFBaUIsT0FBT25DLEVBQUU3RCxHQUFFaUIsRUFBbkJoQixFQUFFMHJCLE9BQW1CMXJCLEVBQUV5ckIsVUFBVXhyQixHQUFHLEdBQUcwSixHQUFHM0osSUFBSXdHLEVBQUd4RyxHQUFHLE9BQU9BLEVBQUVncEMsR0FBR2hwQyxFQUFFRCxFQUFFc2pDLEtBQUtwakMsRUFBRSxPQUFRbXhCLE9BQU9yeEIsRUFBRUMsRUFBRXVvQyxHQUFHeG9DLEVBQUVDLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FBQyxTQUFTaU0sRUFBRWxNLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUcsSUFBSUMsRUFBRSxPQUFPakIsRUFBRUEsRUFBRXVvQixJQUFJLEtBQUssR0FBRyxpQkFBa0J0b0IsR0FBRyxLQUFLQSxHQUFHLGlCQUFrQkEsRUFBRSxPQUFPLE9BQU9nQixFQUFFLEtBQUtnQyxFQUFFbEQsRUFBRUMsRUFBRSxHQUFHQyxFQUFFZSxHQUFHLEdBQUcsaUJBQWtCZixHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFeW9CLFVBQVUsS0FBS3RrQixFQUFHLE9BQU9uRSxFQUFFc29CLE1BQU10bkIsRUFBRXVPLEVBQUV6UCxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHLEtBQUssS0FBS3VQLEVBQUcsT0FBT3RRLEVBQUVzb0IsTUFBTXRuQixFQUFFME8sRUFBRTVQLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUcsS0FBSyxLQUFLK0UsRUFBRyxPQUFpQmtHLEVBQUVsTSxFQUNwZkMsR0FEd2VpQixFQUFFaEIsRUFBRXlyQixPQUN4ZXpyQixFQUFFd3JCLFVBQVV6cUIsR0FBRyxHQUFHMkksR0FBRzFKLElBQUl1RyxFQUFHdkcsR0FBRyxPQUFPLE9BQU9nQixFQUFFLEtBQUtlLEVBQUVqQyxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFLE1BQU11bkMsR0FBR3hvQyxFQUFFRSxFQUFFLENBQUMsT0FBTyxJQUFJLENBQUMsU0FBU21RLEVBQUVyUSxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxHQUFHLEdBQUcsaUJBQWtCRCxHQUFHLEtBQUtBLEdBQUcsaUJBQWtCQSxFQUFFLE9BQXdCaUMsRUFBRWpELEVBQW5CRCxFQUFFQSxFQUFFNnJCLElBQUkzckIsSUFBSSxLQUFXLEdBQUdlLEVBQUVDLEdBQUcsR0FBRyxpQkFBa0JELEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUUwbkIsVUFBVSxLQUFLdGtCLEVBQUcsT0FBMkNvTCxFQUFFeFAsRUFBdENELEVBQUVBLEVBQUU2ckIsSUFBSSxPQUFPNXFCLEVBQUV1bkIsSUFBSXRvQixFQUFFZSxFQUFFdW5CLE1BQU0sS0FBV3ZuQixFQUFFQyxHQUFHLEtBQUtzUCxFQUFHLE9BQTJDWixFQUFFM1AsRUFBdENELEVBQUVBLEVBQUU2ckIsSUFBSSxPQUFPNXFCLEVBQUV1bkIsSUFBSXRvQixFQUFFZSxFQUFFdW5CLE1BQU0sS0FBV3ZuQixFQUFFQyxHQUFHLEtBQUs4RSxFQUFpQixPQUFPcUssRUFBRXJRLEVBQUVDLEVBQUVDLEdBQUVxQixFQUF2Qk4sRUFBRTBxQixPQUF1QjFxQixFQUFFeXFCLFVBQVV4cUIsR0FBRyxHQUFHMEksR0FBRzNJLElBQUl3RixFQUFHeEYsR0FBRyxPQUF3QmdCLEVBQUVoQyxFQUFuQkQsRUFBRUEsRUFBRTZyQixJQUFJM3JCLElBQUksS0FBV2UsRUFBRUMsRUFBRSxNQUFNc25DLEdBQUd2b0MsRUFBRWdCLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FDOWYsU0FBUzRPLEVBQUUzTyxFQUFFVCxFQUFFeUMsRUFBRXVNLEdBQUcsSUFBSSxJQUFJRyxFQUFFLEtBQUszTixFQUFFLEtBQUt3SyxFQUFFaE0sRUFBRW9GLEVBQUVwRixFQUFFLEVBQUV1RyxFQUFFLEtBQUssT0FBT3lGLEdBQUc1RyxFQUFFM0MsRUFBRXhDLE9BQU9tRixJQUFJLENBQUM0RyxFQUFFazhCLE1BQU05aUMsR0FBR21CLEVBQUV5RixFQUFFQSxFQUFFLE1BQU16RixFQUFFeUYsRUFBRWlsQixRQUFRLElBQUk3aEIsRUFBRTNELEVBQUVoTCxFQUFFdUwsRUFBRXZKLEVBQUUyQyxHQUFHNEosR0FBRyxHQUFHLE9BQU9JLEVBQUUsQ0FBQyxPQUFPcEQsSUFBSUEsRUFBRXpGLEdBQUcsS0FBSyxDQUFDaEgsR0FBR3lNLEdBQUcsT0FBT29ELEVBQUV1aEIsV0FBV254QixFQUFFaUIsRUFBRXVMLEdBQUdoTSxFQUFFYyxFQUFFc08sRUFBRXBQLEVBQUVvRixHQUFHLE9BQU81RCxFQUFFMk4sRUFBRUMsRUFBRTVOLEVBQUV5dkIsUUFBUTdoQixFQUFFNU4sRUFBRTROLEVBQUVwRCxFQUFFekYsQ0FBQyxDQUFDLEdBQUduQixJQUFJM0MsRUFBRXhDLE9BQU8sT0FBT1IsRUFBRWdCLEVBQUV1TCxHQUFHcEQsSUFBR2c1QixHQUFHbmhDLEVBQUUyRSxHQUFHK0osRUFBRSxHQUFHLE9BQU9uRCxFQUFFLENBQUMsS0FBSzVHLEVBQUUzQyxFQUFFeEMsT0FBT21GLElBQWtCLFFBQWQ0RyxFQUFFNUksRUFBRTNDLEVBQUVnQyxFQUFFMkMsR0FBRzRKLE1BQWNoUCxFQUFFYyxFQUFFa0wsRUFBRWhNLEVBQUVvRixHQUFHLE9BQU81RCxFQUFFMk4sRUFBRW5ELEVBQUV4SyxFQUFFeXZCLFFBQVFqbEIsRUFBRXhLLEVBQUV3SyxHQUFjLE9BQVhwRCxJQUFHZzVCLEdBQUduaEMsRUFBRTJFLEdBQVUrSixDQUFDLENBQUMsSUFBSW5ELEVBQUV4TCxFQUFFQyxFQUFFdUwsR0FBRzVHLEVBQUUzQyxFQUFFeEMsT0FBT21GLElBQXNCLFFBQWxCbUIsRUFBRXFKLEVBQUU1RCxFQUFFdkwsRUFBRTJFLEVBQUUzQyxFQUFFMkMsR0FBRzRKLE1BQWN6UCxHQUFHLE9BQU9nSCxFQUFFb3FCLFdBQVcza0IsRUFBRXVtQixPQUFPLE9BQ3ZmaHNCLEVBQUV3aEIsSUFBSTNpQixFQUFFbUIsRUFBRXdoQixLQUFLL25CLEVBQUVjLEVBQUV5RixFQUFFdkcsRUFBRW9GLEdBQUcsT0FBTzVELEVBQUUyTixFQUFFNUksRUFBRS9FLEVBQUV5dkIsUUFBUTFxQixFQUFFL0UsRUFBRStFLEdBQXVELE9BQXBEaEgsR0FBR3lNLEVBQUVvZSxTQUFRLFNBQVM3cUIsR0FBRyxPQUFPQyxFQUFFaUIsRUFBRWxCLEVBQUUsSUFBR3FKLElBQUdnNUIsR0FBR25oQyxFQUFFMkUsR0FBVStKLENBQUMsQ0FBQyxTQUFTOUssRUFBRTVELEVBQUVULEVBQUV5QyxFQUFFdU0sR0FBRyxJQUFJRyxFQUFFbkosRUFBR3ZELEdBQUcsR0FBRyxtQkFBb0IwTSxFQUFFLE1BQU1oUCxNQUFNdVAsRUFBRSxNQUFrQixHQUFHLE9BQWZqTixFQUFFME0sRUFBRXZOLEtBQUthLElBQWMsTUFBTXRDLE1BQU11UCxFQUFFLE1BQU0sSUFBSSxJQUFJMUQsRUFBRW1ELEVBQUUsS0FBSzNOLEVBQUV4QixFQUFFb0YsRUFBRXBGLEVBQUUsRUFBRXVHLEVBQUUsS0FBSzZJLEVBQUUzTSxFQUFFckIsT0FBTyxPQUFPSSxJQUFJNE4sRUFBRXZPLEtBQUt1RSxJQUFJZ0ssRUFBRTNNLEVBQUVyQixPQUFPLENBQUNJLEVBQUUwbUMsTUFBTTlpQyxHQUFHbUIsRUFBRS9FLEVBQUVBLEVBQUUsTUFBTStFLEVBQUUvRSxFQUFFeXZCLFFBQVEsSUFBSTVzQixFQUFFb0gsRUFBRWhMLEVBQUVlLEVBQUU0TixFQUFFeFAsTUFBTW9QLEdBQUcsR0FBRyxPQUFPM0ssRUFBRSxDQUFDLE9BQU83QyxJQUFJQSxFQUFFK0UsR0FBRyxLQUFLLENBQUNoSCxHQUFHaUMsR0FBRyxPQUFPNkMsRUFBRXNzQixXQUFXbnhCLEVBQUVpQixFQUFFZSxHQUFHeEIsRUFBRWMsRUFBRXVELEVBQUVyRSxFQUFFb0YsR0FBRyxPQUFPNEcsRUFBRW1ELEVBQUU5SyxFQUFFMkgsRUFBRWlsQixRQUFRNXNCLEVBQUUySCxFQUFFM0gsRUFBRTdDLEVBQUUrRSxDQUFDLENBQUMsR0FBRzZJLEVBQUV2TyxLQUFLLE9BQU9wQixFQUFFZ0IsRUFDemZlLEdBQUdvSCxJQUFHZzVCLEdBQUduaEMsRUFBRTJFLEdBQUcrSixFQUFFLEdBQUcsT0FBTzNOLEVBQUUsQ0FBQyxNQUFNNE4sRUFBRXZPLEtBQUt1RSxJQUFJZ0ssRUFBRTNNLEVBQUVyQixPQUF3QixRQUFqQmdPLEVBQUVoTSxFQUFFM0MsRUFBRTJPLEVBQUV4UCxNQUFNb1AsTUFBY2hQLEVBQUVjLEVBQUVzTyxFQUFFcFAsRUFBRW9GLEdBQUcsT0FBTzRHLEVBQUVtRCxFQUFFQyxFQUFFcEQsRUFBRWlsQixRQUFRN2hCLEVBQUVwRCxFQUFFb0QsR0FBYyxPQUFYeEcsSUFBR2c1QixHQUFHbmhDLEVBQUUyRSxHQUFVK0osQ0FBQyxDQUFDLElBQUkzTixFQUFFaEIsRUFBRUMsRUFBRWUsSUFBSTROLEVBQUV2TyxLQUFLdUUsSUFBSWdLLEVBQUUzTSxFQUFFckIsT0FBNEIsUUFBckJnTyxFQUFFUSxFQUFFcE8sRUFBRWYsRUFBRTJFLEVBQUVnSyxFQUFFeFAsTUFBTW9QLE1BQWN6UCxHQUFHLE9BQU82UCxFQUFFdWhCLFdBQVdudkIsRUFBRSt3QixPQUFPLE9BQU9uakIsRUFBRTJZLElBQUkzaUIsRUFBRWdLLEVBQUUyWSxLQUFLL25CLEVBQUVjLEVBQUVzTyxFQUFFcFAsRUFBRW9GLEdBQUcsT0FBTzRHLEVBQUVtRCxFQUFFQyxFQUFFcEQsRUFBRWlsQixRQUFRN2hCLEVBQUVwRCxFQUFFb0QsR0FBdUQsT0FBcEQ3UCxHQUFHaUMsRUFBRTRvQixTQUFRLFNBQVM3cUIsR0FBRyxPQUFPQyxFQUFFaUIsRUFBRWxCLEVBQUUsSUFBR3FKLElBQUdnNUIsR0FBR25oQyxFQUFFMkUsR0FBVStKLENBQUMsQ0FHM1QsT0FINFQsU0FBU3pLLEVBQUVuRixFQUFFaUIsRUFBRU0sRUFBRTJCLEdBQWtGLEdBQS9FLGlCQUFrQjNCLEdBQUcsT0FBT0EsR0FBR0EsRUFBRXdjLE9BQU9sWixHQUFJLE9BQU90RCxFQUFFaW5CLE1BQU1qbkIsRUFBRUEsRUFBRXdtQyxNQUFNaGIsVUFBYSxpQkFBa0J4ckIsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRW9uQixVQUFVLEtBQUt0a0IsRUFBR3JFLEVBQUUsQ0FBQyxJQUFJLElBQUl5UCxFQUM3aEJsTyxFQUFFaW5CLElBQUk1WSxFQUFFM08sRUFBRSxPQUFPMk8sR0FBRyxDQUFDLEdBQUdBLEVBQUU0WSxNQUFNL1ksRUFBRSxDQUFVLElBQVRBLEVBQUVsTyxFQUFFd2MsUUFBWWxaLEdBQUksR0FBRyxJQUFJK0ssRUFBRTRiLElBQUksQ0FBQ3RyQixFQUFFRixFQUFFNFAsRUFBRThoQixVQUFTendCLEVBQUVDLEVBQUUwTyxFQUFFck8sRUFBRXdtQyxNQUFNaGIsV0FBWXNFLE9BQU9yeEIsRUFBRUEsRUFBRWlCLEVBQUUsTUFBTWpCLENBQUMsT0FBTyxHQUFHNFAsRUFBRWt6QixjQUFjcnpCLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVrWixXQUFXM2lCLEdBQUl5aUMsR0FBR2g1QixLQUFLRyxFQUFFbU8sS0FBSyxDQUFDN2QsRUFBRUYsRUFBRTRQLEVBQUU4aEIsVUFBU3p3QixFQUFFQyxFQUFFME8sRUFBRXJPLEVBQUV3bUMsUUFBU00sSUFBSUQsR0FBR3BvQyxFQUFFNFAsRUFBRXJPLEdBQUdOLEVBQUVvd0IsT0FBT3J4QixFQUFFQSxFQUFFaUIsRUFBRSxNQUFNakIsQ0FBQyxDQUFDRSxFQUFFRixFQUFFNFAsR0FBRyxLQUFLLENBQU0zUCxFQUFFRCxFQUFFNFAsR0FBR0EsRUFBRUEsRUFBRThoQixPQUFPLENBQUNud0IsRUFBRXdjLE9BQU9sWixJQUFJNUQsRUFBRWdvQyxHQUFHMW5DLEVBQUV3bUMsTUFBTWhiLFNBQVMvc0IsRUFBRXNqQyxLQUFLcGdDLEVBQUUzQixFQUFFaW5CLE1BQU82SSxPQUFPcnhCLEVBQUVBLEVBQUVpQixLQUFJaUMsRUFBRTRsQyxHQUFHdm5DLEVBQUV3YyxLQUFLeGMsRUFBRWluQixJQUFJam5CLEVBQUV3bUMsTUFBTSxLQUFLL25DLEVBQUVzakMsS0FBS3BnQyxJQUFLbWxDLElBQUlELEdBQUdwb0MsRUFBRWlCLEVBQUVNLEdBQUcyQixFQUFFbXVCLE9BQU9yeEIsRUFBRUEsRUFBRWtELEVBQUUsQ0FBQyxPQUFPekMsRUFBRVQsR0FBRyxLQUFLd1EsRUFBR3hRLEVBQUUsQ0FBQyxJQUFJNFAsRUFBRXJPLEVBQUVpbkIsSUFBSSxPQUN6ZnZuQixHQUFHLENBQUMsR0FBR0EsRUFBRXVuQixNQUFNNVksRUFBRSxJQUFHLElBQUkzTyxFQUFFdXFCLEtBQUt2cUIsRUFBRWd3QixVQUFVd0MsZ0JBQWdCbHlCLEVBQUVreUIsZUFBZXh5QixFQUFFZ3dCLFVBQVU4WCxpQkFBaUJ4bkMsRUFBRXduQyxlQUFlLENBQUM3b0MsRUFBRUYsRUFBRWlCLEVBQUV5d0IsVUFBU3p3QixFQUFFQyxFQUFFRCxFQUFFTSxFQUFFd3JCLFVBQVUsS0FBTXNFLE9BQU9yeEIsRUFBRUEsRUFBRWlCLEVBQUUsTUFBTWpCLENBQUMsQ0FBTUUsRUFBRUYsRUFBRWlCLEdBQUcsS0FBSyxDQUFNaEIsRUFBRUQsRUFBRWlCLEdBQUdBLEVBQUVBLEVBQUV5d0IsT0FBTyxFQUFDendCLEVBQUUrbkMsR0FBR3puQyxFQUFFdkIsRUFBRXNqQyxLQUFLcGdDLElBQUttdUIsT0FBT3J4QixFQUFFQSxFQUFFaUIsQ0FBQyxDQUFDLE9BQU9SLEVBQUVULEdBQUcsS0FBS2dHLEVBQUcsT0FBaUJiLEVBQUVuRixFQUFFaUIsR0FBZDJPLEVBQUVyTyxFQUFFb3FCLE9BQWNwcUIsRUFBRW1xQixVQUFVeG9CLEdBQUcsR0FBRzBHLEdBQUdySSxHQUFHLE9BQU9zTyxFQUFFN1AsRUFBRWlCLEVBQUVNLEVBQUUyQixHQUFHLEdBQUd1RCxFQUFHbEYsR0FBRyxPQUFPdUQsRUFBRTlFLEVBQUVpQixFQUFFTSxFQUFFMkIsR0FBR3NsQyxHQUFHeG9DLEVBQUV1QixFQUFFLENBQUMsTUFBTSxpQkFBa0JBLEdBQUcsS0FBS0EsR0FBRyxpQkFBa0JBLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxPQUFPTixHQUFHLElBQUlBLEVBQUV1cUIsS0FBS3RyQixFQUFFRixFQUFFaUIsRUFBRXl3QixVQUFTendCLEVBQUVDLEVBQUVELEVBQUVNLElBQUs4dkIsT0FBT3J4QixFQUFFQSxFQUFFaUIsSUFDbmZmLEVBQUVGLEVBQUVpQixJQUFHQSxFQUFFNG5DLEdBQUd0bkMsRUFBRXZCLEVBQUVzakMsS0FBS3BnQyxJQUFLbXVCLE9BQU9yeEIsRUFBRUEsRUFBRWlCLEdBQUdSLEVBQUVULElBQUlFLEVBQUVGLEVBQUVpQixFQUFFLENBQVMsQ0FBQyxJQUFJaW9DLEdBQUdSLElBQUcsR0FBSVMsR0FBR1QsSUFBRyxHQUFJVSxHQUFHLENBQUMsRUFBRUMsR0FBRzdJLEdBQUc0SSxJQUFJRSxHQUFHOUksR0FBRzRJLElBQUlHLEdBQUcvSSxHQUFHNEksSUFBSSxTQUFTSSxHQUFHeHBDLEdBQUcsR0FBR0EsSUFBSW9wQyxHQUFHLE1BQU14b0MsTUFBTXVQLEVBQUUsTUFBTSxPQUFPblEsQ0FBQyxDQUFDLFNBQVN5cEMsR0FBR3pwQyxFQUFFQyxHQUF5QyxPQUF0Q3NRLEdBQUVnNUIsR0FBR3RwQyxHQUFHc1EsR0FBRSs0QixHQUFHdHBDLEdBQUd1USxHQUFFODRCLEdBQUdELElBQUlwcEMsRUFBRUMsRUFBRWdTLFVBQW1CLEtBQUssRUFBRSxLQUFLLEdBQUdoUyxHQUFHQSxFQUFFQSxFQUFFaVAsaUJBQWlCalAsRUFBRStzQixhQUFhbmlCLEdBQUcsS0FBSyxJQUFJLE1BQU0sUUFBa0U1SyxFQUFFNEssR0FBckM1SyxHQUF2QkQsRUFBRSxJQUFJQSxFQUFFQyxFQUFFb0ssV0FBV3BLLEdBQU0rc0IsY0FBYyxLQUFLaHRCLEVBQUVBLEVBQUVrSyxTQUFrQnhCLEdBQUUyZ0MsSUFBSTk0QixHQUFFODRCLEdBQUdwcEMsRUFBRSxDQUFDLFNBQVN5cEMsS0FBS2hoQyxHQUFFMmdDLElBQUkzZ0MsR0FBRTRnQyxJQUFJNWdDLEdBQUU2Z0MsR0FBRyxDQUNuYixTQUFTSSxHQUFHM3BDLEdBQUd3cEMsR0FBR0QsR0FBRzVYLFNBQVMsSUFBSTF4QixFQUFFdXBDLEdBQUdILEdBQUcxWCxTQUFhenhCLEVBQUUySyxHQUFHNUssRUFBRUQsRUFBRStkLE1BQU05ZCxJQUFJQyxJQUFJcVEsR0FBRSs0QixHQUFHdHBDLEdBQUd1USxHQUFFODRCLEdBQUducEMsR0FBRyxDQUFDLFNBQVMwcEMsR0FBRzVwQyxHQUFHc3BDLEdBQUczWCxVQUFVM3hCLElBQUkwSSxHQUFFMmdDLElBQUkzZ0MsR0FBRTRnQyxJQUFJLENBQUMsSUFBSXhqQyxHQUFFMDZCLEdBQUcsR0FDckosU0FBU3FKLEdBQUc3cEMsR0FBRyxJQUFJLElBQUlDLEVBQUVELEVBQUUsT0FBT0MsR0FBRyxDQUFDLEdBQUcsS0FBS0EsRUFBRXVyQixJQUFJLENBQUMsSUFBSXRyQixFQUFFRCxFQUFFc3hCLGNBQWMsR0FBRyxPQUFPcnhCLElBQW1CLFFBQWZBLEVBQUVBLEVBQUVzeEIsYUFBcUIsT0FBT3R4QixFQUFFdWlCLE1BQU0sT0FBT3ZpQixFQUFFdWlCLE1BQU0sT0FBT3hpQixDQUFDLE1BQU0sR0FBRyxLQUFLQSxFQUFFdXJCLFVBQUssSUFBU3ZyQixFQUFFeWpDLGNBQWNvRyxhQUFhLEdBQUcsSUFBYSxJQUFSN3BDLEVBQUVxeEIsT0FBVyxPQUFPcnhCLE9BQU8sR0FBRyxPQUFPQSxFQUFFd3hCLE1BQU0sQ0FBQ3h4QixFQUFFd3hCLE1BQU1KLE9BQU9weEIsRUFBRUEsRUFBRUEsRUFBRXd4QixNQUFNLFFBQVEsQ0FBQyxHQUFHeHhCLElBQUlELEVBQUUsTUFBTSxLQUFLLE9BQU9DLEVBQUV5eEIsU0FBUyxDQUFDLEdBQUcsT0FBT3p4QixFQUFFb3hCLFFBQVFweEIsRUFBRW94QixTQUFTcnhCLEVBQUUsT0FBTyxLQUFLQyxFQUFFQSxFQUFFb3hCLE1BQU0sQ0FBQ3B4QixFQUFFeXhCLFFBQVFMLE9BQU9weEIsRUFBRW94QixPQUFPcHhCLEVBQUVBLEVBQUV5eEIsT0FBTyxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUlxWSxHQUFHLEdBQ3JjLFNBQVNDLEtBQUssSUFBSSxJQUFJaHFDLEVBQUUsRUFBRUEsRUFBRStwQyxHQUFHcnBDLE9BQU9WLElBQUkrcEMsR0FBRy9wQyxHQUFHaXFDLDhCQUE4QixLQUFLRixHQUFHcnBDLE9BQU8sQ0FBQyxDQUFDLElBQUl3cEMsR0FBRzlsQyxFQUFHK2xDLHVCQUF1QkMsR0FBR2htQyxFQUFHdXZCLHdCQUF3QjBXLEdBQUcsRUFBRTlrQyxHQUFFLEtBQUtnSCxHQUFFLEtBQUt4SCxHQUFFLEtBQUt1bEMsSUFBRyxFQUFHQyxJQUFHLEVBQUdDLEdBQUcsRUFBRUMsR0FBRyxFQUFFLFNBQVNwNEIsS0FBSSxNQUFNelIsTUFBTXVQLEVBQUUsS0FBTSxDQUFDLFNBQVN1NkIsR0FBRzFxQyxFQUFFQyxHQUFHLEdBQUcsT0FBT0EsRUFBRSxPQUFNLEVBQUcsSUFBSSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVELEVBQUVTLFFBQVFSLEVBQUVGLEVBQUVVLE9BQU9SLElBQUksSUFBSTA1QixHQUFHNTVCLEVBQUVFLEdBQUdELEVBQUVDLElBQUksT0FBTSxFQUFHLE9BQU0sQ0FBRSxDQUNoVyxTQUFTeXFDLEdBQUczcUMsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRUMsRUFBRUssR0FBeUgsR0FBdEg4b0MsR0FBRzlvQyxFQUFFZ0UsR0FBRXRGLEVBQUVBLEVBQUVzeEIsY0FBYyxLQUFLdHhCLEVBQUV1bEMsWUFBWSxLQUFLdmxDLEVBQUUya0MsTUFBTSxFQUFFc0YsR0FBR3ZZLFFBQVEsT0FBTzN4QixHQUFHLE9BQU9BLEVBQUV1eEIsY0FBY3FaLEdBQUdDLEdBQUc3cUMsRUFBRUUsRUFBRWUsRUFBRUMsR0FBTXFwQyxHQUFHLENBQUNocEMsRUFBRSxFQUFFLEVBQUUsQ0FBWSxHQUFYZ3BDLElBQUcsRUFBR0MsR0FBRyxFQUFLLElBQUlqcEMsRUFBRSxNQUFNWCxNQUFNdVAsRUFBRSxNQUFNNU8sR0FBRyxFQUFFd0QsR0FBRXdILEdBQUUsS0FBS3RNLEVBQUV1bEMsWUFBWSxLQUFLMEUsR0FBR3ZZLFFBQVFtWixHQUFHOXFDLEVBQUVFLEVBQUVlLEVBQUVDLEVBQUUsT0FBT3FwQyxHQUFHLENBQStELEdBQTlETCxHQUFHdlksUUFBUW9aLEdBQUc5cUMsRUFBRSxPQUFPc00sSUFBRyxPQUFPQSxHQUFFMUssS0FBS3dvQyxHQUFHLEVBQUV0bEMsR0FBRXdILEdBQUVoSCxHQUFFLEtBQUsra0MsSUFBRyxFQUFNcnFDLEVBQUUsTUFBTVcsTUFBTXVQLEVBQUUsTUFBTSxPQUFPblEsQ0FBQyxDQUFDLFNBQVNnckMsS0FBSyxJQUFJaHJDLEVBQUUsSUFBSXdxQyxHQUFRLE9BQUxBLEdBQUcsRUFBU3hxQyxDQUFDLENBQy9ZLFNBQVNpckMsS0FBSyxJQUFJanJDLEVBQUUsQ0FBQ3V4QixjQUFjLEtBQUtrVSxVQUFVLEtBQUt5RixVQUFVLEtBQUtDLE1BQU0sS0FBS3RwQyxLQUFLLE1BQThDLE9BQXhDLE9BQU9rRCxHQUFFUSxHQUFFZ3NCLGNBQWN4c0IsR0FBRS9FLEVBQUUrRSxHQUFFQSxHQUFFbEQsS0FBSzdCLEVBQVMrRSxFQUFDLENBQUMsU0FBU3FtQyxLQUFLLEdBQUcsT0FBTzcrQixHQUFFLENBQUMsSUFBSXZNLEVBQUV1RixHQUFFNnJCLFVBQVVweEIsRUFBRSxPQUFPQSxFQUFFQSxFQUFFdXhCLGNBQWMsSUFBSSxNQUFNdnhCLEVBQUV1TSxHQUFFMUssS0FBSyxJQUFJNUIsRUFBRSxPQUFPOEUsR0FBRVEsR0FBRWdzQixjQUFjeHNCLEdBQUVsRCxLQUFLLEdBQUcsT0FBTzVCLEVBQUU4RSxHQUFFOUUsRUFBRXNNLEdBQUV2TSxNQUFNLENBQUMsR0FBRyxPQUFPQSxFQUFFLE1BQU1ZLE1BQU11UCxFQUFFLE1BQVVuUSxFQUFFLENBQUN1eEIsZUFBUGhsQixHQUFFdk0sR0FBcUJ1eEIsY0FBY2tVLFVBQVVsNUIsR0FBRWs1QixVQUFVeUYsVUFBVTMrQixHQUFFMitCLFVBQVVDLE1BQU01K0IsR0FBRTQrQixNQUFNdHBDLEtBQUssTUFBTSxPQUFPa0QsR0FBRVEsR0FBRWdzQixjQUFjeHNCLEdBQUUvRSxFQUFFK0UsR0FBRUEsR0FBRWxELEtBQUs3QixDQUFDLENBQUMsT0FBTytFLEVBQUMsQ0FDamUsU0FBU3NtQyxHQUFHcnJDLEVBQUVDLEdBQUcsTUFBTSxtQkFBb0JBLEVBQUVBLEVBQUVELEdBQUdDLENBQUMsQ0FDbkQsU0FBU3FyQyxHQUFHdHJDLEdBQUcsSUFBSUMsRUFBRW1yQyxLQUFLbHJDLEVBQUVELEVBQUVrckMsTUFBTSxHQUFHLE9BQU9qckMsRUFBRSxNQUFNVSxNQUFNdVAsRUFBRSxNQUFNalEsRUFBRXFyQyxvQkFBb0J2ckMsRUFBRSxJQUFJaUIsRUFBRXNMLEdBQUVyTCxFQUFFRCxFQUFFaXFDLFVBQVUzcEMsRUFBRXJCLEVBQUUybEMsUUFBUSxHQUFHLE9BQU90a0MsRUFBRSxDQUFDLEdBQUcsT0FBT0wsRUFBRSxDQUFDLElBQUlULEVBQUVTLEVBQUVXLEtBQUtYLEVBQUVXLEtBQUtOLEVBQUVNLEtBQUtOLEVBQUVNLEtBQUtwQixDQUFDLENBQUNRLEVBQUVpcUMsVUFBVWhxQyxFQUFFSyxFQUFFckIsRUFBRTJsQyxRQUFRLElBQUksQ0FBQyxHQUFHLE9BQU8za0MsRUFBRSxDQUFDSyxFQUFFTCxFQUFFVyxLQUFLWixFQUFFQSxFQUFFd2tDLFVBQVUsSUFBSXZpQyxFQUFFekMsRUFBRSxLQUFLZ1AsRUFBRSxLQUFLRyxFQUFFck8sRUFBRSxFQUFFLENBQUMsSUFBSVUsRUFBRTJOLEVBQUVzMkIsS0FBSyxJQUFJbUUsR0FBR3BvQyxLQUFLQSxFQUFFLE9BQU93TixJQUFJQSxFQUFFQSxFQUFFNU4sS0FBSyxDQUFDcWtDLEtBQUssRUFBRXhwQixPQUFPOU0sRUFBRThNLE9BQU84dUIsY0FBYzU3QixFQUFFNDdCLGNBQWNDLFdBQVc3N0IsRUFBRTY3QixXQUFXNXBDLEtBQUssT0FBT1osRUFBRTJPLEVBQUU0N0IsY0FBYzU3QixFQUFFNjdCLFdBQVd6ckMsRUFBRWlCLEVBQUUyTyxFQUFFOE0sWUFBWSxDQUFDLElBQUk3WSxFQUFFLENBQUNxaUMsS0FBS2prQyxFQUFFeWEsT0FBTzlNLEVBQUU4TSxPQUFPOHVCLGNBQWM1N0IsRUFBRTQ3QixjQUNuZ0JDLFdBQVc3N0IsRUFBRTY3QixXQUFXNXBDLEtBQUssTUFBTSxPQUFPNE4sR0FBR3ZNLEVBQUV1TSxFQUFFNUwsRUFBRXBELEVBQUVRLEdBQUd3TyxFQUFFQSxFQUFFNU4sS0FBS2dDLEVBQUUwQixHQUFFcS9CLE9BQU8zaUMsRUFBRXVrQyxJQUFJdmtDLENBQUMsQ0FBQzJOLEVBQUVBLEVBQUUvTixJQUFJLE9BQU8sT0FBTytOLEdBQUdBLElBQUlyTyxHQUFHLE9BQU9rTyxFQUFFaFAsRUFBRVEsRUFBRXdPLEVBQUU1TixLQUFLcUIsRUFBRTAyQixHQUFHMzRCLEVBQUVoQixFQUFFc3hCLGlCQUFpQnNULElBQUcsR0FBSTVrQyxFQUFFc3hCLGNBQWN0d0IsRUFBRWhCLEVBQUV3bEMsVUFBVWhsQyxFQUFFUixFQUFFaXJDLFVBQVV6N0IsRUFBRXZQLEVBQUV3ckMsa0JBQWtCenFDLENBQUMsQ0FBaUIsR0FBRyxRQUFuQmpCLEVBQUVFLEVBQUVrbEMsYUFBd0IsQ0FBQ2xrQyxFQUFFbEIsRUFBRSxHQUFHdUIsRUFBRUwsRUFBRWdsQyxLQUFLM2dDLEdBQUVxL0IsT0FBT3JqQyxFQUFFaWxDLElBQUlqbEMsRUFBRUwsRUFBRUEsRUFBRVcsV0FBV1gsSUFBSWxCLEVBQUUsTUFBTSxPQUFPa0IsSUFBSWhCLEVBQUUwa0MsTUFBTSxHQUFHLE1BQU0sQ0FBQzNrQyxFQUFFc3hCLGNBQWNyeEIsRUFBRXlyQyxTQUFTLENBQzlYLFNBQVNDLEdBQUc1ckMsR0FBRyxJQUFJQyxFQUFFbXJDLEtBQUtsckMsRUFBRUQsRUFBRWtyQyxNQUFNLEdBQUcsT0FBT2pyQyxFQUFFLE1BQU1VLE1BQU11UCxFQUFFLE1BQU1qUSxFQUFFcXJDLG9CQUFvQnZyQyxFQUFFLElBQUlpQixFQUFFZixFQUFFeXJDLFNBQVN6cUMsRUFBRWhCLEVBQUUybEMsUUFBUXRrQyxFQUFFdEIsRUFBRXN4QixjQUFjLEdBQUcsT0FBT3J3QixFQUFFLENBQUNoQixFQUFFMmxDLFFBQVEsS0FBSyxJQUFJcGxDLEVBQUVTLEVBQUVBLEVBQUVXLEtBQUssR0FBR04sRUFBRXZCLEVBQUV1QixFQUFFZCxFQUFFaWMsUUFBUWpjLEVBQUVBLEVBQUVvQixXQUFXcEIsSUFBSVMsR0FBRzA0QixHQUFHcjRCLEVBQUV0QixFQUFFc3hCLGlCQUFpQnNULElBQUcsR0FBSTVrQyxFQUFFc3hCLGNBQWNod0IsRUFBRSxPQUFPdEIsRUFBRWlyQyxZQUFZanJDLEVBQUV3bEMsVUFBVWxrQyxHQUFHckIsRUFBRXdyQyxrQkFBa0JucUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQ0EsRUFBRU4sRUFBRSxDQUFDLFNBQVM0cUMsS0FBSyxDQUNwVyxTQUFTQyxHQUFHOXJDLEVBQUVDLEdBQUcsSUFBSUMsRUFBRXFGLEdBQUV0RSxFQUFFbXFDLEtBQUtscUMsRUFBRWpCLElBQUlzQixHQUFHcTRCLEdBQUczNEIsRUFBRXN3QixjQUFjcndCLEdBQXNFLEdBQW5FSyxJQUFJTixFQUFFc3dCLGNBQWNyd0IsRUFBRTJqQyxJQUFHLEdBQUk1akMsRUFBRUEsRUFBRWtxQyxNQUFNWSxHQUFHQyxHQUFHenBDLEtBQUssS0FBS3JDLEVBQUVlLEVBQUVqQixHQUFHLENBQUNBLElBQU9pQixFQUFFZ3JDLGNBQWNoc0MsR0FBR3NCLEdBQUcsT0FBT3dELElBQXVCLEVBQXBCQSxHQUFFd3NCLGNBQWMvRixJQUFNLENBQXVELEdBQXREdHJCLEVBQUVveEIsT0FBTyxLQUFLNGEsR0FBRyxFQUFFQyxHQUFHNXBDLEtBQUssS0FBS3JDLEVBQUVlLEVBQUVDLEVBQUVqQixRQUFHLEVBQU8sTUFBUyxPQUFPNlQsR0FBRSxNQUFNbFQsTUFBTXVQLEVBQUUsTUFBTSxJQUFRLEdBQUhrNkIsS0FBUStCLEdBQUdsc0MsRUFBRUQsRUFBRWlCLEVBQUUsQ0FBQyxPQUFPQSxDQUFDLENBQUMsU0FBU2tyQyxHQUFHcHNDLEVBQUVDLEVBQUVDLEdBQUdGLEVBQUVzeEIsT0FBTyxNQUFNdHhCLEVBQUUsQ0FBQ2lzQyxZQUFZaHNDLEVBQUVJLE1BQU1ILEdBQW1CLFFBQWhCRCxFQUFFc0YsR0FBRWlnQyxjQUFzQnZsQyxFQUFFLENBQUNvc0MsV0FBVyxLQUFLQyxPQUFPLE1BQU0vbUMsR0FBRWlnQyxZQUFZdmxDLEVBQUVBLEVBQUVxc0MsT0FBTyxDQUFDdHNDLElBQWdCLFFBQVhFLEVBQUVELEVBQUVxc0MsUUFBZ0Jyc0MsRUFBRXFzQyxPQUFPLENBQUN0c0MsR0FBR0UsRUFBRXVILEtBQUt6SCxFQUFHLENBQ2xmLFNBQVNtc0MsR0FBR25zQyxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHaEIsRUFBRUksTUFBTUgsRUFBRUQsRUFBRWdzQyxZQUFZaHJDLEVBQUVzckMsR0FBR3RzQyxJQUFJdXNDLEdBQUd4c0MsRUFBRSxDQUFDLFNBQVNnc0MsR0FBR2hzQyxFQUFFQyxFQUFFQyxHQUFHLE9BQU9BLEdBQUUsV0FBV3FzQyxHQUFHdHNDLElBQUl1c0MsR0FBR3hzQyxFQUFFLEdBQUUsQ0FBQyxTQUFTdXNDLEdBQUd2c0MsR0FBRyxJQUFJQyxFQUFFRCxFQUFFaXNDLFlBQVlqc0MsRUFBRUEsRUFBRUssTUFBTSxJQUFJLElBQUlILEVBQUVELElBQUksT0FBTzI1QixHQUFHNTVCLEVBQUVFLEVBQUUsQ0FBQyxNQUFNZSxHQUFHLE9BQU0sQ0FBRSxDQUFDLENBQUMsU0FBU3VyQyxHQUFHeHNDLEdBQUcsSUFBSUMsRUFBRW9sQyxHQUFHcmxDLEVBQUUsR0FBRyxPQUFPQyxHQUFHa25DLEdBQUdsbkMsRUFBRUQsRUFBRSxHQUFHLEVBQUUsQ0FDbFEsU0FBU3lzQyxHQUFHenNDLEdBQUcsSUFBSUMsRUFBRWdyQyxLQUE4TSxNQUF6TSxtQkFBb0JqckMsSUFBSUEsRUFBRUEsS0FBS0MsRUFBRXN4QixjQUFjdHhCLEVBQUV3bEMsVUFBVXpsQyxFQUFFQSxFQUFFLENBQUM2bEMsUUFBUSxLQUFLVCxZQUFZLEtBQUtSLE1BQU0sRUFBRStHLFNBQVMsS0FBS0osb0JBQW9CRixHQUFHSyxrQkFBa0IxckMsR0FBR0MsRUFBRWtyQyxNQUFNbnJDLEVBQUVBLEVBQUVBLEVBQUUyckMsU0FBU3p0QixHQUFHM2IsS0FBSyxLQUFLZ0QsR0FBRXZGLEdBQVMsQ0FBQ0MsRUFBRXN4QixjQUFjdnhCLEVBQUUsQ0FDNVAsU0FBU2tzQyxHQUFHbHNDLEVBQUVDLEVBQUVDLEVBQUVlLEdBQThPLE9BQTNPakIsRUFBRSxDQUFDd3JCLElBQUl4ckIsRUFBRWtJLE9BQU9qSSxFQUFFeXNDLFFBQVF4c0MsRUFBRXlzQyxLQUFLMXJDLEVBQUVZLEtBQUssTUFBc0IsUUFBaEI1QixFQUFFc0YsR0FBRWlnQyxjQUFzQnZsQyxFQUFFLENBQUNvc0MsV0FBVyxLQUFLQyxPQUFPLE1BQU0vbUMsR0FBRWlnQyxZQUFZdmxDLEVBQUVBLEVBQUVvc0MsV0FBV3JzQyxFQUFFNkIsS0FBSzdCLEdBQW1CLFFBQWZFLEVBQUVELEVBQUVvc0MsWUFBb0Jwc0MsRUFBRW9zQyxXQUFXcnNDLEVBQUU2QixLQUFLN0IsR0FBR2lCLEVBQUVmLEVBQUUyQixLQUFLM0IsRUFBRTJCLEtBQUs3QixFQUFFQSxFQUFFNkIsS0FBS1osRUFBRWhCLEVBQUVvc0MsV0FBV3JzQyxHQUFXQSxDQUFDLENBQUMsU0FBUzRzQyxLQUFLLE9BQU94QixLQUFLN1osYUFBYSxDQUFDLFNBQVNzYixHQUFHN3NDLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUcsSUFBSUMsRUFBRStwQyxLQUFLMWxDLEdBQUUrckIsT0FBT3R4QixFQUFFa0IsRUFBRXF3QixjQUFjMmEsR0FBRyxFQUFFanNDLEVBQUVDLE9BQUUsT0FBTyxJQUFTZSxFQUFFLEtBQUtBLEVBQUUsQ0FDOVksU0FBUzZyQyxHQUFHOXNDLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUcsSUFBSUMsRUFBRWtxQyxLQUFLbnFDLE9BQUUsSUFBU0EsRUFBRSxLQUFLQSxFQUFFLElBQUlNLE9BQUUsRUFBTyxHQUFHLE9BQU9nTCxHQUFFLENBQUMsSUFBSTlMLEVBQUU4TCxHQUFFZ2xCLGNBQTBCLEdBQVpod0IsRUFBRWQsRUFBRWlzQyxRQUFXLE9BQU96ckMsR0FBR3lwQyxHQUFHenBDLEVBQUVSLEVBQUVrc0MsTUFBbUMsWUFBNUJ6ckMsRUFBRXF3QixjQUFjMmEsR0FBR2pzQyxFQUFFQyxFQUFFcUIsRUFBRU4sR0FBVSxDQUFDc0UsR0FBRStyQixPQUFPdHhCLEVBQUVrQixFQUFFcXdCLGNBQWMyYSxHQUFHLEVBQUVqc0MsRUFBRUMsRUFBRXFCLEVBQUVOLEVBQUUsQ0FBQyxTQUFTOHJDLEdBQUcvc0MsRUFBRUMsR0FBRyxPQUFPNHNDLEdBQUcsUUFBUSxFQUFFN3NDLEVBQUVDLEVBQUUsQ0FBQyxTQUFTOHJDLEdBQUcvckMsRUFBRUMsR0FBRyxPQUFPNnNDLEdBQUcsS0FBSyxFQUFFOXNDLEVBQUVDLEVBQUUsQ0FBQyxTQUFTK3NDLEdBQUdodEMsRUFBRUMsR0FBRyxPQUFPNnNDLEdBQUcsRUFBRSxFQUFFOXNDLEVBQUVDLEVBQUUsQ0FBQyxTQUFTZ3RDLEdBQUdqdEMsRUFBRUMsR0FBRyxPQUFPNnNDLEdBQUcsRUFBRSxFQUFFOXNDLEVBQUVDLEVBQUUsQ0FDaFgsU0FBU2l0QyxHQUFHbHRDLEVBQUVDLEdBQUcsTUFBRyxtQkFBb0JBLEdBQVNELEVBQUVBLElBQUlDLEVBQUVELEdBQUcsV0FBV0MsRUFBRSxLQUFLLEdBQUssTUFBT0EsR0FBcUJELEVBQUVBLElBQUlDLEVBQUUweEIsUUFBUTN4QixFQUFFLFdBQVdDLEVBQUUweEIsUUFBUSxJQUFJLFFBQTFFLENBQTJFLENBQUMsU0FBU3diLEdBQUdudEMsRUFBRUMsRUFBRUMsR0FBNkMsT0FBMUNBLEVBQUUsTUFBT0EsRUFBY0EsRUFBRXNNLE9BQU8sQ0FBQ3hNLElBQUksS0FBWThzQyxHQUFHLEVBQUUsRUFBRUksR0FBRzNxQyxLQUFLLEtBQUt0QyxFQUFFRCxHQUFHRSxFQUFFLENBQUMsU0FBU2t0QyxLQUFLLENBQUMsU0FBU0MsR0FBR3J0QyxFQUFFQyxHQUFHLElBQUlDLEVBQUVrckMsS0FBS25yQyxPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJZ0IsRUFBRWYsRUFBRXF4QixjQUFjLE9BQUcsT0FBT3R3QixHQUFHLE9BQU9oQixHQUFHeXFDLEdBQUd6cUMsRUFBRWdCLEVBQUUsSUFBV0EsRUFBRSxJQUFHZixFQUFFcXhCLGNBQWMsQ0FBQ3Z4QixFQUFFQyxHQUFVRCxFQUFDLENBQzdaLFNBQVNzdEMsR0FBR3R0QyxFQUFFQyxHQUFHLElBQUlDLEVBQUVrckMsS0FBS25yQyxPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJZ0IsRUFBRWYsRUFBRXF4QixjQUFjLE9BQUcsT0FBT3R3QixHQUFHLE9BQU9oQixHQUFHeXFDLEdBQUd6cUMsRUFBRWdCLEVBQUUsSUFBV0EsRUFBRSxJQUFHakIsRUFBRUEsSUFBSUUsRUFBRXF4QixjQUFjLENBQUN2eEIsRUFBRUMsR0FBVUQsRUFBQyxDQUFDLFNBQVN1dEMsR0FBR3Z0QyxFQUFFQyxFQUFFQyxHQUFHLE9BQUcsSUFBUSxHQUFIbXFDLEtBQWNycUMsRUFBRXlsQyxZQUFZemxDLEVBQUV5bEMsV0FBVSxFQUFHWixJQUFHLEdBQUk3a0MsRUFBRXV4QixjQUFjcnhCLElBQUUwNUIsR0FBRzE1QixFQUFFRCxLQUFLQyxFQUFFdVUsS0FBS2xQLEdBQUVxL0IsT0FBTzFrQyxFQUFFc21DLElBQUl0bUMsRUFBRUYsRUFBRXlsQyxXQUFVLEdBQVd4bEMsRUFBQyxDQUFDLFNBQVN1dEMsR0FBR3h0QyxFQUFFQyxHQUFHLElBQUlDLEVBQUVpSSxHQUFFQSxHQUFFLElBQUlqSSxHQUFHLEVBQUVBLEVBQUVBLEVBQUUsRUFBRUYsR0FBRSxHQUFJLElBQUlpQixFQUFFbXBDLEdBQUd4VyxXQUFXd1csR0FBR3hXLFdBQVcsQ0FBQyxFQUFFLElBQUk1ekIsR0FBRSxHQUFJQyxHQUFHLENBQUMsUUFBUWtJLEdBQUVqSSxFQUFFa3FDLEdBQUd4VyxXQUFXM3lCLENBQUMsQ0FBQyxDQUFDLFNBQVN3c0MsS0FBSyxPQUFPckMsS0FBSzdaLGFBQWEsQ0FDMWQsU0FBU21jLEdBQUcxdEMsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZSxFQUFFaW1DLEdBQUdsbkMsR0FBR0UsRUFBRSxDQUFDZ21DLEtBQUtqbEMsRUFBRXliLE9BQU94YyxFQUFFc3JDLGVBQWMsRUFBR0MsV0FBVyxLQUFLNXBDLEtBQUssTUFBUzhyQyxHQUFHM3RDLEdBQUc0dEMsR0FBRzN0QyxFQUFFQyxHQUF5QixRQUFkQSxFQUFFaWxDLEdBQUdubEMsRUFBRUMsRUFBRUMsRUFBRWUsTUFBdUJrbUMsR0FBR2puQyxFQUFFRixFQUFFaUIsRUFBWGtMLE1BQWdCMGhDLEdBQUczdEMsRUFBRUQsRUFBRWdCLEdBQUcsQ0FDL0ssU0FBU2lkLEdBQUdsZSxFQUFFQyxFQUFFQyxHQUFHLElBQUllLEVBQUVpbUMsR0FBR2xuQyxHQUFHa0IsRUFBRSxDQUFDZ2xDLEtBQUtqbEMsRUFBRXliLE9BQU94YyxFQUFFc3JDLGVBQWMsRUFBR0MsV0FBVyxLQUFLNXBDLEtBQUssTUFBTSxHQUFHOHJDLEdBQUczdEMsR0FBRzR0QyxHQUFHM3RDLEVBQUVpQixPQUFPLENBQUMsSUFBSUssRUFBRXZCLEVBQUVveEIsVUFBVSxHQUFHLElBQUlweEIsRUFBRTRrQyxRQUFRLE9BQU9yakMsR0FBRyxJQUFJQSxFQUFFcWpDLFFBQWlDLFFBQXhCcmpDLEVBQUV0QixFQUFFc3JDLHFCQUE4QixJQUFJLElBQUk5cUMsRUFBRVIsRUFBRXlyQyxrQkFBa0J4b0MsRUFBRTNCLEVBQUVkLEVBQUVQLEdBQXFDLEdBQWxDZ0IsRUFBRXNxQyxlQUFjLEVBQUd0cUMsRUFBRXVxQyxXQUFXdm9DLEVBQUswMkIsR0FBRzEyQixFQUFFekMsR0FBRyxDQUFDLElBQUlnUCxFQUFFeFAsRUFBRW1sQyxZQUErRSxPQUFuRSxPQUFPMzFCLEdBQUd2TyxFQUFFVyxLQUFLWCxFQUFFZ2tDLEdBQUdqbEMsS0FBS2lCLEVBQUVXLEtBQUs0TixFQUFFNU4sS0FBSzROLEVBQUU1TixLQUFLWCxRQUFHakIsRUFBRW1sQyxZQUFZbGtDLEVBQVEsQ0FBQyxDQUFDLE1BQU0wTyxHQUFHLENBQXdCLFFBQWQxUCxFQUFFaWxDLEdBQUdubEMsRUFBRUMsRUFBRWlCLEVBQUVELE1BQW9Ca21DLEdBQUdqbkMsRUFBRUYsRUFBRWlCLEVBQWJDLEVBQUVpTCxNQUFnQjBoQyxHQUFHM3RDLEVBQUVELEVBQUVnQixHQUFHLENBQUMsQ0FDL2MsU0FBUzBzQyxHQUFHM3RDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRW94QixVQUFVLE9BQU9weEIsSUFBSXVGLElBQUcsT0FBT3RGLEdBQUdBLElBQUlzRixFQUFDLENBQUMsU0FBU3FvQyxHQUFHNXRDLEVBQUVDLEdBQUdzcUMsR0FBR0QsSUFBRyxFQUFHLElBQUlwcUMsRUFBRUYsRUFBRTZsQyxRQUFRLE9BQU8zbEMsRUFBRUQsRUFBRTRCLEtBQUs1QixHQUFHQSxFQUFFNEIsS0FBSzNCLEVBQUUyQixLQUFLM0IsRUFBRTJCLEtBQUs1QixHQUFHRCxFQUFFNmxDLFFBQVE1bEMsQ0FBQyxDQUFDLFNBQVM0dEMsR0FBRzd0QyxFQUFFQyxFQUFFQyxHQUFHLEdBQUcsSUFBTyxRQUFGQSxHQUFXLENBQUMsSUFBSWUsRUFBRWhCLEVBQUUya0MsTUFBd0Ixa0MsR0FBbEJlLEdBQUdqQixFQUFFeXlCLGFBQWtCeHlCLEVBQUUya0MsTUFBTTFrQyxFQUFFNlUsR0FBRy9VLEVBQUVFLEVBQUUsQ0FBQyxDQUM5UCxJQUFJNnFDLEdBQUcsQ0FBQytDLFlBQVloSixHQUFHaUosWUFBWTE3QixHQUFFMjdCLFdBQVczN0IsR0FBRTQ3QixVQUFVNTdCLEdBQUU2N0Isb0JBQW9CNzdCLEdBQUU4N0IsbUJBQW1COTdCLEdBQUUrN0IsZ0JBQWdCLzdCLEdBQUVnOEIsUUFBUWg4QixHQUFFaThCLFdBQVdqOEIsR0FBRWs4QixPQUFPbDhCLEdBQUVtOEIsU0FBU244QixHQUFFbzhCLGNBQWNwOEIsR0FBRXE4QixpQkFBaUJyOEIsR0FBRXM4QixjQUFjdDhCLEdBQUV1OEIsaUJBQWlCdjhCLEdBQUV3OEIscUJBQXFCeDhCLEdBQUV5OEIsTUFBTXo4QixHQUFFMDhCLDBCQUF5QixHQUFJbkUsR0FBRyxDQUFDa0QsWUFBWWhKLEdBQUdpSixZQUFZLFNBQVMvdEMsRUFBRUMsR0FBNEMsT0FBekNnckMsS0FBSzFaLGNBQWMsQ0FBQ3Z4QixPQUFFLElBQVNDLEVBQUUsS0FBS0EsR0FBVUQsQ0FBQyxFQUFFZ3VDLFdBQVdsSixHQUFHbUosVUFBVWxCLEdBQUdtQixvQkFBb0IsU0FBU2x1QyxFQUFFQyxFQUFFQyxHQUE2QyxPQUExQ0EsRUFBRSxNQUFPQSxFQUFjQSxFQUFFc00sT0FBTyxDQUFDeE0sSUFBSSxLQUFZNnNDLEdBQUcsUUFDM2YsRUFBRUssR0FBRzNxQyxLQUFLLEtBQUt0QyxFQUFFRCxHQUFHRSxFQUFFLEVBQUVrdUMsZ0JBQWdCLFNBQVNwdUMsRUFBRUMsR0FBRyxPQUFPNHNDLEdBQUcsUUFBUSxFQUFFN3NDLEVBQUVDLEVBQUUsRUFBRWt1QyxtQkFBbUIsU0FBU251QyxFQUFFQyxHQUFHLE9BQU80c0MsR0FBRyxFQUFFLEVBQUU3c0MsRUFBRUMsRUFBRSxFQUFFb3VDLFFBQVEsU0FBU3J1QyxFQUFFQyxHQUFHLElBQUlDLEVBQUUrcUMsS0FBcUQsT0FBaERockMsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUVELEVBQUVBLElBQUlFLEVBQUVxeEIsY0FBYyxDQUFDdnhCLEVBQUVDLEdBQVVELENBQUMsRUFBRXN1QyxXQUFXLFNBQVN0dUMsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZSxFQUFFZ3FDLEtBQWtNLE9BQTdMaHJDLE9BQUUsSUFBU0MsRUFBRUEsRUFBRUQsR0FBR0EsRUFBRWdCLEVBQUVzd0IsY0FBY3R3QixFQUFFd2tDLFVBQVV4bEMsRUFBRUQsRUFBRSxDQUFDNmxDLFFBQVEsS0FBS1QsWUFBWSxLQUFLUixNQUFNLEVBQUUrRyxTQUFTLEtBQUtKLG9CQUFvQnZyQyxFQUFFMHJDLGtCQUFrQnpyQyxHQUFHZ0IsRUFBRWtxQyxNQUFNbnJDLEVBQUVBLEVBQUVBLEVBQUUyckMsU0FBUytCLEdBQUduckMsS0FBSyxLQUFLZ0QsR0FBRXZGLEdBQVMsQ0FBQ2lCLEVBQUVzd0IsY0FBY3Z4QixFQUFFLEVBQUV1dUMsT0FBTyxTQUFTdnVDLEdBQzNkLE9BQWRBLEVBQUUsQ0FBQzJ4QixRQUFRM3hCLEdBQWhCaXJDLEtBQTRCMVosY0FBY3Z4QixDQUFDLEVBQUV3dUMsU0FBUy9CLEdBQUdnQyxjQUFjckIsR0FBR3NCLGlCQUFpQixTQUFTMXVDLEdBQUcsT0FBT2lyQyxLQUFLMVosY0FBY3Z4QixDQUFDLEVBQUUydUMsY0FBYyxXQUFXLElBQUkzdUMsRUFBRXlzQyxJQUFHLEdBQUl4c0MsRUFBRUQsRUFBRSxHQUE2QyxPQUExQ0EsRUFBRXd0QyxHQUFHanJDLEtBQUssS0FBS3ZDLEVBQUUsSUFBSWlyQyxLQUFLMVosY0FBY3Z4QixFQUFRLENBQUNDLEVBQUVELEVBQUUsRUFBRTR1QyxpQkFBaUIsV0FBVyxFQUFFQyxxQkFBcUIsU0FBUzd1QyxFQUFFQyxFQUFFQyxHQUFHLElBQUllLEVBQUVzRSxHQUFFckUsRUFBRStwQyxLQUFLLEdBQUc1aEMsR0FBRSxDQUFDLFFBQUcsSUFBU25KLEVBQUUsTUFBTVUsTUFBTXVQLEVBQUUsTUFBTWpRLEVBQUVBLEdBQUcsS0FBSyxDQUFPLEdBQU5BLEVBQUVELElBQU8sT0FBTzZULEdBQUUsTUFBTWxULE1BQU11UCxFQUFFLE1BQU0sSUFBUSxHQUFIazZCLEtBQVErQixHQUFHbnJDLEVBQUVoQixFQUFFQyxFQUFFLENBQUNnQixFQUFFcXdCLGNBQWNyeEIsRUFBRSxJQUFJcUIsRUFBRSxDQUFDbEIsTUFBTUgsRUFBRStyQyxZQUFZaHNDLEdBQ3ZaLE9BRDBaaUIsRUFBRWlxQyxNQUFNNXBDLEVBQUV3ckMsR0FBR2YsR0FBR3pwQyxLQUFLLEtBQUt0QixFQUNwZk0sRUFBRXZCLEdBQUcsQ0FBQ0EsSUFBSWlCLEVBQUVxd0IsT0FBTyxLQUFLNGEsR0FBRyxFQUFFQyxHQUFHNXBDLEtBQUssS0FBS3RCLEVBQUVNLEVBQUVyQixFQUFFRCxRQUFHLEVBQU8sTUFBYUMsQ0FBQyxFQUFFNHVDLE1BQU0sV0FBVyxJQUFJOXVDLEVBQUVpckMsS0FBS2hyQyxFQUFFNlQsR0FBRWs3QixpQkFBaUIsR0FBRzNsQyxHQUFFLENBQUMsSUFBSW5KLEVBQUVraUMsR0FBa0RuaUMsRUFBRSxJQUFJQSxFQUFFLEtBQTlDQyxHQUFIaWlDLEtBQVUsR0FBRyxHQUFHMXVCLEdBQWhCMHVCLElBQXNCLElBQUkxZ0MsU0FBUyxJQUFJdkIsR0FBdUIsR0FBUEEsRUFBRXNxQyxRQUFXdnFDLEdBQUcsSUFBSUMsRUFBRXVCLFNBQVMsS0FBS3hCLEdBQUcsR0FBRyxNQUFhQSxFQUFFLElBQUlBLEVBQUUsS0FBZkMsRUFBRXVxQyxNQUFtQmhwQyxTQUFTLElBQUksSUFBSSxPQUFPekIsRUFBRXV4QixjQUFjdHhCLENBQUMsRUFBRTh1QywwQkFBeUIsR0FBSWxFLEdBQUcsQ0FBQ2lELFlBQVloSixHQUFHaUosWUFBWVYsR0FBR1csV0FBV2xKLEdBQUdtSixVQUFVbEMsR0FBR21DLG9CQUFvQmYsR0FBR2dCLG1CQUFtQm5CLEdBQUdvQixnQkFBZ0JuQixHQUFHb0IsUUFBUWYsR0FBR2dCLFdBQVdoRCxHQUFHaUQsT0FBTzNCLEdBQUc0QixTQUFTLFdBQVcsT0FBT2xELEdBQUdELEdBQUcsRUFDcmhCb0QsY0FBY3JCLEdBQUdzQixpQkFBaUIsU0FBUzF1QyxHQUFjLE9BQU91dEMsR0FBWm5DLEtBQWlCNytCLEdBQUVnbEIsY0FBY3Z4QixFQUFFLEVBQUUydUMsY0FBYyxXQUFnRCxNQUFNLENBQXJDckQsR0FBR0QsSUFBSSxHQUFLRCxLQUFLN1osY0FBeUIsRUFBRXFkLGlCQUFpQi9DLEdBQUdnRCxxQkFBcUIvQyxHQUFHZ0QsTUFBTXJCLEdBQUdzQiwwQkFBeUIsR0FBSWpFLEdBQUcsQ0FBQ2dELFlBQVloSixHQUFHaUosWUFBWVYsR0FBR1csV0FBV2xKLEdBQUdtSixVQUFVbEMsR0FBR21DLG9CQUFvQmYsR0FBR2dCLG1CQUFtQm5CLEdBQUdvQixnQkFBZ0JuQixHQUFHb0IsUUFBUWYsR0FBR2dCLFdBQVcxQyxHQUFHMkMsT0FBTzNCLEdBQUc0QixTQUFTLFdBQVcsT0FBTzVDLEdBQUdQLEdBQUcsRUFBRW9ELGNBQWNyQixHQUFHc0IsaUJBQWlCLFNBQVMxdUMsR0FBRyxJQUFJQyxFQUFFbXJDLEtBQUssT0FBTyxPQUN6ZjcrQixHQUFFdE0sRUFBRXN4QixjQUFjdnhCLEVBQUV1dEMsR0FBR3R0QyxFQUFFc00sR0FBRWdsQixjQUFjdnhCLEVBQUUsRUFBRTJ1QyxjQUFjLFdBQWdELE1BQU0sQ0FBckMvQyxHQUFHUCxJQUFJLEdBQUtELEtBQUs3WixjQUF5QixFQUFFcWQsaUJBQWlCL0MsR0FBR2dELHFCQUFxQi9DLEdBQUdnRCxNQUFNckIsR0FBR3NCLDBCQUF5QixHQUFJLFNBQVNFLEdBQUdqdkMsRUFBRUMsR0FBRyxJQUFJLElBQUlDLEVBQUUsR0FBR2UsRUFBRWhCLEVBQUUsR0FBR0MsR0FBR3FILEVBQUd0RyxHQUFHQSxFQUFFQSxFQUFFb3dCLGFBQWFwd0IsR0FBRyxJQUFJQyxFQUFFaEIsQ0FBQyxDQUFDLE1BQU1xQixHQUFHTCxFQUFFLDZCQUE2QkssRUFBRXFDLFFBQVEsS0FBS3JDLEVBQUV3QyxLQUFLLENBQUMsTUFBTSxDQUFDMUQsTUFBTUwsRUFBRWdKLE9BQU8vSSxFQUFFOEQsTUFBTTdDLEVBQUU0VyxPQUFPLEtBQUssQ0FBQyxTQUFTbzNCLEdBQUdsdkMsRUFBRUMsRUFBRUMsR0FBRyxNQUFNLENBQUNHLE1BQU1MLEVBQUVnSixPQUFPLEtBQUtqRixNQUFNLE1BQU03RCxFQUFFQSxFQUFFLEtBQUs0WCxPQUFPLE1BQU03WCxFQUFFQSxFQUFFLEtBQUssQ0FDemQsU0FBU2t2QyxHQUFHbnZDLEVBQUVDLEdBQUcsSUFBSXlELFFBQVFDLE1BQU0xRCxFQUFFSSxNQUFNLENBQUMsTUFBTUgsR0FBR3VJLFlBQVcsV0FBVyxNQUFNdkksQ0FBRSxHQUFFLENBQUMsQ0FBQyxJQUFJa3ZDLEdBQUcsbUJBQW9CQyxRQUFRQSxRQUFRdGMsSUFBSSxTQUFTdWMsR0FBR3R2QyxFQUFFQyxFQUFFQyxJQUFHQSxFQUFFOGxDLElBQUksRUFBRTlsQyxJQUFLc3JCLElBQUksRUFBRXRyQixFQUFFaW1DLFFBQVEsQ0FBQ3ZLLFFBQVEsTUFBTSxJQUFJMzZCLEVBQUVoQixFQUFFSSxNQUFzRCxPQUFoREgsRUFBRXNQLFNBQVMsV0FBVysvQixLQUFLQSxJQUFHLEVBQUdDLEdBQUd2dUMsR0FBR2t1QyxHQUFHbnZDLEVBQUVDLEVBQUUsRUFBU0MsQ0FBQyxDQUMzUSxTQUFTdXZDLEdBQUd6dkMsRUFBRUMsRUFBRUMsSUFBR0EsRUFBRThsQyxJQUFJLEVBQUU5bEMsSUFBS3NyQixJQUFJLEVBQUUsSUFBSXZxQixFQUFFakIsRUFBRStkLEtBQUsySSx5QkFBeUIsR0FBRyxtQkFBb0J6bEIsRUFBRSxDQUFDLElBQUlDLEVBQUVqQixFQUFFSSxNQUFNSCxFQUFFaW1DLFFBQVEsV0FBVyxPQUFPbGxDLEVBQUVDLEVBQUUsRUFBRWhCLEVBQUVzUCxTQUFTLFdBQVcyL0IsR0FBR252QyxFQUFFQyxFQUFFLENBQUMsQ0FBQyxJQUFJc0IsRUFBRXZCLEVBQUVpeEIsVUFBOE8sT0FBcE8sT0FBTzF2QixHQUFHLG1CQUFvQkEsRUFBRW11QyxvQkFBb0J4dkMsRUFBRXNQLFNBQVMsV0FBVzIvQixHQUFHbnZDLEVBQUVDLEdBQUcsbUJBQW9CZ0IsSUFBSSxPQUFPMHVDLEdBQUdBLEdBQUcsSUFBSXZsQixJQUFJLENBQUN0cEIsT0FBTzZ1QyxHQUFHdGxCLElBQUl2cEIsT0FBTyxJQUFJWixFQUFFRCxFQUFFOEQsTUFBTWpELEtBQUs0dUMsa0JBQWtCenZDLEVBQUVJLE1BQU0sQ0FBQ3V2QyxlQUFlLE9BQU8xdkMsRUFBRUEsRUFBRSxJQUFJLEdBQVVBLENBQUMsQ0FDbmIsU0FBUzJ2QyxHQUFHN3ZDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSWUsRUFBRWpCLEVBQUU4dkMsVUFBVSxHQUFHLE9BQU83dUMsRUFBRSxDQUFDQSxFQUFFakIsRUFBRTh2QyxVQUFVLElBQUlWLEdBQUcsSUFBSWx1QyxFQUFFLElBQUlrcEIsSUFBSW5wQixFQUFFbXFCLElBQUluckIsRUFBRWlCLEVBQUUsV0FBaUIsS0FBWEEsRUFBRUQsRUFBRTRxQixJQUFJNXJCLE1BQWdCaUIsRUFBRSxJQUFJa3BCLElBQUlucEIsRUFBRW1xQixJQUFJbnJCLEVBQUVpQixJQUFJQSxFQUFFNjhCLElBQUk3OUIsS0FBS2dCLEVBQUVtcEIsSUFBSW5xQixHQUFHRixFQUFFK3ZDLEdBQUd4dEMsS0FBSyxLQUFLdkMsRUFBRUMsRUFBRUMsR0FBR0QsRUFBRTAvQixLQUFLMy9CLEVBQUVBLEdBQUcsQ0FBQyxTQUFTZ3dDLEdBQUdod0MsR0FBRyxFQUFFLENBQUMsSUFBSUMsRUFBNEUsSUFBdkVBLEVBQUUsS0FBS0QsRUFBRXdyQixPQUFzQnZyQixFQUFFLFFBQXBCQSxFQUFFRCxFQUFFdXhCLGdCQUF5QixPQUFPdHhCLEVBQUV1eEIsWUFBdUJ2eEIsRUFBRSxPQUFPRCxFQUFFQSxFQUFFQSxFQUFFcXhCLE1BQU0sT0FBTyxPQUFPcnhCLEdBQUcsT0FBTyxJQUFJLENBQ2hXLFNBQVNpd0MsR0FBR2p3QyxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxHQUFHLE9BQUcsSUFBWSxFQUFQbEIsRUFBRXNqQyxPQUFldGpDLElBQUlDLEVBQUVELEVBQUVzeEIsT0FBTyxPQUFPdHhCLEVBQUVzeEIsT0FBTyxJQUFJcHhCLEVBQUVveEIsT0FBTyxPQUFPcHhCLEVBQUVveEIsUUFBUSxNQUFNLElBQUlweEIsRUFBRXNyQixNQUFNLE9BQU90ckIsRUFBRWt4QixVQUFVbHhCLEVBQUVzckIsSUFBSSxLQUFJdnJCLEVBQUUrbEMsSUFBSSxFQUFFLElBQUt4YSxJQUFJLEVBQUU0YSxHQUFHbG1DLEVBQUVELEVBQUUsS0FBS0MsRUFBRTBrQyxPQUFPLEdBQUc1a0MsSUFBRUEsRUFBRXN4QixPQUFPLE1BQU10eEIsRUFBRTRrQyxNQUFNMWpDLEVBQVNsQixFQUFDLENBQUMsSUFBSWt3QyxHQUFHOXJDLEVBQUcrckMsa0JBQWtCdEwsSUFBRyxFQUFHLFNBQVN1TCxHQUFHcHdDLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUdoQixFQUFFd3hCLE1BQU0sT0FBT3p4QixFQUFFbXBDLEdBQUdscEMsRUFBRSxLQUFLQyxFQUFFZSxHQUFHaW9DLEdBQUdqcEMsRUFBRUQsRUFBRXl4QixNQUFNdnhCLEVBQUVlLEVBQUUsQ0FDblYsU0FBU292QyxHQUFHcndDLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEdBQUdoQixFQUFFQSxFQUFFMmYsT0FBTyxJQUFJdGUsRUFBRXRCLEVBQUVvb0MsSUFBcUMsT0FBakM1RCxHQUFHeGtDLEVBQUVpQixHQUFHRCxFQUFFMHBDLEdBQUczcUMsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRU0sRUFBRUwsR0FBR2hCLEVBQUU4cUMsS0FBUSxPQUFPaHJDLEdBQUk2a0MsSUFBMkV4N0IsSUFBR25KLEdBQUdxaUMsR0FBR3RpQyxHQUFHQSxFQUFFcXhCLE9BQU8sRUFBRThlLEdBQUdwd0MsRUFBRUMsRUFBRWdCLEVBQUVDLEdBQVVqQixFQUFFd3hCLFFBQTdHeHhCLEVBQUV1bEMsWUFBWXhsQyxFQUFFd2xDLFlBQVl2bEMsRUFBRXF4QixRQUFRLEtBQUt0eEIsRUFBRTRrQyxRQUFRMWpDLEVBQUVvdkMsR0FBR3R3QyxFQUFFQyxFQUFFaUIsR0FBb0QsQ0FDek4sU0FBU3F2QyxHQUFHdndDLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEdBQUcsR0FBRyxPQUFPbEIsRUFBRSxDQUFDLElBQUl1QixFQUFFckIsRUFBRTZkLEtBQUssTUFBRyxtQkFBb0J4YyxHQUFJaXZDLEdBQUdqdkMsU0FBSSxJQUFTQSxFQUFFaWxCLGNBQWMsT0FBT3RtQixFQUFFaW5CLGNBQVMsSUFBU2puQixFQUFFc21CLGVBQW9EeG1CLEVBQUU4b0MsR0FBRzVvQyxFQUFFNmQsS0FBSyxLQUFLOWMsRUFBRWhCLEVBQUVBLEVBQUVxakMsS0FBS3BpQyxJQUFLbW5DLElBQUlwb0MsRUFBRW9vQyxJQUFJcm9DLEVBQUVxeEIsT0FBT3B4QixFQUFTQSxFQUFFd3hCLE1BQU16eEIsSUFBckdDLEVBQUV1ckIsSUFBSSxHQUFHdnJCLEVBQUU4ZCxLQUFLeGMsRUFBRWt2QyxHQUFHendDLEVBQUVDLEVBQUVzQixFQUFFTixFQUFFQyxHQUF5RSxDQUFXLEdBQVZLLEVBQUV2QixFQUFFeXhCLE1BQVMsSUFBS3p4QixFQUFFNGtDLE1BQU0xakMsR0FBRyxDQUFDLElBQUlULEVBQUVjLEVBQUVtaUMsY0FBMEMsSUFBaEJ4akMsRUFBRSxRQUFkQSxFQUFFQSxFQUFFaW5CLFNBQW1Cam5CLEVBQUUyNUIsSUFBUXA1QixFQUFFUSxJQUFJakIsRUFBRXFvQyxNQUFNcG9DLEVBQUVvb0MsSUFBSSxPQUFPaUksR0FBR3R3QyxFQUFFQyxFQUFFaUIsRUFBRSxDQUE2QyxPQUE1Q2pCLEVBQUVxeEIsT0FBTyxHQUFFdHhCLEVBQUU0b0MsR0FBR3JuQyxFQUFFTixJQUFLb25DLElBQUlwb0MsRUFBRW9vQyxJQUFJcm9DLEVBQUVxeEIsT0FBT3B4QixFQUFTQSxFQUFFd3hCLE1BQU16eEIsQ0FBQyxDQUMxYixTQUFTeXdDLEdBQUd6d0MsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRUMsR0FBRyxHQUFHLE9BQU9sQixFQUFFLENBQUMsSUFBSXVCLEVBQUV2QixFQUFFMGpDLGNBQWMsR0FBRzdKLEdBQUd0NEIsRUFBRU4sSUFBSWpCLEVBQUVxb0MsTUFBTXBvQyxFQUFFb29DLElBQUksSUFBR3hELElBQUcsRUFBRzVrQyxFQUFFZ2pDLGFBQWFoaUMsRUFBRU0sRUFBRSxJQUFLdkIsRUFBRTRrQyxNQUFNMWpDLEdBQXNDLE9BQU9qQixFQUFFMmtDLE1BQU01a0MsRUFBRTRrQyxNQUFNMEwsR0FBR3R3QyxFQUFFQyxFQUFFaUIsR0FBakUsSUFBYSxPQUFSbEIsRUFBRXN4QixTQUFnQnVULElBQUcsRUFBd0MsQ0FBQyxDQUFDLE9BQU82TCxHQUFHMXdDLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEVBQUUsQ0FDeE4sU0FBU3l2QyxHQUFHM3dDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSWUsRUFBRWhCLEVBQUVnakMsYUFBYS9oQyxFQUFFRCxFQUFFOHJCLFNBQVN4ckIsRUFBRSxPQUFPdkIsRUFBRUEsRUFBRXV4QixjQUFjLEtBQUssR0FBRyxXQUFXdHdCLEVBQUVxaUMsS0FBSyxHQUFHLElBQVksRUFBUHJqQyxFQUFFcWpDLE1BQVFyakMsRUFBRXN4QixjQUFjLENBQUNxZixVQUFVLEVBQUVDLFVBQVUsS0FBS0MsWUFBWSxNQUFNdmdDLEdBQUV3Z0MsR0FBR0MsSUFBSUEsSUFBSTl3QyxNQUFNLENBQUMsR0FBRyxJQUFPLFdBQUZBLEdBQWMsT0FBT0YsRUFBRSxPQUFPdUIsRUFBRUEsRUFBRXF2QyxVQUFVMXdDLEVBQUVBLEVBQUVELEVBQUUya0MsTUFBTTNrQyxFQUFFdWtDLFdBQVcsV0FBV3ZrQyxFQUFFc3hCLGNBQWMsQ0FBQ3FmLFVBQVU1d0MsRUFBRTZ3QyxVQUFVLEtBQUtDLFlBQVksTUFBTTd3QyxFQUFFdWxDLFlBQVksS0FBS2oxQixHQUFFd2dDLEdBQUdDLElBQUlBLElBQUloeEMsRUFBRSxLQUFLQyxFQUFFc3hCLGNBQWMsQ0FBQ3FmLFVBQVUsRUFBRUMsVUFBVSxLQUFLQyxZQUFZLE1BQU03dkMsRUFBRSxPQUFPTSxFQUFFQSxFQUFFcXZDLFVBQVUxd0MsRUFBRXFRLEdBQUV3Z0MsR0FBR0MsSUFBSUEsSUFBSS92QyxDQUFDLE1BQU0sT0FDdGZNLEdBQUdOLEVBQUVNLEVBQUVxdkMsVUFBVTF3QyxFQUFFRCxFQUFFc3hCLGNBQWMsTUFBTXR3QixFQUFFZixFQUFFcVEsR0FBRXdnQyxHQUFHQyxJQUFJQSxJQUFJL3ZDLEVBQWMsT0FBWm12QyxHQUFHcHdDLEVBQUVDLEVBQUVpQixFQUFFaEIsR0FBVUQsRUFBRXd4QixLQUFLLENBQUMsU0FBU3dmLEdBQUdqeEMsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFb29DLEtBQU8sT0FBT3JvQyxHQUFHLE9BQU9FLEdBQUcsT0FBT0YsR0FBR0EsRUFBRXFvQyxNQUFNbm9DLEtBQUVELEVBQUVxeEIsT0FBTyxJQUFJcnhCLEVBQUVxeEIsT0FBTyxRQUFPLENBQUMsU0FBU29mLEdBQUcxd0MsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRUMsR0FBRyxJQUFJSyxFQUFFdy9CLEdBQUc3Z0MsR0FBR3lnQyxHQUFHdjdCLEdBQUV1c0IsUUFBbUQsT0FBM0Nwd0IsRUFBRXEvQixHQUFHM2dDLEVBQUVzQixHQUFHa2pDLEdBQUd4a0MsRUFBRWlCLEdBQUdoQixFQUFFeXFDLEdBQUczcUMsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRU0sRUFBRUwsR0FBR0QsRUFBRStwQyxLQUFRLE9BQU9ockMsR0FBSTZrQyxJQUEyRXg3QixJQUFHcEksR0FBR3NoQyxHQUFHdGlDLEdBQUdBLEVBQUVxeEIsT0FBTyxFQUFFOGUsR0FBR3B3QyxFQUFFQyxFQUFFQyxFQUFFZ0IsR0FBVWpCLEVBQUV3eEIsUUFBN0d4eEIsRUFBRXVsQyxZQUFZeGxDLEVBQUV3bEMsWUFBWXZsQyxFQUFFcXhCLFFBQVEsS0FBS3R4QixFQUFFNGtDLFFBQVExakMsRUFBRW92QyxHQUFHdHdDLEVBQUVDLEVBQUVpQixHQUFvRCxDQUNsYSxTQUFTZ3dDLEdBQUdseEMsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRUMsR0FBRyxHQUFHNi9CLEdBQUc3Z0MsR0FBRyxDQUFDLElBQUlxQixHQUFFLEVBQUc2L0IsR0FBR25oQyxFQUFFLE1BQU1zQixHQUFFLEVBQVcsR0FBUmtqQyxHQUFHeGtDLEVBQUVpQixHQUFNLE9BQU9qQixFQUFFZ3hCLFVBQVVrZ0IsR0FBR254QyxFQUFFQyxHQUFHd25DLEdBQUd4bkMsRUFBRUMsRUFBRWUsR0FBRzZtQyxHQUFHN25DLEVBQUVDLEVBQUVlLEVBQUVDLEdBQUdELEdBQUUsT0FBUSxHQUFHLE9BQU9qQixFQUFFLENBQUMsSUFBSVMsRUFBRVIsRUFBRWd4QixVQUFVL3RCLEVBQUVqRCxFQUFFeWpDLGNBQWNqakMsRUFBRXNuQyxNQUFNN2tDLEVBQUUsSUFBSXVNLEVBQUVoUCxFQUFFc2tDLFFBQVFuMUIsRUFBRTFQLEVBQUVvbUIsWUFBMEMxVyxFQUE5QixpQkFBa0JBLEdBQUcsT0FBT0EsRUFBSWsxQixHQUFHbDFCLEdBQTJCZ3hCLEdBQUczZ0MsRUFBMUIyUCxFQUFFbXhCLEdBQUc3Z0MsR0FBR3lnQyxHQUFHdjdCLEdBQUV1c0IsU0FBbUIsSUFBSTF2QixFQUFFL0IsRUFBRXltQix5QkFBeUI5aUIsRUFBRSxtQkFBb0I1QixHQUFHLG1CQUFvQnhCLEVBQUV1bkMsd0JBQXdCbmtDLEdBQUcsbUJBQW9CcEQsRUFBRW9uQyxrQ0FBa0MsbUJBQW9CcG5DLEVBQUVtbkMsNEJBQzFkMWtDLElBQUlqQyxHQUFHd08sSUFBSUcsSUFBSSszQixHQUFHMW5DLEVBQUVRLEVBQUVRLEVBQUUyTyxHQUFHMDFCLElBQUcsRUFBRyxJQUFJcDVCLEVBQUVqTSxFQUFFc3hCLGNBQWM5d0IsRUFBRXdULE1BQU0vSCxFQUFFcTZCLEdBQUd0bUMsRUFBRWdCLEVBQUVSLEVBQUVTLEdBQUd1TyxFQUFFeFAsRUFBRXN4QixjQUFjcnVCLElBQUlqQyxHQUFHaUwsSUFBSXVELEdBQUdpeEIsR0FBRy9PLFNBQVMyVCxJQUFJLG1CQUFvQnJqQyxJQUFJNGtDLEdBQUc1bUMsRUFBRUMsRUFBRStCLEVBQUVoQixHQUFHd08sRUFBRXhQLEVBQUVzeEIsZ0JBQWdCcnVCLEVBQUVvaUMsSUFBSWdDLEdBQUdybkMsRUFBRUMsRUFBRWdELEVBQUVqQyxFQUFFaUwsRUFBRXVELEVBQUVHLEtBQUsvTCxHQUFHLG1CQUFvQnBELEVBQUV3bkMsMkJBQTJCLG1CQUFvQnhuQyxFQUFFeW5DLHFCQUFxQixtQkFBb0J6bkMsRUFBRXluQyxvQkFBb0J6bkMsRUFBRXluQyxxQkFBcUIsbUJBQW9Cem5DLEVBQUV3bkMsMkJBQTJCeG5DLEVBQUV3bkMsNkJBQTZCLG1CQUFvQnhuQyxFQUFFMG5DLG9CQUFvQmxvQyxFQUFFcXhCLE9BQU8sV0FDbGYsbUJBQW9CN3dCLEVBQUUwbkMsb0JBQW9CbG9DLEVBQUVxeEIsT0FBTyxTQUFTcnhCLEVBQUV5akMsY0FBY3ppQyxFQUFFaEIsRUFBRXN4QixjQUFjOWhCLEdBQUdoUCxFQUFFc25DLE1BQU05bUMsRUFBRVIsRUFBRXdULE1BQU14RSxFQUFFaFAsRUFBRXNrQyxRQUFRbjFCLEVBQUUzTyxFQUFFaUMsSUFBSSxtQkFBb0J6QyxFQUFFMG5DLG9CQUFvQmxvQyxFQUFFcXhCLE9BQU8sU0FBU3J3QixHQUFFLEVBQUcsS0FBSyxDQUFDUixFQUFFUixFQUFFZ3hCLFVBQVU4VSxHQUFHL2xDLEVBQUVDLEdBQUdpRCxFQUFFakQsRUFBRXlqQyxjQUFjOXpCLEVBQUUzUCxFQUFFOGQsT0FBTzlkLEVBQUU2aUMsWUFBWTUvQixFQUFFNmdDLEdBQUc5akMsRUFBRThkLEtBQUs3YSxHQUFHekMsRUFBRXNuQyxNQUFNbjRCLEVBQUUvTCxFQUFFNUQsRUFBRWdqQyxhQUFhLzJCLEVBQUV6TCxFQUFFc2tDLFFBQXNEdDFCLEVBQTlCLGlCQUFoQkEsRUFBRXZQLEVBQUVvbUIsY0FBaUMsT0FBTzdXLEVBQUlxMUIsR0FBR3IxQixHQUEyQm14QixHQUFHM2dDLEVBQTFCd1AsRUFBRXN4QixHQUFHN2dDLEdBQUd5Z0MsR0FBR3Y3QixHQUFFdXNCLFNBQW1CLElBQUl0aEIsRUFBRW5RLEVBQUV5bUIsMEJBQTBCMWtCLEVBQUUsbUJBQW9Cb08sR0FBRyxtQkFBb0I1UCxFQUFFdW5DLDBCQUM5ZSxtQkFBb0J2bkMsRUFBRW9uQyxrQ0FBa0MsbUJBQW9CcG5DLEVBQUVtbkMsNEJBQTRCMWtDLElBQUlXLEdBQUdxSSxJQUFJdUQsSUFBSWs0QixHQUFHMW5DLEVBQUVRLEVBQUVRLEVBQUV3TyxHQUFHNjFCLElBQUcsRUFBR3A1QixFQUFFak0sRUFBRXN4QixjQUFjOXdCLEVBQUV3VCxNQUFNL0gsRUFBRXE2QixHQUFHdG1DLEVBQUVnQixFQUFFUixFQUFFUyxHQUFHLElBQUkyTyxFQUFFNVAsRUFBRXN4QixjQUFjcnVCLElBQUlXLEdBQUdxSSxJQUFJMkQsR0FBRzZ3QixHQUFHL08sU0FBUzJULElBQUksbUJBQW9CajFCLElBQUl3MkIsR0FBRzVtQyxFQUFFQyxFQUFFbVEsRUFBRXBQLEdBQUc0TyxFQUFFNVAsRUFBRXN4QixnQkFBZ0IzaEIsRUFBRTAxQixJQUFJZ0MsR0FBR3JuQyxFQUFFQyxFQUFFMFAsRUFBRTNPLEVBQUVpTCxFQUFFMkQsRUFBRUosS0FBSSxJQUFLeE4sR0FBRyxtQkFBb0J4QixFQUFFMndDLDRCQUE0QixtQkFBb0Izd0MsRUFBRTR3QyxzQkFBc0IsbUJBQW9CNXdDLEVBQUU0d0MscUJBQXFCNXdDLEVBQUU0d0Msb0JBQW9CcHdDLEVBQUU0TyxFQUFFSixHQUFHLG1CQUFvQmhQLEVBQUUyd0MsNEJBQzVmM3dDLEVBQUUyd0MsMkJBQTJCbndDLEVBQUU0TyxFQUFFSixJQUFJLG1CQUFvQmhQLEVBQUU2d0MscUJBQXFCcnhDLEVBQUVxeEIsT0FBTyxHQUFHLG1CQUFvQjd3QixFQUFFdW5DLDBCQUEwQi9uQyxFQUFFcXhCLE9BQU8sUUFBUSxtQkFBb0I3d0IsRUFBRTZ3QyxvQkFBb0JwdUMsSUFBSWxELEVBQUUwakMsZUFBZXgzQixJQUFJbE0sRUFBRXV4QixnQkFBZ0J0eEIsRUFBRXF4QixPQUFPLEdBQUcsbUJBQW9CN3dCLEVBQUV1bkMseUJBQXlCOWtDLElBQUlsRCxFQUFFMGpDLGVBQWV4M0IsSUFBSWxNLEVBQUV1eEIsZ0JBQWdCdHhCLEVBQUVxeEIsT0FBTyxNQUFNcnhCLEVBQUV5akMsY0FBY3ppQyxFQUFFaEIsRUFBRXN4QixjQUFjMWhCLEdBQUdwUCxFQUFFc25DLE1BQU05bUMsRUFBRVIsRUFBRXdULE1BQU1wRSxFQUFFcFAsRUFBRXNrQyxRQUFRdDFCLEVBQUV4TyxFQUFFMk8sSUFBSSxtQkFBb0JuUCxFQUFFNndDLG9CQUFvQnB1QyxJQUFJbEQsRUFBRTBqQyxlQUFleDNCLElBQ2pmbE0sRUFBRXV4QixnQkFBZ0J0eEIsRUFBRXF4QixPQUFPLEdBQUcsbUJBQW9CN3dCLEVBQUV1bkMseUJBQXlCOWtDLElBQUlsRCxFQUFFMGpDLGVBQWV4M0IsSUFBSWxNLEVBQUV1eEIsZ0JBQWdCdHhCLEVBQUVxeEIsT0FBTyxNQUFNcndCLEdBQUUsRUFBRyxDQUFDLE9BQU9zd0MsR0FBR3Z4QyxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFTSxFQUFFTCxFQUFFLENBQ25LLFNBQVNxd0MsR0FBR3Z4QyxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxFQUFFSyxHQUFHMHZDLEdBQUdqeEMsRUFBRUMsR0FBRyxJQUFJUSxFQUFFLElBQWEsSUFBUlIsRUFBRXF4QixPQUFXLElBQUlyd0IsSUFBSVIsRUFBRSxPQUFPUyxHQUFHb2dDLEdBQUdyaEMsRUFBRUMsR0FBRSxHQUFJb3dDLEdBQUd0d0MsRUFBRUMsRUFBRXNCLEdBQUdOLEVBQUVoQixFQUFFZ3hCLFVBQVVpZixHQUFHdmUsUUFBUTF4QixFQUFFLElBQUlpRCxFQUFFekMsR0FBRyxtQkFBb0JQLEVBQUV3bUIseUJBQXlCLEtBQUt6bEIsRUFBRTRlLFNBQXdJLE9BQS9INWYsRUFBRXF4QixPQUFPLEVBQUUsT0FBT3R4QixHQUFHUyxHQUFHUixFQUFFd3hCLE1BQU15WCxHQUFHanBDLEVBQUVELEVBQUV5eEIsTUFBTSxLQUFLbHdCLEdBQUd0QixFQUFFd3hCLE1BQU15WCxHQUFHanBDLEVBQUUsS0FBS2lELEVBQUUzQixJQUFJNnVDLEdBQUdwd0MsRUFBRUMsRUFBRWlELEVBQUUzQixHQUFHdEIsRUFBRXN4QixjQUFjdHdCLEVBQUVnVCxNQUFNL1MsR0FBR29nQyxHQUFHcmhDLEVBQUVDLEdBQUUsR0FBV0QsRUFBRXd4QixLQUFLLENBQUMsU0FBUytmLEdBQUd4eEMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFaXhCLFVBQVVoeEIsRUFBRXd4QyxlQUFleFEsR0FBR2poQyxFQUFFQyxFQUFFd3hDLGVBQWV4eEMsRUFBRXd4QyxpQkFBaUJ4eEMsRUFBRThrQyxTQUFTOWtDLEVBQUU4a0MsU0FBUzlELEdBQUdqaEMsRUFBRUMsRUFBRThrQyxTQUFRLEdBQUkwRSxHQUFHenBDLEVBQUVDLEVBQUV3ekIsY0FBYyxDQUM1ZSxTQUFTaWUsR0FBRzF4QyxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxHQUF1QyxPQUFwQzBpQyxLQUFLQyxHQUFHM2lDLEdBQUdqQixFQUFFcXhCLE9BQU8sSUFBSThlLEdBQUdwd0MsRUFBRUMsRUFBRUMsRUFBRWUsR0FBVWhCLEVBQUV3eEIsS0FBSyxDQUFDLElBYXFMa2dCLEdBQUdDLEdBQUdDLEdBQUdDLEdBYjFMQyxHQUFHLENBQUN2Z0IsV0FBVyxLQUFLMlIsWUFBWSxLQUFLQyxVQUFVLEdBQUcsU0FBUzRPLEdBQUdoeUMsR0FBRyxNQUFNLENBQUM0d0MsVUFBVTV3QyxFQUFFNndDLFVBQVUsS0FBS0MsWUFBWSxLQUFLLENBQ2xNLFNBQVNtQixHQUFHanlDLEVBQUVDLEVBQUVDLEdBQUcsSUFBMERnRCxFQUF0RGpDLEVBQUVoQixFQUFFZ2pDLGFBQWEvaEMsRUFBRTRFLEdBQUU2ckIsUUFBUXB3QixHQUFFLEVBQUdkLEVBQUUsSUFBYSxJQUFSUixFQUFFcXhCLE9BQXFKLElBQXZJcHVCLEVBQUV6QyxLQUFLeUMsR0FBRSxPQUFPbEQsR0FBRyxPQUFPQSxFQUFFdXhCLGdCQUFpQixJQUFPLEVBQUZyd0IsSUFBU2dDLEdBQUUzQixHQUFFLEVBQUd0QixFQUFFcXhCLFFBQVEsS0FBWSxPQUFPdHhCLEdBQUcsT0FBT0EsRUFBRXV4QixnQkFBY3J3QixHQUFHLEdBQUVxUCxHQUFFekssR0FBSSxFQUFGNUUsR0FBUSxPQUFPbEIsRUFBMkIsT0FBeEJ1akMsR0FBR3RqQyxHQUF3QixRQUFyQkQsRUFBRUMsRUFBRXN4QixnQkFBMkMsUUFBZnZ4QixFQUFFQSxFQUFFd3hCLGFBQTRCLElBQVksRUFBUHZ4QixFQUFFcWpDLE1BQVFyakMsRUFBRTJrQyxNQUFNLEVBQUUsT0FBTzVrQyxFQUFFeWlCLEtBQUt4aUIsRUFBRTJrQyxNQUFNLEVBQUUza0MsRUFBRTJrQyxNQUFNLFdBQVcsT0FBS25rQyxFQUFFUSxFQUFFOHJCLFNBQVMvc0IsRUFBRWlCLEVBQUVpeEMsU0FBZ0Izd0MsR0FBR04sRUFBRWhCLEVBQUVxakMsS0FBSy9oQyxFQUFFdEIsRUFBRXd4QixNQUFNaHhCLEVBQUUsQ0FBQzZpQyxLQUFLLFNBQVN2VyxTQUFTdHNCLEdBQUcsSUFBTyxFQUFGUSxJQUFNLE9BQU9NLEdBQUdBLEVBQUVpakMsV0FBVyxFQUFFampDLEVBQUUwaEMsYUFDN2V4aUMsR0FBR2MsRUFBRTR3QyxHQUFHMXhDLEVBQUVRLEVBQUUsRUFBRSxNQUFNakIsRUFBRWlwQyxHQUFHanBDLEVBQUVpQixFQUFFZixFQUFFLE1BQU1xQixFQUFFOHZCLE9BQU9weEIsRUFBRUQsRUFBRXF4QixPQUFPcHhCLEVBQUVzQixFQUFFbXdCLFFBQVExeEIsRUFBRUMsRUFBRXd4QixNQUFNbHdCLEVBQUV0QixFQUFFd3hCLE1BQU1GLGNBQWN5Z0IsR0FBRzl4QyxHQUFHRCxFQUFFc3hCLGNBQWN3Z0IsR0FBRy94QyxHQUFHb3lDLEdBQUdueUMsRUFBRVEsSUFBcUIsR0FBRyxRQUFyQlMsRUFBRWxCLEVBQUV1eEIsZ0JBQTJDLFFBQWZydUIsRUFBRWhDLEVBQUVzd0IsWUFBcUIsT0FHcE0sU0FBWXh4QixFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxFQUFFSyxFQUFFZCxHQUFHLEdBQUdQLEVBQUcsT0FBVyxJQUFSRCxFQUFFcXhCLE9BQWlCcnhCLEVBQUVxeEIsUUFBUSxJQUF3QitnQixHQUFHcnlDLEVBQUVDLEVBQUVRLEVBQTNCUSxFQUFFaXVDLEdBQUd0dUMsTUFBTXVQLEVBQUUsU0FBc0IsT0FBT2xRLEVBQUVzeEIsZUFBcUJ0eEIsRUFBRXd4QixNQUFNenhCLEVBQUV5eEIsTUFBTXh4QixFQUFFcXhCLE9BQU8sSUFBSSxPQUFLL3ZCLEVBQUVOLEVBQUVpeEMsU0FBU2h4QyxFQUFFakIsRUFBRXFqQyxLQUFLcmlDLEVBQUVreEMsR0FBRyxDQUFDN08sS0FBSyxVQUFVdlcsU0FBUzlyQixFQUFFOHJCLFVBQVU3ckIsRUFBRSxFQUFFLE9BQU1LLEVBQUUwbkMsR0FBRzFuQyxFQUFFTCxFQUFFVCxFQUFFLE9BQVE2d0IsT0FBTyxFQUFFcndCLEVBQUVvd0IsT0FBT3B4QixFQUFFc0IsRUFBRTh2QixPQUFPcHhCLEVBQUVnQixFQUFFeXdCLFFBQVFud0IsRUFBRXRCLEVBQUV3eEIsTUFBTXh3QixFQUFFLElBQVksRUFBUGhCLEVBQUVxakMsT0FBUzRGLEdBQUdqcEMsRUFBRUQsRUFBRXl4QixNQUFNLEtBQUtoeEIsR0FBR1IsRUFBRXd4QixNQUFNRixjQUFjeWdCLEdBQUd2eEMsR0FBR1IsRUFBRXN4QixjQUFjd2dCLEdBQVV4d0MsR0FBRSxHQUFHLElBQVksRUFBUHRCLEVBQUVxakMsTUFBUSxPQUFPK08sR0FBR3J5QyxFQUFFQyxFQUFFUSxFQUFFLE1BQU0sR0FBRyxPQUFPUyxFQUFFdWhCLEtBQUssQ0FDaGQsR0FEaWR4aEIsRUFBRUMsRUFBRTJoQixhQUFhM2hCLEVBQUUyaEIsWUFBWXl2QixRQUMzZSxJQUFJcHZDLEVBQUVqQyxFQUFFc3hDLEtBQTBDLE9BQXJDdHhDLEVBQUVpQyxFQUEwQ212QyxHQUFHcnlDLEVBQUVDLEVBQUVRLEVBQS9CUSxFQUFFaXVDLEdBQWxCM3RDLEVBQUVYLE1BQU11UCxFQUFFLE1BQWFsUCxPQUFFLEdBQTBCLENBQXdCLEdBQXZCaUMsRUFBRSxJQUFLekMsRUFBRVQsRUFBRXdrQyxZQUFlSyxJQUFJM2hDLEVBQUUsQ0FBSyxHQUFHLFFBQVBqQyxFQUFFNlMsSUFBYyxDQUFDLE9BQU9yVCxHQUFHQSxHQUFHLEtBQUssRUFBRVMsRUFBRSxFQUFFLE1BQU0sS0FBSyxHQUFHQSxFQUFFLEVBQUUsTUFBTSxLQUFLLEdBQUcsS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssT0FBTyxLQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssUUFBUSxLQUFLLFFBQVEsS0FBSyxRQUFRLEtBQUssUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssU0FBU0EsRUFBRSxHQUFHLE1BQU0sS0FBSyxVQUFVQSxFQUFFLFVBQVUsTUFBTSxRQUFRQSxFQUFFLEVBQ2hkLEtBRGtkQSxFQUFFLElBQUtBLEdBQUdELEVBQUV5eEIsZUFBZWp5QixJQUFJLEVBQUVTLElBQzVlQSxJQUFJSyxFQUFFNmhDLFlBQVk3aEMsRUFBRTZoQyxVQUFVbGlDLEVBQUVta0MsR0FBR3JsQyxFQUFFa0IsR0FBR2ltQyxHQUFHbG1DLEVBQUVqQixFQUFFa0IsR0FBRyxHQUFHLENBQTBCLE9BQXpCc3hDLEtBQWdDSCxHQUFHcnlDLEVBQUVDLEVBQUVRLEVBQWxDUSxFQUFFaXVDLEdBQUd0dUMsTUFBTXVQLEVBQUUsT0FBeUIsQ0FBQyxNQUFHLE9BQU9qUCxFQUFFdWhCLE1BQVl4aUIsRUFBRXF4QixPQUFPLElBQUlyeEIsRUFBRXd4QixNQUFNenhCLEVBQUV5eEIsTUFBTXh4QixFQUFFd3lDLEdBQUdsd0MsS0FBSyxLQUFLdkMsR0FBR2tCLEVBQUV3eEMsWUFBWXp5QyxFQUFFLE9BQUtELEVBQUV1QixFQUFFNGhDLFlBQVlULEdBQUczQyxHQUFHNytCLEVBQUUyaEIsYUFBYTRmLEdBQUd4aUMsRUFBRW9KLElBQUUsRUFBR3M1QixHQUFHLEtBQUssT0FBTzNpQyxJQUFJZ2lDLEdBQUdDLE1BQU1FLEdBQUdILEdBQUdDLE1BQU1HLEdBQUdKLEdBQUdDLE1BQU1DLEdBQUdDLEdBQUduaUMsRUFBRW1ZLEdBQUdpcUIsR0FBR3BpQyxFQUFFa2pDLFNBQVNoQixHQUFHamlDLElBQUdBLEVBQUVteUMsR0FBR255QyxFQUFFZ0IsRUFBRThyQixXQUFZdUUsT0FBTyxLQUFZcnhCLEVBQUMsQ0FMcksweUMsQ0FBRzN5QyxFQUFFQyxFQUFFUSxFQUFFUSxFQUFFaUMsRUFBRWhDLEVBQUVoQixHQUFHLEdBQUdxQixFQUFFLENBQUNBLEVBQUVOLEVBQUVpeEMsU0FBU3p4QyxFQUFFUixFQUFFcWpDLEtBQWVwZ0MsR0FBVmhDLEVBQUVsQixFQUFFeXhCLE9BQVVDLFFBQVEsSUFBSWppQixFQUFFLENBQUM2ekIsS0FBSyxTQUFTdlcsU0FBUzlyQixFQUFFOHJCLFVBQ2hGLE9BRDBGLElBQU8sRUFBRnRzQixJQUFNUixFQUFFd3hCLFFBQVF2d0IsSUFBR0QsRUFBRWhCLEVBQUV3eEIsT0FBUStTLFdBQVcsRUFBRXZqQyxFQUFFZ2lDLGFBQWF4ekIsRUFBRXhQLEVBQUU4aUMsVUFBVSxPQUFPOWhDLEVBQUUybkMsR0FBRzFuQyxFQUFFdU8sSUFBS21qQyxhQUE0QixTQUFmMXhDLEVBQUUweEMsYUFBdUIsT0FBTzF2QyxFQUFFM0IsRUFBRXFuQyxHQUFHMWxDLEVBQUUzQixJQUFJQSxFQUFFMG5DLEdBQUcxbkMsRUFBRWQsRUFBRVAsRUFBRSxPQUFRb3hCLE9BQU8sRUFBRy92QixFQUFFOHZCLE9BQ25mcHhCLEVBQUVnQixFQUFFb3dCLE9BQU9weEIsRUFBRWdCLEVBQUV5d0IsUUFBUW53QixFQUFFdEIsRUFBRXd4QixNQUFNeHdCLEVBQUVBLEVBQUVNLEVBQUVBLEVBQUV0QixFQUFFd3hCLE1BQThCaHhCLEVBQUUsUUFBMUJBLEVBQUVULEVBQUV5eEIsTUFBTUYsZUFBeUJ5Z0IsR0FBRzl4QyxHQUFHLENBQUMwd0MsVUFBVW53QyxFQUFFbXdDLFVBQVUxd0MsRUFBRTJ3QyxVQUFVLEtBQUtDLFlBQVlyd0MsRUFBRXF3QyxhQUFhdnZDLEVBQUVnd0IsY0FBYzl3QixFQUFFYyxFQUFFaWpDLFdBQVd4a0MsRUFBRXdrQyxZQUFZdGtDLEVBQUVELEVBQUVzeEIsY0FBY3dnQixHQUFVOXdDLENBQUMsQ0FBb08sT0FBek5qQixHQUFWdUIsRUFBRXZCLEVBQUV5eEIsT0FBVUMsUUFBUXp3QixFQUFFMm5DLEdBQUdybkMsRUFBRSxDQUFDK2hDLEtBQUssVUFBVXZXLFNBQVM5ckIsRUFBRThyQixXQUFXLElBQVksRUFBUDlzQixFQUFFcWpDLFFBQVVyaUMsRUFBRTJqQyxNQUFNMWtDLEdBQUdlLEVBQUVvd0IsT0FBT3B4QixFQUFFZ0IsRUFBRXl3QixRQUFRLEtBQUssT0FBTzF4QixJQUFrQixRQUFkRSxFQUFFRCxFQUFFOGlDLFlBQW9COWlDLEVBQUU4aUMsVUFBVSxDQUFDL2lDLEdBQUdDLEVBQUVxeEIsT0FBTyxJQUFJcHhCLEVBQUV1SCxLQUFLekgsSUFBSUMsRUFBRXd4QixNQUFNeHdCLEVBQUVoQixFQUFFc3hCLGNBQWMsS0FBWXR3QixDQUFDLENBQ25kLFNBQVNteEMsR0FBR3B5QyxFQUFFQyxHQUE4RCxPQUEzREEsRUFBRWt5QyxHQUFHLENBQUM3TyxLQUFLLFVBQVV2VyxTQUFTOXNCLEdBQUdELEVBQUVzakMsS0FBSyxFQUFFLE9BQVFqUyxPQUFPcnhCLEVBQVNBLEVBQUV5eEIsTUFBTXh4QixDQUFDLENBQUMsU0FBU295QyxHQUFHcnlDLEVBQUVDLEVBQUVDLEVBQUVlLEdBQXdHLE9BQXJHLE9BQU9BLEdBQUc0aUMsR0FBRzVpQyxHQUFHaW9DLEdBQUdqcEMsRUFBRUQsRUFBRXl4QixNQUFNLEtBQUt2eEIsSUFBR0YsRUFBRW95QyxHQUFHbnlDLEVBQUVBLEVBQUVnakMsYUFBYWxXLFdBQVl1RSxPQUFPLEVBQUVyeEIsRUFBRXN4QixjQUFjLEtBQVl2eEIsQ0FBQyxDQUdrSixTQUFTNnlDLEdBQUc3eUMsRUFBRUMsRUFBRUMsR0FBR0YsRUFBRTRrQyxPQUFPM2tDLEVBQUUsSUFBSWdCLEVBQUVqQixFQUFFb3hCLFVBQVUsT0FBT253QixJQUFJQSxFQUFFMmpDLE9BQU8za0MsR0FBR3NrQyxHQUFHdmtDLEVBQUVxeEIsT0FBT3B4QixFQUFFQyxFQUFFLENBQ3hjLFNBQVM0eUMsR0FBRzl5QyxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxHQUFHLElBQUlLLEVBQUV2QixFQUFFdXhCLGNBQWMsT0FBT2h3QixFQUFFdkIsRUFBRXV4QixjQUFjLENBQUN3aEIsWUFBWTl5QyxFQUFFK3lDLFVBQVUsS0FBS0MsbUJBQW1CLEVBQUVDLEtBQUtqeUMsRUFBRWt5QyxLQUFLanpDLEVBQUVrekMsU0FBU2x5QyxJQUFJSyxFQUFFd3hDLFlBQVk5eUMsRUFBRXNCLEVBQUV5eEMsVUFBVSxLQUFLenhDLEVBQUUweEMsbUJBQW1CLEVBQUUxeEMsRUFBRTJ4QyxLQUFLanlDLEVBQUVNLEVBQUU0eEMsS0FBS2p6QyxFQUFFcUIsRUFBRTZ4QyxTQUFTbHlDLEVBQUUsQ0FDM08sU0FBU215QyxHQUFHcnpDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSWUsRUFBRWhCLEVBQUVnakMsYUFBYS9oQyxFQUFFRCxFQUFFNm9DLFlBQVl2b0MsRUFBRU4sRUFBRWt5QyxLQUFzQyxHQUFqQy9DLEdBQUdwd0MsRUFBRUMsRUFBRWdCLEVBQUU4ckIsU0FBUzdzQixHQUFrQixJQUFPLEdBQXRCZSxFQUFFNkUsR0FBRTZyQixVQUFxQjF3QixFQUFJLEVBQUZBLEVBQUksRUFBRWhCLEVBQUVxeEIsT0FBTyxRQUFRLENBQUMsR0FBRyxPQUFPdHhCLEdBQUcsSUFBYSxJQUFSQSxFQUFFc3hCLE9BQVd0eEIsRUFBRSxJQUFJQSxFQUFFQyxFQUFFd3hCLE1BQU0sT0FBT3p4QixHQUFHLENBQUMsR0FBRyxLQUFLQSxFQUFFd3JCLElBQUksT0FBT3hyQixFQUFFdXhCLGVBQWVzaEIsR0FBRzd5QyxFQUFFRSxFQUFFRCxRQUFRLEdBQUcsS0FBS0QsRUFBRXdyQixJQUFJcW5CLEdBQUc3eUMsRUFBRUUsRUFBRUQsUUFBUSxHQUFHLE9BQU9ELEVBQUV5eEIsTUFBTSxDQUFDenhCLEVBQUV5eEIsTUFBTUosT0FBT3J4QixFQUFFQSxFQUFFQSxFQUFFeXhCLE1BQU0sUUFBUSxDQUFDLEdBQUd6eEIsSUFBSUMsRUFBRSxNQUFNRCxFQUFFLEtBQUssT0FBT0EsRUFBRTB4QixTQUFTLENBQUMsR0FBRyxPQUFPMXhCLEVBQUVxeEIsUUFBUXJ4QixFQUFFcXhCLFNBQVNweEIsRUFBRSxNQUFNRCxFQUFFQSxFQUFFQSxFQUFFcXhCLE1BQU0sQ0FBQ3J4QixFQUFFMHhCLFFBQVFMLE9BQU9yeEIsRUFBRXF4QixPQUFPcnhCLEVBQUVBLEVBQUUweEIsT0FBTyxDQUFDendCLEdBQUcsQ0FBQyxDQUFRLEdBQVBzUCxHQUFFekssR0FBRTdFLEdBQU0sSUFBWSxFQUFQaEIsRUFBRXFqQyxNQUFRcmpDLEVBQUVzeEIsY0FDL2UsVUFBVSxPQUFPcndCLEdBQUcsSUFBSyxXQUFxQixJQUFWaEIsRUFBRUQsRUFBRXd4QixNQUFVdndCLEVBQUUsS0FBSyxPQUFPaEIsR0FBaUIsUUFBZEYsRUFBRUUsRUFBRWt4QixZQUFvQixPQUFPeVksR0FBRzdwQyxLQUFLa0IsRUFBRWhCLEdBQUdBLEVBQUVBLEVBQUV3eEIsUUFBWSxRQUFKeHhCLEVBQUVnQixJQUFZQSxFQUFFakIsRUFBRXd4QixNQUFNeHhCLEVBQUV3eEIsTUFBTSxPQUFPdndCLEVBQUVoQixFQUFFd3hCLFFBQVF4eEIsRUFBRXd4QixRQUFRLE1BQU1vaEIsR0FBRzd5QyxHQUFFLEVBQUdpQixFQUFFaEIsRUFBRXFCLEdBQUcsTUFBTSxJQUFLLFlBQTZCLElBQWpCckIsRUFBRSxLQUFLZ0IsRUFBRWpCLEVBQUV3eEIsTUFBVXh4QixFQUFFd3hCLE1BQU0sS0FBSyxPQUFPdndCLEdBQUcsQ0FBZSxHQUFHLFFBQWpCbEIsRUFBRWtCLEVBQUVrd0IsWUFBdUIsT0FBT3lZLEdBQUc3cEMsR0FBRyxDQUFDQyxFQUFFd3hCLE1BQU12d0IsRUFBRSxLQUFLLENBQUNsQixFQUFFa0IsRUFBRXd3QixRQUFReHdCLEVBQUV3d0IsUUFBUXh4QixFQUFFQSxFQUFFZ0IsRUFBRUEsRUFBRWxCLENBQUMsQ0FBQzh5QyxHQUFHN3lDLEdBQUUsRUFBR0MsRUFBRSxLQUFLcUIsR0FBRyxNQUFNLElBQUssV0FBV3V4QyxHQUFHN3lDLEdBQUUsRUFBRyxLQUFLLFVBQUssR0FBUSxNQUFNLFFBQVFBLEVBQUVzeEIsY0FBYyxLQUFLLE9BQU90eEIsRUFBRXd4QixLQUFLLENBQzdkLFNBQVMwZixHQUFHbnhDLEVBQUVDLEdBQUcsSUFBWSxFQUFQQSxFQUFFcWpDLE9BQVMsT0FBT3RqQyxJQUFJQSxFQUFFb3hCLFVBQVUsS0FBS254QixFQUFFbXhCLFVBQVUsS0FBS254QixFQUFFcXhCLE9BQU8sRUFBRSxDQUFDLFNBQVNnZixHQUFHdHdDLEVBQUVDLEVBQUVDLEdBQXlELEdBQXRELE9BQU9GLElBQUlDLEVBQUV5a0MsYUFBYTFrQyxFQUFFMGtDLGNBQWM4QixJQUFJdm1DLEVBQUUya0MsTUFBUyxJQUFLMWtDLEVBQUVELEVBQUV1a0MsWUFBWSxPQUFPLEtBQUssR0FBRyxPQUFPeGtDLEdBQUdDLEVBQUV3eEIsUUFBUXp4QixFQUFFeXhCLE1BQU0sTUFBTTd3QixNQUFNdVAsRUFBRSxNQUFNLEdBQUcsT0FBT2xRLEVBQUV3eEIsTUFBTSxDQUE0QyxJQUFqQ3Z4QixFQUFFMG9DLEdBQVo1b0MsRUFBRUMsRUFBRXd4QixNQUFhenhCLEVBQUVpakMsY0FBY2hqQyxFQUFFd3hCLE1BQU12eEIsRUFBTUEsRUFBRW14QixPQUFPcHhCLEVBQUUsT0FBT0QsRUFBRTB4QixTQUFTMXhCLEVBQUVBLEVBQUUweEIsU0FBUXh4QixFQUFFQSxFQUFFd3hCLFFBQVFrWCxHQUFHNW9DLEVBQUVBLEVBQUVpakMsZUFBZ0I1UixPQUFPcHhCLEVBQUVDLEVBQUV3eEIsUUFBUSxJQUFJLENBQUMsT0FBT3p4QixFQUFFd3hCLEtBQUssQ0FPOWEsU0FBUzZoQixHQUFHdHpDLEVBQUVDLEdBQUcsSUFBSW9KLEdBQUUsT0FBT3JKLEVBQUVvekMsVUFBVSxJQUFLLFNBQVNuekMsRUFBRUQsRUFBRW16QyxLQUFLLElBQUksSUFBSWp6QyxFQUFFLEtBQUssT0FBT0QsR0FBRyxPQUFPQSxFQUFFbXhCLFlBQVlseEIsRUFBRUQsR0FBR0EsRUFBRUEsRUFBRXl4QixRQUFRLE9BQU94eEIsRUFBRUYsRUFBRW16QyxLQUFLLEtBQUtqekMsRUFBRXd4QixRQUFRLEtBQUssTUFBTSxJQUFLLFlBQVl4eEIsRUFBRUYsRUFBRW16QyxLQUFLLElBQUksSUFBSWx5QyxFQUFFLEtBQUssT0FBT2YsR0FBRyxPQUFPQSxFQUFFa3hCLFlBQVlud0IsRUFBRWYsR0FBR0EsRUFBRUEsRUFBRXd4QixRQUFRLE9BQU96d0IsRUFBRWhCLEdBQUcsT0FBT0QsRUFBRW16QyxLQUFLbnpDLEVBQUVtekMsS0FBSyxLQUFLbnpDLEVBQUVtekMsS0FBS3poQixRQUFRLEtBQUt6d0IsRUFBRXl3QixRQUFRLEtBQUssQ0FDNVUsU0FBU2prQixHQUFFek4sR0FBRyxJQUFJQyxFQUFFLE9BQU9ELEVBQUVveEIsV0FBV3B4QixFQUFFb3hCLFVBQVVLLFFBQVF6eEIsRUFBRXl4QixNQUFNdnhCLEVBQUUsRUFBRWUsRUFBRSxFQUFFLEdBQUdoQixFQUFFLElBQUksSUFBSWlCLEVBQUVsQixFQUFFeXhCLE1BQU0sT0FBT3Z3QixHQUFHaEIsR0FBR2dCLEVBQUUwakMsTUFBTTFqQyxFQUFFc2pDLFdBQVd2akMsR0FBa0IsU0FBZkMsRUFBRTB4QyxhQUFzQjN4QyxHQUFXLFNBQVJDLEVBQUVvd0IsTUFBZXB3QixFQUFFbXdCLE9BQU9yeEIsRUFBRWtCLEVBQUVBLEVBQUV3d0IsYUFBYSxJQUFJeHdCLEVBQUVsQixFQUFFeXhCLE1BQU0sT0FBT3Z3QixHQUFHaEIsR0FBR2dCLEVBQUUwakMsTUFBTTFqQyxFQUFFc2pDLFdBQVd2akMsR0FBR0MsRUFBRTB4QyxhQUFhM3hDLEdBQUdDLEVBQUVvd0IsTUFBTXB3QixFQUFFbXdCLE9BQU9yeEIsRUFBRWtCLEVBQUVBLEVBQUV3d0IsUUFBeUMsT0FBakMxeEIsRUFBRTR5QyxjQUFjM3hDLEVBQUVqQixFQUFFd2tDLFdBQVd0a0MsRUFBU0QsQ0FBQyxDQUM3VixTQUFTc3pDLEdBQUd2ekMsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZSxFQUFFaEIsRUFBRWdqQyxhQUFtQixPQUFOVCxHQUFHdmlDLEdBQVVBLEVBQUV1ckIsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEdBQUcsT0FBTy9kLEdBQUV4TixHQUFHLEtBQUssS0FBSyxFQVV0RCxLQUFLLEdBQUcsT0FBTzhnQyxHQUFHOWdDLEVBQUU4ZCxPQUFPaWpCLEtBQUt2ekIsR0FBRXhOLEdBQUcsS0FWcUQsS0FBSyxFQUEyUSxPQUF6UWdCLEVBQUVoQixFQUFFZ3hCLFVBQVV5WSxLQUFLaGhDLEdBQUVnNEIsSUFBSWg0QixHQUFFdEQsSUFBRzRrQyxLQUFLL29DLEVBQUV3d0MsaUJBQWlCeHdDLEVBQUU4akMsUUFBUTlqQyxFQUFFd3dDLGVBQWV4d0MsRUFBRXd3QyxlQUFlLE1BQVMsT0FBT3p4QyxHQUFHLE9BQU9BLEVBQUV5eEIsUUFBTWdTLEdBQUd4akMsR0FBR0EsRUFBRXF4QixPQUFPLEVBQUUsT0FBT3R4QixHQUFHQSxFQUFFdXhCLGNBQWNpQyxjQUFjLElBQWEsSUFBUnZ6QixFQUFFcXhCLFNBQWFyeEIsRUFBRXF4QixPQUFPLEtBQUssT0FBT3FSLEtBQUs2USxHQUFHN1EsSUFBSUEsR0FBRyxRQUFPaVAsR0FBRzV4QyxFQUFFQyxHQUFHd04sR0FBRXhOLEdBQVUsS0FBSyxLQUFLLEVBQUUycEMsR0FBRzNwQyxHQUFHLElBQUlpQixFQUFFc29DLEdBQUdELEdBQUc1WCxTQUM3ZSxHQUFUenhCLEVBQUVELEVBQUU4ZCxLQUFRLE9BQU8vZCxHQUFHLE1BQU1DLEVBQUVneEIsVUFBVTRnQixHQUFHN3hDLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEdBQUdsQixFQUFFcW9DLE1BQU1wb0MsRUFBRW9vQyxNQUFNcG9DLEVBQUVxeEIsT0FBTyxJQUFJcnhCLEVBQUVxeEIsT0FBTyxhQUFhLENBQUMsSUFBSXJ3QixFQUFFLENBQUMsR0FBRyxPQUFPaEIsRUFBRWd4QixVQUFVLE1BQU1yd0IsTUFBTXVQLEVBQUUsTUFBVyxPQUFMMUMsR0FBRXhOLEdBQVUsSUFBSSxDQUFrQixHQUFqQkQsRUFBRXdwQyxHQUFHSCxHQUFHMVgsU0FBWThSLEdBQUd4akMsR0FBRyxDQUFDZ0IsRUFBRWhCLEVBQUVneEIsVUFBVS93QixFQUFFRCxFQUFFOGQsS0FBSyxJQUFJeGMsRUFBRXRCLEVBQUV5akMsY0FBK0MsT0FBakN6aUMsRUFBRWkvQixJQUFJamdDLEVBQUVnQixFQUFFay9CLElBQUk1K0IsRUFBRXZCLEVBQUUsSUFBWSxFQUFQQyxFQUFFcWpDLE1BQWVwakMsR0FBRyxJQUFLLFNBQVNxSSxHQUFFLFNBQVN0SCxHQUFHc0gsR0FBRSxRQUFRdEgsR0FBRyxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFRc0gsR0FBRSxPQUFPdEgsR0FBRyxNQUFNLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSUMsRUFBRSxFQUFFQSxFQUFFdThCLEdBQUcvOEIsT0FBT1EsSUFBSXFILEdBQUVrMUIsR0FBR3Y4QixHQUFHRCxHQUFHLE1BQU0sSUFBSyxTQUFTc0gsR0FBRSxRQUFRdEgsR0FBRyxNQUFNLElBQUssTUFBTSxJQUFLLFFBQVEsSUFBSyxPQUFPc0gsR0FBRSxRQUNuaEJ0SCxHQUFHc0gsR0FBRSxPQUFPdEgsR0FBRyxNQUFNLElBQUssVUFBVXNILEdBQUUsU0FBU3RILEdBQUcsTUFBTSxJQUFLLFFBQVE4SCxFQUFHOUgsRUFBRU0sR0FBR2dILEdBQUUsVUFBVXRILEdBQUcsTUFBTSxJQUFLLFNBQVNBLEVBQUVxckIsY0FBYyxDQUFDbW5CLGNBQWNseUMsRUFBRW15QyxVQUFVbnJDLEdBQUUsVUFBVXRILEdBQUcsTUFBTSxJQUFLLFdBQVc4SSxHQUFHOUksRUFBRU0sR0FBR2dILEdBQUUsVUFBVXRILEdBQWtCLElBQUksSUFBSVIsS0FBdkJvTCxHQUFHM0wsRUFBRXFCLEdBQUdMLEVBQUUsS0FBa0JLLEVBQUUsR0FBR0EsRUFBRTZHLGVBQWUzSCxHQUFHLENBQUMsSUFBSXlDLEVBQUUzQixFQUFFZCxHQUFHLGFBQWFBLEVBQUUsaUJBQWtCeUMsRUFBRWpDLEVBQUVrUixjQUFjalAsS0FBSSxJQUFLM0IsRUFBRW95QywwQkFBMEI3VSxHQUFHNzlCLEVBQUVrUixZQUFZalAsRUFBRWxELEdBQUdrQixFQUFFLENBQUMsV0FBV2dDLElBQUksaUJBQWtCQSxHQUFHakMsRUFBRWtSLGNBQWMsR0FBR2pQLEtBQUksSUFBSzNCLEVBQUVveUMsMEJBQTBCN1UsR0FBRzc5QixFQUFFa1IsWUFDMWVqUCxFQUFFbEQsR0FBR2tCLEVBQUUsQ0FBQyxXQUFXLEdBQUdnQyxJQUFJckMsRUFBR3VILGVBQWUzSCxJQUFJLE1BQU15QyxHQUFHLGFBQWF6QyxHQUFHOEgsR0FBRSxTQUFTdEgsRUFBRSxDQUFDLE9BQU9mLEdBQUcsSUFBSyxRQUFRNEgsRUFBRzdHLEdBQUd5SSxFQUFHekksRUFBRU0sR0FBRSxHQUFJLE1BQU0sSUFBSyxXQUFXdUcsRUFBRzdHLEdBQUdzSixHQUFHdEosR0FBRyxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsTUFBTSxRQUFRLG1CQUFvQk0sRUFBRXF5QyxVQUFVM3lDLEVBQUU0eUMsUUFBUTlVLElBQUk5OUIsRUFBRUMsRUFBRWpCLEVBQUV1bEMsWUFBWXZrQyxFQUFFLE9BQU9BLElBQUloQixFQUFFcXhCLE9BQU8sRUFBRSxLQUFLLENBQUM3d0IsRUFBRSxJQUFJUyxFQUFFK1EsU0FBUy9RLEVBQUVBLEVBQUVxRCxjQUFjLGlDQUFpQ3ZFLElBQUlBLEVBQUV3SyxHQUFHdEssSUFBSSxpQ0FBaUNGLEVBQUUsV0FBV0UsSUFBR0YsRUFBRVMsRUFBRWtHLGNBQWMsUUFBU0csVUFBVSxxQkFBdUI5RyxFQUFFQSxFQUFFb0ssWUFBWXBLLEVBQUU2RyxhQUMvZixpQkFBa0I1RixFQUFFNnZCLEdBQUc5d0IsRUFBRVMsRUFBRWtHLGNBQWN6RyxFQUFFLENBQUM0d0IsR0FBRzd2QixFQUFFNnZCLE1BQU05d0IsRUFBRVMsRUFBRWtHLGNBQWN6RyxHQUFHLFdBQVdBLElBQUlPLEVBQUVULEVBQUVpQixFQUFFeXlDLFNBQVNqekMsRUFBRWl6QyxVQUFTLEVBQUd6eUMsRUFBRTZ5QyxPQUFPcnpDLEVBQUVxekMsS0FBSzd5QyxFQUFFNnlDLFFBQVE5ekMsRUFBRVMsRUFBRXN6QyxnQkFBZ0IvekMsRUFBRUUsR0FBR0YsRUFBRWtnQyxJQUFJamdDLEVBQUVELEVBQUVtZ0MsSUFBSWwvQixFQUFFMHdDLEdBQUczeEMsRUFBRUMsR0FBRSxHQUFHLEdBQUlBLEVBQUVneEIsVUFBVWp4QixFQUFFQSxFQUFFLENBQVcsT0FBVlMsRUFBRXFMLEdBQUc1TCxFQUFFZSxHQUFVZixHQUFHLElBQUssU0FBU3FJLEdBQUUsU0FBU3ZJLEdBQUd1SSxHQUFFLFFBQVF2SSxHQUFHa0IsRUFBRUQsRUFBRSxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFRc0gsR0FBRSxPQUFPdkksR0FBR2tCLEVBQUVELEVBQUUsTUFBTSxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUlDLEVBQUUsRUFBRUEsRUFBRXU4QixHQUFHLzhCLE9BQU9RLElBQUlxSCxHQUFFazFCLEdBQUd2OEIsR0FBR2xCLEdBQUdrQixFQUFFRCxFQUFFLE1BQU0sSUFBSyxTQUFTc0gsR0FBRSxRQUFRdkksR0FBR2tCLEVBQUVELEVBQUUsTUFBTSxJQUFLLE1BQU0sSUFBSyxRQUFRLElBQUssT0FBT3NILEdBQUUsUUFDbGZ2SSxHQUFHdUksR0FBRSxPQUFPdkksR0FBR2tCLEVBQUVELEVBQUUsTUFBTSxJQUFLLFVBQVVzSCxHQUFFLFNBQVN2SSxHQUFHa0IsRUFBRUQsRUFBRSxNQUFNLElBQUssUUFBUThILEVBQUcvSSxFQUFFaUIsR0FBR0MsRUFBRXNILEVBQUd4SSxFQUFFaUIsR0FBR3NILEdBQUUsVUFBVXZJLEdBQUcsTUFBTSxJQUFLLFNBQWlMLFFBQVFrQixFQUFFRCxRQUF4SyxJQUFLLFNBQVNqQixFQUFFc3NCLGNBQWMsQ0FBQ21uQixjQUFjeHlDLEVBQUV5eUMsVUFBVXh5QyxFQUFFK0IsRUFBRSxDQUFDLEVBQUVoQyxFQUFFLENBQUNaLFdBQU0sSUFBU2tJLEdBQUUsVUFBVXZJLEdBQUcsTUFBTSxJQUFLLFdBQVcrSixHQUFHL0osRUFBRWlCLEdBQUdDLEVBQUU0SSxHQUFHOUosRUFBRWlCLEdBQUdzSCxHQUFFLFVBQVV2SSxHQUFpQyxJQUFJdUIsS0FBaEJzSyxHQUFHM0wsRUFBRWdCLEdBQUdnQyxFQUFFaEMsRUFBYSxHQUFHZ0MsRUFBRWtGLGVBQWU3RyxHQUFHLENBQUMsSUFBSWtPLEVBQUV2TSxFQUFFM0IsR0FBRyxVQUFVQSxFQUFFbUssR0FBRzFMLEVBQUV5UCxHQUFHLDRCQUE0QmxPLEVBQXVCLE9BQXBCa08sRUFBRUEsRUFBRUEsRUFBRTB2QixZQUFPLElBQWdCdjBCLEdBQUc1SyxFQUFFeVAsR0FBSSxhQUFhbE8sRUFBRSxpQkFBa0JrTyxHQUFHLGFBQzdldlAsR0FBRyxLQUFLdVAsSUFBSXhFLEdBQUdqTCxFQUFFeVAsR0FBRyxpQkFBa0JBLEdBQUd4RSxHQUFHakwsRUFBRSxHQUFHeVAsR0FBRyxtQ0FBbUNsTyxHQUFHLDZCQUE2QkEsR0FBRyxjQUFjQSxJQUFJVixFQUFHdUgsZUFBZTdHLEdBQUcsTUFBTWtPLEdBQUcsYUFBYWxPLEdBQUdnSCxHQUFFLFNBQVN2SSxHQUFHLE1BQU15UCxHQUFHdEwsRUFBR25FLEVBQUV1QixFQUFFa08sRUFBRWhQLEdBQUcsQ0FBQyxPQUFPUCxHQUFHLElBQUssUUFBUTRILEVBQUc5SCxHQUFHMEosRUFBRzFKLEVBQUVpQixHQUFFLEdBQUksTUFBTSxJQUFLLFdBQVc2RyxFQUFHOUgsR0FBR3VLLEdBQUd2SyxHQUFHLE1BQU0sSUFBSyxTQUFTLE1BQU1pQixFQUFFWixPQUFPTCxFQUFFNE8sYUFBYSxRQUFRLEdBQUdoSCxFQUFHM0csRUFBRVosUUFBUSxNQUFNLElBQUssU0FBU0wsRUFBRTB6QyxXQUFXenlDLEVBQUV5eUMsU0FBbUIsT0FBVm55QyxFQUFFTixFQUFFWixPQUFjd0osR0FBRzdKLElBQUlpQixFQUFFeXlDLFNBQVNueUMsR0FBRSxHQUFJLE1BQU1OLEVBQUVvckIsY0FBY3hpQixHQUFHN0osSUFBSWlCLEVBQUV5eUMsU0FBU3p5QyxFQUFFb3JCLGNBQ2xmLEdBQUksTUFBTSxRQUFRLG1CQUFvQm5yQixFQUFFMHlDLFVBQVU1ekMsRUFBRTZ6QyxRQUFROVUsSUFBSSxPQUFPNytCLEdBQUcsSUFBSyxTQUFTLElBQUssUUFBUSxJQUFLLFNBQVMsSUFBSyxXQUFXZSxJQUFJQSxFQUFFK3lDLFVBQVUsTUFBTWgwQyxFQUFFLElBQUssTUFBTWlCLEdBQUUsRUFBRyxNQUFNakIsRUFBRSxRQUFRaUIsR0FBRSxFQUFHLENBQUNBLElBQUloQixFQUFFcXhCLE9BQU8sRUFBRSxDQUFDLE9BQU9yeEIsRUFBRW9vQyxNQUFNcG9DLEVBQUVxeEIsT0FBTyxJQUFJcnhCLEVBQUVxeEIsT0FBTyxRQUFRLENBQU0sT0FBTDdqQixHQUFFeE4sR0FBVSxLQUFLLEtBQUssRUFBRSxHQUFHRCxHQUFHLE1BQU1DLEVBQUVneEIsVUFBVTZnQixHQUFHOXhDLEVBQUVDLEVBQUVELEVBQUUwakMsY0FBY3ppQyxPQUFPLENBQUMsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT2hCLEVBQUVneEIsVUFBVSxNQUFNcndCLE1BQU11UCxFQUFFLE1BQXNDLEdBQWhDalEsRUFBRXNwQyxHQUFHRCxHQUFHNVgsU0FBUzZYLEdBQUdILEdBQUcxWCxTQUFZOFIsR0FBR3hqQyxHQUFHLENBQXlDLEdBQXhDZ0IsRUFBRWhCLEVBQUVneEIsVUFBVS93QixFQUFFRCxFQUFFeWpDLGNBQWN6aUMsRUFBRWkvQixJQUFJamdDLEdBQUtzQixFQUFFTixFQUFFaVIsWUFBWWhTLElBQy9lLFFBRG9mRixFQUN2ZnlpQyxJQUFZLE9BQU96aUMsRUFBRXdyQixLQUFLLEtBQUssRUFBRXNULEdBQUc3OUIsRUFBRWlSLFVBQVVoUyxFQUFFLElBQVksRUFBUEYsRUFBRXNqQyxPQUFTLE1BQU0sS0FBSyxHQUFFLElBQUt0akMsRUFBRTBqQyxjQUFjaVEsMEJBQTBCN1UsR0FBRzc5QixFQUFFaVIsVUFBVWhTLEVBQUUsSUFBWSxFQUFQRixFQUFFc2pDLE9BQVMvaEMsSUFBSXRCLEVBQUVxeEIsT0FBTyxFQUFFLE1BQU1yd0IsR0FBRyxJQUFJZixFQUFFK1IsU0FBUy9SLEVBQUVBLEVBQUVxRSxlQUFlMHZDLGVBQWVoekMsSUFBS2kvQixJQUFJamdDLEVBQUVBLEVBQUVneEIsVUFBVWh3QixDQUFDLENBQU0sT0FBTHdNLEdBQUV4TixHQUFVLEtBQUssS0FBSyxHQUEwQixHQUF2QnlJLEdBQUU1QyxJQUFHN0UsRUFBRWhCLEVBQUVzeEIsY0FBaUIsT0FBT3Z4QixHQUFHLE9BQU9BLEVBQUV1eEIsZUFBZSxPQUFPdnhCLEVBQUV1eEIsY0FBY0MsV0FBVyxDQUFDLEdBQUdub0IsSUFBRyxPQUFPcTVCLElBQUksSUFBWSxFQUFQemlDLEVBQUVxakMsT0FBUyxJQUFhLElBQVJyakMsRUFBRXF4QixPQUFXcVMsS0FBS0MsS0FBSzNqQyxFQUFFcXhCLE9BQU8sTUFBTS92QixHQUFFLE9BQVEsR0FBR0EsRUFBRWtpQyxHQUFHeGpDLEdBQUcsT0FBT2dCLEdBQUcsT0FBT0EsRUFBRXV3QixXQUFXLENBQUMsR0FBRyxPQUM1Znh4QixFQUFFLENBQUMsSUFBSXVCLEVBQUUsTUFBTVgsTUFBTXVQLEVBQUUsTUFBcUQsS0FBN0I1TyxFQUFFLFFBQXBCQSxFQUFFdEIsRUFBRXN4QixlQUF5Qmh3QixFQUFFaXdCLFdBQVcsTUFBVyxNQUFNNXdCLE1BQU11UCxFQUFFLE1BQU01TyxFQUFFMitCLElBQUlqZ0MsQ0FBQyxNQUFNMmpDLEtBQUssSUFBYSxJQUFSM2pDLEVBQUVxeEIsU0FBYXJ4QixFQUFFc3hCLGNBQWMsTUFBTXR4QixFQUFFcXhCLE9BQU8sRUFBRTdqQixHQUFFeE4sR0FBR3NCLEdBQUUsQ0FBRSxNQUFNLE9BQU9vaEMsS0FBSzZRLEdBQUc3USxJQUFJQSxHQUFHLE1BQU1waEMsR0FBRSxFQUFHLElBQUlBLEVBQUUsT0FBZSxNQUFSdEIsRUFBRXF4QixNQUFZcnhCLEVBQUUsSUFBSSxDQUFDLE9BQUcsSUFBYSxJQUFSQSxFQUFFcXhCLFFBQWtCcnhCLEVBQUUya0MsTUFBTTFrQyxFQUFFRCxLQUFFZ0IsRUFBRSxPQUFPQSxLQUFPLE9BQU9qQixHQUFHLE9BQU9BLEVBQUV1eEIsZ0JBQWdCdHdCLElBQUloQixFQUFFd3hCLE1BQU1ILE9BQU8sS0FBSyxJQUFZLEVBQVByeEIsRUFBRXFqQyxRQUFVLE9BQU90akMsR0FBRyxJQUFlLEVBQVY4RixHQUFFNnJCLFNBQVcsSUFBSWhkLEtBQUlBLEdBQUUsR0FBRzY5QixPQUFPLE9BQU92eUMsRUFBRXVsQyxjQUFjdmxDLEVBQUVxeEIsT0FBTyxHQUFHN2pCLEdBQUV4TixHQUFVLE1BQUssS0FBSyxFQUFFLE9BQU95cEMsS0FDcmZrSSxHQUFHNXhDLEVBQUVDLEdBQUcsT0FBT0QsR0FBR20rQixHQUFHbCtCLEVBQUVneEIsVUFBVXdDLGVBQWVobUIsR0FBRXhOLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT29rQyxHQUFHcGtDLEVBQUU4ZCxLQUFLME4sVUFBVWhlLEdBQUV4TixHQUFHLEtBQStDLEtBQUssR0FBMEIsR0FBdkJ5SSxHQUFFNUMsSUFBd0IsUUFBckJ2RSxFQUFFdEIsRUFBRXN4QixlQUEwQixPQUFPOWpCLEdBQUV4TixHQUFHLEtBQXVDLEdBQWxDZ0IsRUFBRSxJQUFhLElBQVJoQixFQUFFcXhCLE9BQTRCLFFBQWpCN3dCLEVBQUVjLEVBQUV5eEMsV0FBc0IsR0FBRy94QyxFQUFFcXlDLEdBQUcveEMsR0FBRSxPQUFRLENBQUMsR0FBRyxJQUFJb1QsSUFBRyxPQUFPM1UsR0FBRyxJQUFhLElBQVJBLEVBQUVzeEIsT0FBVyxJQUFJdHhCLEVBQUVDLEVBQUV3eEIsTUFBTSxPQUFPenhCLEdBQUcsQ0FBUyxHQUFHLFFBQVhTLEVBQUVvcEMsR0FBRzdwQyxJQUFlLENBQW1HLElBQWxHQyxFQUFFcXhCLE9BQU8sSUFBSWdpQixHQUFHL3hDLEdBQUUsR0FBb0IsUUFBaEJOLEVBQUVSLEVBQUUra0MsZUFBdUJ2bEMsRUFBRXVsQyxZQUFZdmtDLEVBQUVoQixFQUFFcXhCLE9BQU8sR0FBR3J4QixFQUFFMnlDLGFBQWEsRUFBRTN4QyxFQUFFZixFQUFNQSxFQUFFRCxFQUFFd3hCLE1BQU0sT0FBT3Z4QixHQUFPRixFQUFFaUIsR0FBTk0sRUFBRXJCLEdBQVFveEIsT0FBTyxTQUMvZCxRQUFkN3dCLEVBQUVjLEVBQUU2dkIsWUFBb0I3dkIsRUFBRWlqQyxXQUFXLEVBQUVqakMsRUFBRXFqQyxNQUFNNWtDLEVBQUV1QixFQUFFa3dCLE1BQU0sS0FBS2x3QixFQUFFcXhDLGFBQWEsRUFBRXJ4QyxFQUFFbWlDLGNBQWMsS0FBS25pQyxFQUFFZ3dCLGNBQWMsS0FBS2h3QixFQUFFaWtDLFlBQVksS0FBS2prQyxFQUFFbWpDLGFBQWEsS0FBS25qQyxFQUFFMHZCLFVBQVUsT0FBTzF2QixFQUFFaWpDLFdBQVcvakMsRUFBRStqQyxXQUFXampDLEVBQUVxakMsTUFBTW5rQyxFQUFFbWtDLE1BQU1yakMsRUFBRWt3QixNQUFNaHhCLEVBQUVneEIsTUFBTWx3QixFQUFFcXhDLGFBQWEsRUFBRXJ4QyxFQUFFd2hDLFVBQVUsS0FBS3hoQyxFQUFFbWlDLGNBQWNqakMsRUFBRWlqQyxjQUFjbmlDLEVBQUVnd0IsY0FBYzl3QixFQUFFOHdCLGNBQWNod0IsRUFBRWlrQyxZQUFZL2tDLEVBQUUra0MsWUFBWWprQyxFQUFFd2MsS0FBS3RkLEVBQUVzZCxLQUFLL2QsRUFBRVMsRUFBRWlrQyxhQUFhbmpDLEVBQUVtakMsYUFBYSxPQUFPMWtDLEVBQUUsS0FBSyxDQUFDNGtDLE1BQU01a0MsRUFBRTRrQyxNQUFNRCxhQUFhM2tDLEVBQUUya0MsZUFBZXprQyxFQUFFQSxFQUFFd3hCLFFBQTJCLE9BQW5CbmhCLEdBQUV6SyxHQUFZLEVBQVZBLEdBQUU2ckIsUUFBVSxHQUFVMXhCLEVBQUV3eEIsS0FBSyxDQUFDenhCLEVBQ2xnQkEsRUFBRTB4QixPQUFPLENBQUMsT0FBT253QixFQUFFNHhDLE1BQU1sckMsS0FBSWlzQyxLQUFLajBDLEVBQUVxeEIsT0FBTyxJQUFJcndCLEdBQUUsRUFBR3F5QyxHQUFHL3hDLEdBQUUsR0FBSXRCLEVBQUUya0MsTUFBTSxRQUFRLEtBQUssQ0FBQyxJQUFJM2pDLEVBQUUsR0FBVyxRQUFSakIsRUFBRTZwQyxHQUFHcHBDLEtBQWEsR0FBR1IsRUFBRXF4QixPQUFPLElBQUlyd0IsR0FBRSxFQUFtQixRQUFoQmYsRUFBRUYsRUFBRXdsQyxlQUF1QnZsQyxFQUFFdWxDLFlBQVl0bEMsRUFBRUQsRUFBRXF4QixPQUFPLEdBQUdnaUIsR0FBRy94QyxHQUFFLEdBQUksT0FBT0EsRUFBRTR4QyxNQUFNLFdBQVc1eEMsRUFBRTZ4QyxXQUFXM3lDLEVBQUUyd0IsWUFBWS9uQixHQUFFLE9BQU9vRSxHQUFFeE4sR0FBRyxVQUFVLEVBQUVnSSxLQUFJMUcsRUFBRTB4QyxtQkFBbUJpQixJQUFJLGFBQWFoMEMsSUFBSUQsRUFBRXF4QixPQUFPLElBQUlyd0IsR0FBRSxFQUFHcXlDLEdBQUcveEMsR0FBRSxHQUFJdEIsRUFBRTJrQyxNQUFNLFNBQVNyakMsRUFBRXd4QyxhQUFhdHlDLEVBQUVpeEIsUUFBUXp4QixFQUFFd3hCLE1BQU14eEIsRUFBRXd4QixNQUFNaHhCLElBQWEsUUFBVFAsRUFBRXFCLEVBQUUyeEMsTUFBY2h6QyxFQUFFd3hCLFFBQVFqeEIsRUFBRVIsRUFBRXd4QixNQUFNaHhCLEVBQUVjLEVBQUUyeEMsS0FBS3p5QyxFQUFFLENBQUMsT0FBRyxPQUFPYyxFQUFFNHhDLE1BQVlsekMsRUFBRXNCLEVBQUU0eEMsS0FBSzV4QyxFQUFFeXhDLFVBQzllL3lDLEVBQUVzQixFQUFFNHhDLEtBQUtsekMsRUFBRXl4QixRQUFRbndCLEVBQUUweEMsbUJBQW1CaHJDLEtBQUloSSxFQUFFeXhCLFFBQVEsS0FBS3h4QixFQUFFNEYsR0FBRTZyQixRQUFRcGhCLEdBQUV6SyxHQUFFN0UsRUFBSSxFQUFGZixFQUFJLEVBQUksRUFBRkEsR0FBS0QsSUFBRXdOLEdBQUV4TixHQUFVLE1BQUssS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPazBDLEtBQUtsekMsRUFBRSxPQUFPaEIsRUFBRXN4QixjQUFjLE9BQU92eEIsR0FBRyxPQUFPQSxFQUFFdXhCLGdCQUFnQnR3QixJQUFJaEIsRUFBRXF4QixPQUFPLE1BQU1yd0IsR0FBRyxJQUFZLEVBQVBoQixFQUFFcWpDLE1BQVEsSUFBUSxXQUFIME4sTUFBaUJ2akMsR0FBRXhOLEdBQWtCLEVBQWZBLEVBQUUyeUMsZUFBaUIzeUMsRUFBRXF4QixPQUFPLE9BQU83akIsR0FBRXhOLEdBQUcsS0FBSyxLQUFLLEdBQWUsS0FBSyxHQUFHLE9BQU8sS0FBSyxNQUFNVyxNQUFNdVAsRUFBRSxJQUFJbFEsRUFBRXVyQixLQUFNLENBQ2xYLFNBQVM0b0IsR0FBR3AwQyxFQUFFQyxHQUFTLE9BQU51aUMsR0FBR3ZpQyxHQUFVQSxFQUFFdXJCLEtBQUssS0FBSyxFQUFFLE9BQU91VixHQUFHOWdDLEVBQUU4ZCxPQUFPaWpCLEtBQWlCLE9BQVpoaEMsRUFBRUMsRUFBRXF4QixRQUFlcnhCLEVBQUVxeEIsT0FBUyxNQUFIdHhCLEVBQVMsSUFBSUMsR0FBRyxLQUFLLEtBQUssRUFBRSxPQUFPeXBDLEtBQUtoaEMsR0FBRWc0QixJQUFJaDRCLEdBQUV0RCxJQUFHNGtDLEtBQWUsSUFBTyxPQUFqQmhxQyxFQUFFQyxFQUFFcXhCLFNBQXFCLElBQU8sSUFBRnR4QixJQUFRQyxFQUFFcXhCLE9BQVMsTUFBSHR4QixFQUFTLElBQUlDLEdBQUcsS0FBSyxLQUFLLEVBQUUsT0FBTzJwQyxHQUFHM3BDLEdBQUcsS0FBSyxLQUFLLEdBQTBCLEdBQXZCeUksR0FBRTVDLElBQXdCLFFBQXJCOUYsRUFBRUMsRUFBRXN4QixnQkFBMkIsT0FBT3Z4QixFQUFFd3hCLFdBQVcsQ0FBQyxHQUFHLE9BQU92eEIsRUFBRW14QixVQUFVLE1BQU14d0IsTUFBTXVQLEVBQUUsTUFBTXl6QixJQUFJLENBQVcsT0FBUyxPQUFuQjVqQyxFQUFFQyxFQUFFcXhCLFFBQXNCcnhCLEVBQUVxeEIsT0FBUyxNQUFIdHhCLEVBQVMsSUFBSUMsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPeUksR0FBRTVDLElBQUcsS0FBSyxLQUFLLEVBQUUsT0FBTzRqQyxLQUFLLEtBQUssS0FBSyxHQUFHLE9BQU9yRixHQUFHcGtDLEVBQUU4ZCxLQUFLME4sVUFBVSxLQUFLLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBTzBvQixLQUMxZ0IsS0FBeUIsUUFBUSxPQUFPLEtBQUssQ0FyQjdDeEMsR0FBRyxTQUFTM3hDLEVBQUVDLEdBQUcsSUFBSSxJQUFJQyxFQUFFRCxFQUFFd3hCLE1BQU0sT0FBT3Z4QixHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFc3JCLEtBQUssSUFBSXRyQixFQUFFc3JCLElBQUl4ckIsRUFBRTRHLFlBQVkxRyxFQUFFK3dCLGdCQUFnQixHQUFHLElBQUkvd0IsRUFBRXNyQixLQUFLLE9BQU90ckIsRUFBRXV4QixNQUFNLENBQUN2eEIsRUFBRXV4QixNQUFNSixPQUFPbnhCLEVBQUVBLEVBQUVBLEVBQUV1eEIsTUFBTSxRQUFRLENBQUMsR0FBR3Z4QixJQUFJRCxFQUFFLE1BQU0sS0FBSyxPQUFPQyxFQUFFd3hCLFNBQVMsQ0FBQyxHQUFHLE9BQU94eEIsRUFBRW14QixRQUFRbnhCLEVBQUVteEIsU0FBU3B4QixFQUFFLE9BQU9DLEVBQUVBLEVBQUVteEIsTUFBTSxDQUFDbnhCLEVBQUV3eEIsUUFBUUwsT0FBT254QixFQUFFbXhCLE9BQU9ueEIsRUFBRUEsRUFBRXd4QixPQUFPLENBQUMsRUFBRWtnQixHQUFHLFdBQVcsRUFDeFRDLEdBQUcsU0FBUzd4QyxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHLElBQUlDLEVBQUVsQixFQUFFMGpDLGNBQWMsR0FBR3hpQyxJQUFJRCxFQUFFLENBQUNqQixFQUFFQyxFQUFFZ3hCLFVBQVV1WSxHQUFHSCxHQUFHMVgsU0FBUyxJQUE0Umx4QixFQUF4UmMsRUFBRSxLQUFLLE9BQU9yQixHQUFHLElBQUssUUFBUWdCLEVBQUVzSCxFQUFHeEksRUFBRWtCLEdBQUdELEVBQUV1SCxFQUFHeEksRUFBRWlCLEdBQUdNLEVBQUUsR0FBRyxNQUFNLElBQUssU0FBU0wsRUFBRStCLEVBQUUsQ0FBQyxFQUFFL0IsRUFBRSxDQUFDYixXQUFNLElBQVNZLEVBQUVnQyxFQUFFLENBQUMsRUFBRWhDLEVBQUUsQ0FBQ1osV0FBTSxJQUFTa0IsRUFBRSxHQUFHLE1BQU0sSUFBSyxXQUFXTCxFQUFFNEksR0FBRzlKLEVBQUVrQixHQUFHRCxFQUFFNkksR0FBRzlKLEVBQUVpQixHQUFHTSxFQUFFLEdBQUcsTUFBTSxRQUFRLG1CQUFvQkwsRUFBRTB5QyxTQUFTLG1CQUFvQjN5QyxFQUFFMnlDLFVBQVU1ekMsRUFBRTZ6QyxRQUFROVUsSUFBeUIsSUFBSW52QixLQUF6Qi9ELEdBQUczTCxFQUFFZSxHQUFTZixFQUFFLEtBQWNnQixFQUFFLElBQUlELEVBQUVtSCxlQUFld0gsSUFBSTFPLEVBQUVrSCxlQUFld0gsSUFBSSxNQUFNMU8sRUFBRTBPLEdBQUcsR0FBRyxVQUFVQSxFQUFFLENBQUMsSUFBSTFNLEVBQUVoQyxFQUFFME8sR0FBRyxJQUFJblAsS0FBS3lDLEVBQUVBLEVBQUVrRixlQUFlM0gsS0FDamZQLElBQUlBLEVBQUUsQ0FBQyxHQUFHQSxFQUFFTyxHQUFHLEdBQUcsS0FBSyw0QkFBNEJtUCxHQUFHLGFBQWFBLEdBQUcsbUNBQW1DQSxHQUFHLDZCQUE2QkEsR0FBRyxjQUFjQSxJQUFJL08sRUFBR3VILGVBQWV3SCxHQUFHck8sSUFBSUEsRUFBRSxLQUFLQSxFQUFFQSxHQUFHLElBQUlrRyxLQUFLbUksRUFBRSxPQUFPLElBQUlBLEtBQUszTyxFQUFFLENBQUMsSUFBSXdPLEVBQUV4TyxFQUFFMk8sR0FBeUIsR0FBdEIxTSxFQUFFLE1BQU1oQyxFQUFFQSxFQUFFME8sUUFBRyxFQUFVM08sRUFBRW1ILGVBQWV3SCxJQUFJSCxJQUFJdk0sSUFBSSxNQUFNdU0sR0FBRyxNQUFNdk0sR0FBRyxHQUFHLFVBQVUwTSxFQUFFLEdBQUcxTSxFQUFFLENBQUMsSUFBSXpDLEtBQUt5QyxHQUFHQSxFQUFFa0YsZUFBZTNILElBQUlnUCxHQUFHQSxFQUFFckgsZUFBZTNILEtBQUtQLElBQUlBLEVBQUUsQ0FBQyxHQUFHQSxFQUFFTyxHQUFHLElBQUksSUFBSUEsS0FBS2dQLEVBQUVBLEVBQUVySCxlQUFlM0gsSUFBSXlDLEVBQUV6QyxLQUFLZ1AsRUFBRWhQLEtBQUtQLElBQUlBLEVBQUUsQ0FBQyxHQUFHQSxFQUFFTyxHQUFHZ1AsRUFBRWhQLEdBQUcsTUFBTVAsSUFBSXFCLElBQUlBLEVBQUUsSUFBSUEsRUFBRWtHLEtBQUttSSxFQUNwZjFQLElBQUlBLEVBQUV1UCxNQUFNLDRCQUE0QkcsR0FBR0gsRUFBRUEsRUFBRUEsRUFBRTB2QixZQUFPLEVBQU9qOEIsRUFBRUEsRUFBRUEsRUFBRWk4QixZQUFPLEVBQU8sTUFBTTF2QixHQUFHdk0sSUFBSXVNLElBQUlsTyxFQUFFQSxHQUFHLElBQUlrRyxLQUFLbUksRUFBRUgsSUFBSSxhQUFhRyxFQUFFLGlCQUFrQkgsR0FBRyxpQkFBa0JBLElBQUlsTyxFQUFFQSxHQUFHLElBQUlrRyxLQUFLbUksRUFBRSxHQUFHSCxHQUFHLG1DQUFtQ0csR0FBRyw2QkFBNkJBLElBQUkvTyxFQUFHdUgsZUFBZXdILElBQUksTUFBTUgsR0FBRyxhQUFhRyxHQUFHckgsR0FBRSxTQUFTdkksR0FBR3VCLEdBQUcyQixJQUFJdU0sSUFBSWxPLEVBQUUsTUFBTUEsRUFBRUEsR0FBRyxJQUFJa0csS0FBS21JLEVBQUVILEdBQUcsQ0FBQ3ZQLElBQUlxQixFQUFFQSxHQUFHLElBQUlrRyxLQUFLLFFBQVF2SCxHQUFHLElBQUkwUCxFQUFFck8sR0FBS3RCLEVBQUV1bEMsWUFBWTUxQixLQUFFM1AsRUFBRXF4QixPQUFPLEVBQUMsQ0FBQyxFQUFFd2dCLEdBQUcsU0FBUzl4QyxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHZixJQUFJZSxJQUFJaEIsRUFBRXF4QixPQUFPLEVBQUUsRUFrQmxiLElBQUkraUIsSUFBRyxFQUFHei9CLElBQUUsRUFBRzAvQixHQUFHLG1CQUFvQkMsUUFBUUEsUUFBUW5xQixJQUFJemEsR0FBRSxLQUFLLFNBQVM2a0MsR0FBR3gwQyxFQUFFQyxHQUFHLElBQUlDLEVBQUVGLEVBQUVxb0MsSUFBSSxHQUFHLE9BQU9ub0MsRUFBRSxHQUFHLG1CQUFvQkEsRUFBRSxJQUFJQSxFQUFFLEtBQUssQ0FBQyxNQUFNZSxHQUFHa1UsR0FBRW5WLEVBQUVDLEVBQUVnQixFQUFFLE1BQU1mLEVBQUV5eEIsUUFBUSxJQUFJLENBQUMsU0FBUzhpQixHQUFHejBDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSUEsR0FBRyxDQUFDLE1BQU1lLEdBQUdrVSxHQUFFblYsRUFBRUMsRUFBRWdCLEVBQUUsQ0FBQyxDQUFDLElBQUl5ekMsSUFBRyxFQUl4UixTQUFTQyxHQUFHMzBDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSWUsRUFBRWhCLEVBQUV1bEMsWUFBeUMsR0FBRyxRQUFoQ3ZrQyxFQUFFLE9BQU9BLEVBQUVBLEVBQUVvckMsV0FBVyxNQUFpQixDQUFDLElBQUluckMsRUFBRUQsRUFBRUEsRUFBRVksS0FBSyxFQUFFLENBQUMsSUFBSVgsRUFBRXNxQixJQUFJeHJCLEtBQUtBLEVBQUUsQ0FBQyxJQUFJdUIsRUFBRUwsRUFBRXdyQyxRQUFReHJDLEVBQUV3ckMsYUFBUSxPQUFPLElBQVNuckMsR0FBR2t6QyxHQUFHeDBDLEVBQUVDLEVBQUVxQixFQUFFLENBQUNMLEVBQUVBLEVBQUVXLElBQUksT0FBT1gsSUFBSUQsRUFBRSxDQUFDLENBQUMsU0FBUzJ6QyxHQUFHNTBDLEVBQUVDLEdBQWdELEdBQUcsUUFBaENBLEVBQUUsUUFBbEJBLEVBQUVBLEVBQUV1bEMsYUFBdUJ2bEMsRUFBRW9zQyxXQUFXLE1BQWlCLENBQUMsSUFBSW5zQyxFQUFFRCxFQUFFQSxFQUFFNEIsS0FBSyxFQUFFLENBQUMsSUFBSTNCLEVBQUVzckIsSUFBSXhyQixLQUFLQSxFQUFFLENBQUMsSUFBSWlCLEVBQUVmLEVBQUVnSSxPQUFPaEksRUFBRXdzQyxRQUFRenJDLEdBQUcsQ0FBQ2YsRUFBRUEsRUFBRTJCLElBQUksT0FBTzNCLElBQUlELEVBQUUsQ0FBQyxDQUFDLFNBQVM0MEMsR0FBRzcwQyxHQUFHLElBQUlDLEVBQUVELEVBQUVxb0MsSUFBSSxHQUFHLE9BQU9wb0MsRUFBRSxDQUFDLElBQUlDLEVBQUVGLEVBQUVpeEIsVUFBaUJqeEIsRUFBRXdyQixJQUE4QnhyQixFQUFFRSxFQUFFLG1CQUFvQkQsRUFBRUEsRUFBRUQsR0FBR0MsRUFBRTB4QixRQUFRM3hCLENBQUMsQ0FBQyxDQUNsZixTQUFTODBDLEdBQUc5MEMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFb3hCLFVBQVUsT0FBT254QixJQUFJRCxFQUFFb3hCLFVBQVUsS0FBSzBqQixHQUFHNzBDLElBQUlELEVBQUV5eEIsTUFBTSxLQUFLenhCLEVBQUUraUMsVUFBVSxLQUFLL2lDLEVBQUUweEIsUUFBUSxLQUFLLElBQUkxeEIsRUFBRXdyQixLQUFvQixRQUFkdnJCLEVBQUVELEVBQUVpeEIsb0JBQTRCaHhCLEVBQUVpZ0MsV0FBV2pnQyxFQUFFa2dDLFdBQVdsZ0MsRUFBRTY5QixXQUFXNzlCLEVBQUVtZ0MsV0FBV25nQyxFQUFFb2dDLEtBQU1yZ0MsRUFBRWl4QixVQUFVLEtBQUtqeEIsRUFBRXF4QixPQUFPLEtBQUtyeEIsRUFBRTBrQyxhQUFhLEtBQUsxa0MsRUFBRTBqQyxjQUFjLEtBQUsxakMsRUFBRXV4QixjQUFjLEtBQUt2eEIsRUFBRWlqQyxhQUFhLEtBQUtqakMsRUFBRWl4QixVQUFVLEtBQUtqeEIsRUFBRXdsQyxZQUFZLElBQUksQ0FBQyxTQUFTdVAsR0FBRy8wQyxHQUFHLE9BQU8sSUFBSUEsRUFBRXdyQixLQUFLLElBQUl4ckIsRUFBRXdyQixLQUFLLElBQUl4ckIsRUFBRXdyQixHQUFHLENBQ25hLFNBQVN3cEIsR0FBR2gxQyxHQUFHQSxFQUFFLE9BQU8sQ0FBQyxLQUFLLE9BQU9BLEVBQUUweEIsU0FBUyxDQUFDLEdBQUcsT0FBTzF4QixFQUFFcXhCLFFBQVEwakIsR0FBRy8wQyxFQUFFcXhCLFFBQVEsT0FBTyxLQUFLcnhCLEVBQUVBLEVBQUVxeEIsTUFBTSxDQUEyQixJQUExQnJ4QixFQUFFMHhCLFFBQVFMLE9BQU9yeEIsRUFBRXF4QixPQUFXcnhCLEVBQUVBLEVBQUUweEIsUUFBUSxJQUFJMXhCLEVBQUV3ckIsS0FBSyxJQUFJeHJCLEVBQUV3ckIsS0FBSyxLQUFLeHJCLEVBQUV3ckIsS0FBSyxDQUFDLEdBQVcsRUFBUnhyQixFQUFFc3hCLE1BQVEsU0FBU3R4QixFQUFFLEdBQUcsT0FBT0EsRUFBRXl4QixPQUFPLElBQUl6eEIsRUFBRXdyQixJQUFJLFNBQVN4ckIsRUFBT0EsRUFBRXl4QixNQUFNSixPQUFPcnhCLEVBQUVBLEVBQUVBLEVBQUV5eEIsS0FBSyxDQUFDLEtBQWEsRUFBUnp4QixFQUFFc3hCLE9BQVMsT0FBT3R4QixFQUFFaXhCLFNBQVMsQ0FBQyxDQUN6VCxTQUFTZ2tCLEdBQUdqMUMsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZSxFQUFFakIsRUFBRXdyQixJQUFJLEdBQUcsSUFBSXZxQixHQUFHLElBQUlBLEVBQUVqQixFQUFFQSxFQUFFaXhCLFVBQVVoeEIsRUFBRSxJQUFJQyxFQUFFK1IsU0FBUy9SLEVBQUVtSyxXQUFXMEUsYUFBYS9PLEVBQUVDLEdBQUdDLEVBQUU2TyxhQUFhL08sRUFBRUMsSUFBSSxJQUFJQyxFQUFFK1IsVUFBVWhTLEVBQUVDLEVBQUVtSyxZQUFhMEUsYUFBYS9PLEVBQUVFLElBQUtELEVBQUVDLEdBQUkwRyxZQUFZNUcsR0FBNEIsT0FBeEJFLEVBQUVBLEVBQUVnMUMsc0JBQTBDLE9BQU9qMUMsRUFBRTR6QyxVQUFVNXpDLEVBQUU0ekMsUUFBUTlVLFVBQVUsR0FBRyxJQUFJOTlCLEdBQWMsUUFBVmpCLEVBQUVBLEVBQUV5eEIsT0FBZ0IsSUFBSXdqQixHQUFHajFDLEVBQUVDLEVBQUVDLEdBQUdGLEVBQUVBLEVBQUUweEIsUUFBUSxPQUFPMXhCLEdBQUdpMUMsR0FBR2oxQyxFQUFFQyxFQUFFQyxHQUFHRixFQUFFQSxFQUFFMHhCLE9BQU8sQ0FDMVgsU0FBU3lqQixHQUFHbjFDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSWUsRUFBRWpCLEVBQUV3ckIsSUFBSSxHQUFHLElBQUl2cUIsR0FBRyxJQUFJQSxFQUFFakIsRUFBRUEsRUFBRWl4QixVQUFVaHhCLEVBQUVDLEVBQUU2TyxhQUFhL08sRUFBRUMsR0FBR0MsRUFBRTBHLFlBQVk1RyxRQUFRLEdBQUcsSUFBSWlCLEdBQWMsUUFBVmpCLEVBQUVBLEVBQUV5eEIsT0FBZ0IsSUFBSTBqQixHQUFHbjFDLEVBQUVDLEVBQUVDLEdBQUdGLEVBQUVBLEVBQUUweEIsUUFBUSxPQUFPMXhCLEdBQUdtMUMsR0FBR24xQyxFQUFFQyxFQUFFQyxHQUFHRixFQUFFQSxFQUFFMHhCLE9BQU8sQ0FBQyxJQUFJblQsR0FBRSxLQUFLNjJCLElBQUcsRUFBRyxTQUFTQyxHQUFHcjFDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSUEsRUFBRUEsRUFBRXV4QixNQUFNLE9BQU92eEIsR0FBR28xQyxHQUFHdDFDLEVBQUVDLEVBQUVDLEdBQUdBLEVBQUVBLEVBQUV3eEIsT0FBTyxDQUNuUixTQUFTNGpCLEdBQUd0MUMsRUFBRUMsRUFBRUMsR0FBRyxHQUFHZ1QsSUFBSSxtQkFBb0JBLEdBQUdxaUMscUJBQXFCLElBQUlyaUMsR0FBR3FpQyxxQkFBcUJ0aUMsR0FBRy9TLEVBQUUsQ0FBQyxNQUFNZ0QsR0FBRyxDQUFDLE9BQU9oRCxFQUFFc3JCLEtBQUssS0FBSyxFQUFFNVcsSUFBRzQvQixHQUFHdDBDLEVBQUVELEdBQUcsS0FBSyxFQUFFLElBQUlnQixFQUFFc2QsR0FBRXJkLEVBQUVrMEMsR0FBRzcyQixHQUFFLEtBQUs4MkIsR0FBR3IxQyxFQUFFQyxFQUFFQyxHQUFPazFDLEdBQUdsMEMsRUFBRSxRQUFUcWQsR0FBRXRkLEtBQWtCbTBDLElBQUlwMUMsRUFBRXVlLEdBQUVyZSxFQUFFQSxFQUFFK3dCLFVBQVUsSUFBSWp4QixFQUFFaVMsU0FBU2pTLEVBQUVxSyxXQUFXRCxZQUFZbEssR0FBR0YsRUFBRW9LLFlBQVlsSyxJQUFJcWUsR0FBRW5VLFlBQVlsSyxFQUFFK3dCLFlBQVksTUFBTSxLQUFLLEdBQUcsT0FBTzFTLEtBQUk2MkIsSUFBSXAxQyxFQUFFdWUsR0FBRXJlLEVBQUVBLEVBQUUrd0IsVUFBVSxJQUFJanhCLEVBQUVpUyxTQUFTNnRCLEdBQUc5L0IsRUFBRXFLLFdBQVduSyxHQUFHLElBQUlGLEVBQUVpUyxVQUFVNnRCLEdBQUc5L0IsRUFBRUUsR0FBRzhXLEdBQUdoWCxJQUFJOC9CLEdBQUd2aEIsR0FBRXJlLEVBQUUrd0IsWUFBWSxNQUFNLEtBQUssRUFBRWh3QixFQUFFc2QsR0FBRXJkLEVBQUVrMEMsR0FBRzcyQixHQUFFcmUsRUFBRSt3QixVQUFVd0MsY0FBYzJoQixJQUFHLEVBQ2xmQyxHQUFHcjFDLEVBQUVDLEVBQUVDLEdBQUdxZSxHQUFFdGQsRUFBRW0wQyxHQUFHbDBDLEVBQUUsTUFBTSxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSTBULElBQW9CLFFBQWhCM1QsRUFBRWYsRUFBRXNsQyxjQUFzQyxRQUFmdmtDLEVBQUVBLEVBQUVvckMsWUFBc0IsQ0FBQ25yQyxFQUFFRCxFQUFFQSxFQUFFWSxLQUFLLEVBQUUsQ0FBQyxJQUFJTixFQUFFTCxFQUFFVCxFQUFFYyxFQUFFbXJDLFFBQVFuckMsRUFBRUEsRUFBRWlxQixTQUFJLElBQVMvcUIsSUFBSSxJQUFPLEVBQUZjLElBQWUsSUFBTyxFQUFGQSxLQUFma3pDLEdBQUd2MEMsRUFBRUQsRUFBRVEsR0FBeUJTLEVBQUVBLEVBQUVXLElBQUksT0FBT1gsSUFBSUQsRUFBRSxDQUFDbzBDLEdBQUdyMUMsRUFBRUMsRUFBRUMsR0FBRyxNQUFNLEtBQUssRUFBRSxJQUFJMFUsS0FBSTQvQixHQUFHdDBDLEVBQUVELEdBQWlCLG1CQUFkZ0IsRUFBRWYsRUFBRSt3QixXQUFnQ3VrQixzQkFBc0IsSUFBSXYwQyxFQUFFOG1DLE1BQU03bkMsRUFBRXdqQyxjQUFjemlDLEVBQUVnVCxNQUFNL1QsRUFBRXF4QixjQUFjdHdCLEVBQUV1MEMsc0JBQXNCLENBQUMsTUFBTXR5QyxHQUFHaVMsR0FBRWpWLEVBQUVELEVBQUVpRCxFQUFFLENBQUNteUMsR0FBR3IxQyxFQUFFQyxFQUFFQyxHQUFHLE1BQU0sS0FBSyxHQUFHbTFDLEdBQUdyMUMsRUFBRUMsRUFBRUMsR0FBRyxNQUFNLEtBQUssR0FBVSxFQUFQQSxFQUFFb2pDLE1BQVExdUIsSUFBRzNULEVBQUUyVCxLQUFJLE9BQ2hmMVUsRUFBRXF4QixjQUFjOGpCLEdBQUdyMUMsRUFBRUMsRUFBRUMsR0FBRzBVLEdBQUUzVCxHQUFHbzBDLEdBQUdyMUMsRUFBRUMsRUFBRUMsR0FBRyxNQUFNLFFBQVFtMUMsR0FBR3IxQyxFQUFFQyxFQUFFQyxHQUFHLENBQUMsU0FBU3UxQyxHQUFHejFDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXdsQyxZQUFZLEdBQUcsT0FBT3ZsQyxFQUFFLENBQUNELEVBQUV3bEMsWUFBWSxLQUFLLElBQUl0bEMsRUFBRUYsRUFBRWl4QixVQUFVLE9BQU8vd0IsSUFBSUEsRUFBRUYsRUFBRWl4QixVQUFVLElBQUlxakIsSUFBSXIwQyxFQUFFNHFCLFNBQVEsU0FBUzVxQixHQUFHLElBQUlnQixFQUFFeTBDLEdBQUduekMsS0FBSyxLQUFLdkMsRUFBRUMsR0FBR0MsRUFBRTY5QixJQUFJOTlCLEtBQUtDLEVBQUVtcUIsSUFBSXBxQixHQUFHQSxFQUFFMC9CLEtBQUsxK0IsRUFBRUEsR0FBRyxHQUFFLENBQUMsQ0FDelEsU0FBUzAwQyxHQUFHMzFDLEVBQUVDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRThpQyxVQUFVLEdBQUcsT0FBTzdpQyxFQUFFLElBQUksSUFBSWUsRUFBRSxFQUFFQSxFQUFFZixFQUFFUSxPQUFPTyxJQUFJLENBQUMsSUFBSUMsRUFBRWhCLEVBQUVlLEdBQUcsSUFBSSxJQUFJTSxFQUFFdkIsRUFBRVMsRUFBRVIsRUFBRWlELEVBQUV6QyxFQUFFVCxFQUFFLEtBQUssT0FBT2tELEdBQUcsQ0FBQyxPQUFPQSxFQUFFc29CLEtBQUssS0FBSyxFQUFFak4sR0FBRXJiLEVBQUUrdEIsVUFBVW1rQixJQUFHLEVBQUcsTUFBTXAxQyxFQUFFLEtBQUssRUFBNEMsS0FBSyxFQUFFdWUsR0FBRXJiLEVBQUUrdEIsVUFBVXdDLGNBQWMyaEIsSUFBRyxFQUFHLE1BQU1wMUMsRUFBRWtELEVBQUVBLEVBQUVtdUIsTUFBTSxDQUFDLEdBQUcsT0FBTzlTLEdBQUUsTUFBTTNkLE1BQU11UCxFQUFFLE1BQU1tbEMsR0FBRy96QyxFQUFFZCxFQUFFUyxHQUFHcWQsR0FBRSxLQUFLNjJCLElBQUcsRUFBRyxJQUFJM2xDLEVBQUV2TyxFQUFFa3dCLFVBQVUsT0FBTzNoQixJQUFJQSxFQUFFNGhCLE9BQU8sTUFBTW53QixFQUFFbXdCLE9BQU8sSUFBSSxDQUFDLE1BQU16aEIsR0FBR3VGLEdBQUVqVSxFQUFFakIsRUFBRTJQLEVBQUUsQ0FBQyxDQUFDLEdBQWtCLE1BQWYzUCxFQUFFMnlDLGFBQW1CLElBQUkzeUMsRUFBRUEsRUFBRXd4QixNQUFNLE9BQU94eEIsR0FBRzIxQyxHQUFHMzFDLEVBQUVELEdBQUdDLEVBQUVBLEVBQUV5eEIsT0FBTyxDQUNqZSxTQUFTa2tCLEdBQUc1MUMsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFb3hCLFVBQVVud0IsRUFBRWpCLEVBQUVzeEIsTUFBTSxPQUFPdHhCLEVBQUV3ckIsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQWlCLEdBQWRtcUIsR0FBRzExQyxFQUFFRCxHQUFHNjFDLEdBQUc3MUMsR0FBUSxFQUFGaUIsRUFBSSxDQUFDLElBQUkwekMsR0FBRyxFQUFFMzBDLEVBQUVBLEVBQUVxeEIsUUFBUXVqQixHQUFHLEVBQUU1MEMsRUFBRSxDQUFDLE1BQU04RSxHQUFHcVEsR0FBRW5WLEVBQUVBLEVBQUVxeEIsT0FBT3ZzQixFQUFFLENBQUMsSUFBSTZ2QyxHQUFHLEVBQUUzMEMsRUFBRUEsRUFBRXF4QixPQUFPLENBQUMsTUFBTXZzQixHQUFHcVEsR0FBRW5WLEVBQUVBLEVBQUVxeEIsT0FBT3ZzQixFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBRTZ3QyxHQUFHMTFDLEVBQUVELEdBQUc2MUMsR0FBRzcxQyxHQUFLLElBQUZpQixHQUFPLE9BQU9mLEdBQUdzMEMsR0FBR3QwQyxFQUFFQSxFQUFFbXhCLFFBQVEsTUFBTSxLQUFLLEVBQWdELEdBQTlDc2tCLEdBQUcxMUMsRUFBRUQsR0FBRzYxQyxHQUFHNzFDLEdBQUssSUFBRmlCLEdBQU8sT0FBT2YsR0FBR3MwQyxHQUFHdDBDLEVBQUVBLEVBQUVteEIsUUFBbUIsR0FBUnJ4QixFQUFFc3hCLE1BQVMsQ0FBQyxJQUFJcHdCLEVBQUVsQixFQUFFaXhCLFVBQVUsSUFBSWhtQixHQUFHL0osRUFBRSxHQUFHLENBQUMsTUFBTTRELEdBQUdxUSxHQUFFblYsRUFBRUEsRUFBRXF4QixPQUFPdnNCLEVBQUUsQ0FBQyxDQUFDLEdBQUssRUFBRjdELEdBQW9CLE9BQWRDLEVBQUVsQixFQUFFaXhCLFdBQW1CLENBQUMsSUFBSTF2QixFQUFFdkIsRUFBRTBqQyxjQUFjampDLEVBQUUsT0FBT1AsRUFBRUEsRUFBRXdqQyxjQUFjbmlDLEVBQUUyQixFQUFFbEQsRUFBRStkLEtBQUt0TyxFQUFFelAsRUFBRXdsQyxZQUNqZSxHQUFuQnhsQyxFQUFFd2xDLFlBQVksS0FBUSxPQUFPLzFCLEVBQUUsSUFBSSxVQUFVdk0sR0FBRyxVQUFVM0IsRUFBRXdjLE1BQU0sTUFBTXhjLEVBQUV5QyxNQUFNa0YsRUFBR2hJLEVBQUVLLEdBQUd1SyxHQUFHNUksRUFBRXpDLEdBQUcsSUFBSW1QLEVBQUU5RCxHQUFHNUksRUFBRTNCLEdBQUcsSUFBSWQsRUFBRSxFQUFFQSxFQUFFZ1AsRUFBRS9PLE9BQU9ELEdBQUcsRUFBRSxDQUFDLElBQUl3QixFQUFFd04sRUFBRWhQLEdBQUdvRCxFQUFFNEwsRUFBRWhQLEVBQUUsR0FBRyxVQUFVd0IsRUFBRXlKLEdBQUd4SyxFQUFFMkMsR0FBRyw0QkFBNEI1QixFQUFFMkksR0FBRzFKLEVBQUUyQyxHQUFHLGFBQWE1QixFQUFFZ0osR0FBRy9KLEVBQUUyQyxHQUFHTSxFQUFHakQsRUFBRWUsRUFBRTRCLEVBQUUrTCxFQUFFLENBQUMsT0FBTzFNLEdBQUcsSUFBSyxRQUFRaUcsRUFBR2pJLEVBQUVLLEdBQUcsTUFBTSxJQUFLLFdBQVcrSSxHQUFHcEosRUFBRUssR0FBRyxNQUFNLElBQUssU0FBUyxJQUFJMkssRUFBRWhMLEVBQUVvckIsY0FBY21uQixZQUFZdnlDLEVBQUVvckIsY0FBY21uQixjQUFjbHlDLEVBQUVteUMsU0FBUyxJQUFJcmpDLEVBQUU5TyxFQUFFbEIsTUFBTSxNQUFNZ1EsRUFBRXhHLEdBQUczSSxJQUFJSyxFQUFFbXlDLFNBQVNyakMsR0FBRSxHQUFJbkUsTUFBTTNLLEVBQUVteUMsV0FBVyxNQUFNbnlDLEVBQUU4cUIsYUFBYXhpQixHQUFHM0ksSUFBSUssRUFBRW15QyxTQUNuZm55QyxFQUFFOHFCLGNBQWEsR0FBSXhpQixHQUFHM0ksSUFBSUssRUFBRW15QyxTQUFTbnlDLEVBQUVteUMsU0FBUyxHQUFHLElBQUcsSUFBS3h5QyxFQUFFaS9CLElBQUk1K0IsQ0FBQyxDQUFDLE1BQU11RCxHQUFHcVEsR0FBRW5WLEVBQUVBLEVBQUVxeEIsT0FBT3ZzQixFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBZ0IsR0FBZDZ3QyxHQUFHMTFDLEVBQUVELEdBQUc2MUMsR0FBRzcxQyxHQUFRLEVBQUZpQixFQUFJLENBQUMsR0FBRyxPQUFPakIsRUFBRWl4QixVQUFVLE1BQU1yd0IsTUFBTXVQLEVBQUUsTUFBTWpQLEVBQUVsQixFQUFFaXhCLFVBQVUxdkIsRUFBRXZCLEVBQUUwakMsY0FBYyxJQUFJeGlDLEVBQUVnUixVQUFVM1EsQ0FBQyxDQUFDLE1BQU11RCxHQUFHcVEsR0FBRW5WLEVBQUVBLEVBQUVxeEIsT0FBT3ZzQixFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBZ0IsR0FBZDZ3QyxHQUFHMTFDLEVBQUVELEdBQUc2MUMsR0FBRzcxQyxHQUFRLEVBQUZpQixHQUFLLE9BQU9mLEdBQUdBLEVBQUVxeEIsY0FBY2lDLGFBQWEsSUFBSXhjLEdBQUcvVyxFQUFFd3pCLGNBQWMsQ0FBQyxNQUFNM3VCLEdBQUdxUSxHQUFFblYsRUFBRUEsRUFBRXF4QixPQUFPdnNCLEVBQUUsQ0FBQyxNQUFNLEtBQUssRUFHNEcsUUFBUTZ3QyxHQUFHMTFDLEVBQ25mRCxHQUFHNjFDLEdBQUc3MUMsU0FKNFksS0FBSyxHQUFHMjFDLEdBQUcxMUMsRUFBRUQsR0FBRzYxQyxHQUFHNzFDLEdBQXFCLE1BQWxCa0IsRUFBRWxCLEVBQUV5eEIsT0FBUUgsUUFBYS92QixFQUFFLE9BQU9MLEVBQUVxd0IsY0FBY3J3QixFQUFFK3ZCLFVBQVU2a0IsU0FBU3YwQyxHQUFHQSxHQUNsZixPQUFPTCxFQUFFa3dCLFdBQVcsT0FBT2x3QixFQUFFa3dCLFVBQVVHLGdCQUFnQndrQixHQUFHOXRDLE9BQVEsRUFBRmhILEdBQUt3MEMsR0FBR3oxQyxHQUFHLE1BQU0sS0FBSyxHQUFzRixHQUFuRmlDLEVBQUUsT0FBTy9CLEdBQUcsT0FBT0EsRUFBRXF4QixjQUFxQixFQUFQdnhCLEVBQUVzakMsTUFBUTF1QixJQUFHaEYsRUFBRWdGLEtBQUkzUyxFQUFFMHpDLEdBQUcxMUMsRUFBRUQsR0FBRzRVLEdBQUVoRixHQUFHK2xDLEdBQUcxMUMsRUFBRUQsR0FBRzYxQyxHQUFHNzFDLEdBQVEsS0FBRmlCLEVBQU8sQ0FBMEIsR0FBekIyTyxFQUFFLE9BQU81UCxFQUFFdXhCLGVBQWtCdnhCLEVBQUVpeEIsVUFBVTZrQixTQUFTbG1DLEtBQUszTixHQUFHLElBQVksRUFBUGpDLEVBQUVzakMsTUFBUSxJQUFJM3pCLEdBQUUzUCxFQUFFaUMsRUFBRWpDLEVBQUV5eEIsTUFBTSxPQUFPeHZCLEdBQUcsQ0FBQyxJQUFJNEIsRUFBRThMLEdBQUUxTixFQUFFLE9BQU8wTixJQUFHLENBQWUsT0FBVlUsR0FBSm5FLEVBQUV5RCxJQUFNOGhCLE1BQWF2bEIsRUFBRXNmLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHbXBCLEdBQUcsRUFBRXpvQyxFQUFFQSxFQUFFbWxCLFFBQVEsTUFBTSxLQUFLLEVBQUVtakIsR0FBR3RvQyxFQUFFQSxFQUFFbWxCLFFBQVEsSUFBSXhoQixFQUFFM0QsRUFBRStrQixVQUFVLEdBQUcsbUJBQW9CcGhCLEVBQUUybEMscUJBQXFCLENBQUN2MEMsRUFBRWlMLEVBQUVoTSxFQUFFZ00sRUFBRW1sQixPQUFPLElBQUlweEIsRUFBRWdCLEVBQUU0TyxFQUFFazRCLE1BQ3BmOW5DLEVBQUV5akMsY0FBYzd6QixFQUFFb0UsTUFBTWhVLEVBQUVzeEIsY0FBYzFoQixFQUFFMmxDLHNCQUFzQixDQUFDLE1BQU0xd0MsR0FBR3FRLEdBQUVsVSxFQUFFZixFQUFFNEUsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLEVBQUUwdkMsR0FBR3RvQyxFQUFFQSxFQUFFbWxCLFFBQVEsTUFBTSxLQUFLLEdBQUcsR0FBRyxPQUFPbmxCLEVBQUVxbEIsY0FBYyxDQUFDeWtCLEdBQUdueUMsR0FBRyxRQUFRLEVBQUUsT0FBT3dNLEdBQUdBLEVBQUVnaEIsT0FBT25sQixFQUFFeUQsR0FBRVUsR0FBRzJsQyxHQUFHbnlDLEVBQUUsQ0FBQzVCLEVBQUVBLEVBQUV5dkIsT0FBTyxDQUFDMXhCLEVBQUUsSUFBSWlDLEVBQUUsS0FBSzRCLEVBQUU3RCxJQUFJLENBQUMsR0FBRyxJQUFJNkQsRUFBRTJuQixLQUFLLEdBQUcsT0FBT3ZwQixFQUFFLENBQUNBLEVBQUU0QixFQUFFLElBQUkzQyxFQUFFMkMsRUFBRW90QixVQUFVcmhCLEVBQWEsbUJBQVZyTyxFQUFFTCxFQUFFdVosT0FBNEJxVixZQUFZdnVCLEVBQUV1dUIsWUFBWSxVQUFVLE9BQU8sYUFBYXZ1QixFQUFFc2dCLFFBQVEsUUFBUzNlLEVBQUVXLEVBQUVvdEIsVUFBa0N4d0IsRUFBRSxPQUExQmdQLEVBQUU1TCxFQUFFNi9CLGNBQWNqcEIsUUFBOEJoTCxFQUFFckgsZUFBZSxXQUFXcUgsRUFBRW9TLFFBQVEsS0FBSzNlLEVBQUV1WCxNQUFNb0gsUUFDemZwVyxHQUFHLFVBQVVoTCxHQUFHLENBQUMsTUFBTXFFLEdBQUdxUSxHQUFFblYsRUFBRUEsRUFBRXF4QixPQUFPdnNCLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSWpCLEVBQUUybkIsS0FBSyxHQUFHLE9BQU92cEIsRUFBRSxJQUFJNEIsRUFBRW90QixVQUFVL2UsVUFBVXRDLEVBQUUsR0FBRy9MLEVBQUU2L0IsYUFBYSxDQUFDLE1BQU01K0IsR0FBR3FRLEdBQUVuVixFQUFFQSxFQUFFcXhCLE9BQU92c0IsRUFBRSxPQUFPLElBQUksS0FBS2pCLEVBQUUybkIsS0FBSyxLQUFLM25CLEVBQUUybkIsS0FBSyxPQUFPM25CLEVBQUUwdEIsZUFBZTF0QixJQUFJN0QsSUFBSSxPQUFPNkQsRUFBRTR0QixNQUFNLENBQUM1dEIsRUFBRTR0QixNQUFNSixPQUFPeHRCLEVBQUVBLEVBQUVBLEVBQUU0dEIsTUFBTSxRQUFRLENBQUMsR0FBRzV0QixJQUFJN0QsRUFBRSxNQUFNQSxFQUFFLEtBQUssT0FBTzZELEVBQUU2dEIsU0FBUyxDQUFDLEdBQUcsT0FBTzd0QixFQUFFd3RCLFFBQVF4dEIsRUFBRXd0QixTQUFTcnhCLEVBQUUsTUFBTUEsRUFBRWlDLElBQUk0QixJQUFJNUIsRUFBRSxNQUFNNEIsRUFBRUEsRUFBRXd0QixNQUFNLENBQUNwdkIsSUFBSTRCLElBQUk1QixFQUFFLE1BQU00QixFQUFFNnRCLFFBQVFMLE9BQU94dEIsRUFBRXd0QixPQUFPeHRCLEVBQUVBLEVBQUU2dEIsT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLLEdBQUdpa0IsR0FBRzExQyxFQUFFRCxHQUFHNjFDLEdBQUc3MUMsR0FBSyxFQUFGaUIsR0FBS3cwQyxHQUFHejFDLEdBQVMsS0FBSyxJQUN0ZCxDQUFDLFNBQVM2MUMsR0FBRzcxQyxHQUFHLElBQUlDLEVBQUVELEVBQUVzeEIsTUFBTSxHQUFLLEVBQUZyeEIsRUFBSSxDQUFDLElBQUlELEVBQUUsQ0FBQyxJQUFJLElBQUlFLEVBQUVGLEVBQUVxeEIsT0FBTyxPQUFPbnhCLEdBQUcsQ0FBQyxHQUFHNjBDLEdBQUc3MEMsR0FBRyxDQUFDLElBQUllLEVBQUVmLEVBQUUsTUFBTUYsQ0FBQyxDQUFDRSxFQUFFQSxFQUFFbXhCLE1BQU0sQ0FBQyxNQUFNendCLE1BQU11UCxFQUFFLEtBQU0sQ0FBQyxPQUFPbFAsRUFBRXVxQixLQUFLLEtBQUssRUFBRSxJQUFJdHFCLEVBQUVELEVBQUVnd0IsVUFBa0IsR0FBUmh3QixFQUFFcXdCLFFBQVdybUIsR0FBRy9KLEVBQUUsSUFBSUQsRUFBRXF3QixRQUFRLElBQWdCNmpCLEdBQUduMUMsRUFBVGcxQyxHQUFHaDFDLEdBQVVrQixHQUFHLE1BQU0sS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJVCxFQUFFUSxFQUFFZ3dCLFVBQVV3QyxjQUFzQndoQixHQUFHajFDLEVBQVRnMUMsR0FBR2gxQyxHQUFVUyxHQUFHLE1BQU0sUUFBUSxNQUFNRyxNQUFNdVAsRUFBRSxNQUFPLENBQUMsTUFBTVYsR0FBRzBGLEdBQUVuVixFQUFFQSxFQUFFcXhCLE9BQU81aEIsRUFBRSxDQUFDelAsRUFBRXN4QixRQUFRLENBQUMsQ0FBRyxLQUFGcnhCLElBQVNELEVBQUVzeEIsUUFBUSxLQUFLLENBQUMsU0FBUzJrQixHQUFHajJDLEVBQUVDLEVBQUVDLEdBQUd5UCxHQUFFM1AsRUFBRWsyQyxHQUFHbDJDLEVBQUVDLEVBQUVDLEVBQUUsQ0FDdmIsU0FBU2cyQyxHQUFHbDJDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSSxJQUFJZSxFQUFFLElBQVksRUFBUGpCLEVBQUVzakMsTUFBUSxPQUFPM3pCLElBQUcsQ0FBQyxJQUFJek8sRUFBRXlPLEdBQUVwTyxFQUFFTCxFQUFFdXdCLE1BQU0sR0FBRyxLQUFLdndCLEVBQUVzcUIsS0FBS3ZxQixFQUFFLENBQUMsSUFBSVIsRUFBRSxPQUFPUyxFQUFFcXdCLGVBQWU4aUIsR0FBRyxJQUFJNXpDLEVBQUUsQ0FBQyxJQUFJeUMsRUFBRWhDLEVBQUVrd0IsVUFBVTNoQixFQUFFLE9BQU92TSxHQUFHLE9BQU9BLEVBQUVxdUIsZUFBZTNjLEdBQUUxUixFQUFFbXhDLEdBQUcsSUFBSXprQyxFQUFFZ0YsR0FBTyxHQUFMeS9CLEdBQUc1ekMsR0FBTW1VLEdBQUVuRixLQUFLRyxFQUFFLElBQUlELEdBQUV6TyxFQUFFLE9BQU95TyxJQUFPRixHQUFKaFAsRUFBRWtQLElBQU04aEIsTUFBTSxLQUFLaHhCLEVBQUUrcUIsS0FBSyxPQUFPL3FCLEVBQUU4d0IsY0FBYzRrQixHQUFHajFDLEdBQUcsT0FBT3VPLEdBQUdBLEVBQUU0aEIsT0FBTzV3QixFQUFFa1AsR0FBRUYsR0FBRzBtQyxHQUFHajFDLEdBQUcsS0FBSyxPQUFPSyxHQUFHb08sR0FBRXBPLEVBQUUyMEMsR0FBRzMwQyxFQUFFdEIsRUFBRUMsR0FBR3FCLEVBQUVBLEVBQUVtd0IsUUFBUS9oQixHQUFFek8sRUFBRW16QyxHQUFHbnhDLEVBQUUwUixHQUFFaEYsQ0FBQyxDQUFDd21DLEdBQUdwMkMsRUFBTSxNQUFNLElBQW9CLEtBQWZrQixFQUFFMHhDLGVBQW9CLE9BQU9yeEMsR0FBR0EsRUFBRTh2QixPQUFPbndCLEVBQUV5TyxHQUFFcE8sR0FBRzYwQyxHQUFHcDJDLEVBQU0sQ0FBQyxDQUN2YyxTQUFTbzJDLEdBQUdwMkMsR0FBRyxLQUFLLE9BQU8yUCxJQUFHLENBQUMsSUFBSTFQLEVBQUUwUCxHQUFFLEdBQUcsSUFBYSxLQUFSMVAsRUFBRXF4QixPQUFZLENBQUMsSUFBSXB4QixFQUFFRCxFQUFFbXhCLFVBQVUsSUFBSSxHQUFHLElBQWEsS0FBUm54QixFQUFFcXhCLE9BQVksT0FBT3J4QixFQUFFdXJCLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc1VyxJQUFHZ2dDLEdBQUcsRUFBRTMwQyxHQUFHLE1BQU0sS0FBSyxFQUFFLElBQUlnQixFQUFFaEIsRUFBRWd4QixVQUFVLEdBQVcsRUFBUmh4QixFQUFFcXhCLFFBQVUxYyxHQUFFLEdBQUcsT0FBTzFVLEVBQUVlLEVBQUVrbkMsd0JBQXdCLENBQUMsSUFBSWpuQyxFQUFFakIsRUFBRTZpQyxjQUFjN2lDLEVBQUU4ZCxLQUFLN2QsRUFBRXdqQyxjQUFjSyxHQUFHOWpDLEVBQUU4ZCxLQUFLN2QsRUFBRXdqQyxlQUFlemlDLEVBQUVxd0MsbUJBQW1CcHdDLEVBQUVoQixFQUFFcXhCLGNBQWN0d0IsRUFBRW8xQyxvQ0FBb0MsQ0FBQyxJQUFJOTBDLEVBQUV0QixFQUFFdWxDLFlBQVksT0FBT2prQyxHQUFHa2xDLEdBQUd4bUMsRUFBRXNCLEVBQUVOLEdBQUcsTUFBTSxLQUFLLEVBQUUsSUFBSVIsRUFBRVIsRUFBRXVsQyxZQUFZLEdBQUcsT0FBTy9rQyxFQUFFLENBQVEsR0FBUFAsRUFBRSxLQUFRLE9BQU9ELEVBQUV3eEIsTUFBTSxPQUFPeHhCLEVBQUV3eEIsTUFBTWpHLEtBQUssS0FBSyxFQUN2ZixLQUFLLEVBQUV0ckIsRUFBRUQsRUFBRXd4QixNQUFNUixVQUFVd1YsR0FBR3htQyxFQUFFUSxFQUFFUCxFQUFFLENBQUMsTUFBTSxLQUFLLEVBQUUsSUFBSWdELEVBQUVqRCxFQUFFZ3hCLFVBQVUsR0FBRyxPQUFPL3dCLEdBQVcsRUFBUkQsRUFBRXF4QixNQUFRLENBQUNweEIsRUFBRWdELEVBQUUsSUFBSXVNLEVBQUV4UCxFQUFFeWpDLGNBQWMsT0FBT3pqQyxFQUFFOGQsTUFBTSxJQUFLLFNBQVMsSUFBSyxRQUFRLElBQUssU0FBUyxJQUFLLFdBQVd0TyxFQUFFdWtDLFdBQVc5ekMsRUFBRTY3QixRQUFRLE1BQU0sSUFBSyxNQUFNdHNCLEVBQUV1QyxNQUFNOVIsRUFBRThSLElBQUl2QyxFQUFFdUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxFQUFRLEtBQUssRUFBUSxLQUFLLEdBQXlKLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE1BQWhNLEtBQUssR0FBRyxHQUFHLE9BQU8vUixFQUFFc3hCLGNBQWMsQ0FBQyxJQUFJM2hCLEVBQUUzUCxFQUFFbXhCLFVBQVUsR0FBRyxPQUFPeGhCLEVBQUUsQ0FBQyxJQUFJM04sRUFBRTJOLEVBQUUyaEIsY0FBYyxHQUFHLE9BQU90dkIsRUFBRSxDQUFDLElBQUk0QixFQUFFNUIsRUFBRXV2QixXQUFXLE9BQU8zdEIsR0FBR21ULEdBQUduVCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQzVjLFFBQVEsTUFBTWpELE1BQU11UCxFQUFFLE1BQU95RSxJQUFXLElBQVIzVSxFQUFFcXhCLE9BQVd1akIsR0FBRzUwQyxFQUFFLENBQUMsTUFBTWlNLEdBQUdpSixHQUFFbFYsRUFBRUEsRUFBRW94QixPQUFPbmxCLEVBQUUsQ0FBQyxDQUFDLEdBQUdqTSxJQUFJRCxFQUFFLENBQUMyUCxHQUFFLEtBQUssS0FBSyxDQUFhLEdBQUcsUUFBZnpQLEVBQUVELEVBQUV5eEIsU0FBb0IsQ0FBQ3h4QixFQUFFbXhCLE9BQU9weEIsRUFBRW94QixPQUFPMWhCLEdBQUV6UCxFQUFFLEtBQUssQ0FBQ3lQLEdBQUUxUCxFQUFFb3hCLE1BQU0sQ0FBQyxDQUFDLFNBQVMya0IsR0FBR2gyQyxHQUFHLEtBQUssT0FBTzJQLElBQUcsQ0FBQyxJQUFJMVAsRUFBRTBQLEdBQUUsR0FBRzFQLElBQUlELEVBQUUsQ0FBQzJQLEdBQUUsS0FBSyxLQUFLLENBQUMsSUFBSXpQLEVBQUVELEVBQUV5eEIsUUFBUSxHQUFHLE9BQU94eEIsRUFBRSxDQUFDQSxFQUFFbXhCLE9BQU9weEIsRUFBRW94QixPQUFPMWhCLEdBQUV6UCxFQUFFLEtBQUssQ0FBQ3lQLEdBQUUxUCxFQUFFb3hCLE1BQU0sQ0FBQyxDQUN2UyxTQUFTOGtCLEdBQUduMkMsR0FBRyxLQUFLLE9BQU8yUCxJQUFHLENBQUMsSUFBSTFQLEVBQUUwUCxHQUFFLElBQUksT0FBTzFQLEVBQUV1ckIsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJdHJCLEVBQUVELEVBQUVveEIsT0FBTyxJQUFJdWpCLEdBQUcsRUFBRTMwQyxFQUFFLENBQUMsTUFBTXdQLEdBQUcwRixHQUFFbFYsRUFBRUMsRUFBRXVQLEVBQUUsQ0FBQyxNQUFNLEtBQUssRUFBRSxJQUFJeE8sRUFBRWhCLEVBQUVneEIsVUFBVSxHQUFHLG1CQUFvQmh3QixFQUFFa25DLGtCQUFrQixDQUFDLElBQUlqbkMsRUFBRWpCLEVBQUVveEIsT0FBTyxJQUFJcHdCLEVBQUVrbkMsbUJBQW1CLENBQUMsTUFBTTE0QixHQUFHMEYsR0FBRWxWLEVBQUVpQixFQUFFdU8sRUFBRSxDQUFDLENBQUMsSUFBSWxPLEVBQUV0QixFQUFFb3hCLE9BQU8sSUFBSXdqQixHQUFHNTBDLEVBQUUsQ0FBQyxNQUFNd1AsR0FBRzBGLEdBQUVsVixFQUFFc0IsRUFBRWtPLEVBQUUsQ0FBQyxNQUFNLEtBQUssRUFBRSxJQUFJaFAsRUFBRVIsRUFBRW94QixPQUFPLElBQUl3akIsR0FBRzUwQyxFQUFFLENBQUMsTUFBTXdQLEdBQUcwRixHQUFFbFYsRUFBRVEsRUFBRWdQLEVBQUUsRUFBRSxDQUFDLE1BQU1BLEdBQUcwRixHQUFFbFYsRUFBRUEsRUFBRW94QixPQUFPNWhCLEVBQUUsQ0FBQyxHQUFHeFAsSUFBSUQsRUFBRSxDQUFDMlAsR0FBRSxLQUFLLEtBQUssQ0FBQyxJQUFJek0sRUFBRWpELEVBQUV5eEIsUUFBUSxHQUFHLE9BQU94dUIsRUFBRSxDQUFDQSxFQUFFbXVCLE9BQU9weEIsRUFBRW94QixPQUFPMWhCLEdBQUV6TSxFQUFFLEtBQUssQ0FBQ3lNLEdBQUUxUCxFQUFFb3hCLE1BQU0sQ0FBQyxDQUM3ZCxJQXdCa05pbEIsR0F4QjlNQyxHQUFHNTFDLEtBQUs2MUMsS0FBS0MsR0FBR3J5QyxFQUFHK2xDLHVCQUF1QnVNLEdBQUd0eUMsRUFBRytyQyxrQkFBa0J3RyxHQUFHdnlDLEVBQUd1dkIsd0JBQXdCcm9CLEdBQUUsRUFBRXdJLEdBQUUsS0FBSzJRLEdBQUUsS0FBSy9XLEdBQUUsRUFBRXNqQyxHQUFHLEVBQUVELEdBQUd2USxHQUFHLEdBQUc3ckIsR0FBRSxFQUFFaWlDLEdBQUcsS0FBS3BRLEdBQUcsRUFBRXFRLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLEdBQUcsS0FBS2pCLEdBQUcsRUFBRTdCLEdBQUcrQyxJQUFTQyxHQUFHLEtBQUszSCxJQUFHLEVBQUdDLEdBQUcsS0FBS0csR0FBRyxLQUFLd0gsSUFBRyxFQUFHQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLElBQUksRUFBRUMsR0FBRyxFQUFFLFNBQVN0ckMsS0FBSSxPQUFPLElBQU8sRUFBRmIsSUFBS3JELE1BQUssSUFBSXV2QyxHQUFHQSxHQUFHQSxHQUFHdnZDLElBQUcsQ0FDaFUsU0FBU2kvQixHQUFHbG5DLEdBQUcsT0FBRyxJQUFZLEVBQVBBLEVBQUVzakMsTUFBZSxFQUFLLElBQU8sRUFBRmg0QixLQUFNLElBQUlvQyxHQUFTQSxJQUFHQSxHQUFLLE9BQU9vMkIsR0FBR2xRLFlBQWtCLElBQUk2akIsS0FBS0EsR0FBR2hqQyxNQUFNZ2pDLElBQVUsS0FBUHozQyxFQUFFbUksSUFBa0JuSSxFQUFpQkEsT0FBRSxLQUFqQkEsRUFBRVIsT0FBT2laLE9BQW1CLEdBQUdMLEdBQUdwWSxFQUFFK2QsS0FBYyxDQUFDLFNBQVNvcEIsR0FBR25uQyxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHLEdBQUcsR0FBR3EyQyxHQUFHLE1BQU1BLEdBQUcsRUFBRUMsR0FBRyxLQUFLMzJDLE1BQU11UCxFQUFFLE1BQU0wRSxHQUFHN1UsRUFBRUUsRUFBRWUsR0FBTSxJQUFPLEVBQUZxSyxLQUFNdEwsSUFBSThULEtBQUU5VCxJQUFJOFQsS0FBSSxJQUFPLEVBQUZ4SSxNQUFPdXJDLElBQUkzMkMsR0FBRyxJQUFJeVUsSUFBRytpQyxHQUFHMTNDLEVBQUUwTixLQUFJaXFDLEdBQUczM0MsRUFBRWlCLEdBQUcsSUFBSWYsR0FBRyxJQUFJb0wsSUFBRyxJQUFZLEVBQVByTCxFQUFFcWpDLFFBQVU0USxHQUFHanNDLEtBQUksSUFBSXU1QixJQUFJRyxNQUFLLENBQzFZLFNBQVNnVyxHQUFHMzNDLEVBQUVDLEdBQUcsSUFBSUMsRUFBRUYsRUFBRTQzQyxjQTVNekIsU0FBWTUzQyxFQUFFQyxHQUFHLElBQUksSUFBSUMsRUFBRUYsRUFBRTB5QixlQUFlenhCLEVBQUVqQixFQUFFMnlCLFlBQVl6eEIsRUFBRWxCLEVBQUU2M0MsZ0JBQWdCdDJDLEVBQUV2QixFQUFFeXlCLGFBQWEsRUFBRWx4QixHQUFHLENBQUMsSUFBSWQsRUFBRSxHQUFHZ1QsR0FBR2xTLEdBQUcyQixFQUFFLEdBQUd6QyxFQUFFZ1AsRUFBRXZPLEVBQUVULElBQU8sSUFBSWdQLEVBQU0sSUFBS3ZNLEVBQUVoRCxJQUFJLElBQUtnRCxFQUFFakMsS0FBR0MsRUFBRVQsR0FBRzBULEdBQUdqUixFQUFFakQsSUFBUXdQLEdBQUd4UCxJQUFJRCxFQUFFODNDLGNBQWM1MEMsR0FBRzNCLElBQUkyQixDQUFDLENBQUMsQ0E0TW5Ma1IsQ0FBR3BVLEVBQUVDLEdBQUcsSUFBSWdCLEVBQUVpVCxHQUFHbFUsRUFBRUEsSUFBSThULEdBQUVwRyxHQUFFLEdBQUcsR0FBRyxJQUFJek0sRUFBRSxPQUFPZixHQUFHK1EsR0FBRy9RLEdBQUdGLEVBQUU0M0MsYUFBYSxLQUFLNTNDLEVBQUUrM0MsaUJBQWlCLE9BQU8sR0FBRzkzQyxFQUFFZ0IsR0FBR0EsRUFBRWpCLEVBQUUrM0MsbUJBQW1COTNDLEVBQUUsQ0FBZ0IsR0FBZixNQUFNQyxHQUFHK1EsR0FBRy9RLEdBQU0sSUFBSUQsRUFBRSxJQUFJRCxFQUFFd3JCLElBN0lzSixTQUFZeHJCLEdBQUd3aEMsSUFBRyxFQUFHRSxHQUFHMWhDLEVBQUUsQ0E2STVLZzRDLENBQUdDLEdBQUcxMUMsS0FBSyxLQUFLdkMsSUFBSTBoQyxHQUFHdVcsR0FBRzExQyxLQUFLLEtBQUt2QyxJQUFJdy9CLElBQUcsV0FBVyxJQUFPLEVBQUZsMEIsS0FBTXEyQixJQUFJLElBQUd6aEMsRUFBRSxTQUFTLENBQUMsT0FBTzhVLEdBQUcvVCxJQUFJLEtBQUssRUFBRWYsRUFBRXVSLEdBQUcsTUFBTSxLQUFLLEVBQUV2UixFQUFFMFIsR0FBRyxNQUFNLEtBQUssR0FBd0MsUUFBUTFSLEVBQUVvUyxTQUFwQyxLQUFLLFVBQVVwUyxFQUFFd1MsR0FBc0J4UyxFQUFFZzRDLEdBQUdoNEMsRUFBRWk0QyxHQUFHNTFDLEtBQUssS0FBS3ZDLEdBQUcsQ0FBQ0EsRUFBRSszQyxpQkFBaUI5M0MsRUFBRUQsRUFBRTQzQyxhQUFhMTNDLENBQUMsQ0FBQyxDQUM3YyxTQUFTaTRDLEdBQUduNEMsRUFBRUMsR0FBYyxHQUFYdTNDLElBQUksRUFBRUMsR0FBRyxFQUFLLElBQU8sRUFBRm5zQyxJQUFLLE1BQU0xSyxNQUFNdVAsRUFBRSxNQUFNLElBQUlqUSxFQUFFRixFQUFFNDNDLGFBQWEsR0FBR1EsTUFBTXA0QyxFQUFFNDNDLGVBQWUxM0MsRUFBRSxPQUFPLEtBQUssSUFBSWUsRUFBRWlULEdBQUdsVSxFQUFFQSxJQUFJOFQsR0FBRXBHLEdBQUUsR0FBRyxHQUFHLElBQUl6TSxFQUFFLE9BQU8sS0FBSyxHQUFHLElBQU8sR0FBRkEsSUFBTyxJQUFLQSxFQUFFakIsRUFBRTgzQyxlQUFlNzNDLEVBQUVBLEVBQUVvNEMsR0FBR3I0QyxFQUFFaUIsT0FBTyxDQUFDaEIsRUFBRWdCLEVBQUUsSUFBSUMsRUFBRW9LLEdBQUVBLElBQUcsRUFBRSxJQUFJL0osRUFBRSsyQyxLQUFnRCxJQUF4Q3hrQyxLQUFJOVQsR0FBRzBOLEtBQUl6TixJQUFFaTNDLEdBQUcsS0FBS2hELEdBQUdqc0MsS0FBSSxJQUFJc3dDLEdBQUd2NEMsRUFBRUMsVUFBVXU0QyxLQUFLLEtBQUssQ0FBQyxNQUFNdDFDLEdBQUd1MUMsR0FBR3o0QyxFQUFFa0QsRUFBRSxDQUFVa2hDLEtBQUtxUyxHQUFHOWtCLFFBQVFwd0IsRUFBRStKLEdBQUVwSyxFQUFFLE9BQU91akIsR0FBRXhrQixFQUFFLEdBQUc2VCxHQUFFLEtBQUtwRyxHQUFFLEVBQUV6TixFQUFFMFUsR0FBRSxDQUFDLEdBQUcsSUFBSTFVLEVBQUUsQ0FBeUMsR0FBeEMsSUFBSUEsR0FBWSxLQUFSaUIsRUFBRW1ULEdBQUdyVSxNQUFXaUIsRUFBRUMsRUFBRWpCLEVBQUV5NEMsR0FBRzE0QyxFQUFFa0IsSUFBUSxJQUFJakIsRUFBRSxNQUFNQyxFQUFFMDJDLEdBQUcyQixHQUFHdjRDLEVBQUUsR0FBRzAzQyxHQUFHMTNDLEVBQUVpQixHQUFHMDJDLEdBQUczM0MsRUFBRWlJLE1BQUsvSCxFQUFFLEdBQUcsSUFBSUQsRUFBRXkzQyxHQUFHMTNDLEVBQUVpQixPQUNoZixDQUF1QixHQUF0QkMsRUFBRWxCLEVBQUUyeEIsUUFBUVAsVUFBYSxJQUFPLEdBQUZud0IsS0FHbkMsU0FBWWpCLEdBQUcsSUFBSSxJQUFJQyxFQUFFRCxJQUFJLENBQUMsR0FBVyxNQUFSQyxFQUFFcXhCLE1BQVksQ0FBQyxJQUFJcHhCLEVBQUVELEVBQUV1bEMsWUFBWSxHQUFHLE9BQU90bEMsR0FBZSxRQUFYQSxFQUFFQSxFQUFFb3NDLFFBQWlCLElBQUksSUFBSXJyQyxFQUFFLEVBQUVBLEVBQUVmLEVBQUVRLE9BQU9PLElBQUksQ0FBQyxJQUFJQyxFQUFFaEIsRUFBRWUsR0FBR00sRUFBRUwsRUFBRStxQyxZQUFZL3FDLEVBQUVBLEVBQUViLE1BQU0sSUFBSSxJQUFJdTVCLEdBQUdyNEIsSUFBSUwsR0FBRyxPQUFNLENBQUUsQ0FBQyxNQUFNVCxHQUFHLE9BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBVyxHQUFWUCxFQUFFRCxFQUFFd3hCLE1BQXdCLE1BQWZ4eEIsRUFBRTJ5QyxjQUFvQixPQUFPMXlDLEVBQUVBLEVBQUVteEIsT0FBT3B4QixFQUFFQSxFQUFFQyxNQUFNLENBQUMsR0FBR0QsSUFBSUQsRUFBRSxNQUFNLEtBQUssT0FBT0MsRUFBRXl4QixTQUFTLENBQUMsR0FBRyxPQUFPenhCLEVBQUVveEIsUUFBUXB4QixFQUFFb3hCLFNBQVNyeEIsRUFBRSxPQUFNLEVBQUdDLEVBQUVBLEVBQUVveEIsTUFBTSxDQUFDcHhCLEVBQUV5eEIsUUFBUUwsT0FBT3B4QixFQUFFb3hCLE9BQU9weEIsRUFBRUEsRUFBRXl4QixPQUFPLENBQUMsQ0FBQyxPQUFNLENBQUUsQ0FIdlhpbkIsQ0FBR3ozQyxLQUFlLEtBQVZqQixFQUFFbzRDLEdBQUdyNEMsRUFBRWlCLEtBQW1CLEtBQVJNLEVBQUU4UyxHQUFHclUsTUFBV2lCLEVBQUVNLEVBQUV0QixFQUFFeTRDLEdBQUcxNEMsRUFBRXVCLElBQUssSUFBSXRCLEdBQUcsTUFBTUMsRUFBRTAyQyxHQUFHMkIsR0FBR3Y0QyxFQUFFLEdBQUcwM0MsR0FBRzEzQyxFQUFFaUIsR0FBRzAyQyxHQUFHMzNDLEVBQUVpSSxNQUFLL0gsRUFBcUMsT0FBbkNGLEVBQUU0NEMsYUFBYTEzQyxFQUFFbEIsRUFBRTY0QyxjQUFjNTNDLEVBQVNoQixHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTVcsTUFBTXVQLEVBQUUsTUFBTSxLQUFLLEVBQzhCLEtBQUssRUFBRTJvQyxHQUFHOTRDLEVBQUVnM0MsR0FBR0UsSUFBSSxNQUQ3QixLQUFLLEVBQVUsR0FBUlEsR0FBRzEzQyxFQUFFaUIsSUFBUyxVQUFGQSxLQUFlQSxHQUFpQixJQUFiaEIsRUFBRTgxQyxHQUFHLElBQUk5dEMsTUFBVSxDQUFDLEdBQUcsSUFBSWlNLEdBQUdsVSxFQUFFLEdBQUcsTUFBeUIsS0FBbkJrQixFQUFFbEIsRUFBRTB5QixnQkFBcUJ6eEIsS0FBS0EsRUFBRSxDQUFDa0wsS0FBSW5NLEVBQUUyeUIsYUFBYTN5QixFQUFFMHlCLGVBQWV4eEIsRUFBRSxLQUFLLENBQUNsQixFQUFFKzRDLGNBQWMzWixHQUFHMFosR0FBR3YyQyxLQUFLLEtBQUt2QyxFQUFFZzNDLEdBQUdFLElBQUlqM0MsR0FBRyxLQUFLLENBQUM2NEMsR0FBRzk0QyxFQUFFZzNDLEdBQUdFLElBQUksTUFBTSxLQUFLLEVBQVUsR0FBUlEsR0FBRzEzQyxFQUFFaUIsSUFBUyxRQUFGQSxLQUM5ZUEsRUFBRSxNQUFxQixJQUFmaEIsRUFBRUQsRUFBRTh5QixXQUFlNXhCLEdBQUcsRUFBRSxFQUFFRCxHQUFHLENBQUMsSUFBSVIsRUFBRSxHQUFHZ1QsR0FBR3hTLEdBQUdNLEVBQUUsR0FBR2QsR0FBRUEsRUFBRVIsRUFBRVEsSUFBS1MsSUFBSUEsRUFBRVQsR0FBR1EsSUFBSU0sQ0FBQyxDQUFxRyxHQUFwR04sRUFBRUMsRUFBcUcsSUFBM0ZELEdBQUcsS0FBWEEsRUFBRWdILEtBQUloSCxHQUFXLElBQUksSUFBSUEsRUFBRSxJQUFJLEtBQUtBLEVBQUUsS0FBSyxLQUFLQSxFQUFFLEtBQUssSUFBSUEsRUFBRSxJQUFJLEtBQUtBLEVBQUUsS0FBSyxLQUFLczFDLEdBQUd0MUMsRUFBRSxPQUFPQSxHQUFVLENBQUNqQixFQUFFKzRDLGNBQWMzWixHQUFHMFosR0FBR3YyQyxLQUFLLEtBQUt2QyxFQUFFZzNDLEdBQUdFLElBQUlqMkMsR0FBRyxLQUFLLENBQUM2M0MsR0FBRzk0QyxFQUFFZzNDLEdBQUdFLElBQUksTUFBK0IsUUFBUSxNQUFNdDJDLE1BQU11UCxFQUFFLE1BQU8sQ0FBQyxDQUFXLE9BQVZ3bkMsR0FBRzMzQyxFQUFFaUksTUFBWWpJLEVBQUU0M0MsZUFBZTEzQyxFQUFFaTRDLEdBQUc1MUMsS0FBSyxLQUFLdkMsR0FBRyxJQUFJLENBQ3JYLFNBQVMwNEMsR0FBRzE0QyxFQUFFQyxHQUFHLElBQUlDLEVBQUU2MkMsR0FBMkcsT0FBeEcvMkMsRUFBRTJ4QixRQUFRSixjQUFjaUMsZUFBZStrQixHQUFHdjRDLEVBQUVDLEdBQUdxeEIsT0FBTyxLQUFlLEtBQVZ0eEIsRUFBRXE0QyxHQUFHcjRDLEVBQUVDLE1BQVdBLEVBQUUrMkMsR0FBR0EsR0FBRzkyQyxFQUFFLE9BQU9ELEdBQUd1ekMsR0FBR3Z6QyxJQUFXRCxDQUFDLENBQUMsU0FBU3d6QyxHQUFHeHpDLEdBQUcsT0FBT2czQyxHQUFHQSxHQUFHaDNDLEVBQUVnM0MsR0FBR3Z2QyxLQUFLbkYsTUFBTTAwQyxHQUFHaDNDLEVBQUUsQ0FFNUwsU0FBUzAzQyxHQUFHMTNDLEVBQUVDLEdBQXVELElBQXBEQSxJQUFJNjJDLEdBQUc3MkMsSUFBSTQyQyxHQUFHNzJDLEVBQUUweUIsZ0JBQWdCenlCLEVBQUVELEVBQUUyeUIsY0FBYzF5QixFQUFNRCxFQUFFQSxFQUFFNjNDLGdCQUFnQixFQUFFNTNDLEdBQUcsQ0FBQyxJQUFJQyxFQUFFLEdBQUd1VCxHQUFHeFQsR0FBR2dCLEVBQUUsR0FBR2YsRUFBRUYsRUFBRUUsSUFBSSxFQUFFRCxJQUFJZ0IsQ0FBQyxDQUFDLENBQUMsU0FBU2czQyxHQUFHajRDLEdBQUcsR0FBRyxJQUFPLEVBQUZzTCxJQUFLLE1BQU0xSyxNQUFNdVAsRUFBRSxNQUFNaW9DLEtBQUssSUFBSW40QyxFQUFFaVUsR0FBR2xVLEVBQUUsR0FBRyxHQUFHLElBQU8sRUFBRkMsR0FBSyxPQUFPMDNDLEdBQUczM0MsRUFBRWlJLE1BQUssS0FBSyxJQUFJL0gsRUFBRW00QyxHQUFHcjRDLEVBQUVDLEdBQUcsR0FBRyxJQUFJRCxFQUFFd3JCLEtBQUssSUFBSXRyQixFQUFFLENBQUMsSUFBSWUsRUFBRW9ULEdBQUdyVSxHQUFHLElBQUlpQixJQUFJaEIsRUFBRWdCLEVBQUVmLEVBQUV3NEMsR0FBRzE0QyxFQUFFaUIsR0FBRyxDQUFDLEdBQUcsSUFBSWYsRUFBRSxNQUFNQSxFQUFFMDJDLEdBQUcyQixHQUFHdjRDLEVBQUUsR0FBRzAzQyxHQUFHMTNDLEVBQUVDLEdBQUcwM0MsR0FBRzMzQyxFQUFFaUksTUFBSy9ILEVBQUUsR0FBRyxJQUFJQSxFQUFFLE1BQU1VLE1BQU11UCxFQUFFLE1BQWlGLE9BQTNFblEsRUFBRTQ0QyxhQUFhNTRDLEVBQUUyeEIsUUFBUVAsVUFBVXB4QixFQUFFNjRDLGNBQWM1NEMsRUFBRTY0QyxHQUFHOTRDLEVBQUVnM0MsR0FBR0UsSUFBSVMsR0FBRzMzQyxFQUFFaUksTUFBWSxJQUFJLENBQ3ZkLFNBQVMrd0MsR0FBR2g1QyxFQUFFQyxHQUFHLElBQUlDLEVBQUVvTCxHQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPdEwsRUFBRUMsRUFBRSxDQUFDLFFBQVksS0FBSnFMLEdBQUVwTCxLQUFVZzBDLEdBQUdqc0MsS0FBSSxJQUFJdTVCLElBQUlHLEtBQUssQ0FBQyxDQUFDLFNBQVNzWCxHQUFHajVDLEdBQUcsT0FBT28zQyxJQUFJLElBQUlBLEdBQUc1ckIsS0FBSyxJQUFPLEVBQUZsZ0IsS0FBTThzQyxLQUFLLElBQUluNEMsRUFBRXFMLEdBQUVBLElBQUcsRUFBRSxJQUFJcEwsRUFBRXkyQyxHQUFHL2lCLFdBQVczeUIsRUFBRWtILEdBQUUsSUFBSSxHQUFHd3VDLEdBQUcvaUIsV0FBVyxLQUFLenJCLEdBQUUsRUFBRW5JLEVBQUUsT0FBT0EsR0FBRyxDQUFDLFFBQVFtSSxHQUFFbEgsRUFBRTAxQyxHQUFHL2lCLFdBQVcxekIsRUFBTSxJQUFPLEdBQVhvTCxHQUFFckwsS0FBYTBoQyxJQUFJLENBQUMsQ0FBQyxTQUFTd1MsS0FBS25ELEdBQUdELEdBQUdwZixRQUFRanBCLEdBQUVxb0MsR0FBRyxDQUNoVCxTQUFTd0gsR0FBR3Y0QyxFQUFFQyxHQUFHRCxFQUFFNDRDLGFBQWEsS0FBSzU0QyxFQUFFNjRDLGNBQWMsRUFBRSxJQUFJMzRDLEVBQUVGLEVBQUUrNEMsY0FBaUQsSUFBbEMsSUFBSTc0QyxJQUFJRixFQUFFKzRDLGVBQWUsRUFBRTFaLEdBQUduL0IsSUFBTyxPQUFPdWtCLEdBQUUsSUFBSXZrQixFQUFFdWtCLEdBQUU0TSxPQUFPLE9BQU9ueEIsR0FBRyxDQUFDLElBQUllLEVBQUVmLEVBQVEsT0FBTnNpQyxHQUFHdmhDLEdBQVVBLEVBQUV1cUIsS0FBSyxLQUFLLEVBQTZCLE9BQTNCdnFCLEVBQUVBLEVBQUU4YyxLQUFLc0ksb0JBQXdDMmEsS0FBSyxNQUFNLEtBQUssRUFBRTBJLEtBQUtoaEMsR0FBRWc0QixJQUFJaDRCLEdBQUV0RCxJQUFHNGtDLEtBQUssTUFBTSxLQUFLLEVBQUVKLEdBQUczb0MsR0FBRyxNQUFNLEtBQUssRUFBRXlvQyxLQUFLLE1BQU0sS0FBSyxHQUFjLEtBQUssR0FBR2hoQyxHQUFFNUMsSUFBRyxNQUFNLEtBQUssR0FBR3UrQixHQUFHcGpDLEVBQUU4YyxLQUFLME4sVUFBVSxNQUFNLEtBQUssR0FBRyxLQUFLLEdBQUcwb0IsS0FBS2owQyxFQUFFQSxFQUFFbXhCLE1BQU0sQ0FBcUUsR0FBcEV2ZCxHQUFFOVQsRUFBRXlrQixHQUFFemtCLEVBQUU0b0MsR0FBRzVvQyxFQUFFMnhCLFFBQVEsTUFBTWprQixHQUFFc2pDLEdBQUcvd0MsRUFBRTBVLEdBQUUsRUFBRWlpQyxHQUFHLEtBQUtFLEdBQUdELEdBQUdyUSxHQUFHLEVBQUV3USxHQUFHRCxHQUFHLEtBQVEsT0FBTzlSLEdBQUcsQ0FBQyxJQUFJaGxDLEVBQzFmLEVBQUVBLEVBQUVnbEMsR0FBR3ZrQyxPQUFPVCxJQUFJLEdBQTJCLFFBQWhCZ0IsR0FBUmYsRUFBRStrQyxHQUFHaGxDLElBQU9tbEMsYUFBcUIsQ0FBQ2xsQyxFQUFFa2xDLFlBQVksS0FBSyxJQUFJbGtDLEVBQUVELEVBQUVZLEtBQUtOLEVBQUVyQixFQUFFMmxDLFFBQVEsR0FBRyxPQUFPdGtDLEVBQUUsQ0FBQyxJQUFJZCxFQUFFYyxFQUFFTSxLQUFLTixFQUFFTSxLQUFLWCxFQUFFRCxFQUFFWSxLQUFLcEIsQ0FBQyxDQUFDUCxFQUFFMmxDLFFBQVE1a0MsQ0FBQyxDQUFDZ2tDLEdBQUcsSUFBSSxDQUFDLE9BQU9qbEMsQ0FBQyxDQUMzSyxTQUFTeTRDLEdBQUd6NEMsRUFBRUMsR0FBRyxPQUFFLENBQUMsSUFBSUMsRUFBRXVrQixHQUFFLElBQXVCLEdBQW5CMmYsS0FBSzhGLEdBQUd2WSxRQUFRb1osR0FBTVQsR0FBRyxDQUFDLElBQUksSUFBSXJwQyxFQUFFc0UsR0FBRWdzQixjQUFjLE9BQU90d0IsR0FBRyxDQUFDLElBQUlDLEVBQUVELEVBQUVrcUMsTUFBTSxPQUFPanFDLElBQUlBLEVBQUUya0MsUUFBUSxNQUFNNWtDLEVBQUVBLEVBQUVZLElBQUksQ0FBQ3lvQyxJQUFHLENBQUUsQ0FBNEMsR0FBM0NELEdBQUcsRUFBRXRsQyxHQUFFd0gsR0FBRWhILEdBQUUsS0FBS2dsQyxJQUFHLEVBQUdDLEdBQUcsRUFBRWtNLEdBQUcva0IsUUFBUSxLQUFRLE9BQU96eEIsR0FBRyxPQUFPQSxFQUFFbXhCLE9BQU8sQ0FBQzFjLEdBQUUsRUFBRWlpQyxHQUFHMzJDLEVBQUV3a0IsR0FBRSxLQUFLLEtBQUssQ0FBQ3prQixFQUFFLENBQUMsSUFBSXVCLEVBQUV2QixFQUFFUyxFQUFFUCxFQUFFbXhCLE9BQU9udUIsRUFBRWhELEVBQUV1UCxFQUFFeFAsRUFBcUIsR0FBbkJBLEVBQUV5TixHQUFFeEssRUFBRW91QixPQUFPLE1BQVMsT0FBTzdoQixHQUFHLGlCQUFrQkEsR0FBRyxtQkFBb0JBLEVBQUVrd0IsS0FBSyxDQUFDLElBQUkvdkIsRUFBRUgsRUFBRXhOLEVBQUVpQixFQUFFVyxFQUFFNUIsRUFBRXVwQixJQUFJLEdBQUcsSUFBWSxFQUFQdnBCLEVBQUVxaEMsUUFBVSxJQUFJei9CLEdBQUcsS0FBS0EsR0FBRyxLQUFLQSxHQUFHLENBQUMsSUFBSXFJLEVBQUVqSyxFQUFFbXZCLFVBQVVsbEIsR0FBR2pLLEVBQUV1akMsWUFBWXQ1QixFQUFFczVCLFlBQVl2akMsRUFBRXN2QixjQUFjcmxCLEVBQUVxbEIsY0FDeGV0dkIsRUFBRTJpQyxNQUFNMTRCLEVBQUUwNEIsUUFBUTNpQyxFQUFFdWpDLFlBQVksS0FBS3ZqQyxFQUFFc3ZCLGNBQWMsS0FBSyxDQUFDLElBQUlsaEIsRUFBRTIvQixHQUFHdnZDLEdBQUcsR0FBRyxPQUFPNFAsRUFBRSxDQUFDQSxFQUFFaWhCLFFBQVEsSUFBSTJlLEdBQUc1L0IsRUFBRTVQLEVBQUV5QyxFQUFFM0IsRUFBRXRCLEdBQVUsRUFBUG9RLEVBQUVpekIsTUFBUXVNLEdBQUd0dUMsRUFBRXFPLEVBQUUzUCxHQUFPd1AsRUFBRUcsRUFBRSxJQUFJQyxHQUFaNVAsRUFBRW9RLEdBQWNtMUIsWUFBWSxHQUFHLE9BQU8zMUIsRUFBRSxDQUFDLElBQUkvSyxFQUFFLElBQUlzbEIsSUFBSXRsQixFQUFFdWxCLElBQUk1YSxHQUFHeFAsRUFBRXVsQyxZQUFZMWdDLENBQUMsTUFBTStLLEVBQUV3YSxJQUFJNWEsR0FBRyxNQUFNelAsQ0FBQyxDQUFNLEdBQUcsSUFBTyxFQUFGQyxHQUFLLENBQUM0dkMsR0FBR3R1QyxFQUFFcU8sRUFBRTNQLEdBQUd1eUMsS0FBSyxNQUFNeHlDLENBQUMsQ0FBQ3lQLEVBQUU3TyxNQUFNdVAsRUFBRSxLQUFNLE1BQU0sR0FBRzlHLElBQVUsRUFBUG5HLEVBQUVvZ0MsS0FBTyxDQUFDLElBQUluK0IsRUFBRTZxQyxHQUFHdnZDLEdBQUcsR0FBRyxPQUFPMEUsRUFBRSxDQUFDLElBQWEsTUFBUkEsRUFBRW1zQixTQUFlbnNCLEVBQUVtc0IsT0FBTyxLQUFLMmUsR0FBRzlxQyxFQUFFMUUsRUFBRXlDLEVBQUUzQixFQUFFdEIsR0FBRzRqQyxHQUFHb0wsR0FBR3gvQixFQUFFdk0sSUFBSSxNQUFNbEQsQ0FBQyxDQUFDLENBQUN1QixFQUFFa08sRUFBRXcvQixHQUFHeC9CLEVBQUV2TSxHQUFHLElBQUl5UixLQUFJQSxHQUFFLEdBQUcsT0FBT29pQyxHQUFHQSxHQUFHLENBQUN4MUMsR0FBR3cxQyxHQUFHdHZDLEtBQUtsRyxHQUFHQSxFQUFFZCxFQUFFLEVBQUUsQ0FBQyxPQUFPYyxFQUFFaXFCLEtBQUssS0FBSyxFQUFFanFCLEVBQUUrdkIsT0FBTyxNQUNwZnJ4QixJQUFJQSxFQUFFc0IsRUFBRXFqQyxPQUFPM2tDLEVBQWtCcW1DLEdBQUcva0MsRUFBYit0QyxHQUFHL3RDLEVBQUVrTyxFQUFFeFAsSUFBVyxNQUFNRCxFQUFFLEtBQUssRUFBRWtELEVBQUV1TSxFQUFFLElBQUk1SixFQUFFdEUsRUFBRXdjLEtBQUt0UixFQUFFbEwsRUFBRTB2QixVQUFVLEdBQUcsSUFBYSxJQUFSMXZCLEVBQUUrdkIsU0FBYSxtQkFBb0J6ckIsRUFBRTZnQiwwQkFBMEIsT0FBT2phLEdBQUcsbUJBQW9CQSxFQUFFaWpDLG9CQUFvQixPQUFPQyxLQUFLQSxHQUFHNVIsSUFBSXR4QixLQUFLLENBQUNsTCxFQUFFK3ZCLE9BQU8sTUFBTXJ4QixJQUFJQSxFQUFFc0IsRUFBRXFqQyxPQUFPM2tDLEVBQWtCcW1DLEdBQUcva0MsRUFBYmt1QyxHQUFHbHVDLEVBQUUyQixFQUFFakQsSUFBVyxNQUFNRCxDQUFDLEVBQUV1QixFQUFFQSxFQUFFOHZCLE1BQU0sT0FBTyxPQUFPOXZCLEVBQUUsQ0FBQzIzQyxHQUFHaDVDLEVBQUUsQ0FBQyxNQUFNMEMsR0FBSTNDLEVBQUUyQyxFQUFHNmhCLEtBQUl2a0IsR0FBRyxPQUFPQSxJQUFJdWtCLEdBQUV2a0IsRUFBRUEsRUFBRW14QixRQUFRLFFBQVEsQ0FBQyxLQUFLLENBQVMsQ0FBQyxTQUFTaW5CLEtBQUssSUFBSXQ0QyxFQUFFeTJDLEdBQUc5a0IsUUFBc0IsT0FBZDhrQixHQUFHOWtCLFFBQVFvWixHQUFVLE9BQU8vcUMsRUFBRStxQyxHQUFHL3FDLENBQUMsQ0FDcmQsU0FBU3d5QyxLQUFRLElBQUk3OUIsSUFBRyxJQUFJQSxJQUFHLElBQUlBLEtBQUVBLEdBQUUsR0FBRSxPQUFPYixJQUFHLElBQVEsVUFBSDB5QixLQUFlLElBQVEsVUFBSHFRLEtBQWVhLEdBQUc1akMsR0FBRXBHLEdBQUUsQ0FBQyxTQUFTMnFDLEdBQUdyNEMsRUFBRUMsR0FBRyxJQUFJQyxFQUFFb0wsR0FBRUEsSUFBRyxFQUFFLElBQUlySyxFQUFFcTNDLEtBQXFDLElBQTdCeGtDLEtBQUk5VCxHQUFHME4sS0FBSXpOLElBQUVpM0MsR0FBRyxLQUFLcUIsR0FBR3Y0QyxFQUFFQyxVQUFVazVDLEtBQUssS0FBSyxDQUFDLE1BQU1qNEMsR0FBR3UzQyxHQUFHejRDLEVBQUVrQixFQUFFLENBQWdDLEdBQXRCa2pDLEtBQUs5NEIsR0FBRXBMLEVBQUV1MkMsR0FBRzlrQixRQUFRMXdCLEVBQUssT0FBT3dqQixHQUFFLE1BQU03akIsTUFBTXVQLEVBQUUsTUFBaUIsT0FBWDJELEdBQUUsS0FBS3BHLEdBQUUsRUFBU2lILEVBQUMsQ0FBQyxTQUFTd2tDLEtBQUssS0FBSyxPQUFPMTBCLElBQUcyMEIsR0FBRzMwQixHQUFFLENBQUMsU0FBUyt6QixLQUFLLEtBQUssT0FBTy96QixLQUFJdlQsTUFBTWtvQyxHQUFHMzBCLEdBQUUsQ0FBQyxTQUFTMjBCLEdBQUdwNUMsR0FBRyxJQUFJQyxFQUFFcTJDLEdBQUd0MkMsRUFBRW94QixVQUFVcHhCLEVBQUVneEMsSUFBSWh4QyxFQUFFMGpDLGNBQWMxakMsRUFBRWlqQyxhQUFhLE9BQU9oakMsRUFBRWk1QyxHQUFHbDVDLEdBQUd5a0IsR0FBRXhrQixFQUFFeTJDLEdBQUcva0IsUUFBUSxJQUFJLENBQzFkLFNBQVN1bkIsR0FBR2w1QyxHQUFHLElBQUlDLEVBQUVELEVBQUUsRUFBRSxDQUFDLElBQUlFLEVBQUVELEVBQUVteEIsVUFBcUIsR0FBWHB4QixFQUFFQyxFQUFFb3hCLE9BQVUsSUFBYSxNQUFScHhCLEVBQUVxeEIsUUFBYyxHQUFnQixRQUFicHhCLEVBQUVxekMsR0FBR3J6QyxFQUFFRCxFQUFFK3dDLEtBQWtCLFlBQUp2c0IsR0FBRXZrQixPQUFjLENBQVcsR0FBRyxRQUFiQSxFQUFFazBDLEdBQUdsMEMsRUFBRUQsSUFBbUMsT0FBbkJDLEVBQUVveEIsT0FBTyxXQUFNN00sR0FBRXZrQixHQUFTLEdBQUcsT0FBT0YsRUFBbUUsT0FBWDJVLEdBQUUsT0FBRThQLEdBQUUsTUFBNUR6a0IsRUFBRXN4QixPQUFPLE1BQU10eEIsRUFBRTR5QyxhQUFhLEVBQUU1eUMsRUFBRStpQyxVQUFVLElBQTRCLENBQWEsR0FBRyxRQUFmOWlDLEVBQUVBLEVBQUV5eEIsU0FBeUIsWUFBSmpOLEdBQUV4a0IsR0FBU3drQixHQUFFeGtCLEVBQUVELENBQUMsT0FBTyxPQUFPQyxHQUFHLElBQUkwVSxLQUFJQSxHQUFFLEVBQUUsQ0FBQyxTQUFTbWtDLEdBQUc5NEMsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZSxFQUFFa0gsR0FBRWpILEVBQUV5MUMsR0FBRy9pQixXQUFXLElBQUkraUIsR0FBRy9pQixXQUFXLEtBQUt6ckIsR0FBRSxFQUMzWSxTQUFZbkksRUFBRUMsRUFBRUMsRUFBRWUsR0FBRyxHQUFHbTNDLFdBQVcsT0FBT2hCLElBQUksR0FBRyxJQUFPLEVBQUY5ckMsSUFBSyxNQUFNMUssTUFBTXVQLEVBQUUsTUFBTWpRLEVBQUVGLEVBQUU0NEMsYUFBYSxJQUFJMTNDLEVBQUVsQixFQUFFNjRDLGNBQWMsR0FBRyxPQUFPMzRDLEVBQUUsT0FBTyxLQUEyQyxHQUF0Q0YsRUFBRTQ0QyxhQUFhLEtBQUs1NEMsRUFBRTY0QyxjQUFjLEVBQUszNEMsSUFBSUYsRUFBRTJ4QixRQUFRLE1BQU0vd0IsTUFBTXVQLEVBQUUsTUFBTW5RLEVBQUU0M0MsYUFBYSxLQUFLNTNDLEVBQUUrM0MsaUJBQWlCLEVBQUUsSUFBSXgyQyxFQUFFckIsRUFBRTBrQyxNQUFNMWtDLEVBQUVza0MsV0FBOEosR0ExTnRULFNBQVl4a0MsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFeXlCLGNBQWN4eUIsRUFBRUQsRUFBRXl5QixhQUFheHlCLEVBQUVELEVBQUUweUIsZUFBZSxFQUFFMXlCLEVBQUUyeUIsWUFBWSxFQUFFM3lCLEVBQUU4M0MsY0FBYzczQyxFQUFFRCxFQUFFcTVDLGtCQUFrQnA1QyxFQUFFRCxFQUFFNHlCLGdCQUFnQjN5QixFQUFFQSxFQUFFRCxFQUFFNnlCLGNBQWMsSUFBSTV4QixFQUFFakIsRUFBRTh5QixXQUFXLElBQUk5eUIsRUFBRUEsRUFBRTYzQyxnQkFBZ0IsRUFBRTMzQyxHQUFHLENBQUMsSUFBSWdCLEVBQUUsR0FBR3VTLEdBQUd2VCxHQUFHcUIsRUFBRSxHQUFHTCxFQUFFakIsRUFBRWlCLEdBQUcsRUFBRUQsRUFBRUMsSUFBSSxFQUFFbEIsRUFBRWtCLElBQUksRUFBRWhCLElBQUlxQixDQUFDLENBQUMsQ0EwTjVHdVQsQ0FBRzlVLEVBQUV1QixHQUFHdkIsSUFBSThULEtBQUkyUSxHQUFFM1EsR0FBRSxLQUFLcEcsR0FBRSxHQUFHLElBQW9CLEtBQWZ4TixFQUFFMHlDLGVBQW9CLElBQWEsS0FBUjF5QyxFQUFFb3hCLFFBQWE2bEIsS0FBS0EsSUFBRyxFQUFHZSxHQUFHNWxDLElBQUcsV0FBZ0IsT0FBTDhsQyxLQUFZLElBQUksS0FBSTcyQyxFQUFFLElBQWEsTUFBUnJCLEVBQUVveEIsT0FBZ0IsSUFBb0IsTUFBZnB4QixFQUFFMHlDLGVBQXFCcnhDLEVBQUUsQ0FBQ0EsRUFBRW8xQyxHQUFHL2lCLFdBQVcraUIsR0FBRy9pQixXQUFXLEtBQ2hmLElBQUluekIsRUFBRTBILEdBQUVBLEdBQUUsRUFBRSxJQUFJakYsRUFBRW9JLEdBQUVBLElBQUcsRUFBRW9yQyxHQUFHL2tCLFFBQVEsS0ExQ3BDLFNBQVkzeEIsRUFBRUMsR0FBZ0IsR0FBYisrQixHQUFHdG5CLEdBQWE2aUIsR0FBVnY2QixFQUFFcTZCLE1BQWMsQ0FBQyxHQUFHLG1CQUFtQnI2QixFQUFFLElBQUlFLEVBQUUsQ0FBQzA2QixNQUFNNTZCLEVBQUU4NkIsZUFBZUQsSUFBSTc2QixFQUFFKzZCLG1CQUFtQi82QixFQUFFLENBQThDLElBQUlpQixHQUFqRGYsR0FBR0EsRUFBRUYsRUFBRXVFLGdCQUFnQnJFLEVBQUVzRSxhQUFhaEYsUUFBZXc3QixjQUFjOTZCLEVBQUU4NkIsZUFBZSxHQUFHLzVCLEdBQUcsSUFBSUEsRUFBRWk2QixXQUFXLENBQUNoN0IsRUFBRWUsRUFBRWs2QixXQUFXLElBQUlqNkIsRUFBRUQsRUFBRW02QixhQUFhNzVCLEVBQUVOLEVBQUVvNkIsVUFBVXA2QixFQUFFQSxFQUFFcTZCLFlBQVksSUFBSXA3QixFQUFFK1IsU0FBUzFRLEVBQUUwUSxRQUFRLENBQUMsTUFBTXRKLEdBQUd6SSxFQUFFLEtBQUssTUFBTUYsQ0FBQyxDQUFDLElBQUlTLEVBQUUsRUFBRXlDLEdBQUcsRUFBRXVNLEdBQUcsRUFBRUcsRUFBRSxFQUFFM04sRUFBRSxFQUFFNEIsRUFBRTdELEVBQUVrTSxFQUFFLEtBQUtqTSxFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUlvUSxFQUFLeE0sSUFBSTNELEdBQUcsSUFBSWdCLEdBQUcsSUFBSTJDLEVBQUVvTyxXQUFXL08sRUFBRXpDLEVBQUVTLEdBQUcyQyxJQUFJdEMsR0FBRyxJQUFJTixHQUFHLElBQUk0QyxFQUFFb08sV0FBV3hDLEVBQUVoUCxFQUFFUSxHQUFHLElBQUk0QyxFQUFFb08sV0FBV3hSLEdBQ25mb0QsRUFBRXFPLFVBQVV4UixRQUFXLFFBQVEyUCxFQUFFeE0sRUFBRWdELGFBQWtCcUYsRUFBRXJJLEVBQUVBLEVBQUV3TSxFQUFFLE9BQU8sQ0FBQyxHQUFHeE0sSUFBSTdELEVBQUUsTUFBTUMsRUFBOEMsR0FBNUNpTSxJQUFJaE0sS0FBSzBQLElBQUkxTyxJQUFJZ0MsRUFBRXpDLEdBQUd5TCxJQUFJM0ssS0FBS1UsSUFBSWhCLElBQUl3TyxFQUFFaFAsR0FBTSxRQUFRNFAsRUFBRXhNLEVBQUVnZixhQUFhLE1BQVUzVyxHQUFKckksRUFBRXFJLEdBQU03QixVQUFVLENBQUN4RyxFQUFFd00sQ0FBQyxDQUFDblEsR0FBRyxJQUFJZ0QsSUFBSSxJQUFJdU0sRUFBRSxLQUFLLENBQUNtckIsTUFBTTEzQixFQUFFMjNCLElBQUlwckIsRUFBRSxNQUFNdlAsRUFBRSxJQUFJLENBQUNBLEVBQUVBLEdBQUcsQ0FBQzA2QixNQUFNLEVBQUVDLElBQUksRUFBRSxNQUFNMzZCLEVBQUUsS0FBK0MsSUFBMUMrK0IsR0FBRyxDQUFDdkUsWUFBWTE2QixFQUFFMjZCLGVBQWV6NkIsR0FBR3dYLElBQUcsRUFBTy9ILEdBQUUxUCxFQUFFLE9BQU8wUCxJQUFHLEdBQU8zUCxHQUFKQyxFQUFFMFAsSUFBTThoQixNQUFNLElBQW9CLEtBQWZ4eEIsRUFBRTJ5QyxlQUFvQixPQUFPNXlDLEVBQUVBLEVBQUVxeEIsT0FBT3B4QixFQUFFMFAsR0FBRTNQLE9BQU8sS0FBSyxPQUFPMlAsSUFBRyxDQUFDMVAsRUFBRTBQLEdBQUUsSUFBSSxJQUFJRSxFQUFFNVAsRUFBRW14QixVQUFVLEdBQUcsSUFBYSxLQUFSbnhCLEVBQUVxeEIsT0FBWSxPQUFPcnhCLEVBQUV1ckIsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FDdkssS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLE1BQTNXLEtBQUssRUFBRSxHQUFHLE9BQU8zYixFQUFFLENBQUMsSUFBSS9LLEVBQUUrSyxFQUFFNnpCLGNBQWN2K0IsRUFBRTBLLEVBQUUwaEIsY0FBY3ZxQixFQUFFL0csRUFBRWd4QixVQUFVcHJCLEVBQUVtQixFQUFFZ2hDLHdCQUF3Qi9uQyxFQUFFNmlDLGNBQWM3aUMsRUFBRThkLEtBQUtqWixFQUFFaS9CLEdBQUc5akMsRUFBRThkLEtBQUtqWixHQUFHSyxHQUFHNkIsRUFBRXF2QyxvQ0FBb0N4d0MsQ0FBQyxDQUFDLE1BQU0sS0FBSyxFQUFFLElBQUk0RyxFQUFFeE0sRUFBRWd4QixVQUFVd0MsY0FBYyxJQUFJaG5CLEVBQUV3RixTQUFTeEYsRUFBRTBGLFlBQVksR0FBRyxJQUFJMUYsRUFBRXdGLFVBQVV4RixFQUFFeUMsaUJBQWlCekMsRUFBRXJDLFlBQVlxQyxFQUFFeUMsaUJBQWlCLE1BQXlDLFFBQVEsTUFBTXRPLE1BQU11UCxFQUFFLE1BQU8sQ0FBQyxNQUFNeEgsR0FBR3dNLEdBQUVsVixFQUFFQSxFQUFFb3hCLE9BQU8xb0IsRUFBRSxDQUFhLEdBQUcsUUFBZjNJLEVBQUVDLEVBQUV5eEIsU0FBb0IsQ0FBQzF4QixFQUFFcXhCLE9BQU9weEIsRUFBRW94QixPQUFPMWhCLEdBQUUzUCxFQUFFLEtBQUssQ0FBQzJQLEdBQUUxUCxFQUFFb3hCLE1BQU0sQ0FBQ3hoQixFQUFFNmtDLEdBQUdBLElBQUcsQ0FBVyxDQXdDbGQ0RSxDQUFHdDVDLEVBQUVFLEdBQUcwMUMsR0FBRzExQyxFQUFFRixHQUFHeTZCLEdBQUd3RSxJQUFJdm5CLEtBQUtzbkIsR0FBR0MsR0FBR0QsR0FBRyxLQUFLaC9CLEVBQUUyeEIsUUFBUXp4QixFQUFFKzFDLEdBQUcvMUMsRUFBRUYsRUFBRWtCLEdBQUdrUSxLQUFLOUYsR0FBRXBJLEVBQUVpRixHQUFFMUgsRUFBRWsyQyxHQUFHL2lCLFdBQVdyeUIsQ0FBQyxNQUFNdkIsRUFBRTJ4QixRQUFRenhCLEVBQXNGLEdBQXBGaTNDLEtBQUtBLElBQUcsRUFBR0MsR0FBR3AzQyxFQUFFcTNDLEdBQUduMkMsR0FBb0IsS0FBakJLLEVBQUV2QixFQUFFeXlCLGdCQUFxQmtkLEdBQUcsTUFqT21KLFNBQVkzdkMsR0FBRyxHQUFHa1QsSUFBSSxtQkFBb0JBLEdBQUdxbUMsa0JBQWtCLElBQUlybUMsR0FBR3FtQyxrQkFBa0J0bUMsR0FBR2pULE9BQUUsRUFBTyxNQUF1QixJQUFoQkEsRUFBRTJ4QixRQUFRTCxPQUFXLENBQUMsTUFBTXJ4QixHQUFHLENBQUMsQ0FpT3hSa1QsQ0FBR2pULEVBQUUrd0IsV0FBYTBtQixHQUFHMzNDLEVBQUVpSSxNQUFRLE9BQU9oSSxFQUFFLElBQUlnQixFQUFFakIsRUFBRXc1QyxtQkFBbUJ0NUMsRUFBRSxFQUFFQSxFQUFFRCxFQUFFUyxPQUFPUixJQUFXZSxHQUFQQyxFQUFFakIsRUFBRUMsSUFBT0csTUFBTSxDQUFDdXZDLGVBQWUxdUMsRUFBRTZDLE1BQU0rVCxPQUFPNVcsRUFBRTRXLFNBQVMsR0FBR3kzQixHQUFHLE1BQU1BLElBQUcsRUFBR3Z2QyxFQUFFd3ZDLEdBQUdBLEdBQUcsS0FBS3h2QyxFQUFFLElBQVEsRUFBSHEzQyxLQUFPLElBQUlyM0MsRUFBRXdyQixLQUFLNHNCLEtBQXNCLElBQU8sR0FBeEI3MkMsRUFBRXZCLEVBQUV5eUIsZUFBdUJ6eUIsSUFBSXUzQyxHQUFHRCxNQUFNQSxHQUFHLEVBQUVDLEdBQUd2M0MsR0FBR3MzQyxHQUFHLEVBQUUzVixJQUFnQixDQUZ4RjhYLENBQUd6NUMsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRSxDQUFDLFFBQVEwMUMsR0FBRy9pQixXQUFXMXlCLEVBQUVpSCxHQUFFbEgsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUdoYyxTQUFTbTNDLEtBQUssR0FBRyxPQUFPaEIsR0FBRyxDQUFDLElBQUlwM0MsRUFBRWdWLEdBQUdxaUMsSUFBSXAzQyxFQUFFMDJDLEdBQUcvaUIsV0FBVzF6QixFQUFFaUksR0FBRSxJQUFtQyxHQUEvQnd1QyxHQUFHL2lCLFdBQVcsS0FBS3pyQixHQUFFLEdBQUduSSxFQUFFLEdBQUdBLEVBQUssT0FBT28zQyxHQUFHLElBQUluMkMsR0FBRSxNQUFPLENBQW1CLEdBQWxCakIsRUFBRW8zQyxHQUFHQSxHQUFHLEtBQUtDLEdBQUcsRUFBSyxJQUFPLEVBQUYvckMsSUFBSyxNQUFNMUssTUFBTXVQLEVBQUUsTUFBTSxJQUFJalAsRUFBRW9LLEdBQU8sSUFBTEEsSUFBRyxFQUFNcUUsR0FBRTNQLEVBQUUyeEIsUUFBUSxPQUFPaGlCLElBQUcsQ0FBQyxJQUFJcE8sRUFBRW9PLEdBQUVsUCxFQUFFYyxFQUFFa3dCLE1BQU0sR0FBRyxJQUFhLEdBQVI5aEIsR0FBRTJoQixPQUFVLENBQUMsSUFBSXB1QixFQUFFM0IsRUFBRXdoQyxVQUFVLEdBQUcsT0FBTzcvQixFQUFFLENBQUMsSUFBSSxJQUFJdU0sRUFBRSxFQUFFQSxFQUFFdk0sRUFBRXhDLE9BQU8rTyxJQUFJLENBQUMsSUFBSUcsRUFBRTFNLEVBQUV1TSxHQUFHLElBQUlFLEdBQUVDLEVBQUUsT0FBT0QsSUFBRyxDQUFDLElBQUkxTixFQUFFME4sR0FBRSxPQUFPMU4sRUFBRXVwQixLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHbXBCLEdBQUcsRUFBRTF5QyxFQUFFVixHQUFHLElBQUlzQyxFQUFFNUIsRUFBRXd2QixNQUFNLEdBQUcsT0FBTzV0QixFQUFFQSxFQUFFd3RCLE9BQU9wdkIsRUFBRTBOLEdBQUU5TCxPQUFPLEtBQUssT0FBTzhMLElBQUcsQ0FBSyxJQUFJekQsR0FBUmpLLEVBQUUwTixJQUFVK2hCLFFBQVFyaEIsRUFBRXBPLEVBQUVvdkIsT0FBYSxHQUFOeWpCLEdBQUc3eUMsR0FBTUEsSUFDbmYyTixFQUFFLENBQUNELEdBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxPQUFPekQsRUFBRSxDQUFDQSxFQUFFbWxCLE9BQU9oaEIsRUFBRVYsR0FBRXpELEVBQUUsS0FBSyxDQUFDeUQsR0FBRVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJUixFQUFFdE8sRUFBRTZ2QixVQUFVLEdBQUcsT0FBT3ZoQixFQUFFLENBQUMsSUFBSS9LLEVBQUUrSyxFQUFFNGhCLE1BQU0sR0FBRyxPQUFPM3NCLEVBQUUsQ0FBQytLLEVBQUU0aEIsTUFBTSxLQUFLLEVBQUUsQ0FBQyxJQUFJdHNCLEVBQUVMLEVBQUU0c0IsUUFBUTVzQixFQUFFNHNCLFFBQVEsS0FBSzVzQixFQUFFSyxDQUFDLE9BQU8sT0FBT0wsRUFBRSxDQUFDLENBQUM2SyxHQUFFcE8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFvQixLQUFmQSxFQUFFcXhDLGVBQW9CLE9BQU9ueUMsRUFBRUEsRUFBRTR3QixPQUFPOXZCLEVBQUVvTyxHQUFFbFAsT0FBT1IsRUFBRSxLQUFLLE9BQU8wUCxJQUFHLENBQUssR0FBRyxJQUFhLE1BQXBCcE8sRUFBRW9PLElBQVkyaEIsT0FBWSxPQUFPL3ZCLEVBQUVpcUIsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBR21wQixHQUFHLEVBQUVwekMsRUFBRUEsRUFBRTh2QixRQUFRLElBQUlycUIsRUFBRXpGLEVBQUVtd0IsUUFBUSxHQUFHLE9BQU8xcUIsRUFBRSxDQUFDQSxFQUFFcXFCLE9BQU85dkIsRUFBRTh2QixPQUFPMWhCLEdBQUUzSSxFQUFFLE1BQU0vRyxDQUFDLENBQUMwUCxHQUFFcE8sRUFBRTh2QixNQUFNLENBQUMsQ0FBQyxJQUFJeHJCLEVBQUU3RixFQUFFMnhCLFFBQVEsSUFBSWhpQixHQUFFOUosRUFBRSxPQUFPOEosSUFBRyxDQUFLLElBQUlsRCxHQUFSaE0sRUFBRWtQLElBQVU4aEIsTUFBTSxHQUFHLElBQW9CLEtBQWZoeEIsRUFBRW15QyxlQUFvQixPQUNsZm5tQyxFQUFFQSxFQUFFNGtCLE9BQU81d0IsRUFBRWtQLEdBQUVsRCxPQUFPeE0sRUFBRSxJQUFJUSxFQUFFb0YsRUFBRSxPQUFPOEosSUFBRyxDQUFLLEdBQUcsSUFBYSxNQUFwQnpNLEVBQUV5TSxJQUFZMmhCLE9BQVksSUFBSSxPQUFPcHVCLEVBQUVzb0IsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBR29wQixHQUFHLEVBQUUxeEMsR0FBRyxDQUFDLE1BQU1OLEdBQUl1UyxHQUFFalMsRUFBRUEsRUFBRW11QixPQUFPenVCLEVBQUcsQ0FBQyxHQUFHTSxJQUFJekMsRUFBRSxDQUFDa1AsR0FBRSxLQUFLLE1BQU0xUCxDQUFDLENBQUMsSUFBSTBJLEVBQUV6RixFQUFFd3VCLFFBQVEsR0FBRyxPQUFPL29CLEVBQUUsQ0FBQ0EsRUFBRTBvQixPQUFPbnVCLEVBQUVtdUIsT0FBTzFoQixHQUFFaEgsRUFBRSxNQUFNMUksQ0FBQyxDQUFDMFAsR0FBRXpNLEVBQUVtdUIsTUFBTSxDQUFDLENBQVUsR0FBVC9sQixHQUFFcEssRUFBRXlnQyxLQUFRenVCLElBQUksbUJBQW9CQSxHQUFHd21DLHNCQUFzQixJQUFJeG1DLEdBQUd3bUMsc0JBQXNCem1DLEdBQUdqVCxFQUFFLENBQUMsTUFBTTRDLEdBQUksQ0FBQzNCLEdBQUUsQ0FBRSxDQUFDLE9BQU9BLENBQUMsQ0FBQyxRQUFRa0gsR0FBRWpJLEVBQUV5MkMsR0FBRy9pQixXQUFXM3pCLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBRSxDQUFDLFNBQVMwNUMsR0FBRzM1QyxFQUFFQyxFQUFFQyxHQUF5QkYsRUFBRW9tQyxHQUFHcG1DLEVBQWpCQyxFQUFFcXZDLEdBQUd0dkMsRUFBZkMsRUFBRWd2QyxHQUFHL3VDLEVBQUVELEdBQVksR0FBWSxHQUFHQSxFQUFFa00sS0FBSSxPQUFPbk0sSUFBSTZVLEdBQUc3VSxFQUFFLEVBQUVDLEdBQUcwM0MsR0FBRzMzQyxFQUFFQyxHQUFHLENBQ3plLFNBQVNrVixHQUFFblYsRUFBRUMsRUFBRUMsR0FBRyxHQUFHLElBQUlGLEVBQUV3ckIsSUFBSW11QixHQUFHMzVDLEVBQUVBLEVBQUVFLFFBQVEsS0FBSyxPQUFPRCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFdXJCLElBQUksQ0FBQ211QixHQUFHMTVDLEVBQUVELEVBQUVFLEdBQUcsS0FBSyxDQUFNLEdBQUcsSUFBSUQsRUFBRXVyQixJQUFJLENBQUMsSUFBSXZxQixFQUFFaEIsRUFBRWd4QixVQUFVLEdBQUcsbUJBQW9CaHhCLEVBQUU4ZCxLQUFLMkksMEJBQTBCLG1CQUFvQnpsQixFQUFFeXVDLG9CQUFvQixPQUFPQyxLQUFLQSxHQUFHNVIsSUFBSTk4QixJQUFJLENBQXVCaEIsRUFBRW1tQyxHQUFHbm1DLEVBQWpCRCxFQUFFeXZDLEdBQUd4dkMsRUFBZkQsRUFBRWl2QyxHQUFHL3VDLEVBQUVGLEdBQVksR0FBWSxHQUFHQSxFQUFFbU0sS0FBSSxPQUFPbE0sSUFBSTRVLEdBQUc1VSxFQUFFLEVBQUVELEdBQUcyM0MsR0FBRzEzQyxFQUFFRCxJQUFJLEtBQUssQ0FBQyxDQUFDQyxFQUFFQSxFQUFFb3hCLE1BQU0sQ0FBQyxDQUNuVixTQUFTMGUsR0FBRy92QyxFQUFFQyxFQUFFQyxHQUFHLElBQUllLEVBQUVqQixFQUFFOHZDLFVBQVUsT0FBTzd1QyxHQUFHQSxFQUFFK3hCLE9BQU8veUIsR0FBR0EsRUFBRWtNLEtBQUluTSxFQUFFMnlCLGFBQWEzeUIsRUFBRTB5QixlQUFleHlCLEVBQUU0VCxLQUFJOVQsSUFBSTBOLEdBQUV4TixLQUFLQSxJQUFJLElBQUl5VSxJQUFHLElBQUlBLEtBQU0sVUFBRmpILE1BQWVBLElBQUcsSUFBSXpGLEtBQUk4dEMsR0FBR3dDLEdBQUd2NEMsRUFBRSxHQUFHODJDLElBQUk1MkMsR0FBR3kzQyxHQUFHMzNDLEVBQUVDLEVBQUUsQ0FBQyxTQUFTMjVDLEdBQUc1NUMsRUFBRUMsR0FBRyxJQUFJQSxJQUFJLElBQVksRUFBUEQsRUFBRXNqQyxNQUFRcmpDLEVBQUUsR0FBR0EsRUFBRThULEdBQVUsSUFBUSxXQUFmQSxLQUFLLE1BQXVCQSxHQUFHLFdBQVcsSUFBSTdULEVBQUVpTSxLQUFjLFFBQVZuTSxFQUFFcWxDLEdBQUdybEMsRUFBRUMsTUFBYzRVLEdBQUc3VSxFQUFFQyxFQUFFQyxHQUFHeTNDLEdBQUczM0MsRUFBRUUsR0FBRyxDQUFDLFNBQVN1eUMsR0FBR3p5QyxHQUFHLElBQUlDLEVBQUVELEVBQUV1eEIsY0FBY3J4QixFQUFFLEVBQUUsT0FBT0QsSUFBSUMsRUFBRUQsRUFBRW1qQyxXQUFXd1csR0FBRzU1QyxFQUFFRSxFQUFFLENBQ2paLFNBQVN3MUMsR0FBRzExQyxFQUFFQyxHQUFHLElBQUlDLEVBQUUsRUFBRSxPQUFPRixFQUFFd3JCLEtBQUssS0FBSyxHQUFHLElBQUl2cUIsRUFBRWpCLEVBQUVpeEIsVUFBYy92QixFQUFFbEIsRUFBRXV4QixjQUFjLE9BQU9yd0IsSUFBSWhCLEVBQUVnQixFQUFFa2lDLFdBQVcsTUFBTSxLQUFLLEdBQUduaUMsRUFBRWpCLEVBQUVpeEIsVUFBVSxNQUFNLFFBQVEsTUFBTXJ3QixNQUFNdVAsRUFBRSxNQUFPLE9BQU9sUCxHQUFHQSxFQUFFK3hCLE9BQU8veUIsR0FBRzI1QyxHQUFHNTVDLEVBQUVFLEVBQUUsQ0FRcUssU0FBU2c0QyxHQUFHbDRDLEVBQUVDLEdBQUcsT0FBT3NQLEdBQUd2UCxFQUFFQyxFQUFFLENBQ2paLFNBQVM0NUMsR0FBRzc1QyxFQUFFQyxFQUFFQyxFQUFFZSxHQUFHSCxLQUFLMHFCLElBQUl4ckIsRUFBRWMsS0FBSzBuQixJQUFJdG9CLEVBQUVZLEtBQUs0d0IsUUFBUTV3QixLQUFLMndCLE1BQU0zd0IsS0FBS3V3QixPQUFPdndCLEtBQUttd0IsVUFBVW53QixLQUFLaWQsS0FBS2pkLEtBQUtnaUMsWUFBWSxLQUFLaGlDLEtBQUs2bkMsTUFBTSxFQUFFN25DLEtBQUt1bkMsSUFBSSxLQUFLdm5DLEtBQUttaUMsYUFBYWhqQyxFQUFFYSxLQUFLNGpDLGFBQWE1akMsS0FBS3l3QixjQUFjendCLEtBQUswa0MsWUFBWTFrQyxLQUFLNGlDLGNBQWMsS0FBSzVpQyxLQUFLd2lDLEtBQUtyaUMsRUFBRUgsS0FBSzh4QyxhQUFhOXhDLEtBQUt3d0IsTUFBTSxFQUFFeHdCLEtBQUtpaUMsVUFBVSxLQUFLamlDLEtBQUswakMsV0FBVzFqQyxLQUFLOGpDLE1BQU0sRUFBRTlqQyxLQUFLc3dCLFVBQVUsSUFBSSxDQUFDLFNBQVN5UixHQUFHN2lDLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUcsT0FBTyxJQUFJNDRDLEdBQUc3NUMsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRSxDQUFDLFNBQVN1dkMsR0FBR3h3QyxHQUFpQixVQUFkQSxFQUFFQSxFQUFFSSxhQUF1QkosRUFBRTg1QyxpQkFBaUIsQ0FFcGQsU0FBU2xSLEdBQUc1b0MsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFb3hCLFVBQ3VCLE9BRGIsT0FBT2x4QixJQUFHQSxFQUFFMmlDLEdBQUc3aUMsRUFBRXdyQixJQUFJdnJCLEVBQUVELEVBQUV3b0IsSUFBSXhvQixFQUFFc2pDLE9BQVFSLFlBQVk5aUMsRUFBRThpQyxZQUFZNWlDLEVBQUU2ZCxLQUFLL2QsRUFBRStkLEtBQUs3ZCxFQUFFK3dCLFVBQVVqeEIsRUFBRWl4QixVQUFVL3dCLEVBQUVreEIsVUFBVXB4QixFQUFFQSxFQUFFb3hCLFVBQVVseEIsSUFBSUEsRUFBRStpQyxhQUFhaGpDLEVBQUVDLEVBQUU2ZCxLQUFLL2QsRUFBRStkLEtBQUs3ZCxFQUFFb3hCLE1BQU0sRUFBRXB4QixFQUFFMHlDLGFBQWEsRUFBRTF5QyxFQUFFNmlDLFVBQVUsTUFBTTdpQyxFQUFFb3hCLE1BQWMsU0FBUnR4QixFQUFFc3hCLE1BQWVweEIsRUFBRXNrQyxXQUFXeGtDLEVBQUV3a0MsV0FBV3RrQyxFQUFFMGtDLE1BQU01a0MsRUFBRTRrQyxNQUFNMWtDLEVBQUV1eEIsTUFBTXp4QixFQUFFeXhCLE1BQU12eEIsRUFBRXdqQyxjQUFjMWpDLEVBQUUwakMsY0FBY3hqQyxFQUFFcXhCLGNBQWN2eEIsRUFBRXV4QixjQUFjcnhCLEVBQUVzbEMsWUFBWXhsQyxFQUFFd2xDLFlBQVl2bEMsRUFBRUQsRUFBRTBrQyxhQUFheGtDLEVBQUV3a0MsYUFBYSxPQUFPemtDLEVBQUUsS0FBSyxDQUFDMmtDLE1BQU0za0MsRUFBRTJrQyxNQUFNRCxhQUFhMWtDLEVBQUUwa0MsY0FDL2V6a0MsRUFBRXd4QixRQUFRMXhCLEVBQUUweEIsUUFBUXh4QixFQUFFeW9DLE1BQU0zb0MsRUFBRTJvQyxNQUFNem9DLEVBQUVtb0MsSUFBSXJvQyxFQUFFcW9DLElBQVdub0MsQ0FBQyxDQUN4RCxTQUFTNG9DLEdBQUc5b0MsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRUMsRUFBRUssR0FBRyxJQUFJZCxFQUFFLEVBQU0sR0FBSlEsRUFBRWpCLEVBQUssbUJBQW9CQSxFQUFFd3dDLEdBQUd4d0MsS0FBS1MsRUFBRSxRQUFRLEdBQUcsaUJBQWtCVCxFQUFFUyxFQUFFLE9BQU9ULEVBQUUsT0FBT0EsR0FBRyxLQUFLNkUsRUFBRyxPQUFPb2tDLEdBQUcvb0MsRUFBRTZzQixTQUFTN3JCLEVBQUVLLEVBQUV0QixHQUFHLEtBQUsrRSxFQUFHdkUsRUFBRSxFQUFFUyxHQUFHLEVBQUUsTUFBTSxLQUFLZ0UsRUFBRyxPQUFPbEYsRUFBRTZpQyxHQUFHLEdBQUczaUMsRUFBRUQsRUFBSSxFQUFGaUIsSUFBTzRoQyxZQUFZNTlCLEVBQUdsRixFQUFFNGtDLE1BQU1yakMsRUFBRXZCLEVBQUUsS0FBSzBGLEVBQUcsT0FBTzFGLEVBQUU2aUMsR0FBRyxHQUFHM2lDLEVBQUVELEVBQUVpQixJQUFLNGhDLFlBQVlwOUIsRUFBRzFGLEVBQUU0a0MsTUFBTXJqQyxFQUFFdkIsRUFBRSxLQUFLMkYsRUFBRyxPQUFPM0YsRUFBRTZpQyxHQUFHLEdBQUczaUMsRUFBRUQsRUFBRWlCLElBQUs0aEMsWUFBWW45QixFQUFHM0YsRUFBRTRrQyxNQUFNcmpDLEVBQUV2QixFQUFFLEtBQUtpRyxFQUFHLE9BQU9rc0MsR0FBR2p5QyxFQUFFZ0IsRUFBRUssRUFBRXRCLEdBQUcsUUFBUSxHQUFHLGlCQUFrQkQsR0FBRyxPQUFPQSxFQUFFLE9BQU9BLEVBQUUyb0IsVUFBVSxLQUFLdGpCLEVBQUc1RSxFQUFFLEdBQUcsTUFBTVQsRUFBRSxLQUFLd0YsRUFBRy9FLEVBQUUsRUFBRSxNQUFNVCxFQUFFLEtBQUt5RixFQUFHaEYsRUFBRSxHQUNwZixNQUFNVCxFQUFFLEtBQUsrRixFQUFHdEYsRUFBRSxHQUFHLE1BQU1ULEVBQUUsS0FBS2dHLEVBQUd2RixFQUFFLEdBQUdRLEVBQUUsS0FBSyxNQUFNakIsRUFBRSxNQUFNWSxNQUFNdVAsRUFBRSxJQUFJLE1BQU1uUSxFQUFFQSxTQUFTQSxFQUFFLEtBQXVELE9BQWpEQyxFQUFFNGlDLEdBQUdwaUMsRUFBRVAsRUFBRUQsRUFBRWlCLElBQUs0aEMsWUFBWTlpQyxFQUFFQyxFQUFFOGQsS0FBSzljLEVBQUVoQixFQUFFMmtDLE1BQU1yakMsRUFBU3RCLENBQUMsQ0FBQyxTQUFTZ3BDLEdBQUdqcEMsRUFBRUMsRUFBRUMsRUFBRWUsR0FBMkIsT0FBeEJqQixFQUFFNmlDLEdBQUcsRUFBRTdpQyxFQUFFaUIsRUFBRWhCLElBQUsya0MsTUFBTTFrQyxFQUFTRixDQUFDLENBQUMsU0FBU215QyxHQUFHbnlDLEVBQUVDLEVBQUVDLEVBQUVlLEdBQXVFLE9BQXBFakIsRUFBRTZpQyxHQUFHLEdBQUc3aUMsRUFBRWlCLEVBQUVoQixJQUFLNmlDLFlBQVk3OEIsRUFBR2pHLEVBQUU0a0MsTUFBTTFrQyxFQUFFRixFQUFFaXhCLFVBQVUsQ0FBQzZrQixVQUFTLEdBQVc5MUMsQ0FBQyxDQUFDLFNBQVM2b0MsR0FBRzdvQyxFQUFFQyxFQUFFQyxHQUE4QixPQUEzQkYsRUFBRTZpQyxHQUFHLEVBQUU3aUMsRUFBRSxLQUFLQyxJQUFLMmtDLE1BQU0xa0MsRUFBU0YsQ0FBQyxDQUM1VyxTQUFTZ3BDLEdBQUdocEMsRUFBRUMsRUFBRUMsR0FBOEosT0FBM0pELEVBQUU0aUMsR0FBRyxFQUFFLE9BQU83aUMsRUFBRStzQixTQUFTL3NCLEVBQUUrc0IsU0FBUyxHQUFHL3NCLEVBQUV3b0IsSUFBSXZvQixJQUFLMmtDLE1BQU0xa0MsRUFBRUQsRUFBRWd4QixVQUFVLENBQUN3QyxjQUFjenpCLEVBQUV5ekIsY0FBY3NtQixnQkFBZ0IsS0FBS2hSLGVBQWUvb0MsRUFBRStvQyxnQkFBdUI5b0MsQ0FBQyxDQUN0TCxTQUFTKzVDLEdBQUdoNkMsRUFBRUMsRUFBRUMsRUFBRWUsRUFBRUMsR0FBR0osS0FBSzBxQixJQUFJdnJCLEVBQUVhLEtBQUsyeUIsY0FBY3p6QixFQUFFYyxLQUFLODNDLGFBQWE5M0MsS0FBS2d2QyxVQUFVaHZDLEtBQUs2d0IsUUFBUTd3QixLQUFLaTVDLGdCQUFnQixLQUFLajVDLEtBQUtpNEMsZUFBZSxFQUFFajRDLEtBQUs4MkMsYUFBYTkyQyxLQUFLMndDLGVBQWUzd0MsS0FBS2lrQyxRQUFRLEtBQUtqa0MsS0FBS2kzQyxpQkFBaUIsRUFBRWozQyxLQUFLZ3lCLFdBQVdwZSxHQUFHLEdBQUc1VCxLQUFLKzJDLGdCQUFnQm5qQyxJQUFJLEdBQUc1VCxLQUFLOHhCLGVBQWU5eEIsS0FBSyszQyxjQUFjLzNDLEtBQUt1NEMsaUJBQWlCdjRDLEtBQUtnM0MsYUFBYWgzQyxLQUFLNnhCLFlBQVk3eEIsS0FBSzR4QixlQUFlNXhCLEtBQUsyeEIsYUFBYSxFQUFFM3hCLEtBQUsreEIsY0FBY25lLEdBQUcsR0FBRzVULEtBQUtrdUMsaUJBQWlCL3RDLEVBQUVILEtBQUswNEMsbUJBQW1CdDRDLEVBQUVKLEtBQUttNUMsZ0NBQy9lLElBQUksQ0FBQyxTQUFTQyxHQUFHbDZDLEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEVBQUVLLEVBQUVkLEVBQUV5QyxFQUFFdU0sR0FBZ04sT0FBN016UCxFQUFFLElBQUlnNkMsR0FBR2g2QyxFQUFFQyxFQUFFQyxFQUFFZ0QsRUFBRXVNLEdBQUcsSUFBSXhQLEdBQUdBLEVBQUUsR0FBRSxJQUFLc0IsSUFBSXRCLEdBQUcsSUFBSUEsRUFBRSxFQUFFc0IsRUFBRXNoQyxHQUFHLEVBQUUsS0FBSyxLQUFLNWlDLEdBQUdELEVBQUUyeEIsUUFBUXB3QixFQUFFQSxFQUFFMHZCLFVBQVVqeEIsRUFBRXVCLEVBQUVnd0IsY0FBYyxDQUFDcUssUUFBUTM2QixFQUFFdXlCLGFBQWF0ekIsRUFBRWk2QyxNQUFNLEtBQUtySixZQUFZLEtBQUtzSiwwQkFBMEIsTUFBTTdVLEdBQUdoa0MsR0FBVXZCLENBQUMsQ0FDelAsU0FBU3E2QyxHQUFHcjZDLEdBQUcsSUFBSUEsRUFBRSxPQUFPeWdDLEdBQXVCemdDLEVBQUUsQ0FBQyxHQUFHMk8sR0FBMUIzTyxFQUFFQSxFQUFFZ25DLG1CQUE4QmhuQyxHQUFHLElBQUlBLEVBQUV3ckIsSUFBSSxNQUFNNXFCLE1BQU11UCxFQUFFLE1BQU0sSUFBSWxRLEVBQUVELEVBQUUsRUFBRSxDQUFDLE9BQU9DLEVBQUV1ckIsS0FBSyxLQUFLLEVBQUV2ckIsRUFBRUEsRUFBRWd4QixVQUFVOFQsUUFBUSxNQUFNL2tDLEVBQUUsS0FBSyxFQUFFLEdBQUcrZ0MsR0FBRzlnQyxFQUFFOGQsTUFBTSxDQUFDOWQsRUFBRUEsRUFBRWd4QixVQUFVb1EsMENBQTBDLE1BQU1yaEMsQ0FBQyxFQUFFQyxFQUFFQSxFQUFFb3hCLE1BQU0sT0FBTyxPQUFPcHhCLEdBQUcsTUFBTVcsTUFBTXVQLEVBQUUsS0FBTSxDQUFDLEdBQUcsSUFBSW5RLEVBQUV3ckIsSUFBSSxDQUFDLElBQUl0ckIsRUFBRUYsRUFBRStkLEtBQUssR0FBR2dqQixHQUFHN2dDLEdBQUcsT0FBT2doQyxHQUFHbGhDLEVBQUVFLEVBQUVELEVBQUUsQ0FBQyxPQUFPQSxDQUFDLENBQ3BXLFNBQVNxNkMsR0FBR3Q2QyxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxFQUFFSyxFQUFFZCxFQUFFeUMsRUFBRXVNLEdBQXdLLE9BQXJLelAsRUFBRWs2QyxHQUFHaDZDLEVBQUVlLEdBQUUsRUFBR2pCLEVBQUVrQixFQUFFSyxFQUFFZCxFQUFFeUMsRUFBRXVNLElBQUtzMUIsUUFBUXNWLEdBQUcsTUFBTW42QyxFQUFFRixFQUFFMnhCLFNBQXNCcHdCLEVBQUV5a0MsR0FBaEIva0MsRUFBRWtMLEtBQUlqTCxFQUFFZ21DLEdBQUdobkMsS0FBZXNQLFNBQVMsTUFBU3ZQLEVBQVlBLEVBQUUsS0FBS21tQyxHQUFHbG1DLEVBQUVxQixFQUFFTCxHQUFHbEIsRUFBRTJ4QixRQUFRaVQsTUFBTTFqQyxFQUFFMlQsR0FBRzdVLEVBQUVrQixFQUFFRCxHQUFHMDJDLEdBQUczM0MsRUFBRWlCLEdBQVVqQixDQUFDLENBQUMsU0FBU3U2QyxHQUFHdjZDLEVBQUVDLEVBQUVDLEVBQUVlLEdBQUcsSUFBSUMsRUFBRWpCLEVBQUUweEIsUUFBUXB3QixFQUFFNEssS0FBSTFMLEVBQUV5bUMsR0FBR2htQyxHQUFzTCxPQUFuTGhCLEVBQUVtNkMsR0FBR242QyxHQUFHLE9BQU9ELEVBQUU4a0MsUUFBUTlrQyxFQUFFOGtDLFFBQVE3a0MsRUFBRUQsRUFBRXd4QyxlQUFldnhDLEdBQUVELEVBQUUrbEMsR0FBR3prQyxFQUFFZCxJQUFLMGxDLFFBQVEsQ0FBQ3ZLLFFBQVE1N0IsR0FBdUIsUUFBcEJpQixPQUFFLElBQVNBLEVBQUUsS0FBS0EsS0FBYWhCLEVBQUV1UCxTQUFTdk8sR0FBZSxRQUFaakIsRUFBRW9tQyxHQUFHbGxDLEVBQUVqQixFQUFFUSxNQUFjMG1DLEdBQUdubkMsRUFBRWtCLEVBQUVULEVBQUVjLEdBQUc4a0MsR0FBR3JtQyxFQUFFa0IsRUFBRVQsSUFBV0EsQ0FBQyxDQUMzYixTQUFTa2MsR0FBRzNjLEdBQWUsT0FBWkEsRUFBRUEsRUFBRTJ4QixTQUFjRixPQUF5Qnp4QixFQUFFeXhCLE1BQU1qRyxJQUFvRHhyQixFQUFFeXhCLE1BQU1SLFdBQWhGLElBQTBGLENBQUMsU0FBU3VwQixHQUFHeDZDLEVBQUVDLEdBQXFCLEdBQUcsUUFBckJELEVBQUVBLEVBQUV1eEIsZ0JBQTJCLE9BQU92eEIsRUFBRXd4QixXQUFXLENBQUMsSUFBSXR4QixFQUFFRixFQUFFb2pDLFVBQVVwakMsRUFBRW9qQyxVQUFVLElBQUlsakMsR0FBR0EsRUFBRUQsRUFBRUMsRUFBRUQsQ0FBQyxDQUFDLENBQUMsU0FBU3c2QyxHQUFHejZDLEVBQUVDLEdBQUd1NkMsR0FBR3g2QyxFQUFFQyxJQUFJRCxFQUFFQSxFQUFFb3hCLFlBQVlvcEIsR0FBR3g2QyxFQUFFQyxFQUFFLENBbkI3U3EyQyxHQUFHLFNBQVN0MkMsRUFBRUMsRUFBRUMsR0FBRyxHQUFHLE9BQU9GLEVBQUUsR0FBR0EsRUFBRTBqQyxnQkFBZ0J6akMsRUFBRWdqQyxjQUFjdkMsR0FBRy9PLFFBQVFrVCxJQUFHLE1BQU8sQ0FBQyxHQUFHLElBQUs3a0MsRUFBRTRrQyxNQUFNMWtDLElBQUksSUFBYSxJQUFSRCxFQUFFcXhCLE9BQVcsT0FBT3VULElBQUcsRUF6RTFJLFNBQVk3a0MsRUFBRUMsRUFBRUMsR0FBRyxPQUFPRCxFQUFFdXJCLEtBQUssS0FBSyxFQUFFZ21CLEdBQUd2eEMsR0FBRzJqQyxLQUFLLE1BQU0sS0FBSyxFQUFFK0YsR0FBRzFwQyxHQUFHLE1BQU0sS0FBSyxFQUFFOGdDLEdBQUc5Z0MsRUFBRThkLE9BQU9xakIsR0FBR25oQyxHQUFHLE1BQU0sS0FBSyxFQUFFd3BDLEdBQUd4cEMsRUFBRUEsRUFBRWd4QixVQUFVd0MsZUFBZSxNQUFNLEtBQUssR0FBRyxJQUFJeHlCLEVBQUVoQixFQUFFOGQsS0FBSzBOLFNBQVN2cUIsRUFBRWpCLEVBQUV5akMsY0FBY3JqQyxNQUFNa1EsR0FBRXl6QixHQUFHL2lDLEVBQUVxakMsZUFBZXJqQyxFQUFFcWpDLGNBQWNwakMsRUFBRSxNQUFNLEtBQUssR0FBcUIsR0FBRyxRQUFyQkQsRUFBRWhCLEVBQUVzeEIsZUFBMkIsT0FBRyxPQUFPdHdCLEVBQUV1d0IsWUFBa0JqaEIsR0FBRXpLLEdBQVksRUFBVkEsR0FBRTZyQixTQUFXMXhCLEVBQUVxeEIsT0FBTyxJQUFJLE1BQVEsSUFBS3B4QixFQUFFRCxFQUFFd3hCLE1BQU0rUyxZQUFtQnlOLEdBQUdqeUMsRUFBRUMsRUFBRUMsSUFBR3FRLEdBQUV6SyxHQUFZLEVBQVZBLEdBQUU2ckIsU0FBOEIsUUFBbkIzeEIsRUFBRXN3QyxHQUFHdHdDLEVBQUVDLEVBQUVDLElBQW1CRixFQUFFMHhCLFFBQVEsTUFBS25oQixHQUFFekssR0FBWSxFQUFWQSxHQUFFNnJCLFNBQVcsTUFBTSxLQUFLLEdBQzdkLEdBRGdlMXdCLEVBQUUsSUFBS2YsRUFDcmZELEVBQUV1a0MsWUFBZSxJQUFhLElBQVJ4a0MsRUFBRXN4QixPQUFXLENBQUMsR0FBR3J3QixFQUFFLE9BQU9veUMsR0FBR3J6QyxFQUFFQyxFQUFFQyxHQUFHRCxFQUFFcXhCLE9BQU8sR0FBRyxDQUE2RixHQUExRSxRQUFsQnB3QixFQUFFakIsRUFBRXN4QixpQkFBeUJyd0IsRUFBRTh4QyxVQUFVLEtBQUs5eEMsRUFBRWl5QyxLQUFLLEtBQUtqeUMsRUFBRW1yQyxXQUFXLE1BQU05N0IsR0FBRXpLLEdBQUVBLEdBQUU2ckIsU0FBWTF3QixFQUFFLE1BQVcsT0FBTyxLQUFLLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBT2hCLEVBQUUya0MsTUFBTSxFQUFFK0wsR0FBRzN3QyxFQUFFQyxFQUFFQyxHQUFHLE9BQU9vd0MsR0FBR3R3QyxFQUFFQyxFQUFFQyxFQUFFLENBd0U3R3c2QyxDQUFHMTZDLEVBQUVDLEVBQUVDLEdBQUcya0MsR0FBRyxJQUFhLE9BQVI3a0MsRUFBRXN4QixNQUFtQixNQUFNdVQsSUFBRyxFQUFHeDdCLElBQUcsSUFBYSxRQUFScEosRUFBRXF4QixRQUFnQmdSLEdBQUdyaUMsRUFBRThoQyxHQUFHOWhDLEVBQUUwb0MsT0FBaUIsT0FBVjFvQyxFQUFFMmtDLE1BQU0sRUFBUzNrQyxFQUFFdXJCLEtBQUssS0FBSyxFQUFFLElBQUl2cUIsRUFBRWhCLEVBQUU4ZCxLQUFLb3pCLEdBQUdueEMsRUFBRUMsR0FBR0QsRUFBRUMsRUFBRWdqQyxhQUFhLElBQUkvaEMsRUFBRTAvQixHQUFHM2dDLEVBQUVtRixHQUFFdXNCLFNBQVM4UyxHQUFHeGtDLEVBQUVDLEdBQUdnQixFQUFFeXBDLEdBQUcsS0FBSzFxQyxFQUFFZ0IsRUFBRWpCLEVBQUVrQixFQUFFaEIsR0FBRyxJQUFJcUIsRUFBRXlwQyxLQUN2SSxPQUQ0SS9xQyxFQUFFcXhCLE9BQU8sRUFBRSxpQkFBa0Jwd0IsR0FBRyxPQUFPQSxHQUFHLG1CQUFvQkEsRUFBRTJlLGFBQVEsSUFBUzNlLEVBQUV5bkIsVUFBVTFvQixFQUFFdXJCLElBQUksRUFBRXZyQixFQUFFc3hCLGNBQWMsS0FBS3R4QixFQUFFdWxDLFlBQzFlLEtBQUt6RSxHQUFHOS9CLElBQUlNLEdBQUUsRUFBRzYvQixHQUFHbmhDLElBQUlzQixHQUFFLEVBQUd0QixFQUFFc3hCLGNBQWMsT0FBT3J3QixFQUFFK1MsWUFBTyxJQUFTL1MsRUFBRStTLE1BQU0vUyxFQUFFK1MsTUFBTSxLQUFLc3hCLEdBQUd0bEMsR0FBR2lCLEVBQUV3bUMsUUFBUVosR0FBRzdtQyxFQUFFZ3hCLFVBQVUvdkIsRUFBRUEsRUFBRThsQyxnQkFBZ0IvbUMsRUFBRTZuQyxHQUFHN25DLEVBQUVnQixFQUFFakIsRUFBRUUsR0FBR0QsRUFBRXN4QyxHQUFHLEtBQUt0eEMsRUFBRWdCLEdBQUUsRUFBR00sRUFBRXJCLEtBQUtELEVBQUV1ckIsSUFBSSxFQUFFbmlCLElBQUc5SCxHQUFHZ2hDLEdBQUd0aUMsR0FBR213QyxHQUFHLEtBQUtud0MsRUFBRWlCLEVBQUVoQixHQUFHRCxFQUFFQSxFQUFFd3hCLE9BQWN4eEIsRUFBRSxLQUFLLEdBQUdnQixFQUFFaEIsRUFBRTZpQyxZQUFZOWlDLEVBQUUsQ0FBcUYsT0FBcEZteEMsR0FBR254QyxFQUFFQyxHQUFHRCxFQUFFQyxFQUFFZ2pDLGFBQXVCaGlDLEdBQVZDLEVBQUVELEVBQUUwcUIsT0FBVTFxQixFQUFFeXFCLFVBQVV6ckIsRUFBRThkLEtBQUs5YyxFQUFFQyxFQUFFakIsRUFBRXVyQixJQVF0VSxTQUFZeHJCLEdBQUcsR0FBRyxtQkFBb0JBLEVBQUUsT0FBT3d3QyxHQUFHeHdDLEdBQUcsRUFBRSxFQUFFLEdBQUcsTUFBU0EsRUFBWSxDQUFjLElBQWJBLEVBQUVBLEVBQUUyb0IsWUFBZ0JsakIsRUFBRyxPQUFPLEdBQUcsR0FBR3pGLElBQUkrRixFQUFHLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQVIyTDQwQyxDQUFHMTVDLEdBQUdqQixFQUFFK2pDLEdBQUc5aUMsRUFBRWpCLEdBQVVrQixHQUFHLEtBQUssRUFBRWpCLEVBQUV5d0MsR0FBRyxLQUFLendDLEVBQUVnQixFQUFFakIsRUFBRUUsR0FBRyxNQUFNRixFQUFFLEtBQUssRUFBRUMsRUFBRWl4QyxHQUFHLEtBQUtqeEMsRUFBRWdCLEVBQUVqQixFQUFFRSxHQUFHLE1BQU1GLEVBQUUsS0FBSyxHQUFHQyxFQUFFb3dDLEdBQUcsS0FBS3B3QyxFQUFFZ0IsRUFBRWpCLEVBQUVFLEdBQUcsTUFBTUYsRUFBRSxLQUFLLEdBQUdDLEVBQUVzd0MsR0FBRyxLQUFLdHdDLEVBQUVnQixFQUFFOGlDLEdBQUc5aUMsRUFBRThjLEtBQUsvZCxHQUFHRSxHQUFHLE1BQU1GLEVBQUUsTUFBTVksTUFBTXVQLEVBQUUsSUFDdmdCbFAsRUFBRSxJQUFLLENBQUMsT0FBT2hCLEVBQUUsS0FBSyxFQUFFLE9BQU9nQixFQUFFaEIsRUFBRThkLEtBQUs3YyxFQUFFakIsRUFBRWdqQyxhQUEyQ3lOLEdBQUcxd0MsRUFBRUMsRUFBRWdCLEVBQXJDQyxFQUFFakIsRUFBRTZpQyxjQUFjN2hDLEVBQUVDLEVBQUU2aUMsR0FBRzlpQyxFQUFFQyxHQUFjaEIsR0FBRyxLQUFLLEVBQUUsT0FBT2UsRUFBRWhCLEVBQUU4ZCxLQUFLN2MsRUFBRWpCLEVBQUVnakMsYUFBMkNpTyxHQUFHbHhDLEVBQUVDLEVBQUVnQixFQUFyQ0MsRUFBRWpCLEVBQUU2aUMsY0FBYzdoQyxFQUFFQyxFQUFFNmlDLEdBQUc5aUMsRUFBRUMsR0FBY2hCLEdBQUcsS0FBSyxFQUFFRixFQUFFLENBQU8sR0FBTnd4QyxHQUFHdnhDLEdBQU0sT0FBT0QsRUFBRSxNQUFNWSxNQUFNdVAsRUFBRSxNQUFNbFAsRUFBRWhCLEVBQUVnakMsYUFBK0IvaEMsR0FBbEJLLEVBQUV0QixFQUFFc3hCLGVBQWtCcUssUUFBUW1LLEdBQUcvbEMsRUFBRUMsR0FBR3NtQyxHQUFHdG1DLEVBQUVnQixFQUFFLEtBQUtmLEdBQUcsSUFBSU8sRUFBRVIsRUFBRXN4QixjQUEwQixHQUFadHdCLEVBQUVSLEVBQUVtN0IsUUFBV3I2QixFQUFFaXlCLGFBQWEsSUFBR2p5QixFQUFFLENBQUNxNkIsUUFBUTM2QixFQUFFdXlCLGNBQWEsRUFBRzJtQixNQUFNMTVDLEVBQUUwNUMsTUFBTUMsMEJBQTBCMzVDLEVBQUUyNUMsMEJBQTBCdEosWUFBWXJ3QyxFQUFFcXdDLGFBQWE3d0MsRUFBRXVsQyxZQUFZQyxVQUNoZmxrQyxFQUFFdEIsRUFBRXN4QixjQUFjaHdCLEVBQVUsSUFBUnRCLEVBQUVxeEIsTUFBVSxDQUF1QnJ4QixFQUFFeXhDLEdBQUcxeEMsRUFBRUMsRUFBRWdCLEVBQUVmLEVBQWpDZ0IsRUFBRSt0QyxHQUFHcnVDLE1BQU11UCxFQUFFLE1BQU1sUSxJQUFtQixNQUFNRCxDQUFDLENBQU0sR0FBR2lCLElBQUlDLEVBQUUsQ0FBdUJqQixFQUFFeXhDLEdBQUcxeEMsRUFBRUMsRUFBRWdCLEVBQUVmLEVBQWpDZ0IsRUFBRSt0QyxHQUFHcnVDLE1BQU11UCxFQUFFLE1BQU1sUSxJQUFtQixNQUFNRCxDQUFDLENBQU0sSUFBSTBpQyxHQUFHM0MsR0FBRzkvQixFQUFFZ3hCLFVBQVV3QyxjQUFjNXNCLFlBQVk0N0IsR0FBR3hpQyxFQUFFb0osSUFBRSxFQUFHczVCLEdBQUcsS0FBS3ppQyxFQUFFaXBDLEdBQUdscEMsRUFBRSxLQUFLZ0IsRUFBRWYsR0FBR0QsRUFBRXd4QixNQUFNdnhCLEVBQUVBLEdBQUdBLEVBQUVveEIsT0FBZSxFQUFUcHhCLEVBQUVveEIsTUFBUyxLQUFLcHhCLEVBQUVBLEVBQUV3eEIsT0FBTyxLQUFLLENBQU0sR0FBTGtTLEtBQVEzaUMsSUFBSUMsRUFBRSxDQUFDakIsRUFBRXF3QyxHQUFHdHdDLEVBQUVDLEVBQUVDLEdBQUcsTUFBTUYsQ0FBQyxDQUFDb3dDLEdBQUdwd0MsRUFBRUMsRUFBRWdCLEVBQUVmLEVBQUUsQ0FBQ0QsRUFBRUEsRUFBRXd4QixLQUFLLENBQUMsT0FBT3h4QixFQUFFLEtBQUssRUFBRSxPQUFPMHBDLEdBQUcxcEMsR0FBRyxPQUFPRCxHQUFHdWpDLEdBQUd0akMsR0FBR2dCLEVBQUVoQixFQUFFOGQsS0FBSzdjLEVBQUVqQixFQUFFZ2pDLGFBQWExaEMsRUFBRSxPQUFPdkIsRUFBRUEsRUFBRTBqQyxjQUFjLEtBQUtqakMsRUFBRVMsRUFBRTZyQixTQUFTbVMsR0FBR2orQixFQUFFQyxHQUFHVCxFQUFFLEtBQUssT0FBT2MsR0FBRzI5QixHQUFHaitCLEVBQUVNLEtBQUt0QixFQUFFcXhCLE9BQU8sSUFDbmYyZixHQUFHanhDLEVBQUVDLEdBQUdtd0MsR0FBR3B3QyxFQUFFQyxFQUFFUSxFQUFFUCxHQUFHRCxFQUFFd3hCLE1BQU0sS0FBSyxFQUFFLE9BQU8sT0FBT3p4QixHQUFHdWpDLEdBQUd0akMsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPZ3lDLEdBQUdqeUMsRUFBRUMsRUFBRUMsR0FBRyxLQUFLLEVBQUUsT0FBT3VwQyxHQUFHeHBDLEVBQUVBLEVBQUVneEIsVUFBVXdDLGVBQWV4eUIsRUFBRWhCLEVBQUVnakMsYUFBYSxPQUFPampDLEVBQUVDLEVBQUV3eEIsTUFBTXlYLEdBQUdqcEMsRUFBRSxLQUFLZ0IsRUFBRWYsR0FBR2t3QyxHQUFHcHdDLEVBQUVDLEVBQUVnQixFQUFFZixHQUFHRCxFQUFFd3hCLE1BQU0sS0FBSyxHQUFHLE9BQU94d0IsRUFBRWhCLEVBQUU4ZCxLQUFLN2MsRUFBRWpCLEVBQUVnakMsYUFBMkNvTixHQUFHcndDLEVBQUVDLEVBQUVnQixFQUFyQ0MsRUFBRWpCLEVBQUU2aUMsY0FBYzdoQyxFQUFFQyxFQUFFNmlDLEdBQUc5aUMsRUFBRUMsR0FBY2hCLEdBQUcsS0FBSyxFQUFFLE9BQU9rd0MsR0FBR3B3QyxFQUFFQyxFQUFFQSxFQUFFZ2pDLGFBQWEvaUMsR0FBR0QsRUFBRXd4QixNQUFNLEtBQUssRUFBbUQsS0FBSyxHQUFHLE9BQU8yZSxHQUFHcHdDLEVBQUVDLEVBQUVBLEVBQUVnakMsYUFBYWxXLFNBQVM3c0IsR0FBR0QsRUFBRXd4QixNQUFNLEtBQUssR0FBR3p4QixFQUFFLENBQ3haLEdBRHlaaUIsRUFBRWhCLEVBQUU4ZCxLQUFLME4sU0FBU3ZxQixFQUFFakIsRUFBRWdqQyxhQUFhMWhDLEVBQUV0QixFQUFFeWpDLGNBQ2xmampDLEVBQUVTLEVBQUViLE1BQU1rUSxHQUFFeXpCLEdBQUcvaUMsRUFBRXFqQyxlQUFlcmpDLEVBQUVxakMsY0FBYzdqQyxFQUFLLE9BQU9jLEVBQUUsR0FBR3E0QixHQUFHcjRCLEVBQUVsQixNQUFNSSxJQUFJLEdBQUdjLEVBQUV3ckIsV0FBVzdyQixFQUFFNnJCLFdBQVcyVCxHQUFHL08sUUFBUSxDQUFDMXhCLEVBQUVxd0MsR0FBR3R3QyxFQUFFQyxFQUFFQyxHQUFHLE1BQU1GLENBQUMsT0FBTyxJQUFjLFFBQVZ1QixFQUFFdEIsRUFBRXd4QixTQUFpQmx3QixFQUFFOHZCLE9BQU9weEIsR0FBRyxPQUFPc0IsR0FBRyxDQUFDLElBQUkyQixFQUFFM0IsRUFBRW1qQyxhQUFhLEdBQUcsT0FBT3hoQyxFQUFFLENBQUN6QyxFQUFFYyxFQUFFa3dCLE1BQU0sSUFBSSxJQUFJaGlCLEVBQUV2TSxFQUFFeWhDLGFBQWEsT0FBT2wxQixHQUFHLENBQUMsR0FBR0EsRUFBRXMxQixVQUFVOWpDLEVBQUUsQ0FBQyxHQUFHLElBQUlNLEVBQUVpcUIsSUFBSSxFQUFDL2IsRUFBRXUyQixJQUFJLEVBQUU5bEMsR0FBR0EsSUFBS3NyQixJQUFJLEVBQUUsSUFBSTViLEVBQUVyTyxFQUFFaWtDLFlBQVksR0FBRyxPQUFPNTFCLEVBQUUsQ0FBWSxJQUFJM04sR0FBZjJOLEVBQUVBLEVBQUVnMkIsUUFBZUMsUUFBUSxPQUFPNWpDLEVBQUV3TixFQUFFNU4sS0FBSzROLEdBQUdBLEVBQUU1TixLQUFLSSxFQUFFSixLQUFLSSxFQUFFSixLQUFLNE4sR0FBR0csRUFBRWkyQixRQUFRcDJCLENBQUMsQ0FBQyxDQUFDbE8sRUFBRXFqQyxPQUFPMWtDLEVBQWdCLFFBQWR1UCxFQUFFbE8sRUFBRTZ2QixhQUFxQjNoQixFQUFFbTFCLE9BQU8xa0MsR0FBR3FrQyxHQUFHaGpDLEVBQUU4dkIsT0FDbGZueEIsRUFBRUQsR0FBR2lELEVBQUUwaEMsT0FBTzFrQyxFQUFFLEtBQUssQ0FBQ3VQLEVBQUVBLEVBQUU1TixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUtOLEVBQUVpcUIsSUFBSS9xQixFQUFFYyxFQUFFd2MsT0FBTzlkLEVBQUU4ZCxLQUFLLEtBQUt4YyxFQUFFa3dCLFdBQVcsR0FBRyxLQUFLbHdCLEVBQUVpcUIsSUFBSSxDQUFZLEdBQUcsUUFBZC9xQixFQUFFYyxFQUFFOHZCLFFBQW1CLE1BQU16d0IsTUFBTXVQLEVBQUUsTUFBTTFQLEVBQUVta0MsT0FBTzFrQyxFQUFnQixRQUFkZ0QsRUFBRXpDLEVBQUUyd0IsYUFBcUJsdUIsRUFBRTBoQyxPQUFPMWtDLEdBQUdxa0MsR0FBRzlqQyxFQUFFUCxFQUFFRCxHQUFHUSxFQUFFYyxFQUFFbXdCLE9BQU8sTUFBTWp4QixFQUFFYyxFQUFFa3dCLE1BQU0sR0FBRyxPQUFPaHhCLEVBQUVBLEVBQUU0d0IsT0FBTzl2QixPQUFPLElBQUlkLEVBQUVjLEVBQUUsT0FBT2QsR0FBRyxDQUFDLEdBQUdBLElBQUlSLEVBQUUsQ0FBQ1EsRUFBRSxLQUFLLEtBQUssQ0FBYSxHQUFHLFFBQWZjLEVBQUVkLEVBQUVpeEIsU0FBb0IsQ0FBQ253QixFQUFFOHZCLE9BQU81d0IsRUFBRTR3QixPQUFPNXdCLEVBQUVjLEVBQUUsS0FBSyxDQUFDZCxFQUFFQSxFQUFFNHdCLE1BQU0sQ0FBQzl2QixFQUFFZCxDQUFDLENBQUMydkMsR0FBR3B3QyxFQUFFQyxFQUFFaUIsRUFBRTZyQixTQUFTN3NCLEdBQUdELEVBQUVBLEVBQUV3eEIsS0FBSyxDQUFDLE9BQU94eEIsRUFBRSxLQUFLLEVBQUUsT0FBT2lCLEVBQUVqQixFQUFFOGQsS0FBSzljLEVBQUVoQixFQUFFZ2pDLGFBQWFsVyxTQUFTMFgsR0FBR3hrQyxFQUFFQyxHQUFXZSxFQUFFQSxFQUFWQyxFQUFFNGpDLEdBQUc1akMsSUFBVWpCLEVBQUVxeEIsT0FBTyxFQUFFOGUsR0FBR3B3QyxFQUFFQyxFQUFFZ0IsRUFBRWYsR0FDcGZELEVBQUV3eEIsTUFBTSxLQUFLLEdBQUcsT0FBZ0J2d0IsRUFBRTZpQyxHQUFYOWlDLEVBQUVoQixFQUFFOGQsS0FBWTlkLEVBQUVnakMsY0FBNkJzTixHQUFHdndDLEVBQUVDLEVBQUVnQixFQUF0QkMsRUFBRTZpQyxHQUFHOWlDLEVBQUU4YyxLQUFLN2MsR0FBY2hCLEdBQUcsS0FBSyxHQUFHLE9BQU91d0MsR0FBR3p3QyxFQUFFQyxFQUFFQSxFQUFFOGQsS0FBSzlkLEVBQUVnakMsYUFBYS9pQyxHQUFHLEtBQUssR0FBRyxPQUFPZSxFQUFFaEIsRUFBRThkLEtBQUs3YyxFQUFFakIsRUFBRWdqQyxhQUFhL2hDLEVBQUVqQixFQUFFNmlDLGNBQWM3aEMsRUFBRUMsRUFBRTZpQyxHQUFHOWlDLEVBQUVDLEdBQUdpd0MsR0FBR254QyxFQUFFQyxHQUFHQSxFQUFFdXJCLElBQUksRUFBRXVWLEdBQUc5L0IsSUFBSWpCLEdBQUUsRUFBR29oQyxHQUFHbmhDLElBQUlELEdBQUUsRUFBR3lrQyxHQUFHeGtDLEVBQUVDLEdBQUd1bkMsR0FBR3huQyxFQUFFZ0IsRUFBRUMsR0FBRzRtQyxHQUFHN25DLEVBQUVnQixFQUFFQyxFQUFFaEIsR0FBR3F4QyxHQUFHLEtBQUt0eEMsRUFBRWdCLEdBQUUsRUFBR2pCLEVBQUVFLEdBQUcsS0FBSyxHQUFHLE9BQU9tekMsR0FBR3J6QyxFQUFFQyxFQUFFQyxHQUFHLEtBQUssR0FBRyxPQUFPeXdDLEdBQUczd0MsRUFBRUMsRUFBRUMsR0FBRyxNQUFNVSxNQUFNdVAsRUFBRSxJQUFJbFEsRUFBRXVyQixLQUFNLEVBWXhDLElBQUlvdkIsR0FBRyxtQkFBb0JDLFlBQVlBLFlBQVksU0FBUzc2QyxHQUFHMEQsUUFBUUMsTUFBTTNELEVBQUUsRUFBRSxTQUFTODZDLEdBQUc5NkMsR0FBR2MsS0FBS2k2QyxjQUFjLzZDLENBQUMsQ0FDakksU0FBU2c3QyxHQUFHaDdDLEdBQUdjLEtBQUtpNkMsY0FBYy82QyxDQUFDLENBQzVKLFNBQVNpN0MsR0FBR2o3QyxHQUFHLFNBQVNBLEdBQUcsSUFBSUEsRUFBRWlTLFVBQVUsSUFBSWpTLEVBQUVpUyxVQUFVLEtBQUtqUyxFQUFFaVMsU0FBUyxDQUFDLFNBQVNpcEMsR0FBR2w3QyxHQUFHLFNBQVNBLEdBQUcsSUFBSUEsRUFBRWlTLFVBQVUsSUFBSWpTLEVBQUVpUyxVQUFVLEtBQUtqUyxFQUFFaVMsV0FBVyxJQUFJalMsRUFBRWlTLFVBQVUsaUNBQWlDalMsRUFBRWtTLFdBQVcsQ0FBQyxTQUFTaXBDLEtBQUssQ0FFeGEsU0FBU0MsR0FBR3A3QyxFQUFFQyxFQUFFQyxFQUFFZSxFQUFFQyxHQUFHLElBQUlLLEVBQUVyQixFQUFFZzFDLG9CQUFvQixHQUFHM3pDLEVBQUUsQ0FBQyxJQUFJZCxFQUFFYyxFQUFFLEdBQUcsbUJBQW9CTCxFQUFFLENBQUMsSUFBSWdDLEVBQUVoQyxFQUFFQSxFQUFFLFdBQVcsSUFBSWxCLEVBQUUyYyxHQUFHbGMsR0FBR3lDLEVBQUViLEtBQUtyQyxFQUFFLENBQUMsQ0FBQ3U2QyxHQUFHdDZDLEVBQUVRLEVBQUVULEVBQUVrQixFQUFFLE1BQU1ULEVBRHhKLFNBQVlULEVBQUVDLEVBQUVDLEVBQUVlLEVBQUVDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLEdBQUcsbUJBQW9CRCxFQUFFLENBQUMsSUFBSU0sRUFBRU4sRUFBRUEsRUFBRSxXQUFXLElBQUlqQixFQUFFMmMsR0FBR2xjLEdBQUdjLEVBQUVjLEtBQUtyQyxFQUFFLENBQUMsQ0FBQyxJQUFJUyxFQUFFNjVDLEdBQUdyNkMsRUFBRWdCLEVBQUVqQixFQUFFLEVBQUUsTUFBSyxFQUFHLEVBQUcsR0FBR203QyxJQUFtRixPQUEvRW43QyxFQUFFazFDLG9CQUFvQnowQyxFQUFFVCxFQUFFdStCLElBQUk5OUIsRUFBRWt4QixRQUFRd00sR0FBRyxJQUFJbitCLEVBQUVpUyxTQUFTalMsRUFBRXFLLFdBQVdySyxHQUFHaTVDLEtBQVl4NEMsQ0FBQyxDQUFDLEtBQUtTLEVBQUVsQixFQUFFbUssV0FBV25LLEVBQUVvSyxZQUFZbEosR0FBRyxHQUFHLG1CQUFvQkQsRUFBRSxDQUFDLElBQUlpQyxFQUFFakMsRUFBRUEsRUFBRSxXQUFXLElBQUlqQixFQUFFMmMsR0FBR2xOLEdBQUd2TSxFQUFFYixLQUFLckMsRUFBRSxDQUFDLENBQUMsSUFBSXlQLEVBQUV5cUMsR0FBR2w2QyxFQUFFLEdBQUUsRUFBRyxLQUFLLEdBQUssRUFBRyxFQUFHLEdBQUdtN0MsSUFBMEcsT0FBdEduN0MsRUFBRWsxQyxvQkFBb0J6bEMsRUFBRXpQLEVBQUV1K0IsSUFBSTl1QixFQUFFa2lCLFFBQVF3TSxHQUFHLElBQUluK0IsRUFBRWlTLFNBQVNqUyxFQUFFcUssV0FBV3JLLEdBQUdpNUMsSUFBRyxXQUFXc0IsR0FBR3Q2QyxFQUFFd1AsRUFBRXZQLEVBQUVlLEVBQUUsSUFBVXdPLENBQUMsQ0FDcFU0ckMsQ0FBR243QyxFQUFFRCxFQUFFRCxFQUFFa0IsRUFBRUQsR0FBRyxPQUFPMGIsR0FBR2xjLEVBQUUsQ0FIcEx1NkMsR0FBRzU2QyxVQUFVeWYsT0FBT2k3QixHQUFHMTZDLFVBQVV5ZixPQUFPLFNBQVM3ZixHQUFHLElBQUlDLEVBQUVhLEtBQUtpNkMsY0FBYyxHQUFHLE9BQU85NkMsRUFBRSxNQUFNVyxNQUFNdVAsRUFBRSxNQUFNb3FDLEdBQUd2NkMsRUFBRUMsRUFBRSxLQUFLLEtBQUssRUFBRSs2QyxHQUFHNTZDLFVBQVVrN0MsUUFBUVIsR0FBRzE2QyxVQUFVazdDLFFBQVEsV0FBVyxJQUFJdDdDLEVBQUVjLEtBQUtpNkMsY0FBYyxHQUFHLE9BQU8vNkMsRUFBRSxDQUFDYyxLQUFLaTZDLGNBQWMsS0FBSyxJQUFJOTZDLEVBQUVELEVBQUV5ekIsY0FBY3dsQixJQUFHLFdBQVdzQixHQUFHLEtBQUt2NkMsRUFBRSxLQUFLLEtBQUssSUFBR0MsRUFBRXMrQixJQUFJLElBQUksQ0FBQyxFQUN6VHljLEdBQUc1NkMsVUFBVW03QywyQkFBMkIsU0FBU3Y3QyxHQUFHLEdBQUdBLEVBQUUsQ0FBQyxJQUFJQyxFQUFFd1YsS0FBS3pWLEVBQUUsQ0FBQ216QixVQUFVLEtBQUt2UixPQUFPNWhCLEVBQUV1ekIsU0FBU3R6QixHQUFHLElBQUksSUFBSUMsRUFBRSxFQUFFQSxFQUFFZ1csR0FBR3hWLFFBQVEsSUFBSVQsR0FBR0EsRUFBRWlXLEdBQUdoVyxHQUFHcXpCLFNBQVNyekIsS0FBS2dXLEdBQUdzbEMsT0FBT3Q3QyxFQUFFLEVBQUVGLEdBQUcsSUFBSUUsR0FBR3FXLEdBQUd2VyxFQUFFLENBQUMsRUFFWGlWLEdBQUcsU0FBU2pWLEdBQUcsT0FBT0EsRUFBRXdyQixLQUFLLEtBQUssRUFBRSxJQUFJdnJCLEVBQUVELEVBQUVpeEIsVUFBVSxHQUFHaHhCLEVBQUUweEIsUUFBUUosY0FBY2lDLGFBQWEsQ0FBQyxJQUFJdHpCLEVBQUU4VCxHQUFHL1QsRUFBRXd5QixjQUFjLElBQUl2eUIsSUFBSTZVLEdBQUc5VSxFQUFJLEVBQUZDLEdBQUt5M0MsR0FBRzEzQyxFQUFFZ0ksTUFBSyxJQUFPLEVBQUZxRCxNQUFPNG9DLEdBQUdqc0MsS0FBSSxJQUFJMDVCLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBR3NYLElBQUcsV0FBVyxJQUFJaDVDLEVBQUVvbEMsR0FBR3JsQyxFQUFFLEdBQUcsR0FBRyxPQUFPQyxFQUFFLENBQUMsSUFBSUMsRUFBRWlNLEtBQUlnN0IsR0FBR2xuQyxFQUFFRCxFQUFFLEVBQUVFLEVBQUUsQ0FBQyxJQUFHdTZDLEdBQUd6NkMsRUFBRSxHQUFHLEVBQy9ia1YsR0FBRyxTQUFTbFYsR0FBRyxHQUFHLEtBQUtBLEVBQUV3ckIsSUFBSSxDQUFDLElBQUl2ckIsRUFBRW9sQyxHQUFHcmxDLEVBQUUsV0FBYyxPQUFPQyxHQUFha25DLEdBQUdsbkMsRUFBRUQsRUFBRSxVQUFYbU0sTUFBd0JzdUMsR0FBR3o2QyxFQUFFLFVBQVUsQ0FBQyxFQUFFd1YsR0FBRyxTQUFTeFYsR0FBRyxHQUFHLEtBQUtBLEVBQUV3ckIsSUFBSSxDQUFDLElBQUl2ckIsRUFBRWluQyxHQUFHbG5DLEdBQUdFLEVBQUVtbEMsR0FBR3JsQyxFQUFFQyxHQUFNLE9BQU9DLEdBQWFpbkMsR0FBR2puQyxFQUFFRixFQUFFQyxFQUFYa00sTUFBZ0JzdUMsR0FBR3o2QyxFQUFFQyxFQUFFLENBQUMsRUFBRXdWLEdBQUcsV0FBVyxPQUFPdE4sRUFBQyxFQUFFdU4sR0FBRyxTQUFTMVYsRUFBRUMsR0FBRyxJQUFJQyxFQUFFaUksR0FBRSxJQUFJLE9BQU9BLEdBQUVuSSxFQUFFQyxHQUFHLENBQUMsUUFBUWtJLEdBQUVqSSxDQUFDLENBQUMsRUFDbFMrTCxHQUFHLFNBQVNqTSxFQUFFQyxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxRQUF5QixHQUFqQmtKLEVBQUduSixFQUFFRSxHQUFHRCxFQUFFQyxFQUFFOEQsS0FBUSxVQUFVOUQsRUFBRTZkLE1BQU0sTUFBTTlkLEVBQUUsQ0FBQyxJQUFJQyxFQUFFRixFQUFFRSxFQUFFbUssWUFBWW5LLEVBQUVBLEVBQUVtSyxXQUFzRixJQUEzRW5LLEVBQUVBLEVBQUVrZixpQkFBaUIsY0FBYzdOLEtBQUtxRixVQUFVLEdBQUczVyxHQUFHLG1CQUF1QkEsRUFBRSxFQUFFQSxFQUFFQyxFQUFFUSxPQUFPVCxJQUFJLENBQUMsSUFBSWdCLEVBQUVmLEVBQUVELEdBQUcsR0FBR2dCLElBQUlqQixHQUFHaUIsRUFBRXc2QyxPQUFPejdDLEVBQUV5N0MsS0FBSyxDQUFDLElBQUl2NkMsRUFBRXlMLEdBQUcxTCxHQUFHLElBQUlDLEVBQUUsTUFBTU4sTUFBTXVQLEVBQUUsS0FBS3BJLEVBQUc5RyxHQUFHa0ksRUFBR2xJLEVBQUVDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFLLFdBQVdvSixHQUFHdEssRUFBRUUsR0FBRyxNQUFNLElBQUssU0FBbUIsT0FBVkQsRUFBRUMsRUFBRUcsUUFBZXdKLEdBQUc3SixJQUFJRSxFQUFFd3pDLFNBQVN6ekMsR0FBRSxHQUFJLEVBQUU2TSxHQUFHa3NDLEdBQUcvckMsR0FBR2dzQyxHQUNwYSxJQUFJeUMsR0FBRyxDQUFDQyx1QkFBc0IsRUFBR0MsT0FBTyxDQUFDbHZDLEdBQUdnWSxHQUFHL1gsR0FBR0MsR0FBR0MsR0FBR21zQyxLQUFLNkMsR0FBRyxDQUFDQyx3QkFBd0J0bEMsR0FBR3VsQyxXQUFXLEVBQUV2dUMsUUFBUSxTQUFTd3VDLG9CQUFvQixhQUMxSUMsR0FBRyxDQUFDRixXQUFXRixHQUFHRSxXQUFXdnVDLFFBQVFxdUMsR0FBR3J1QyxRQUFRd3VDLG9CQUFvQkgsR0FBR0csb0JBQW9CRSxlQUFlTCxHQUFHSyxlQUFlQyxrQkFBa0IsS0FBS0MsNEJBQTRCLEtBQUtDLDRCQUE0QixLQUFLQyxjQUFjLEtBQUtDLHdCQUF3QixLQUFLQyx3QkFBd0IsS0FBS0MsZ0JBQWdCLEtBQUtDLG1CQUFtQixLQUFLQyxlQUFlLEtBQUtDLHFCQUFxQng0QyxFQUFHK2xDLHVCQUF1QjBTLHdCQUF3QixTQUFTNzhDLEdBQVcsT0FBTyxRQUFmQSxFQUFFcVAsR0FBR3JQLElBQW1CLEtBQUtBLEVBQUVpeEIsU0FBUyxFQUFFNnFCLHdCQUF3QkQsR0FBR0MseUJBUmpOLFdBQWMsT0FBTyxJQUFJLEVBU3BVZ0IsNEJBQTRCLEtBQUtDLGdCQUFnQixLQUFLQyxhQUFhLEtBQUtDLGtCQUFrQixLQUFLQyxnQkFBZ0IsS0FBS0Msa0JBQWtCLGtDQUFrQyxHQUFHLG9CQUFxQkMsK0JBQStCLENBQUMsSUFBSUMsR0FBR0QsK0JBQStCLElBQUlDLEdBQUdDLFlBQVlELEdBQUdFLGNBQWMsSUFBSXRxQyxHQUFHb3FDLEdBQUdHLE9BQU92QixJQUFJL29DLEdBQUdtcUMsRUFBRSxDQUFDLE1BQU1yOUMsSUFBRyxDQUFDLENBQUNnb0IsRUFBUWdELG1EQUFtRDB3QixHQUM5WTF6QixFQUFReTFCLGFBQWEsU0FBU3o5QyxFQUFFQyxHQUFHLElBQUlDLEVBQUUsRUFBRXNDLFVBQVU5QixhQUFRLElBQVM4QixVQUFVLEdBQUdBLFVBQVUsR0FBRyxLQUFLLElBQUl5NEMsR0FBR2g3QyxHQUFHLE1BQU1XLE1BQU11UCxFQUFFLE1BQU0sT0FidUgsU0FBWW5RLEVBQUVDLEVBQUVDLEdBQUcsSUFBSWUsRUFBRSxFQUFFdUIsVUFBVTlCLGFBQVEsSUFBUzhCLFVBQVUsR0FBR0EsVUFBVSxHQUFHLEtBQUssTUFBTSxDQUFDbW1CLFNBQVNuWSxFQUFHZ1ksSUFBSSxNQUFNdm5CLEVBQUUsS0FBSyxHQUFHQSxFQUFFOHJCLFNBQVMvc0IsRUFBRXl6QixjQUFjeHpCLEVBQUU4b0MsZUFBZTdvQyxFQUFFLENBYTFSdzlDLENBQUcxOUMsRUFBRUMsRUFBRSxLQUFLQyxFQUFFLEVBQUU4bkIsRUFBUTIxQixXQUFXLFNBQVMzOUMsRUFBRUMsR0FBRyxJQUFJZzdDLEdBQUdqN0MsR0FBRyxNQUFNWSxNQUFNdVAsRUFBRSxNQUFNLElBQUlqUSxHQUFFLEVBQUdlLEVBQUUsR0FBR0MsRUFBRTA1QyxHQUE0UCxPQUF6UCxNQUFPMzZDLEtBQWdCLElBQUtBLEVBQUUyOUMsc0JBQXNCMTlDLEdBQUUsUUFBSSxJQUFTRCxFQUFFK3VDLG1CQUFtQi90QyxFQUFFaEIsRUFBRSt1Qyx1QkFBa0IsSUFBUy91QyxFQUFFdTVDLHFCQUFxQnQ0QyxFQUFFakIsRUFBRXU1QyxxQkFBcUJ2NUMsRUFBRWk2QyxHQUFHbDZDLEVBQUUsR0FBRSxFQUFHLEtBQUssRUFBS0UsRUFBRSxFQUFHZSxFQUFFQyxHQUFHbEIsRUFBRXUrQixJQUFJdCtCLEVBQUUweEIsUUFBUXdNLEdBQUcsSUFBSW4rQixFQUFFaVMsU0FBU2pTLEVBQUVxSyxXQUFXckssR0FBVSxJQUFJODZDLEdBQUc3NkMsRUFBRSxFQUNyZituQixFQUFRNjFCLFlBQVksU0FBUzc5QyxHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEtBQUssR0FBRyxJQUFJQSxFQUFFaVMsU0FBUyxPQUFPalMsRUFBRSxJQUFJQyxFQUFFRCxFQUFFZ25DLGdCQUFnQixRQUFHLElBQVMvbUMsRUFBRSxDQUFDLEdBQUcsbUJBQW9CRCxFQUFFNmYsT0FBTyxNQUFNamYsTUFBTXVQLEVBQUUsTUFBaUMsTUFBM0JuUSxFQUFFSCxPQUFPeUksS0FBS3RJLEdBQUcySixLQUFLLEtBQVcvSSxNQUFNdVAsRUFBRSxJQUFJblEsR0FBSSxDQUFxQyxPQUExQixRQUFWQSxFQUFFcVAsR0FBR3BQLElBQWMsS0FBS0QsRUFBRWl4QixTQUFrQixFQUFFakosRUFBUTgxQixVQUFVLFNBQVM5OUMsR0FBRyxPQUFPaTVDLEdBQUdqNUMsRUFBRSxFQUFFZ29CLEVBQVErMUIsUUFBUSxTQUFTLzlDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSWc3QyxHQUFHajdDLEdBQUcsTUFBTVcsTUFBTXVQLEVBQUUsTUFBTSxPQUFPaXJDLEdBQUcsS0FBS3A3QyxFQUFFQyxHQUFFLEVBQUdDLEVBQUUsRUFDL1k4bkIsRUFBUWcyQixZQUFZLFNBQVNoK0MsRUFBRUMsRUFBRUMsR0FBRyxJQUFJKzZDLEdBQUdqN0MsR0FBRyxNQUFNWSxNQUFNdVAsRUFBRSxNQUFNLElBQUlsUCxFQUFFLE1BQU1mLEdBQUdBLEVBQUUrOUMsaUJBQWlCLEtBQUsvOEMsR0FBRSxFQUFHSyxFQUFFLEdBQUdkLEVBQUVtNkMsR0FBeU8sR0FBdE8sTUFBTzE2QyxLQUFnQixJQUFLQSxFQUFFMDlDLHNCQUFzQjE4QyxHQUFFLFFBQUksSUFBU2hCLEVBQUU4dUMsbUJBQW1CenRDLEVBQUVyQixFQUFFOHVDLHVCQUFrQixJQUFTOXVDLEVBQUVzNUMscUJBQXFCLzRDLEVBQUVQLEVBQUVzNUMscUJBQXFCdjVDLEVBQUVxNkMsR0FBR3I2QyxFQUFFLEtBQUtELEVBQUUsRUFBRSxNQUFNRSxFQUFFQSxFQUFFLEtBQUtnQixFQUFFLEVBQUdLLEVBQUVkLEdBQUdULEVBQUV1K0IsSUFBSXQrQixFQUFFMHhCLFFBQVF3TSxHQUFHbitCLEdBQU1pQixFQUFFLElBQUlqQixFQUFFLEVBQUVBLEVBQUVpQixFQUFFUCxPQUFPVixJQUEyQmtCLEdBQWhCQSxHQUFQaEIsRUFBRWUsRUFBRWpCLElBQU9rK0MsYUFBZ0JoK0MsRUFBRWkrQyxTQUFTLE1BQU1sK0MsRUFBRWc2QyxnQ0FBZ0NoNkMsRUFBRWc2QyxnQ0FBZ0MsQ0FBQy81QyxFQUFFZ0IsR0FBR2pCLEVBQUVnNkMsZ0NBQWdDeHlDLEtBQUt2SCxFQUN2aEJnQixHQUFHLE9BQU8sSUFBSTg1QyxHQUFHLzZDLEVBQUUsRUFBRStuQixFQUFRbkksT0FBTyxTQUFTN2YsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZzdDLEdBQUdqN0MsR0FBRyxNQUFNVyxNQUFNdVAsRUFBRSxNQUFNLE9BQU9pckMsR0FBRyxLQUFLcDdDLEVBQUVDLEdBQUUsRUFBR0MsRUFBRSxFQUFFOG5CLEVBQVFvMkIsdUJBQXVCLFNBQVNwK0MsR0FBRyxJQUFJazdDLEdBQUdsN0MsR0FBRyxNQUFNWSxNQUFNdVAsRUFBRSxLQUFLLFFBQU9uUSxFQUFFazFDLHNCQUFxQitELElBQUcsV0FBV21DLEdBQUcsS0FBSyxLQUFLcDdDLEdBQUUsR0FBRyxXQUFXQSxFQUFFazFDLG9CQUFvQixLQUFLbDFDLEVBQUV1K0IsSUFBSSxJQUFJLEdBQUUsS0FBRyxFQUFNLEVBQUV2VyxFQUFRcTJCLHdCQUF3QnJGLEdBQy9VaHhCLEVBQVFzMkIsb0NBQW9DLFNBQVN0K0MsRUFBRUMsRUFBRUMsRUFBRWUsR0FBRyxJQUFJaTZDLEdBQUdoN0MsR0FBRyxNQUFNVSxNQUFNdVAsRUFBRSxNQUFNLEdBQUcsTUFBTW5RLFFBQUcsSUFBU0EsRUFBRWduQyxnQkFBZ0IsTUFBTXBtQyxNQUFNdVAsRUFBRSxLQUFLLE9BQU9pckMsR0FBR3A3QyxFQUFFQyxFQUFFQyxHQUFFLEVBQUdlLEVBQUUsRUFBRSttQixFQUFReGEsUUFBUSxpRUNoVXpMdkwsRUFBSSxFQUFRLEtBRWQrbEIsRUFBUSxFQUFhL2xCLEVBQUUwN0MsV0FDRDE3QyxFQUFFKzdDLHlDQ0gxQixTQUFTTyxJQUVQLEdBQzRDLG9CQUFuQ25CLGdDQUM0QyxtQkFBNUNBLCtCQUErQm1CLFNBY3hDLElBRUVuQiwrQkFBK0JtQixTQUFTQSxFQUMxQyxDQUFFLE1BQU9DLEdBR1A5NkMsUUFBUUMsTUFBTTY2QyxFQUNoQixDQUNGLENBS0VELEdBQ0F4MkIsRUFBT0MsUUFBVSxFQUFqQixtQ0N6QnVjdmIsRUFBeGJ4TSxFQUFFMEIsT0FBTyttQixJQUFJLGlCQUFpQnhvQixFQUFFeUIsT0FBTyttQixJQUFJLGdCQUFnQnpuQixFQUFFVSxPQUFPK21CLElBQUksa0JBQWtCeG5CLEVBQUVTLE9BQU8rbUIsSUFBSSxxQkFBcUJubkIsRUFBRUksT0FBTyttQixJQUFJLGtCQUFrQmpvQixFQUFFa0IsT0FBTyttQixJQUFJLGtCQUFrQnhsQixFQUFFdkIsT0FBTyttQixJQUFJLGlCQUFpQmpaLEVBQUU5TixPQUFPK21CLElBQUksd0JBQXdCOVksRUFBRWpPLE9BQU8rbUIsSUFBSSxxQkFBcUJ6bUIsRUFBRU4sT0FBTyttQixJQUFJLGtCQUFrQjdZLEVBQUVsTyxPQUFPK21CLElBQUksdUJBQXVCdlksRUFBRXhPLE9BQU8rbUIsSUFBSSxjQUFjN2tCLEVBQUVsQyxPQUFPK21CLElBQUksY0FBYzVqQixFQUFFbkQsT0FBTyttQixJQUFJLG1CQUFxQmpjLEVBQUU5SyxPQUFPK21CLElBQUksMEJBSXhkVixFQUFRa0MsbUJBQW1CLFNBQVNscUIsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxtQkFBb0JBLEdBQUdBLElBQUlpQixHQUFHakIsSUFBSXVCLEdBQUd2QixJQUFJa0IsR0FBR2xCLElBQUlpQyxHQUFHakMsSUFBSTZQLEdBQUc3UCxJQUFJOEUsR0FBRyxpQkFBa0I5RSxHQUFHLE9BQU9BLElBQUlBLEVBQUUyb0IsV0FBVzlrQixHQUFHN0QsRUFBRTJvQixXQUFXeFksR0FBR25RLEVBQUUyb0IsV0FBV2xvQixHQUFHVCxFQUFFMm9CLFdBQVd6bEIsR0FBR2xELEVBQUUyb0IsV0FBVy9ZLEdBQUc1UCxFQUFFMm9CLFdBQVdsYyxRQUFHLElBQVN6TSxFQUFFeStDLFlBQWtCLEVBQUV6MkIsRUFBUW1DLE9BSDFTLFNBQVducUIsR0FBRyxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFFLENBQUMsSUFBSWtNLEVBQUVsTSxFQUFFMm9CLFNBQVMsT0FBT3pjLEdBQUcsS0FBS2pNLEVBQUUsT0FBT0QsRUFBRUEsRUFBRStkLE1BQVEsS0FBSzljLEVBQUUsS0FBS00sRUFBRSxLQUFLTCxFQUFFLEtBQUtlLEVBQUUsS0FBSzROLEVBQUUsT0FBTzdQLEVBQUUsUUFBUSxPQUFPQSxFQUFFQSxHQUFHQSxFQUFFMm9CLFVBQVksS0FBS2xaLEVBQUUsS0FBS3ZNLEVBQUUsS0FBSzBNLEVBQUUsS0FBSy9MLEVBQUUsS0FBS3NNLEVBQUUsS0FBSzFQLEVBQUUsT0FBT1QsRUFBRSxRQUFRLE9BQU9rTSxHQUFHLEtBQUtoTSxFQUFFLE9BQU9nTSxFQUFFLENBQUMsOEJDUHZRNmIsRUFBT0MsUUFBVSxFQUFqQixpQ0NNVyxJQUFJem1CLEVBQUUsRUFBUSxLQUFTa08sRUFBRTlOLE9BQU8rbUIsSUFBSSxpQkFBaUI5WSxFQUFFak8sT0FBTyttQixJQUFJLGtCQUFrQnptQixFQUFFcEMsT0FBT08sVUFBVWdJLGVBQWV5SCxFQUFFdE8sRUFBRXlwQixtREFBbURtbEIsa0JBQWtCaGdDLEVBQUUsQ0FBQ3FZLEtBQUksRUFBRzZmLEtBQUksRUFBR3FXLFFBQU8sRUFBR0MsVUFBUyxHQUNoUCxTQUFTOTZDLEVBQUUzRCxFQUFFRixFQUFFUyxHQUFHLElBQUlSLEVBQUVnQixFQUFFLENBQUMsRUFBRUMsRUFBRSxLQUFLZ0MsRUFBRSxLQUFpRixJQUFJakQsVUFBaEYsSUFBU1EsSUFBSVMsRUFBRSxHQUFHVCxRQUFHLElBQVNULEVBQUV3b0IsTUFBTXRuQixFQUFFLEdBQUdsQixFQUFFd29CLFVBQUssSUFBU3hvQixFQUFFcW9DLE1BQU1ubEMsRUFBRWxELEVBQUVxb0MsS0FBY3JvQyxFQUFFaUMsRUFBRUksS0FBS3JDLEVBQUVDLEtBQUtrUSxFQUFFL0gsZUFBZW5JLEtBQUtnQixFQUFFaEIsR0FBR0QsRUFBRUMsSUFBSSxHQUFHQyxHQUFHQSxFQUFFc21CLGFBQWEsSUFBSXZtQixLQUFLRCxFQUFFRSxFQUFFc21CLGtCQUFlLElBQVN2bEIsRUFBRWhCLEtBQUtnQixFQUFFaEIsR0FBR0QsRUFBRUMsSUFBSSxNQUFNLENBQUMwb0IsU0FBU2xaLEVBQUVzTyxLQUFLN2QsRUFBRXNvQixJQUFJdG5CLEVBQUVtbkMsSUFBSW5sQyxFQUFFNmtDLE1BQU05bUMsRUFBRXFuQyxPQUFPejRCLEVBQUU4aEIsUUFBUSxDQUFDM0osRUFBUWdCLFNBQVNwWixFQUFFb1ksRUFBUTQyQixJQUFJLzZDLEVBQUVta0IsRUFBUTYyQixLQUFLaDdDLDRCQ0Q3VixJQUFJK0wsRUFBRWpPLE9BQU8rbUIsSUFBSSxpQkFBaUI3WSxFQUFFbE8sT0FBTyttQixJQUFJLGdCQUFnQnZZLEVBQUV4TyxPQUFPK21CLElBQUksa0JBQWtCN2tCLEVBQUVsQyxPQUFPK21CLElBQUkscUJBQXFCeGMsRUFBRXZLLE9BQU8rbUIsSUFBSSxrQkFBa0I1akIsRUFBRW5ELE9BQU8rbUIsSUFBSSxrQkFBa0JqYyxFQUFFOUssT0FBTyttQixJQUFJLGlCQUFpQnBqQixFQUFFM0QsT0FBTyttQixJQUFJLHFCQUFxQjdpQixFQUFFbEUsT0FBTyttQixJQUFJLGtCQUFrQjFoQixFQUFFckYsT0FBTyttQixJQUFJLGNBQWNyWSxFQUFFMU8sT0FBTyttQixJQUFJLGNBQWN6aEIsRUFBRXRGLE9BQU9HLFNBQ3JXbUcsRUFBRSxDQUFDOCtCLFVBQVUsV0FBVyxPQUFNLENBQUUsRUFBRU0sbUJBQW1CLFdBQVcsRUFBRUQsb0JBQW9CLFdBQVcsRUFBRUgsZ0JBQWdCLFdBQVcsR0FBRzkrQixFQUFFdEksT0FBT29yQixPQUFPMWlCLEVBQUUsQ0FBQyxFQUFFLFNBQVNHLEVBQUUxSSxFQUFFQyxFQUFFaUIsR0FBR0osS0FBS2luQyxNQUFNL25DLEVBQUVjLEtBQUtpa0MsUUFBUTlrQyxFQUFFYSxLQUFLOGxDLEtBQUtyK0IsRUFBRXpILEtBQUs0bUMsUUFBUXhtQyxHQUFHK0csQ0FBQyxDQUN3SSxTQUFTVSxJQUFJLENBQXlCLFNBQVM0SCxFQUFFdlEsRUFBRUMsRUFBRWlCLEdBQUdKLEtBQUtpbkMsTUFBTS9uQyxFQUFFYyxLQUFLaWtDLFFBQVE5a0MsRUFBRWEsS0FBSzhsQyxLQUFLcitCLEVBQUV6SCxLQUFLNG1DLFFBQVF4bUMsR0FBRytHLENBQUMsQ0FEeFBTLEVBQUV0SSxVQUFVMDVDLGlCQUFpQixDQUFDLEVBQ3BRcHhDLEVBQUV0SSxVQUFVMCtDLFNBQVMsU0FBUzkrQyxFQUFFQyxHQUFHLEdBQUcsaUJBQWtCRCxHQUFHLG1CQUFvQkEsR0FBRyxNQUFNQSxFQUFFLE1BQU1ZLE1BQU0seUhBQXlIRSxLQUFLNG1DLFFBQVFULGdCQUFnQm5tQyxLQUFLZCxFQUFFQyxFQUFFLFdBQVcsRUFBRXlJLEVBQUV0SSxVQUFVMitDLFlBQVksU0FBUy8rQyxHQUFHYyxLQUFLNG1DLFFBQVFMLG1CQUFtQnZtQyxLQUFLZCxFQUFFLGNBQWMsRUFBZ0IySSxFQUFFdkksVUFBVXNJLEVBQUV0SSxVQUFzRixJQUFJZ0YsRUFBRW1MLEVBQUVuUSxVQUFVLElBQUl1SSxFQUNyZnZELEVBQUVwQyxZQUFZdU4sRUFBRXBJLEVBQUUvQyxFQUFFc0QsRUFBRXRJLFdBQVdnRixFQUFFb2lDLHNCQUFxQixFQUFHLElBQUluK0IsRUFBRWxKLE1BQU1nQyxRQUFRZ0QsRUFBRXRGLE9BQU9PLFVBQVVnSSxlQUFla0QsRUFBRSxDQUFDcW1CLFFBQVEsTUFBTXhsQixFQUFFLENBQUNxYyxLQUFJLEVBQUc2ZixLQUFJLEVBQUdxVyxRQUFPLEVBQUdDLFVBQVMsR0FDdEssU0FBUzc0QyxFQUFFOUYsRUFBRUMsRUFBRWlCLEdBQUcsSUFBSUQsRUFBRWYsRUFBRSxDQUFDLEVBQUV1UCxFQUFFLEtBQUt2TSxFQUFFLEtBQUssR0FBRyxNQUFNakQsRUFBRSxJQUFJZ0IsVUFBSyxJQUFTaEIsRUFBRW9vQyxNQUFNbmxDLEVBQUVqRCxFQUFFb29DLFVBQUssSUFBU3BvQyxFQUFFdW9CLE1BQU0vWSxFQUFFLEdBQUd4UCxFQUFFdW9CLEtBQUt2b0IsRUFBRWtGLEVBQUU5QyxLQUFLcEMsRUFBRWdCLEtBQUtrTCxFQUFFL0QsZUFBZW5ILEtBQUtmLEVBQUVlLEdBQUdoQixFQUFFZ0IsSUFBSSxJQUFJUixFQUFFK0IsVUFBVTlCLE9BQU8sRUFBRSxHQUFHLElBQUlELEVBQUVQLEVBQUU2c0IsU0FBUzdyQixPQUFPLEdBQUcsRUFBRVQsRUFBRSxDQUFDLElBQUksSUFBSWMsRUFBRXBCLE1BQU1NLEdBQUd3QixFQUFFLEVBQUVBLEVBQUV4QixFQUFFd0IsSUFBSVYsRUFBRVUsR0FBR08sVUFBVVAsRUFBRSxHQUFHL0IsRUFBRTZzQixTQUFTeHJCLENBQUMsQ0FBQyxHQUFHdkIsR0FBR0EsRUFBRXdtQixhQUFhLElBQUl2bEIsS0FBS1IsRUFBRVQsRUFBRXdtQixrQkFBZSxJQUFTdG1CLEVBQUVlLEtBQUtmLEVBQUVlLEdBQUdSLEVBQUVRLElBQUksTUFBTSxDQUFDMG5CLFNBQVMvWSxFQUFFbU8sS0FBSy9kLEVBQUV3b0IsSUFBSS9ZLEVBQUU0NEIsSUFBSW5sQyxFQUFFNmtDLE1BQU03bkMsRUFBRW9vQyxPQUFPaDlCLEVBQUVxbUIsUUFBUSxDQUNoVixTQUFTcGxCLEVBQUV2TSxHQUFHLE1BQU0saUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUUyb0IsV0FBVy9ZLENBQUMsQ0FBb0csSUFBSTdLLEVBQUUsT0FBTyxTQUFTc04sRUFBRXJTLEVBQUVDLEdBQUcsTUFBTSxpQkFBa0JELEdBQUcsT0FBT0EsR0FBRyxNQUFNQSxFQUFFd29CLElBQTdLLFNBQWdCeG9CLEdBQUcsSUFBSUMsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJRCxFQUFFZ0ksUUFBUSxTQUFRLFNBQVNoSSxHQUFHLE9BQU9DLEVBQUVELEVBQUUsR0FBRSxDQUErRWcvQyxDQUFPLEdBQUdoL0MsRUFBRXdvQixLQUFLdm9CLEVBQUV3QixTQUFTLEdBQUcsQ0FDL1csU0FBU3FTLEVBQUU5VCxFQUFFQyxFQUFFaUIsRUFBRUQsRUFBRWYsR0FBRyxJQUFJdVAsU0FBU3pQLEVBQUssY0FBY3lQLEdBQUcsWUFBWUEsSUFBRXpQLEVBQUUsTUFBSyxJQUFJa0QsR0FBRSxFQUFHLEdBQUcsT0FBT2xELEVBQUVrRCxHQUFFLE9BQVEsT0FBT3VNLEdBQUcsSUFBSyxTQUFTLElBQUssU0FBU3ZNLEdBQUUsRUFBRyxNQUFNLElBQUssU0FBUyxPQUFPbEQsRUFBRTJvQixVQUFVLEtBQUsvWSxFQUFFLEtBQUtDLEVBQUUzTSxHQUFFLEdBQUksR0FBR0EsRUFBRSxPQUFXaEQsRUFBRUEsRUFBTmdELEVBQUVsRCxHQUFTQSxFQUFFLEtBQUtpQixFQUFFLElBQUlvUixFQUFFblAsRUFBRSxHQUFHakMsRUFBRW9JLEVBQUVuSixJQUFJZ0IsRUFBRSxHQUFHLE1BQU1sQixJQUFJa0IsRUFBRWxCLEVBQUVnSSxRQUFRakQsRUFBRSxPQUFPLEtBQUsrTyxFQUFFNVQsRUFBRUQsRUFBRWlCLEVBQUUsSUFBRyxTQUFTbEIsR0FBRyxPQUFPQSxDQUFDLEtBQUksTUFBTUUsSUFBSXFNLEVBQUVyTSxLQUFLQSxFQURuVyxTQUFXRixFQUFFQyxHQUFHLE1BQU0sQ0FBQzBvQixTQUFTL1ksRUFBRW1PLEtBQUsvZCxFQUFFK2QsS0FBS3lLLElBQUl2b0IsRUFBRW9vQyxJQUFJcm9DLEVBQUVxb0MsSUFBSU4sTUFBTS9uQyxFQUFFK25DLE1BQU1PLE9BQU90b0MsRUFBRXNvQyxPQUFPLENBQ3lRL2lDLENBQUVyRixFQUFFZ0IsSUFBSWhCLEVBQUVzb0IsS0FBS3RsQixHQUFHQSxFQUFFc2xCLE1BQU10b0IsRUFBRXNvQixJQUFJLElBQUksR0FBR3RvQixFQUFFc29CLEtBQUt4Z0IsUUFBUWpELEVBQUUsT0FBTyxLQUFLL0UsSUFBSUMsRUFBRXdILEtBQUt2SCxJQUFJLEVBQXlCLEdBQXZCZ0QsRUFBRSxFQUFFakMsRUFBRSxLQUFLQSxFQUFFLElBQUlBLEVBQUUsSUFBT29JLEVBQUVySixHQUFHLElBQUksSUFBSVMsRUFBRSxFQUFFQSxFQUFFVCxFQUFFVSxPQUFPRCxJQUFJLENBQy9lLElBQUljLEVBQUVOLEVBQUVvUixFQUR3ZTVDLEVBQ3JmelAsRUFBRVMsR0FBZUEsR0FBR3lDLEdBQUc0USxFQUFFckUsRUFBRXhQLEVBQUVpQixFQUFFSyxFQUFFckIsRUFBRSxNQUFNLEdBQUdxQixFQVBzVSxTQUFXdkIsR0FBRyxPQUFHLE9BQU9BLEdBQUcsaUJBQWtCQSxFQUFTLEtBQXNDLG1CQUFqQ0EsRUFBRWlILEdBQUdqSCxFQUFFaUgsSUFBSWpILEVBQUUsZUFBMENBLEVBQUUsSUFBSSxDQU81YmlELENBQUVqRCxHQUFHLG1CQUFvQnVCLEVBQUUsSUFBSXZCLEVBQUV1QixFQUFFYyxLQUFLckMsR0FBR1MsRUFBRSxJQUFJZ1AsRUFBRXpQLEVBQUU2QixRQUFRUCxNQUE2QjRCLEdBQUc0USxFQUExQnJFLEVBQUVBLEVBQUVwUCxNQUEwQkosRUFBRWlCLEVBQXRCSyxFQUFFTixFQUFFb1IsRUFBRTVDLEVBQUVoUCxLQUFrQlAsUUFBUSxHQUFHLFdBQVd1UCxFQUFFLE1BQU14UCxFQUFFK0IsT0FBT2hDLEdBQUdZLE1BQU0sbURBQW1ELG9CQUFvQlgsRUFBRSxxQkFBcUJKLE9BQU95SSxLQUFLdEksR0FBRzJKLEtBQUssTUFBTSxJQUFJMUosR0FBRyw2RUFBNkUsT0FBT2lELENBQUMsQ0FDelosU0FBU3VLLEVBQUV6TixFQUFFQyxFQUFFaUIsR0FBRyxHQUFHLE1BQU1sQixFQUFFLE9BQU9BLEVBQUUsSUFBSWlCLEVBQUUsR0FBR2YsRUFBRSxFQUFtRCxPQUFqRDRULEVBQUU5VCxFQUFFaUIsRUFBRSxHQUFHLElBQUcsU0FBU2pCLEdBQUcsT0FBT0MsRUFBRW9DLEtBQUtuQixFQUFFbEIsRUFBRUUsSUFBSSxJQUFVZSxDQUFDLENBQUMsU0FBUzBULEVBQUUzVSxHQUFHLElBQUksSUFBSUEsRUFBRWkvQyxRQUFRLENBQUMsSUFBSWgvQyxFQUFFRCxFQUFFay9DLFNBQVFqL0MsRUFBRUEsS0FBTTAvQixNQUFLLFNBQVMxL0IsR0FBTSxJQUFJRCxFQUFFaS9DLFVBQVUsSUFBSWovQyxFQUFFaS9DLFVBQVFqL0MsRUFBRWkvQyxRQUFRLEVBQUVqL0MsRUFBRWsvQyxRQUFRai9DLEVBQUMsSUFBRSxTQUFTQSxHQUFNLElBQUlELEVBQUVpL0MsVUFBVSxJQUFJai9DLEVBQUVpL0MsVUFBUWovQyxFQUFFaS9DLFFBQVEsRUFBRWovQyxFQUFFay9DLFFBQVFqL0MsRUFBQyxLQUFJLElBQUlELEVBQUVpL0MsVUFBVWovQyxFQUFFaS9DLFFBQVEsRUFBRWovQyxFQUFFay9DLFFBQVFqL0MsRUFBRSxDQUFDLEdBQUcsSUFBSUQsRUFBRWkvQyxRQUFRLE9BQU9qL0MsRUFBRWsvQyxRQUFRQyxRQUFRLE1BQU1uL0MsRUFBRWsvQyxPQUFRLENBQzVaLElBQUl0cUMsRUFBRSxDQUFDK2MsUUFBUSxNQUFNaGlCLEVBQUUsQ0FBQ2lrQixXQUFXLE1BQU16ZSxFQUFFLENBQUNnMUIsdUJBQXVCdjFCLEVBQUUrZSx3QkFBd0Joa0IsRUFBRXdnQyxrQkFBa0I3a0MsR0FBRzBjLEVBQVFvM0IsU0FBUyxDQUFDQyxJQUFJNXhDLEVBQUVvZCxRQUFRLFNBQVM3cUIsRUFBRUMsRUFBRWlCLEdBQUd1TSxFQUFFek4sR0FBRSxXQUFXQyxFQUFFcUMsTUFBTXhCLEtBQUswQixVQUFVLEdBQUV0QixFQUFFLEVBQUVvK0MsTUFBTSxTQUFTdC9DLEdBQUcsSUFBSUMsRUFBRSxFQUF1QixPQUFyQndOLEVBQUV6TixHQUFFLFdBQVdDLEdBQUcsSUFBVUEsQ0FBQyxFQUFFcy9DLFFBQVEsU0FBU3YvQyxHQUFHLE9BQU95TixFQUFFek4sR0FBRSxTQUFTQSxHQUFHLE9BQU9BLENBQUMsS0FBSSxFQUFFLEVBQUV3L0MsS0FBSyxTQUFTeC9DLEdBQUcsSUFBSXVNLEVBQUV2TSxHQUFHLE1BQU1ZLE1BQU0seUVBQXlFLE9BQU9aLENBQUMsR0FBR2dvQixFQUFRMmUsVUFBVWorQixFQUFFc2YsRUFBUWdCLFNBQVM3WSxFQUNuZTZYLEVBQVFtQixTQUFTamQsRUFBRThiLEVBQVF5M0IsY0FBY2x2QyxFQUFFeVgsRUFBUW9CLFdBQVd2bEIsRUFBRW1rQixFQUFRcUIsU0FBU3hqQixFQUFFbWlCLEVBQVFnRCxtREFBbUQ3VixFQUM5STZTLEVBQVEwM0IsYUFBYSxTQUFTMS9DLEVBQUVDLEVBQUVpQixHQUFHLEdBQUcsTUFBT2xCLEVBQWMsTUFBTVksTUFBTSxpRkFBaUZaLEVBQUUsS0FBSyxJQUFJaUIsRUFBRWtILEVBQUUsQ0FBQyxFQUFFbkksRUFBRStuQyxPQUFPN25DLEVBQUVGLEVBQUV3b0IsSUFBSS9ZLEVBQUV6UCxFQUFFcW9DLElBQUlubEMsRUFBRWxELEVBQUVzb0MsT0FBTyxHQUFHLE1BQU1yb0MsRUFBRSxDQUFvRSxRQUFuRSxJQUFTQSxFQUFFb29DLE1BQU01NEIsRUFBRXhQLEVBQUVvb0MsSUFBSW5sQyxFQUFFb0ksRUFBRXFtQixjQUFTLElBQVMxeEIsRUFBRXVvQixNQUFNdG9CLEVBQUUsR0FBR0QsRUFBRXVvQixLQUFReG9CLEVBQUUrZCxNQUFNL2QsRUFBRStkLEtBQUt5SSxhQUFhLElBQUkvbEIsRUFBRVQsRUFBRStkLEtBQUt5SSxhQUFhLElBQUlqbEIsS0FBS3RCLEVBQUVrRixFQUFFOUMsS0FBS3BDLEVBQUVzQixLQUFLNEssRUFBRS9ELGVBQWU3RyxLQUFLTixFQUFFTSxRQUFHLElBQVN0QixFQUFFc0IsU0FBSSxJQUFTZCxFQUFFQSxFQUFFYyxHQUFHdEIsRUFBRXNCLEdBQUcsQ0FBQyxJQUFJQSxFQUFFaUIsVUFBVTlCLE9BQU8sRUFBRSxHQUFHLElBQUlhLEVBQUVOLEVBQUU4ckIsU0FBUzdyQixPQUFPLEdBQUcsRUFBRUssRUFBRSxDQUFDZCxFQUFFTixNQUFNb0IsR0FDcmYsSUFBSSxJQUFJVSxFQUFFLEVBQUVBLEVBQUVWLEVBQUVVLElBQUl4QixFQUFFd0IsR0FBR08sVUFBVVAsRUFBRSxHQUFHaEIsRUFBRThyQixTQUFTdHNCLENBQUMsQ0FBQyxNQUFNLENBQUNrb0IsU0FBUy9ZLEVBQUVtTyxLQUFLL2QsRUFBRStkLEtBQUt5SyxJQUFJdG9CLEVBQUVtb0MsSUFBSTU0QixFQUFFczRCLE1BQU05bUMsRUFBRXFuQyxPQUFPcGxDLEVBQUUsRUFBRThrQixFQUFRMjNCLGNBQWMsU0FBUzMvQyxHQUFxSyxPQUFsS0EsRUFBRSxDQUFDMm9CLFNBQVNsYyxFQUFFNjNCLGNBQWN0a0MsRUFBRTQvQyxlQUFlNS9DLEVBQUU2L0MsYUFBYSxFQUFFQyxTQUFTLEtBQUtDLFNBQVMsS0FBS0MsY0FBYyxLQUFLQyxZQUFZLE9BQVFILFNBQVMsQ0FBQ24zQixTQUFTN2pCLEVBQUUybUIsU0FBU3pyQixHQUFVQSxFQUFFKy9DLFNBQVMvL0MsQ0FBQyxFQUFFZ29CLEVBQVFyaEIsY0FBY2IsRUFBRWtpQixFQUFRazRCLGNBQWMsU0FBU2xnRCxHQUFHLElBQUlDLEVBQUU2RixFQUFFdkQsS0FBSyxLQUFLdkMsR0FBWSxPQUFUQyxFQUFFOGQsS0FBSy9kLEVBQVNDLENBQUMsRUFBRStuQixFQUFRbTRCLFVBQVUsV0FBVyxNQUFNLENBQUN4dUIsUUFBUSxLQUFLLEVBQzlkM0osRUFBUW80QixXQUFXLFNBQVNwZ0QsR0FBRyxNQUFNLENBQUMyb0IsU0FBU3JqQixFQUFFdWEsT0FBTzdmLEVBQUUsRUFBRWdvQixFQUFRcTRCLGVBQWU5ekMsRUFBRXliLEVBQVFzNEIsS0FBSyxTQUFTdGdELEdBQUcsTUFBTSxDQUFDMm9CLFNBQVN0WSxFQUFFcWIsU0FBUyxDQUFDdXpCLFNBQVMsRUFBRUMsUUFBUWwvQyxHQUFHMnJCLE1BQU1oWCxFQUFFLEVBQUVxVCxFQUFRdTRCLEtBQUssU0FBU3ZnRCxFQUFFQyxHQUFHLE1BQU0sQ0FBQzBvQixTQUFTM2hCLEVBQUUrVyxLQUFLL2QsRUFBRW1uQixhQUFRLElBQVNsbkIsRUFBRSxLQUFLQSxFQUFFLEVBQUUrbkIsRUFBUXc0QixnQkFBZ0IsU0FBU3hnRCxHQUFHLElBQUlDLEVBQUUwUCxFQUFFaWtCLFdBQVdqa0IsRUFBRWlrQixXQUFXLENBQUMsRUFBRSxJQUFJNXpCLEdBQUcsQ0FBQyxRQUFRMlAsRUFBRWlrQixXQUFXM3pCLENBQUMsQ0FBQyxFQUFFK25CLEVBQVF5NEIsYUFBYSxXQUFXLE1BQU03L0MsTUFBTSwyREFBNEQsRUFDMWNvbkIsRUFBUStsQixZQUFZLFNBQVMvdEMsRUFBRUMsR0FBRyxPQUFPMlUsRUFBRStjLFFBQVFvYyxZQUFZL3RDLEVBQUVDLEVBQUUsRUFBRStuQixFQUFRZ21CLFdBQVcsU0FBU2h1QyxHQUFHLE9BQU80VSxFQUFFK2MsUUFBUXFjLFdBQVdodUMsRUFBRSxFQUFFZ29CLEVBQVF5bUIsY0FBYyxXQUFXLEVBQUV6bUIsRUFBUTBtQixpQkFBaUIsU0FBUzF1QyxHQUFHLE9BQU80VSxFQUFFK2MsUUFBUStjLGlCQUFpQjF1QyxFQUFFLEVBQUVnb0IsRUFBUWltQixVQUFVLFNBQVNqdUMsRUFBRUMsR0FBRyxPQUFPMlUsRUFBRStjLFFBQVFzYyxVQUFVanVDLEVBQUVDLEVBQUUsRUFBRStuQixFQUFROG1CLE1BQU0sV0FBVyxPQUFPbDZCLEVBQUUrYyxRQUFRbWQsT0FBTyxFQUFFOW1CLEVBQVFrbUIsb0JBQW9CLFNBQVNsdUMsRUFBRUMsRUFBRWlCLEdBQUcsT0FBTzBULEVBQUUrYyxRQUFRdWMsb0JBQW9CbHVDLEVBQUVDLEVBQUVpQixFQUFFLEVBQzdiOG1CLEVBQVFtbUIsbUJBQW1CLFNBQVNudUMsRUFBRUMsR0FBRyxPQUFPMlUsRUFBRStjLFFBQVF3YyxtQkFBbUJudUMsRUFBRUMsRUFBRSxFQUFFK25CLEVBQVFvbUIsZ0JBQWdCLFNBQVNwdUMsRUFBRUMsR0FBRyxPQUFPMlUsRUFBRStjLFFBQVF5YyxnQkFBZ0JwdUMsRUFBRUMsRUFBRSxFQUFFK25CLEVBQVFxbUIsUUFBUSxTQUFTcnVDLEVBQUVDLEdBQUcsT0FBTzJVLEVBQUUrYyxRQUFRMGMsUUFBUXJ1QyxFQUFFQyxFQUFFLEVBQUUrbkIsRUFBUXNtQixXQUFXLFNBQVN0dUMsRUFBRUMsRUFBRWlCLEdBQUcsT0FBTzBULEVBQUUrYyxRQUFRMmMsV0FBV3R1QyxFQUFFQyxFQUFFaUIsRUFBRSxFQUFFOG1CLEVBQVF1bUIsT0FBTyxTQUFTdnVDLEdBQUcsT0FBTzRVLEVBQUUrYyxRQUFRNGMsT0FBT3Z1QyxFQUFFLEVBQUVnb0IsRUFBUXdtQixTQUFTLFNBQVN4dUMsR0FBRyxPQUFPNFUsRUFBRStjLFFBQVE2YyxTQUFTeHVDLEVBQUUsRUFBRWdvQixFQUFRNm1CLHFCQUFxQixTQUFTN3VDLEVBQUVDLEVBQUVpQixHQUFHLE9BQU8wVCxFQUFFK2MsUUFBUWtkLHFCQUFxQjd1QyxFQUFFQyxFQUFFaUIsRUFBRSxFQUMvZThtQixFQUFRMm1CLGNBQWMsV0FBVyxPQUFPLzVCLEVBQUUrYyxRQUFRZ2QsZUFBZSxFQUFFM21CLEVBQVF4YSxRQUFRLHFDQ3RCakZ1YSxFQUFPQyxRQUFVLEVBQWpCLGlDQ0FBRCxFQUFPQyxRQUFVLEVBQWpCLCtCQ0ZGbm9CLE9BQU9FLGVBQWVpb0IsRUFBUyxhQUFjLENBQUUzbkIsT0FBTyxJQUN0RDJuQixFQUFRMDRCLHNCQUF3QjE0QixFQUFRMjRCLGtCQUFlLEVBQ3ZEMzRCLEVBQVEyNEIsYUFBZSxxQkFDdkIzNEIsRUFBUTA0QixzQkFBd0IsNERDSGhDLElBQUlFLEVBQVU5L0MsTUFBUUEsS0FBSzgvQyxRQUFXLFNBQVVoK0IsRUFBRzFoQixHQUMvQyxJQUFJNEQsRUFBSSxDQUFDLEVBQ1QsSUFBSyxJQUFJcUwsS0FBS3lTLEVBQU8vaUIsT0FBT08sVUFBVWdJLGVBQWUvRixLQUFLdWdCLEVBQUd6UyxJQUFNalAsRUFBRTRCLFFBQVFxTixHQUFLLElBQzlFckwsRUFBRXFMLEdBQUt5UyxFQUFFelMsSUFDYixHQUFTLE1BQUx5UyxHQUFxRCxtQkFBakMvaUIsT0FBTzhuQixzQkFDdEIsS0FBSTdDLEVBQUksRUFBYixJQUFnQjNVLEVBQUl0USxPQUFPOG5CLHNCQUFzQi9FLEdBQUlrQyxFQUFJM1UsRUFBRXpQLE9BQVFva0IsSUFDM0Q1akIsRUFBRTRCLFFBQVFxTixFQUFFMlUsSUFBTSxHQUFLamxCLE9BQU9PLFVBQVV5Z0QscUJBQXFCeCtDLEtBQUt1Z0IsRUFBR3pTLEVBQUUyVSxNQUN2RWhnQixFQUFFcUwsRUFBRTJVLElBQU1sQyxFQUFFelMsRUFBRTJVLElBRjRCLENBSXRELE9BQU9oZ0IsQ0FDWCxFQUNBakYsT0FBT0UsZUFBZWlvQixFQUFTLGFBQWMsQ0FBRTNuQixPQUFPLElBQ3REMm5CLEVBQVE4NEIsaUJBQW1COTRCLEVBQVErNEIsY0FBZ0IvNEIsRUFBUWc1QixnQkFBa0JoNUIsRUFBUWk1QixnQkFBa0JqNUIsRUFBUWs1QixtQkFBZ0IsRUFDL0gsTUFBTUMsRUFBVSxFQUFRLEtBQ2xCQyxFQUFjLEVBQVEsS0FDdEJDLEVBQVUsRUFBUSxJQUNsQkMsRUFBa0IsU0FBVUMsRUFBU0MsRUFBVXp4QyxFQUFTLENBQUMsR0FDM0QsTUFBTTB4QyxFQUFZMXhDLEVBQU8weEMsV0FBYSxLQUNoQ3I1QixFQUFZclksRUFBT3FZLFdBQWEsS0FDdEMsU0FBU3M1QixFQUF3Qmw1QixHQUM3QixTQUFJaTVCLElBQXlDLElBQTVCQSxFQUFVMytDLFFBQVEwbEIsUUFFL0JKLElBQXlDLElBQTVCQSxFQUFVdGxCLFFBQVEwbEIsR0FHdkMsQ0FDQSxNQUFPLENBQ0htNUIsR0FBSSxDQUFDMXRDLEVBQU91VSxFQUFLbzVCLEtBQWVGLEVBQXdCbDVCLElBQVErNEIsRUFBVUEsRUFBUXR0QyxFQUFPdVUsRUFBS281QixHQUFhM3RDLEVBQzNHNHRDLElBQUssQ0FBQzV0QyxFQUFPdVUsRUFBS281QixLQUFlRixFQUF3Qmw1QixJQUFRZzVCLEVBQVdBLEVBQVN2dEMsRUFBT3VVLEVBQUtvNUIsR0FBYTN0QyxFQUM5RzZ0QyxlQUFnQkwsR0FBYUEsRUFBVSxHQUUvQyxFQWdDQXo1QixFQUFRazVCLGNBL0JjLENBQUNhLEVBQWNDLEVBQWVDLEdBQWdCQyxRQUFPVCxZQUFXcjVCLFlBQVcrNUIsaUJBQzdGLEdBQUlWLEdBQWFyNUIsRUFDYixNQUFNLElBQUl4bkIsTUFBTSw2S0FFcEIsRUFBSXVnRCxFQUFRaUIscUJBQXFCRCxHQUNqQyxNQUFNRSxHQUFXLEVBQUlsQixFQUFRbUIsV0FBV0wsR0FDeEMsSUFBSU0sRUFBbUJSLEVBQ3ZCLEdBQUlRLElBQW9CLEVBQUlwQixFQUFRcUIsY0FBY0QsR0FBbUIsQ0FDakUsTUFBTUUsR0FBTyxFQUFJdEIsRUFBUXVCLFlBQVlWLEVBQWVDLElBQy9DLEVBQUlkLEVBQVF3QixTQUFTRixLQUN0QkYsR0FBbUIsRUFBSXBCLEVBQVF5QixXQUFXYixFQUFjVSxFQUFNLENBQUVJLG1CQUFtQixJQUMvRVgsR0FDQXgrQyxRQUFRaVEsSUFBSSxHQUFHeXRDLEVBQVlULHFJQUFxSXB2QyxLQUFLcUYsVUFBVTZyQyxPQUd2TDVpRCxPQUFPeUksS0FBS2k2QyxHQUFrQjEzQixTQUFTckMsSUFDdkIsYUFBUkEsS0FHQSxFQUFJMjRCLEVBQVFxQixjQUFjSCxFQUFTNzVCLElBQ25DNjVCLEVBQVM3NUIsSUFBTyxFQUFJMjRCLEVBQVF5QixXQUFXUCxFQUFTNzVCLEdBQU0rNUIsRUFBaUIvNUIsSUFHM0U2NUIsRUFBUzc1QixHQUFPKzVCLEVBQWlCLzVCLEdBQUksR0FFN0MsQ0FJQSxPQUhJMDVCLEdBQVNLLElBQW9CLEVBQUlwQixFQUFRcUIsY0FBY0QsSUFDdkQ3K0MsUUFBUWlRLElBQUksR0FBR3l0QyxFQUFZVCwrQ0FBK0NwdkMsS0FBS3FGLFVBQVUyckMsTUFFdEZGLENBQVEsRUE4Qm5CcjZCLEVBQVFpNUIsZ0JBM0JnQixDQUFDejRCLEVBQUtpNUIsTUFDMUIsRUFBSU4sRUFBUTJCLDBCQUEwQnJCLEVBQVdqNUIsRUFBSzY0QixFQUFRMEIsV0FBV0MsV0FDbEUxQixHQUFpQlMsSUFDcEIsSUFBS04sSUFBY0EsRUFBVS9nRCxPQUN6QixPQUFPcWhELEVBRVgsSUFDSTFoRCxFQURBNGlELEVBQW1CLEtBY3ZCLE9BWkF4QixFQUFVNTJCLFNBQVNxNEIsSUFDZixNQUFNQyxFQUFZRCxFQUFVbGlELE1BQU0sS0FDbENYLEdBQVEsRUFBSThnRCxFQUFRcjlCLE1BQU1pK0IsRUFBY29CLFFBQ25CLElBQVY5aUQsSUFBeUIsRUFBSThnRCxFQUFRaUMsaUJBQWlCRCxFQUFVQSxFQUFVemlELE9BQVMsTUFDMUZMLEVBQVErZ0QsRUFBWVYsdUJBRXhCLE1BQU0yQyxHQUFjLEVBQUlsQyxFQUFRbUMsV0FBV0gsRUFBVzlpRCxHQUNoRGtqRCxHQUFVLEVBQUlwQyxFQUFRaC9DLFNBQVNraEQsR0FBZSxHQUFLLENBQUMsRUFDMURKLEdBQW1CLEVBQUk5QixFQUFReUIsV0FBWUssR0FBbUJNLEVBQTRCRixFQUFhLENBQ25HRyxxQkFBcUIsR0FDdkIsSUFFQ1AsR0FBb0JsQixDQUFZLElBQ3ZDMEIsSUFDTyxFQUFJdEMsRUFBUTBCLG1CQUFtQlksRUFBZWhDLEVBQVdKLEVBQVEwQixXQUFXQyxZQUNwRixDQUNDdkIsVUFBVyxDQUFDajVCLE1BcUJwQlIsRUFBUWc1QixnQkFqQmdCLENBQUN4NEIsRUFBS0osTUFDMUIsRUFBSSs0QixFQUFRMkIsMEJBQTBCMTZCLEVBQVdJLEVBQUs2NEIsRUFBUTBCLFdBQVdXLFdBQ2xFcEMsR0FBaUJTLElBQ3BCLElBQUszNUIsSUFBY0EsRUFBVTFuQixPQUN6QixPQUVKLE1BQU11aUQsR0FBbUIsRUFBSTlCLEVBQVEwQixtQkFBbUJkLEVBQWMzNUIsRUFBV2k1QixFQUFRMEIsV0FBV1csV0FBVyxHQUUvRyxPQURjdDdCLEVBQVVpM0IsS0FBSzZELEdBQWNBLEVBQVVsaUQsTUFBTSxPQUM5QzJpRCxRQUFPLENBQUNWLEVBQWtCRSxLQUM1QixFQUFJaEMsRUFBUXlDLFlBQVlYLEVBQWtCRSxJQUNsREYsRUFBaUIsSUFDcEJRLElBQ08sRUFBSXRDLEVBQVEwQixtQkFBbUJZLEVBQWVyN0IsRUFBV2k1QixFQUFRMEIsV0FBV1csWUFDcEYsQ0FDQ2pDLFVBQVcsQ0FBQ2o1QixNQVdwQlIsRUFBUSs0QixjQVBjLFNBQVVoakMsRUFBTThsQyxHQUNsQyxPQUFPQSxFQUFLeEUsS0FBS3lFLElBQ2IsTUFBTXQ3QixFQUFNM29CLE9BQU95SSxLQUFLdzdDLEdBQVksR0FDOUJDLEVBQVFELEVBQVd0N0IsR0FDekIsT0FBT3pLLElBQVNzakMsRUFBUTBCLFdBQVdDLFdBQVksRUFBSWg3QixFQUFRaTVCLGlCQUFpQno0QixFQUFLdTdCLElBQVMsRUFBSS83QixFQUFRZzVCLGlCQUFpQng0QixFQUFLdTdCLEVBQU0sR0FFMUksRUFzQkEvN0IsRUFBUTg0QixpQkFwQmtCa0QsSUFDdEIsSUFBSSxJQUFFeDdCLEVBQUcsVUFBRWk1QixFQUFTLFVBQUVyNUIsRUFBUyxRQUFFNjdCLEVBQU8sV0FBRTlCLEVBQVUsWUFBRStCLEdBQWdCRixFQUFJRyxFQUFPdkQsRUFBT29ELEVBQUksQ0FBQyxNQUFPLFlBQWEsWUFBYSxVQUFXLGFBQWMsaUJBQ3ZKLEVBQUk3QyxFQUFRaUQsaUJBQWlCLENBQUUzQyxZQUFXcjVCLGNBQzFDLE1BQU1pOEIsR0FBc0IsRUFBSWxELEVBQVFtRCxrQkFBa0I3QyxHQUNwRDhDLEdBQXNCLEVBQUlwRCxFQUFRbUQsa0JBQWtCbDhCLEdBQ3BEbzhCLEVBQWMza0QsT0FBT3lJLEtBQUs0N0MsT0FBWU8sRUFBVyxDQUFFMW1DLEtBQU0sTUFDekQybUMsRUFBb0JMLEVBQW9CaEYsS0FBS3lFLEdBQWVqa0QsT0FBT3lJLEtBQUt3N0MsR0FBWSxLQUNwRmEsRUFBb0JKLEVBQW9CbEYsS0FBS3lFLEdBQWVqa0QsT0FBT3lJLEtBQUt3N0MsR0FBWSxLQUNwRmMsRUFBZ0JKLEVBQVlLLFFBQVFwMUMsSUFBd0MsSUFBbENpMUMsRUFBa0I1aEQsUUFBUTJNLEtBQStDLElBQWxDazFDLEVBQWtCN2hELFFBQVEyTSxLQUMzR3ExQyxHQUFzQixFQUFJOThCLEVBQVErNEIsZUFBZU0sRUFBUTBCLFdBQVdDLFVBQVdxQixHQUMvRVUsR0FBc0IsRUFBSS84QixFQUFRKzRCLGVBQWVNLEVBQVEwQixXQUFXVyxVQUFXYSxHQUMvRVMsR0FBeUIsRUFBSTdELEVBQVFoL0MsU0FBU3MvQyxHQUFhbUQsRUFBY3ZGLEtBQUs3MkIsSUFBUSxFQUFJUixFQUFRZzVCLGlCQUFpQng0QixLQUFRLEdBQ2pJLE9BQU8zb0IsT0FBT29yQixPQUFPcHJCLE9BQU9vckIsT0FBTyxDQUFDLEVBQUdrNUIsR0FBTyxDQUFFMzdCLE1BQzVDeTdCLFVBQVM5QixXQUFZLElBQ2QyQyxLQUNBQyxLQUNBQyxLQUNDN0MsR0FBMEIsSUFDL0I4QyxnQkFBaUJqOUIsRUFBUWs1QixlQUFnQiwyQkNySXBELElBQVc2QixFQUhYbGpELE9BQU9FLGVBQWVpb0IsRUFBUyxhQUFjLENBQUUzbkIsT0FBTyxJQUN0RDJuQixFQUFRKzZCLGdCQUFhLEdBRVZBLEVBR0svNkIsRUFBUSs2QixhQUFlLzZCLEVBQVErNkIsV0FBYSxDQUFDLElBRjlDQSxFQUFzQixVQUFJLEdBQUssWUFDMUNBLEVBQVdBLEVBQXNCLFVBQUksR0FBSyx3Q0NMOUNsakQsT0FBT0UsZUFBZWlvQixFQUFTLGFBQWMsQ0FBRTNuQixPQUFPLElBQ3REMm5CLEVBQVFzOEIsaUJBQW1CdDhCLEVBQVFrOUIsV0FBYWw5QixFQUFRbzhCLGdCQUFrQnA4QixFQUFRbzZCLG9CQUFzQnA2QixFQUFRODZCLHlCQUEyQjk2QixFQUFRbTlCLHlCQUEyQm45QixFQUFRbzlCLE9BQVNwOUIsRUFBUTY2QixrQkFBb0I3NkIsRUFBUTQ2QixVQUFZNTZCLEVBQVE0N0IsV0FBYTU3QixFQUFRczdCLFVBQVl0N0IsRUFBUWxFLEtBQU9rRSxFQUFRMDZCLFdBQWExNkIsRUFBUXM2QixVQUFZdDZCLEVBQVFxOUIsV0FBYXI5QixFQUFRczlCLGdCQUFrQnQ5QixFQUFRMjZCLFFBQVUzNkIsRUFBUXU5QixPQUFTdjlCLEVBQVF3OUIsU0FBV3g5QixFQUFRbzdCLGdCQUFrQnA3QixFQUFReTlCLGNBQWdCejlCLEVBQVE3bEIsUUFBVTZsQixFQUFRMDlCLFNBQVcxOUIsRUFBUXc2QixrQkFBZSxFQUNuaUIsTUFBTXBCLEVBQWMsRUFBUSxLQUN0QkMsRUFBVSxFQUFRLElBSXhCcjVCLEVBQVF3NkIsYUFIYSxTQUFVbmlELEdBQzNCLE1BQXdCLGlCQUFWQSxHQUFnQyxPQUFWQSxDQUN4QyxFQUtBMm5CLEVBQVEwOUIsU0FIUyxTQUFVcmxELEdBQ3ZCLE1BQXdCLGlCQUFWQSxHQUFzQkEsR0FBUyxHQUFLQSxFQUFRLEdBQUssR0FBS0EsR0FBU2dWLE9BQU9zd0MsZ0JBQ3hGLEVBRUEzOUIsRUFBUTdsQixRQUFVaEMsTUFBTWdDLFNBQ3BCLFNBQVU5QixHQUNOLE9BQU8sRUFBSTJuQixFQUFRMDlCLFVBQVVybEQsR0FBU0EsRUFBTUssU0FBcUQsbUJBQTFDYixPQUFPTyxVQUFVcUIsU0FBU1ksS0FBS2hDLEVBQzFGLEVBSUoybkIsRUFBUXk5QixjQUhjLFNBQVVHLEdBQzVCLFFBQVNBLEdBQXdCLGlCQUFUQSxLQUFzQixFQUFJNTlCLEVBQVE3bEIsU0FBU3lqRCxFQUN2RSxFQUtBNTlCLEVBQVFvN0IsZ0JBSGdCLFNBQVVwOEMsR0FDOUIsT0FBT2hGLFNBQVNnRixLQUFPQSxHQUFLcU8sT0FBT3JPLElBQU0sQ0FDN0MsRUFLQWdoQixFQUFRdzlCLFNBSFMsU0FBVXgrQyxHQUN2QixNQUE2QyxvQkFBdENuSCxPQUFPTyxVQUFVcUIsU0FBU1ksS0FBSzJFLEVBQzFDLEVBS0FnaEIsRUFBUXU5QixPQUhPLFNBQVV2K0MsR0FDckIsTUFBNkMsa0JBQXRDbkgsT0FBT08sVUFBVXFCLFNBQVNZLEtBQUsyRSxFQUMxQyxFQUtBZ2hCLEVBQVEyNkIsUUFIUSxTQUFVa0QsR0FDdEIsT0FBbUMsSUFBNUJobUQsT0FBT3lJLEtBQUt1OUMsR0FBS25sRCxNQUM1QixFQUVBLE1BQU0wSCxFQUFpQnZJLE9BQU9PLFVBQVVnSSxlQW1CeEM0ZixFQUFRczlCLGdCQWxCZ0IsU0FBVU8sRUFBSy9oQyxFQUFNZ2lDLEdBQ3pDQSxJQUFTQSxFQUFPLElBQUkxN0IsSUFBSSxDQUFDeTdCLEtBQ3pCL2hDLElBQVNBLEVBQU8sSUFDaEIsSUFBSyxNQUFNMEUsS0FBT3E5QixFQUFLLENBQ25CLE1BQU1FLEVBQWNqaUMsRUFBTyxHQUFHQSxLQUFRMEUsSUFBUUEsRUFDeENub0IsRUFBUXdsRCxFQUFJcjlCLEdBQ2xCLElBQUksRUFBSVIsRUFBUXc2QixjQUFjbmlELEdBQzFCLE9BQUl5bEQsRUFBSy9uQixJQUFJMTlCLEdBQ0YsR0FBR3lqQixLQUFRMEUsZ0JBR2xCczlCLEVBQUt6N0IsSUFBSWhxQixJQUNGLEVBQUkybkIsRUFBUXM5QixpQkFBaUJqbEQsRUFBTzBsRCxFQUFhRCxHQUdwRSxDQUNBLE9BQU8sSUFDWCxFQWdCQTk5QixFQUFRcTlCLFdBZFcsU0FBVVEsR0FDekIsS0FBSyxFQUFJNzlCLEVBQVF3NkIsY0FBY3FELEdBQzNCLE9BQU9BLEVBRVgsSUFBSSxFQUFJNzlCLEVBQVF1OUIsUUFBUU0sR0FDcEIsT0FBTyxJQUFJbm1ELE1BQU1tbUQsR0FFckIsTUFBTUcsR0FBUyxFQUFJaCtCLEVBQVE3bEIsU0FBUzBqRCxHQUFPLEdBQUssQ0FBQyxFQUNqRCxJQUFLLE1BQU1yOUIsS0FBT3E5QixFQUFLLENBQ25CLE1BQU14bEQsRUFBUXdsRCxFQUFJcjlCLEdBQ2xCdzlCLEVBQU94OUIsSUFBTyxFQUFJUixFQUFRcTlCLFlBQVlobEQsRUFDMUMsQ0FDQSxPQUFPMmxELENBQ1gsRUFTQWgrQixFQUFRczZCLFVBUFUsU0FBVXVELEdBQ3hCLE1BQU0vaEMsR0FBTyxFQUFJa0UsRUFBUXM5QixpQkFBaUJPLEdBQzFDLEdBQUkvaEMsRUFDQSxNQUFNLElBQUlsakIsTUFBTSxHQUFHd2dELEVBQVlULDhEQUE4RDc4QiwwQ0FBNkMraEMsS0FFOUksT0FBTyxFQUFJNzlCLEVBQVFxOUIsWUFBWVEsRUFDbkMsRUEwQ0E3OUIsRUFBUTA2QixXQXhDVyxTQUFVenlCLEVBQU1nMkIsR0FDL0IsR0FBSWgyQixJQUFTZzJCLEVBQ1QsTUFBTyxDQUFDLEVBRVosS0FBSyxFQUFJaitCLEVBQVF3NkIsY0FBY3Z5QixNQUFVLEVBQUlqSSxFQUFRdzZCLGNBQWN5RCxHQUMvRCxPQUFPQSxFQUVYLE1BQU1yMkMsR0FBSSxFQUFJb1ksRUFBUXM2QixXQUFXcnlCLEdBQzNCL2pCLEdBQUksRUFBSThiLEVBQVFzNkIsV0FBVzJELEdBQzNCQyxFQUFnQnJtRCxPQUFPeUksS0FBS3NILEdBQUcrekMsUUFBTyxDQUFDd0MsRUFBSzM5QixLQUMxQ3BnQixFQUFlL0YsS0FBSzZKLEVBQUdzYyxLQUczQjI5QixFQUFJMzlCLFFBQU9pOEIsR0FGQTBCLElBSVosQ0FBQyxHQUNKLElBQUksRUFBSW4rQixFQUFRdTlCLFFBQVEzMUMsS0FBTSxFQUFJb1ksRUFBUXU5QixRQUFRcjVDLEdBQzlDLE9BQUkwRCxFQUFFcWQsWUFBYy9nQixFQUFFK2dCLFVBQ1gsQ0FBQyxFQUVML2dCLEVBRVgsTUFBTWs2QyxFQUFTdm1ELE9BQU95SSxLQUFLNEQsR0FBR3kzQyxRQUFPLENBQUN3QyxFQUFLMzlCLEtBQ3ZDLElBQUtwZ0IsRUFBZS9GLEtBQUt1TixFQUFHNFksR0FFeEIsT0FEQTI5QixFQUFJMzlCLEdBQU90YyxFQUFFc2MsR0FDTjI5QixFQUVYLE1BQU0xRCxHQUFPLEVBQUl6NkIsRUFBUTA2QixZQUFZOXlDLEVBQUU0WSxHQUFNdGMsRUFBRXNjLElBQy9DLE9BQUksRUFBSVIsRUFBUXc2QixjQUFjQyxLQUFTLEVBQUl6NkIsRUFBUTI2QixTQUFTRixNQUFVLEVBQUl6NkIsRUFBUXU5QixRQUFROUMsSUFDakYsRUFBSXo2QixFQUFRN2xCLFNBQVN5TixNQUFPLEVBQUlvWSxFQUFRN2xCLFNBQVMrSixNQUFTLEVBQUk4YixFQUFRN2xCLFNBQVN5TixLQUFNLEVBQUlvWSxFQUFRN2xCLFNBQVMrSixHQUNwR0EsRUFFSmk2QyxHQUVYQSxFQUFJMzlCLEdBQU9pNkIsRUFDSjBELEVBQUcsR0FDWEQsR0FFSCxjQURPRSxFQUFPQyxTQUNQRCxDQUNYLEVBV0FwK0IsRUFBUWxFLEtBVEssU0FBVStoQyxFQUFLMUMsR0FDeEIsT0FBT0EsRUFBVVEsUUFBTyxDQUFDd0MsRUFBS0csS0FDMUIsR0FBSUgsRUFBSyxDQUNMLE1BQU1JLEVBQWEvc0MsU0FBUzhzQyxFQUFNLElBQzVCM2QsR0FBUSxFQUFJM2dCLEVBQVFvN0IsaUJBQWlCa0QsSUFBU0MsRUFBYSxFQUFJSixFQUFJemxELE9BQVM2bEQsRUFBYUQsRUFDL0YsT0FBTyxFQUFJdCtCLEVBQVF3OUIsVUFBVVcsR0FBT0EsRUFBSXg0QyxPQUFPZzdCLEdBQVN3ZCxFQUFJeGQsRUFDaEUsSUFDRGtkLEVBQ1AsRUFXQTc5QixFQUFRczdCLFVBVFUsU0FBVXgvQixFQUFNempCLEdBTzlCLE1BTmtCLElBQUl5akIsR0FBTTBpQyxVQUNIN0MsUUFBTyxDQUFDd0MsRUFBS0csRUFBTTNkLEtBQ3hDLE1BQU04ZCxHQUFjLEVBQUl6K0IsRUFBUW83QixpQkFBaUJrRCxHQUFRLEdBQUssQ0FBQyxFQUUvRCxPQURBRyxFQUFZSCxHQUFrQixJQUFWM2QsRUFBY3RvQyxFQUFROGxELEVBQ25DTSxDQUFXLEdBQ25CLENBQUMsRUFFUixFQWNBeitCLEVBQVE0N0IsV0FaVyxTQUFVaUMsRUFBSzFDLEdBQzlCLE1BQU11RCxHQUFRLEVBQUkxK0IsRUFBUXM2QixXQUFXdUQsR0FTckMsT0FSQTFDLEVBQVVRLFFBQU8sQ0FBQ3dDLEVBQUtHLEVBQU0zZCxLQUNyQkEsSUFBVXdhLEVBQVV6aUQsT0FBUyxHQUFLeWxELElBQzlCLEVBQUluK0IsRUFBUXc2QixjQUFjMkQsV0FDbkJBLEVBQUlHLEdBR1pILEdBQU9BLEVBQUlHLEtBQ25CSSxHQUNJQSxDQUNYLEVBRUEsTUFBTUMsRUFBYSxTQUFVajZCLEVBQVM5SyxLQUFXZ2xDLEdBQzdDLElBQUtBLElBQVlBLEVBQVFsbUQsT0FDckIsT0FBT2toQixFQUVYLE1BQU01WSxFQUFTNDlDLEVBQVE1NUMsU0FDakIsb0JBQUV3MkMsRUFBbUIsa0JBQUVYLEdBQXNCbjJCLEVBQ25ELElBQUksRUFBSTFFLEVBQVF3NkIsY0FBYzVnQyxLQUFXLEVBQUlvRyxFQUFRdzZCLGNBQWN4NUMsR0FDL0QsSUFBSyxNQUFNd2YsS0FBT3hmLEVBQ2QsSUFBSSxFQUFJZ2YsRUFBUXc2QixjQUFjeDVDLEVBQU93ZixNQUFTLEVBQUlSLEVBQVF3NkIsY0FBYzVnQyxFQUFPNEcsSUFDdEU1RyxFQUFPNEcsS0FDUjVHLEVBQU80RyxHQUFPLENBQUMsR0FFbkJtK0IsRUFBV2o2QixFQUFTOUssRUFBTzRHLEdBQU14ZixFQUFPd2YsU0FHeEMsSUFBSSxFQUFJUixFQUFRN2xCLFNBQVN5ZixHQUFTLENBQzlCLElBQUlpbEMsRUFBYzc5QyxFQUFPd2YsR0FDekIsTUFBTWkrQixFQUFjakQsRUFBc0JwQyxFQUFZViwyQkFBd0IrRCxFQUN6RTVCLElBQ0RnRSxPQUFxQyxJQUFoQkEsRUFBOEJBLEVBQWNqbEMsRUFBT3BJLFNBQVNnUCxFQUFLLE1BRTFGcStCLEVBQWNBLElBQWdCekYsRUFBWVYsc0JBQXdCbUcsRUFBY0osRUFDaEY3a0MsRUFBT3BJLFNBQVNnUCxFQUFLLEtBQU9xK0IsQ0FDaEMsS0FDSyxDQUNELE1BQU14bUQsRUFBUTJJLEVBQU93ZixLQUFTNDRCLEVBQVlWLHNCQUF3QjEzQyxFQUFPd2YsUUFBT2k4QixFQUNoRjdpQyxFQUFPNEcsR0FBT25vQixDQUNsQixDQUlaLE9BQU9zbUQsRUFBV2o2QixFQUFTOUssS0FBV2dsQyxFQUMxQyxFQU9BNStCLEVBQVE0NkIsVUFOVSxTQUFVaGhDLEVBQVE1WSxFQUFRMGpCLEdBQ3hDLE9BQU9pNkIsRUFBVyxDQUNkbkQsb0JBQXFCOTJCLGFBQXlDLEVBQVNBLEVBQVE4MkIsb0JBQy9FWCxrQkFBbUJuMkIsYUFBeUMsRUFBU0EsRUFBUW0yQixvQkFDOUUsRUFBSTc2QixFQUFRczZCLFdBQVcxZ0MsSUFBUyxFQUFJb0csRUFBUXM2QixXQUFXdDVDLEdBQzlELEVBRUEsTUFBTTg5QyxFQUFxQixTQUFVakIsRUFBS2tCLEVBQWEsR0FBSWhwQyxFQUFNaXBDLEVBQVVDLEdBQ3ZFLEtBQUssRUFBSWovQixFQUFRdzZCLGNBQWNxRCxHQUMzQixPQUFPQSxFQUVYLElBQUssTUFBTXI5QixLQUFPcTlCLEVBQUssQ0FDbkIsTUFBTXhsRCxFQUFRd2xELEVBQUlyOUIsR0FDWjArQixHQUFpQixFQUFJbC9CLEVBQVE3bEIsU0FBUzBqRCxHQUN0Q3NCLEVBQWFILEVBQVdBLEVBQVcsSUFBTXgrQixFQUFNQSxFQUN2QyxPQUFWbm9CLElBQ0UwZCxJQUFTc2pDLEVBQVEwQixXQUFXQyxZQUFpRCxJQUFwQytELEVBQVdqa0QsUUFBUXFrRCxJQUN6RHBwQyxJQUFTc2pDLEVBQVEwQixXQUFXVyxZQUFpRCxJQUFwQ3FELEVBQVdqa0QsUUFBUXFrRCxLQUNqRUQsSUFDQXJCLEVBQUlyc0MsU0FBU2dQLEVBQUssVUFBT2k4QixRQUVmQSxJQUFWcGtELEdBQ0E0bUQsR0FDQWxwQyxJQUFTc2pDLEVBQVEwQixXQUFXVyxZQUNRLElBQXBDcUQsRUFBV2prRCxRQUFRcWtELElBQ25CRCxJQUNBckIsRUFBSXJzQyxTQUFTZ1AsRUFBSyxLQUFPNDRCLEVBQVlWLHVCQUV6Q29HLEVBQW1Cem1ELEVBQU8wbUQsRUFBWWhwQyxFQUFNb3BDLEVBQVlGLEVBQzVELENBQ0osRUFNQWovQixFQUFRNjZCLGtCQUxrQixTQUFVWSxFQUFlc0QsRUFBWWhwQyxFQUFNa3BDLEdBQ2pFLE1BQU1QLEdBQVEsRUFBSTErQixFQUFRczZCLFdBQVdtQixHQUVyQyxPQURBcUQsRUFBbUJKLEVBQU9LLEVBQVlocEMsRUFBTSxHQUFJa3BDLEdBQ3pDUCxDQUNYLEVBS0ExK0IsRUFBUW85QixPQUhPLFNBQVUva0QsRUFBT3NvQyxFQUFPbm9DLEdBQ25DLE9BQU9BLEVBQUtzQyxRQUFRekMsS0FBV3NvQyxDQUNuQyxFQW9CQTNnQixFQUFRbTlCLHlCQWxCeUIsU0FBVXRCLEdBQ3ZDLE9BQU9BLEVBQUtGLFFBQU8sQ0FBQ3lELEVBQVV0akMsS0FDMUIsTUFBTXVqQyxFQUFxQnhELEVBQUtnQixRQUFReUMsR0FBVUEsSUFBVXhqQyxJQUN0RHlqQyxFQUFrQjFELEVBQUtnQixRQUFReUMsR0FDWSxLQUFyQ3hqQyxFQUFPLEtBQUtoaEIsUUFBUXdrRCxFQUFRLFFBRWxDLFdBQUVFLEVBQVUsUUFBRUMsR0FBWUwsRUFDMUJNLEVBQWtCTCxFQUFtQjNtRCxPQUFTLElBQW1DLElBQTlCOG1ELEVBQVcxa0QsUUFBUWdoQixHQUN0RTZqQyxFQUFlSixFQUFnQjdtRCxPQUFTLEVBQzlDLE1BQU8sQ0FDSDhtRCxXQUFZLElBQUlBLEtBQWdCRSxFQUFrQkwsRUFBcUIsSUFDdkVJLFFBQVMsSUFBSUEsS0FBYUUsRUFBZUosRUFBa0IsSUFBSzFDLE9BQU83OEIsRUFBUW85QixRQUFRNTlDLE9BQzFGLEdBQ0YsQ0FDQ2dnRCxXQUFZLEdBQ1pDLFFBQVMsSUFFakIsRUFvQkF6L0IsRUFBUTg2Qix5QkFsQnlCLFNBQVUveUMsRUFBUS9MLEVBQU0rWixHQUNyRCxNQUFNNnBDLEVBQVc3cEMsSUFBU3NqQyxFQUFRMEIsV0FBV0MsVUFBWSxZQUFjLFlBQ2pFNkUsRUFBa0IsR0FBR3pHLEVBQVlULDJCQUEyQmlILG1CQUM1REUsRUFBa0Isb0JBQW9CL3BDLElBQVNzakMsRUFBUTBCLFdBQVdDLFVBQVksUUFBVSw2QkFDOUYsS0FBSyxFQUFJaDdCLEVBQVF3OUIsVUFBVXhoRCxJQUFTQSxFQUFLdEQsT0FBUyxFQUM5QyxNQUFNLElBQUlFLE1BQU0sR0FBR2luRCx3Q0FBc0RDLEtBRTdFLElBQUsvM0MsSUFBV0EsRUFBT3JQLE9BQ25CLE9BRUosTUFBTSxXQUFFOG1ELEVBQVUsUUFBRUMsSUFBWSxFQUFJei9CLEVBQVFtOUIsMEJBQTBCcDFDLEdBQ3RFLEdBQUl5M0MsRUFBVzltRCxPQUFTLEVBQ3BCLE1BQU0sSUFBSUUsTUFBTSxHQUFHaW5ELDJCQUF5Q3QyQyxLQUFLcUYsVUFBVTR3QyxVQUFtQk0sS0FFbEcsR0FBSUwsRUFBUS9tRCxPQUFTLEVBQ2pCLE1BQU0sSUFBSUUsTUFBTSxHQUFHaW5ELGtGQUFnR3QyQyxLQUFLcUYsVUFBVTZ3QyxVQUFnQkssSUFFMUosRUFjQTkvQixFQUFRbzZCLG9CQVpvQixTQUFVRCxHQUNsQyxLQUFLLEVBQUluNkIsRUFBUTdsQixTQUFTZ2dELEdBQ3RCLE9BRUosTUFBTTc1QyxHQUFRNjVDLGFBQStDLEVBQVNBLEVBQVc5QyxLQUFLdjZDLEdBQU1BLEVBQUVnOUMsaUJBQWdCK0MsUUFBUXAxQyxHQUFNQSxNQUFPLEdBQ25JLEdBQUluSCxFQUFLNUgsT0FBUSxDQUNiLE1BQU04bUQsRUFBYWwvQyxFQUFLdThDLFFBQU8sQ0FBQ3I4QixFQUFLbWdCLElBQVVyZ0MsRUFBS3hGLFFBQVEwbEIsS0FBU21nQixJQUNyRSxHQUFJNmUsRUFBVzltRCxPQUNYLE1BQU0sSUFBSUUsTUFBTSxHQUFHd2dELEVBQVlULDJQQUEyUHB2QyxLQUFLcUYsVUFBVTR3QyxLQUVqVCxDQUNKLEVBZUF4L0IsRUFBUW84QixnQkFiZ0IsVUFBVSxVQUFFM0MsRUFBUyxVQUFFcjVCLElBQzNDLEdBQUlxNUIsR0FBYUEsRUFBVS9nRCxRQUFVMG5CLEdBQWFBLEVBQVUxbkIsT0FDeEQsTUFBTSxJQUFJRSxNQUFNLEdBQUd3Z0QsRUFBWVQsdUlBRW5DLEdBQUljLEVBQVcsQ0FDWCxNQUFNLFdBQUUrRixFQUFVLFFBQUVDLElBQVksRUFBSXovQixFQUFRbTlCLDBCQUEwQjFELElBQ3RFLEVBQUl6NUIsRUFBUWs5QixZQUFZLENBQUVzQyxhQUFZQyxXQUFXLFlBQ3JELENBQ0EsR0FBSXIvQixFQUFXLENBQ1gsTUFBTSxXQUFFby9CLEVBQVUsUUFBRUMsSUFBWSxFQUFJei9CLEVBQVFtOUIsMEJBQTBCLzhCLElBQ3RFLEVBQUlKLEVBQVFrOUIsWUFBWSxDQUFFc0MsYUFBWUMsV0FBVyxZQUNyRCxDQUNKLEVBVUF6L0IsRUFBUWs5QixXQVJXLFVBQVUsV0FBRXNDLEVBQVUsUUFBRUMsR0FBV0csR0FDbEQsR0FBSUosRUFBVzltRCxPQUNYLE1BQU0sSUFBSUUsTUFBTSxHQUFHd2dELEVBQVlULG1EQUFtRGlILFVBQWlCcjJDLEtBQUtxRixVQUFVNHdDLE1BRXRILEdBQUlDLEVBQVEvbUQsT0FDUixNQUFNLElBQUlFLE1BQU0sR0FBR3dnRCxFQUFZVCwyREFBMkRpSCx3RkFBK0ZyMkMsS0FBS3FGLFVBQVU2d0MsS0FFaE4sRUE2QkF6L0IsRUFBUXM4QixpQkEzQmlCLFNBQVVULEdBQy9CLE9BQUssRUFBSTc3QixFQUFRN2xCLFNBQVMwaEQsR0FHbkJBLEVBQUtnQixPQUFPNzhCLEVBQVFvOUIsUUFBUXpCLFFBQU8sQ0FBQ3dDLEVBQUtHLEtBQzVDLE1BQU1uRCxFQUFZbUQsRUFBS3RsRCxNQUFNLEtBQ3ZCK21ELEVBQVU1RSxFQUFVLEdBQ3BCci9CLEVBQU9xL0IsRUFBVXpnRCxNQUFNLEdBQUdpSCxLQUFLLFdBQVE4NkMsRUFDdkN1RCxFQUFrQjdCLEVBQUl0QixRQUFRb0QsR0FDcEJwb0QsT0FBT3lJLEtBQUsyL0MsR0FBUSxLQUNqQkYsSUFDaEIsR0FDR0csRUFBZ0JGLEVBQWtCbm9ELE9BQU9zb0QsT0FBT0gsR0FBaUIsUUFBS3ZELEVBWTVFLE9BWEt1RCxHQUNEN0IsRUFBSTErQyxLQUFLLENBQ0wsQ0FBQ3NnRCxHQUFVamtDLEVBQU8sQ0FBQ0EsUUFBUTJnQyxJQUcvQnVELElBQW9CRSxHQUFpQnBrQyxJQUNyQ2trQyxFQUFnQkQsR0FBVyxDQUFDamtDLElBRTVCa2tDLEdBQW1CRSxHQUFpQnBrQyxHQUNwQ29rQyxFQUFjemdELEtBQUtxYyxHQUVoQnFpQyxDQUFHLEdBQ1gsSUF2QlEsRUF3QmYsOEJDdFVBbitCLEVBQVFvZ0MsWUFBYSxFQUNyQnBnQyxFQUFBLFFBTUEsU0FBMEJqSyxHQUN4QixJQUFJa21DLEdBQVUsRUFBSW9FLEVBQVlsSixTQUFTcGhDLEdBQ3ZDLE1BQU8sQ0FDTHVxQyxRQUFTLFNBQWlCOS9CLEdBQ3hCLE9BQU8sSUFBSStXLFNBQVEsU0FBVUcsRUFBUzZvQixHQUNwQzdvQixFQUFRdWtCLEVBQVFxRSxRQUFROS9CLEdBQzFCLEdBQ0YsRUFDQWdnQyxRQUFTLFNBQWlCaGdDLEVBQUtvOUIsR0FDN0IsT0FBTyxJQUFJcm1CLFNBQVEsU0FBVUcsRUFBUzZvQixHQUNwQzdvQixFQUFRdWtCLEVBQVF1RSxRQUFRaGdDLEVBQUtvOUIsR0FDL0IsR0FDRixFQUNBNkMsV0FBWSxTQUFvQmpnQyxHQUM5QixPQUFPLElBQUkrVyxTQUFRLFNBQVVHLEVBQVM2b0IsR0FDcEM3b0IsRUFBUXVrQixFQUFRd0UsV0FBV2pnQyxHQUM3QixHQUNGLEVBRUosRUF2QkEsSUFFZ0NxOUIsRUFGNUJ3QyxHQUU0QnhDLEVBRlMsRUFBUSxNQUVJQSxFQUFJdUMsV0FBYXZDLEVBQU0sQ0FBRTFHLFFBQVMwRyw0QkNGdkYsU0FBUzZDLEVBQVE3QyxHQUF3VCxPQUF0TzZDLEVBQXJELG1CQUFYL21ELFFBQW9ELGlCQUFwQkEsT0FBT0csU0FBbUMsU0FBaUIrakQsR0FBTyxjQUFjQSxDQUFLLEVBQXNCLFNBQWlCQSxHQUFPLE9BQU9BLEdBQXlCLG1CQUFYbGtELFFBQXlCa2tELEVBQUk3aUQsY0FBZ0JyQixRQUFVa2tELElBQVFsa0QsT0FBT3ZCLFVBQVksZ0JBQWtCeWxELENBQUssRUFBWTZDLEVBQVE3QyxFQUFNLENBRTlWLFNBQVM4QyxJQUFRLENBTGpCM2dDLEVBQVFvZ0MsWUFBYSxFQUNyQnBnQyxFQUFBLFFBK0JBLFNBQW9CakssR0FDbEIsSUFBSTZxQyxFQUFjLEdBQUdwOEMsT0FBT3VSLEVBQU0sV0FDbEMsT0FyQkYsU0FBb0I2cUMsR0FDbEIsR0FBb0UsWUFBL0Msb0JBQVRwb0QsS0FBdUIsWUFBY2tvRCxFQUFRbG9ELFVBQXlCb29ELEtBQWVwb0QsTUFDL0YsT0FBTyxFQUdULElBQ0UsSUFBSXlqRCxFQUFVempELEtBQUtvb0QsR0FDZkMsRUFBVSxpQkFBaUJyOEMsT0FBT284QyxFQUFhLFNBQ25EM0UsRUFBUXVFLFFBQVFLLEVBQVMsUUFDekI1RSxFQUFRcUUsUUFBUU8sR0FDaEI1RSxFQUFRd0UsV0FBV0ksRUFDckIsQ0FBRSxNQUFPM25ELEdBRVAsT0FBTyxDQUNULENBRUEsT0FBTyxDQUNULENBSU00bkQsQ0FBV0YsR0FBcUJwb0QsS0FBS29vRCxHQUtoQ0csQ0FFWCxFQWxDQSxJQUFJQSxFQUFjLENBQ2hCVCxRQUFTSyxFQUNUSCxRQUFTRyxFQUNURixXQUFZRSxtQ0NMa0I5QyxFQUpoQzc5QixFQUFRLE9BQVUsRUFNbEIsSUFBSWdoQyxHQUFXLElBRmlCbkQsRUFGZSxFQUFRLE9BRUZBLEVBQUl1QyxXQUFhdkMsRUFBTSxDQUFFMUcsUUFBUzBHLElBRWxEMUcsU0FBUyxTQUU5Q24zQixFQUFRLEVBQVVnaEMsNEJDRkwsU0FBU3puRCxFQUFFdkIsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFVSxPQUFPVixFQUFFeUgsS0FBS3hILEdBQUdELEVBQUUsS0FBSyxFQUFFRSxHQUFHLENBQUMsSUFBSWUsRUFBRWYsRUFBRSxJQUFJLEVBQUVnQixFQUFFbEIsRUFBRWlCLEdBQUcsS0FBRyxFQUFFUixFQUFFUyxFQUFFakIsSUFBMEIsTUFBTUQsRUFBN0JBLEVBQUVpQixHQUFHaEIsRUFBRUQsRUFBRUUsR0FBR2dCLEVBQUVoQixFQUFFZSxDQUFjLENBQUMsQ0FBQyxTQUFTaUMsRUFBRWxELEdBQUcsT0FBTyxJQUFJQSxFQUFFVSxPQUFPLEtBQUtWLEVBQUUsRUFBRSxDQUFDLFNBQVN5UCxFQUFFelAsR0FBRyxHQUFHLElBQUlBLEVBQUVVLE9BQU8sT0FBTyxLQUFLLElBQUlULEVBQUVELEVBQUUsR0FBR0UsRUFBRUYsRUFBRTJSLE1BQU0sR0FBR3pSLElBQUlELEVBQUUsQ0FBQ0QsRUFBRSxHQUFHRSxFQUFFRixFQUFFLElBQUksSUFBSWlCLEVBQUUsRUFBRUMsRUFBRWxCLEVBQUVVLE9BQU9tRixFQUFFM0UsSUFBSSxFQUFFRCxFQUFFNEUsR0FBRyxDQUFDLElBQUk1RCxFQUFFLEdBQUdoQixFQUFFLEdBQUcsRUFBRWtILEVBQUVuSSxFQUFFaUMsR0FBRzROLEVBQUU1TixFQUFFLEVBQUUrRSxFQUFFaEgsRUFBRTZQLEdBQUcsR0FBRyxFQUFFcFAsRUFBRTBILEVBQUVqSSxHQUFHMlAsRUFBRTNPLEdBQUcsRUFBRVQsRUFBRXVHLEVBQUVtQixJQUFJbkksRUFBRWlCLEdBQUcrRixFQUFFaEgsRUFBRTZQLEdBQUczUCxFQUFFZSxFQUFFNE8sSUFBSTdQLEVBQUVpQixHQUFHa0gsRUFBRW5JLEVBQUVpQyxHQUFHL0IsRUFBRWUsRUFBRWdCLE9BQVEsTUFBRzROLEVBQUUzTyxHQUFHLEVBQUVULEVBQUV1RyxFQUFFOUcsSUFBMEIsTUFBTUYsRUFBN0JBLEVBQUVpQixHQUFHK0YsRUFBRWhILEVBQUU2UCxHQUFHM1AsRUFBRWUsRUFBRTRPLENBQWE3UCxDQUFDLENBQUMsQ0FBQyxPQUFPQyxDQUFDLENBQzNjLFNBQVNRLEVBQUVULEVBQUVDLEdBQUcsSUFBSUMsRUFBRUYsRUFBRWlwRCxVQUFVaHBELEVBQUVncEQsVUFBVSxPQUFPLElBQUkvb0QsRUFBRUEsRUFBRUYsRUFBRW1ZLEdBQUdsWSxFQUFFa1ksRUFBRSxDQUFDLEdBQUcsaUJBQWtCK3dDLGFBQWEsbUJBQW9CQSxZQUFZbjBCLElBQUksQ0FBQyxJQUFJbmxCLEVBQUVzNUMsWUFBWWxoQyxFQUFRZ0ssYUFBYSxXQUFXLE9BQU9waUIsRUFBRW1sQixLQUFLLENBQUMsS0FBSyxDQUFDLElBQUk1a0IsRUFBRXpRLEtBQUttRSxFQUFFc00sRUFBRTRrQixNQUFNL00sRUFBUWdLLGFBQWEsV0FBVyxPQUFPN2hCLEVBQUU0a0IsTUFBTWx4QixDQUFDLENBQUMsQ0FBQyxJQUFJcUksRUFBRSxHQUFHcEgsRUFBRSxHQUFHMkgsRUFBRSxFQUFFbkgsRUFBRSxLQUFLK0ssRUFBRSxFQUFFcEosR0FBRSxFQUFHaEUsR0FBRSxFQUFHZ0YsR0FBRSxFQUFHTSxFQUFFLG1CQUFvQkUsV0FBV0EsV0FBVyxLQUFLQyxFQUFFLG1CQUFvQjBILGFBQWFBLGFBQWEsS0FBS3pILEVBQUUsb0JBQXFCd2dELGFBQWFBLGFBQWEsS0FDblQsU0FBUzU0QyxFQUFFdlEsR0FBRyxJQUFJLElBQUlDLEVBQUVpRCxFQUFFNEIsR0FBRyxPQUFPN0UsR0FBRyxDQUFDLEdBQUcsT0FBT0EsRUFBRXVQLFNBQVNDLEVBQUUzSyxPQUFRLE1BQUc3RSxFQUFFbXBELFdBQVdwcEQsR0FBZ0QsTUFBOUN5UCxFQUFFM0ssR0FBRzdFLEVBQUVncEQsVUFBVWhwRCxFQUFFb3BELGVBQWU5bkQsRUFBRTJLLEVBQUVqTSxFQUFhLENBQUNBLEVBQUVpRCxFQUFFNEIsRUFBRSxDQUFDLENBQUMsU0FBU00sRUFBRXBGLEdBQWEsR0FBVmlJLEdBQUUsRUFBR3NJLEVBQUV2USxJQUFPaUQsRUFBRSxHQUFHLE9BQU9DLEVBQUVnSixHQUFHakosR0FBRSxFQUFHb0csRUFBRWxFLE9BQU8sQ0FBQyxJQUFJbEYsRUFBRWlELEVBQUU0QixHQUFHLE9BQU83RSxHQUFHcUwsRUFBRWxHLEVBQUVuRixFQUFFbXBELFVBQVVwcEQsRUFBRSxDQUFDLENBQ3JhLFNBQVNtRixFQUFFbkYsRUFBRUMsR0FBR2dELEdBQUUsRUFBR2dGLElBQUlBLEdBQUUsRUFBR1MsRUFBRXlELEdBQUdBLEdBQUcsR0FBR2xGLEdBQUUsRUFBRyxJQUFJL0csRUFBRW1RLEVBQUUsSUFBUyxJQUFMRSxFQUFFdFEsR0FBT3FGLEVBQUVwQyxFQUFFZ0osR0FBRyxPQUFPNUcsTUFBTUEsRUFBRStqRCxlQUFlcHBELElBQUlELElBQUk4RixNQUFNLENBQUMsSUFBSTdFLEVBQUVxRSxFQUFFa0ssU0FBUyxHQUFHLG1CQUFvQnZPLEVBQUUsQ0FBQ3FFLEVBQUVrSyxTQUFTLEtBQUthLEVBQUUvSyxFQUFFZ2tELGNBQWMsSUFBSXBvRCxFQUFFRCxFQUFFcUUsRUFBRStqRCxnQkFBZ0JwcEQsR0FBR0EsRUFBRStuQixFQUFRZ0ssZUFBZSxtQkFBb0I5d0IsRUFBRW9FLEVBQUVrSyxTQUFTdE8sRUFBRW9FLElBQUlwQyxFQUFFZ0osSUFBSXVELEVBQUV2RCxHQUFHcUUsRUFBRXRRLEVBQUUsTUFBTXdQLEVBQUV2RCxHQUFHNUcsRUFBRXBDLEVBQUVnSixFQUFFLENBQUMsR0FBRyxPQUFPNUcsRUFBRSxJQUFJTyxHQUFFLE1BQU8sQ0FBQyxJQUFJNUQsRUFBRWlCLEVBQUU0QixHQUFHLE9BQU83QyxHQUFHcUosRUFBRWxHLEVBQUVuRCxFQUFFbW5ELFVBQVVucEQsR0FBRzRGLEdBQUUsQ0FBRSxDQUFDLE9BQU9BLENBQUMsQ0FBQyxRQUFRUCxFQUFFLEtBQUsrSyxFQUFFblEsRUFBRStHLEdBQUUsQ0FBRSxDQUFDLENBRDFhLG9CQUFxQnlELGdCQUFXLElBQVNBLFVBQVU2K0MsaUJBQVksSUFBUzcrQyxVQUFVNitDLFdBQVdDLGdCQUFnQjkrQyxVQUFVNitDLFdBQVdDLGVBQWVqbkQsS0FBS21JLFVBQVU2K0MsWUFDMlEsSUFDelA5N0MsRUFENlBsSSxHQUFFLEVBQUdnSCxFQUFFLEtBQUtKLEdBQUcsRUFBRXBILEVBQUUsRUFBRXNOLEdBQUcsRUFDdmMsU0FBU3ZNLElBQUksUUFBT2tpQixFQUFRZ0ssZUFBZTNmLEVBQUV0TixFQUFPLENBQUMsU0FBUytPLElBQUksR0FBRyxPQUFPdkgsRUFBRSxDQUFDLElBQUl2TSxFQUFFZ29CLEVBQVFnSyxlQUFlM2YsRUFBRXJTLEVBQUUsSUFBSUMsR0FBRSxFQUFHLElBQUlBLEVBQUVzTSxHQUFFLEVBQUd2TSxFQUFFLENBQUMsUUFBUUMsRUFBRXdOLEtBQUtsSSxHQUFFLEVBQUdnSCxFQUFFLEtBQUssQ0FBQyxNQUFNaEgsR0FBRSxDQUFFLENBQU8sR0FBRyxtQkFBb0JvRCxFQUFFOEUsRUFBRSxXQUFXOUUsRUFBRW1MLEVBQUUsT0FBTyxHQUFHLG9CQUFxQjIxQyxlQUFlLENBQUMsSUFBSTkwQyxFQUFFLElBQUk4MEMsZUFBZTcwQyxFQUFFRCxFQUFFKzBDLE1BQU0vMEMsRUFBRWcxQyxNQUFNQyxVQUFVOTFDLEVBQUVyRyxFQUFFLFdBQVdtSCxFQUFFaTFDLFlBQVksS0FBSyxDQUFDLE1BQU1wOEMsRUFBRSxXQUFXbEYsRUFBRXVMLEVBQUUsRUFBRSxFQUFFLFNBQVN6SyxFQUFFckosR0FBR3VNLEVBQUV2TSxFQUFFdUYsSUFBSUEsR0FBRSxFQUFHa0ksSUFBSSxDQUFDLFNBQVNuQyxFQUFFdEwsRUFBRUMsR0FBR2tNLEVBQUU1RCxHQUFFLFdBQVd2SSxFQUFFZ29CLEVBQVFnSyxlQUFlLEdBQUUveEIsRUFBRSxDQUM1ZCtuQixFQUFRc0ssc0JBQXNCLEVBQUV0SyxFQUFRa0ssMkJBQTJCLEVBQUVsSyxFQUFRcUsscUJBQXFCLEVBQUVySyxFQUFRb0ssd0JBQXdCLEVBQUVwSyxFQUFROGhDLG1CQUFtQixLQUFLOWhDLEVBQVFtSyw4QkFBOEIsRUFBRW5LLEVBQVE2Six3QkFBd0IsU0FBUzd4QixHQUFHQSxFQUFFd1AsU0FBUyxJQUFJLEVBQUV3WSxFQUFRK2hDLDJCQUEyQixXQUFXOW1ELEdBQUdnRSxJQUFJaEUsR0FBRSxFQUFHb0csRUFBRWxFLEdBQUcsRUFDMVU2aUIsRUFBUWdpQyx3QkFBd0IsU0FBU2hxRCxHQUFHLEVBQUVBLEdBQUcsSUFBSUEsRUFBRTBELFFBQVFDLE1BQU0sbUhBQW1Ib0IsRUFBRSxFQUFFL0UsRUFBRVcsS0FBS3FZLE1BQU0sSUFBSWhaLEdBQUcsQ0FBQyxFQUFFZ29CLEVBQVFpSyxpQ0FBaUMsV0FBVyxPQUFPNWhCLENBQUMsRUFBRTJYLEVBQVFpaUMsOEJBQThCLFdBQVcsT0FBTy9tRCxFQUFFZ0osRUFBRSxFQUFFOGIsRUFBUWtpQyxjQUFjLFNBQVNscUQsR0FBRyxPQUFPcVEsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJcFEsRUFBRSxFQUFFLE1BQU0sUUFBUUEsRUFBRW9RLEVBQUUsSUFBSW5RLEVBQUVtUSxFQUFFQSxFQUFFcFEsRUFBRSxJQUFJLE9BQU9ELEdBQUcsQ0FBQyxRQUFRcVEsRUFBRW5RLENBQUMsQ0FBQyxFQUFFOG5CLEVBQVFtaUMsd0JBQXdCLFdBQVcsRUFDOWZuaUMsRUFBUStKLHNCQUFzQixXQUFXLEVBQUUvSixFQUFRb2lDLHlCQUF5QixTQUFTcHFELEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sUUFBUUEsRUFBRSxFQUFFLElBQUlFLEVBQUVtUSxFQUFFQSxFQUFFclEsRUFBRSxJQUFJLE9BQU9DLEdBQUcsQ0FBQyxRQUFRb1EsRUFBRW5RLENBQUMsQ0FBQyxFQUNoTThuQixFQUFRNEosMEJBQTBCLFNBQVM1eEIsRUFBRUMsRUFBRUMsR0FBRyxJQUFJZSxFQUFFK21CLEVBQVFnSyxlQUE4RixPQUF0Qzl4QixFQUF6QyxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBZSxpQkFBWkEsRUFBRUEsRUFBRW1xRCxRQUE2QixFQUFFbnFELEVBQUVlLEVBQUVmLEVBQU9lLEVBQVNqQixHQUFHLEtBQUssRUFBRSxJQUFJa0IsR0FBRyxFQUFFLE1BQU0sS0FBSyxFQUFFQSxFQUFFLElBQUksTUFBTSxLQUFLLEVBQUVBLEVBQUUsV0FBVyxNQUFNLEtBQUssRUFBRUEsRUFBRSxJQUFJLE1BQU0sUUFBUUEsRUFBRSxJQUFtTixPQUF6TWxCLEVBQUUsQ0FBQ21ZLEdBQUcxTCxJQUFJK0MsU0FBU3ZQLEVBQUVxcEQsY0FBY3RwRCxFQUFFb3BELFVBQVVscEQsRUFBRW1wRCxlQUF2RG5vRCxFQUFFaEIsRUFBRWdCLEVBQW9FK25ELFdBQVcsR0FBRy9vRCxFQUFFZSxHQUFHakIsRUFBRWlwRCxVQUFVL29ELEVBQUVxQixFQUFFdUQsRUFBRTlFLEdBQUcsT0FBT2tELEVBQUVnSixJQUFJbE0sSUFBSWtELEVBQUU0QixLQUFLbUQsR0FBR1MsRUFBRXlELEdBQUdBLEdBQUcsR0FBR2xFLEdBQUUsRUFBR3FELEVBQUVsRyxFQUFFbEYsRUFBRWUsTUFBTWpCLEVBQUVpcEQsVUFBVS9uRCxFQUFFSyxFQUFFMkssRUFBRWxNLEdBQUdpRCxHQUFHZ0UsSUFBSWhFLEdBQUUsRUFBR29HLEVBQUVsRSxLQUFZbkYsQ0FBQyxFQUNuZWdvQixFQUFROEoscUJBQXFCaHNCLEVBQUVraUIsRUFBUXNpQyxzQkFBc0IsU0FBU3RxRCxHQUFHLElBQUlDLEVBQUVvUSxFQUFFLE9BQU8sV0FBVyxJQUFJblEsRUFBRW1RLEVBQUVBLEVBQUVwUSxFQUFFLElBQUksT0FBT0QsRUFBRXNDLE1BQU14QixLQUFLMEIsVUFBVSxDQUFDLFFBQVE2TixFQUFFblEsQ0FBQyxDQUFDLENBQUMsOEJDZjdKNm5CLEVBQU9DLFFBQVUsRUFBakIsY0NERkQsRUFBT0MsUUFBVSxTQUFzQnVpQyxFQUFNQyxFQUFNcmpDLEVBQVNzakMsR0FDMUQsSUFBSUMsRUFBTXZqQyxFQUFVQSxFQUFROWtCLEtBQUtvb0QsRUFBZ0JGLEVBQU1DLFFBQVEsRUFFL0QsUUFBWSxJQUFSRSxFQUNGLFFBQVNBLEVBR1gsR0FBSUgsSUFBU0MsRUFDWCxPQUFPLEVBR1QsR0FBb0IsaUJBQVRELElBQXNCQSxHQUF3QixpQkFBVEMsSUFBc0JBLEVBQ3BFLE9BQU8sRUFHVCxJQUFJRyxFQUFROXFELE9BQU95SSxLQUFLaWlELEdBQ3BCSyxFQUFRL3FELE9BQU95SSxLQUFLa2lELEdBRXhCLEdBQUlHLEVBQU1qcUQsU0FBV2txRCxFQUFNbHFELE9BQ3pCLE9BQU8sRUFNVCxJQUhBLElBQUltcUQsRUFBa0JockQsT0FBT08sVUFBVWdJLGVBQWU3RixLQUFLaW9ELEdBR2xETSxFQUFNLEVBQUdBLEVBQU1ILEVBQU1qcUQsT0FBUW9xRCxJQUFPLENBQzNDLElBQUl0aUMsRUFBTW1pQyxFQUFNRyxHQUVoQixJQUFLRCxFQUFnQnJpQyxHQUNuQixPQUFPLEVBR1QsSUFBSXVpQyxFQUFTUixFQUFLL2hDLEdBQ2R3aUMsRUFBU1IsRUFBS2hpQyxHQUlsQixJQUFZLEtBRlpraUMsRUFBTXZqQyxFQUFVQSxFQUFROWtCLEtBQUtvb0QsRUFBZ0JNLEVBQVFDLEVBQVF4aUMsUUFBTyxTQUV0QyxJQUFSa2lDLEdBQWtCSyxJQUFXQyxFQUNqRCxPQUFPLENBRVgsQ0FFQSxPQUFPLENBQ1QsNkJDcENhLElBQUk5cEQsRUFBRSxFQUFRLEtBQTRFdU8sRUFBRSxtQkFBb0I1UCxPQUFPaXhCLEdBQUdqeEIsT0FBT2l4QixHQUExRyxTQUFXOXdCLEVBQUVDLEdBQUcsT0FBT0QsSUFBSUMsSUFBSSxJQUFJRCxHQUFHLEVBQUVBLEdBQUksRUFBRUMsSUFBSUQsR0FBSUEsR0FBR0MsR0FBSUEsQ0FBQyxFQUFpRDJQLEVBQUUxTyxFQUFFc3RDLFNBQVN2c0MsRUFBRWYsRUFBRStzQyxVQUFVcCtCLEVBQUUzTyxFQUFFa3RDLGdCQUFnQmorQixFQUFFalAsRUFBRXV0QyxjQUN0TSxTQUFTdmlDLEVBQUVsTSxHQUFHLElBQUlDLEVBQUVELEVBQUVpc0MsWUFBWWpzQyxFQUFFQSxFQUFFSyxNQUFNLElBQUksSUFBSVksRUFBRWhCLElBQUksT0FBT3dQLEVBQUV6UCxFQUFFaUIsRUFBRSxDQUFDLE1BQU1NLEdBQUcsT0FBTSxDQUFFLENBQUMsQ0FBNEIsSUFBSWtMLEVBQUUsb0JBQXFCak4sYUFBUSxJQUFxQkEsT0FBT2tILGVBQVUsSUFBcUJsSCxPQUFPa0gsU0FBU0MsY0FBekksU0FBVzNHLEVBQUVDLEdBQUcsT0FBT0EsR0FBRyxFQUQrRixTQUFXRCxFQUFFQyxHQUFHLElBQUlnQixFQUFFaEIsSUFBSXNCLEVBQUVxTyxFQUFFLENBQUNxN0MsS0FBSyxDQUFDNXFELE1BQU1ZLEVBQUVnckMsWUFBWWhzQyxLQUFLQyxFQUFFcUIsRUFBRSxHQUFHMHBELEtBQUt4cUQsRUFBRWMsRUFBRSxHQUF3SixPQUFySnNPLEdBQUUsV0FBVzNQLEVBQUVHLE1BQU1ZLEVBQUVmLEVBQUUrckMsWUFBWWhzQyxFQUFFaU0sRUFBRWhNLElBQUlPLEVBQUUsQ0FBQ3dxRCxLQUFLL3FELEdBQUcsR0FBRSxDQUFDRixFQUFFaUIsRUFBRWhCLElBQUlnQyxHQUFFLFdBQTZCLE9BQWxCaUssRUFBRWhNLElBQUlPLEVBQUUsQ0FBQ3dxRCxLQUFLL3FELElBQVdGLEdBQUUsV0FBV2tNLEVBQUVoTSxJQUFJTyxFQUFFLENBQUN3cUQsS0FBSy9xRCxHQUFHLEdBQUUsR0FBRSxDQUFDRixJQUFJbVEsRUFBRWxQLEdBQVVBLENBQUMsRUFDNU0rbUIsRUFBUTZtQiwwQkFBcUIsSUFBUzN0QyxFQUFFMnRDLHFCQUFxQjN0QyxFQUFFMnRDLHFCQUFxQnBpQyw4QkNEN1QsSUFBSXZKLEVBQUUsRUFBUSxLQUFTMk0sRUFBRSxFQUFRLEtBQW1HaE0sRUFBRSxtQkFBb0JoRSxPQUFPaXhCLEdBQUdqeEIsT0FBT2l4QixHQUExRyxTQUFXOXdCLEVBQUVDLEdBQUcsT0FBT0QsSUFBSUMsSUFBSSxJQUFJRCxHQUFHLEVBQUVBLEdBQUksRUFBRUMsSUFBSUQsR0FBSUEsR0FBR0MsR0FBSUEsQ0FBQyxFQUFpRGlNLEVBQUUyRCxFQUFFZy9CLHFCQUFxQi9wQyxFQUFFNUIsRUFBRXFyQyxPQUFPOWhDLEVBQUV2SixFQUFFK3FDLFVBQVUzb0MsRUFBRXBDLEVBQUVtckMsUUFBUXhvQyxFQUFFM0MsRUFBRXVyQyxjQUMvUHptQixFQUFRa2pDLGlDQUFpQyxTQUFTbHJELEVBQUVDLEVBQUVpQixFQUFFME8sRUFBRW5QLEdBQUcsSUFBSVAsRUFBRTRFLEVBQUUsTUFBTSxHQUFHLE9BQU81RSxFQUFFeXhCLFFBQVEsQ0FBQyxJQUFJcHdCLEVBQUUsQ0FBQzRwRCxVQUFTLEVBQUc5cUQsTUFBTSxNQUFNSCxFQUFFeXhCLFFBQVFwd0IsQ0FBQyxNQUFNQSxFQUFFckIsRUFBRXl4QixRQUFRenhCLEVBQUVvRixHQUFFLFdBQVcsU0FBU3RGLEVBQUVBLEdBQUcsSUFBSUUsRUFBRSxDQUFpQixHQUFoQkEsR0FBRSxFQUFHZSxFQUFFakIsRUFBRUEsRUFBRTRQLEVBQUU1UCxRQUFNLElBQVNTLEdBQUdjLEVBQUU0cEQsU0FBUyxDQUFDLElBQUlsckQsRUFBRXNCLEVBQUVsQixNQUFNLEdBQUdJLEVBQUVSLEVBQUVELEdBQUcsT0FBT3lQLEVBQUV4UCxDQUFDLENBQUMsT0FBT3dQLEVBQUV6UCxDQUFDLENBQUssR0FBSkMsRUFBRXdQLEVBQUs1TCxFQUFFNUMsRUFBRWpCLEdBQUcsT0FBT0MsRUFBRSxJQUFJaUIsRUFBRTBPLEVBQUU1UCxHQUFHLFlBQUcsSUFBU1MsR0FBR0EsRUFBRVIsRUFBRWlCLEdBQVVqQixHQUFFZ0IsRUFBRWpCLEVBQVN5UCxFQUFFdk8sRUFBQyxDQUFDLElBQVNELEVBQUV3TyxFQUFQdlAsR0FBRSxFQUFPK0IsT0FBRSxJQUFTZixFQUFFLEtBQUtBLEVBQUUsTUFBTSxDQUFDLFdBQVcsT0FBT2xCLEVBQUVDLElBQUksRUFBRSxPQUFPZ0MsT0FBRSxFQUFPLFdBQVcsT0FBT2pDLEVBQUVpQyxJQUFJLEVBQUUsR0FBRSxDQUFDaEMsRUFBRWlCLEVBQUUwTyxFQUFFblAsSUFBSSxJQUFJUSxFQUFFaUwsRUFBRWxNLEVBQUVFLEVBQUUsR0FBR0EsRUFBRSxJQUNuYyxPQUFoRHVNLEdBQUUsV0FBV2xMLEVBQUU0cEQsVUFBUyxFQUFHNXBELEVBQUVsQixNQUFNWSxDQUFDLEdBQUUsQ0FBQ0EsSUFBSTRFLEVBQUU1RSxHQUFVQSxDQUFDLDhCQ1J0RDhtQixFQUFPQyxRQUFVLEVBQWpCLGdDQ0FBRCxFQUFPQyxRQUFVLEVBQWpCLE9DRkVvakMseUJBQTJCLENBQUMsRUFHaEMsU0FBU0Msb0JBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCx5QkFBeUJFLEdBQzVDLFFBQXFCN0csSUFBakI4RyxFQUNILE9BQU9BLEVBQWF2akMsUUFHckIsSUFBSUQsRUFBU3FqQyx5QkFBeUJFLEdBQVksQ0FHakR0akMsUUFBUyxDQUFDLEdBT1gsT0FIQXdqQyxvQkFBb0JGLEdBQVVqcEQsS0FBSzBsQixFQUFPQyxRQUFTRCxFQUFRQSxFQUFPQyxRQUFTcWpDLHFCQUdwRXRqQyxFQUFPQyxPQUNmLENDckJBcWpDLG9CQUFvQng3QyxFQUFLa1ksSUFDeEIsSUFBSTBqQyxFQUFTMWpDLEdBQVVBLEVBQU9xZ0MsV0FDN0IsSUFBT3JnQyxFQUFpQixRQUN4QixJQUFNLEVBRVAsT0FEQXNqQyxvQkFBb0JwcUQsRUFBRXdxRCxFQUFRLENBQUV6ckQsRUFBR3lyRCxJQUM1QkEsQ0FBTSxFQ0xkSixvQkFBb0JwcUQsRUFBSSxDQUFDK21CLEVBQVMwakMsS0FDakMsSUFBSSxJQUFJbGpDLEtBQU9rakMsRUFDWEwsb0JBQW9CMXpDLEVBQUUrekMsRUFBWWxqQyxLQUFTNmlDLG9CQUFvQjF6QyxFQUFFcVEsRUFBU1EsSUFDNUUzb0IsT0FBT0UsZUFBZWlvQixFQUFTUSxFQUFLLENBQUVzRCxZQUFZLEVBQU1ELElBQUs2L0IsRUFBV2xqQyxJQUUxRSxFQ05ENmlDLG9CQUFvQjVxRCxFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmRixXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU9PLE1BQVEsSUFBSStCLFNBQVMsY0FBYixFQUNoQixDQUFFLE1BQU8zQixHQUNSLEdBQXNCLGlCQUFYMUIsT0FBcUIsT0FBT0EsTUFDeEMsQ0FDQSxDQVB1QixHQ0F4QjZyRCxvQkFBb0IxekMsRUFBSSxDQUFDa3VDLEVBQUs4RixJQUFVOXJELE9BQU9PLFVBQVVnSSxlQUFlL0YsS0FBS3dqRCxFQUFLOEYsU0NBbEYsSUFBSUMsRUFDQVAsb0JBQW9CNXFELEVBQUVvckQsZ0JBQWVELEVBQVlQLG9CQUFvQjVxRCxFQUFFMEcsU0FBVyxJQUN0RixJQUFJVCxFQUFXMmtELG9CQUFvQjVxRCxFQUFFaUcsU0FDckMsSUFBS2tsRCxHQUFhbGxELElBQ2JBLEVBQVNvbEQsZ0JBQ1pGLEVBQVlsbEQsRUFBU29sRCxjQUFjOTVDLE1BQy9CNDVDLEdBQVcsQ0FDZixJQUFJNzVDLEVBQVVyTCxFQUFTb0kscUJBQXFCLFVBQ3pDaUQsRUFBUXJSLFNBQVFrckQsRUFBWTc1QyxFQUFRQSxFQUFRclIsT0FBUyxHQUFHc1IsSUFDNUQsQ0FJRCxJQUFLNDVDLEVBQVcsTUFBTSxJQUFJaHJELE1BQU0seURBQ2hDZ3JELEVBQVlBLEVBQVU1akQsUUFBUSxPQUFRLElBQUlBLFFBQVEsUUFBUyxJQUFJQSxRQUFRLFlBQWEsS0FDcEZxakQsb0JBQW9CbDdDLEVBQUl5N0MsTUNmeEJQLG9CQUFvQjczQyxRQUFLaXhDLDJMQ0t6QixJQUFJc0gsRUFKSixTQUEwQnY4QyxHQUN4QkEsR0FDRixFQUlPLE1BRU13OEMsRUFBVyxJQUFNRCxpQ0NSdkIsTUFBTSxHQUFpQyxJQUFBcE0sZUFBYyxNQ2tCckQsU0FBUyxJQU9kLE9BTnFCLElBQUEzUixZQUFXLEVBT2xDLENDdkJBLElBQUlrZCxFQ0owQixLQUM1QixNQUFNLElBQUl0cUQsTUFBTSx3QkFBd0IsRURJbkMsTUFJRHFyRCxFQUFjLENBQUNqc0QsRUFBR0MsSUFBTUQsSUFBTUMsRUFTN0IsU0FBU2lzRCxFQUFtQm5uQixFQUFVLEdBQzNDLE1BQU1vbkIsRUFBa0JwbkIsSUFBWSxFQUFvQixFQUF5QixLQUFNLElBQUFpSixZQUFXakosR0FDbEcsT0FBTyxTQUFxQnFuQixFQUFVQyxFQUFhSixHQWVqRCxNQUFNLE1BQ0pLLEVBQUssYUFDTEMsRUFBWSxlQUNaQyxHQUNFTCxJQUNFTSxFQUFnQnZCLEVBQWlDcUIsRUFBYUcsYUFBY0osRUFBTUssU0FBVUgsR0FBa0JGLEVBQU1LLFNBQVVQLEVBQVVDLEdBRTlJLE9BREEsSUFBQTVkLGVBQWNnZSxHQUNQQSxDQUNULENBQ0YsQ0F5Qk8sTUFBTSxFQUEyQlAseUZFR3hDLE1BQU1VLEVBQWdCLENBQ3BCQyxTQUFVLEVBRVZoaEMsSUFBSyxJQUFNLElDakVOLE1BQ00sRUFEaUMsb0JBQVhyc0IsYUFBcUQsSUFBcEJBLE9BQU9rSCxlQUFxRSxJQUFsQ2xILE9BQU9rSCxTQUFTQyxjQUN6RSxFQUFBeW5DLGdCQUFrQixFQUFBSCxVQ092RSxJQUFJWSxFQUF1QixLQ1JwQixTQUFTaWUsRUFBZ0IvbkIsRUFBVSxHQUN4QyxNQUFNb25CLEVBQ05wbkIsSUFBWSxFQUFvQixFQUF5QixLQUFNLElBQUFpSixZQUFXakosR0FDMUUsT0FBTyxXQUNMLE1BQU0sTUFDSnVuQixHQUNFSCxJQUVKLE9BQU9HLENBQ1QsQ0FDRixDQWlCTyxNQUFNLEVBQXdCUSxJQzVCOUIsU0FBU0MsRUFBbUJob0IsRUFBVSxHQUMzQyxNQUFNaW9CLEVBQ05qb0IsSUFBWSxFQUFvQixFQUFrQituQixFQUFnQi9uQixHQUNsRSxPQUFPLFdBR0wsT0FGY2lvQixJQUVEcmhCLFFBQ2YsQ0FDRixDQXVCTyxNQUFNLEVBQTJCb2hCLElUakNoQkUsTVVQeEIsU0FBU3ZFLEVBQVE3QyxHQUF3VCxPQUF0TzZDLEVBQXJELG1CQUFYL21ELFFBQW9ELGlCQUFwQkEsT0FBT0csU0FBbUMsU0FBaUIrakQsR0FBTyxjQUFjQSxDQUFLLEVBQXNCLFNBQWlCQSxHQUFPLE9BQU9BLEdBQXlCLG1CQUFYbGtELFFBQXlCa2tELEVBQUk3aUQsY0FBZ0JyQixRQUFVa2tELElBQVFsa0QsT0FBT3ZCLFVBQVksZ0JBQWtCeWxELENBQUssRUFBWTZDLEVBQVE3QyxFQUFNLENBSTlWLFNBQVNxSCxFQUFrQnRyQyxFQUFRbW1CLEdBQVMsSUFBSyxJQUFJampCLEVBQUksRUFBR0EsRUFBSWlqQixFQUFNcm5DLE9BQVFva0IsSUFBSyxDQUFFLElBQUkyRCxFQUFhc2YsRUFBTWpqQixHQUFJMkQsRUFBV3FELFdBQWFyRCxFQUFXcUQsYUFBYyxFQUFPckQsRUFBV3RuQixjQUFlLEVBQVUsVUFBV3NuQixJQUFZQSxFQUFXcm5CLFVBQVcsR0FBTXZCLE9BQU9FLGVBQWU2aEIsRUFBUTZHLEVBQVdELElBQUtDLEVBQWEsQ0FBRSxDQU01VCxTQUFTMGtDLEVBQWdCeDFDLEdBQXdKLE9BQW5KdzFDLEVBQWtCdHRELE9BQU91dEQsZUFBaUJ2dEQsT0FBT2dvQixlQUFpQixTQUF5QmxRLEdBQUssT0FBT0EsRUFBRTAxQyxXQUFheHRELE9BQU9nb0IsZUFBZWxRLEVBQUksRUFBVXcxQyxFQUFnQngxQyxFQUFJLENBRTVNLFNBQVMyMUMsRUFBdUI5c0QsR0FBUSxRQUFhLElBQVRBLEVBQW1CLE1BQU0sSUFBSStzRCxlQUFlLDZEQUFnRSxPQUFPL3NELENBQU0sQ0FJckssU0FBU2d0RCxFQUFnQjcxQyxFQUFHeEgsR0FBK0csT0FBMUdxOUMsRUFBa0IzdEQsT0FBT3V0RCxnQkFBa0IsU0FBeUJ6MUMsRUFBR3hILEdBQXNCLE9BQWpCd0gsRUFBRTAxQyxVQUFZbDlDLEVBQVV3SCxDQUFHLEVBQVU2MUMsRUFBZ0I3MUMsRUFBR3hILEVBQUksQ0FFekssU0FBU3M5QyxFQUFnQjVILEVBQUtyOUIsRUFBS25vQixHQUFpSyxPQUFwSm1vQixLQUFPcTlCLEVBQU9obUQsT0FBT0UsZUFBZThsRCxFQUFLcjlCLEVBQUssQ0FBRW5vQixNQUFPQSxFQUFPeXJCLFlBQVksRUFBTTNxQixjQUFjLEVBQU1DLFVBQVUsSUFBa0J5a0QsRUFBSXI5QixHQUFPbm9CLEVBQWdCd2xELENBQUssQ1BiM0s2SCxLQUNuQ3hDLEVBQW1Dd0MsQ0FBRSxFUUd2Q0MsQ0FBc0IsRUFBQXpDLGtDSlVXd0MsS0FDL0I3ZSxFQUF1QjZlLENBQUUsRUlWM0JFLENBQWtCLEVBQUEvZSxzQlhITW9lLEVXTWYsMEJYTjJCbEIsRUFBUWtCLEVVZXJDLElBQUlZLEVBRVgsU0FBVUMsR0FHUixTQUFTRCxJQUNQLElBQUlFLEVBRUFDLEdBNUJSLFNBQXlCcHdCLEVBQVVxd0IsR0FBZSxLQUFNcndCLGFBQW9CcXdCLEdBQWdCLE1BQU0sSUFBSXZzRCxVQUFVLG9DQUF3QyxDQThCcEp3c0QsQ0FBZ0JwdEQsS0FBTStzRCxHQUV0QixJQUFLLElBQUlNLEVBQU8zckQsVUFBVTlCLE9BQVEwdEQsRUFBTyxJQUFJanVELE1BQU1ndUQsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMvRUQsRUFBS0MsR0FBUTdyRCxVQUFVNnJELEdBa0N6QixPQS9CQUwsRUE5QkosU0FBb0N4dEQsRUFBTTZCLEdBQVEsT0FBSUEsR0FBMkIsV0FBbEJxbUQsRUFBUXJtRCxJQUFzQyxtQkFBVEEsRUFBOENpckQsRUFBdUI5c0QsR0FBdEM2QixDQUE2QyxDQThCcEtpc0QsQ0FBMkJ4dEQsTUFBT2l0RCxFQUFtQlosRUFBZ0JVLElBQWN4ckQsS0FBS0MsTUFBTXlyRCxFQUFrQixDQUFDanRELE1BQU0wTCxPQUFPNGhELEtBRXRJWCxFQUFnQkgsRUFBdUJVLEdBQVEsUUFBUyxDQUN0RE8sY0FBYyxJQUdoQmQsRUFBZ0JILEVBQXVCVSxHQUFRLG9CQUFnQixHQUUvRFAsRUFBZ0JILEVBQXVCVSxHQUFRLHdCQUF3QixXQUNyREEsRUFBTWptQixNQUFNeW1CLFVBRVE3QixXQUNHNEIsZUFHakNQLEVBQU1qbUIsTUFBTTBtQixhQUNkbHZCLFFBQVFHLFFBQVFzdUIsRUFBTWptQixNQUFNMG1CLGdCQUFnQkMsU0FBUSxXQUNsRCxPQUFPVixFQUFNbFAsU0FBUyxDQUNwQnlQLGNBQWMsR0FFbEIsSUFFQVAsRUFBTWxQLFNBQVMsQ0FDYnlQLGNBQWMsSUFJbEJQLEVBQU1XLGNBQWdCWCxFQUFNVyxlQUVoQyxJQUVPWCxDQUNULENBaEVGLElBQXNCQyxFQUFhVyxFQTRGakMsT0FwRkYsU0FBbUJDLEVBQVVDLEdBQWMsR0FBMEIsbUJBQWZBLEdBQTRDLE9BQWZBLEVBQXVCLE1BQU0sSUFBSXB0RCxVQUFVLHNEQUF5RG10RCxFQUFTenVELFVBQVlQLE9BQU9xSSxPQUFPNG1ELEdBQWNBLEVBQVcxdUQsVUFBVyxDQUFFNEMsWUFBYSxDQUFFM0MsTUFBT3d1RCxFQUFVenRELFVBQVUsRUFBTUQsY0FBYyxLQUFlMnRELEdBQVl0QixFQUFnQnFCLEVBQVVDLEVBQWEsQ0FXOVhDLENBQVVsQixFQUFhQyxHQW5CSEcsRUFrRVBKLEdBbEVvQmUsRUFrRVAsQ0FBQyxDQUN6QnBtQyxJQUFLLG9CQUNMbm9CLE1BQU8sV0FDTFMsS0FBSzZ0RCxhQUFlN3RELEtBQUtpbkMsTUFBTXltQixVQUFVUSxVQUFVbHVELEtBQUttdUQsc0JBQ3hEbnVELEtBQUttdUQsc0JBQ1AsR0FDQyxDQUNEem1DLElBQUssdUJBQ0xub0IsTUFBTyxXQUNMUyxLQUFLNnRELGNBQWdCN3RELEtBQUs2dEQsY0FDNUIsR0FDQyxDQUNEbm1DLElBQUssU0FDTG5vQixNQUFPLFdBS0wsTUFBbUMsbUJBQXhCUyxLQUFLaW5DLE1BQU1oYixTQUNianNCLEtBQUtpbkMsTUFBTWhiLFNBQVNqc0IsS0FBS21ULE1BQU1zNkMsY0FHakN6dEQsS0FBS21ULE1BQU1zNkMsYUFBZXp0RCxLQUFLaW5DLE1BQU1oYixTQUFXanNCLEtBQUtpbkMsTUFBTW1uQixPQUNwRSxNQXpGMEVoQyxFQUFrQmUsRUFBWTd0RCxVQUFXd3VELEdBNEY5R2YsQ0FDVCxDQTNFQSxDQTJFRSxFQUFBcE8sZUFFRmdPLEVBQWdCSSxFQUFhLGVBQWdCLENBQzNDOWdDLFNBQVUsS0FDVm1pQyxRQUFTLGlFRStmWCxRQXRtQkEsU0FBcUIvNUMsR0FDbkIsU0FBU3JQLEVBQUU3RSxFQUFHZixFQUFHZ0IsRUFBR2dDLEVBQUdsRCxHQUNyQixJQUFLLElBQWdDNkQsRUFBR3BELEVBQWlCZ1AsRUFBdUVZLEVBQW1DbEksRUFBMUpsRyxFQUFJLEVBQUdoQyxFQUFJLEVBQUdxRixFQUFJLEVBQUd1SyxFQUFJLEVBQVM3SSxFQUFJLEVBQUdzRSxFQUFJLEVBQU1tQixFQUFJZ0QsRUFBSTVMLEVBQUksRUFBRytMLEVBQUksRUFBRzFELEVBQUksRUFBRzdDLEVBQUksRUFBR3ZFLEVBQUksRUFBR21ELEVBQUkvRyxFQUFFUixPQUFReUUsRUFBSThDLEVBQUksRUFBTTFHLEVBQUksR0FBSTRPLEVBQUksR0FBSXhILEVBQUksR0FBSTRILEVBQUksR0FBT1gsRUFBSTNILEdBQUksQ0FJNUssR0FIQXhILEVBQUlTLEVBQUVvUSxXQUFXMUIsR0FDakJBLElBQU16SyxHQUFLLElBQU1sRixFQUFJNFAsRUFBSXZLLEVBQUlyRCxJQUFNLElBQU1oQyxJQUFNUSxFQUFJLEtBQU9SLEVBQUksR0FBSyxJQUFLNFAsRUFBSXZLLEVBQUlyRCxFQUFJLEVBQUdnRyxJQUFLOUMsS0FFeEYsSUFBTWxGLEVBQUk0UCxFQUFJdkssRUFBSXJELEVBQUcsQ0FDdkIsR0FBSTJOLElBQU16SyxJQUFNLEVBQUkrRyxJQUFNM0ssRUFBSUEsRUFBRXlHLFFBQVF6QyxFQUFHLEtBQU0sRUFBSWhFLEVBQUUycEIsT0FBT3hxQixRQUFTLENBQ3JFLE9BQVFELEdBQ04sS0FBSyxHQUNMLEtBQUssRUFDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDSCxNQUVGLFFBQ0VjLEdBQUtMLEVBQUV5TSxPQUFPaUMsR0FHbEJuUCxFQUFJLEVBQ04sQ0FFQSxPQUFRQSxHQUNOLEtBQUssSUFLSCxJQUhBb0QsR0FEQXRDLEVBQUlBLEVBQUUycEIsUUFDQTVaLFdBQVcsR0FDakI3QixFQUFJLEVBRUMzSyxJQUFNOEssRUFBR0EsRUFBSTNILEdBQUksQ0FDcEIsT0FBUXhILEVBQUlTLEVBQUVvUSxXQUFXMUIsSUFDdkIsS0FBSyxJQUNISCxJQUNBLE1BRUYsS0FBSyxJQUNIQSxJQUNBLE1BRUYsS0FBSyxHQUNILE9BQVFoUCxFQUFJUyxFQUFFb1EsV0FBVzFCLEVBQUksSUFDM0IsS0FBSyxHQUNMLEtBQUssR0FDSDVQLEVBQUcsQ0FDRCxJQUFLeU0sRUFBSW1ELEVBQUksRUFBR25ELEVBQUl0SCxJQUFLc0gsRUFDdkIsT0FBUXZMLEVBQUVvUSxXQUFXN0UsSUFDbkIsS0FBSyxHQUNILEdBQUksS0FBT2hNLEdBQUssS0FBT1MsRUFBRW9RLFdBQVc3RSxFQUFJLElBQU1tRCxFQUFJLElBQU1uRCxFQUFHLENBQ3pEbUQsRUFBSW5ELEVBQUksRUFDUixNQUFNek0sQ0FDUixDQUVBLE1BRUYsS0FBSyxHQUNILEdBQUksS0FBT1MsRUFBRyxDQUNabVAsRUFBSW5ELEVBQUksRUFDUixNQUFNek0sQ0FDUixFQUtONFAsRUFBSW5ELENBQ04sRUFJSixNQUVGLEtBQUssR0FDSGhNLElBRUYsS0FBSyxHQUNIQSxJQUVGLEtBQUssR0FDTCxLQUFLLEdBQ0gsS0FBT21QLElBQU16SyxHQUFLakUsRUFBRW9RLFdBQVcxQixLQUFPblAsS0FLMUMsR0FBSSxJQUFNZ1AsRUFBRyxNQUNiRyxHQUNGLENBS0EsR0FIQUgsRUFBSXZPLEVBQUUwTSxVQUFVOUksRUFBRzhLLEdBQ25CLElBQU0vTCxJQUFNQSxHQUFLdEMsRUFBSUEsRUFBRXlHLFFBQVEvQyxFQUFJLElBQUlpbUIsUUFBUTVaLFdBQVcsSUFHbkQsS0FEQ3pOLEVBQ04sQ0FJRSxPQUhBLEVBQUlxSSxJQUFNM0ssRUFBSUEsRUFBRXlHLFFBQVF6QyxFQUFHLEtBQzNCOUUsRUFBSWMsRUFBRStQLFdBQVcsSUFHZixLQUFLLElBQ0wsS0FBSyxJQUNMLEtBQUssSUFDTCxLQUFLLEdBQ0hwRixFQUFJaE0sRUFDSixNQUVGLFFBQ0VnTSxFQUFJSyxFQU1SLEdBRkF6SCxHQURBMkssRUFBSTNKLEVBQUU1RixFQUFHZ00sRUFBR3VELEVBQUdoUCxFQUFHVCxFQUFJLElBQ2hCVSxPQUNOLEVBQUl1QyxJQUFzQmtGLEVBQUkvQyxFQUFFLEVBQUdxSyxFQUF6QnZELEVBQUlxUyxFQUFFaFMsRUFBR2hMLEVBQUc4SCxHQUFtQm5KLEVBQUdxSSxFQUFHdEIsRUFBR25DLEVBQUdyRSxFQUFHVCxFQUFHa0QsR0FBSTNCLEVBQUkySyxFQUFFdkMsS0FBSyxTQUFLLElBQVd4QixHQUFLLEtBQU9yRCxHQUFLMkssRUFBSXRILEVBQUUraUIsUUFBUXhxQixVQUFZRCxFQUFJLEVBQUdnUCxFQUFJLEtBQzVJLEVBQUkzSyxFQUFHLE9BQVFyRSxHQUNqQixLQUFLLElBQ0hjLEVBQUlBLEVBQUV5RyxRQUFRMUgsRUFBSU8sR0FFcEIsS0FBSyxJQUNMLEtBQUssSUFDTCxLQUFLLEdBQ0g0TyxFQUFJbE8sRUFBSSxJQUFNa08sRUFBSSxJQUNsQixNQUVGLEtBQUssSUFFSEEsR0FEQWxPLEVBQUlBLEVBQUV5RyxRQUFRakgsRUFBSSxVQUNWLElBQU0wTyxFQUFJLElBQ2xCQSxFQUFJLElBQU01SixHQUFLLElBQU1BLEdBQUtzRyxFQUFFLElBQU1zRCxFQUFHLEdBQUssWUFBY0EsRUFBSSxJQUFNQSxFQUFJLElBQU1BLEVBQzVFLE1BRUYsUUFDRUEsRUFBSWxPLEVBQUlrTyxFQUFHLE1BQVF2TSxJQUFXaU4sR0FBS1YsRUFBVkEsRUFBYSxTQUNuQ0EsRUFBSSxFQUNOLE1BR0xBLEVBQUkzSixFQUFFNUYsRUFBR3FlLEVBQUVyZSxFQUFHcUIsRUFBRzhILEdBQUlvRyxFQUFHdk0sRUFBR2xELEVBQUksR0FHbkMySSxHQUFLOEcsRUFDTEEsRUFBSXBHLEVBQUk2QyxFQUFJTyxFQUFJNUksRUFBSSxFQUNwQnRDLEVBQUksR0FDSmQsRUFBSVMsRUFBRW9RLGFBQWExQixHQUNuQixNQUVGLEtBQUssSUFDTCxLQUFLLEdBRUgsR0FBSSxHQUFLOUssR0FEVHZELEdBQUssRUFBSTJLLEVBQUkzSyxFQUFFeUcsUUFBUXpDLEVBQUcsSUFBTWhFLEdBQUcycEIsUUFDcEJ4cUIsUUFBUyxPQUFRLElBQU0rTCxJQUFNNUksRUFBSXRDLEVBQUUrUCxXQUFXLEdBQUksS0FBT3pOLEdBQUssR0FBS0EsR0FBSyxJQUFNQSxLQUFPaUIsR0FBS3ZELEVBQUlBLEVBQUV5RyxRQUFRLElBQUssTUFBTXRILFFBQVMsRUFBSXVDLFFBQUssS0FBWWtGLEVBQUkvQyxFQUFFLEVBQUc3RCxFQUFHckIsRUFBR2UsRUFBR3NILEVBQUd0QixFQUFHa0osRUFBRXpQLE9BQVF3QyxFQUFHbEQsRUFBR2tELEtBQU8sS0FBTzRCLEdBQUt2RCxFQUFJNEcsRUFBRStpQixRQUFReHFCLFVBQVlhLEVBQUksUUFBYXNDLEVBQUl0QyxFQUFFK1AsV0FBVyxHQUFJN1EsRUFBSWMsRUFBRStQLFdBQVcsR0FBSXpOLEdBQzlTLEtBQUssRUFDSCxNQUVGLEtBQUssR0FDSCxHQUFJLE1BQVFwRCxHQUFLLEtBQU9BLEVBQUcsQ0FDekI4UCxHQUFLaFAsRUFBSUwsRUFBRXlNLE9BQU9pQyxHQUNsQixLQUNGLENBRUYsUUFDRSxLQUFPck8sRUFBRStQLFdBQVd4TSxFQUFJLEtBQU9xTCxHQUFLcEwsRUFBRXhELEVBQUdzQyxFQUFHcEQsRUFBR2MsRUFBRStQLFdBQVcsS0FFaEVqSSxFQUFJNkMsRUFBSU8sRUFBSTVJLEVBQUksRUFDaEJ0QyxFQUFJLEdBQ0pkLEVBQUlTLEVBQUVvUSxhQUFhMUIsR0FFekIsQ0FFQSxPQUFRblAsR0FDTixLQUFLLEdBQ0wsS0FBSyxHQUNILEtBQU9SLEVBQUlBLEVBQUksRUFBSSxJQUFNLEVBQUk0RCxHQUFLLE1BQVFYLEdBQUssRUFBSTNCLEVBQUViLFNBQVd3TCxFQUFJLEVBQUczSyxHQUFLLE1BQzVFLEVBQUkwQixFQUFJd2hCLEdBQUtyZixFQUFFLEVBQUc3RCxFQUFHckIsRUFBR2UsRUFBR3NILEVBQUd0QixFQUFHa0osRUFBRXpQLE9BQVF3QyxFQUFHbEQsRUFBR2tELEdBQ2pEK0QsRUFBSSxFQUNKc0IsSUFDQSxNQUVGLEtBQUssR0FDTCxLQUFLLElBQ0gsR0FBSSxJQUFNdEksRUFBSTRQLEVBQUl2SyxFQUFJckQsRUFBRyxDQUN2QmdGLElBQ0EsS0FDRixDQUVGLFFBSUUsT0FIQUEsSUFDQW9KLEVBQUluUCxFQUFFeU0sT0FBT2lDLEdBRUxuUCxHQUNOLEtBQUssRUFDTCxLQUFLLEdBQ0gsR0FBSSxJQUFNb1AsRUFBSTVOLEVBQUloQyxFQUFHLE9BQVErRyxHQUMzQixLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssRUFDTCxLQUFLLEdBQ0hxSixFQUFJLEdBQ0osTUFFRixRQUNFLEtBQU81UCxJQUFNNFAsRUFBSSxLQUVyQixNQUVGLEtBQUssRUFDSEEsRUFBSSxNQUNKLE1BRUYsS0FBSyxHQUNIQSxFQUFJLE1BQ0osTUFFRixLQUFLLEdBQ0hBLEVBQUksTUFDSixNQUVGLEtBQUssR0FDSCxJQUFNUixFQUFJNVAsRUFBSWdDLElBQU1pSyxFQUFJN0MsRUFBSSxFQUFHZ0gsRUFBSSxLQUFPQSxHQUMxQyxNQUVGLEtBQUssSUFDSCxHQUFJLElBQU1SLEVBQUk1UCxFQUFJZ0MsRUFBSXlHLEdBQUssRUFBSStELEVBQUcsT0FBUW1ELEVBQUluRCxHQUM1QyxLQUFLLEVBQ0gsTUFBUXpGLEdBQUssS0FBTzlGLEVBQUVvUSxXQUFXMUIsRUFBSSxLQUFPbEgsRUFBSTFCLEdBRWxELEtBQUssRUFDSCxNQUFRc0UsSUFBTTVDLEVBQUk0QyxHQUV0QixNQUVGLEtBQUssR0FDSCxJQUFNdUUsRUFBSTVQLEVBQUlnQyxJQUFNd0ssRUFBSW1ELEdBQ3hCLE1BRUYsS0FBSyxHQUNILElBQU0zUCxFQUFJcUYsRUFBSXVLLEVBQUk1TixJQUFNaUssRUFBSSxFQUFHbUUsR0FBSyxNQUNwQyxNQUVGLEtBQUssR0FDTCxLQUFLLEdBQ0gsSUFBTXBRLElBQU00UCxFQUFJQSxJQUFNcFAsRUFBSSxFQUFJLElBQU1vUCxFQUFJcFAsRUFBSW9QLEdBQzVDLE1BRUYsS0FBSyxHQUNILElBQU1BLEVBQUk1UCxFQUFJcUYsR0FBS3JELElBQ25CLE1BRUYsS0FBSyxHQUNILElBQU00TixFQUFJNVAsRUFBSXFGLEdBQUtyRCxJQUNuQixNQUVGLEtBQUssR0FDSCxJQUFNNE4sRUFBSTVQLEVBQUlnQyxHQUFLcUQsSUFDbkIsTUFFRixLQUFLLEdBQ0MsSUFBTXVLLEVBQUk1UCxFQUFJZ0MsSUFDWixJQUFNNEIsSUFBVyxFQUFJbUQsRUFBSSxFQUFJc0UsR0FDMUIsTUFJSHpILEVBQUksSUFFUnlCLEtBR0YsTUFFRixLQUFLLEdBQ0gsSUFBTXJGLEVBQUlxRixFQUFJdUssRUFBSTVOLEVBQUl3SyxFQUFJZ0QsSUFBTUEsRUFBSSxHQUNwQyxNQUVGLEtBQUssR0FDTCxLQUFLLEdBQ0gsS0FBTSxFQUFJSSxFQUFJNU4sRUFBSXFELEdBQUksT0FBUXJGLEdBQzVCLEtBQUssRUFDSCxPQUFRLEVBQUlRLEVBQUksRUFBSVMsRUFBRW9RLFdBQVcxQixFQUFJLElBQ25DLEtBQUssSUFDSDNQLEVBQUksR0FDSixNQUVGLEtBQUssSUFDSDZFLEVBQUk4SyxFQUFHM1AsRUFBSSxHQUdmLE1BRUYsS0FBSyxHQUNILEtBQU9RLEdBQUssS0FBT3VHLEdBQUtsQyxFQUFJLElBQU04SyxJQUFNLEtBQU8xTyxFQUFFb1EsV0FBV3hNLEVBQUksS0FBT3FMLEdBQUtqUCxFQUFFME0sVUFBVTlJLEVBQUc4SyxFQUFJLElBQUtTLEVBQUksR0FBSXBRLEVBQUksSUFJeEgsSUFBTUEsSUFBTXNCLEdBQUs4TyxHQUdyQi9FLEVBQUl0RSxFQUNKQSxFQUFJdkcsRUFDSm1QLEdBQ0YsQ0FJQSxHQUFJLEdBRko5SyxFQUFJcUwsRUFBRXpQLFFBRUssQ0FFVCxHQURBd0wsRUFBSWhNLEVBQ0EsRUFBSStDLFFBQTJDLEtBQXJDa0YsRUFBSS9DLEVBQUUsRUFBRytLLEVBQUdqRSxFQUFHakwsRUFBR3NILEVBQUd0QixFQUFHbkMsRUFBRzVCLEVBQUdsRCxFQUFHa0QsS0FBb0IsS0FBT2lOLEVBQUloSSxHQUFHekgsT0FBUyxPQUFPNlAsRUFBSUosRUFBSXhILEVBR3pHLEdBRkF3SCxFQUFJakUsRUFBRXZDLEtBQUssS0FBTyxJQUFNd0csRUFBSSxJQUV4QixHQUFNdEssRUFBSTZDLEVBQUcsQ0FHZixPQUZBLElBQU03QyxHQUFLc0csRUFBRWdFLEVBQUcsS0FBT3pILEVBQUksR0FFbkJBLEdBQ04sS0FBSyxJQUNIeUgsRUFBSUEsRUFBRW5JLFFBQVEzRyxFQUFJLFlBQWM4TyxFQUNoQyxNQUVGLEtBQUssSUFDSEEsRUFBSUEsRUFBRW5JLFFBQVFxSyxFQUFHLHNCQUF3QmxDLEVBQUVuSSxRQUFRcUssRUFBRyxhQUFlbEMsRUFBRW5JLFFBQVFxSyxFQUFHLGlCQUFtQmxDLEVBR3pHekgsRUFBSSxDQUNOLENBQ0YsQ0FFQSxPQUFPNkgsRUFBSUosRUFBSXhILENBQ2pCLENBRUEsU0FBUzRWLEVBQUV0ZCxFQUFHZixFQUFHZ0IsR0FDZixJQUFJZ0MsRUFBSWhELEVBQUVnckIsT0FBT2xxQixNQUFNWSxHQUN2QjFCLEVBQUlnRCxFQUNKLElBQUlsRCxFQUFJa0QsRUFBRXhDLE9BQ051QixFQUFJaEIsRUFBRVAsT0FFVixPQUFRdUIsR0FDTixLQUFLLEVBQ0wsS0FBSyxFQUNILElBQUloQyxFQUFJLEVBRVIsSUFBS2dCLEVBQUksSUFBTWdCLEVBQUksR0FBS2hCLEVBQUUsR0FBSyxJQUFLaEIsRUFBSUQsSUFBS0MsRUFDM0NDLEVBQUVELEdBQUt5TixFQUFFek0sRUFBR2YsRUFBRUQsR0FBSWlCLEdBQUdncUIsT0FHdkIsTUFFRixRQUNFLElBQUk1bEIsRUFBSXJGLEVBQUksRUFFWixJQUFLQyxFQUFJLEdBQUlELEVBQUlELElBQUtDLEVBQ3BCLElBQUssSUFBSTRQLEVBQUksRUFBR0EsRUFBSTVOLElBQUs0TixFQUN2QjNQLEVBQUVvRixLQUFPb0ksRUFBRXpNLEVBQUU0TyxHQUFLLElBQUszTSxFQUFFakQsR0FBSWlCLEdBQUdncUIsT0FNeEMsT0FBT2hyQixDQUNULENBRUEsU0FBU3dOLEVBQUV6TSxFQUFHZixFQUFHZ0IsR0FDZixJQUFJZ0MsRUFBSWhELEVBQUVvUixXQUFXLEdBR3JCLE9BRkEsR0FBS3BPLElBQU1BLEdBQUtoRCxFQUFJQSxFQUFFZ3JCLFFBQVE1WixXQUFXLElBRWpDcE8sR0FDTixLQUFLLEdBQ0gsT0FBT2hELEVBQUU4SCxRQUFRVyxFQUFHLEtBQU8xSCxFQUFFaXFCLFFBRS9CLEtBQUssR0FDSCxPQUFPanFCLEVBQUVpcUIsT0FBU2hyQixFQUFFOEgsUUFBUVcsRUFBRyxLQUFPMUgsRUFBRWlxQixRQUUxQyxRQUNFLEdBQUksRUFBSSxFQUFJaHFCLEdBQUssRUFBSWhCLEVBQUU0QyxRQUFRLE1BQU8sT0FBTzVDLEVBQUU4SCxRQUFRVyxHQUFJLEtBQU8xSCxFQUFFcVEsV0FBVyxHQUFLLEdBQUssTUFBUXJRLEVBQUVpcUIsUUFHdkcsT0FBT2pxQixFQUFJZixDQUNiLENBRUEsU0FBUzZFLEVBQUU5RCxFQUFHZixFQUFHZ0IsRUFBR2dDLEdBQ2xCLElBQUlsRCxFQUFJaUIsRUFBSSxJQUNSZ0IsRUFBSSxFQUFJL0IsRUFBSSxFQUFJZ0IsRUFBSSxFQUFJZ0MsRUFFNUIsR0FBSSxNQUFRakIsRUFBRyxDQUNiaEIsRUFBSWpCLEVBQUU4QyxRQUFRLElBQUssR0FBSyxFQUN4QixJQUFJN0MsRUFBSUQsRUFBRTROLFVBQVUzTSxFQUFHakIsRUFBRVUsT0FBUyxHQUFHd3FCLE9BRXJDLE9BREFqckIsRUFBSUQsRUFBRTROLFVBQVUsRUFBRzNNLEdBQUdpcUIsT0FBU2pyQixFQUFJLElBQzVCLElBQU00RixHQUFLLElBQU1BLEdBQUtzRyxFQUFFbE0sRUFBRyxHQUFLLFdBQWFBLEVBQUlBLEVBQUlBLENBQzlELENBRUEsR0FBSSxJQUFNNEYsR0FBSyxJQUFNQSxJQUFNc0csRUFBRW5NLEVBQUcsR0FBSSxPQUFPQSxFQUUzQyxPQUFRaUMsR0FDTixLQUFLLEtBQ0gsT0FBTyxLQUFPakMsRUFBRXNSLFdBQVcsSUFBTSxXQUFhdFIsRUFBSUEsRUFBSUEsRUFFeEQsS0FBSyxJQUNILE9BQU8sTUFBUUEsRUFBRXNSLFdBQVcsR0FBSyxXQUFhdFIsRUFBSUEsRUFBSUEsRUFFeEQsS0FBSyxJQUNILE9BQU8sTUFBUUEsRUFBRXNSLFdBQVcsR0FBSyxXQUFhdFIsRUFBSUEsRUFBSUEsRUFFeEQsS0FBSyxLQUNILEdBQUksTUFBUUEsRUFBRXNSLFdBQVcsR0FBSSxNQUUvQixLQUFLLElBQ0wsS0FBSyxJQUNILE1BQU8sV0FBYXRSLEVBQUlBLEVBRTFCLEtBQUssSUFDSCxNQUFPLFdBQWFBLEVBQUksUUFBVUEsRUFBSUEsRUFFeEMsS0FBSyxLQUNMLEtBQUssSUFDSCxNQUFPLFdBQWFBLEVBQUksUUFBVUEsRUFBSSxPQUFTQSxFQUFJQSxFQUVyRCxLQUFLLElBQ0gsR0FBSSxLQUFPQSxFQUFFc1IsV0FBVyxHQUFJLE1BQU8sV0FBYXRSLEVBQUlBLEVBQ3BELEdBQUksRUFBSUEsRUFBRThDLFFBQVEsYUFBYyxJQUFLLE9BQU85QyxFQUFFZ0ksUUFBUWpHLEVBQUksZ0JBQWtCL0IsRUFDNUUsTUFFRixLQUFLLElBQ0gsR0FBSSxLQUFPQSxFQUFFc1IsV0FBVyxHQUFJLE9BQVF0UixFQUFFc1IsV0FBVyxJQUMvQyxLQUFLLElBQ0gsTUFBTyxlQUFpQnRSLEVBQUVnSSxRQUFRLFFBQVMsSUFBTSxXQUFhaEksRUFBSSxPQUFTQSxFQUFFZ0ksUUFBUSxPQUFRLFlBQWNoSSxFQUU3RyxLQUFLLElBQ0gsTUFBTyxXQUFhQSxFQUFJLE9BQVNBLEVBQUVnSSxRQUFRLFNBQVUsWUFBY2hJLEVBRXJFLEtBQUssR0FDSCxNQUFPLFdBQWFBLEVBQUksT0FBU0EsRUFBRWdJLFFBQVEsUUFBUyxrQkFBb0JoSSxFQUU1RSxNQUFPLFdBQWFBLEVBQUksT0FBU0EsRUFBSUEsRUFFdkMsS0FBSyxJQUNILE1BQU8sV0FBYUEsRUFBSSxZQUFjQSxFQUFJQSxFQUU1QyxLQUFLLEtBQ0gsR0FBSSxLQUFPQSxFQUFFc1IsV0FBVyxHQUFJLE1BRTVCLE1BQU8sb0JBRFByUixFQUFJRCxFQUFFNE4sVUFBVTVOLEVBQUU4QyxRQUFRLElBQUssS0FBS2tGLFFBQVEsUUFBUyxJQUFJQSxRQUFRLGdCQUFpQixZQUNsRCxXQUFhaEksRUFBSSxnQkFBa0JDLEVBQUlELEVBRXpFLEtBQUssS0FDSCxPQUFPa0MsRUFBRzBELEtBQUs1RixHQUFLQSxFQUFFZ0ksUUFBUXBJLEVBQUksYUFBZUksRUFBRWdJLFFBQVFwSSxFQUFJLFVBQVlJLEVBQUlBLEVBRWpGLEtBQUssSUFJSCxPQUZBRSxHQURBRCxFQUFJRCxFQUFFNE4sVUFBVSxJQUFJc2QsUUFDZHBvQixRQUFRLEtBQU8sRUFFYjdDLEVBQUVxUixXQUFXLEdBQUtyUixFQUFFcVIsV0FBV3BSLElBQ3JDLEtBQUssSUFDSEQsRUFBSUQsRUFBRWdJLFFBQVF1SSxFQUFHLE1BQ2pCLE1BRUYsS0FBSyxJQUNIdFEsRUFBSUQsRUFBRWdJLFFBQVF1SSxFQUFHLFNBQ2pCLE1BRUYsS0FBSyxJQUNIdFEsRUFBSUQsRUFBRWdJLFFBQVF1SSxFQUFHLE1BQ2pCLE1BRUYsUUFDRSxPQUFPdlEsRUFHWCxNQUFPLFdBQWFBLEVBQUksT0FBU0MsRUFBSUQsRUFFdkMsS0FBSyxLQUNILElBQUssSUFBTUEsRUFBRThDLFFBQVEsU0FBVSxHQUFJLE1BRXJDLEtBQUssSUFJSCxPQUhBNUMsR0FBS0YsRUFBSWlCLEdBQUdQLE9BQVMsR0FHYnVCLEdBRlJoQyxHQUFLLEtBQU9ELEVBQUVzUixXQUFXcFIsR0FBS0YsRUFBRTROLFVBQVUsRUFBRzFOLEdBQUtGLEdBQUc0TixVQUFVM00sRUFBRTZCLFFBQVEsSUFBSyxHQUFLLEdBQUdvb0IsUUFFeEU1WixXQUFXLElBQXdCLEVBQWxCclIsRUFBRXFSLFdBQVcsS0FDMUMsS0FBSyxJQUNILEdBQUksSUFBTXJSLEVBQUVxUixXQUFXLEdBQUksTUFFN0IsS0FBSyxJQUNIdFIsRUFBSUEsRUFBRWdJLFFBQVEvSCxFQUFHLFdBQWFBLEdBQUssSUFBTUQsRUFDekMsTUFFRixLQUFLLElBQ0wsS0FBSyxJQUNIQSxFQUFJQSxFQUFFZ0ksUUFBUS9ILEVBQUcsWUFBYyxJQUFNZ0MsRUFBSSxVQUFZLElBQU0sT0FBUyxJQUFNakMsRUFBRWdJLFFBQVEvSCxFQUFHLFdBQWFBLEdBQUssSUFBTUQsRUFBRWdJLFFBQVEvSCxFQUFHLE9BQVNBLEVBQUksT0FBUyxJQUFNRCxFQUc1SixPQUFPQSxFQUFJLElBRWIsS0FBSyxJQUNILEdBQUksS0FBT0EsRUFBRXNSLFdBQVcsR0FBSSxPQUFRdFIsRUFBRXNSLFdBQVcsSUFDL0MsS0FBSyxJQUNILE9BQU9yUixFQUFJRCxFQUFFZ0ksUUFBUSxTQUFVLElBQUssV0FBYWhJLEVBQUksZUFBaUJDLEVBQUksWUFBY0EsRUFBSUQsRUFFOUYsS0FBSyxJQUNILE1BQU8sV0FBYUEsRUFBSSxpQkFBbUJBLEVBQUVnSSxRQUFReEcsRUFBSSxJQUFNeEIsRUFFakUsUUFDRSxNQUFPLFdBQWFBLEVBQUkscUJBQXVCQSxFQUFFZ0ksUUFBUSxnQkFBaUIsSUFBSUEsUUFBUXhHLEVBQUksSUFBTXhCLEVBRXBHLE1BRUYsS0FBSyxJQUNMLEtBQUssSUFDSCxHQUFJLEtBQU9BLEVBQUVzUixXQUFXLElBQU0sTUFBUXRSLEVBQUVzUixXQUFXLEdBQUksTUFFekQsS0FBSyxJQUNMLEtBQUssSUFDSCxJQUFJLElBQU9sUCxFQUFHd0QsS0FBSzNFLEdBQUksT0FBTyxPQUFTaEIsRUFBSWdCLEVBQUUyTSxVQUFVM00sRUFBRTZCLFFBQVEsS0FBTyxJQUFJd08sV0FBVyxHQUFLdk0sRUFBRTlELEVBQUUrRyxRQUFRLFVBQVcsa0JBQW1COUgsRUFBR2dCLEVBQUdnQyxHQUFHOEUsUUFBUSxrQkFBbUIsWUFBY2hJLEVBQUVnSSxRQUFRL0gsRUFBRyxXQUFhQSxHQUFLRCxFQUFFZ0ksUUFBUS9ILEVBQUcsUUFBVUEsRUFBRStILFFBQVEsUUFBUyxLQUFPaEksRUFDeFEsTUFFRixLQUFLLElBQ0gsR0FBSUEsRUFBSSxXQUFhQSxHQUFLLE1BQVFBLEVBQUVzUixXQUFXLEdBQUssT0FBU3RSLEVBQUksSUFBTUEsRUFBRyxNQUFRa0IsRUFBSWdDLEdBQUssTUFBUWxELEVBQUVzUixXQUFXLEtBQU8sRUFBSXRSLEVBQUU4QyxRQUFRLFlBQWEsSUFBSyxPQUFPOUMsRUFBRTROLFVBQVUsRUFBRzVOLEVBQUU4QyxRQUFRLElBQUssSUFBTSxHQUFHa0YsUUFBUXZGLEVBQUksZ0JBQWtCekMsRUFHdk8sT0FBT0EsQ0FDVCxDQUVBLFNBQVNtTSxFQUFFbEwsRUFBR2YsR0FDWixJQUFJZ0IsRUFBSUQsRUFBRTZCLFFBQVEsSUFBTTVDLEVBQUksSUFBTSxLQUM5QmdELEVBQUlqQyxFQUFFMk0sVUFBVSxFQUFHLElBQU0xTixFQUFJZ0IsRUFBSSxJQUVyQyxPQURBQSxFQUFJRCxFQUFFMk0sVUFBVTFNLEVBQUksRUFBR0QsRUFBRVAsT0FBUyxHQUMzQm9ULEVBQUUsSUFBTTVULEVBQUlnRCxFQUFJQSxFQUFFOEUsUUFBUXBGLEVBQUksTUFBTzFCLEVBQUdoQixFQUNqRCxDQUVBLFNBQVNXLEVBQUdJLEVBQUdmLEdBQ2IsSUFBSWdCLEVBQUk2RCxFQUFFN0UsRUFBR0EsRUFBRW9SLFdBQVcsR0FBSXBSLEVBQUVvUixXQUFXLEdBQUlwUixFQUFFb1IsV0FBVyxJQUM1RCxPQUFPcFEsSUFBTWhCLEVBQUksSUFBTWdCLEVBQUU4RyxRQUFRakYsRUFBSSxZQUFZNkssVUFBVSxHQUFLLElBQU0xTixFQUFJLEdBQzVFLENBRUEsU0FBU2tGLEVBQUVuRSxFQUFHZixFQUFHZ0IsRUFBR2dDLEVBQUdsRCxFQUFHaUMsRUFBR2hDLEVBQUdxRixFQUFHdUssRUFBR2hNLEdBQ3BDLElBQUssSUFBa0JnQyxFQUFkcEYsRUFBSSxFQUFHdUcsRUFBSTlHLEVBQU1PLEVBQUl3QyxJQUFLeEMsRUFDakMsT0FBUW9GLEVBQUk0SCxFQUFFaE4sR0FBRzRCLEtBQUs0RixFQUFHaEgsRUFBRytGLEVBQUc5RixFQUFHZ0MsRUFBR2xELEVBQUdpQyxFQUFHaEMsRUFBR3FGLEVBQUd1SyxFQUFHaE0sSUFDbEQsVUFBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxLQUNILE1BRUYsUUFDRW1ELEVBQUluQixFQUlWLEdBQUltQixJQUFNOUcsRUFBRyxPQUFPOEcsQ0FDdEIsQ0FrQkEsU0FBUzROLEVBQUUzVCxHQUdULFlBREEsS0FEQUEsRUFBSUEsRUFBRWt1RCxVQUNXcjdDLEVBQUksS0FBTTdTLEVBQUksbUJBQXNCQSxFQUFJNEUsRUFBSSxHQUFLQSxFQUFJLEVBQUdpTyxFQUFJN1MsR0FBSzRFLEVBQUksR0FDL0UrTyxDQUNULENBRUEsU0FBUzNNLEVBQUVoSCxFQUFHZixHQUNaLElBQUlnQixFQUFJRCxFQUtSLEdBSkEsR0FBS0MsRUFBRW9RLFdBQVcsS0FBT3BRLEVBQUlBLEVBQUVncUIsUUFFL0JocUIsRUFBSSxDQURBQSxHQUdBLEVBQUkrQixFQUFHLENBQ1QsSUFBSUMsRUFBSWtDLEdBQUcsRUFBR2xGLEVBQUdnQixFQUFHQSxFQUFHcUgsRUFBR3RCLEVBQUcsRUFBRyxFQUFHLEVBQUcsUUFDdEMsSUFBVy9ELEdBQUssaUJBQW9CQSxJQUFNaEQsRUFBSWdELEVBQ2hELENBRUEsSUFBSWxELEVBQUk4RixFQUFFeUcsRUFBR3JMLEVBQUdoQixFQUFHLEVBQUcsR0FLdEIsT0FKQSxFQUFJK0MsUUFBbUQsS0FBN0NDLEVBQUlrQyxHQUFHLEVBQUdwRixFQUFHa0IsRUFBR0EsRUFBR3FILEVBQUd0QixFQUFHakgsRUFBRVUsT0FBUSxFQUFHLEVBQUcsTUFBcUJWLEVBQUlrRCxHQUU1RXdGLEVBQUksRUFDSnpCLEVBQUlzQixFQUFJLEVBQ0R2SSxDQUNULENBRUEsSUFBSWlGLEVBQUssUUFDTE0sRUFBSSxZQUNKM0YsRUFBSyxPQUNMc0MsRUFBSyxVQUNMTyxFQUFLLHNCQUNMYixFQUFLLFNBQ0wrRyxFQUFJLG9CQUNKNUgsRUFBSyxxQkFDTHNSLEVBQUksYUFDSmhSLEVBQUssZ0JBQ0xrUCxFQUFJLHFCQUNKalEsRUFBSyxrQkFDTHlDLEVBQUssZUFDTHZCLEVBQUssZUFDTG9CLEVBQUssOEJBQ0xSLEVBQUssbUNBQ0xMLEVBQUssc0JBQ0xrRixFQUFJLEVBQ0pzQixFQUFJLEVBQ0pHLEVBQUksRUFDSjdDLEVBQUksRUFDSjBHLEVBQUksR0FDSmtCLEVBQUksR0FDSnhLLEVBQUksRUFDSjZRLEVBQUksS0FDSjJRLEVBQUksRUFLUixPQUhBeGMsRUFBRW1uRCxJQXBFRixTQUFTejZDLEVBQUUxVCxHQUNULE9BQVFBLEdBQ04sVUFBSyxFQUNMLEtBQUssS0FDSGdDLEVBQUl3SyxFQUFFL00sT0FBUyxFQUNmLE1BRUYsUUFDRSxHQUFJLG1CQUFzQk8sRUFBR3dNLEVBQUV4SyxLQUFPaEMsT0FBTyxHQUFJLGlCQUFvQkEsRUFBRyxJQUFLLElBQUlmLEVBQUksRUFBR2dCLEVBQUlELEVBQUVQLE9BQVFSLEVBQUlnQixJQUFLaEIsRUFDN0d5VSxFQUFFMVQsRUFBRWYsU0FDQ3VrQixFQUFVLElBQUp4akIsRUFHakIsT0FBTzBULENBQ1QsRUF1REExTSxFQUFFbWpCLElBQU14VyxPQUNSLElBQVdPLEdBQUtQLEVBQUVPLEdBQ1hsTixDQUNULEVDbmpCQSxFQWpEbUIsQ0FDakJtbEIsd0JBQXlCLEVBQ3pCRSxrQkFBbUIsRUFDbkJDLGlCQUFrQixFQUNsQkMsaUJBQWtCLEVBQ2xCQyxRQUFTLEVBQ1RDLGFBQWMsRUFDZEMsZ0JBQWlCLEVBQ2pCQyxZQUFhLEVBQ2JDLFFBQVMsRUFDVEMsS0FBTSxFQUNOQyxTQUFVLEVBQ1ZDLGFBQWMsRUFDZEMsV0FBWSxFQUNaQyxhQUFjLEVBQ2RDLFVBQVcsRUFDWEUsUUFBUyxFQUNUQyxXQUFZLEVBQ1pDLFlBQWEsRUFDYkMsYUFBYyxFQUNkQyxXQUFZLEVBQ1pDLGNBQWUsRUFDZkMsZUFBZ0IsRUFDaEJDLGdCQUFpQixFQUNqQnlnQyxVQUFXLEVBQ1hDLGNBQWUsRUFDZkMsYUFBYyxFQUNkQyxpQkFBa0IsRUFDbEIzZ0MsV0FBWSxFQUNaeEwsV0FBWSxFQUNaMEwsUUFBUyxFQUNUQyxNQUFPLEVBQ1BDLFFBQVMsRUFDVEMsUUFBUyxFQUNUQyxPQUFRLEVBQ1JDLE9BQVEsRUFDUkMsS0FBTSxFQUNOb2dDLGdCQUFpQixFQUVqQm5nQyxZQUFhLEVBQ2JDLGFBQWMsRUFDZEMsWUFBYSxFQUNiQyxnQkFBaUIsRUFDakJDLGlCQUFrQixFQUNsQkMsaUJBQWtCLEVBQ2xCQyxjQUFlLEVBQ2ZDLFlBQWEsR0N0Q2YsRUFSQSxTQUFpQjY5QixHQUNmLElBQUl2VCxFQUFRdDZDLE9BQU9xSSxPQUFPLE1BQzFCLE9BQU8sU0FBVXduRCxHQUVmLFlBRG1CakwsSUFBZnRLLEVBQU11VixLQUFvQnZWLEVBQU11VixHQUFPaEMsRUFBR2dDLElBQ3ZDdlYsRUFBTXVWLEVBQ2YsQ0FDRixFQ0pBLElBQUlDLEVBQWtCLG85SEFZdEIsUUFWaUMsR0FBUSxTQUFVaEUsR0FDakQsT0FBT2dFLEVBQWdCL3BELEtBQUsrbEQsSUFBZ0MsTUFBdkJBLEVBQUtyNkMsV0FBVyxJQUUzQixNQUF2QnE2QyxFQUFLcjZDLFdBQVcsSUFFaEJxNkMsRUFBS3I2QyxXQUFXLEdBQUssRUFDMUIsSUNWeVksU0FBU2hNLElBQUksT0FBT0EsRUFBRXpGLE9BQU9vckIsUUFBUSxTQUFTL3BCLEdBQUcsSUFBSSxJQUFJNEQsRUFBRSxFQUFFQSxFQUFFdEMsVUFBVTlCLE9BQU9vRSxJQUFJLENBQUMsSUFBSStLLEVBQUVyTixVQUFVc0MsR0FBRyxJQUFJLElBQUlvSCxLQUFLMkQsRUFBRWhRLE9BQU9PLFVBQVVnSSxlQUFlL0YsS0FBS3dOLEVBQUUzRCxLQUFLaEwsRUFBRWdMLEdBQUcyRCxFQUFFM0QsR0FBRyxDQUFDLE9BQU9oTCxDQUFDLEdBQUdvQixNQUFNeEIsS0FBSzBCLFVBQVUsQ0FBQyxJQUFJL0IsRUFBRSxTQUFTUyxFQUFFNEQsR0FBRyxJQUFJLElBQUkrSyxFQUFFLENBQUMzTyxFQUFFLElBQUlnTCxFQUFFLEVBQUV5TCxFQUFFN1MsRUFBRXBFLE9BQU93TCxFQUFFeUwsRUFBRXpMLEdBQUcsRUFBRTJELEVBQUVwSSxLQUFLM0MsRUFBRW9ILEdBQUdoTCxFQUFFZ0wsRUFBRSxJQUFJLE9BQU8yRCxDQUFDLEVBQUVwQyxFQUFFLFNBQVMzSSxHQUFHLE9BQU8sT0FBT0EsR0FBRyxpQkFBaUJBLEdBQUcscUJBQXFCQSxFQUFFckQsU0FBU3FELEVBQUVyRCxXQUFXNUIsT0FBT08sVUFBVXFCLFNBQVNZLEtBQUt5QyxPQUFNLFlBQUVBLEVBQUUsRUFBRWUsRUFBRWhHLE9BQU8rdkQsT0FBTyxJQUFJbG5ELEVBQUU3SSxPQUFPK3ZELE9BQU8sQ0FBQyxHQUFHLFNBQVMzdkQsRUFBRWlCLEdBQUcsTUFBTSxtQkFBbUJBLENBQUMsQ0FBQyxTQUFTMnVELEVBQUUzdUQsR0FBRyxPQUFrRUEsRUFBRTBELGFBQWExRCxFQUFFOEMsTUFBTSxXQUFXLENBQUMsU0FBU3VCLEVBQUVyRSxHQUFHLE9BQU9BLEdBQUcsaUJBQWlCQSxFQUFFNHVELGlCQUFpQixDQUFDLElBQUk3c0QsRUFBRSxvQkFBb0I4c0QsVUFBZ0Msa0JBQVlDLG1CQUFtQixrQkFBWUMsVUFBVSxjQUF3QjVtRCxFQUFFLG9CQUFvQjdKLFFBQVEsZ0JBQWdCQSxPQUFPdUYsRUFBRW1yRCxRQUFRLGtCQUFrQkMsa0JBQWtCQSxrQkFBa0Isb0JBQW9CSixlQUFnQyxJQUFTLGtCQUFZSyw2QkFBNkIsS0FBSyxrQkFBWUEsNEJBQTRCLFVBQVUsa0JBQVlBLDZCQUE2QixrQkFBWUEsaUNBQTRCLElBQVMsa0JBQVlELG1CQUFtQixLQUFLLGtCQUFZQSxtQkFBa0IsVUFBVSxrQkFBWUEsbUJBQW1CLGtCQUFZQSxvQkFBd0Q1akQsRUFBRSxDQUFDLEVBQWk1RyxTQUFTa0wsRUFBRXZXLEdBQUcsSUFBSSxJQUFJNEQsRUFBRXRDLFVBQVU5QixPQUFPbVAsRUFBRSxJQUFJMVAsTUFBTTJFLEVBQUUsRUFBRUEsRUFBRSxFQUFFLEdBQUdvSCxFQUFFLEVBQUVBLEVBQUVwSCxFQUFFb0gsSUFBSTJELEVBQUUzRCxFQUFFLEdBQUcxSixVQUFVMEosR0FBRyxNQUF5QyxJQUFJdEwsTUFBTSwrQ0FBK0NNLEVBQUUsMEJBQTBCMk8sRUFBRW5QLE9BQU8sRUFBRSxVQUFVbVAsRUFBRWxHLEtBQUssTUFBTSxJQUF1RCxDQUFDLElBQUlnTCxFQUFFLFdBQVcsU0FBU3pULEVBQUVBLEdBQUdKLEtBQUt1dkQsV0FBVyxJQUFJMTJDLFlBQVksS0FBSzdZLEtBQUtKLE9BQU8sSUFBSUksS0FBSzBxQixJQUFJdHFCLENBQUMsQ0FBQyxJQUFJNEQsRUFBRTVELEVBQUVkLFVBQVUsT0FBTzBFLEVBQUV3ckQsYUFBYSxTQUFTcHZELEdBQUcsSUFBSSxJQUFJNEQsRUFBRSxFQUFFK0ssRUFBRSxFQUFFQSxFQUFFM08sRUFBRTJPLElBQUkvSyxHQUFHaEUsS0FBS3V2RCxXQUFXeGdELEdBQUcsT0FBTy9LLENBQUMsRUFBRUEsRUFBRXlyRCxZQUFZLFNBQVNydkQsRUFBRTRELEdBQUcsR0FBRzVELEdBQUdKLEtBQUt1dkQsV0FBVzN2RCxPQUFPLENBQUMsSUFBSSxJQUFJbVAsRUFBRS9PLEtBQUt1dkQsV0FBV25rRCxFQUFFMkQsRUFBRW5QLE9BQU9pWCxFQUFFekwsRUFBRWhMLEdBQUd5VyxJQUFJQSxJQUFJLEdBQUcsR0FBR0YsRUFBRSxHQUFHLEdBQUd2VyxHQUFHSixLQUFLdXZELFdBQVcsSUFBSTEyQyxZQUFZaEMsR0FBRzdXLEtBQUt1dkQsV0FBV2psQyxJQUFJdmIsR0FBRy9PLEtBQUtKLE9BQU9pWCxFQUFFLElBQUksSUFBSWlMLEVBQUUxVyxFQUFFMFcsRUFBRWpMLEVBQUVpTCxJQUFJOWhCLEtBQUt1dkQsV0FBV3p0QyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUlrQyxFQUFFaGtCLEtBQUt3dkQsYUFBYXB2RCxFQUFFLEdBQUdsQixFQUFFLEVBQUVFLEVBQUU0RSxFQUFFcEUsT0FBT1YsRUFBRUUsRUFBRUYsSUFBSWMsS0FBSzBxQixJQUFJZ2xDLFdBQVcxckMsRUFBRWhnQixFQUFFOUUsTUFBTWMsS0FBS3V2RCxXQUFXbnZELEtBQUs0akIsSUFBSSxFQUFFaGdCLEVBQUUyckQsV0FBVyxTQUFTdnZELEdBQUcsR0FBR0EsRUFBRUosS0FBS0osT0FBTyxDQUFDLElBQUlvRSxFQUFFaEUsS0FBS3V2RCxXQUFXbnZELEdBQUcyTyxFQUFFL08sS0FBS3d2RCxhQUFhcHZELEdBQUdnTCxFQUFFMkQsRUFBRS9LLEVBQUVoRSxLQUFLdXZELFdBQVdudkQsR0FBRyxFQUFFLElBQUksSUFBSXlXLEVBQUU5SCxFQUFFOEgsRUFBRXpMLEVBQUV5TCxJQUFJN1csS0FBSzBxQixJQUFJa2xDLFdBQVc3Z0QsRUFBRSxDQUFDLEVBQUUvSyxFQUFFNnJELFNBQVMsU0FBU3p2RCxHQUFHLElBQUk0RCxFQUFFLEdBQUcsR0FBRzVELEdBQUdKLEtBQUtKLFFBQVEsSUFBSUksS0FBS3V2RCxXQUFXbnZELEdBQUcsT0FBTzRELEVBQUUsSUFBSSxJQUFJK0ssRUFBRS9PLEtBQUt1dkQsV0FBV252RCxHQUFHZ0wsRUFBRXBMLEtBQUt3dkQsYUFBYXB2RCxHQUFHeVcsRUFBRXpMLEVBQUUyRCxFQUFFK1MsRUFBRTFXLEVBQUUwVyxFQUFFakwsRUFBRWlMLElBQUk5ZCxHQUFHaEUsS0FBSzBxQixJQUFJb2xDLFFBQVFodUMsR0FBRyxZQUFZLE9BQU85ZCxDQUFDLEVBQUU1RCxDQUFDLENBQWg1QixHQUFvNUI4RixFQUFFLElBQUkrckIsSUFBSXRqQixHQUFFLElBQUlzakIsSUFBSXBqQixHQUFFLEVBQUUxSCxHQUFFLFNBQVMvRyxHQUFHLEdBQUc4RixFQUFFKzJCLElBQUk3OEIsR0FBRyxPQUFPOEYsRUFBRTZrQixJQUFJM3FCLEdBQUcsS0FBS3VPLEdBQUVzdUIsSUFBSXB1QixLQUFJQSxLQUFJLElBQUk3SyxFQUFFNkssS0FBSSxPQUEwRTNJLEVBQUVva0IsSUFBSWxxQixFQUFFNEQsR0FBRzJLLEdBQUUyYixJQUFJdG1CLEVBQUU1RCxHQUFHNEQsQ0FBQyxFQUFFbUMsR0FBRSxTQUFTL0YsR0FBRyxPQUFPdU8sR0FBRW9jLElBQUkzcUIsRUFBRSxFQUFFNEUsR0FBRSxTQUFTNUUsRUFBRTRELEdBQUdBLEdBQUc2SyxLQUFJQSxHQUFFN0ssRUFBRSxHQUFHa0MsRUFBRW9rQixJQUFJbHFCLEVBQUU0RCxHQUFHMkssR0FBRTJiLElBQUl0bUIsRUFBRTVELEVBQUUsRUFBRXFQLEdBQUUsU0FBU3ROLEVBQUUsaUNBQWlDa0osR0FBRSxJQUFJdkQsT0FBTyxJQUFJM0YsRUFBRSxnREFBZ0QwRixHQUFFLFNBQVN6SCxFQUFFNEQsRUFBRStLLEdBQUcsSUFBSSxJQUFJM0QsRUFBRXlMLEVBQUU5SCxFQUFFN08sTUFBTSxLQUFLNGhCLEVBQUUsRUFBRWtDLEVBQUVuTixFQUFFalgsT0FBT2tpQixFQUFFa0MsRUFBRWxDLEtBQUsxVyxFQUFFeUwsRUFBRWlMLEtBQUsxaEIsRUFBRTJ2RCxhQUFhL3JELEVBQUVvSCxFQUFFLEVBQUV1WSxHQUFFLFNBQVN2akIsRUFBRTRELEdBQUcsSUFBSSxJQUFJK0ssR0FBRy9LLEVBQUVxTixhQUFhLElBQUluUixNQUFNLGFBQWFrTCxFQUFFLEdBQUd5TCxFQUFFLEVBQUVpTCxFQUFFL1MsRUFBRW5QLE9BQU9pWCxFQUFFaUwsRUFBRWpMLElBQUksQ0FBQyxJQUFJbU4sRUFBRWpWLEVBQUU4SCxHQUFHdVQsT0FBTyxHQUFHcEcsRUFBRSxDQUFDLElBQUk5a0IsRUFBRThrQixFQUFFdGIsTUFBTTJDLElBQUcsR0FBR25NLEVBQUUsQ0FBQyxJQUFJRSxFQUFFLEVBQUVzWixTQUFTeFosRUFBRSxHQUFHLElBQUl5TSxFQUFFek0sRUFBRSxHQUFHLElBQUlFLElBQUk0RixHQUFFMkcsRUFBRXZNLEdBQUd5SSxHQUFFekgsRUFBRXVMLEVBQUV6TSxFQUFFLElBQUlrQixFQUFFNHZELFNBQVNQLFlBQVlyd0QsRUFBRWdNLElBQUlBLEVBQUV4TCxPQUFPLENBQUMsTUFBTXdMLEVBQUV6RSxLQUFLcWQsRUFBRSxDQUFDLENBQUMsRUFBRWpoQixHQUFFLFdBQVcsT0FBNEMsc0JBQXNCLEVBQUV1QixHQUFFLFNBQVNsRSxHQUFHLElBQUk0RCxFQUFFNEIsU0FBU3NJLEtBQUthLEVBQUUzTyxHQUFHNEQsRUFBRW9ILEVBQUV4RixTQUFTQyxjQUFjLFNBQVNnUixFQUFFLFNBQVN6VyxHQUFHLElBQUksSUFBSTRELEVBQUU1RCxFQUFFNnZELFdBQVdsaEQsRUFBRS9LLEVBQUVwRSxPQUFPbVAsR0FBRyxFQUFFQSxJQUFJLENBQUMsSUFBSTNELEVBQUVwSCxFQUFFK0ssR0FBRyxHQUFHM0QsR0FBRyxJQUFJQSxFQUFFK0YsVUFBVS9GLEVBQUU4a0QsYUFBYS90RCxHQUFHLE9BQU9pSixDQUFDLENBQUMsQ0FBcEgsQ0FBc0gyRCxHQUFHK1MsT0FBRSxJQUFTakwsRUFBRUEsRUFBRWtMLFlBQVksS0FBSzNXLEVBQUUwQyxhQUFhM0wsRUFBRSxVQUFVaUosRUFBRTBDLGFBQWEsc0JBQXNCLFNBQVMsSUFBSWtXLEVBQUVqaEIsS0FBSSxPQUFPaWhCLEdBQUc1WSxFQUFFMEMsYUFBYSxRQUFRa1csR0FBR2pWLEVBQUVkLGFBQWE3QyxFQUFFMFcsR0FBRzFXLENBQUMsRUFBRW9aLEdBQUUsV0FBVyxTQUFTcGtCLEVBQUVBLEdBQUcsSUFBSTRELEVBQUVoRSxLQUFLODZCLFFBQVF4MkIsR0FBRWxFLEdBQUc0RCxFQUFFOEIsWUFBWUYsU0FBU3V0QyxlQUFlLEtBQUtuekMsS0FBS213RCxNQUFNLFNBQVMvdkQsR0FBRyxHQUFHQSxFQUFFK3ZELE1BQU0sT0FBTy92RCxFQUFFK3ZELE1BQU0sSUFBSSxJQUFJbnNELEVBQUU0QixTQUFTd3FELFlBQVlyaEQsRUFBRSxFQUFFM0QsRUFBRXBILEVBQUVwRSxPQUFPbVAsRUFBRTNELEVBQUUyRCxJQUFJLENBQUMsSUFBSThILEVBQUU3UyxFQUFFK0ssR0FBRyxHQUFHOEgsRUFBRXc1QyxZQUFZandELEVBQUUsT0FBT3lXLENBQUMsQ0FBQ0YsRUFBRSxHQUFHLENBQXpJLENBQTJJM1MsR0FBR2hFLEtBQUtKLE9BQU8sQ0FBQyxDQUFDLElBQUlvRSxFQUFFNUQsRUFBRWQsVUFBVSxPQUFPMEUsRUFBRTByRCxXQUFXLFNBQVN0dkQsRUFBRTRELEdBQUcsSUFBSSxPQUFPaEUsS0FBS213RCxNQUFNVCxXQUFXMXJELEVBQUU1RCxHQUFHSixLQUFLSixVQUFTLENBQUUsQ0FBQyxNQUFNUSxHQUFHLE9BQU0sQ0FBRSxDQUFDLEVBQUU0RCxFQUFFNHJELFdBQVcsU0FBU3h2RCxHQUFHSixLQUFLbXdELE1BQU1QLFdBQVd4dkQsR0FBR0osS0FBS0osUUFBUSxFQUFFb0UsRUFBRThyRCxRQUFRLFNBQVMxdkQsR0FBRyxJQUFJNEQsRUFBRWhFLEtBQUttd0QsTUFBTUcsU0FBU2x3RCxHQUFHLFlBQU8sSUFBUzRELEdBQUcsaUJBQWlCQSxFQUFFc2IsUUFBUXRiLEVBQUVzYixRQUFRLEVBQUUsRUFBRWxmLENBQUMsQ0FBbmpCLEdBQXVqQmlVLEdBQUUsV0FBVyxTQUFTalUsRUFBRUEsR0FBRyxJQUFJNEQsRUFBRWhFLEtBQUs4NkIsUUFBUXgyQixHQUFFbEUsR0FBR0osS0FBS3V3RCxNQUFNdnNELEVBQUVpc0QsV0FBV2p3RCxLQUFLSixPQUFPLENBQUMsQ0FBQyxJQUFJb0UsRUFBRTVELEVBQUVkLFVBQVUsT0FBTzBFLEVBQUUwckQsV0FBVyxTQUFTdHZELEVBQUU0RCxHQUFHLEdBQUc1RCxHQUFHSixLQUFLSixRQUFRUSxHQUFHLEVBQUUsQ0FBQyxJQUFJMk8sRUFBRW5KLFNBQVN1dEMsZUFBZW52QyxHQUFHb0gsRUFBRXBMLEtBQUt1d0QsTUFBTW53RCxHQUFHLE9BQU9KLEtBQUs4NkIsUUFBUTdzQixhQUFhYyxFQUFFM0QsR0FBRyxNQUFNcEwsS0FBS0osVUFBUyxDQUFFLENBQUMsT0FBTSxDQUFFLEVBQUVvRSxFQUFFNHJELFdBQVcsU0FBU3h2RCxHQUFHSixLQUFLODZCLFFBQVF4eEIsWUFBWXRKLEtBQUt1d0QsTUFBTW53RCxJQUFJSixLQUFLSixRQUFRLEVBQUVvRSxFQUFFOHJELFFBQVEsU0FBUzF2RCxHQUFHLE9BQU9BLEVBQUVKLEtBQUtKLE9BQU9JLEtBQUt1d0QsTUFBTW53RCxHQUFHaVIsWUFBWSxFQUFFLEVBQUVqUixDQUFDLENBQXRiLEdBQTBiMFQsR0FBRSxXQUFXLFNBQVMxVCxFQUFFQSxHQUFHSixLQUFLd3dELE1BQU0sR0FBR3h3RCxLQUFLSixPQUFPLENBQUMsQ0FBQyxJQUFJb0UsRUFBRTVELEVBQUVkLFVBQVUsT0FBTzBFLEVBQUUwckQsV0FBVyxTQUFTdHZELEVBQUU0RCxHQUFHLE9BQU81RCxHQUFHSixLQUFLSixTQUFTSSxLQUFLd3dELE1BQU05VixPQUFPdDZDLEVBQUUsRUFBRTRELEdBQUdoRSxLQUFLSixVQUFTLEVBQUcsRUFBRW9FLEVBQUU0ckQsV0FBVyxTQUFTeHZELEdBQUdKLEtBQUt3d0QsTUFBTTlWLE9BQU90NkMsRUFBRSxHQUFHSixLQUFLSixRQUFRLEVBQUVvRSxFQUFFOHJELFFBQVEsU0FBUzF2RCxHQUFHLE9BQU9BLEVBQUVKLEtBQUtKLE9BQU9JLEtBQUt3d0QsTUFBTXB3RCxHQUFHLEVBQUUsRUFBRUEsQ0FBQyxDQUExUyxHQUE4U2lFLEdBQUVrRSxFQUFFa1YsR0FBRSxDQUFDZ3pDLFVBQVVsb0QsRUFBRW1vRCxtQkFBbUJ6c0QsR0FBRzJJLEdBQUUsV0FBVyxTQUFTeE0sRUFBRUEsRUFBRTRELEVBQUUrSyxRQUFHLElBQVMzTyxJQUFJQSxFQUFFd0gsUUFBRyxJQUFTNUQsSUFBSUEsRUFBRSxDQUFDLEdBQUdoRSxLQUFLNHJCLFFBQVFwbkIsRUFBRSxDQUFDLEVBQUVpWixHQUFFLENBQUMsRUFBRXJkLEdBQUdKLEtBQUsyd0QsR0FBRzNzRCxFQUFFaEUsS0FBSzR3RCxNQUFNLElBQUkzK0IsSUFBSWxqQixHQUFHL08sS0FBSzZ3RCxTQUFTendELEVBQUVxd0QsVUFBVXp3RCxLQUFLNndELFFBQVF0b0QsR0FBR2xFLEtBQUlBLElBQUUsRUFBRyxTQUFTakUsR0FBRyxJQUFJLElBQUk0RCxFQUFFNEIsU0FBUzBZLGlCQUFpQjdPLElBQUdWLEVBQUUsRUFBRTNELEVBQUVwSCxFQUFFcEUsT0FBT21QLEVBQUUzRCxFQUFFMkQsSUFBSSxDQUFDLElBQUk4SCxFQUFFN1MsRUFBRStLLEdBQUc4SCxHQUFHLFdBQVdBLEVBQUVySixhQUFhckwsS0FBS3doQixHQUFFdmpCLEVBQUV5VyxHQUFHQSxFQUFFdE4sWUFBWXNOLEVBQUV0TixXQUFXRCxZQUFZdU4sR0FBRyxDQUFDLENBQTFLLENBQTRLN1csTUFBTSxDQUFDSSxFQUFFMHdELFdBQVcsU0FBUzF3RCxHQUFHLE9BQU8rRyxHQUFFL0csRUFBRSxFQUFFLElBQUk0RCxFQUFFNUQsRUFBRWQsVUFBVSxPQUFPMEUsRUFBRStzRCx1QkFBdUIsU0FBUy9zRCxFQUFFK0ssR0FBRyxZQUFPLElBQVNBLElBQUlBLEdBQUUsR0FBSSxJQUFJM08sRUFBRW9FLEVBQUUsQ0FBQyxFQUFFeEUsS0FBSzRyQixRQUFRLENBQUMsRUFBRTVuQixHQUFHaEUsS0FBSzJ3RCxHQUFHNWhELEdBQUcvTyxLQUFLNHdELFlBQU8sRUFBTyxFQUFFNXNELEVBQUVndEQsbUJBQW1CLFNBQVM1d0QsR0FBRyxPQUFPSixLQUFLMndELEdBQUd2d0QsSUFBSUosS0FBSzJ3RCxHQUFHdndELElBQUksR0FBRyxDQUFDLEVBQUU0RCxFQUFFZ3NELE9BQU8sV0FBVyxPQUFPaHdELEtBQUswcUIsTUFBTTFxQixLQUFLMHFCLEtBQUszYixHQUFHL0ssRUFBRWhFLEtBQUs0ckIsU0FBUzZrQyxTQUFTcmxELEVBQUVwSCxFQUFFMHNELGtCQUFrQjc1QyxFQUFFN1MsRUFBRThjLE9BQU8xZ0IsRUFBRTJPLEVBQUUsSUFBSStFLEdBQUUrQyxHQUFHekwsRUFBRSxJQUFJb1osR0FBRTNOLEdBQUcsSUFBSXhDLEdBQUV3QyxHQUFHLElBQUloRCxFQUFFelQsS0FBSyxJQUFJQSxFQUFFNEQsRUFBRStLLEVBQUUzRCxFQUFFeUwsQ0FBQyxFQUFFN1MsRUFBRWl0RCxhQUFhLFNBQVM3d0QsRUFBRTRELEdBQUcsT0FBT2hFLEtBQUs0d0QsTUFBTTN6QixJQUFJNzhCLElBQUlKLEtBQUs0d0QsTUFBTTdsQyxJQUFJM3FCLEdBQUc2OEIsSUFBSWo1QixFQUFFLEVBQUVBLEVBQUUrckQsYUFBYSxTQUFTM3ZELEVBQUU0RCxHQUFHLEdBQUdtRCxHQUFFL0csR0FBR0osS0FBSzR3RCxNQUFNM3pCLElBQUk3OEIsR0FBR0osS0FBSzR3RCxNQUFNN2xDLElBQUkzcUIsR0FBR21wQixJQUFJdmxCLE9BQU8sQ0FBQyxJQUFJK0ssRUFBRSxJQUFJdWEsSUFBSXZhLEVBQUV3YSxJQUFJdmxCLEdBQUdoRSxLQUFLNHdELE1BQU10bUMsSUFBSWxxQixFQUFFMk8sRUFBRSxDQUFDLEVBQUUvSyxFQUFFeXJELFlBQVksU0FBU3J2RCxFQUFFNEQsRUFBRStLLEdBQUcvTyxLQUFLK3ZELGFBQWEzdkQsRUFBRTRELEdBQUdoRSxLQUFLZ3dELFNBQVNQLFlBQVl0b0QsR0FBRS9HLEdBQUcyTyxFQUFFLEVBQUUvSyxFQUFFa3RELFdBQVcsU0FBUzl3RCxHQUFHSixLQUFLNHdELE1BQU0zekIsSUFBSTc4QixJQUFJSixLQUFLNHdELE1BQU03bEMsSUFBSTNxQixHQUFHb2pCLE9BQU8sRUFBRXhmLEVBQUVtdEQsV0FBVyxTQUFTL3dELEdBQUdKLEtBQUtnd0QsU0FBU0wsV0FBV3hvRCxHQUFFL0csSUFBSUosS0FBS2t4RCxXQUFXOXdELEVBQUUsRUFBRTRELEVBQUVvdEQsU0FBUyxXQUFXcHhELEtBQUswcUIsU0FBSSxDQUFNLEVBQUUxbUIsRUFBRXJELFNBQVMsV0FBVyxPQUFPLFNBQVNQLEdBQUcsSUFBSSxJQUFJNEQsRUFBRTVELEVBQUU0dkQsU0FBU2poRCxFQUFFL0ssRUFBRXBFLE9BQU93TCxFQUFFLEdBQUd5TCxFQUFFLEVBQUVBLEVBQUU5SCxFQUFFOEgsSUFBSSxDQUFDLElBQUlpTCxFQUFFM2IsR0FBRTBRLEdBQUcsUUFBRyxJQUFTaUwsRUFBRSxDQUFDLElBQUlrQyxFQUFFNWpCLEVBQUV3d0QsTUFBTTdsQyxJQUFJakosR0FBRzVpQixFQUFFOEUsRUFBRTZyRCxTQUFTaDVDLEdBQUcsR0FBR21OLEdBQUc5a0IsR0FBRzhrQixFQUFFZ3ZCLEtBQUssQ0FBQyxJQUFJNXpDLEVBQUUrQyxFQUFFLEtBQUswVSxFQUFFLFFBQVFpTCxFQUFFLEtBQUtuVyxFQUFFLFFBQUcsSUFBU3FZLEdBQUdBLEVBQUUrRixTQUFRLFNBQVUzcEIsR0FBR0EsRUFBRVIsT0FBTyxJQUFJK0wsR0FBR3ZMLEVBQUUsSUFBSyxJQUFHZ0wsR0FBRyxHQUFHbE0sRUFBRUUsRUFBRSxhQUFhdU0sRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU9QLENBQUMsQ0FBL1IsQ0FBaVNwTCxLQUFLLEVBQUVJLENBQUMsQ0FBempELEdBQTZqRG9LLEdBQUUsV0FBVytHLEdBQUUsU0FBU25SLEdBQUcsT0FBT2MsT0FBT3ExQixhQUFhbjJCLEdBQUdBLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxTQUFTNGUsR0FBRzVlLEdBQUcsSUFBSTRELEVBQUUrSyxFQUFFLEdBQUcsSUFBSS9LLEVBQUVuRSxLQUFLd3hELElBQUlqeEQsR0FBRzRELEVBQUUsR0FBR0EsRUFBRUEsRUFBRSxHQUFHLEVBQUUrSyxFQUFFd0MsR0FBRXZOLEVBQUUsSUFBSStLLEVBQUUsT0FBT3dDLEdBQUV2TixFQUFFLElBQUkrSyxHQUFHN0gsUUFBUXNELEdBQUUsUUFBUSxDQUFDLElBQUlrWixHQUFHLFNBQVN0akIsRUFBRTRELEdBQUcsSUFBSSxJQUFJK0ssRUFBRS9LLEVBQUVwRSxPQUFPbVAsR0FBRzNPLEVBQUUsR0FBR0EsRUFBRTRELEVBQUV3TSxhQUFhekIsR0FBRyxPQUFPM08sQ0FBQyxFQUFFc2hCLEdBQUcsU0FBU3RoQixHQUFHLE9BQU9zakIsR0FBRyxLQUFLdGpCLEVBQUUsRUFBRSxTQUFTZ2pCLEdBQUdoakIsR0FBRyxJQUFJLElBQUk0RCxFQUFFLEVBQUVBLEVBQUU1RCxFQUFFUixPQUFPb0UsR0FBRyxFQUFFLENBQUMsSUFBSStLLEVBQUUzTyxFQUFFNEQsR0FBRyxHQUFHN0UsRUFBRTRQLEtBQUt0SyxFQUFFc0ssR0FBRyxPQUFNLENBQUUsQ0FBQyxPQUFNLENBQUUsQ0FBQyxJQUFJNlMsR0FBR0YsR0FBRyxTQUFTckcsR0FBRyxXQUFXLFNBQVNqYixFQUFFQSxFQUFFNEQsRUFBRStLLEdBQUcvTyxLQUFLd3dELE1BQU1wd0QsRUFBRUosS0FBS3N4RCxjQUFjLEdBQUd0eEQsS0FBS3V4RCxlQUErQyxJQUFTeGlELEdBQUdBLEVBQUV3aUQsV0FBV251QyxHQUFHaGpCLEdBQUdKLEtBQUt3eEQsWUFBWXh0RCxFQUFFaEUsS0FBS3l4RCxTQUFTL3RDLEdBQUc5QixHQUFHNWQsR0FBR2hFLEtBQUsweEQsVUFBVTNpRCxFQUFFbkMsR0FBRWtrRCxXQUFXOXNELEVBQUUsQ0FBQyxPQUFPNUQsRUFBRWQsVUFBVXF5RCx3QkFBd0IsU0FBU3Z4RCxFQUFFNEQsRUFBRStLLEdBQUcsSUFBSTNELEVBQUVwTCxLQUFLd3hELFlBQVkzNkMsRUFBRSxHQUFHLEdBQUc3VyxLQUFLMHhELFdBQVc3NkMsRUFBRWxRLEtBQUszRyxLQUFLMHhELFVBQVVDLHdCQUF3QnZ4RCxFQUFFNEQsRUFBRStLLElBQUkvTyxLQUFLdXhELFdBQVd4aUQsRUFBRTZpRCxLQUFLLEdBQUc1eEQsS0FBS3N4RCxlQUFldHRELEVBQUVpdEQsYUFBYTdsRCxFQUFFcEwsS0FBS3N4RCxlQUFlejZDLEVBQUVsUSxLQUFLM0csS0FBS3N4RCxtQkFBbUIsQ0FBQyxJQUFJeHZDLEVBQUUyWCxHQUFHejVCLEtBQUt3d0QsTUFBTXB3RCxFQUFFNEQsRUFBRStLLEdBQUdsRyxLQUFLLElBQUltYixFQUFFaEYsR0FBRzBFLEdBQUcxakIsS0FBS3l4RCxTQUFTM3ZDLEtBQUssR0FBRyxJQUFJOWQsRUFBRWl0RCxhQUFhN2xELEVBQUU0WSxHQUFHLENBQUMsSUFBSTlrQixFQUFFNlAsRUFBRStTLEVBQUUsSUFBSWtDLE9BQUUsRUFBTzVZLEdBQUdwSCxFQUFFeXJELFlBQVlya0QsRUFBRTRZLEVBQUU5a0IsRUFBRSxDQUFDMlgsRUFBRWxRLEtBQUtxZCxHQUFHaGtCLEtBQUtzeEQsY0FBY3R0QyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUk1a0IsRUFBRVksS0FBS3d3RCxNQUFNNXdELE9BQU8rTCxFQUFFK1gsR0FBRzFqQixLQUFLeXhELFNBQVMxaUQsRUFBRTZpRCxNQUFNOWlELEVBQUUsR0FBRzNPLEVBQUUsRUFBRUEsRUFBRWYsRUFBRWUsSUFBSSxDQUFDLElBQUlpQyxFQUFFcEMsS0FBS3d3RCxNQUFNcndELEdBQUcsR0FBRyxpQkFBaUJpQyxFQUFFME0sR0FBRzFNLE9BQTBELEdBQUdBLEVBQUUsQ0FBQyxJQUFJaU4sRUFBRW9xQixHQUFHcjNCLEVBQUVoQyxFQUFFNEQsRUFBRStLLEdBQUd0TyxFQUFFcEIsTUFBTWdDLFFBQVFnTyxHQUFHQSxFQUFFeEcsS0FBSyxJQUFJd0csRUFBRTFELEVBQUUrWCxHQUFHL1gsRUFBRWxMLEVBQUVOLEdBQUcyTyxHQUFHck8sQ0FBQyxDQUFDLENBQUMsR0FBR3FPLEVBQUUsQ0FBQyxJQUFJM04sRUFBRTZkLEdBQUdyVCxJQUFJLEdBQUcsSUFBSTNILEVBQUVpdEQsYUFBYTdsRCxFQUFFakssR0FBRyxDQUFDLElBQUlvTyxFQUFFUixFQUFFRCxFQUFFLElBQUkzTixPQUFFLEVBQU9pSyxHQUFHcEgsRUFBRXlyRCxZQUFZcmtELEVBQUVqSyxFQUFFb08sRUFBRSxDQUFDc0gsRUFBRWxRLEtBQUt4RixFQUFFLENBQUMsQ0FBQyxPQUFPMFYsRUFBRWhPLEtBQUssSUFBSSxFQUFFekksQ0FBQyxDQUF2aEMsR0FBMmhDOGdCLEdBQUcsZ0JBQWdCeEMsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssU0FBU0UsR0FBR3hlLEdBQUcsSUFBSTRELEVBQUUrSyxFQUFFM0QsRUFBRXlMLEVBQUVpTCxPQUFFLElBQVMxaEIsRUFBRXdILEVBQUV4SCxFQUFFNGpCLEVBQUVsQyxFQUFFOEosUUFBUTFzQixPQUFFLElBQVM4a0IsRUFBRXBjLEVBQUVvYyxFQUFFNWtCLEVBQUUwaUIsRUFBRSt2QyxRQUFRbG1ELE9BQUUsSUFBU3ZNLEVBQUUyRixFQUFFM0YsRUFBRTBQLEVBQUUsSUFBSSxFQUFFNVAsR0FBR2lCLEVBQUUsR0FBR2lDLEVBQUUsU0FBU2hDLEdBQUcsU0FBUzRELEVBQUVBLEdBQUcsR0FBR0EsRUFBRSxJQUFJNUQsRUFBRTRELEVBQUUsSUFBSSxDQUFDLE1BQU01RCxHQUFHLENBQUMsQ0FBQyxPQUFPLFNBQVMyTyxFQUFFM0QsRUFBRXlMLEVBQUVpTCxFQUFFa0MsRUFBRTlrQixFQUFFRSxFQUFFdU0sRUFBRW1ELEVBQUUzTyxHQUFHLE9BQU80TyxHQUFHLEtBQUssRUFBRSxHQUFHLElBQUlELEdBQUcsS0FBSzFELEVBQUVvRixXQUFXLEdBQUcsT0FBT3BRLEVBQUVnTCxFQUFFLEtBQUssR0FBRyxNQUFNLEtBQUssRUFBRSxHQUFHLElBQUlPLEVBQUUsT0FBT1AsRUFBRSxRQUFRLE1BQU0sS0FBSyxFQUFFLE9BQU9PLEdBQUcsS0FBSyxJQUFJLEtBQUssSUFBSSxPQUFPdkwsRUFBRXlXLEVBQUUsR0FBR3pMLEdBQUcsR0FBRyxRQUFRLE9BQU9BLEdBQUcsSUFBSWpMLEVBQUUsUUFBUSxJQUFJLEtBQUssRUFBRWlMLEVBQUVsTCxNQUFNLFVBQVU2cEIsUUFBUS9sQixHQUFHLENBQUMsQ0FBNVUsRUFBOFUsU0FBVTVELEdBQUdELEVBQUV3RyxLQUFLdkcsRUFBRyxJQUFHSyxFQUFFLFNBQVNMLEVBQUVnTCxFQUFFMFcsR0FBRyxPQUFPLElBQUkxVyxJQUFJLElBQUlzVCxHQUFHMWMsUUFBUThmLEVBQUUvUyxFQUFFblAsVUFBVWtpQixFQUFFcFosTUFBTW1PLEdBQUd6VyxFQUFFLElBQUk0RCxDQUFDLEVBQUUsU0FBUzdDLEVBQUVmLEVBQUUwaEIsRUFBRWtDLEVBQUU5a0IsUUFBRyxJQUFTQSxJQUFJQSxFQUFFLEtBQUssSUFBSUUsRUFBRWdCLEVBQUU4RyxRQUFRZ2EsR0FBRyxJQUFJdlYsRUFBRW1XLEdBQUdrQyxFQUFFQSxFQUFFLElBQUlsQyxFQUFFLE1BQU0xaUIsRUFBRSxLQUFLQSxFQUFFLE9BQU80RSxFQUFFOUUsRUFBRTZQLEVBQUUrUyxFQUFFMVcsRUFBRSxJQUFJdEQsT0FBTyxLQUFLaUgsRUFBRSxNQUFNLEtBQUs4SCxFQUFFLElBQUkvTyxPQUFPLE1BQU1pSCxFQUFFLFlBQVlELEVBQUVrVixJQUFJbEMsRUFBRSxHQUFHQSxFQUFFblcsRUFBRSxDQUFDLE9BQU9tRCxFQUFFdy9DLElBQUksR0FBRzVpRCxPQUFPQyxFQUFFLENBQUMsU0FBU3ZMLEVBQUU0RCxFQUFFNlMsR0FBRyxJQUFJelcsR0FBR3lXLEVBQUVqWCxRQUFRaVgsRUFBRSxHQUFHdEUsWUFBWXhELEdBQUcsSUFBSThILEVBQUUsR0FBR0EsRUFBRSxHQUFHM1AsUUFBUWtFLEVBQUUzSyxHQUFHLEVBQUUyQixFQUFFLFNBQVNoQyxHQUFHLElBQUksSUFBSUEsRUFBRSxDQUFDLElBQUk0RCxFQUFFN0QsRUFBRSxPQUFPQSxFQUFFLEdBQUc2RCxDQUFDLENBQUMsS0FBSzdDLEVBQUV5d0QsS0FBS2ptRCxFQUFFL0wsT0FBTytMLEVBQUVrM0MsUUFBTyxTQUFVemlELEVBQUU0RCxHQUFHLE9BQU9BLEVBQUVkLE1BQU15VCxFQUFFLElBQUkrTSxHQUFHdGpCLEVBQUU0RCxFQUFFZCxLQUFNLEdBQUUsTUFBTXZDLFdBQVcsR0FBR1EsQ0FBQyxDQUFDLElBQUl5aUIsR0FBRyxrQkFBaUMvRSxJQUFaK0UsR0FBR3E3QixTQUFZLG1CQUFrQjcvQixJQUFJUCxHQUFHb2dDLFNBQVMsSUFBSXJ5QyxJQUFHaVYsR0FBR2pELEtBQUssU0FBU0ssS0FBSyxPQUFPLGdCQUFFMkUsS0FBS3hFLEVBQUUsQ0FBQyxTQUFTcUMsS0FBSyxPQUFPLGdCQUFFNUMsS0FBS2dELEVBQUUsQ0FBQyxTQUFTcUMsR0FBRzlqQixHQUFHLElBQUk0RCxHQUFFLGNBQUU1RCxFQUFFMHhELGVBQWUvaUQsRUFBRS9LLEVBQUUsR0FBRzhkLEVBQUU5ZCxFQUFFLEdBQUc1RSxFQUFFNmYsS0FBS3RULEdBQUUsY0FBRSxXQUFZLElBQUkzSCxFQUFFNUUsRUFBRSxPQUFPZ0IsRUFBRSt2RCxNQUFNbnNELEVBQUU1RCxFQUFFK3ZELE1BQU0vdkQsRUFBRTBnQixTQUFTOWMsRUFBRUEsRUFBRStzRCx1QkFBdUIsQ0FBQ2p3QyxPQUFPMWdCLEVBQUUwZ0IsU0FBUSxJQUFLMWdCLEVBQUUyeEQsd0JBQXdCL3RELEVBQUVBLEVBQUUrc0QsdUJBQXVCLENBQUNMLG1CQUFrQixLQUFNMXNELENBQUUsR0FBRSxDQUFDNUQsRUFBRTJ4RCxzQkFBc0IzeEQsRUFBRSt2RCxNQUFNL3ZELEVBQUUwZ0IsU0FBU2hTLEdBQUUsY0FBRSxXQUFZLE9BQU84UCxHQUFHLENBQUNnTixRQUFRLENBQUN5aUMsUUFBUWp1RCxFQUFFNHhELHVCQUF1QkgsUUFBUTlpRCxHQUFJLEdBQUUsQ0FBQzNPLEVBQUU0eEQsc0JBQXNCampELElBQUksT0FBTyxnQkFBRSxXQUFZLElBQUVBLEVBQUUzTyxFQUFFMHhELGdCQUFnQmh3QyxFQUFFMWhCLEVBQUUweEQsY0FBZSxHQUFFLENBQUMxeEQsRUFBRTB4RCxnQkFBZ0IsZ0JBQWdCbHVDLEdBQUdvN0IsU0FBUyxDQUFDei9DLE1BQU1vTSxHQUFHLGdCQUFnQmtULEdBQUdtZ0MsU0FBUyxDQUFDei9DLE1BQU11UCxHQUFtRTFPLEVBQUU2ckIsVUFBVSxDQUFDLElBQUlwSSxHQUFHLFdBQVcsU0FBU3pqQixFQUFFQSxFQUFFNEQsR0FBRyxJQUFJK0ssRUFBRS9PLEtBQUtBLEtBQUswOEMsT0FBTyxTQUFTdDhDLEVBQUU0RCxRQUFHLElBQVNBLElBQUlBLEVBQUU2ZCxJQUFJLElBQUl6VyxFQUFFMkQsRUFBRTdMLEtBQUtjLEVBQUU0dEQsS0FBS3h4RCxFQUFFNndELGFBQWFsaUQsRUFBRXNJLEdBQUdqTSxJQUFJaEwsRUFBRXF2RCxZQUFZMWdELEVBQUVzSSxHQUFHak0sRUFBRXBILEVBQUUrSyxFQUFFeWhELE1BQU1wbEQsRUFBRSxjQUFjLEVBQUVwTCxLQUFLVyxTQUFTLFdBQVcsT0FBT2dXLEVBQUUsR0FBR3pWLE9BQU82TixFQUFFN0wsTUFBTSxFQUFFbEQsS0FBS2tELEtBQUs5QyxFQUFFSixLQUFLcVgsR0FBRyxnQkFBZ0JqWCxFQUFFSixLQUFLd3dELE1BQU14c0QsQ0FBQyxDQUFDLE9BQU81RCxFQUFFZCxVQUFVMnlELFFBQVEsU0FBUzd4RCxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRXloQixJQUFJN2hCLEtBQUtrRCxLQUFLOUMsRUFBRXd4RCxJQUFJLEVBQUV4eEQsQ0FBQyxDQUE3VyxHQUFpWDhlLEdBQUcsVUFBVW1jLEdBQUcsV0FBV3ZYLEdBQUcsT0FBT2EsR0FBRyxTQUFTdmtCLEdBQUcsTUFBTSxJQUFJQSxFQUFFa1MsYUFBYSxFQUFFLFNBQVNxTSxHQUFHdmUsR0FBRyxPQUFPOGUsR0FBR3BhLEtBQUsxRSxHQUFHQSxFQUFFOEcsUUFBUW0wQixHQUFHMVcsSUFBSXpkLFFBQVE0YyxHQUFHLFFBQVExakIsQ0FBQyxDQUFDLElBQUk4eEQsR0FBRyxTQUFTOXhELEdBQUcsT0FBTyxNQUFNQSxJQUFHLElBQUtBLEdBQUcsS0FBS0EsQ0FBQyxFQUFFLFNBQVNxNUIsR0FBR3I1QixFQUFFMk8sRUFBRTNELEVBQUV5TCxHQUFHLEdBQUd4WCxNQUFNZ0MsUUFBUWpCLEdBQUcsQ0FBQyxJQUFJLElBQUkwaEIsRUFBRWtDLEVBQUUsR0FBRzlrQixFQUFFLEVBQUVFLEVBQUVnQixFQUFFUixPQUFPVixFQUFFRSxFQUFFRixHQUFHLEVBQUUsTUFBTTRpQixFQUFFMlgsR0FBR3I1QixFQUFFbEIsR0FBRzZQLEVBQUUzRCxFQUFFeUwsTUFBTXhYLE1BQU1nQyxRQUFReWdCLEdBQUdrQyxFQUFFcmQsS0FBS25GLE1BQU13aUIsRUFBRWxDLEdBQUdrQyxFQUFFcmQsS0FBS21iLElBQUksT0FBT2tDLENBQUMsQ0FBQyxPQUFHa3VDLEdBQUc5eEQsR0FBUyxHQUFNcUUsRUFBRXJFLEdBQVMsSUFBSUEsRUFBRTR1RCxrQkFBcUI3dkQsRUFBRWlCLEdBQU8sbUJBQW1CME8sRUFBRTFPLElBQUkwTyxFQUFFeFAsV0FBV3dQLEVBQUV4UCxVQUFVMDVDLG1CQUFtQmpxQyxFQUFTM08sRUFBb1FxNUIsR0FBNVByNUIsRUFBRTJPLEdBQStQQSxFQUFFM0QsRUFBRXlMLEdBQWdCelcsYUFBYXlqQixHQUFHelksR0FBR2hMLEVBQUVzOEMsT0FBT3R4QyxFQUFFeUwsR0FBR3pXLEVBQUU2eEQsUUFBUXA3QyxJQUFJelcsRUFBRXVNLEVBQUV2TSxHQUFHLFNBQVNBLEVBQUU0RCxFQUFFK0ssR0FBRyxJQUFJM0QsRUFBRXlMLEVBQUVpTCxFQUFFLEdBQUcsSUFBSSxJQUFJa0MsS0FBS2hnQixFQUFFQSxFQUFFc0QsZUFBZTBjLEtBQUtrdUMsR0FBR2x1RCxFQUFFZ2dCLE1BQU0za0IsTUFBTWdDLFFBQVEyQyxFQUFFZ2dCLEtBQUtoZ0IsRUFBRWdnQixHQUFHbXVDLE9BQU9oekQsRUFBRTZFLEVBQUVnZ0IsSUFBSWxDLEVBQUVuYixLQUFLZ1ksR0FBR3FGLEdBQUcsSUFBSWhnQixFQUFFZ2dCLEdBQUcsS0FBS3JYLEVBQUUzSSxFQUFFZ2dCLElBQUlsQyxFQUFFbmIsS0FBS25GLE1BQU1zZ0IsRUFBRTFoQixFQUFFNEQsRUFBRWdnQixHQUFHQSxJQUFJbEMsRUFBRW5iLEtBQUtnWSxHQUFHcUYsR0FBRyxNQUFNNVksRUFBRTRZLEdBQUUsT0FBT25OLEVBQUU3UyxFQUFFZ2dCLEtBQUssa0JBQWtCbk4sR0FBRyxLQUFLQSxFQUFFLEdBQUcsaUJBQWlCQSxHQUFHLElBQUlBLEdBQUd6TCxLQUFLLEVBQUVsSyxPQUFPMlYsR0FBR3VULE9BQU92VCxFQUFFLE1BQU0sT0FBTSxPQUFPOUgsRUFBRSxDQUFDQSxFQUFFLE1BQU1yRCxPQUFPb1csRUFBRSxDQUFDLE1BQU1BLENBQUMsQ0FBN1YsQ0FBK1YxaEIsR0FBR0EsRUFBRU8sV0FBcnJCLElBQWtSbU8sQ0FBNmEsQ0FBQyxJQUFJc1YsR0FBRyxTQUFTaGtCLEdBQUcsT0FBT2YsTUFBTWdDLFFBQVFqQixLQUFLQSxFQUFFK3hELE9BQU0sR0FBSS94RCxDQUFDLEVBQUUsU0FBU21rQixHQUFHbmtCLEdBQUcsSUFBSSxJQUFJNEQsRUFBRXRDLFVBQVU5QixPQUFPbVAsRUFBRSxJQUFJMVAsTUFBTTJFLEVBQUUsRUFBRUEsRUFBRSxFQUFFLEdBQUdvSCxFQUFFLEVBQUVBLEVBQUVwSCxFQUFFb0gsSUFBSTJELEVBQUUzRCxFQUFFLEdBQUcxSixVQUFVMEosR0FBRyxPQUFPak0sRUFBRWlCLElBQUl1TSxFQUFFdk0sR0FBR2drQixHQUFHcVYsR0FBRzk1QixFQUFFb0YsRUFBRSxDQUFDM0UsR0FBR3NMLE9BQU9xRCxNQUFNLElBQUlBLEVBQUVuUCxRQUFRLElBQUlRLEVBQUVSLFFBQVEsaUJBQWlCUSxFQUFFLEdBQUdBLEVBQUVna0IsR0FBR3FWLEdBQUc5NUIsRUFBRVMsRUFBRTJPLElBQUksQ0FBZ0MsSUFBSXVhLElBQW5DLElBQXFyQjhSLEdBQUcsU0FBU2g3QixFQUFFNEQsRUFBRStLLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxFQUFFbkgsR0FBR3hILEVBQUVneUQsUUFBUXJqRCxFQUFFcWpELE9BQU9oeUQsRUFBRWd5RCxPQUFPcHVELEdBQUcrSyxFQUFFcWpELEtBQUssRUFBRTF0QyxHQUFHLHdDQUF3Q3ZELEdBQUcsV0FBVyxTQUFTbWEsR0FBR2w3QixHQUFHLE9BQU9BLEVBQUU4RyxRQUFRd2QsR0FBRyxLQUFLeGQsUUFBUWlhLEdBQUcsR0FBRyxDQUFDLElBQUk4QyxHQUFHLFNBQVM3akIsR0FBRyxPQUFPNGUsR0FBRzBDLEdBQUd0aEIsS0FBSyxFQUFFLEVBQUUsU0FBU21oQixHQUFHbmhCLEdBQUcsTUFBTSxpQkFBaUJBLElBQUksQ0FBNkUsQ0FBQyxJQUFJbzdCLEdBQUcsU0FBU3A3QixHQUFHLE1BQU0sbUJBQW1CQSxHQUFHLGlCQUFpQkEsR0FBRyxPQUFPQSxJQUFJZixNQUFNZ0MsUUFBUWpCLEVBQUUsRUFBRWtrQixHQUFHLFNBQVNsa0IsR0FBRyxNQUFNLGNBQWNBLEdBQUcsZ0JBQWdCQSxHQUFHLGNBQWNBLENBQUMsRUFBRSxTQUFTK2pCLEdBQUcvakIsRUFBRTRELEVBQUUrSyxHQUFHLElBQUkzRCxFQUFFaEwsRUFBRTJPLEdBQUd5c0IsR0FBR3gzQixJQUFJdzNCLEdBQUdwd0IsR0FBR211QixHQUFHbnVCLEVBQUVwSCxHQUFHNUQsRUFBRTJPLEdBQUcvSyxDQUFDLENBQUMsU0FBU3UxQixHQUFHbjVCLEdBQUcsSUFBSSxJQUFJNEQsRUFBRXRDLFVBQVU5QixPQUFPbVAsRUFBRSxJQUFJMVAsTUFBTTJFLEVBQUUsRUFBRUEsRUFBRSxFQUFFLEdBQUdvSCxFQUFFLEVBQUVBLEVBQUVwSCxFQUFFb0gsSUFBSTJELEVBQUUzRCxFQUFFLEdBQUcxSixVQUFVMEosR0FBRyxJQUFJLElBQUl5TCxFQUFFLEVBQUVpTCxFQUFFL1MsRUFBRThILEVBQUVpTCxFQUFFbGlCLE9BQU9pWCxJQUFJLENBQUMsSUFBSW1OLEVBQUVsQyxFQUFFakwsR0FBRyxHQUFHMmtCLEdBQUd4WCxHQUFHLElBQUksSUFBSTlrQixLQUFLOGtCLEVBQUVNLEdBQUdwbEIsSUFBSWlsQixHQUFHL2pCLEVBQUU0akIsRUFBRTlrQixHQUFHQSxFQUFFLENBQUMsT0FBT2tCLENBQUMsQ0FBQyxJQUFJaXlELEdBQUcsa0JBQWlDLFNBQVN4NUIsR0FBR3o0QixHQUFHLElBQUk0RCxHQUFFLGdCQUFFcXVELElBQUl0akQsR0FBRSxjQUFFLFdBQVksT0FBTyxTQUFTM08sRUFBRTRELEdBQUcsT0FBSTVELEVBQWtCakIsRUFBRWlCLEdBQVVBLEVBQUU0RCxHQUE0RzNFLE1BQU1nQyxRQUFRakIsSUFBSSxpQkFBaUJBLEVBQUV1VyxFQUFFLEdBQUczUyxFQUFFUSxFQUFFLENBQUMsRUFBRVIsRUFBRSxDQUFDLEVBQUU1RCxHQUFHQSxFQUE1THVXLEVBQUUsR0FBMkwsQ0FBeE4sQ0FBME52VyxFQUFFZ3lELE1BQU1wdUQsRUFBRyxHQUFFLENBQUM1RCxFQUFFZ3lELE1BQU1wdUQsSUFBSSxPQUFPNUQsRUFBRTZyQixTQUFTLGdCQUFnQm9tQyxHQUFHclQsU0FBUyxDQUFDei9DLE1BQU13UCxHQUFHM08sRUFBRTZyQixVQUFVLElBQUksQ0FBMVhvbUMsR0FBR3BULFNBQXdYLElBQUlsakIsR0FBRyxDQUFDLEVBQUUsU0FBU2xaLEdBQUd6aUIsRUFBRTRELEVBQUUrSyxHQUFHLElBQUk4SCxFQUFFcFMsRUFBRXJFLEdBQUc0akIsR0FBR3pDLEdBQUduaEIsR0FBR2xCLEVBQUU4RSxFQUFFc3VELE1BQU1sekQsT0FBRSxJQUFTRixFQUFFNkYsRUFBRTdGLEVBQUVpQixFQUFFNkQsRUFBRXd0RCxZQUFZcHZELE9BQUUsSUFBU2pDLEVBQUUsU0FBU0MsRUFBRTRELEdBQUcsSUFBSStLLEVBQUUsaUJBQWlCM08sRUFBRSxLQUFLazdCLEdBQUdsN0IsR0FBRzI3QixHQUFHaHRCLElBQUlndEIsR0FBR2h0QixJQUFJLEdBQUcsRUFBRSxJQUFJM0QsRUFBRTJELEVBQUUsSUFBSWtWLEdBQUcsUUFBUWxWLEVBQUVndEIsR0FBR2h0QixJQUFJLE9BQU8vSyxFQUFFQSxFQUFFLElBQUlvSCxFQUFFQSxDQUFDLENBQXZILENBQXlIcEgsRUFBRUYsWUFBWUUsRUFBRXV1RCxtQkFBbUJweUQsRUFBRWtQLEVBQUVyTCxFQUFFRixZQUFZckQsT0FBRSxJQUFTNE8sRUFBRSxTQUFTalAsR0FBRyxPQUFPbWhCLEdBQUduaEIsR0FBRyxVQUFVQSxFQUFFLFVBQVUydUQsRUFBRTN1RCxHQUFHLEdBQUcsQ0FBdkQsQ0FBeURBLEdBQUdpUCxFQUFFMVAsRUFBRXFFLEVBQUVGLGFBQWFFLEVBQUV3dEQsWUFBWWwyQixHQUFHdDNCLEVBQUVGLGFBQWEsSUFBSUUsRUFBRXd0RCxZQUFZeHRELEVBQUV3dEQsYUFBYXB2RCxFQUFFdUssRUFBRWtLLEdBQUd6VyxFQUFFa3lELE1BQU1qekQsTUFBTUMsVUFBVW9NLE9BQU90TCxFQUFFa3lELE1BQU1sekQsR0FBRzJrRCxPQUFPcUwsU0FBU2h3RCxFQUFFK0MsRUFBRTZCLEVBQUV3dUQsa0JBQWtCMzdDLEdBQUd6VyxFQUFFb3lELG9CQUFvQnJ3RCxFQUFFNkIsRUFBRXd1RCxrQkFBa0IsU0FBU3pqRCxFQUFFM0QsRUFBRXlMLEdBQUcsT0FBT3pXLEVBQUVveUQsa0JBQWtCempELEVBQUUzRCxFQUFFeUwsSUFBSTdTLEVBQUV3dUQsa0JBQWtCempELEVBQUUzRCxFQUFFeUwsRUFBRSxFQUFFelcsRUFBRW95RCxtQkFBbUIsSUFBSW5yRCxFQUFFa0IsRUFBRSxJQUFJOFMsR0FBR3RNLEVBQUVwUCxFQUFFa1gsRUFBRXpXLEVBQUVxeUQsb0JBQWUsR0FBUXh1RCxFQUFFc0UsRUFBRWdwRCxVQUFVLElBQUlueUQsRUFBRVEsT0FBTzZMLEVBQUUsU0FBU3JMLEVBQUU0RCxHQUFHLE9BQU8sU0FBUzVELEVBQUU0RCxFQUFFK0ssRUFBRTNELEdBQUcsSUFBSXlMLEVBQUV6VyxFQUFFa3lELE1BQU10dUMsRUFBRTVqQixFQUFFcXlELGVBQWV2ekQsRUFBRWtCLEVBQUVzbEIsYUFBYXRtQixFQUFFZ0IsRUFBRXN5RCxtQkFBbUJ2eUQsRUFBRUMsRUFBRW95RCxrQkFBa0Jwd0QsRUFBRWhDLEVBQUU0dUQsa0JBQWtCMy9DLEVBQUVqUCxFQUFFMGdCLE9BQXFEcmdCLEVBQUUsU0FBU0wsRUFBRTRELEVBQUUrSyxRQUFHLElBQVMzTyxJQUFJQSxFQUFFd0gsR0FBRyxJQUFJd0QsRUFBRTVHLEVBQUUsQ0FBQyxFQUFFUixFQUFFLENBQUNvdUQsTUFBTWh5RCxJQUFJeVcsRUFBRSxDQUFDLEVBQUUsT0FBTzlILEVBQUVnYixTQUFRLFNBQVUzcEIsR0FBRyxJQUFJNEQsRUFBRStLLEVBQUUrUyxFQUFFa0MsRUFBRTVqQixFQUFFLElBQUk0RCxLQUFLN0UsRUFBRTZrQixLQUFLQSxFQUFFQSxFQUFFNVksSUFBSTRZLEVBQUU1WSxFQUFFcEgsR0FBRzZTLEVBQUU3UyxHQUFHLGNBQWNBLEdBQUcrSyxFQUFFOEgsRUFBRTdTLEdBQUc4ZCxFQUFFa0MsRUFBRWhnQixHQUFHK0ssR0FBRytTLEVBQUUvUyxFQUFFLElBQUkrUyxFQUFFL1MsR0FBRytTLEdBQUdrQyxFQUFFaGdCLEVBQUcsSUFBRyxDQUFDb0gsRUFBRXlMLEVBQUUsQ0FBOU0sQ0FBZ051a0IsR0FBR3AzQixHQUFFLGdCQUFFcXVELElBQUluekQsSUFBSTBJLEVBQUU1RCxFQUFFNlMsR0FBR3RILEVBQUU5TyxFQUFFLEdBQUdkLEVBQUVjLEVBQUUsR0FBR2tNLEVBQUUsU0FBU3ZNLEVBQUU0RCxFQUFFK0ssRUFBRTNELEdBQUcsSUFBSXlMLEVBQUVvSSxLQUFLNkMsRUFBRUwsS0FBMkUsT0FBcEV6ZCxFQUFFNUQsRUFBRXV4RCx3QkFBd0IvcEQsRUFBRWlQLEVBQUVpTCxHQUFHMWhCLEVBQUV1eEQsd0JBQXdCNWlELEVBQUU4SCxFQUFFaUwsRUFBcUcsQ0FBNU0sQ0FBOE1rQyxFQUFFNVksRUFBRW1FLEdBQW1FeEssRUFBRWdLLEVBQUVnZ0QsRUFBRXB2RCxFQUFFZ3pELEtBQUszdUQsRUFBRTJ1RCxLQUFLaHpELEVBQUVpekQsSUFBSTV1RCxFQUFFNHVELElBQUl2akQsRUFBRTVLLEVBQUU4YyxHQUFHd3RDLEdBQUc1c0QsRUFBRXhDLElBQUlxRSxFQUFFUSxFQUFFLENBQUMsRUFBRVIsRUFBRSxDQUFDLEVBQUVyRSxHQUFHcUUsRUFBRXFELEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSWtCLEtBQUtwRyxFQUFFLE1BQU1vRyxFQUFFLElBQUksT0FBT0EsSUFBSSxnQkFBZ0JBLEVBQUVsQixFQUFFdXJELEdBQUd6d0QsRUFBRW9HLElBQUlwSSxFQUFFQSxFQUFFb0ksRUFBRSxFQUFFd21ELElBQUl0cUQsR0FBRyxFQUFFOEQsTUFBTWxCLEVBQUVrQixHQUFHcEcsRUFBRW9HLEtBQUssT0FBT3ZFLEVBQUUyVixPQUFPaGEsRUFBRWdhLFFBQVEzVixFQUFFMlYsUUFBUXRTLEVBQUVzUyxNQUFNblYsRUFBRSxDQUFDLEVBQUVSLEVBQUUyVixNQUFNLENBQUMsRUFBRWhhLEVBQUVnYSxRQUFRdFMsRUFBRWtYLFVBQVVsZixNQUFNQyxVQUFVb00sT0FBT3RNLEVBQUVnRCxFQUFFdUssSUFBSXZLLEVBQUV1SyxFQUFFLEtBQUszSSxFQUFFdWEsVUFBVTVlLEVBQUU0ZSxXQUFXd2xDLE9BQU9xTCxTQUFTdm1ELEtBQUssS0FBS3hCLEVBQUVrZ0MsSUFBSXhpQyxHQUFFLG1CQUFFZ3FELEVBQUUxbkQsRUFBRSxDQUFwakMsQ0FBc2pDQSxFQUFFakgsRUFBRTRELEVBQUVDLEVBQUUsRUFBRSxPQUFPd0gsRUFBRTNILFlBQVlyRCxHQUFHNEcsRUFBRSxhQUFhb0UsSUFBSTZtRCxNQUFNM2xELEVBQUV0RixFQUFFb3JELGVBQWVscUQsRUFBRWxCLEVBQUV2RCxZQUFZckQsRUFBRTRHLEVBQUVtckQsa0JBQWtCcndELEVBQUVrRixFQUFFcXJELG1CQUFtQjc3QyxFQUFFeFgsTUFBTUMsVUFBVW9NLE9BQU90TCxFQUFFc3lELG1CQUFtQnR5RCxFQUFFNHVELG1CQUFtQmpxRCxFQUFFc0MsRUFBRTJuRCxrQkFBa0JydkQsRUFBRTBILEVBQUV5WixPQUFPakssRUFBRXpXLEVBQUUwZ0IsT0FBTzFnQixFQUFFaUgsRUFBRXdyRCxjQUFjLFNBQVN6eUQsR0FBRyxJQUFJZ0wsRUFBRXBILEVBQUV3dEQsWUFBWTM2QyxFQUFFLFNBQVN6VyxFQUFFNEQsR0FBRyxHQUFHLE1BQU01RCxFQUFFLE1BQU0sQ0FBQyxFQUFFLElBQUkyTyxFQUFFM0QsRUFBRXlMLEVBQUUsQ0FBQyxFQUFFaUwsRUFBRS9pQixPQUFPeUksS0FBS3BILEdBQUcsSUFBSWdMLEVBQUUsRUFBRUEsRUFBRTBXLEVBQUVsaUIsT0FBT3dMLElBQUkyRCxFQUFFK1MsRUFBRTFXLEdBQUdwSCxFQUFFaEMsUUFBUStNLElBQUksSUFBSThILEVBQUU5SCxHQUFHM08sRUFBRTJPLElBQUksT0FBTzhILENBQUMsQ0FBbkksQ0FBcUk3UyxFQUFFLENBQUMsZ0JBQWdCOGQsRUFBRTFXLEdBQUdBLEVBQUUsS0FBS21XLEdBQUduaEIsR0FBR0EsRUFBRWs3QixHQUFHeXpCLEVBQUUzdUQsS0FBSyxPQUFPeWlCLEdBQUd6aUIsRUFBRW9FLEVBQUUsQ0FBQyxFQUFFcVMsRUFBRSxDQUFDeTdDLE1BQU0zbEQsRUFBRTZrRCxZQUFZMXZDLElBQUkvUyxFQUFFLEVBQUVoUSxPQUFPRSxlQUFlb0ksRUFBRSxlQUFlLENBQUMwakIsSUFBSSxXQUFXLE9BQU8vcUIsS0FBSzh5RCxtQkFBbUIsRUFBRXhvQyxJQUFJLFNBQVN0bUIsR0FBR2hFLEtBQUs4eUQsb0JBQW9CajhDLEVBQUUwaUIsR0FBRyxDQUFDLEVBQUVuNUIsRUFBRXNsQixhQUFhMWhCLEdBQUdBLENBQUMsSUFBK2hCakYsT0FBT0UsZUFBZW9JLEVBQUUsV0FBVyxDQUFDOUgsTUFBTSxXQUFXLE1BQU0sSUFBSThILEVBQUUybkQsaUJBQWlCLElBQUlockMsR0FBRyxJQUFFM2MsRUFBRWpILEVBQUUsQ0FBQ2t5RCxPQUFNLEVBQUdHLGdCQUFlLEVBQUczdUQsYUFBWSxFQUFHNHVELG9CQUFtQixFQUFHRixtQkFBa0IsRUFBR3hELG1CQUFrQixFQUFHbHVDLFFBQU8sRUFBRyt4QyxlQUFjLElBQUt4ckQsQ0FBQyxDQUFDLElBQUl5eEIsR0FBRyxTQUFTMTRCLEdBQUcsT0FBTyxTQUFTQSxFQUFFNEQsRUFBRW9ILEVBQUV5TCxHQUFHLFFBQUcsSUFBU0EsSUFBSUEsRUFBRWpQLEtBQUksd0JBQUV3RCxHQUFHLE9BQU91TCxFQUFFLEVBQUV6VixPQUFPa0ssSUFBSSxJQUFJMFcsRUFBRSxXQUFXLE9BQU85ZCxFQUFFb0gsRUFBRXlMLEVBQUUwTixHQUFHL2lCLFdBQU0sRUFBT0UsV0FBVyxFQUFFLE9BQU9vZ0IsRUFBRWl4QyxXQUFXLFNBQVNoa0QsR0FBRyxPQUFPM08sRUFBRTRELEVBQUVvSCxFQUFFNUcsRUFBRSxDQUFDLEVBQUVxUyxFQUFFLENBQUMsRUFBRTlILEdBQUcsRUFBRStTLEVBQUV3d0MsTUFBTSxTQUFTdmpELEdBQUcsT0FBTzNPLEVBQUU0RCxFQUFFb0gsRUFBRTVHLEVBQUUsQ0FBQyxFQUFFcVMsRUFBRSxDQUFDeTdDLE1BQU1qekQsTUFBTUMsVUFBVW9NLE9BQU9tTCxFQUFFeTdDLE1BQU12akQsR0FBR2cxQyxPQUFPcUwsV0FBVyxFQUFFdHRDLENBQUMsQ0FBaFMsQ0FBa1NlLEdBQUd6aUIsRUFBRSxFQUFFLENBQUMsSUFBSSxPQUFPLFVBQVUsT0FBTyxVQUFVLFFBQVEsUUFBUSxJQUFJLE9BQU8sTUFBTSxNQUFNLE1BQU0sYUFBYSxPQUFPLEtBQUssU0FBUyxTQUFTLFVBQVUsT0FBTyxPQUFPLE1BQU0sV0FBVyxPQUFPLFdBQVcsS0FBSyxNQUFNLFVBQVUsTUFBTSxTQUFTLE1BQU0sS0FBSyxLQUFLLEtBQUssUUFBUSxXQUFXLGFBQWEsU0FBUyxTQUFTLE9BQU8sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssT0FBTyxTQUFTLFNBQVMsS0FBSyxPQUFPLElBQUksU0FBUyxNQUFNLFFBQVEsTUFBTSxNQUFNLFNBQVMsUUFBUSxTQUFTLEtBQUssT0FBTyxPQUFPLE1BQU0sT0FBTyxVQUFVLE9BQU8sV0FBVyxPQUFPLFFBQVEsTUFBTSxXQUFXLFNBQVMsS0FBSyxXQUFXLFNBQVMsU0FBUyxJQUFJLFFBQVEsVUFBVSxNQUFNLFdBQVcsSUFBSSxLQUFLLEtBQUssT0FBTyxJQUFJLE9BQU8sU0FBUyxVQUFVLFNBQVMsUUFBUSxTQUFTLE9BQU8sU0FBUyxRQUFRLE1BQU0sVUFBVSxNQUFNLFFBQVEsUUFBUSxLQUFLLFdBQVcsUUFBUSxLQUFLLFFBQVEsT0FBTyxRQUFRLEtBQUssUUFBUSxJQUFJLEtBQUssTUFBTSxRQUFRLE1BQU0sU0FBUyxXQUFXLE9BQU8sVUFBVSxnQkFBZ0IsSUFBSSxRQUFRLE9BQU8saUJBQWlCLFNBQVMsT0FBTyxPQUFPLFVBQVUsVUFBVSxXQUFXLGlCQUFpQixPQUFPLE9BQU8sTUFBTSxPQUFPLFdBQVcsU0FBUzJwQixTQUFRLFNBQVUzcEIsR0FBRzA0QixHQUFHMTRCLEdBQUcwNEIsR0FBRzE0QixFQUFHLElBQUcsSUFBSTg3QixHQUFHLFdBQVcsU0FBUzk3QixFQUFFQSxFQUFFNEQsR0FBR2hFLEtBQUt3d0QsTUFBTXB3RCxFQUFFSixLQUFLd3hELFlBQVl4dEQsRUFBRWhFLEtBQUt1eEQsU0FBU251QyxHQUFHaGpCLEdBQUd3TSxHQUFFa2tELFdBQVc5d0QsS0FBS3d4RCxZQUFZLEVBQUUsQ0FBQyxJQUFJeHRELEVBQUU1RCxFQUFFZCxVQUFVLE9BQU8wRSxFQUFFZ3ZELGFBQWEsU0FBUzV5RCxFQUFFNEQsRUFBRStLLEVBQUUzRCxHQUFHLElBQUl5TCxFQUFFekwsRUFBRXF1QixHQUFHejVCLEtBQUt3d0QsTUFBTXhzRCxFQUFFK0ssRUFBRTNELEdBQUd2QyxLQUFLLElBQUksSUFBSWlaLEVBQUU5aEIsS0FBS3d4RCxZQUFZcHhELEVBQUUyTyxFQUFFMGdELFlBQVkzdEMsRUFBRUEsRUFBRWpMLEVBQUUsRUFBRTdTLEVBQUVpdkQsYUFBYSxTQUFTN3lELEVBQUU0RCxHQUFHQSxFQUFFbXRELFdBQVdueEQsS0FBS3d4RCxZQUFZcHhELEVBQUUsRUFBRTRELEVBQUVrdkQsYUFBYSxTQUFTOXlELEVBQUU0RCxFQUFFK0ssRUFBRTNELEdBQUdoTCxFQUFFLEdBQUd3TSxHQUFFa2tELFdBQVc5d0QsS0FBS3d4RCxZQUFZcHhELEdBQUdKLEtBQUtpekQsYUFBYTd5RCxFQUFFMk8sR0FBRy9PLEtBQUtnekQsYUFBYTV5RCxFQUFFNEQsRUFBRStLLEVBQUUzRCxFQUFFLEVBQUVoTCxDQUFDLENBQXpiLElBQXVpRSxXQUF3b0IsSUFBSTRELEVBQWpvQixXQUFhLElBQUk1RCxFQUFFSixLQUFLQSxLQUFLbXpELGNBQWMsV0FBVyxJQUFJbnZELEVBQUU1RCxFQUFFMDhCLFNBQVNuOEIsV0FBVyxJQUFJcUQsRUFBRSxNQUFNLEdBQUcsSUFBSStLLEVBQUVoTSxLQUFJLE1BQU0sVUFBVSxDQUFDZ00sR0FBRyxVQUFVQSxFQUFFLElBQUk1TSxFQUFFLFVBQVUsK0JBQStCNGhELE9BQU9xTCxTQUFTdm1ELEtBQUssS0FBSyxJQUFJN0UsRUFBRSxVQUFVLEVBQUVoRSxLQUFLb3pELGFBQWEsV0FBVyxPQUFPaHpELEVBQUVpekQsT0FBTzE4QyxFQUFFLEdBQUd2VyxFQUFFK3lELGVBQWUsRUFBRW56RCxLQUFLc3pELGdCQUFnQixXQUFXLElBQUl0dkQsRUFBRSxHQUFHNUQsRUFBRWl6RCxPQUFPLE9BQU8xOEMsRUFBRSxHQUFHLElBQUk1SCxJQUFJL0ssRUFBRSxDQUFDLEdBQUc3QixHQUFHLEdBQUc2QixFQUFFLHVCQUF1QixRQUFRQSxFQUFFZ29CLHdCQUF3QixDQUFDcVMsT0FBT2orQixFQUFFMDhCLFNBQVNuOEIsWUFBWXFELEdBQUc2UyxFQUFFOVQsS0FBSSxPQUFPOFQsSUFBSTlILEVBQUV6QixNQUFNdUosR0FBRyxDQUFDLGdCQUFnQixRQUFRclMsRUFBRSxDQUFDLEVBQUV1SyxFQUFFLENBQUMyWSxJQUFJLFlBQVksRUFBRTFuQixLQUFLdXpELEtBQUssV0FBV256RCxFQUFFaXpELFFBQU8sQ0FBRSxFQUFFcnpELEtBQUs4OEIsU0FBUyxJQUFJbHdCLEdBQUUsQ0FBQzZqRCxVQUFTLElBQUt6d0QsS0FBS3F6RCxRQUFPLENBQUUsRUFBUy96RCxVQUFpQjBFLEVBQUV3dkQsY0FBYyxTQUFTcHpELEdBQUcsT0FBT0osS0FBS3F6RCxPQUFPMThDLEVBQUUsR0FBRyxnQkFBZ0J1TixHQUFHLENBQUNpc0MsTUFBTW53RCxLQUFLODhCLFVBQVUxOEIsRUFBRSxFQUFFNEQsRUFBRXl2RCx5QkFBeUIsU0FBU3J6RCxHQUFHLE9BQU91VyxFQUFFLEVBQUUsQ0FBRyxDQUF2ekIsR0FBa3BFLFlDQTNpMEIsSUE4QkkrOEMsR0E5QndFQyxHQUFRQyxHQ0F6RUMsR0RLQUMsR0FBZSxVQUFjSixLQUxvQ0MsR0FLeUIsQ0FBQyxrQkFBbUIsc0JBQXVCLDJCQUE0Qiw4QkFBK0IsZUFBZ0IscUJBQXNCLG9IQUFxSCx3RUFBeUUsWUFMM1ZDLEdBS3dXLENBQUMsa0JBQW1CLHNCQUF1QiwyQkFBNEIsOEJBQStCLGVBQWdCLHFCQUFzQixvSEFBcUgsd0VBQXlFLFlBSjl2QjcwRCxPQUFPRSxlQUFrQkYsT0FBT0UsZUFBZTAwRCxHQUFRLE1BQU8sQ0FBRXAwRCxNQUFPcTBELEtBQWlCRCxHQUFPQyxJQUFNQSxHQUloREYsR0FIbERDLEtBRzB3QixTQUFVelEsR0FFM3hCLE9BRFlBLEVBQUdrUCxNQUNGLzVDLE1BQU0sRUFDdkIsSUFBRyxTQUFVNnFDLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0Y5NUMsT0FBTyxFQUN4QixJQUFHLFNBQVU0cUMsR0FFVCxPQURZQSxFQUFHa1AsTUFDRjJCLGFBQWEsRUFDOUIsSUFBRyxTQUFVN1EsR0FFVCxPQURZQSxFQUFHa1AsTUFDRjRCLE9BQU9DLEtBQ3hCLElBQUcsU0FBVS9RLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0Y0QixPQUFPRSxLQUN4QixJQUFHLFNBQVVoUixHQUVULE9BRFlBLEVBQUdrUCxNQUNGNXZDLFNBQVMsRUFDMUIsSUFBRyxTQUFVMGdDLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0Z0L0IsV0FBV3FoQyxLQUM1QixJQUFHLFNBQVVqUixHQUVULE9BRFlBLEVBQUdrUCxNQUNGNEIsT0FBT0ksVUFDeEIsSUU3QklDLEdBQXNDLFdBU3RDLE9BUkFBLEdBQVd0MUQsT0FBT29yQixRQUFVLFNBQVNubUIsR0FDakMsSUFBSyxJQUFJOGQsRUFBR2tDLEVBQUksRUFBR2pWLEVBQUlyTixVQUFVOUIsT0FBUW9rQixFQUFJalYsRUFBR2lWLElBRTVDLElBQUssSUFBSTNVLEtBRFR5UyxFQUFJcGdCLFVBQVVzaUIsR0FDT2psQixPQUFPTyxVQUFVZ0ksZUFBZS9GLEtBQUt1Z0IsRUFBR3pTLEtBQ3pEckwsRUFBRXFMLEdBQUt5UyxFQUFFelMsSUFFakIsT0FBT3JMLENBQ1gsRUFDT3F3RCxHQUFTN3lELE1BQU14QixLQUFNMEIsVUFDaEMsRUFjVzR5RCxHQUFTLFNBQVVwUixHQUMxQixJQUFJajNCLEVBQVdpM0IsRUFBR2ozQixTQUFVNm1CLEVBQVVvUSxFQUFHcFEsUUFBUzdMLEVBZGhCLFNBQVVubEIsRUFBRzFoQixHQUMvQyxJQUFJNEQsRUFBSSxDQUFDLEVBQ1QsSUFBSyxJQUFJcUwsS0FBS3lTLEVBQU8vaUIsT0FBT08sVUFBVWdJLGVBQWUvRixLQUFLdWdCLEVBQUd6UyxJQUFNalAsRUFBRTRCLFFBQVFxTixHQUFLLElBQzlFckwsRUFBRXFMLEdBQUt5UyxFQUFFelMsSUFDYixHQUFTLE1BQUx5UyxHQUFxRCxtQkFBakMvaUIsT0FBTzhuQixzQkFDdEIsS0FBSTdDLEVBQUksRUFBYixJQUFnQjNVLEVBQUl0USxPQUFPOG5CLHNCQUFzQi9FLEdBQUlrQyxFQUFJM1UsRUFBRXpQLE9BQVFva0IsSUFDM0Q1akIsRUFBRTRCLFFBQVFxTixFQUFFMlUsSUFBTSxHQUFLamxCLE9BQU9PLFVBQVV5Z0QscUJBQXFCeCtDLEtBQUt1Z0IsRUFBR3pTLEVBQUUyVSxNQUN2RWhnQixFQUFFcUwsRUFBRTJVLElBQU1sQyxFQUFFelMsRUFBRTJVLElBRjRCLENBSXRELE9BQU9oZ0IsQ0FDWCxDQUk4RDg3QyxDQUFPb0QsRUFBSSxDQUFDLFdBQVksWUFDbEYsT0FBUSxTQUFLNFEsR0FBY08sR0FBUyxDQUFDLEVBQUdwdEIsRUFBTyxDQUFFNkwsUUFBU0EsR0FBVyxDQUFFN21CLFNBQVVBLElBQ3JGLDhCQzFCV3NvQyxHQUFvQixDQUMzQmx3QyxTQUEyRCxPQUEzQyxzSkFBd0UsR0FDeEZtd0MsT0FBZ0UsT0FBbEQsb0ZBQStFLEdBQzdGdGlELE1BQU8sa0RBQ1B1aUQsY0FBZSxDQUFDLGtFQ0xUQyxHQUF1QixDQUM5QkMsV0FBWSxVQUNaQyxTQUFTLElBQUloMkQsTUFBTzZWLGNBQ3BCb2dELGFBQWEsRUFDYkMsY0FBYyxFQUNkQyxXQUFZLEdBQ1pDLFFBQVMsY0hMYixTQUFXbkIsR0FDUEEsRUFBcUIsS0FBSSxPQUN6QkEsRUFBc0IsTUFBSSxRQUMxQkEsRUFBd0IsUUFBSSxVQUM1QkEsRUFBd0IsUUFBSSxTQUMvQixDQUxELENBS0dBLEtBQW1CQSxHQUFpQixDQUFDLElJTmpDLElDQUlvQixHREFBQyxHQUFvQixDQUMzQkMsS0FBTSxVQUNOQyxPQUFRLFVBQ1JDLE9BQVEsV0FFREMsR0FBNEIsQ0FDbkNDLFFBQVMsT0FDVHQ5QixNQUFPLE9BQ1B1OUIsS0FBTSxVQUNOQyxJQUFLLFdBRUVDLEdBQXdCLENBQy9CSCxRQUFTLFFBRUZJLEdBQW9CLENBQzNCUixLQUFNLFVBQ05DLE9BQVEsWUNmWixTQUFXSCxHQUNQQSxFQUFhQSxFQUFvQixNQUFJLElBQU0sUUFDM0NBLEVBQWFBLEVBQXFCLE9BQUksSUFBTSxTQUM1Q0EsRUFBYUEsRUFBb0IsTUFBSSxJQUFNLE9BQzlDLENBSkQsQ0FJR0EsS0FBaUJBLEdBQWUsQ0FBQyxJQ0xwQyxTQUFlLHNCQUEwQix1Q0NBekMsR0FBZSxzQkFBMEIsdUNDQXpDLEdBQWUsc0JBQTBCLHVDQ0F6QyxHQUFlLHNCQUEwQix1Q0NBekMsR0FBZSxzQkFBMEIsdUNDQXpDLEdBQWUsc0JBQTBCLHVDQ0F6QyxHQUFlLHNCQUEwQix1Q0NBekMsSUNBZSxzQkRBQSxzQkFBMEIsd0NFQXpDLElDQWUsc0JEQUEsc0JBQTBCLHdDRUF6QyxJQ0FlLHNCREFBLHNCQUEwQix3Q0VBekMsR0FBZSxzQkFBMEIsdUNDQXpDLElDQWUsc0JDQUEsc0JDQUEsc0JIQUEsc0JBQTBCLHdDSUF6QyxHQUFlLHNCQUEwQix1Q0NBekMsR0FBZSxzQkFBMEIsdUNDQXpDLEdBQWUsc0JBQTBCLHVDQ0NsQyxJQUFJVyxHQUFrQixDQUN6QixFQUFHLENBQ0NDLEtBQU0sR0FDTkMsWUFBYSxhQUVqQixFQUFHLENBQ0NELEtBQU0sR0FDTkMsWUFBYSxnQkFFakIsRUFBRyxDQUNDRCxLQUFNLEdBQ05DLFlBQWEsaUJBRWpCLEVBQUcsQ0FDQ0QsS0FBTSxHQUNOQyxZQUFhLFlBRWpCLEdBQUksQ0FDQUQsS0FBTUUsR0FDTkQsWUFBYSxPQUVqQixHQUFJLENBQ0FELEtBQU1FLEdBQ05ELFlBQWEsdUJBRWpCLEdBQUksQ0FDQUQsS0FBTSxHQUNOQyxZQUFhLGlCQUVqQixHQUFJLENBQ0FELEtBQU0sR0FDTkMsWUFBYSxvQkFFakIsR0FBSSxDQUNBRCxLQUFNLEdBQ05DLFlBQWEsb0JBRWpCLEdBQUksQ0FDQUQsS0FBTSxHQUNOQyxZQUFhLDBCQUVqQixHQUFJLENBQ0FELEtBQU0sR0FDTkMsWUFBYSw4QkFFakIsR0FBSSxDQUNBRCxLQUFNLEdBQ05DLFlBQWEsZUFFakIsR0FBSSxDQUNBRCxLQUFNLEdBQ05DLFlBQWEsaUJBRWpCLEdBQUksQ0FDQUQsS0FBTSxHQUNOQyxZQUFhLHdCQUVqQixHQUFJLENBQ0FELEtBQU0sR0FDTkMsWUFBYSx1QkFFakIsR0FBSSxDQUNBRCxLQUFNLEdBQ05DLFlBQWEsaUNBRWpCLEdBQUksQ0FDQUQsS0FBTUcsR0FDTkYsWUFBYSxvQkFFakIsR0FBSSxDQUNBRCxLQUFNRyxHQUNORixZQUFhLHNCQUVqQixHQUFJLENBQ0FELEtBQU1HLEdBQ05GLFlBQWEsNkJBRWpCLEdBQUksQ0FDQUQsS0FBTUcsR0FDTkYsWUFBYSxlQUVqQixHQUFJLENBQ0FELEtBQU0sR0FDTkMsWUFBYSx1QkFFakIsR0FBSSxDQUNBRCxLQUFNLEdBQ05DLFlBQWEseUJBRWpCLEdBQUksQ0FDQUQsS0FBTSxHQUNOQyxZQUFhLGdDQUVqQixHQUFJLENBQ0FELEtBQU1HLEdBQ05GLFlBQWEsc0JBRWpCLEdBQUksQ0FDQUQsS0FBTUcsR0FDTkYsWUFBYSxxQkFFakIsR0FBSSxDQUNBRCxLQUFNSSxHQUNOSCxZQUFhLGdCQUVqQixHQUFJLENBQ0FELEtBQU1JLEdBQ05ILFlBQWEsaUNBRWpCLEdBQUksQ0FDQUQsS0FBTUksR0FDTkgsWUFBYSxpQ0NoSGpCSSxHQUF3QyxTQUFVQyxFQUFTQyxFQUFZbnlELEVBQUdveUQsR0FFMUUsT0FBTyxJQUFLcHlELElBQU1BLEVBQUl3NkIsV0FBVSxTQUFVRyxFQUFTNm9CLEdBQy9DLFNBQVM2TyxFQUFVLzJELEdBQVMsSUFBTWczRCxFQUFLRixFQUFVdDFELEtBQUt4QixHQUFTLENBQUUsTUFBT2EsR0FBS3FuRCxFQUFPcm5ELEVBQUksQ0FBRSxDQUMxRixTQUFTbzJELEVBQVNqM0QsR0FBUyxJQUFNZzNELEVBQUtGLEVBQWlCLE1BQUU5MkQsR0FBUyxDQUFFLE1BQU9hLEdBQUtxbkQsRUFBT3JuRCxFQUFJLENBQUUsQ0FDN0YsU0FBU20yRCxFQUFLalIsR0FKbEIsSUFBZS9sRCxFQUlhK2xELEVBQU85a0QsS0FBT28rQixFQUFRMG1CLEVBQU8vbEQsUUFKMUNBLEVBSXlEK2xELEVBQU8vbEQsTUFKaERBLGFBQWlCMEUsRUFBSTFFLEVBQVEsSUFBSTBFLEdBQUUsU0FBVTI2QixHQUFXQSxFQUFRci9CLEVBQVEsS0FJakJzL0IsS0FBS3kzQixFQUFXRSxFQUFXLENBQzdHRCxHQUFNRixFQUFZQSxFQUFVNzBELE1BQU0yMEQsRUFBU0MsR0FBYyxLQUFLcjFELE9BQ2xFLEdBQ0osRUFDSTAxRCxHQUE0QyxTQUFVTixFQUFTaG9ELEdBQy9ELElBQXNHMU4sRUFBRzhPLEVBQUd2TCxFQUFHckUsRUFBM0dvdkQsRUFBSSxDQUFFMkgsTUFBTyxFQUFHQyxLQUFNLFdBQWEsR0FBVyxFQUFQM3lELEVBQUUsR0FBUSxNQUFNQSxFQUFFLEdBQUksT0FBT0EsRUFBRSxFQUFJLEVBQUc0eUQsS0FBTSxHQUFJQyxJQUFLLElBQ2hHLE9BQU9sM0QsRUFBSSxDQUFFb0IsS0FBTSsxRCxFQUFLLEdBQUksTUFBU0EsRUFBSyxHQUFJLE9BQVVBLEVBQUssSUFBd0IsbUJBQVhqMkQsU0FBMEJsQixFQUFFa0IsT0FBT0csVUFBWSxXQUFhLE9BQU9oQixJQUFNLEdBQUlMLEVBQ3ZKLFNBQVNtM0QsRUFBSy9uRCxHQUFLLE9BQU8sU0FBVXZLLEdBQUssT0FDekMsU0FBY3V5RCxHQUNWLEdBQUl0MkQsRUFBRyxNQUFNLElBQUlHLFVBQVUsbUNBQzNCLEtBQU9qQixJQUFNQSxFQUFJLEVBQUdvM0QsRUFBRyxLQUFPaEksRUFBSSxJQUFLQSxPQUNuQyxHQUFJdHVELEVBQUksRUFBRzhPLElBQU12TCxFQUFZLEVBQVIreUQsRUFBRyxHQUFTeG5ELEVBQVUsT0FBSXduRCxFQUFHLEdBQUt4bkQsRUFBUyxTQUFPdkwsRUFBSXVMLEVBQVUsU0FBTXZMLEVBQUV6QyxLQUFLZ08sR0FBSSxHQUFLQSxFQUFFeE8sU0FBV2lELEVBQUlBLEVBQUV6QyxLQUFLZ08sRUFBR3duRCxFQUFHLEtBQUt2MkQsS0FBTSxPQUFPd0QsRUFFM0osT0FESXVMLEVBQUksRUFBR3ZMLElBQUcreUQsRUFBSyxDQUFTLEVBQVJBLEVBQUcsR0FBUS95RCxFQUFFekUsUUFDekJ3M0QsRUFBRyxJQUNQLEtBQUssRUFBRyxLQUFLLEVBQUcveUQsRUFBSSt5RCxFQUFJLE1BQ3hCLEtBQUssRUFBYyxPQUFYaEksRUFBRTJILFFBQWdCLENBQUVuM0QsTUFBT3czRCxFQUFHLEdBQUl2MkQsTUFBTSxHQUNoRCxLQUFLLEVBQUd1dUQsRUFBRTJILFFBQVNubkQsRUFBSXduRCxFQUFHLEdBQUlBLEVBQUssQ0FBQyxHQUFJLFNBQ3hDLEtBQUssRUFBR0EsRUFBS2hJLEVBQUU4SCxJQUFJaG1ELE1BQU9rK0MsRUFBRTZILEtBQUsvbEQsTUFBTyxTQUN4QyxRQUNJLE1BQWtCN00sR0FBWkEsRUFBSStxRCxFQUFFNkgsTUFBWWgzRCxPQUFTLEdBQUtvRSxFQUFFQSxFQUFFcEUsT0FBUyxLQUFrQixJQUFWbTNELEVBQUcsSUFBc0IsSUFBVkEsRUFBRyxJQUFXLENBQUVoSSxFQUFJLEVBQUcsUUFBVSxDQUMzRyxHQUFjLElBQVZnSSxFQUFHLE1BQWMveUQsR0FBTSt5RCxFQUFHLEdBQUsveUQsRUFBRSxJQUFNK3lELEVBQUcsR0FBSy95RCxFQUFFLElBQU0sQ0FBRStxRCxFQUFFMkgsTUFBUUssRUFBRyxHQUFJLEtBQU8sQ0FDckYsR0FBYyxJQUFWQSxFQUFHLElBQVloSSxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUksQ0FBRStxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUlBLEVBQUkreUQsRUFBSSxLQUFPLENBQ3BFLEdBQUkveUQsR0FBSytxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUksQ0FBRStxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUkrcUQsRUFBRThILElBQUlsd0QsS0FBS293RCxHQUFLLEtBQU8sQ0FDOUQveUQsRUFBRSxJQUFJK3FELEVBQUU4SCxJQUFJaG1ELE1BQ2hCaytDLEVBQUU2SCxLQUFLL2xELE1BQU8sU0FFdEJrbUQsRUFBSzVvRCxFQUFLNU0sS0FBSzQwRCxFQUFTcEgsRUFDNUIsQ0FBRSxNQUFPM3VELEdBQUsyMkQsRUFBSyxDQUFDLEVBQUczMkQsR0FBSW1QLEVBQUksQ0FBRyxDQUFFLFFBQVU5TyxFQUFJdUQsRUFBSSxDQUFHLENBQ3pELEdBQVksRUFBUit5RCxFQUFHLEdBQVEsTUFBTUEsRUFBRyxHQUFJLE1BQU8sQ0FBRXgzRCxNQUFPdzNELEVBQUcsR0FBS0EsRUFBRyxRQUFLLEVBQVF2MkQsTUFBTSxFQUM5RSxDQXRCZ0QrMUQsQ0FBSyxDQUFDeG5ELEVBQUd2SyxHQUFLLENBQUcsQ0F1QnJFLEVDbENXd3lELEdBQXFCLFNBQVVwckMsUUFDdEIsSUFBWkEsSUFBc0JBLEVBQVUsQ0FBQyxHQUNyQyxJQUFJczNCLEdBQUssSUFBQXhWLFVBQVMsTUFBT3JuQyxFQUFXNjhDLEVBQUcsR0FBSStULEVBQWMvVCxFQUFHLEdBQ3hEZ1UsR0FBSyxJQUFBeHBCLFVBQVMsTUFBTzdxQyxFQUFRcTBELEVBQUcsR0FBSUMsRUFBV0QsRUFBRyxHQUNsREUsRUFBZ0IsU0FBVWxVLEdBQzFCLElBQUltVSxFQUFTblUsRUFBR21VLE9BQ1pDLEVBQVdELEVBQU9DLFNBQVVDLEVBQVlGLEVBQU9FLFVBQ25ETixFQUFZLENBQ1JPLElBQUtGLEVBQ0xHLElBQUtGLEdBRWIsRUFDSUcsRUFBYyxTQUFVNzBELEdBQ3hCczBELEVBQVN0MEQsRUFDYixFQUlBLE9BSEEsSUFBQXNxQyxZQUFVLFdBQ052akMsVUFBVSt0RCxZQUFZQyxtQkFBbUJSLEVBQWVNLEVBQWE5ckMsRUFDekUsR0FBRyxJQUNJLENBQUV2bEIsU0FBVUEsRUFBVXhELE1BQU9BLEVBQ3hDLEVDcEJXZzFELEdBQWEsV0FDYkMsR0FBUSxnQkFDUkMsR0FBWSxvQkFDWkMsR0FBUSxnQkFDUkMsR0FBVSxrQkFDVkMsR0FBUSxnQkFDUkMsR0FBVyxtQkNOdEIsU0FBUyxHQUFRcFQsR0FBd1QsT0FBdE8sR0FBckQsbUJBQVhsa0QsUUFBb0QsaUJBQXBCQSxPQUFPRyxTQUFtQyxTQUFpQitqRCxHQUFPLGNBQWNBLENBQUssRUFBc0IsU0FBaUJBLEdBQU8sT0FBT0EsR0FBeUIsbUJBQVhsa0QsUUFBeUJra0QsRUFBSTdpRCxjQUFnQnJCLFFBQVVra0QsSUFBUWxrRCxPQUFPdkIsVUFBWSxnQkFBa0J5bEQsQ0FBSyxFQUFZLEdBQVFBLEVBQU0sQ0FFOVYsU0FBU3FULEdBQVFDLEVBQVFDLEdBQWtCLElBQUk5d0QsRUFBT3pJLE9BQU95SSxLQUFLNndELEdBQVMsR0FBSXQ1RCxPQUFPOG5CLHNCQUF1QixDQUFFLElBQUkweEMsRUFBVXg1RCxPQUFPOG5CLHNCQUFzQnd4QyxHQUFhQyxJQUFnQkMsRUFBVUEsRUFBUXhVLFFBQU8sU0FBVXlVLEdBQU8sT0FBT3o1RCxPQUFPK25CLHlCQUF5QnV4QyxFQUFRRyxHQUFLeHRDLFVBQVksS0FBSXhqQixFQUFLYixLQUFLbkYsTUFBTWdHLEVBQU0rd0QsRUFBVSxDQUFFLE9BQU8vd0QsQ0FBTSxDQUlwVixTQUFTLEdBQWdCdTlDLEVBQUtyOUIsRUFBS25vQixHQUFpSyxPQUFwSm1vQixLQUFPcTlCLEVBQU9obUQsT0FBT0UsZUFBZThsRCxFQUFLcjlCLEVBQUssQ0FBRW5vQixNQUFPQSxFQUFPeXJCLFlBQVksRUFBTTNxQixjQUFjLEVBQU1DLFVBQVUsSUFBa0J5a0QsRUFBSXI5QixHQUFPbm9CLEVBQWdCd2xELENBQUssQ0NzSGhOLFNBQVMwVCxHQUFpQjkyQyxHQUN4QixPQUFPbFIsS0FBS3FGLFVBQVU2TCxFQUN4QixDQ3pGQSxTQUFTKzJDLEdBQW1CQyxHQUMxQixPQUFPbG9ELEtBQUtDLE1BQU1pb0QsRUFDcEIsQ0NoQ0EsU0FBU0MsR0FBa0JsYixHQUkzQixDQ1hBLFNBQVMsR0FBUTJhLEVBQVFDLEdBQWtCLElBQUk5d0QsRUFBT3pJLE9BQU95SSxLQUFLNndELEdBQVMsR0FBSXQ1RCxPQUFPOG5CLHNCQUF1QixDQUFFLElBQUkweEMsRUFBVXg1RCxPQUFPOG5CLHNCQUFzQnd4QyxHQUFhQyxJQUFnQkMsRUFBVUEsRUFBUXhVLFFBQU8sU0FBVXlVLEdBQU8sT0FBT3o1RCxPQUFPK25CLHlCQUF5QnV4QyxFQUFRRyxHQUFLeHRDLFVBQVksS0FBSXhqQixFQUFLYixLQUFLbkYsTUFBTWdHLEVBQU0rd0QsRUFBVSxDQUFFLE9BQU8vd0QsQ0FBTSxDQUVwVixTQUFTLEdBQWNzWixHQUFVLElBQUssSUFBSWtELEVBQUksRUFBR0EsRUFBSXRpQixVQUFVOUIsT0FBUW9rQixJQUFLLENBQUUsSUFBSTliLEVBQXlCLE1BQWhCeEcsVUFBVXNpQixHQUFhdGlCLFVBQVVzaUIsR0FBSyxDQUFDLEVBQU9BLEVBQUksRUFBSyxHQUFROWIsR0FBUSxHQUFNNmhCLFNBQVEsU0FBVXJDLEdBQU8sR0FBZ0I1RyxFQUFRNEcsRUFBS3hmLEVBQU93ZixHQUFPLElBQWUzb0IsT0FBTzg1RCwwQkFBNkI5NUQsT0FBT0MsaUJBQWlCOGhCLEVBQVEvaEIsT0FBTzg1RCwwQkFBMEIzd0QsSUFBbUIsR0FBUUEsR0FBUTZoQixTQUFRLFNBQVVyQyxHQUFPM29CLE9BQU9FLGVBQWU2aEIsRUFBUTRHLEVBQUszb0IsT0FBTytuQix5QkFBeUI1ZSxFQUFRd2YsR0FBTyxHQUFNLENBQUUsT0FBTzVHLENBQVEsQ0FFcmdCLFNBQVMsR0FBZ0Jpa0MsRUFBS3I5QixFQUFLbm9CLEdBQWlLLE9BQXBKbW9CLEtBQU9xOUIsRUFBT2htRCxPQUFPRSxlQUFlOGxELEVBQUtyOUIsRUFBSyxDQUFFbm9CLE1BQU9BLEVBQU95ckIsWUFBWSxFQUFNM3FCLGNBQWMsRUFBTUMsVUFBVSxJQUFrQnlrRCxFQUFJcjlCLEdBQU9ub0IsRUFBZ0J3bEQsQ0FBSyxDQ0pqTSxTQUFTLEdBQVFBLEdBRzlCLE9BQU8sR0FBVSxtQkFBcUJsa0QsUUFBVSxpQkFBbUJBLE9BQU9HLFNBQVcsU0FBVStqRCxHQUM3RixjQUFjQSxDQUNoQixFQUFJLFNBQVVBLEdBQ1osT0FBT0EsR0FBTyxtQkFBcUJsa0QsUUFBVWtrRCxFQUFJN2lELGNBQWdCckIsUUFBVWtrRCxJQUFRbGtELE9BQU92QixVQUFZLGdCQUFrQnlsRCxDQUMxSCxFQUFHLEdBQVFBLEVBQ2IsQ0NQZSxTQUFTLEdBQWdCQSxFQUFLcjlCLEVBQUtub0IsR0FZaEQsT0FYQW1vQixFQ0FhLFNBQXdCa25DLEdBQ3JDLElBQUlsbkMsRUNGUyxTQUFzQitILEVBQU83Z0IsR0FDMUMsR0FBdUIsV0FBbkIsR0FBUTZnQixJQUFpQyxPQUFWQSxFQUFnQixPQUFPQSxFQUMxRCxJQUFJcXBDLEVBQU9ycEMsRUFBTTV1QixPQUFPazRELGFBQ3hCLFFBQWFwVixJQUFUbVYsRUFBb0IsQ0FDdEIsSUFBSUUsRUFBTUYsRUFBS3YzRCxLQUFLa3VCLEVBQU83Z0IsVUFDM0IsR0FBcUIsV0FBakIsR0FBUW9xRCxHQUFtQixPQUFPQSxFQUN0QyxNQUFNLElBQUlwNEQsVUFBVSwrQ0FDdEIsQ0FDQSxPQUE0Qk0sT0FBaUJ1dUIsRUFDL0MsQ0RQWSxDQUFZbS9CLEdBQ3RCLE1BQXdCLFdBQWpCLEdBQVFsbkMsR0FBb0JBLEVBQU14bUIsT0FBT3dtQixFQUNsRCxDREhRLENBQWNBLE1BQ1RxOUIsRUFDVGhtRCxPQUFPRSxlQUFlOGxELEVBQUtyOUIsRUFBSyxDQUM5Qm5vQixNQUFPQSxFQUNQeXJCLFlBQVksRUFDWjNxQixjQUFjLEVBQ2RDLFVBQVUsSUFHWnlrRCxFQUFJcjlCLEdBQU9ub0IsRUFFTndsRCxDQUNULENHYkEsU0FBUyxHQUFRc1QsRUFBUUMsR0FDdkIsSUFBSTl3RCxFQUFPekksT0FBT3lJLEtBQUs2d0QsR0FDdkIsR0FBSXQ1RCxPQUFPOG5CLHNCQUF1QixDQUNoQyxJQUFJMHhDLEVBQVV4NUQsT0FBTzhuQixzQkFBc0J3eEMsR0FDM0NDLElBQW1CQyxFQUFVQSxFQUFReFUsUUFBTyxTQUFVeVUsR0FDcEQsT0FBT3o1RCxPQUFPK25CLHlCQUF5QnV4QyxFQUFRRyxHQUFLeHRDLFVBQ3RELEtBQUt4akIsRUFBS2IsS0FBS25GLE1BQU1nRyxFQUFNK3dELEVBQzdCLENBQ0EsT0FBTy93RCxDQUNULENBQ2UsU0FBU3l4RCxHQUFlbjRDLEdBQ3JDLElBQUssSUFBSWtELEVBQUksRUFBR0EsRUFBSXRpQixVQUFVOUIsT0FBUW9rQixJQUFLLENBQ3pDLElBQUk5YixFQUFTLE1BQVF4RyxVQUFVc2lCLEdBQUt0aUIsVUFBVXNpQixHQUFLLENBQUMsRUFDcERBLEVBQUksRUFBSSxHQUFRamxCLE9BQU9tSixJQUFTLEdBQUk2aEIsU0FBUSxTQUFVckMsR0FDcEQsR0FBZTVHLEVBQVE0RyxFQUFLeGYsRUFBT3dmLEdBQ3JDLElBQUszb0IsT0FBTzg1RCwwQkFBNEI5NUQsT0FBT0MsaUJBQWlCOGhCLEVBQVEvaEIsT0FBTzg1RCwwQkFBMEIzd0QsSUFBVyxHQUFRbkosT0FBT21KLElBQVM2aEIsU0FBUSxTQUFVckMsR0FDNUozb0IsT0FBT0UsZUFBZTZoQixFQUFRNEcsRUFBSzNvQixPQUFPK25CLHlCQUF5QjVlLEVBQVF3ZixHQUM3RSxHQUNGLENBQ0EsT0FBTzVHLENBQ1QsQ0NaQSxTQUFTbzRDLEdBQXVCMWlDLEdBQzlCLE1BQU8seUJBQTJCQSxFQUFPLDRDQUE4Q0EsRUFBaEYsaUZBQ1QsQ0FHQSxJQUFJMmlDLEdBQ3VCLG1CQUFYdDRELFFBQXlCQSxPQUFPdTRELFlBQWMsZUFTMURDLEdBQWUsV0FDakIsT0FBT3g1RCxLQUFLMlksU0FBUzdYLFNBQVMsSUFBSW1NLFVBQVUsR0FBRzVNLE1BQU0sSUFBSTJJLEtBQUssSUFDaEUsRUFFSXl3RCxHQUFjLENBQ2hCQyxLQUFNLGVBQWlCRixLQUN2QkcsUUFBUyxrQkFBb0JILEtBQzdCSSxxQkFBc0IsV0FDcEIsTUFBTywrQkFBaUNKLElBQzFDLEdBdUdGLFNBQVNLLEdBQVlDLEVBQVNDLEVBQWdCQyxHQUM1QyxJQUFJQyxFQUVKLEdBQThCLG1CQUFuQkYsR0FBcUQsbUJBQWJDLEdBQStDLG1CQUFiQSxHQUFtRCxtQkFBakJuNEQsVUFBVSxHQUMvSCxNQUFNLElBQUk1QixNQUE4Q281RCxHQUF1QixJQVFqRixHQUw4QixtQkFBbkJVLFFBQXFELElBQWJDLElBQ2pEQSxFQUFXRCxFQUNYQSxPQUFpQmpXLFFBR0ssSUFBYmtXLEVBQTBCLENBQ25DLEdBQXdCLG1CQUFiQSxFQUNULE1BQU0sSUFBSS81RCxNQUE4Q281RCxHQUF1QixJQUdqRixPQUFPVyxFQUFTSCxHQUFURyxDQUFzQkYsRUFBU0MsRUFDeEMsQ0FFQSxHQUF1QixtQkFBWkQsRUFDVCxNQUFNLElBQUk3NUQsTUFBOENvNUQsR0FBdUIsSUFHakYsSUFBSWEsRUFBaUJKLEVBQ2pCSyxFQUFlSixFQUNmSyxFQUFtQixHQUNuQkMsRUFBZ0JELEVBQ2hCRSxHQUFnQixFQVNwQixTQUFTQyxJQUNIRixJQUFrQkQsSUFDcEJDLEVBQWdCRCxFQUFpQnI0RCxRQUVyQyxDQVFBLFNBQVNpcUQsSUFDUCxHQUFJc08sRUFDRixNQUFNLElBQUlyNkQsTUFBOENvNUQsR0FBdUIsSUFHakYsT0FBT2MsQ0FDVCxDQTBCQSxTQUFTOUwsRUFBVW54QixHQUNqQixHQUF3QixtQkFBYkEsRUFDVCxNQUFNLElBQUlqOUIsTUFBOENvNUQsR0FBdUIsSUFHakYsR0FBSWlCLEVBQ0YsTUFBTSxJQUFJcjZELE1BQThDbzVELEdBQXVCLElBR2pGLElBQUltQixHQUFlLEVBR25CLE9BRkFELElBQ0FGLEVBQWN2ekQsS0FBS28yQixHQUNaLFdBQ0wsR0FBS3M5QixFQUFMLENBSUEsR0FBSUYsRUFDRixNQUFNLElBQUlyNkQsTUFBOENvNUQsR0FBdUIsSUFHakZtQixHQUFlLEVBQ2ZELElBQ0EsSUFBSXZ5QixFQUFRcXlCLEVBQWNsNEQsUUFBUSs2QixHQUNsQ205QixFQUFjeGYsT0FBTzdTLEVBQU8sR0FDNUJveUIsRUFBbUIsSUFWbkIsQ0FXRixDQUNGLENBNEJBLFNBQVNwdkIsRUFBU2p2QixHQUNoQixJQXpPSixTQUF1Qm1wQyxHQUNyQixHQUFtQixpQkFBUkEsR0FBNEIsT0FBUkEsRUFBYyxPQUFPLEVBR3BELElBRkEsSUFBSXVWLEVBQVF2VixFQUU0QixPQUFqQ2htRCxPQUFPZ29CLGVBQWV1ekMsSUFDM0JBLEVBQVF2N0QsT0FBT2dvQixlQUFldXpDLEdBR2hDLE9BQU92N0QsT0FBT2dvQixlQUFlZytCLEtBQVN1VixDQUN4QyxDQWdPUzNWLENBQWMvb0MsR0FDakIsTUFBTSxJQUFJOWIsTUFBOENvNUQsR0FBdUIsSUFHakYsUUFBMkIsSUFBaEJ0OUMsRUFBT3FCLEtBQ2hCLE1BQU0sSUFBSW5kLE1BQThDbzVELEdBQXVCLElBR2pGLEdBQUlpQixFQUNGLE1BQU0sSUFBSXI2RCxNQUE4Q281RCxHQUF1QixJQUdqRixJQUNFaUIsR0FBZ0IsRUFDaEJILEVBQWVELEVBQWVDLEVBQWNwK0MsRUFDOUMsQ0FBRSxRQUNBdStDLEdBQWdCLENBQ2xCLENBSUEsSUFGQSxJQUFJemhDLEVBQVl1aEMsRUFBbUJDLEVBRTFCbDJDLEVBQUksRUFBR0EsRUFBSTBVLEVBQVU5NEIsT0FBUW9rQixLQUVwQytZLEVBRGVyRSxFQUFVMVUsTUFJM0IsT0FBT3BJLENBQ1QsQ0E0RUEsT0FIQWl2QixFQUFTLENBQ1A1dEIsS0FBTXE4QyxHQUFZQyxRQUViTyxFQUFRLENBQ2JqdkIsU0FBVUEsRUFDVnFqQixVQUFXQSxFQUNYckMsU0FBVUEsRUFDVjBPLGVBbkVGLFNBQXdCQyxHQUN0QixHQUEyQixtQkFBaEJBLEVBQ1QsTUFBTSxJQUFJMTZELE1BQThDbzVELEdBQXVCLEtBR2pGYSxFQUFpQlMsRUFLakIzdkIsRUFBUyxDQUNQNXRCLEtBQU1xOEMsR0FBWUUsU0FFdEIsSUF1RFNMLElBOUNULFdBQ0UsSUFBSXNCLEVBRUFDLEVBQWlCeE0sRUFDckIsT0FBT3VNLEVBQU8sQ0FTWnZNLFVBQVcsU0FBbUJ5TSxHQUM1QixHQUF3QixpQkFBYkEsR0FBc0MsT0FBYkEsRUFDbEMsTUFBTSxJQUFJNzZELE1BQThDbzVELEdBQXVCLEtBR2pGLFNBQVMwQixJQUNIRCxFQUFTNTVELE1BQ1g0NUQsRUFBUzU1RCxLQUFLOHFELElBRWxCLENBSUEsT0FGQStPLElBRU8sQ0FDTEMsWUFGZ0JILEVBQWVFLEdBSW5DLElBQ016QixJQUFnQixXQUN0QixPQUFPbjVELElBQ1QsRUFBR3k2RCxDQUNMLEVBYXFDWCxDQUN2QyxDQXNIQSxTQUFTZ0IsR0FBZ0JDLEdBSXZCLElBSEEsSUFBSUMsRUFBY2o4RCxPQUFPeUksS0FBS3V6RCxHQUMxQkUsRUFBZ0IsQ0FBQyxFQUVaajNDLEVBQUksRUFBR0EsRUFBSWczQyxFQUFZcDdELE9BQVFva0IsSUFBSyxDQUMzQyxJQUFJMEQsRUFBTXN6QyxFQUFZaDNDLEdBUU8sbUJBQWxCKzJDLEVBQVNyekMsS0FDbEJ1ekMsRUFBY3Z6QyxHQUFPcXpDLEVBQVNyekMsR0FFbEMsQ0FFQSxJQVNJd3pDLEVBVEFDLEVBQW1CcDhELE9BQU95SSxLQUFLeXpELEdBV25DLEtBakVGLFNBQTRCRixHQUMxQmg4RCxPQUFPeUksS0FBS3V6RCxHQUFVaHhDLFNBQVEsU0FBVXJDLEdBQ3RDLElBQUlpeUMsRUFBVW9CLEVBQVNyekMsR0FLdkIsUUFBNEIsSUFKVGl5QyxPQUFRaFcsRUFBVyxDQUNwQzFtQyxLQUFNcThDLEdBQVlDLE9BSWxCLE1BQU0sSUFBSXo1RCxNQUE4Q281RCxHQUF1QixLQUdqRixRQUVPLElBRklTLE9BQVFoVyxFQUFXLENBQzVCMW1DLEtBQU1xOEMsR0FBWUcseUJBRWxCLE1BQU0sSUFBSTM1RCxNQUE4Q281RCxHQUF1QixJQUVuRixHQUNGLENBaURJa0MsQ0FBbUJILEVBQ3JCLENBQUUsTUFBTzc2RCxHQUNQODZELEVBQXNCOTZELENBQ3hCLENBRUEsT0FBTyxTQUFxQitTLEVBQU95SSxHQUtqQyxRQUpjLElBQVZ6SSxJQUNGQSxFQUFRLENBQUMsR0FHUCtuRCxFQUNGLE1BQU1BLEVBY1IsSUFYMkMsSUFRdkNHLEdBQWEsRUFDYkMsRUFBWSxDQUFDLEVBRVJDLEVBQUssRUFBR0EsRUFBS0osRUFBaUJ2N0QsT0FBUTI3RCxJQUFNLENBQ25ELElBQUloTyxFQUFPNE4sRUFBaUJJLEdBQ3hCNUIsRUFBVXNCLEVBQWMxTixHQUN4QmlPLEVBQXNCcm9ELEVBQU1vNkMsR0FDNUJrTyxFQUFrQjlCLEVBQVE2QixFQUFxQjUvQyxHQUVuRCxRQUErQixJQUFwQjYvQyxFQUVULE1BRGlCNy9DLEdBQVVBLEVBQU9xQixLQUM1QixJQUFJbmQsTUFBOENvNUQsR0FBdUIsS0FHakZvQyxFQUFVL04sR0FBUWtPLEVBQ2xCSixFQUFhQSxHQUFjSSxJQUFvQkQsQ0FDakQsQ0FHQSxPQURBSCxFQUFhQSxHQUFjRixFQUFpQnY3RCxTQUFXYixPQUFPeUksS0FBSzJMLEdBQU92VCxRQUN0RDA3RCxFQUFZbm9ELENBQ2xDLENBQ0YsQ0E4REEsU0FBU3VvRCxLQUNQLElBQUssSUFBSXJPLEVBQU8zckQsVUFBVTlCLE9BQVErN0QsRUFBUSxJQUFJdDhELE1BQU1ndUQsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUNoRm9PLEVBQU1wTyxHQUFRN3JELFVBQVU2ckQsR0FHMUIsT0FBcUIsSUFBakJvTyxFQUFNLzdELE9BQ0QsU0FBVWd2RCxHQUNmLE9BQU9BLENBQ1QsRUFHbUIsSUFBakIrTSxFQUFNLzdELE9BQ0QrN0QsRUFBTSxHQUdSQSxFQUFNOVksUUFBTyxTQUFVM2pELEVBQUdDLEdBQy9CLE9BQU8sV0FDTCxPQUFPRCxFQUFFQyxFQUFFcUMsV0FBTSxFQUFRRSxXQUMzQixDQUNGLEdBQ0YsQ0FtQkEsU0FBU2s2RCxLQUNQLElBQUssSUFBSXZPLEVBQU8zckQsVUFBVTlCLE9BQVFpOEQsRUFBYyxJQUFJeDhELE1BQU1ndUQsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUN0RnNPLEVBQVl0TyxHQUFRN3JELFVBQVU2ckQsR0FHaEMsT0FBTyxTQUFVbU0sR0FDZixPQUFPLFdBQ0wsSUFBSWxPLEVBQVFrTyxFQUFZbDRELFdBQU0sRUFBUUUsV0FFbENvNkQsRUFBWSxXQUNkLE1BQU0sSUFBSWg4RCxNQUE4Q281RCxHQUF1QixJQUNqRixFQUVJNkMsRUFBZ0IsQ0FDbEJsUSxTQUFVTCxFQUFNSyxTQUNoQmhoQixTQUFVLFdBQ1IsT0FBT2l4QixFQUFVdDZELFdBQU0sRUFBUUUsVUFDakMsR0FFRXM2RCxFQUFRSCxFQUFZdGQsS0FBSSxTQUFVMGQsR0FDcEMsT0FBT0EsRUFBV0YsRUFDcEIsSUFFQSxPQURBRCxFQUFZSixHQUFRbDZELFdBQU0sRUFBUXc2RCxFQUF0Qk4sQ0FBNkJsUSxFQUFNM2dCLFVBQ3hDLEdBQWMsR0FBYyxDQUFDLEVBQUcyZ0IsR0FBUSxDQUFDLEVBQUcsQ0FDakQzZ0IsU0FBVWl4QixHQUVkLENBQ0YsQ0FDRixDQzlyQkEsU0FBU0ksR0FBbUJDLEdBQU8sT0FNbkMsU0FBNEJBLEdBQU8sR0FBSTk4RCxNQUFNZ0MsUUFBUTg2RCxHQUFNLENBQUUsSUFBSyxJQUFJbjRDLEVBQUksRUFBR280QyxFQUFPLElBQUkvOEQsTUFBTTg4RCxFQUFJdjhELFFBQVNva0IsRUFBSW00QyxFQUFJdjhELE9BQVFva0IsSUFBT280QyxFQUFLcDRDLEdBQUttNEMsRUFBSW40QyxHQUFNLE9BQU9vNEMsQ0FBTSxDQUFFLENBTjNIQyxDQUFtQkYsSUFJN0QsU0FBMEJHLEdBQVEsR0FBSXo3RCxPQUFPRyxZQUFZakMsT0FBT3U5RCxJQUFrRCx1QkFBekN2OUQsT0FBT08sVUFBVXFCLFNBQVNZLEtBQUsrNkQsR0FBZ0MsT0FBT2o5RCxNQUFNazlELEtBQUtELEVBQU8sQ0FKNUZFLENBQWlCTCxJQUV0RixXQUFnQyxNQUFNLElBQUl2N0QsVUFBVSxrREFBb0QsQ0FGVjY3RCxFQUFzQixDQVFwSCxTQUFTLEdBQVFwRSxFQUFRQyxHQUFrQixJQUFJOXdELEVBQU96SSxPQUFPeUksS0FBSzZ3RCxHQUFTLEdBQUl0NUQsT0FBTzhuQixzQkFBdUIsQ0FBRSxJQUFJMHhDLEVBQVV4NUQsT0FBTzhuQixzQkFBc0J3eEMsR0FBYUMsSUFBZ0JDLEVBQVVBLEVBQVF4VSxRQUFPLFNBQVV5VSxHQUFPLE9BQU96NUQsT0FBTytuQix5QkFBeUJ1eEMsRUFBUUcsR0FBS3h0QyxVQUFZLEtBQUl4akIsRUFBS2IsS0FBS25GLE1BQU1nRyxFQUFNK3dELEVBQVUsQ0FBRSxPQUFPL3dELENBQU0sQ0FFcFYsU0FBUyxHQUFjc1osR0FBVSxJQUFLLElBQUlrRCxFQUFJLEVBQUdBLEVBQUl0aUIsVUFBVTlCLE9BQVFva0IsSUFBSyxDQUFFLElBQUk5YixFQUF5QixNQUFoQnhHLFVBQVVzaUIsR0FBYXRpQixVQUFVc2lCLEdBQUssQ0FBQyxFQUFPQSxFQUFJLEVBQUssR0FBUTliLEdBQVEsR0FBTTZoQixTQUFRLFNBQVVyQyxHQUFPLEdBQWdCNUcsRUFBUTRHLEVBQUt4ZixFQUFPd2YsR0FBTyxJQUFlM29CLE9BQU84NUQsMEJBQTZCOTVELE9BQU9DLGlCQUFpQjhoQixFQUFRL2hCLE9BQU84NUQsMEJBQTBCM3dELElBQW1CLEdBQVFBLEdBQVE2aEIsU0FBUSxTQUFVckMsR0FBTzNvQixPQUFPRSxlQUFlNmhCLEVBQVE0RyxFQUFLM29CLE9BQU8rbkIseUJBQXlCNWUsRUFBUXdmLEdBQU8sR0FBTSxDQUFFLE9BQU81RyxDQUFRLENBRXJnQixTQUFTLEdBQWdCaWtDLEVBQUtyOUIsRUFBS25vQixHQUFpSyxPQUFwSm1vQixLQUFPcTlCLEVBQU9obUQsT0FBT0UsZUFBZThsRCxFQUFLcjlCLEVBQUssQ0FBRW5vQixNQUFPQSxFQUFPeXJCLFlBQVksRUFBTTNxQixjQUFjLEVBQU1DLFVBQVUsSUFBa0J5a0QsRUFBSXI5QixHQUFPbm9CLEVBQWdCd2xELENBQUssQ0FJaE4sSUFBSTJYLEdBQWUsQ0FDakJDLFNBQVUsR0FDVmxQLGNBQWMsR0FHWm1QLEdBQW1CLFdBQ3JCLElBQUl6cEQsRUFBUXpSLFVBQVU5QixPQUFTLFFBQXNCK2pELElBQWpCamlELFVBQVUsR0FBbUJBLFVBQVUsR0FBS2c3RCxHQUM1RTlnRCxFQUFTbGEsVUFBVTlCLE9BQVMsRUFBSThCLFVBQVUsUUFBS2lpRCxFQUVuRCxPQUFRL25DLEVBQU9xQixNQUNiLEtBQUtrN0MsR0FDSCxPQUFPLEdBQWMsQ0FBQyxFQUFHaGxELEVBQU8sQ0FDOUJ3cEQsU0FBVSxHQUFHanhELE9BQU93d0QsR0FBbUIvb0QsRUFBTXdwRCxVQUFXLENBQUMvZ0QsRUFBTzhMLFFBR3BFLEtBQUtxd0MsR0FDSCxJQUFJOEUsRUFBYTFwRCxFQUFNd3BELFNBQVMzNkQsUUFBUTRaLEVBQU84TCxLQUUzQ2kxQyxFQUFXVCxHQUFtQi9vRCxFQUFNd3BELFVBR3hDLE9BREFBLEVBQVNqaUIsT0FBT21pQixFQUFZLEdBQ3JCLEdBQWMsQ0FBQyxFQUFHMXBELEVBQU8sQ0FDOUJ3cEQsU0FBVUEsRUFDVmxQLGFBQWtDLElBQXBCa1AsRUFBUy84RCxTQUczQixRQUNFLE9BQU91VCxFQUViLDhCQzdDQSxTQUFTcEUsR0FBRUEsR0FBRyxJQUFJLElBQUkzRCxFQUFFMUosVUFBVTlCLE9BQU9vRSxFQUFFM0UsTUFBTStMLEVBQUUsRUFBRUEsRUFBRSxFQUFFLEdBQUdoTCxFQUFFLEVBQUVBLEVBQUVnTCxFQUFFaEwsSUFBSTRELEVBQUU1RCxFQUFFLEdBQUdzQixVQUFVdEIsR0FBa0osTUFBTU4sTUFBTSw4QkFBOEJpUCxHQUFHL0ssRUFBRXBFLE9BQU8sSUFBSW9FLEVBQUV1NkMsS0FBSSxTQUFVeHZDLEdBQUcsTUFBTSxJQUFJQSxFQUFFLEdBQUksSUFBR2xHLEtBQUssS0FBSyxJQUFJLG1EQUFtRCxDQUFDLFNBQVMsR0FBRWtHLEdBQUcsUUFBUUEsS0FBS0EsRUFBRSxHQUFFLENBQUMsU0FBUy9LLEdBQUUrSyxHQUFHLElBQUkzRCxFQUFFLFFBQVEyRCxJQUFJLFNBQVNBLEdBQUcsSUFBSUEsR0FBRyxpQkFBaUJBLEVBQUUsT0FBTSxFQUFHLElBQUkzRCxFQUFFck0sT0FBT2dvQixlQUFlaFksR0FBRyxHQUFHLE9BQU8zRCxFQUFFLE9BQU0sRUFBRyxJQUFJcEgsRUFBRWpGLE9BQU91SSxlQUFlL0YsS0FBSzZKLEVBQUUsZ0JBQWdCQSxFQUFFbEosWUFBWSxPQUFPOEIsSUFBSWpGLFFBQVEsbUJBQW1CaUYsR0FBR2pDLFNBQVNwQixTQUFTWSxLQUFLeUMsS0FBSyxFQUFDLENBQTFPLENBQTRPK0ssSUFBSTFQLE1BQU1nQyxRQUFRME4sTUFBTUEsRUFBRSxRQUFPLFFBQVEzRCxFQUFFMkQsRUFBRTdNLG1CQUFjLElBQVNrSixPQUFFLEVBQU9BLEVBQUUsTUFBSyxHQUFFMkQsSUFBSSxHQUFFQSxHQUFHLENBQTJDLFNBQVNpVixHQUFFalYsRUFBRTNELEVBQUVwSCxRQUFHLElBQVNBLElBQUlBLEdBQUUsR0FBSSxJQUFJNlMsR0FBRTlILElBQUkvSyxFQUFFakYsT0FBT3lJLEtBQUtzMUQsSUFBSS90RCxHQUFHZ2IsU0FBUSxTQUFVM3BCLEdBQUc0RCxHQUFHLGlCQUFpQjVELEdBQUdnTCxFQUFFaEwsRUFBRTJPLEVBQUUzTyxHQUFHMk8sRUFBRyxJQUFHQSxFQUFFZ2IsU0FBUSxTQUFVL2xCLEVBQUU1RCxHQUFHLE9BQU9nTCxFQUFFaEwsRUFBRTRELEVBQUUrSyxFQUFHLEdBQUUsQ0FBQyxTQUFTOEgsR0FBRTlILEdBQUcsSUFBSTNELEVBQUUyRCxFQUFFLElBQUcsT0FBTzNELEVBQUVBLEVBQUU0WSxFQUFFLEVBQUU1WSxFQUFFNFksRUFBRSxFQUFFNVksRUFBRTRZLEVBQUUza0IsTUFBTWdDLFFBQVEwTixHQUFHLEVBQUUsR0FBRUEsR0FBRyxFQUFFLEdBQUVBLEdBQUcsRUFBRSxDQUFDLENBQUMsU0FBU3BELEdBQUVvRCxFQUFFM0QsR0FBRyxPQUFPLElBQUl5TCxHQUFFOUgsR0FBR0EsRUFBRWt1QixJQUFJN3hCLEdBQUdyTSxPQUFPTyxVQUFVZ0ksZUFBZS9GLEtBQUt3TixFQUFFM0QsRUFBRSxDQUErQyxTQUFTM0ssR0FBRXNPLEVBQUUzRCxFQUFFcEgsR0FBRyxJQUFJNUQsRUFBRXlXLEdBQUU5SCxHQUFHLElBQUkzTyxFQUFFMk8sRUFBRXViLElBQUlsZixFQUFFcEgsR0FBRyxJQUFJNUQsRUFBRTJPLEVBQUV3YSxJQUFJdmxCLEdBQUcrSyxFQUFFM0QsR0FBR3BILENBQUMsQ0FBQyxTQUFTNUUsR0FBRTJQLEVBQUUzRCxHQUFHLE9BQU8yRCxJQUFJM0QsRUFBRSxJQUFJMkQsR0FBRyxFQUFFQSxHQUFHLEVBQUUzRCxFQUFFMkQsR0FBR0EsR0FBRzNELEdBQUdBLENBQUMsQ0FBQyxTQUFTLEdBQUUyRCxHQUFHLE9BQU8sSUFBR0EsYUFBYWtqQixHQUFHLENBQUMsU0FBUyxHQUFFbGpCLEdBQUcsT0FBTyxJQUFHQSxhQUFhdWEsR0FBRyxDQUFDLFNBQVNqYSxHQUFFTixHQUFHLE9BQU9BLEVBQUU4SCxHQUFHOUgsRUFBRS9LLENBQUMsQ0FBQyxTQUFTOEssR0FBRUMsR0FBRyxHQUFHMVAsTUFBTWdDLFFBQVEwTixHQUFHLE9BQU8xUCxNQUFNQyxVQUFVc0MsTUFBTUwsS0FBS3dOLEdBQUcsSUFBSTNELEVBQUUyeEQsR0FBR2h1RCxVQUFVM0QsRUFBRSxJQUFHLElBQUksSUFBSXBILEVBQUU4NEQsR0FBRzF4RCxHQUFHaEwsRUFBRSxFQUFFQSxFQUFFNEQsRUFBRXBFLE9BQU9RLElBQUksQ0FBQyxJQUFJNGpCLEVBQUVoZ0IsRUFBRTVELEdBQUd5VyxFQUFFekwsRUFBRTRZLElBQUcsSUFBS25OLEVBQUV2VyxXQUFXdVcsRUFBRXZXLFVBQVMsRUFBR3VXLEVBQUV4VyxjQUFhLElBQUt3VyxFQUFFa1UsS0FBS2xVLEVBQUV5VCxPQUFPbGYsRUFBRTRZLEdBQUcsQ0FBQzNqQixjQUFhLEVBQUdDLFVBQVMsRUFBRzBxQixXQUFXblUsRUFBRW1VLFdBQVd6ckIsTUFBTXdQLEVBQUVpVixJQUFJLENBQUMsT0FBT2psQixPQUFPcUksT0FBT3JJLE9BQU9nb0IsZUFBZWhZLEdBQUczRCxFQUFFLENBQUMsU0FBU2pMLEdBQUU0TyxFQUFFM08sR0FBRyxZQUFPLElBQVNBLElBQUlBLEdBQUUsR0FBSSxHQUFFMk8sSUFBSSxHQUFFQSxLQUFLL0ssR0FBRStLLEtBQUs4SCxHQUFFOUgsR0FBRyxJQUFJQSxFQUFFdWIsSUFBSXZiLEVBQUV3YSxJQUFJeGEsRUFBRXlVLE1BQU16VSxFQUFFbWpCLE9BQU85dkIsSUFBR3JELE9BQU8rdkQsT0FBTy8vQyxHQUFHM08sR0FBRzRqQixHQUFFalYsR0FBRSxTQUFVQSxFQUFFM0QsR0FBRyxPQUFPakwsR0FBRWlMLEdBQUUsRUFBSSxJQUFFLElBQUsyRCxDQUFDLENBQUMsU0FBUzNNLEtBQUkyTSxHQUFFLEVBQUUsQ0FBQyxTQUFTLEdBQUVBLEdBQUcsT0FBTyxNQUFNQSxHQUFHLGlCQUFpQkEsR0FBR2hRLE9BQU9pK0QsU0FBU2p1RCxFQUFFLENBQUMsU0FBUyxHQUFFM0QsR0FBRyxJQUFJcEgsRUFBRWk1RCxHQUFHN3hELEdBQUcsT0FBT3BILEdBQUcrSyxHQUFFLEdBQUczRCxHQUFHcEgsQ0FBQyxDQUFrQyxTQUFTLEtBQUksT0FBbUQsRUFBQyxDQUFDLFNBQVMsR0FBRStLLEVBQUUzRCxHQUFHQSxJQUFJLEdBQUUsV0FBVzJELEVBQUVwRCxFQUFFLEdBQUdvRCxFQUFFK1MsRUFBRSxHQUFHL1MsRUFBRXZLLEVBQUU0RyxFQUFFLENBQUMsU0FBUyxHQUFFMkQsR0FBRyxHQUFFQSxHQUFHQSxFQUFFTSxFQUFFMGEsUUFBUSxJQUFHaGIsRUFBRU0sRUFBRSxJQUFJLENBQUMsU0FBUyxHQUFFTixHQUFHQSxJQUFJLEtBQUksR0FBRUEsRUFBRUQsRUFBRSxDQUFDLFNBQVMsR0FBRUMsR0FBRyxPQUFPLEdBQUUsQ0FBQ00sRUFBRSxHQUFHUCxFQUFFLEdBQUUxTSxFQUFFMk0sRUFBRTVOLEdBQUUsRUFBRzR0RCxFQUFFLEVBQUUsQ0FBQyxTQUFTLEdBQUVoZ0QsR0FBRyxJQUFJM0QsRUFBRTJELEVBQUUsSUFBRyxJQUFJM0QsRUFBRTRZLEdBQUcsSUFBSTVZLEVBQUU0WSxFQUFFNVksRUFBRXVMLElBQUl2TCxFQUFFekwsR0FBRSxDQUFFLENBQUMsU0FBUyxHQUFFeUwsRUFBRWhMLEdBQUdBLEVBQUUydUQsRUFBRTN1RCxFQUFFaVAsRUFBRXpQLE9BQU8sSUFBSW9rQixFQUFFNWpCLEVBQUVpUCxFQUFFLEdBQUd3SCxPQUFFLElBQVN6TCxHQUFHQSxJQUFJNFksRUFBRSxPQUFPNWpCLEVBQUVnQyxFQUFFcUosR0FBRyxHQUFFLE9BQU9rQixFQUFFdk0sRUFBRWdMLEVBQUV5TCxHQUFHQSxHQUFHbU4sRUFBRSxJQUFHL2YsSUFBSSxHQUFFN0QsR0FBRzJPLEdBQUUsSUFBSS9LLEdBQUVvSCxLQUFLQSxFQUFFLEdBQUVoTCxFQUFFZ0wsR0FBR2hMLEVBQUUwTyxHQUFHLEdBQUUxTyxFQUFFZ0wsSUFBSWhMLEVBQUV1TCxHQUFHLEdBQUUsV0FBVzNHLEVBQUVnZixFQUFFLElBQUdoZ0IsRUFBRW9ILEVBQUVoTCxFQUFFdUwsRUFBRXZMLEVBQUUwaEIsSUFBSTFXLEVBQUUsR0FBRWhMLEVBQUU0akIsRUFBRSxJQUFJLEdBQUU1akIsR0FBR0EsRUFBRXVMLEdBQUd2TCxFQUFFb0UsRUFBRXBFLEVBQUV1TCxFQUFFdkwsRUFBRTBoQixHQUFHMVcsSUFBSSxHQUFFQSxPQUFFLENBQU0sQ0FBQyxTQUFTLEdBQUUyRCxFQUFFM0QsRUFBRXBILEdBQUcsR0FBRyxHQUFFb0gsR0FBRyxPQUFPQSxFQUFFLElBQUloTCxFQUFFZ0wsRUFBRSxJQUFHLElBQUloTCxFQUFFLE9BQU80akIsR0FBRTVZLEdBQUUsU0FBVTRZLEVBQUVuTixHQUFHLE9BQU8sR0FBRTlILEVBQUUzTyxFQUFFZ0wsRUFBRTRZLEVBQUVuTixFQUFFN1MsRUFBRyxJQUFFLEdBQUlvSCxFQUFFLEdBQUdoTCxFQUFFK0IsSUFBSTRNLEVBQUUsT0FBTzNELEVBQUUsSUFBSWhMLEVBQUU2RCxFQUFFLE9BQU8sR0FBRThLLEVBQUUzTyxFQUFFNEQsR0FBRSxHQUFJNUQsRUFBRTRELEVBQUUsSUFBSTVELEVBQUVtSSxFQUFFLENBQUNuSSxFQUFFbUksR0FBRSxFQUFHbkksRUFBRStCLEVBQUU0c0QsSUFBSSxJQUFJbDRDLEVBQUUsSUFBSXpXLEVBQUU0akIsR0FBRyxJQUFJNWpCLEVBQUU0akIsRUFBRTVqQixFQUFFeVcsRUFBRS9ILEdBQUUxTyxFQUFFdU8sR0FBR3ZPLEVBQUV5VyxFQUFFbEwsRUFBRWtMLEVBQUUzWCxHQUFFLEVBQUcsSUFBSWtCLEVBQUU0akIsSUFBSXJZLEVBQUUsSUFBSTJkLElBQUl6UyxHQUFHQSxFQUFFMk0sUUFBUXRrQixHQUFFLEdBQUk4a0IsR0FBRXJZLEdBQUUsU0FBVVAsRUFBRTRZLEdBQUcsT0FBTyxHQUFFalYsRUFBRTNPLEVBQUV5VyxFQUFFekwsRUFBRTRZLEVBQUVoZ0IsRUFBRTlFLEVBQUcsSUFBRyxHQUFFNlAsRUFBRThILEdBQUUsR0FBSTdTLEdBQUcrSyxFQUFFcEQsR0FBRyxHQUFFLFdBQVdsSCxFQUFFckUsRUFBRTRELEVBQUUrSyxFQUFFcEQsRUFBRW9ELEVBQUUrUyxFQUFFLENBQUMsT0FBTzFoQixFQUFFeVcsQ0FBQyxDQUFDLFNBQVMsR0FBRXpXLEVBQUU0akIsRUFBRW5OLEVBQUUzWCxFQUFFRSxFQUFFMGlCLEVBQUV0ZCxHQUFHLEdBQW9ELEdBQUVwRixHQUFHLENBQUMsSUFBSWlRLEVBQUUsR0FBRWpQLEVBQUVoQixFQUFFMGlCLEdBQUdrQyxHQUFHLElBQUlBLEVBQUVBLElBQUlyWSxHQUFFcVksRUFBRWhSLEVBQUU5VCxHQUFHNGlCLEVBQUVwVyxPQUFPeE0sUUFBRyxHQUFRLEdBQUd1QixHQUFFb1csRUFBRTNYLEVBQUVtUSxJQUFJLEdBQUVBLEdBQUcsT0FBT2pQLEVBQUVlLEdBQUUsQ0FBRSxNQUFNcUQsR0FBR3FTLEVBQUUwUyxJQUFJbnFCLEdBQUcsR0FBRzRFLEdBQUU1RSxLQUFLLEdBQUVBLEdBQUcsQ0FBQyxJQUFJZ0IsRUFBRWdDLEVBQUVxRixHQUFHckgsRUFBRTJ1RCxFQUFFLEVBQUUsT0FBTyxHQUFFM3VELEVBQUVoQixHQUFHNGtCLEdBQUdBLEVBQUU3aEIsRUFBRTJNLEdBQUcsR0FBRTFPLEVBQUVoQixFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUUyUCxFQUFFM0QsRUFBRXBILFFBQUcsSUFBU0EsSUFBSUEsR0FBRSxJQUFLK0ssRUFBRUQsR0FBR0MsRUFBRTNNLEVBQUVxRixHQUFHc0gsRUFBRTVOLEdBQUdoQixHQUFFaUwsRUFBRXBILEVBQUUsQ0FBQyxTQUFTLEdBQUUrSyxFQUFFM0QsR0FBRyxJQUFJcEgsRUFBRStLLEVBQUUsSUFBRyxPQUFPL0ssRUFBRXFMLEdBQUVyTCxHQUFHK0ssR0FBRzNELEVBQUUsQ0FBQyxTQUFTLEdBQUUyRCxFQUFFM0QsR0FBRyxHQUFHQSxLQUFLMkQsRUFBRSxJQUFJLElBQUkvSyxFQUFFakYsT0FBT2dvQixlQUFlaFksR0FBRy9LLEdBQUcsQ0FBQyxJQUFJNUQsRUFBRXJCLE9BQU8rbkIseUJBQXlCOWlCLEVBQUVvSCxHQUFHLEdBQUdoTCxFQUFFLE9BQU9BLEVBQUU0RCxFQUFFakYsT0FBT2dvQixlQUFlL2lCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRStLLEdBQUdBLEVBQUU5SyxJQUFJOEssRUFBRTlLLEdBQUUsRUFBRzhLLEVBQUVELEdBQUcsR0FBRUMsRUFBRUQsR0FBRyxDQUFDLFNBQVMsR0FBRUMsR0FBR0EsRUFBRThILElBQUk5SCxFQUFFOEgsRUFBRS9ILEdBQUVDLEVBQUUvSyxHQUFHLENBQUMsU0FBUyxHQUFFK0ssRUFBRTNELEVBQUVwSCxHQUFHLElBQUk1RCxFQUFFLEdBQUVnTCxHQUFHLEdBQUUsVUFBVXZELEVBQUV1RCxFQUFFcEgsR0FBRyxHQUFFb0gsR0FBRyxHQUFFLFVBQVV5SSxFQUFFekksRUFBRXBILEdBQUcrSyxFQUFFdEQsRUFBRSxTQUFTc0QsRUFBRTNELEdBQUcsSUFBSXBILEVBQUUzRSxNQUFNZ0MsUUFBUTBOLEdBQUczTyxFQUFFLENBQUM0akIsRUFBRWhnQixFQUFFLEVBQUUsRUFBRTdCLEVBQUVpSixFQUFFQSxFQUFFakosRUFBRSxLQUFJOEIsR0FBRSxFQUFHc0UsR0FBRSxFQUFHeUssRUFBRSxDQUFDLEVBQUVsRSxFQUFFMUQsRUFBRXBILEVBQUUrSyxFQUFFSixFQUFFLEtBQUtrSSxFQUFFLEtBQUtGLEVBQUUsS0FBS3RQLEdBQUUsR0FBSTJjLEVBQUU1akIsRUFBRXlXLEVBQUVxbUQsR0FBR2w1RCxJQUFJZ2dCLEVBQUUsQ0FBQzVqQixHQUFHeVcsRUFBRXNtRCxJQUFJLElBQUl4eEQsRUFBRXl4RCxNQUFNQyxVQUFVcjVDLEVBQUVuTixHQUFHM1gsRUFBRXlNLEVBQUUyeEQsT0FBTzc4RCxFQUFFa0wsRUFBRTR4RCxNQUFNLE9BQU9uOUQsRUFBRXVPLEVBQUVsTyxFQUFFTCxFQUFFdVcsRUFBRXpYLEVBQUV1QixDQUFDLENBQTNNLENBQTZNMkssRUFBRXBILEdBQUcsR0FBRSxPQUFPSyxFQUFFK0csRUFBRXBILEdBQUcsT0FBT0EsRUFBRUEsRUFBRTdCLEVBQUUsTUFBS2tOLEVBQUUxSSxLQUFLdkcsR0FBR0EsQ0FBQyxDQUFDLFNBQVMsR0FBRUEsR0FBRyxPQUFPLEdBQUVBLElBQUkyTyxHQUFFLEdBQUczTyxHQUFHLFNBQVMyTyxFQUFFM0QsR0FBRyxJQUFJcEgsR0FBRW9ILEdBQUcsT0FBT0EsRUFBRSxJQUFJaEwsRUFBRXVMLEVBQUVQLEVBQUUsSUFBR2hNLEVBQUV5WCxHQUFFekwsR0FBRyxHQUFHTyxFQUFFLENBQUMsSUFBSUEsRUFBRTFILElBQUkwSCxFQUFFcVksRUFBRSxJQUFJLEdBQUUsT0FBT3haLEVBQUVtQixJQUFJLE9BQU9BLEVBQUUzSCxFQUFFMkgsRUFBRXBELEdBQUUsRUFBR25JLEVBQUUsR0FBRWdMLEVBQUVoTSxHQUFHdU0sRUFBRXBELEdBQUUsQ0FBRSxNQUFNbkksRUFBRSxHQUFFZ0wsRUFBRWhNLEdBQUcsT0FBTzRrQixHQUFFNWpCLEdBQUUsU0FBVWdMLEVBQUVwSCxHQUFHMkgsR0FBNTVGLFNBQVdvRCxFQUFFM0QsR0FBRyxPQUFPLElBQUl5TCxHQUFFOUgsR0FBR0EsRUFBRWdjLElBQUkzZixHQUFHMkQsRUFBRTNELEVBQUUsQ0FBazNGbE0sQ0FBRXlNLEVBQUUzSCxFQUFFb0gsS0FBS3BILEdBQUd2RCxHQUFFTCxFQUFFZ0wsRUFBRTJELEVBQUUvSyxHQUFJLElBQUcsSUFBSTVFLEVBQUUsSUFBSWtxQixJQUFJbHBCLEdBQUdBLENBQUMsQ0FBdk4sQ0FBeU5BLEVBQUUsQ0FBQyxTQUFTLEdBQUUyTyxFQUFFM0QsR0FBRyxPQUFPQSxHQUFHLEtBQUssRUFBRSxPQUFPLElBQUk2bUIsSUFBSWxqQixHQUFHLEtBQUssRUFBRSxPQUFPMVAsTUFBTWs5RCxLQUFLeHRELEdBQUcsT0FBT0QsR0FBRUMsRUFBRSxDQUE0dE8sSUFBSSxHQUFFLEdBQUUsR0FBRSxvQkFBb0JsTyxRQUFRLGlCQUFpQkEsT0FBTyxLQUFLLEdBQUUsb0JBQW9Cb3hCLElBQUksR0FBRSxvQkFBb0IzSSxJQUFJLEdBQUUsb0JBQW9COHpDLFlBQU8sSUFBU0EsTUFBTUMsV0FBVyxvQkFBb0I5eUMsUUFBUSxHQUFFLEdBQUUxcEIsT0FBTyttQixJQUFJLG1CQUFtQixHQUFFLENBQUMsR0FBRyxrQkFBaUIsRUFBRyxJQUFHLEdBQUUsR0FBRS9tQixPQUFPK21CLElBQUksbUJBQW1CLHFCQUFxQixHQUFFLEdBQUUvbUIsT0FBTyttQixJQUFJLGVBQWUsaUJBQXkyRCxJQUF0MUQsb0JBQW9CL21CLFFBQVFBLE9BQU9HLFNBQXF6RCxHQUFHakMsT0FBT08sVUFBVTRDLGFBQVk0NkQsR0FBRyxvQkFBb0J2eUMsU0FBU0EsUUFBUTZ0QyxRQUFRN3RDLFFBQVE2dEMsYUFBUSxJQUFTcjVELE9BQU84bkIsc0JBQXNCLFNBQVM5WCxHQUFHLE9BQU9oUSxPQUFPNm5CLG9CQUFvQjdYLEdBQUdyRCxPQUFPM00sT0FBTzhuQixzQkFBc0I5WCxHQUFHLEVBQUVoUSxPQUFPNm5CLG9CQUFvQm0yQyxHQUFHaCtELE9BQU84NUQsMkJBQTJCLFNBQVM5cEQsR0FBRyxJQUFJM0QsRUFBRSxDQUFDLEVBQUUsT0FBTzB4RCxHQUFHL3RELEdBQUdnYixTQUFRLFNBQVUvbEIsR0FBR29ILEVBQUVwSCxHQUFHakYsT0FBTytuQix5QkFBeUIvWCxFQUFFL0ssRUFBRyxJQUFHb0gsQ0FBQyxFQUFFNnhELEdBQUcsQ0FBQyxFQUFFQyxHQUFHLENBQUNueUMsSUFBSSxTQUFTaGMsRUFBRTNELEdBQUcsR0FBR0EsSUFBSSxHQUFFLE9BQU8yRCxFQUFFLElBQUkzTyxFQUFFaVAsR0FBRU4sR0FBRyxJQUFJcEQsR0FBRXZMLEVBQUVnTCxHQUFHLE9BQU8sU0FBUzJELEVBQUUzRCxFQUFFcEgsR0FBRyxJQUFJNUQsRUFBRTRqQixFQUFFLEdBQUU1WSxFQUFFcEgsR0FBRyxPQUFPZ2dCLEVBQUUsVUFBVUEsRUFBRUEsRUFBRXprQixNQUFNLFFBQVFhLEVBQUU0akIsRUFBRStHLFdBQU0sSUFBUzNxQixPQUFFLEVBQU9BLEVBQUVtQixLQUFLd04sRUFBRUosUUFBRyxDQUFNLENBQWxILENBQW9ISSxFQUFFM08sRUFBRWdMLEdBQUcsSUFBSTRZLEVBQUU1akIsRUFBRWdMLEdBQUcsT0FBTzJELEVBQUV4RyxJQUFJdkUsR0FBRWdnQixHQUFHQSxFQUFFQSxJQUFJLEdBQUVqVixFQUFFL0ssRUFBRW9ILElBQUksR0FBRTJELEdBQUdBLEVBQUU4SCxFQUFFekwsR0FBRyxHQUFFMkQsRUFBRTVNLEVBQUVDLEVBQUU0aEIsRUFBRWpWLElBQUlpVixDQUFDLEVBQUVpWixJQUFJLFNBQVNsdUIsRUFBRTNELEdBQUcsT0FBT0EsS0FBS2lFLEdBQUVOLEVBQUUsRUFBRXFwRCxRQUFRLFNBQVNycEQsR0FBRyxPQUFPd2IsUUFBUTZ0QyxRQUFRL29ELEdBQUVOLEdBQUcsRUFBRXViLElBQUksU0FBU3ZiLEVBQUUzRCxFQUFFcEgsR0FBRyxJQUFJNUQsRUFBRSxHQUFFaVAsR0FBRU4sR0FBRzNELEdBQUcsR0FBRyxNQUFNaEwsT0FBRSxFQUFPQSxFQUFFa3FCLElBQUksT0FBT2xxQixFQUFFa3FCLElBQUkvb0IsS0FBS3dOLEVBQUVKLEVBQUUzSyxJQUFHLEVBQUcsSUFBSStLLEVBQUU5SyxFQUFFLENBQUMsSUFBSStmLEVBQUUsR0FBRTNVLEdBQUVOLEdBQUczRCxHQUFHeUwsRUFBRSxNQUFNbU4sT0FBRSxFQUFPQSxFQUFFLElBQUcsR0FBR25OLEdBQUdBLEVBQUU3UyxJQUFJQSxFQUFFLE9BQU8rSyxFQUFFOEgsRUFBRXpMLEdBQUdwSCxFQUFFK0ssRUFBRWlFLEVBQUU1SCxJQUFHLEdBQUcsRUFBRyxHQUFHaE0sR0FBRTRFLEVBQUVnZ0IsVUFBSyxJQUFTaGdCLEdBQUcySCxHQUFFb0QsRUFBRS9LLEVBQUVvSCxJQUFJLE9BQU0sRUFBRyxHQUFFMkQsR0FBRyxHQUFFQSxFQUFFLENBQUMsT0FBT0EsRUFBRThILEVBQUV6TCxLQUFLcEgsU0FBSSxJQUFTQSxHQUFHb0gsS0FBSzJELEVBQUU4SCxJQUFJdEMsT0FBT0MsTUFBTXhRLElBQUl1USxPQUFPQyxNQUFNekYsRUFBRThILEVBQUV6TCxNQUFNMkQsRUFBRThILEVBQUV6TCxHQUFHcEgsRUFBRStLLEVBQUVpRSxFQUFFNUgsSUFBRyxJQUFJLENBQUUsRUFBRW95RCxlQUFlLFNBQVN6dUQsRUFBRTNELEdBQUcsWUFBTyxJQUFTLEdBQUUyRCxFQUFFL0ssRUFBRW9ILElBQUlBLEtBQUsyRCxFQUFFL0ssR0FBRytLLEVBQUVpRSxFQUFFNUgsSUFBRyxFQUFHLEdBQUUyRCxHQUFHLEdBQUVBLFdBQVdBLEVBQUVpRSxFQUFFNUgsR0FBRzJELEVBQUU4SCxVQUFVOUgsRUFBRThILEVBQUV6TCxJQUFHLENBQUUsRUFBRTBiLHlCQUF5QixTQUFTL1gsRUFBRTNELEdBQUcsSUFBSXBILEVBQUVxTCxHQUFFTixHQUFHM08sRUFBRW1xQixRQUFRekQseUJBQXlCOWlCLEVBQUVvSCxHQUFHLE9BQU9oTCxFQUFFLENBQUNFLFVBQVMsRUFBR0QsYUFBYSxJQUFJME8sRUFBRWlWLEdBQUcsV0FBVzVZLEVBQUU0ZixXQUFXNXFCLEVBQUU0cUIsV0FBV3pyQixNQUFNeUUsRUFBRW9ILElBQUloTCxDQUFDLEVBQUVuQixlQUFlLFdBQVc4UCxHQUFFLEdBQUcsRUFBRWdZLGVBQWUsU0FBU2hZLEdBQUcsT0FBT2hRLE9BQU9nb0IsZUFBZWhZLEVBQUUvSyxFQUFFLEVBQUVzb0QsZUFBZSxXQUFXdjlDLEdBQUUsR0FBRyxHQUFHb3VELEdBQUcsQ0FBQyxFQUFFbjVDLEdBQUVrNUMsSUFBRyxTQUFVbnVELEVBQUUzRCxHQUFHK3hELEdBQUdwdUQsR0FBRyxXQUFXLE9BQU9yTixVQUFVLEdBQUdBLFVBQVUsR0FBRyxHQUFHMEosRUFBRTVKLE1BQU14QixLQUFLMEIsVUFBVSxDQUFFLElBQUd5N0QsR0FBR0ssZUFBZSxTQUFTcHlELEVBQUVwSCxHQUFHLE9BQXFFbTVELEdBQUc3eUMsSUFBSS9vQixLQUFLdkIsS0FBS29MLEVBQUVwSCxPQUFFLEVBQU8sRUFBRW01RCxHQUFHN3lDLElBQUksU0FBU2xmLEVBQUVwSCxFQUFFNUQsR0FBRyxPQUFtRjg4RCxHQUFHNXlDLElBQUkvb0IsS0FBS3ZCLEtBQUtvTCxFQUFFLEdBQUdwSCxFQUFFNUQsRUFBRWdMLEVBQUUsR0FBRyxFQUFFLElBQUlxeUQsR0FBRyxXQUFXLFNBQVNyOUQsRUFBRWdMLEdBQUcsSUFBSWhMLEVBQUVKLEtBQUtBLEtBQUt5TCxFQUFFLEdBQUV6TCxLQUFLeUgsR0FBRSxFQUFHekgsS0FBSzA5RCxRQUFRLFNBQVN0eUQsRUFBRTRZLEVBQUVuTixHQUFHLEdBQUcsbUJBQW1CekwsR0FBRyxtQkFBbUI0WSxFQUFFLENBQUMsSUFBSXJZLEVBQUVxWSxFQUFFQSxFQUFFNVksRUFBRSxJQUFJbE0sRUFBRWtCLEVBQUUsT0FBTyxTQUFTMk8sR0FBRyxJQUFJM0QsRUFBRXBMLFVBQUssSUFBUytPLElBQUlBLEVBQUVwRCxHQUFHLElBQUksSUFBSTNILEVBQUV0QyxVQUFVOUIsT0FBT1EsRUFBRWYsTUFBTTJFLEVBQUUsRUFBRUEsRUFBRSxFQUFFLEdBQUc2UyxFQUFFLEVBQUVBLEVBQUU3UyxFQUFFNlMsSUFBSXpXLEVBQUV5VyxFQUFFLEdBQUduVixVQUFVbVYsR0FBRyxPQUFPM1gsRUFBRXcrRCxRQUFRM3VELEdBQUUsU0FBVUEsR0FBRyxJQUFJL0ssRUFBRSxPQUFPQSxFQUFFZ2dCLEdBQUd6aUIsS0FBS0MsTUFBTXdDLEVBQUUsQ0FBQ29ILEVBQUUyRCxHQUFHckQsT0FBT3RMLEdBQUksR0FBRSxDQUFDLENBQUMsSUFBSUssRUFBRSxHQUFHLG1CQUFtQnVqQixHQUFHalYsR0FBRSxRQUFHLElBQVM4SCxHQUFHLG1CQUFtQkEsR0FBRzlILEdBQUUsR0FBRy9LLEdBQUVvSCxHQUFHLENBQUMsSUFBSWhNLEVBQUUsR0FBRWdCLEdBQUcwaEIsRUFBRSxHQUFFMWhCLEVBQUVnTCxPQUFFLEdBQVE1RyxHQUFFLEVBQUcsSUFBSS9ELEVBQUV1akIsRUFBRWxDLEdBQUd0ZCxHQUFFLENBQUUsQ0FBQyxRQUFRQSxFQUFFLEdBQUVwRixHQUFHLEdBQUVBLEVBQUUsQ0FBQyxNQUFNLG9CQUFvQnEvQixTQUFTaCtCLGFBQWFnK0IsUUFBUWgrQixFQUFFbytCLE1BQUssU0FBVTl2QixHQUFHLE9BQU8sR0FBRTNQLEVBQUV5WCxHQUFHLEdBQUU5SCxFQUFFM1AsRUFBRyxJQUFFLFNBQVUyUCxHQUFHLE1BQU0sR0FBRTNQLEdBQUcyUCxDQUFFLEtBQUksR0FBRTNQLEVBQUV5WCxHQUFHLEdBQUVwVyxFQUFFckIsR0FBRyxDQUFDLElBQUlnTSxHQUFHLGlCQUFpQkEsRUFBRSxDQUFDLFFBQUcsS0FBVTNLLEVBQUV1akIsRUFBRTVZLE1BQU0zSyxFQUFFMkssR0FBRzNLLElBQUksS0FBSUEsT0FBRSxHQUFRTCxFQUFFcUgsR0FBR3RILEdBQUVNLEdBQUUsR0FBSW9XLEVBQUUsQ0FBQyxJQUFJeEgsRUFBRSxHQUFHUCxFQUFFLEdBQUcsR0FBRSxXQUFXOUosRUFBRW9HLEVBQUUzSyxFQUFFNE8sRUFBRVAsR0FBRytILEVBQUV4SCxFQUFFUCxFQUFFLENBQUMsT0FBT3JPLENBQUMsQ0FBQ3NPLEdBQUUsR0FBRzNELEVBQUUsRUFBRXBMLEtBQUsyOUQsbUJBQW1CLFNBQVM1dUQsRUFBRTNELEdBQUcsR0FBRyxtQkFBbUIyRCxFQUFFLE9BQU8sU0FBUzNELEdBQUcsSUFBSSxJQUFJcEgsRUFBRXRDLFVBQVU5QixPQUFPb2tCLEVBQUUza0IsTUFBTTJFLEVBQUUsRUFBRUEsRUFBRSxFQUFFLEdBQUc2UyxFQUFFLEVBQUVBLEVBQUU3UyxFQUFFNlMsSUFBSW1OLEVBQUVuTixFQUFFLEdBQUduVixVQUFVbVYsR0FBRyxPQUFPelcsRUFBRXU5RCxtQkFBbUJ2eUQsR0FBRSxTQUFVQSxHQUFHLE9BQU8yRCxFQUFFdk4sV0FBTSxFQUFPLENBQUM0SixHQUFHTSxPQUFPc1ksR0FBSSxHQUFFLEVBQUUsSUFBSWhnQixFQUFFZ2dCLEVBQUVuTixFQUFFelcsRUFBRXM5RCxRQUFRM3VELEVBQUUzRCxHQUFFLFNBQVUyRCxFQUFFM0QsR0FBR3BILEVBQUUrSyxFQUFFaVYsRUFBRTVZLENBQUUsSUFBRyxNQUFNLG9CQUFvQnF6QixTQUFTNW5CLGFBQWE0bkIsUUFBUTVuQixFQUFFZ29CLE1BQUssU0FBVTl2QixHQUFHLE1BQU0sQ0FBQ0EsRUFBRS9LLEVBQUVnZ0IsRUFBRyxJQUFHLENBQUNuTixFQUFFN1MsRUFBRWdnQixFQUFFLEVBQUUsa0JBQWtCLE1BQU01WSxPQUFFLEVBQU9BLEVBQUV3eUQsYUFBYTU5RCxLQUFLNjlELGNBQWN6eUQsRUFBRXd5RCxZQUFZLGtCQUFrQixNQUFNeHlELE9BQUUsRUFBT0EsRUFBRTB5RCxhQUFhOTlELEtBQUsrOUQsY0FBYzN5RCxFQUFFMHlELFdBQVcsQ0FBQyxJQUFJOTVDLEVBQUU1akIsRUFBRWQsVUFBVSxPQUFPMGtCLEVBQUVnNkMsWUFBWSxTQUFTNTlELEdBQUc0RCxHQUFFNUQsSUFBSTJPLEdBQUUsR0FBRyxHQUFFM08sS0FBS0EsRUFBRSxHQUFFQSxJQUFJLElBQUk0akIsRUFBRSxHQUFFaGtCLE1BQU02VyxFQUFFLEdBQUU3VyxLQUFLSSxPQUFFLEdBQVEsT0FBT3lXLEVBQUUsSUFBR3hQLEdBQUUsRUFBRyxHQUFFMmMsR0FBR25OLENBQUMsRUFBRW1OLEVBQUVpNkMsWUFBWSxTQUFTN3lELEVBQUVwSCxHQUFHLElBQWlGZ2dCLEdBQTNFNVksR0FBR0EsRUFBRSxLQUEwRWpKLEVBQUUsT0FBTyxHQUFFNmhCLEVBQUVoZ0IsR0FBRyxRQUFFLEVBQU9nZ0IsRUFBRSxFQUFFQSxFQUFFKzVDLGNBQWMsU0FBU2h2RCxHQUFHL08sS0FBS3lILEVBQUVzSCxDQUFDLEVBQUVpVixFQUFFNjVDLGNBQWMsU0FBU3p5RCxHQUFHQSxJQUFJLElBQUcyRCxHQUFFLElBQUkvTyxLQUFLeUwsRUFBRUwsQ0FBQyxFQUFFNFksRUFBRWs2QyxhQUFhLFNBQVNudkQsRUFBRS9LLEdBQUcsSUFBSTVELEVBQUUsSUFBSUEsRUFBRTRELEVBQUVwRSxPQUFPLEVBQUVRLEdBQUcsRUFBRUEsSUFBSSxDQUFDLElBQUk0akIsRUFBRWhnQixFQUFFNUQsR0FBRyxHQUFHLElBQUk0akIsRUFBRWhCLEtBQUtwakIsUUFBUSxZQUFZb2tCLEVBQUUreUMsR0FBRyxDQUFDaG9ELEVBQUVpVixFQUFFemtCLE1BQU0sS0FBSyxDQUFDLENBQUNhLEdBQUcsSUFBSTRELEVBQUVBLEVBQUVwQyxNQUFNeEIsRUFBRSxJQUFJLElBQUl5VyxFQUFFLEdBQUUsV0FBVzJOLEVBQUUsT0FBTyxHQUFFelYsR0FBRzhILEVBQUU5SCxFQUFFL0ssR0FBR2hFLEtBQUswOUQsUUFBUTN1RCxHQUFFLFNBQVVBLEdBQUcsT0FBTzhILEVBQUU5SCxFQUFFL0ssRUFBRyxHQUFFLEVBQUU1RCxDQUFDLENBQWo3RCxHQUFxN0QrOUQsR0FBRyxJQUFJVixHQUFHN1EsR0FBR3VSLEdBQUdULFFBQVdTLEdBQUdSLG1CQUFtQmw4RCxLQUFLMDhELElBQU9BLEdBQUdKLGNBQWN0OEQsS0FBSzA4RCxJQUFPQSxHQUFHTixjQUFjcDhELEtBQUswOEQsSUFBT0EsR0FBR0QsYUFBYXo4RCxLQUFLMDhELElBQU9BLEdBQUdILFlBQVl2OEQsS0FBSzA4RCxJQUFPQSxHQUFHRixZQUFZeDhELEtBQUswOEQsSUFBSSxZQ0d4bGpCLFNBQVNDLEdBQXNCQyxHQXFCN0IsT0FsQmlCLFNBQW9CNUQsR0FDbkMsSUFBSTV2QixFQUFXNHZCLEVBQUs1dkIsU0FDaEJnaEIsRUFBVzRPLEVBQUs1TyxTQUNwQixPQUFPLFNBQVU5cUQsR0FDZixPQUFPLFNBQVU2YSxHQUdmLE1BQXNCLG1CQUFYQSxFQUVGQSxFQUFPaXZCLEVBQVVnaEIsRUFBVXdTLEdBSTdCdDlELEVBQUs2YSxFQUNkLENBQ0YsQ0FDRixDQUdGLENBRUEsSUFBSTBpRCxHQUFRRixLQUdaRSxHQUFNQyxrQkFBb0JILEdBQzFCLFlDL0JBLElBQ1FJLEdBREpDLElBQ0lELEdBQWdCLFNBQVVyK0QsRUFBR2hCLEdBSTdCLE9BSEFxL0QsR0FBZ0J6L0QsT0FBT3V0RCxnQkFDbEIsQ0FBRUMsVUFBVyxjQUFnQmx0RCxPQUFTLFNBQVVjLEVBQUdoQixHQUFLZ0IsRUFBRW9zRCxVQUFZcHRELENBQUcsR0FDMUUsU0FBVWdCLEVBQUdoQixHQUFLLElBQUssSUFBSWtRLEtBQUtsUSxFQUFPSixPQUFPTyxVQUFVZ0ksZUFBZS9GLEtBQUtwQyxFQUFHa1EsS0FBSWxQLEVBQUVrUCxHQUFLbFEsRUFBRWtRLEdBQUksRUFDN0ZtdkQsR0FBY3IrRCxFQUFHaEIsRUFDNUIsRUFDTyxTQUFVZ0IsRUFBR2hCLEdBQ2hCLEdBQWlCLG1CQUFOQSxHQUEwQixPQUFOQSxFQUMzQixNQUFNLElBQUl5QixVQUFVLHVCQUF5Qk0sT0FBTy9CLEdBQUssaUNBRTdELFNBQVN1L0QsSUFBTzErRCxLQUFLa0MsWUFBYy9CLENBQUcsQ0FEdENxK0QsR0FBY3IrRCxFQUFHaEIsR0FFakJnQixFQUFFYixVQUFrQixPQUFOSCxFQUFhSixPQUFPcUksT0FBT2pJLElBQU11L0QsRUFBR3AvRCxVQUFZSCxFQUFFRyxVQUFXLElBQUlvL0QsRUFDbkYsR0E2QkFDLEdBQWdELFNBQVVDLEVBQUlyQyxHQUM5RCxJQUFLLElBQUl2NEMsRUFBSSxFQUFHMDFCLEVBQUs2aUIsRUFBSzM4RCxPQUFRK1csRUFBSWlvRCxFQUFHaC9ELE9BQVFva0IsRUFBSTAxQixFQUFJMTFCLElBQUtyTixJQUMxRGlvRCxFQUFHam9ELEdBQUs0bEQsRUFBS3Y0QyxHQUNqQixPQUFPNDZDLENBQ1gsRUFDSUMsR0FBWTkvRCxPQUFPRSxlQUNuQjYvRCxHQUFhLy9ELE9BQU9DLGlCQUNwQisvRCxHQUFvQmhnRSxPQUFPODVELDBCQUMzQm1HLEdBQXNCamdFLE9BQU84bkIsc0JBQzdCbzRDLEdBQWVsZ0UsT0FBT08sVUFBVWdJLGVBQ2hDNDNELEdBQWVuZ0UsT0FBT08sVUFBVXlnRCxxQkFDaENvZixHQUFrQixTQUFVcGEsRUFBS3I5QixFQUFLbm9CLEdBQVMsT0FBT21vQixLQUFPcTlCLEVBQU04WixHQUFVOVosRUFBS3I5QixFQUFLLENBQUVzRCxZQUFZLEVBQU0zcUIsY0FBYyxFQUFNQyxVQUFVLEVBQU1mLE1BQU9BLElBQVd3bEQsRUFBSXI5QixHQUFPbm9CLENBQU8sRUFDbkw2L0QsR0FBaUIsU0FBVWxnRSxFQUFHQyxHQUM5QixJQUFLLElBQUkwckQsS0FBUTFyRCxJQUFNQSxFQUFJLENBQUMsR0FDcEI4L0QsR0FBYTE5RCxLQUFLcEMsRUFBRzByRCxJQUNyQnNVLEdBQWdCamdFLEVBQUcyckQsRUFBTTFyRCxFQUFFMHJELElBQ25DLEdBQUltVSxHQUNBLElBQUssSUFBSXpELEVBQUssRUFBR2p0RCxFQUFLMHdELEdBQW9CNy9ELEdBQUlvOEQsRUFBS2p0RCxFQUFHMU8sT0FBUTI3RCxJQUN0RDFRLEVBQU92OEMsRUFBR2l0RCxHQUNWMkQsR0FBYTM5RCxLQUFLcEMsRUFBRzByRCxJQUNyQnNVLEdBQWdCamdFLEVBQUcyckQsRUFBTTFyRCxFQUFFMHJELElBRXZDLE9BQU8zckQsQ0FDWCxFQUNJbWdFLEdBQWdCLFNBQVVuZ0UsRUFBR0MsR0FBSyxPQUFPMi9ELEdBQVc1L0QsRUFBRzYvRCxHQUFrQjUvRCxHQUFLLEVBa0Q5RW1nRSxHQUF3QyxvQkFBWDVnRSxRQUEwQkEsT0FBTzZnRSxxQ0FBdUM3Z0UsT0FBTzZnRSxxQ0FBdUMsV0FDbkosR0FBeUIsSUFBckI3OUQsVUFBVTlCLE9BRWQsTUFBNEIsaUJBQWpCOEIsVUFBVSxHQUNWZzZELEdBQ0pBLEdBQVFsNkQsTUFBTSxLQUFNRSxVQUMvQixFQUN5QyxvQkFBWGhELFFBQTBCQSxPQUFPOGdFLDhCQUErQjlnRSxPQUFPOGdFLDZCQTBDckcsSUFBSUMsR0FBaUMsU0FBVUMsR0FFM0MsU0FBU0QsSUFFTCxJQURBLElBQUluUyxFQUFPLEdBQ0ZpTyxFQUFLLEVBQUdBLEVBQUs3NUQsVUFBVTlCLE9BQVEyN0QsSUFDcENqTyxFQUFLaU8sR0FBTTc1RCxVQUFVNjVELEdBRXpCLElBQUlyTyxFQUFRd1MsRUFBT2wrRCxNQUFNeEIsS0FBTXN0RCxJQUFTdHRELEtBRXhDLE9BREFqQixPQUFPdXRELGVBQWVZLEVBQU91UyxFQUFnQm5nRSxXQUN0QzR0RCxDQUNYLENBeUJBLE9BbENBdVIsR0FBVWdCLEVBQWlCQyxHQVUzQjNnRSxPQUFPRSxlQUFld2dFLEVBQWlCNStELE9BQU84K0QsUUFBUyxDQUNuRDUwQyxJQUFLLFdBQ0QsT0FBTzAwQyxDQUNYLEVBQ0F6MEMsWUFBWSxFQUNaM3FCLGNBQWMsSUFFbEJvL0QsRUFBZ0JuZ0UsVUFBVW9NLE9BQVMsV0FFL0IsSUFEQSxJQUFJeXdELEVBQU0sR0FDRFosRUFBSyxFQUFHQSxFQUFLNzVELFVBQVU5QixPQUFRMjdELElBQ3BDWSxFQUFJWixHQUFNNzVELFVBQVU2NUQsR0FFeEIsT0FBT21FLEVBQU9wZ0UsVUFBVW9NLE9BQU9sSyxNQUFNeEIsS0FBTW04RCxFQUMvQyxFQUNBc0QsRUFBZ0JuZ0UsVUFBVXNnRSxRQUFVLFdBRWhDLElBREEsSUFBSXpELEVBQU0sR0FDRFosRUFBSyxFQUFHQSxFQUFLNzVELFVBQVU5QixPQUFRMjdELElBQ3BDWSxFQUFJWixHQUFNNzVELFVBQVU2NUQsR0FFeEIsT0FBbUIsSUFBZlksRUFBSXY4RCxRQUFnQlAsTUFBTWdDLFFBQVE4NkQsRUFBSSxJQUMvQixJQUFLc0QsRUFBZ0JoK0QsS0FBS0QsTUFBTWkrRCxFQUFpQmQsR0FBYyxNQUFDLEdBQVN4QyxFQUFJLEdBQUd6d0QsT0FBTzFMLFNBRTNGLElBQUt5L0QsRUFBZ0JoK0QsS0FBS0QsTUFBTWkrRCxFQUFpQmQsR0FBYyxNQUFDLEdBQVN4QyxFQUFJendELE9BQU8xTCxRQUMvRixFQUNPeS9ELENBQ1gsQ0FwQ29DLENBb0NsQ3BnRSxPQUNGLFNBQVN3Z0UsR0FBZ0JDLEdBQ3JCLE9BQU8sR0FBWUEsR0FBTyxHQUFnQkEsR0FBSyxXQUMvQyxJQUFLQSxDQUNULENBd1VBLFNBQVNDLEdBQWE5aUQsRUFBTStpRCxHQUN4QixTQUFTQyxJQUVMLElBREEsSUFBSTNTLEVBQU8sR0FDRmlPLEVBQUssRUFBR0EsRUFBSzc1RCxVQUFVOUIsT0FBUTI3RCxJQUNwQ2pPLEVBQUtpTyxHQUFNNzVELFVBQVU2NUQsR0FFekIsR0FBSXlFLEVBQWUsQ0FDZixJQUFJRSxFQUFXRixFQUFjeCtELFdBQU0sRUFBUThyRCxHQUMzQyxJQUFLNFMsRUFDRCxNQUFNLElBQUlwZ0UsTUFBTSwwQ0FFcEIsT0FBT3MvRCxHQUFlQSxHQUFlLENBQ2pDbmlELEtBQU1BLEVBQ05vb0IsUUFBUzY2QixFQUFTNzZCLFNBQ25CLFNBQVU2NkIsR0FBWSxDQUFFdHdDLEtBQU1zd0MsRUFBU3R3QyxPQUFTLFVBQVdzd0MsR0FBWSxDQUFFcjlELE1BQU9xOUQsRUFBU3I5RCxPQUNoRyxDQUNBLE1BQU8sQ0FBRW9hLEtBQU1BLEVBQU1vb0IsUUFBU2lvQixFQUFLLEdBQ3ZDLENBSUEsT0FIQTJTLEVBQWN0L0QsU0FBVyxXQUFjLE1BQU8sR0FBS3NjLENBQU0sRUFDekRnakQsRUFBY2hqRCxLQUFPQSxFQUNyQmdqRCxFQUFjdjNELE1BQVEsU0FBVWtULEdBQVUsT0FBT0EsRUFBT3FCLE9BQVNBLENBQU0sRUFDaEVnakQsQ0FDWCxDQWFBLFNBQVNFLEdBQThCQyxHQUNuQyxJQUVJQyxFQUZBQyxFQUFhLENBQUMsRUFDZEMsRUFBaUIsR0FFakJDLEVBQVUsQ0FDVkMsUUFBUyxTQUFVQyxFQUFxQi9HLEdBU3BDLElBQUkxOEMsRUFBc0MsaUJBQXhCeWpELEVBQW1DQSxFQUFzQkEsRUFBb0J6akQsS0FDL0YsR0FBSUEsS0FBUXFqRCxFQUNSLE1BQU0sSUFBSXhnRSxNQUFNLHVFQUdwQixPQURBd2dFLEVBQVdyakQsR0FBUTA4QyxFQUNaNkcsQ0FDWCxFQUNBRyxXQUFZLFNBQVVDLEVBQVNqSCxHQU8zQixPQURBNEcsRUFBZTU1RCxLQUFLLENBQUVpNkQsUUFBU0EsRUFBU2pILFFBQVNBLElBQzFDNkcsQ0FDWCxFQUNBSyxlQUFnQixTQUFVbEgsR0FPdEIsT0FEQTBHLEVBQXFCMUcsRUFDZDZHLENBQ1gsR0FHSixPQURBSixFQUFnQkksR0FDVCxDQUFDRixFQUFZQyxFQUFnQkYsRUFDeEMsQ0E0RUEsU0FBU1MsR0FBWWwxQyxHQUNqQixJQUFJMW9CLEVBQU8wb0IsRUFBUTFvQixLQUNuQixJQUFLQSxFQUNELE1BQU0sSUFBSXBELE1BQU0sK0NBT3BCLElBOENJaWhFLEVBOUNBckUsRUFBOEMsbUJBQXhCOXdDLEVBQVE4d0MsYUFBNkI5d0MsRUFBUTh3QyxhQUFlbUQsR0FBZ0JqMEMsRUFBUTh3QyxjQUMxRzNCLEVBQVdudkMsRUFBUW12QyxVQUFZLENBQUMsRUFDaENpRyxFQUFlamlFLE9BQU95SSxLQUFLdXpELEdBQzNCa0csRUFBMEIsQ0FBQyxFQUMzQkMsRUFBMEIsQ0FBQyxFQUMzQkMsRUFBaUIsQ0FBQyxFQWlCdEIsU0FBU0MsSUFTTCxJQUFJOXlELEVBQXNDLG1CQUExQnNkLEVBQVF5MUMsY0FBK0JsQixHQUE4QnYwQyxFQUFReTFDLGVBQWlCLENBQUN6MUMsRUFBUXkxQyxlQUFnQkMsRUFBS2h6RCxFQUFHLEdBQUkreUQsT0FBdUIsSUFBUEMsRUFBZ0IsQ0FBQyxFQUFJQSxFQUFJcFAsRUFBSzVqRCxFQUFHLEdBQUlpeUQsT0FBd0IsSUFBUHJPLEVBQWdCLEdBQUtBLEVBQUlxUCxFQUFLanpELEVBQUcsR0FBSSt4RCxPQUE0QixJQUFQa0IsT0FBZ0IsRUFBU0EsRUFDeFNDLEVBQW9CcEMsR0FBZUEsR0FBZSxDQUFDLEVBQUdpQyxHQUFnQkgsR0FDMUUsT0FqSFIsU0FBdUJ4RSxFQUFjK0UsRUFBc0JsQixFQUFnQkYsUUFDaEQsSUFBbkJFLElBQTZCQSxFQUFpQixJQVNsRCxJQUNJbUIsRUFEQXB6RCxFQUFrRDZ4RCxHQUE4QnNCLEdBQW9GbkIsRUFBYWh5RCxFQUFHLEdBQUlxekQsRUFBc0JyekQsRUFBRyxHQUFJc3pELEVBQTBCdHpELEVBQUcsR0FFdFAsR0FoQkosU0FBeUJwSSxHQUNyQixNQUFvQixtQkFBTkEsQ0FDbEIsQ0FjUTI3RCxDQUFnQm5GLEdBQ2hCZ0YsRUFBa0IsV0FBYyxPQUFPN0IsR0FBZ0JuRCxJQUFpQixNQUV2RSxDQUNELElBQUlvRixFQUF1QmpDLEdBQWdCbkQsR0FDM0NnRixFQUFrQixXQUFjLE9BQU9JLENBQXNCLENBQ2pFLENBQ0EsU0FBU25JLEVBQVF4bUQsRUFBT3lJLFFBQ04sSUFBVnpJLElBQW9CQSxFQUFRdXVELEtBQ2hDLElBQUlLLEVBQWVwRCxHQUFjLENBQzdCMkIsRUFBVzFrRCxFQUFPcUIsT0FDbkIwa0QsRUFBb0I1ZCxRQUFPLFNBQVV6MUMsR0FFcEMsT0FBT3N5RCxFQURPdHlELEVBQUdzeUQsU0FDRmhsRCxFQUNuQixJQUFHMmlDLEtBQUksU0FBVWp3QyxHQUViLE9BRGVBLEVBQUdxckQsT0FFdEIsS0FJQSxPQUhtRSxJQUEvRG9JLEVBQWFoZSxRQUFPLFNBQVVpZSxHQUFNLFFBQVNBLENBQUksSUFBR3BpRSxTQUNwRG1pRSxFQUFlLENBQUNILElBRWJHLEVBQWFsZixRQUFPLFNBQVVvZixFQUFlQyxHQUNoRCxHQUFJQSxFQUFhLENBRVQsSUFRSTVjLEVBVFIsR0FBSSxHQUFTMmMsR0FHVCxZQUFlLEtBRFgzYyxFQUFTNGMsRUFEREQsRUFDb0JybUQsSUFFckJxbUQsRUFFSjNjLEVBRU4sR0FBSyxHQUFhMmMsR0FXbkIsT0FBTyxHQUFpQkEsR0FBZSxTQUFVRSxHQUM3QyxPQUFPRCxFQUFZQyxFQUFPdm1ELEVBQzlCLElBWEEsUUFBZSxLQURYMHBDLEVBQVM0YyxFQUFZRCxFQUFlcm1ELElBQ2pCLENBQ25CLEdBQXNCLE9BQWxCcW1ELEVBQ0EsT0FBT0EsRUFFWCxNQUFNbmlFLE1BQU0sb0VBQ2hCLENBQ0EsT0FBT3dsRCxDQU9mLENBQ0EsT0FBTzJjLENBQ1gsR0FBRzl1RCxFQUNQLENBRUEsT0FEQXdtRCxFQUFRK0gsZ0JBQWtCQSxFQUNuQi9ILENBQ1gsQ0FpRGV5SSxDQUFjMUYsR0FBYyxTQUFVOEQsR0FDekMsSUFBSyxJQUFJOTRDLEtBQU84NUMsRUFDWmhCLEVBQVFDLFFBQVEvNEMsRUFBSzg1QyxFQUFrQjk1QyxJQUUzQyxJQUFLLElBQUk2ekMsRUFBSyxFQUFHOEcsRUFBbUI5QixFQUFnQmhGLEVBQUs4RyxFQUFpQnppRSxPQUFRMjdELElBQU0sQ0FDcEYsSUFBSXA2RCxFQUFJa2hFLEVBQWlCOUcsR0FDekJpRixFQUFRRyxXQUFXeC9ELEVBQUV5L0QsUUFBU3ovRCxFQUFFdzRELFFBQ3BDLENBQ0kwRyxHQUNBRyxFQUFRSyxlQUFlUixFQUUvQixHQUNKLENBRUEsT0F6Q0FXLEVBQWFqM0MsU0FBUSxTQUFVdTRDLEdBQzNCLElBRUlKLEVBQ0FLLEVBSEFDLEVBQTBCekgsRUFBU3VILEdBQ25DcmxELEVBQWdCL1osRUFwQlQsSUFvQmVvL0QsRUFHdEIsWUFBYUUsR0FDYk4sRUFBY00sRUFBd0I3SSxRQUN0QzRJLEVBQWtCQyxFQUF3QkMsU0FHMUNQLEVBQWNNLEVBRWxCdkIsRUFBd0JxQixHQUFlSixFQUN2Q2hCLEVBQXdCamtELEdBQVFpbEQsRUFDaENmLEVBQWVtQixHQUFlQyxFQUFrQnhDLEdBQWE5aUQsRUFBTXNsRCxHQUFtQnhDLEdBQWE5aUQsRUFDdkcsSUEwQk8sQ0FDSC9aLEtBQU1BLEVBQ055MkQsUUFBUyxTQUFVeG1ELEVBQU95SSxHQUd0QixPQUZLbWxELElBQ0RBLEVBQVdLLEtBQ1JMLEVBQVM1dEQsRUFBT3lJLEVBQzNCLEVBQ0E4bUQsUUFBU3ZCLEVBQ1RZLGFBQWNkLEVBQ2RTLGdCQUFpQixXQUdiLE9BRktYLElBQ0RBLEVBQVdLLEtBQ1JMLEVBQVNXLGlCQUNwQixFQUVSLENBaVZBLElBV0lpQixHQUFtQixDQUNuQixPQUNBLFVBQ0EsUUFDQSxRQUVBQyxHQUNBLFNBQXlCdjlCLEVBQVN6VixHQUM5QjV2QixLQUFLcWxDLFFBQVVBLEVBQ2ZybEMsS0FBSzR2QixLQUFPQSxDQUNoQixFQUdBaXpDLEdBQ0EsU0FBeUJ4OUIsRUFBU3pWLEdBQzlCNXZCLEtBQUtxbEMsUUFBVUEsRUFDZnJsQyxLQUFLNHZCLEtBQU9BLENBQ2hCLEVBR0FrekMsR0FBcUIsU0FBVXZqRSxHQUMvQixHQUFxQixpQkFBVkEsR0FBZ0MsT0FBVkEsRUFBZ0IsQ0FFN0MsSUFEQSxJQUFJd2pFLEVBQWMsQ0FBQyxFQUNWeEgsRUFBSyxFQUFHeUgsRUFBcUJMLEdBQWtCcEgsRUFBS3lILEVBQW1CcGpFLE9BQVEyN0QsSUFBTSxDQUMxRixJQUFJMEgsRUFBV0QsRUFBbUJ6SCxHQUNILGlCQUFwQmg4RCxFQUFNMGpFLEtBQ2JGLEVBQVlFLEdBQVkxakUsRUFBTTBqRSxHQUV0QyxDQUNBLE9BQU9GLENBQ1gsQ0FDQSxNQUFPLENBQUVqZ0UsUUFBUzVCLE9BQU8zQixHQUM3QixFQThKQSxTQUFTMmpFLEdBQWF0bkQsR0FDbEIsR0FBSUEsRUFBT2dVLE1BQVFoVSxFQUFPZ1UsS0FBS3V6QyxrQkFDM0IsTUFBTXZuRCxFQUFPeXBCLFFBRWpCLEdBQUl6cEIsRUFBTy9ZLE1BQ1AsTUFBTStZLEVBQU8vWSxNQUVqQixPQUFPK1ksRUFBT3lwQixPQUNsQixFQXJLdUIsV0FDbkIsU0FBUys5QixFQUFrQkMsRUFBWUMsRUFBZ0IxM0MsR0FDbkQsSUFBSTBxQyxFQUFZeUosR0FBYXNELEVBQWEsY0FBYyxTQUFVaCtCLEVBQVNrK0IsRUFBVzNVLEVBQUtoL0IsR0FBUSxNQUFPLENBQ3RHeVYsUUFBU0EsRUFDVHpWLEtBQU15dkMsR0FBY0QsR0FBZSxDQUFDLEVBQUd4dkMsR0FBUSxDQUFDLEdBQUksQ0FDaERnL0IsSUFBS0EsRUFDTDJVLFVBQVdBLEVBQ1hDLGNBQWUsY0FFbkIsSUFDQXorQixFQUFVZzdCLEdBQWFzRCxFQUFhLFlBQVksU0FBVUUsRUFBVzNVLEVBQUtoL0IsR0FBUSxNQUFPLENBQ3pGeVYsYUFBUyxFQUNUelYsS0FBTXl2QyxHQUFjRCxHQUFlLENBQUMsRUFBR3h2QyxHQUFRLENBQUMsR0FBSSxDQUNoRGcvQixJQUFLQSxFQUNMMlUsVUFBV0EsRUFDWEMsY0FBZSxZQUVuQixJQUNBaE4sRUFBV3VKLEdBQWFzRCxFQUFhLGFBQWEsU0FBVXhnRSxFQUFPMGdFLEVBQVczVSxFQUFLdnBCLEVBQVN6VixHQUFRLE1BQU8sQ0FDM0d5VixRQUFTQSxFQUNUeGlDLE9BQVErb0IsR0FBV0EsRUFBUTYzQyxnQkFBa0JYLElBQW9CamdFLEdBQVMsWUFDMUUrc0IsS0FBTXl2QyxHQUFjRCxHQUFlLENBQUMsRUFBR3h2QyxHQUFRLENBQUMsR0FBSSxDQUNoRGcvQixJQUFLQSxFQUNMMlUsVUFBV0EsRUFDWEosb0JBQXFCOTlCLEVBQ3JCbStCLGNBQWUsV0FDZkUsUUFBbUQsZ0JBQWhDLE1BQVQ3Z0UsT0FBZ0IsRUFBU0EsRUFBTUssTUFDekN5Z0UsVUFBcUQsb0JBQWhDLE1BQVQ5Z0UsT0FBZ0IsRUFBU0EsRUFBTUssUUFFL0MsSUFFQTBnRSxFQUFnQyxvQkFBcEJDLGdCQUFrQ0EsZ0JBQWlDLFdBQy9FLFNBQVNDLElBQ0w5akUsS0FBSytqRSxPQUFTLENBQ1ZMLFNBQVMsRUFDVHo1RCxpQkFBa0IsV0FDbEIsRUFDQTJvQixjQUFlLFdBQ1gsT0FBTyxDQUNYLEVBQ0FveEMsUUFBUyxXQUNULEVBQ0E1ekMsb0JBQXFCLFdBQ3JCLEVBQ0E2ekMsWUFBUSxFQUNSQyxlQUFnQixXQUNoQixFQUVSLENBU0EsT0FSQUosRUFBUXhrRSxVQUFVNmtFLE1BQVEsV0FPMUIsRUFDT0wsQ0FDWCxDQTNCa0YsR0FvSGxGLE9BQU8va0UsT0FBT29yQixRQXhGZCxTQUF1QnlrQyxHQUNuQixPQUFPLFNBQVUvakIsRUFBVWdoQixFQUFVdVksR0FDakMsSUFFSUMsRUFGQWQsR0FBd0IsTUFBWDMzQyxPQUFrQixFQUFTQSxFQUFRMDRDLGFBQWUxNEMsRUFBUTA0QyxZQUFZMVYsR0F4RzFGLFNBQVU1YixRQUNOLElBQVRBLElBQW1CQSxFQUFPLElBRzlCLElBRkEsSUFBSTM3QixFQUFLLEdBQ0wyTSxFQUFJZ3ZCLEVBQ0RodkIsS0FDSDNNLEdBTlUsbUVBTXdCLEdBQWhCeFgsS0FBSzJZLFNBQWdCLEdBRTNDLE9BQU9uQixDQUNYLENBZ0c4R2t0RCxHQUMxRkMsRUFBa0IsSUFBSVosRUFHMUIsU0FBU08sRUFBTUYsR0FDWEksRUFBY0osRUFDZE8sRUFBZ0JMLE9BQ3BCLENBQ0EsSUFBSU0sRUFBVyxXQUNYLE9BdG5DSUMsRUFzbkNXMWtFLEtBdG5DSDJrRSxFQXNuQ1MsS0F0bkNJdE8sRUFzbkNFLFdBQ3ZCLElBQUluVCxFQUFJZ1UsRUFBSTBOLEVBQWFDLEVBQWlCQyxFQUFnQkMsRUFDMUQsT0E1cUN3QixTQUFVNU8sRUFBU2hvRCxHQUMvRCxJQUFzRzFOLEVBQUc4TyxFQUFHdkwsRUFBR3JFLEVBQTNHb3ZELEVBQUksQ0FBRTJILE1BQU8sRUFBR0MsS0FBTSxXQUFhLEdBQVcsRUFBUDN5RCxFQUFFLEdBQVEsTUFBTUEsRUFBRSxHQUFJLE9BQU9BLEVBQUUsRUFBSSxFQUFHNHlELEtBQU0sR0FBSUMsSUFBSyxJQUNoRyxPQUFPbDNELEVBQUksQ0FBRW9CLEtBQU0rMUQsRUFBSyxHQUFJLE1BQVNBLEVBQUssR0FBSSxPQUFVQSxFQUFLLElBQXdCLG1CQUFYajJELFNBQTBCbEIsRUFBRWtCLE9BQU9HLFVBQVksV0FBYSxPQUFPaEIsSUFBTSxHQUFJTCxFQUN2SixTQUFTbTNELEVBQUsvbkQsR0FBSyxPQUFPLFNBQVV2SyxHQUFLLE9BQ3pDLFNBQWN1eUQsR0FDVixHQUFJdDJELEVBQUcsTUFBTSxJQUFJRyxVQUFVLG1DQUMzQixLQUFPbXVELE9BQ0gsR0FBSXR1RCxFQUFJLEVBQUc4TyxJQUFNdkwsRUFBWSxFQUFSK3lELEVBQUcsR0FBU3huRCxFQUFVLE9BQUl3bkQsRUFBRyxHQUFLeG5ELEVBQVMsU0FBT3ZMLEVBQUl1TCxFQUFVLFNBQU12TCxFQUFFekMsS0FBS2dPLEdBQUksR0FBS0EsRUFBRXhPLFNBQVdpRCxFQUFJQSxFQUFFekMsS0FBS2dPLEVBQUd3bkQsRUFBRyxLQUFLdjJELEtBQU0sT0FBT3dELEVBRTNKLE9BREl1TCxFQUFJLEVBQUd2TCxJQUFHK3lELEVBQUssQ0FBUyxFQUFSQSxFQUFHLEdBQVEveUQsRUFBRXpFLFFBQ3pCdzNELEVBQUcsSUFDUCxLQUFLLEVBQUcsS0FBSyxFQUFHL3lELEVBQUkreUQsRUFBSSxNQUN4QixLQUFLLEVBQWMsT0FBWGhJLEVBQUUySCxRQUFnQixDQUFFbjNELE1BQU93M0QsRUFBRyxHQUFJdjJELE1BQU0sR0FDaEQsS0FBSyxFQUFHdXVELEVBQUUySCxRQUFTbm5ELEVBQUl3bkQsRUFBRyxHQUFJQSxFQUFLLENBQUMsR0FBSSxTQUN4QyxLQUFLLEVBQUdBLEVBQUtoSSxFQUFFOEgsSUFBSWhtRCxNQUFPaytDLEVBQUU2SCxLQUFLL2xELE1BQU8sU0FDeEMsUUFDSSxNQUFrQjdNLEdBQVpBLEVBQUkrcUQsRUFBRTZILE1BQVloM0QsT0FBUyxHQUFLb0UsRUFBRUEsRUFBRXBFLE9BQVMsS0FBa0IsSUFBVm0zRCxFQUFHLElBQXNCLElBQVZBLEVBQUcsSUFBVyxDQUFFaEksRUFBSSxFQUFHLFFBQVUsQ0FDM0csR0FBYyxJQUFWZ0ksRUFBRyxNQUFjL3lELEdBQU0reUQsRUFBRyxHQUFLL3lELEVBQUUsSUFBTSt5RCxFQUFHLEdBQUsveUQsRUFBRSxJQUFNLENBQUUrcUQsRUFBRTJILE1BQVFLLEVBQUcsR0FBSSxLQUFPLENBQ3JGLEdBQWMsSUFBVkEsRUFBRyxJQUFZaEksRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJLENBQUUrcUQsRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJQSxFQUFJK3lELEVBQUksS0FBTyxDQUNwRSxHQUFJL3lELEdBQUsrcUQsRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJLENBQUUrcUQsRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJK3FELEVBQUU4SCxJQUFJbHdELEtBQUtvd0QsR0FBSyxLQUFPLENBQzlEL3lELEVBQUUsSUFBSStxRCxFQUFFOEgsSUFBSWhtRCxNQUNoQmsrQyxFQUFFNkgsS0FBSy9sRCxNQUFPLFNBRXRCa21ELEVBQUs1b0QsRUFBSzVNLEtBQUs0MEQsRUFBU3BILEVBQzVCLENBQUUsTUFBTzN1RCxHQUFLMjJELEVBQUssQ0FBQyxFQUFHMzJELEdBQUltUCxFQUFJLENBQUcsQ0FBRSxRQUFVOU8sRUFBSXVELEVBQUksQ0FBRyxDQUN6RCxHQUFZLEVBQVIreUQsRUFBRyxHQUFRLE1BQU1BLEVBQUcsR0FBSSxNQUFPLENBQUV4M0QsTUFBT3czRCxFQUFHLEdBQUtBLEVBQUcsUUFBSyxFQUFRdjJELE1BQU0sRUFDOUUsQ0F0QmdEKzFELENBQUssQ0FBQ3huRCxFQUFHdkssR0FBSyxDQUFHLENBdUJyRSxDQWtwQytCLENBQVl4RSxNQUFNLFNBQVVzTyxHQUMvQixPQUFRQSxFQUFHb29ELE9BQ1AsS0FBSyxFQUdELE9BRkFwb0QsRUFBR3NvRCxLQUFLandELEtBQUssQ0FBQyxFQUFHLEVBQUcsQ0FBRSxJQTRGckMsUUFERHBILEVBMUZnQnNsRSxFQUF5RSxPQUF0RDNoQixFQUFnQixNQUFYdDNCLE9BQWtCLEVBQVNBLEVBQVErM0MsZ0JBQXFCLEVBQVN6Z0IsRUFBRzNoRCxLQUFLcXFCLEVBQVNnakMsRUFBSyxDQUFFL0MsU0FBVUEsRUFBVXVZLE1BQU9BLE1BMkZsSSxpQkFBVjdrRSxHQUE0QyxtQkFBZkEsRUFBTXMvQixLQTFGTSxDQUFDLEVBQWEsR0FDaEQsQ0FBQyxFQUFhZ21DLEdBQ3pCLEtBQUssRUFDREEsRUFBa0J2MkQsRUFBR3FvRCxPQUNyQnJvRCxFQUFHb29ELE1BQVEsRUFDZixLQUFLLEVBQ0QsSUFBd0IsSUFBcEJtTyxHQUE2QkwsRUFBZ0JULE9BQU9MLFFBQ3BELEtBQU0sQ0FDRnhnRSxLQUFNLGlCQUNOSixRQUFTLHNEQVNqQixPQUxBZ2lFLEVBQWlCLElBQUlybUMsU0FBUSxTQUFVc3dCLEVBQUd0SCxHQUFVLE9BQU8rYyxFQUFnQlQsT0FBTzk1RCxpQkFBaUIsU0FBUyxXQUFjLE9BQU93OUMsRUFBTyxDQUNwSXZrRCxLQUFNLGFBQ05KLFFBQVN1aEUsR0FBZSxXQUN4QixHQUFJLElBQ1J4NUIsRUFBUzlGLEVBQVF3K0IsRUFBVzNVLEVBQWlFLE9BQTNEc0ksRUFBZ0IsTUFBWHRyQyxPQUFrQixFQUFTQSxFQUFRbzVDLHFCQUEwQixFQUFTOU4sRUFBRzMxRCxLQUFLcXFCLEVBQVMsQ0FBRTIzQyxVQUFXQSxFQUFXM1UsSUFBS0EsR0FBTyxDQUFFL0MsU0FBVUEsRUFBVXVZLE1BQU9BLE1BQ3hMLENBQUMsRUFBYTNsQyxRQUFRd21DLEtBQUssQ0FDMUJILEVBQ0FybUMsUUFBUUcsUUFBUTBrQyxFQUFlMVUsRUFBSyxDQUNoQy9qQixTQUFVQSxFQUNWZ2hCLFNBQVVBLEVBQ1Z1WSxNQUFPQSxFQUNQYixVQUFXQSxFQUNYUSxPQUFRUyxFQUFnQlQsT0FDeEJJLE1BQU9BLEVBQ1BlLGdCQUFpQixTQUFVM2xFLEVBQU9xd0IsR0FDOUIsT0FBTyxJQUFJZ3pDLEdBQWdCcmpFLEVBQU9xd0IsRUFDdEMsRUFDQXUxQyxpQkFBa0IsU0FBVTVsRSxFQUFPcXdCLEdBQy9CLE9BQU8sSUFBSWl6QyxHQUFnQnRqRSxFQUFPcXdCLEVBQ3RDLEtBQ0FpUCxNQUFLLFNBQVV5bUIsR0FDZixHQUFJQSxhQUFrQnNkLEdBQ2xCLE1BQU10ZCxFQUVWLE9BQUlBLGFBQWtCdWQsR0FDWHZNLEVBQVVoUixFQUFPamdCLFFBQVNrK0IsRUFBVzNVLEVBQUt0SixFQUFPMTFCLE1BRXJEMG1DLEVBQVVoUixFQUFRaWUsRUFBVzNVLEVBQ3hDLE9BRVosS0FBSyxFQUVELE9BREFnVyxFQUFjdDJELEVBQUdxb0QsT0FDVixDQUFDLEVBQWEsR0FDekIsS0FBSyxFQUdELE9BRkFvTyxFQUFRejJELEVBQUdxb0QsT0FDWGlPLEVBQWNHLGFBQWlCbkMsR0FBa0JwTSxFQUFTLEtBQU0rTSxFQUFXM1UsRUFBS21XLEVBQU0xL0IsUUFBUzAvQixFQUFNbjFDLE1BQVE0bUMsRUFBU3VPLEVBQU94QixFQUFXM1UsR0FDakksQ0FBQyxFQUFhLEdBQ3pCLEtBQUssRUFLRCxPQUplaGpDLElBQVlBLEVBQVF3NUMsNEJBQThCNU8sRUFBUzl0RCxNQUFNazhELElBQWdCQSxFQUFZaDFDLEtBQUsrekMsV0FFN0c5NEIsRUFBUys1QixHQUVOLENBQUMsRUFBY0EsR0FrQzFELElBQW9CcmxFLENBaENJLEdBQ0osRUF0ckNULElBQUlrL0IsU0FBUSxTQUFVRyxFQUFTNm9CLEdBQ2xDLElBQUk2TyxFQUFZLFNBQVUvMkQsR0FDdEIsSUFDSWczRCxFQUFLRixFQUFVdDFELEtBQUt4QixHQUN4QixDQUNBLE1BQU9hLEdBQ0hxbkQsRUFBT3JuRCxFQUNYLENBQ0osRUFDSW8yRCxFQUFXLFNBQVVqM0QsR0FDckIsSUFDSWczRCxFQUFLRixFQUFVZ1AsTUFBTTlsRSxHQUN6QixDQUNBLE1BQU9hLEdBQ0hxbkQsRUFBT3JuRCxFQUNYLENBQ0osRUFDSW0yRCxFQUFPLFNBQVVyd0QsR0FBSyxPQUFPQSxFQUFFMUYsS0FBT28rQixFQUFRMTRCLEVBQUUzRyxPQUFTay9CLFFBQVFHLFFBQVExNEIsRUFBRTNHLE9BQU9zL0IsS0FBS3kzQixFQUFXRSxFQUFXLEVBQ2pIRCxHQUFNRixFQUFZQSxFQUFVNzBELE1BQU1rakUsRUFBUUMsSUFBYzVqRSxPQUM1RCxJQXBCVSxJQUFVMmpFLEVBQVFDLEVBQWF0TyxDQXdyQzdCLENBbkVlLEdBb0VmLE9BQU90M0QsT0FBT29yQixPQUFPczZDLEVBQVUsQ0FDM0JOLE1BQU9BLEVBQ1BaLFVBQVdBLEVBQ1gzVSxJQUFLQSxFQUNMMFcsT0FBUSxXQUNKLE9BQU9iLEVBQVM1bEMsS0FBS3FrQyxHQUN6QixHQUVSLENBQ0osR0FDb0MsQ0FDaENuK0IsUUFBU0EsRUFDVHl4QixTQUFVQSxFQUNWRixVQUFXQSxFQUNYK00sV0FBWUEsR0FFcEIsQ0FDQUQsRUFBa0JtQyxVQUFZLFdBQWMsT0FBT25DLENBQW1CLENBRXpFLENBNUpzQixHQWthVnJrRSxPQUFPb3JCLE9BNUNwQixJQThDSXE3QyxHQUFNLHFCQTJJUXpGLEdBQWF5RixHQUFNLFFBQ2J6RixHQUFheUYsR0FBTSxjQUN0QnpGLEdBQWF5RixHQUFNLFdBNEtXLG1CQUFuQjdtQyxnQkFBZ0NBLGVBQWVsOUIsS0FBdUIsb0JBQVgvQyxPQUF5QkEsWUFBMkIsSUFBWCxvQkFBQWlCLEVBQXlCLG9CQUFBQSxFQUFTRixZQVExSSxvQkFBWGYsUUFBMEJBLE9BQU8rbUUsdUJBQXdCL21FLE9BQU8rbUUsc0JGeDFEbW5JLFdBQWEsU0FBU3poRSxFQUFFK0ssRUFBRTNELEdBQUcsSUFBSXBILEVBQUU4ZCxFQUFFL1MsR0FBRyxPQUFPL0ssRUFBRUEsRUFBRWduQixXQUFXNWYsRUFBRTBXLEVBQUUvUyxHQUFHL0ssRUFBRSxDQUFDM0QsY0FBYSxFQUFHMnFCLFdBQVc1ZixFQUFFMmYsSUFBSSxXQUFXLElBQUkzZixFQUFFcEwsS0FBSyxJQUFHLE9BQWdEazlELEdBQUdueUMsSUFBSTNmLEVBQUUyRCxFQUFFLEVBQUV1YixJQUFJLFNBQVNsZixHQUFHLElBQUlwSCxFQUFFaEUsS0FBSyxJQUE2Q2s5RCxHQUFHNXlDLElBQUl0bUIsRUFBRStLLEVBQUUzRCxFQUFFLEdBQUdwSCxDQUFDLENBQUMsU0FBUzVELEVBQUUyTyxHQUFHLElBQUksSUFBSTNELEVBQUUyRCxFQUFFblAsT0FBTyxFQUFFd0wsR0FBRyxFQUFFQSxJQUFJLENBQUMsSUFBSXBILEVBQUUrSyxFQUFFM0QsR0FBRyxJQUFHLElBQUlwSCxFQUFFQyxFQUFFLE9BQU9ELEVBQUVnZ0IsR0FBRyxLQUFLLEVBQUU5a0IsRUFBRThFLElBQUksR0FBRUEsR0FBRyxNQUFNLEtBQUssRUFBRTZTLEVBQUU3UyxJQUFJLEdBQUVBLEdBQUcsQ0FBQyxDQUFDLFNBQVM2UyxFQUFFOUgsR0FBRyxJQUFJLElBQUkzRCxFQUFFMkQsRUFBRS9LLEVBQUVBLEVBQUUrSyxFQUFFSixFQUFFdk8sRUFBRTA4RCxHQUFHOTRELEdBQUdnZ0IsRUFBRTVqQixFQUFFUixPQUFPLEVBQUVva0IsR0FBRyxFQUFFQSxJQUFJLENBQUMsSUFBSW5OLEVBQUV6VyxFQUFFNGpCLEdBQUcsR0FBR25OLElBQUksR0FBRSxDQUFDLElBQUkzWCxFQUFFa00sRUFBRXlMLEdBQUcsUUFBRyxJQUFTM1gsSUFBSXlNLEdBQUVQLEVBQUV5TCxHQUFHLE9BQU0sRUFBRyxJQUFJcFcsRUFBRXVELEVBQUU2UyxHQUFHaUwsRUFBRXJoQixHQUFHQSxFQUFFLElBQUcsR0FBR3FoQixFQUFFQSxFQUFFOWQsSUFBSTlFLEdBQUdFLEdBQUVxQixFQUFFdkIsR0FBRyxPQUFNLENBQUUsQ0FBQyxDQUFDLElBQUlzRixJQUFJNEcsRUFBRSxJQUFHLE9BQU9oTCxFQUFFUixTQUFTazlELEdBQUcxeEQsR0FBR3hMLFFBQVE0RSxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVN0RixFQUFFNlAsR0FBRyxJQUFJM0QsRUFBRTJELEVBQUVKLEVBQUUsR0FBR3ZELEVBQUV4TCxTQUFTbVAsRUFBRS9LLEVBQUVwRSxPQUFPLE9BQU0sRUFBRyxJQUFJb0UsRUFBRWpGLE9BQU8rbkIseUJBQXlCMWIsRUFBRUEsRUFBRXhMLE9BQU8sR0FBRyxHQUFHb0UsSUFBSUEsRUFBRSttQixJQUFJLE9BQU0sRUFBRyxJQUFJLElBQUkzcUIsRUFBRSxFQUFFQSxFQUFFZ0wsRUFBRXhMLE9BQU9RLElBQUksSUFBSWdMLEVBQUU5RCxlQUFlbEgsR0FBRyxPQUFNLEVBQUcsT0FBTSxDQUFFLENBQThDLElBQUkwaEIsRUFBRSxDQUFDLEdBQWxoRyxTQUFXL1MsRUFBRTNELEdBQUc2eEQsR0FBR2x1RCxLQUFLa3VELEdBQUdsdUQsR0FBRzNELEVBQUUsQ0FBby9GakssQ0FBRSxNQUFNLENBQUNrRCxFQUFFLFNBQVMwSyxFQUFFM0QsR0FBRyxJQUFJaEwsRUFBRWYsTUFBTWdDLFFBQVEwTixHQUFHaVYsRUFBRSxTQUFTalYsRUFBRTNELEdBQUcsR0FBRzJELEVBQUUsQ0FBQyxJQUFJLElBQUkzTyxFQUFFZixNQUFNK0wsRUFBRXhMLFFBQVFva0IsRUFBRSxFQUFFQSxFQUFFNVksRUFBRXhMLE9BQU9va0IsSUFBSWpsQixPQUFPRSxlQUFlbUIsRUFBRSxHQUFHNGpCLEVBQUVoZ0IsRUFBRWdnQixHQUFFLElBQUssT0FBTzVqQixDQUFDLENBQUMsSUFBSXlXLEVBQUVrbUQsR0FBRzN4RCxVQUFVeUwsRUFBRSxJQUFHLElBQUksSUFBSWxMLEVBQUVteEQsR0FBR2ptRCxHQUFHM1gsRUFBRSxFQUFFQSxFQUFFeU0sRUFBRS9MLE9BQU9WLElBQUksQ0FBQyxJQUFJdUIsRUFBRWtMLEVBQUV6TSxHQUFHMlgsRUFBRXBXLEdBQUd1RCxFQUFFdkQsRUFBRXNPLEtBQUs4SCxFQUFFcFcsR0FBR3VxQixXQUFXLENBQUMsT0FBT2pzQixPQUFPcUksT0FBT3JJLE9BQU9nb0IsZUFBZTNiLEdBQUd5TCxFQUFFLENBQXRRLENBQXdRelcsRUFBRTJPLEdBQUc4SCxFQUFFLENBQUNtTixFQUFFNWpCLEVBQUUsRUFBRSxFQUFFK0IsRUFBRWlKLEVBQUVBLEVBQUVqSixFQUFFLEtBQUk4QixHQUFFLEVBQUdzRSxHQUFFLEVBQUd5SyxFQUFFLENBQUMsRUFBRWxFLEVBQUUxRCxFQUFFcEgsRUFBSTJLLEVBQUVxVixFQUFFbk4sRUFBRSxLQUFLbFgsR0FBRSxFQUFHMEgsR0FBRSxHQUFJLE9BQU90SSxPQUFPRSxlQUFlK2tCLEVBQUUsR0FBRSxDQUFDemtCLE1BQU1zWCxFQUFFdlcsVUFBUyxJQUFLMGpCLENBQUMsRUFBRXJYLEVBQUUsU0FBU29DLEVBQUUvSyxFQUFFNlMsR0FBR0EsRUFBRSxHQUFFN1MsSUFBSUEsRUFBRSxJQUFHN0IsSUFBSTRNLEdBQUczTyxFQUFFMk8sRUFBRU0sSUFBSU4sRUFBRXBELEdBQUcsU0FBU29ELEVBQUUzRCxHQUFHLEdBQUdBLEdBQUcsaUJBQWlCQSxFQUFFLENBQUMsSUFBSXBILEVBQUVvSCxFQUFFLElBQUcsR0FBR3BILEVBQUUsQ0FBQyxJQUFJNUQsRUFBRTRELEVBQUVBLEVBQUU2UyxFQUFFN1MsRUFBRTJLLEVBQUVsTyxFQUFFdUQsRUFBRWdQLEVBQUU1VCxFQUFFNEUsRUFBRWdnQixFQUFFLEdBQUcsSUFBSTVrQixFQUFFNGtCLEdBQUVuTixHQUFFLFNBQVV6TCxHQUFHQSxJQUFJLFVBQUksSUFBU2hMLEVBQUVnTCxJQUFJTyxHQUFFdkwsRUFBRWdMLEdBQUczSyxFQUFFMkssSUFBSTJELEVBQUU4SCxFQUFFekwsS0FBSzNLLEVBQUUySyxJQUFHLEVBQUcsR0FBRXBILElBQUssSUFBR2dnQixHQUFFNWpCLEdBQUUsU0FBVTJPLFFBQUcsSUFBUzhILEVBQUU5SCxJQUFJcEQsR0FBRWtMLEVBQUU5SCxLQUFLdE8sRUFBRXNPLElBQUcsRUFBRyxHQUFFL0ssR0FBSSxTQUFRLEdBQUcsSUFBSTVFLEVBQUUsQ0FBQyxHQUFHRixFQUFFOEUsS0FBSyxHQUFFQSxHQUFHdkQsRUFBRWIsUUFBTyxHQUFJaVgsRUFBRWpYLE9BQU9RLEVBQUVSLE9BQU8sSUFBSSxJQUFJa2lCLEVBQUVqTCxFQUFFalgsT0FBT2tpQixFQUFFMWhCLEVBQUVSLE9BQU9raUIsSUFBSXJoQixFQUFFcWhCLElBQUcsT0FBUSxJQUFJLElBQUl0ZCxFQUFFcEUsRUFBRVIsT0FBTzRFLEVBQUVxUyxFQUFFalgsT0FBTzRFLElBQUkvRCxFQUFFK0QsSUFBRyxFQUFHLElBQUksSUFBSTZLLEVBQUV4UCxLQUFLNGtCLElBQUk1TixFQUFFalgsT0FBT1EsRUFBRVIsUUFBUWtQLEVBQUUsRUFBRUEsRUFBRU8sRUFBRVAsSUFBSStILEVBQUV2UCxlQUFld0gsS0FBS3JPLEVBQUVxTyxJQUFHLFFBQUksSUFBU3JPLEVBQUVxTyxJQUFJQyxFQUFFOEgsRUFBRS9ILEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBeGUsQ0FBMGVDLEVBQUVNLEVBQUUsSUFBSWpQLEVBQUUyTyxFQUFFTSxHQUFHLEVBQUU3RSxFQUFFLFNBQVN1RSxHQUFHLE9BQU8sSUFBSUEsRUFBRWlWLEVBQUVuTixFQUFFOUgsR0FBRzdQLEVBQUU2UCxFQUFFLEdBQUcsQ0U0NERybE0sbUNDNTRESTIyRCxHQUFlLFNBQXNCeGlFLEdBQ3ZDLE1BQU8sZ0JBQWtCQSxDQUMzQixFQUVJeWlFLEdBRUpELEdBQWEsa0JBQ1RFLEdBRUpGLEdBQWEsZUFDVCxHQUVKQSxHQUFhLE1BQ1RHLEdBRUpILEdBQWEsU0FDVEksR0FFSkosR0FBYSxhQUNULEdBRUpBLEdBQWEsZUFDVEssR0FFSkwsR0FBYSxxQkFDVCxHQUVKQSxHQUFhLFFBQ1RNLEdBRUpOLEdBQWEsZUFDVE8sR0FFSlAsR0FBYSxhQUNUUSxHQUVKUixHQUFhLFlDcENFLFNBQVMsS0FZdEIsT0FYQSxHQUFXM21FLE9BQU9vckIsT0FBU3ByQixPQUFPb3JCLE9BQU8xb0IsT0FBUyxTQUFVcWYsR0FDMUQsSUFBSyxJQUFJa0QsRUFBSSxFQUFHQSxFQUFJdGlCLFVBQVU5QixPQUFRb2tCLElBQUssQ0FDekMsSUFBSTliLEVBQVN4RyxVQUFVc2lCLEdBQ3ZCLElBQUssSUFBSTBELEtBQU94ZixFQUNWbkosT0FBT08sVUFBVWdJLGVBQWUvRixLQUFLMkcsRUFBUXdmLEtBQy9DNUcsRUFBTzRHLEdBQU94ZixFQUFPd2YsR0FHM0IsQ0FDQSxPQUFPNUcsQ0FDVCxFQUNPLEdBQVN0ZixNQUFNeEIsS0FBTTBCLFVBQzlCLENDWEEsSUFBSXlrRSxHQUFRLFNBQWUzaEUsR0FDekIsT0FBT0EsT0FDVCxFQUNJLEdBQVcsU0FBa0JBLEdBQy9CLE9BQU9BLE9BQ1QsRUFDSSxHQUFPLFNBQWMvRCxHQUN2QixNQUFvQixtQkFBTkEsQ0FDaEIsRUFJSSxHQUFTLFNBQWdCcWhCLEdBQzNCLE1BQW9CLGlCQUFOQSxDQUNoQixFQUNJLEdBQVF6aUIsTUFBTWdDLFFBSWQsR0FBVSxTQUFpQmdPLEdBQzdCLE9BQU9BLEdBQUssR0FBS0EsRUFBRXd2QixLQUNyQixFQUNJNzlCLEdBQVcsU0FBa0JvbEUsR0FDL0IsT0FBT0EsR0FBTSxHQUFLQSxFQUFHcmxFLE9BQVMsR0FBS3FsRSxFQUFHZixNQUN4QyxFQWdCSWdCLEdBQVUsU0FBU0EsRUFBUUMsR0FDN0IsT0FBT0EsSUFBUSxHQUFPQSxJQUFRQyxHQUFPRCxJQUFRLEdBQUtBLElBQVEsR0FBTUEsSUFBUUEsRUFBSUUsTUFBTUgsR0FDcEYsRUFDSSxHQUFVLFNBQWlCbmhDLEdBQzdCLE9BQU9BLEdBQU0sR0FBS0EsRUFBR3VoQyxPQUFTLEdBQUt2aEMsRUFBR2prQixNQUN4QyxFQUNJeWxELEdBQWlCLFNBQXdCam1FLEdBQzNDLE9BQU8sR0FBS0EsSUFBTUEsRUFBRTZHLGVBQWUsV0FDckMsRUFDSWkvRCxHQUFTLFNBQWdCL04sR0FDM0IsT0FBT3BKLFFBQVFvSixJQUEwQixtQkFBWDMzRCxRQUF5QjIzRCxFQUFJdDJELGNBQWdCckIsUUFBVTIzRCxJQUFRMzNELE9BQU92QixTQUN0RyxFQUNJcW5FLEdBQVksU0FBbUJ6aEMsR0FDakMsT0FBTyxHQUFRQSxJQUFPQSxFQUFHNGdDLEdBQzNCLEVDbkRJYyxHQUFRLFNBQWVwaUUsR0FDekIsT0FBTyxXQUNMLE9BQU9BLENBQ1QsQ0FDRixFQUNJcWlFLEdBRUpELElBQU0sR0FFRixHQUFPLFdBQWlCLEVBV3hCRSxHQUFXLFNBQWtCdGlFLEdBQy9CLE9BQU9BLENBQ1QsRUFDa0MsbUJBQVgzRCxRQUNnQkEsT0FBT2ttRSxlQUFnQmxtRSxPQUFPa21FLGNBTXJFLElBQUlDLEdBQW9CLFNBQTJCbG1ELEVBQVE1WSxHQUN6RCxHQUFTNFksRUFBUTVZLEdBRWJuSixPQUFPOG5CLHVCQUNUOW5CLE9BQU84bkIsc0JBQXNCM2UsR0FBUTZoQixTQUFRLFNBQVVqSSxHQUNyRGhCLEVBQU9nQixHQUFLNVosRUFBTzRaLEVBQ3JCLEdBRUosRUFNQSxTQUFTbWxELEdBQU9DLEVBQU9waUIsR0FDckIsSUFBSWpkLEVBQVFxL0IsRUFBTWxsRSxRQUFROGlELEdBRXRCamQsR0FBUyxHQUNYcS9CLEVBQU14c0IsT0FBTzdTLEVBQU8sRUFFeEIsQ0FhQSxJQUFJcy9CLEdBQVMsU0FBZ0J6cEIsR0FDM0IsTUFBTUEsQ0FDUixFQUVJMHBCLEdBQVUsU0FBaUI3bkUsR0FDN0IsTUFBTyxDQUNMQSxNQUFPQSxFQUNQaUIsTUFBTSxFQUVWLEVBRUEsU0FBUzZtRSxHQUFhdG1FLEVBQU11bUUsRUFBTXBrRSxRQUNuQixJQUFUb2tFLElBQ0ZBLEVBQU9ILFNBR0ksSUFBVGprRSxJQUNGQSxFQUFPLFlBR1QsSUFBSWxDLEVBQVcsQ0FDYjR1QixLQUFNLENBQ0oxc0IsS0FBTUEsR0FFUm5DLEtBQU1BLEVBQ05za0UsTUFBT2lDLEVBQ1AvMkMsT0FBUTYyQyxHQUNSRyxnQkFBZ0IsR0FTbEIsTUFOc0Isb0JBQVgxbUUsU0FDVEcsRUFBU0gsT0FBT0csVUFBWSxXQUMxQixPQUFPQSxDQUNULEdBR0tBLENBQ1QsQ0FDQSxTQUFTd21FLEdBQVMza0UsRUFBT2kzRCxHQUN2QixJQUFJMk4sRUFBWTNOLEVBQU0yTixVQUd0QjdrRSxRQUFRQyxNQUFNQSxHQUNkRCxRQUFRQyxNQUFNNGtFLEVBQ2hCLENBQ0EsSUFRSUMsR0FBbUIsU0FBMEIzNEQsR0FDL0MsT0FBTzFQLE1BQU1tQyxNQUFNLEtBQU0sSUFBSW5DLE1BQU0wUCxHQUNyQyxFQUNJNDRELEdBQW1CLFNBQTBCOThCLEdBQy9DLE9BQU8sU0FBVWp2QixHQU9mLE9BQU9pdkIsRUFBUzlyQyxPQUFPRSxlQUFlMmMsRUFBUSxHQUFhLENBQ3pEcmMsT0FBTyxJQUVYLENBQ0YsRUFDSXFvRSxHQUFrQixTQUF5QjVPLEdBQzdDLE9BQU9BLElBQVFpTixFQUNqQixFQUNJNEIsR0FBZSxTQUFzQjdPLEdBQ3ZDLE9BQU9BLElBQVFnTixFQUNqQixFQUNJOEIsR0FBaUIsU0FBd0I5TyxHQUMzQyxPQUFPNE8sR0FBZ0I1TyxJQUFRNk8sR0FBYTdPLEVBQzlDLEVBQ0EsU0FBUytPLEdBQTZCQyxFQUFPQyxHQUMzQyxJQVVJQyxFQVZBMWdFLEVBQU96SSxPQUFPeUksS0FBS3dnRSxHQUNuQkcsRUFBYTNnRSxFQUFLNUgsT0FRbEJ3b0UsRUFBaUIsRUFFakJDLEVBQVUsR0FBTUwsR0FBU04sR0FBaUJTLEdBQWMsQ0FBQyxFQUN6REcsRUFBaUIsQ0FBQyxFQXNDdEIsT0E3QkE5Z0UsRUFBS3VpQixTQUFRLFNBQVVyQyxHQUNyQixJQUFJNmdELEVBQVksU0FBbUJ2UCxFQUFLd1AsR0FDbENOLElBSUFNLEdBQVNWLEdBQWU5TyxJQUMxQmlQLEVBQWVRLFNBQ2ZSLEVBQWVqUCxFQUFLd1AsS0FFcEJILEVBQVEzZ0QsR0FBT3N4QyxJQUNmb1AsSUFqQm1CRCxJQUNyQkQsR0FBWSxFQUNaRCxFQUFlSSxLQWtCakIsRUFFQUUsRUFBVUUsT0FBUyxHQUNuQkgsRUFBZTVnRCxHQUFPNmdELENBQ3hCLElBRUFOLEVBQWVRLE9BQVMsV0FDakJQLElBQ0hBLEdBQVksRUFDWjFnRSxFQUFLdWlCLFNBQVEsU0FBVXJDLEdBQ3JCLE9BQU80Z0QsRUFBZTVnRCxHQUFLK2dELFFBQzdCLElBRUosRUFFT0gsQ0FDVCxDQUNBLFNBQVNJLEdBQVk5YixHQUNuQixNQUFPLENBQ0wxcEQsS0FBTTBwRCxFQUFHMXBELE1BQVEsWUFDakJtRCxTQUFVc2lFLEdBQVkvYixHQUUxQixDQUNBLFNBQVMrYixHQUFZQyxHQUNuQixPQUFPQSxFQUFhMUMsR0FDdEIsQ0FFQSxJQUlJMkMsR0FBcUIsRUFvRnpCLElBWUlDLEdBQVksU0FBbUJDLEdBQ2pDLE9BMUZGLFNBQW9CQyxFQUFPQyxRQUNYLElBQVZELElBQ0ZBLEVBQVEsSUFHVixJQUFJN00sRUFBTSxJQUFJOThELE1BQU0ycEUsR0FDaEJwcEUsRUFBUyxFQUNUc3BFLEVBQVksRUFDWkMsRUFBVyxFQUVYeGlFLEVBQU8sU0FBY3kvRCxHQUN2QmpLLEVBQUkrTSxHQUFhOUMsRUFDakI4QyxHQUFhQSxFQUFZLEdBQUtGLEVBQzlCcHBFLEdBQ0YsRUFFSTZtRSxFQUFPLFdBQ1QsR0FBYyxHQUFWN21FLEVBQWEsQ0FDZixJQUFJd21FLEVBQUtqSyxFQUFJZ04sR0FJYixPQUhBaE4sRUFBSWdOLEdBQVksS0FDaEJ2cEUsSUFDQXVwRSxHQUFZQSxFQUFXLEdBQUtILEVBQ3JCNUMsQ0FDVCxDQUNGLEVBRUlnRCxFQUFRLFdBR1YsSUFGQSxJQUFJQyxFQUFRLEdBRUx6cEUsR0FDTHlwRSxFQUFNMWlFLEtBQUs4L0QsS0FHYixPQUFPNEMsQ0FDVCxFQUVBLE1BQU8sQ0FDTHhuQixRQUFTLFdBQ1AsT0FBaUIsR0FBVmppRCxDQUNULEVBQ0EwcEUsSUFBSyxTQUFhbEQsR0FJZCxJQUFJbUQsRUFITixHQUFJM3BFLEVBQVNvcEUsRUFDWHJpRSxFQUFLeS9ELFFBSUwsT0FBUTZDLEdBQ04sS0F6RGMsRUEwRFosTUFBTSxJQUFJbnBFLE1BM0RBLDhCQTZEWixLQTFEYyxFQTJEWnE4RCxFQUFJK00sR0FBYTlDLEVBRWpCK0MsRUFEQUQsR0FBYUEsRUFBWSxHQUFLRixFQUU5QixNQUVGLEtBQUtILEdBQ0hVLEVBQWUsRUFBSVAsRUFDbkI3TSxFQUFNaU4sSUFDTnhwRSxFQUFTdThELEVBQUl2OEQsT0FDYnNwRSxFQUFZL00sRUFBSXY4RCxPQUNoQnVwRSxFQUFXLEVBQ1hoTixFQUFJdjhELE9BQVMycEUsRUFDYlAsRUFBUU8sRUFDUjVpRSxFQUFLeS9ELEdBT2IsRUFDQUssS0FBTUEsRUFDTjJDLE1BQU9BLEVBRVgsQ0FlU0ksQ0FBV1QsRUFBYUYsR0FDakMsRUFXSVksR0FBTyxPQUNQQyxHQUFNLE1BR05DLEdBQU8sT0FFUEMsR0FBTyxPQUVQLEdBQVMsU0E2QlRDLEdBQWEsU0FBb0I1c0QsRUFBTW9vQixHQUN6QyxJQUFJbzFCLEVBRUosT0FBT0EsRUFBTyxDQUFDLEdBQVEsS0FBTSxFQUFNQSxFQUFLcVAsWUFBYSxFQUFPclAsRUFBS3g5QyxLQUFPQSxFQUFNdzlDLEVBQUtwMUIsUUFBVUEsRUFBU28xQixDQUN4RyxFQWVBLFNBQVMsR0FBS3NQLEVBQWtCQyxHQVM5QixZQVJ5QixJQUFyQkQsSUFDRkEsRUFBbUIsS0FPakIxRCxHQUFRMEQsSUFDTixHQUFTQyxJQUVYcG5FLFFBQVFxbkUsS0FBSywySEFHUkosR0FBV0osR0FBTSxDQUN0QnBELFFBQVMwRCxLQUlUcEQsR0FBVW9ELElBQXFCLEdBQVNDLElBQXFCM0QsR0FBUTJELEdBQ2hFSCxHQUFXSixHQUFNLENBQ3RCUyxRQUFTSCxFQUNUMUQsUUFBUzJELElBSVQsR0FBUUQsSUFDTixHQUFTQyxJQUVYcG5FLFFBQVFxbkUsS0FBSyx1RkFHUkosR0FBV0osR0FBTSxDQUN0QlMsUUFBU0gsVUFJVCxDQUdOLENBTUEsU0FBU1QsR0FBSWEsRUFBV3Z1RCxHQWlCdEIsT0FOSXVxRCxHQUFNdnFELEtBQ1JBLEVBQVN1dUQsRUFFVEEsT0FBWXhtQixHQUdQa21CLEdBQVdILEdBQUssQ0FDckJRLFFBQVNDLEVBQ1R2dUQsT0FBUUEsR0FFWixDQWdEQSxTQUFTd3VELEdBQW9CQyxFQUFjL2MsR0FDekMsSUFDSVYsRUFEQTNvQixFQUFVLEtBbUJkLE9BaEJJLEdBQUtvbUMsR0FDUHpkLEVBQUt5ZCxHQUVELEdBQU1BLElBQ1JwbUMsRUFBVW9tQyxFQUFhLEdBQ3ZCemQsRUFBS3lkLEVBQWEsS0FFbEJwbUMsRUFBVW9tQyxFQUFhcG1DLFFBQ3ZCMm9CLEVBQUt5ZCxFQUFhemQsSUFHaEIzb0IsR0FBVyxHQUFPMm9CLElBQU8sR0FBSzNvQixFQUFRMm9CLE1BQ3hDQSxFQUFLM29CLEVBQVEyb0IsS0FJVixDQUNMM29CLFFBQVNBLEVBQ1Qyb0IsR0FBSUEsRUFDSlUsS0FBTUEsRUFFVixDQU1BLFNBQVMsR0FBSytjLEdBQ1osSUFBSyxJQUFJaGQsRUFBTzNyRCxVQUFVOUIsT0FBUTB0RCxFQUFPLElBQUlqdUQsTUFBTWd1RCxFQUFPLEVBQUlBLEVBQU8sRUFBSSxHQUFJRSxFQUFPLEVBQUdBLEVBQU9GLEVBQU1FLElBQ2xHRCxFQUFLQyxFQUFPLEdBQUs3ckQsVUFBVTZyRCxHQVM3QixPQUFPc2MsR0FBV0YsR0FBTVMsR0FBb0JDLEVBQWMvYyxHQUM1RCxDQXlCQSxTQUFTLEdBQUsrYyxHQVFaLElBQUssSUFBSUMsRUFBUTVvRSxVQUFVOUIsT0FBUTB0RCxFQUFPLElBQUlqdUQsTUFBTWlyRSxFQUFRLEVBQUlBLEVBQVEsRUFBSSxHQUFJQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQ3hHamQsRUFBS2lkLEVBQVEsR0FBSzdvRSxVQUFVNm9FLEdBRzlCLE9BQU9WLEdBQVdELEdBQU1RLEdBQW9CQyxFQUFjL2MsR0FDNUQsQ0M3aUJBLFNBbEJBLFdBQ0UsSUFBSWtkLEVBQU0sQ0FBQyxFQUtYLE9BSkFBLEVBQUlDLFFBQVUsSUFBSWhzQyxTQUFRLFNBQVVHLEVBQVM2b0IsR0FDM0MraUIsRUFBSTVyQyxRQUFVQSxFQUNkNHJDLEVBQUkvaUIsT0FBU0EsQ0FDZixJQUNPK2lCLENBQ1QsRUNJQSxJQUFJbmdDLEdBQVEsR0FTUnFnQyxHQUFZLEVBT2hCLFNBQVMzaUUsR0FBSzRpRSxHQUNaLElBQ0VDLEtBQ0FELEdBQ0YsQ0FBRSxRQUNBRSxJQUNGLENBQ0YsQ0FNQSxTQUFTQyxHQUFLSCxHQUNadGdDLEdBQU0xakMsS0FBS2drRSxHQUVORCxLQUNIRSxLQUNBLEtBRUosQ0FLQSxTQUFTRyxHQUFZSixHQUNuQixJQUVFLE9BREFDLEtBQ09ELEdBQ1QsQ0FBRSxRQUNBLElBQ0YsQ0FDRixDQU1BLFNBQVNDLEtBQ1BGLElBQ0YsQ0FNQSxTQUFTRyxLQUNQSCxJQUNGLENBTUEsU0FBUyxLQUVQLElBQUlDLEVBRUosSUFIQUUsTUFHUUgsU0FBd0MvbUIsS0FBMUJnbkIsRUFBT3RnQyxHQUFNbitCLFVBQ2pDbkUsR0FBSzRpRSxFQUVULENBRUEsSUFBSSxHQUFRLFNBQWVLLEdBQ3pCLE9BQU8sU0FBVXY3QyxHQUNmLE9BQU91N0MsRUFBU0MsTUFBSyxTQUFVNTdELEdBQzdCLE9BQU91eEQsR0FBUXZ4RCxFQUFSdXhELENBQVdueEMsRUFDcEIsR0FDRixDQUNGLEVBQ0l5N0MsR0FBWSxTQUFtQkMsR0FDakMsT0FBTyxTQUFVMTdDLEdBQ2YsT0FBTzA3QyxFQUFXMTdDLEVBQ3BCLENBQ0YsRUFDSSxHQUFTLFNBQWdCNDJDLEdBQzNCLE9BQU8sU0FBVTUyQyxHQUNmLE9BQU9BLEVBQU14UyxPQUFTL2IsT0FBT21sRSxFQUMvQixDQUNGLEVBQ0ksR0FBUyxTQUFnQkEsR0FDM0IsT0FBTyxTQUFVNTJDLEdBQ2YsT0FBT0EsRUFBTXhTLE9BQVNvcEQsQ0FDeEIsQ0FDRixFQUNJK0UsR0FBVyxXQUNiLE9BQU92RSxFQUNULEVBQ0EsU0FBU2pHLEdBQVF5RixHQUVmLElBQUlnRixFQUE2QixNQUFaaEYsRUFBa0IrRSxHQUFXLEdBQVMvRSxHQUFXLEdBQVMsR0FBUUEsR0FBVyxHQUFRSyxHQUFlTCxHQUFXLEdBQVMsR0FBS0EsR0FBVzZFLEdBQVkzRSxHQUFTRixHQUFXLEdBQVMsS0FFdE0sR0FBdUIsT0FBbkJnRixFQUNGLE1BQU0sSUFBSXZyRSxNQUFNLG9CQUFzQnVtRSxHQUd4QyxPQUFPZ0YsRUFBZWhGLEVBQ3hCLENBRUEsSUFBSWlGLEdBQU0sQ0FDUnJ1RCxLQUFNMm9ELElBRUoyRixHQUFRLFNBQWVyc0UsR0FDekIsT0FBT0EsR0FBS0EsRUFBRStkLE9BQVMyb0QsRUFDekIsRUF5T0EsU0FBUzRGLEtBQ1AsSUFsRkkvUSxFQUVBZ1IsRUFDQUMsRUFDQUMsRUFRQUMsRUFRQTNxRCxFQThEQTRxRCxHQWhGQUosR0FBUyxFQUVURSxFQURBRCxFQUFnQixHQVNoQkUsRUFBNEIsV0FDMUJELElBQWVELElBSW5CQyxFQUFhRCxFQUFjOXBFLFFBQzdCLEVBRUlxZixFQUFRLFdBS1Z3cUQsR0FBUyxFQUNULElBQUlLLEVBQVNKLEVBQWdCQyxFQUM3QkEsRUFBYSxHQUNiRyxFQUFPL2hELFNBQVEsU0FBVWdpRCxHQUN2QkEsRUFBTVQsR0FDUixHQUNGLEdBRU83USxFQUFPLENBQUMsR0FBUXFMLEtBQWEsRUFBTXJMLEVBQUs2TyxJQUFNLFNBQWE3NUMsR0FNaEUsSUFBSWc4QyxFQUlKLEdBQUlGLEdBQU05N0MsR0FDUnhPLFNBTUYsSUFGQSxJQUFJNnFELEVBQVNKLEVBQWdCQyxFQUVwQjNuRCxFQUFJLEVBQUdnb0QsRUFBTUYsRUFBT2xzRSxPQUFRb2tCLEVBQUlnb0QsRUFBS2hvRCxJQUFLLENBQ2pELElBQUkrbkQsRUFBUUQsRUFBTzluRCxHQUVmK25ELEVBQU1sRyxJQUFPcDJDLEtBQ2ZzOEMsRUFBTXRELFNBQ05zRCxFQUFNdDhDLEdBRVYsQ0FDRixFQUFHZ3JDLEVBQUtnTSxLQUFPLFNBQWNuK0QsRUFBSXM0RCxHRjdSbkMsSUFDTXFMLE9FNlJjLElBQVpyTCxJQUNGQSxFQUFVd0ssSUFPUkssRUFDRm5qRSxFQUFHZ2pFLEtBSUxoakUsRUFBR3U5RCxJQUFTakYsRUFDWmdMLElBQ0FELEVBQVdobEUsS0FBSzJCLEdBQ2hCQSxFQUFHbWdFLFFGN1NEd0QsR0FBUyxFQUNOLFdBQ0RBLElBSUpBLEdBQVMsRUV3U1BMLElBQ0EzRSxHQUFPMEUsRUFBWXJqRSxHRnZTdkIsR0V5U0EsRUFBR215RCxFQUFLeDVDLE1BQVFBLEVBQU93NUMsR0FJbkI2TyxFQUFNdUMsRUFBS3ZDLElBYWYsT0FYQXVDLEVBQUt2QyxJQUFNLFNBQVU3NUMsR0FDZkEsRUFBTSxJQUNSNjVDLEVBQUk3NUMsR0FJTnE3QyxJQUFLLFdBQ0h4QixFQUFJNzVDLEVBQ04sR0FDRixFQUVPbzhDLENBQ1QsQ0FFQSxJQUFJSyxHQUFVLEVBQ1YsR0FBWSxFQUNaQyxHQUFVLEVBQ1ZDLEdBQU8sRUFFWCxTQUFTQyxHQUFlNUIsRUFBU25pRSxHQUMvQixJQUFJZ2tFLEVBQWdCN0IsRUFBUTlFLElBRXhCLEdBQUsyRyxLQUNQaGtFLEVBQUdtZ0UsT0FBUzZELEdBR2Q3QixFQUFRNXJDLEtBQUt2MkIsR0FBSSxTQUFVekYsR0FDekJ5RixFQUFHekYsR0FBTyxFQUNaLEdBQ0YsQ0FFQSxJQUtJMHBFLEdBTEEsR0FBVSxFQUNWQyxHQUFhLFdBQ2YsUUFBUyxFQUNWLEVBOE9ELFNBQVNDLEdBQWlCQyxHQUNwQkEsRUFBYUMsYUFDZkQsRUFBYWpFLFFBRWpCLENBeUlBLElBQUltRSxLQUFtQkwsR0FBbUIsQ0FBQyxHQUFvQjlDLElBeFMvRCxTQUF1Qm9ELEVBQUtDLEVBQU94a0UsR0FDakMsSUFBSXlrRSxFQUFnQkQsRUFBTTVDLFFBQ3RCQSxPQUE0QixJQUFsQjZDLEVBQTJCRixFQUFJM0MsUUFBVTZDLEVBQ25EMUcsRUFBVXlHLEVBQU16RyxRQUNoQjJHLEVBQVFGLEVBQU1FLE1BRWRDLEVBQVMsU0FBZ0J4OUMsR0FDdkJBLGFBQWlCM3ZCLE1BQ25Cd0ksRUFBR21uQixHQUFPLElBSVI4N0MsR0FBTTk3QyxJQUFXdTlDLEVBS3JCMWtFLEVBQUdtbkIsR0FKRG5uQixFQUFHMjlELEdBS1AsRUFFQSxJQUNFaUUsRUFBUXpELEtBQUt3RyxFQUFRLEdBQVM1RyxHQUFXekYsR0FBUXlGLEdBQVcsS0FDOUQsQ0FBRSxNQUFPM29CLEdBRVAsWUFEQXAxQyxFQUFHbzFDLEdBQUssRUFFVixDQUVBcDFDLEVBQUdtZ0UsT0FBU3dFLEVBQU94RSxNQUNyQixFQTRRc0Y4RCxHQUFpQjdDLElBcFV2RyxTQUFzQm1ELEVBQUsvUyxFQUFPeHhELEdBQ2hDLElBQUk0aEUsRUFBVXBRLEVBQU1vUSxRQUNoQnR1RCxFQUFTaytDLEVBQU1sK0MsT0FDZmdqQixFQUFVazdCLEVBQU1sN0IsUUFPcEJrc0MsSUFBSyxXQUNILElBQUl4bEIsRUFFSixJQUNFQSxHQUFVNGtCLEVBQVVBLEVBQVFaLElBQU11RCxFQUFJaGlDLFVBQVVqdkIsRUFDbEQsQ0FBRSxNQUFPL1ksR0FFUCxZQURBeUYsRUFBR3pGLEdBQU8sRUFFWixDQUVJKzdCLEdBQVcsR0FBUTBtQixHQUNyQittQixHQUFlL21CLEVBQVFoOUMsR0FFdkJBLEVBQUdnOUMsRUFFUCxHQUNGLEVBMFM0SGluQixHQUFvQixJQXpIaEosU0FBc0JNLEVBQUs3bkMsRUFBUzE4QixFQUFJNGtFLEdBQ3RDLElBQUlDLEVBQWVELEVBQU9DLGFBQ3RCQyxFQUFXLEdBQ1g1bEUsRUFBT3pJLE9BQU95SSxLQUFLdzlCLEdBRXZCLEdBQW9CLElBQWhCeDlCLEVBQUs1SCxPQUFULENBS0EsSUFBSTBvRSxFQUFpQlAsR0FBNkIvaUMsRUFBUzE4QixHQUMzRGQsRUFBS3VpQixTQUFRLFNBQVVyQyxHQUNyQnlsRCxFQUFhbm9DLEVBQVF0ZCxHQUFNMGxELEVBQVU5RSxFQUFlNWdELEdBQU1BLEVBQzVELEdBTEEsTUFGRXBmLEVBQUcsR0FBUTA4QixHQUFXLEdBQUssQ0FBQyxFQVFoQyxFQTJHa0t1bkMsR0FBcUIsS0F6R3ZMLFNBQXVCTSxFQUFLN25DLEVBQVMxOEIsRUFBSStrRSxHQUN2QyxJQUFJRixFQUFlRSxFQUFPRixhQUN0QkMsRUFBVyxHQUNYNWxFLEVBQU96SSxPQUFPeUksS0FBS3c5QixHQUNuQnNvQyxFQUFXLEdBQVF0b0MsR0FBVzBpQyxHQUFpQmxnRSxFQUFLNUgsUUFBVSxDQUFDLEVBQy9EMnRFLEVBQVcsQ0FBQyxFQUNackYsR0FBWSxFQUNoQjFnRSxFQUFLdWlCLFNBQVEsU0FBVXJDLEdBQ3JCLElBQUk2Z0QsRUFBWSxTQUFtQnZQLEVBQUt3UCxHQUNsQ04sSUFJQU0sR0FBU1YsR0FBZTlPLElBRTFCMXdELEVBQUdtZ0UsU0FDSG5nRSxFQUFHMHdELEVBQUt3UCxLQUVSbGdFLEVBQUdtZ0UsU0FDSFAsR0FBWSxFQUNab0YsRUFBUzVsRCxHQUFPc3hDLEVBQ2hCMXdELEVBQUdnbEUsSUFFUCxFQUVBL0UsRUFBVUUsT0FBUyxHQUNuQjhFLEVBQVM3bEQsR0FBTzZnRCxDQUNsQixJQUVBamdFLEVBQUdtZ0UsT0FBUyxXQUVMUCxJQUNIQSxHQUFZLEVBQ1oxZ0UsRUFBS3VpQixTQUFRLFNBQVVyQyxHQUNyQixPQUFPNmxELEVBQVM3bEQsR0FBSytnRCxRQUN2QixJQUVKLEVBRUFqaEUsRUFBS3VpQixTQUFRLFNBQVVyQyxHQUNqQndnRCxHQUlKaUYsRUFBYW5vQyxFQUFRdGQsR0FBTTBsRCxFQUFVRyxFQUFTN2xELEdBQU1BLEVBQ3RELEdBQ0YsRUEyRDBNNmtELEdBQWlCNUMsSUExUTNOLFNBQXVCa0QsRUFBS1csRUFBT2xsRSxFQUFJbWxFLEdBQ3JDLElBQUl4cEMsRUFBVXVwQyxFQUFNdnBDLFFBQ2hCMm9CLEVBQUs0Z0IsRUFBTTVnQixHQUNYVSxFQUFPa2dCLEVBQU1sZ0IsS0FDYnFkLEVBQU84QyxFQUFNOUMsS0FHakIsSUFDRSxJQUFJcmxCLEVBQVNzSCxFQUFHcHJELE1BQU15aUMsRUFBU3FwQixHQUUvQixHQUFJLEdBQVFoSSxHQUVWLFlBREErbUIsR0FBZS9tQixFQUFRaDlDLEdBSXpCLEdBQUl0SCxHQUFTc2tELEdBS1gsWUFIQW9vQixHQUFLYixFQUFLdm5CLEVBQVFxbEIsRUFBSzFtQyxRQUFTLEdBQVN5a0MsR0FBWTliLElBRXJELEVBQU90a0QsR0FJVEEsRUFBR2c5QyxFQUNMLENBQUUsTUFBT3ppRCxHQUNQeUYsRUFBR3pGLEdBQU8sRUFDWixDQUNGLEVBK09rUDBwRSxHQUFvQixJQTdPdFEsU0FBc0JNLEVBQUtjLEVBQU9ybEUsR0FDaEMsSUFBSTI3QixFQUFVMHBDLEVBQU0xcEMsUUFDaEIyb0IsRUFBSytnQixFQUFNL2dCLEdBQ1hVLEVBQU9xZ0IsRUFBTXJnQixLQUtqQixJQUNFLElBQUlzZ0IsRUFBUSxTQUFlbHdCLEVBQUtzYixHQUMxQm1OLEdBQU16b0IsR0FDUnAxQyxFQUFHMHdELEdBRUgxd0QsRUFBR28xQyxHQUFLLEVBRVosRUFFQWtQLEVBQUdwckQsTUFBTXlpQyxFQUFTcXBCLEVBQUs1aEQsT0FBT2tpRSxJQUUxQkEsRUFBTW5GLFNBQ1JuZ0UsRUFBR21nRSxPQUFTbUYsRUFBTW5GLE9BRXRCLENBQUUsTUFBTzVsRSxHQUNQeUYsRUFBR3pGLEdBQU8sRUFDWixDQUNGLEVBb053UjBwRSxHQUFpQjNDLElBbE56UyxTQUF1QmlELEVBQUtnQixFQUFPdmxFLEVBQUl3bEUsR0FDckMsSUFBSTdwQyxFQUFVNHBDLEVBQU01cEMsUUFDaEIyb0IsRUFBS2loQixFQUFNamhCLEdBQ1hVLEVBQU91Z0IsRUFBTXZnQixLQUNieWdCLEVBQVdGLEVBQU1FLFNBQ2pCanVELEVBQVNndUQsRUFBTW5ELEtBQ2ZxRCxFQWpLTixTQUE0QnZULEdBQzFCLElBQUl4MkIsRUFBVXcyQixFQUFLeDJCLFFBQ2Yyb0IsRUFBSzZOLEVBQUs3TixHQUNWVSxFQUFPbU4sRUFBS25OLEtBR2hCLElBQ0UsSUFBSWhJLEVBQVNzSCxFQUFHcHJELE1BQU15aUMsRUFBU3FwQixHQUUvQixHQUFJdHNELEdBQVNza0QsR0FDWCxPQUFPQSxFQUdULElBQUkyb0IsR0FBVyxFQWtCZixPQUFPNUcsSUFoQkksU0FBY3pZLEdBQ3ZCLE9BQUtxZixFQVFJLENBQ0wxdUUsTUFBT3F2RCxFQUNQcHVELE1BQU0sSUFUUnl0RSxHQUFXLEVBRUosQ0FDTDF1RSxNQUFPK2xELEVBQ1A5a0QsTUFBTyxHQUFROGtELElBUXJCLEdBR0YsQ0FBRSxNQUFPNUgsR0FHUCxPQUFPMnBCLElBQWEsV0FDbEIsTUFBTTNwQixDQUNSLEdBQ0YsQ0FDRixDQTBIcUJ3d0IsQ0FBbUIsQ0FDcENqcUMsUUFBU0EsRUFDVDJvQixHQUFJQSxFQUNKVSxLQUFNQSxJQUVKMTlCLEVBaExOLFNBQTZCNXVCLEVBQVU0ckQsR0FDckMsT0FBSTVyRCxFQUFTdW1FLGVBQ0osQ0FDTHJrRSxLQUFNbEMsRUFBUzR1QixLQUFLMXNCLE1BSWpCd2xFLEdBQVk5YixFQUNyQixDQXdLYXVoQixDQUFvQkgsRUFBY3BoQixHQUM3Q21lLElBQVksV0FDVixJQUFJcDZDLEVBQVErOEMsR0FBS2IsRUFBS21CLEVBQWNsdUQsRUFBT21rQixRQUFTLEdBQVNyVSxFQUFNbStDLE9BQVVwcUIsR0FFekVvcUIsRUFDRnpsRSxFQUFHcW9CLEdBRUNBLEVBQU1nOEMsYUFDUjdzRCxFQUFPdXFCLE1BQU0rakMsUUFBUXo5QyxHQUNyQnJvQixFQUFHcW9CLElBQ01BLEVBQU0wOUMsWUFDZnZ1RCxFQUFPdXFCLE1BQU04NUIsTUFBTXh6QyxFQUFNOXRCLFNBRXpCeUYsRUFBR3FvQixFQUdULEdBQ0YsRUFzTGdVNDdDLEdBQXFCLEtBcExyVixTQUF1Qk0sRUFBS3lCLEVBQWFobUUsRUFBSWltRSxHQUMzQyxJQUFJNUQsRUFBTzRELEVBQU01RCxLQUViNkQsRUFBaUIsU0FBd0JDLEVBQVlubUUsR0FDdkQsR0FBSW1tRSxFQUFXOUIsWUFBYSxDQUMxQixJQUFJK0IsRUFBUyxDQUNYL0QsS0FBTUEsRUFDTnJpRSxHQUFJQSxHQUdOQSxFQUFHbWdFLE9BQVMsV0FDTmdHLEVBQVc5QixhQUFhMUYsR0FBT3dILEVBQVdFLFFBQVNELEVBQ3pELEVBRUFELEVBQVdFLFFBQVFob0UsS0FBSytuRSxFQUMxQixNQUNNRCxFQUFXSixZQUNiL2xFLEVBQUdtbUUsRUFBVzVyRSxTQUFTLEdBRXZCeUYsRUFBR21tRSxFQUFXbnBCLFNBR3BCLEVBRUEsR0FBSSxHQUFRZ3BCLEdBQWMsQ0FDeEIsR0FBMkIsSUFBdkJBLEVBQVkxdUUsT0FFZCxZQURBMEksRUFBRyxJQUlMLElBQUlnZ0UsRUFBaUJQLEdBQTZCdUcsRUFBYWhtRSxHQUMvRGdtRSxFQUFZdmtELFNBQVEsU0FBVS9sQixFQUFHZ2dCLEdBQy9Cd3FELEVBQWV4cUUsRUFBR3NrRSxFQUFldGtELEdBQ25DLEdBQ0YsTUFDRXdxRCxFQUFlRixFQUFhaG1FLEVBRWhDLEVBK0l3V2lrRSxHQUFpQixJQXZJelgsU0FBeUJNLEVBQUt5QixFQUFhaG1FLEVBQUlzbUUsR0FDN0MsSUFBSWpFLEVBQU9pRSxFQUFPakUsS0FFZDJELElBQWdCdkksR0FDbEIwRyxHQUFpQjlCLEdBQ1IsR0FBUTJELEdBQ2pCQSxFQUFZdmtELFFBQVEwaUQsSUFFcEJBLEdBQWlCNkIsR0FHbkJobUUsR0FDRixFQTJIc1ppa0UsR0FBdUIsT0F6RDdhLFNBQXlCTSxFQUFLZ0MsRUFBUXZtRSxHQUNwQyxJQUFJZ2pELEVBQVd1akIsRUFBT3ZqQixTQUNsQmdDLEVBQU91aEIsRUFBT3ZoQixLQUVsQixJQUVFaGxELEVBRFlnakQsRUFBUzlwRCxXQUFNLEVBQVEsQ0FBQ3FyRSxFQUFJaGhCLFlBQVluZ0QsT0FBTzRoRCxJQUU3RCxDQUFFLE1BQU96cUQsR0FDUHlGLEVBQUd6RixHQUFPLEVBQ1osQ0FDRixFQStDa2MwcEUsR0FBK0IsZUE3Q2plLFNBQTBCTSxFQUFLaUMsRUFBUXhtRSxHQUNyQyxJQUFJKzlELEVBQVV5SSxFQUFPekksUUFFakJ3RixFQTVsQk4sU0FBaUJrRCxRQUNFLElBQWJBLElBQ0ZBLEVBQVdqRyxNQUdiLElBQUkyQyxHQUFTLEVBQ1RLLEVBQVMsR0FzRmIsTUFBTyxDQUNMckYsS0FyREYsU0FBY24rRCxHQU1SbWpFLEdBQVVzRCxFQUFTbHRCLFVBQ3JCdjVDLEVBQUdnakUsSUFDT3lELEVBQVNsdEIsV0FHbkJpcUIsRUFBT25sRSxLQUFLMkIsR0FFWkEsRUFBR21nRSxPQUFTLFdBQ1Z4QixHQUFPNkUsRUFBUXhqRSxFQUNqQixHQU5BQSxFQUFHeW1FLEVBQVN0SSxPQVFoQixFQXFDRTZDLElBeEVGLFNBQWE3NUMsR0FNWCxJQUFJZzhDLEVBQUosQ0FJQSxHQUFzQixJQUFsQkssRUFBT2xzRSxPQUNULE9BQU9tdkUsRUFBU3pGLElBQUk3NUMsR0FHYnE4QyxFQUFPNS9ELE9BQ2hCNUQsQ0FBR21uQixFQVBILENBUUYsRUF5REUyNUMsTUFwQ0YsU0FBZTlnRSxHQU1UbWpFLEdBQVVzRCxFQUFTbHRCLFVBQ3JCdjVDLEVBQUdnakUsSUFJTGhqRSxFQUFHeW1FLEVBQVMzRixRQUNkLEVBeUJFbm9ELE1BdkJGLFdBS0UsSUFBSXdxRCxFQUFKLENBSUFBLEdBQVMsRUFDVCxJQUFJdFAsRUFBTTJQLEVBQ1ZBLEVBQVMsR0FFVCxJQUFLLElBQUk5bkQsRUFBSSxFQUFHZ29ELEVBQU03UCxFQUFJdjhELE9BQVFva0IsRUFBSWdvRCxFQUFLaG9ELEtBRXpDK25ELEVBRFk1UCxFQUFJbjRDLElBQ1ZzbkQsR0FSUixDQVVGLEVBUUYsQ0EwZmEsQ0FERXdELEVBQU9FLFFBRWhCdG1FLEVBQVFrNEQsR0FBUXlGLEdBRWhCMEYsRUFBUSxTQUFTQSxFQUFNbndELEdBQ3BCMnZELEdBQU0zdkQsSUFDVGl4RCxFQUFJM0MsUUFBUXpELEtBQUtzRixFQUFPcmpFLEdBRzFCbWpFLEVBQUt2QyxJQUFJMXRELEVBQ1gsRUFFSXFGLEVBQVE0cUQsRUFBSzVxRCxNQUVqQjRxRCxFQUFLNXFELE1BQVEsV0FDWDhxRCxFQUFNdEQsU0FDTnhuRCxHQUNGLEVBRUE0ckQsRUFBSTNDLFFBQVF6RCxLQUFLc0YsRUFBT3JqRSxHQUN4QkosRUFBR3VqRSxFQUNMLEVBc0J1ZlUsR0FBNEIsVUFwQm5oQixTQUE0Qk0sRUFBS2xyRCxFQUFNclosRUFBSTJtRSxHQUV6QzNtRSxFQURXMm1FLEVBQU90RSxLQUNWdUUsY0FDVixFQWlCMmlCM0MsR0FBc0IsTUFmamtCLFNBQXdCTSxFQUFLM0MsRUFBUzVoRSxHQUNwQzRoRSxFQUFRZCxNQUFNOWdFLEVBQ2hCLEVBYXFsQmlrRSxHQUE0QixZQVhqbkIsU0FBNkJNLEVBQUtoaUIsRUFBTXZpRCxFQUFJNm1FLEdBRTFDN21FLEVBRFc2bUUsRUFBT3hFLEtBQ1YxbUMsUUFBUTRtQixHQUNsQixFQVEwb0IwaEIsR0FBNEIsWUFOdHFCLFNBQTZCTSxFQUFLNWxDLEVBQU8zK0IsRUFBSThtRSxHQUMzQyxJQUFJekUsRUFBT3lFLEVBQU96RSxLQUNsQjNELEdBQWtCMkQsRUFBSzFtQyxRQUFTZ0QsR0FDaEMzK0IsR0FDRixFQUUrckJpa0UsSUFtRi9yQixTQUFTOEMsR0FBZUMsRUFBVUMsR0FDaEMsT0FBT0QsRUFBVyxJQUFNQyxDQUMxQixDQWdCQSxTQUFTQyxHQUFxQkMsR0FDNUIsSUFBSXZzRSxFQUFPdXNFLEVBQVN2c0UsS0FDaEJtRCxFQUFXb3BFLEVBQVNwcEUsU0FFeEIsT0FBSUEsRUFDS25ELEVBQU8sS0FBT21zRSxHQUFlaHBFLEVBQVNpcEUsU0FBVWpwRSxFQUFTa3BFLFlBRzNEcnNFLENBQ1QsQ0FFQSxTQUFTd3NFLEdBQXVCakksR0FDOUIsSUZsMUI2QmtJLEVBQVF4VCxFQUNqQzFCLEVFaTFCQW1WLEdGbDFCeUJELEVFazFCQSxTQUFVM3JELEdBQ3JDLE9BQU9BLEVBQUU0ckQsY0FDWCxFRnAxQnFDelQsRUVvMUJsQ3NMLEdGajFCS2hOLEVBQU8sSUFBSS91RCxPQUFPbEssTUFBTWk1RCxFQUFNMEIsRUFBSTVkLElBQUlveEIsS0VtMUI5QyxPQUFLQyxFQUFlaHdFLE9BSWIsQ0FBQyxpQ0FBaUM4TCxPQUFPa2tFLEdBQWdCL21FLEtBQUssTUFINUQsRUFJWCxDQUVBLElBQUlnbkUsR0FBZ0IsS0FDaEJwSSxHQUFZLEdBQ1pxSSxHQUFlLFNBQXNCQyxHQUN2Q0EsRUFBTUYsY0FBZ0JBLEdBQ3RCcEksR0FBVTlnRSxLQUFLb3BFLEVBQ2pCLEVBQ0l2c0QsR0FBUSxXQUNWcXNELEdBQWdCLEtBQ2hCcEksR0FBVTduRSxPQUFTLENBQ3JCLEVBSUlvd0UsR0FBbUIsU0FBMEJDLEdBQy9DSixHQUFnQkksQ0FDbEIsRUFXSSxHQUFXLFdBQ2IsSUFoRThCQSxFQUMxQjVwRSxFQStEQTZwRSxFQUFZekksR0FBVSxHQUN0QjBJLEVBQWExSSxHQUFVN2xFLE1BQU0sR0FDN0J3dUUsRUFBd0JGLEVBQVVMLGVBbEVSSSxFQWtFK0NDLEVBQVVMLGVBakVuRnhwRSxFQUFXc2lFLEdBQVlzSCxJQUdkNXBFLEVBQVNtd0IsS0FHQSxLQUFPNjRDLEdBRlpocEUsRUFBU2lwRSxTQUNQanBFLEVBQVNrcEUsWUFLckIsSUF1RGlHLEtBRXhHLE1BQU8sQ0FEWSxvQ0FBc0NDLEdBQXFCVSxFQUFVdGdELE9BQVN3Z0QsRUFBd0IsNkJBQStCQSxFQUF3QixLQUMxSjFrRSxPQUFPeWtFLEVBQVc1eEIsS0FBSSxTQUFVejhCLEdBQ3BELE1BQU8sa0JBQW9CMHRELEdBQXFCMXRELEVBQUU4TixLQUNwRCxJQUFJLENBQUM4L0MsR0FBdUJqSSxNQUFhNStELEtBQUssS0FDaEQsRUFxSEEsU0FBUzZrRSxHQUFLYixFQUFLd0QsRUFBWUMsRUFBZUMsRUFBZ0IzZ0QsRUFBTTRnRCxFQUFRQyxHQUsxRSxJQUFJQyxFQUFpQjdELEVBQUk4RCxtQkF3SHpCLFNBQW1CVixFQUFRN0MsRUFBVXdELEdBYS9CLEdBQVFYLEdBQ1Y1RCxHQUFlNEQsRUFBUVcsR0FDZDV2RSxHQUFTaXZFLEdBRWxCdkMsR0FBS2IsRUFBS29ELEVBQVF0RixFQUFLMW1DLFFBQVNtcEMsRUFBVXg5QyxHQUUxQyxFQUFPZ2hELEdBQ0VYLEdBQVVBLEVBQU8sS0FFMUJZLEVBRG1CakUsR0FBZ0JxRCxFQUFPaHpELE9BQzdCNHZELEVBQUtvRCxFQUFPNXFDLFFBQVN1ckMsRUFBUUUsR0FHMUNGLEVBQU9YLEVBRVgsSUE1SUFsdkUsRUFBSzBuRSxPQUFTLEdBR2QsSUFBSXNJLEVBQVcsQ0FDYm5oRCxLQUFNQSxFQUNONjRDLE9BaUJGLFdBQ01zSSxFQUFTQyxTQUFXOUUsS0FDdEI2RSxFQUFTQyxPQUFTLEdBQ2xCandFLEVBQUtpbEUsSUFFVCxFQXJCRWdMLE9BQVE5RSxJQU9OdkIsRUE1SU4sU0FBaUJrQyxFQUFLa0UsRUFBVVQsRUFBZUMsRUFBZ0IzZ0QsRUFBTTRnRCxFQUFRQyxHQUMzRSxJQUFJUSxPQUVTLElBQVRSLElBQ0ZBLEVBQU8sSUFHVCxJQUNJUyxFQUNBQyxFQUZBSCxFQUFTOUUsR0FHVGtGLEVBQWMsS0FDZEMsRUFBMkIsR0FDM0JwdEMsRUFBVWxsQyxPQUFPcUksT0FBT2twRSxHQUN4QmptQyxFQTNKTixTQUFtQjBtQyxFQUFVTyxFQUFTYixHQUNwQyxJQUNJbnJCLEVBREFpc0IsRUFBUSxHQUVSckosR0FBWSxFQU9oQixTQUFTL0QsRUFBTXptQixHQUNiNHpCLElBQ0FFLElBQ0FmLEVBQUsveUIsR0FBSyxFQUNaLENBRUEsU0FBUzB3QixFQUFRekQsR0FDZjRHLEVBQU01cUUsS0FBS2drRSxHQUVYQSxFQUFLOEYsS0FBTyxTQUFVelgsRUFBS3dQLEdBQ3JCTixJQUlKakIsR0FBT3NLLEVBQU81RyxHQUNkQSxFQUFLOEYsS0FBTyxHQUVSakksRUFDRnJFLEVBQU1uTCxJQUVGMlIsSUFBU29HLElBQ1h6ckIsRUFBUzBULEdBR051WSxFQUFNM3hFLFNBQ1Rzb0UsR0FBWSxFQUNadUksRUFBS25yQixLQUdYLENBQ0YsQ0FFQSxTQUFTa3NCLElBQ0h0SixJQUlKQSxHQUFZLEVBQ1pxSixFQUFNeG5ELFNBQVEsU0FBVS9sQixHQUN0QkEsRUFBRXlzRSxLQUFPLEdBQ1R6c0UsRUFBRXlrRSxRQUNKLElBQ0E4SSxFQUFRLEdBQ1YsQ0FFQSxPQW5EQW5ELEVBQVEyQyxHQW1ERCxDQUNMM0MsUUFBU0EsRUFDVG9ELFVBQVdBLEVBQ1hyTixNQUFPQSxFQUNQc04sU0FyRGEsV0FDYixPQUFPRixDQUNULEVBcURGLENBOEZjRyxDQUFVWCxHQUFVLFdBQzlCTSxFQUF5QjFxRSxLQUFLbkYsTUFBTTZ2RSxFQUEwQmhuQyxFQUFNb25DLFdBQVdsekIsS0FBSSxTQUFVdjZDLEdBQzNGLE9BQU9BLEVBQUU0ckIsS0FBSzFzQixJQUNoQixJQUNGLEdBQUc2MkIsR0FvQkgsU0FBU0EsRUFBSXVyQixFQUFRa2pCLEdBQ25CLEdBQUtBLEVBV0UsQ0FPTCxHQU5Bd0ksRUFBUzdFLEdBQ1QyRCxHQUFhLENBQ1hsZ0QsS0FBTUEsRUFDTmdnRCxlQUFnQnlCLElBR2QxRyxFQUFLNkYsT0FBUSxDQUNmLElBQUkvSSxFQUFZLEtBR2hCamtELEtBQ0FxcEQsRUFBSXg4QyxRQUFRaTFCLEVBQVEsQ0FDbEJtaUIsVUFBV0EsR0FFZixDQUVBMEosRUFBWTdyQixFQUNaOHJCLEdBQWVBLEVBQVkzcEIsT0FBT25DLEVBQ3BDLE1BM0JNQSxJQUFXMGdCLEdBQ2JnTCxFQUFTLEdBQ0FBLElBQVcsS0FDcEJBLEVBQVM1RSxJQUdYOEUsRUFBYTVyQixFQUNiOHJCLEdBQWVBLEVBQVl4eUMsUUFBUTBtQixHQXNCckNxbEIsRUFBSzhGLEtBQUtuckIsRUFBUWtqQixHQUNsQm1DLEVBQUtnRSxRQUFRNWtELFNBQVEsU0FBVTJrRCxHQUM3QkEsRUFBT3BtRSxHQUFHZzlDLEVBQVFrakIsRUFDcEIsSUFDQW1DLEVBQUtnRSxRQUFVLElBQ2pCLENBMEJBLElBQUloRSxJQUFRc0csRUFBUSxDQUFDLEdBQVMsS0FBUSxFQUFNQSxFQUFNNTVELEdBQUtrNUQsRUFBZ0JVLEVBQU1yaEQsS0FBT0EsRUFBTXFoRCxFQUFNVCxPQUFTQSxFQUFRUyxFQUFNaHRDLFFBQVVBLEVBQVNndEMsRUFBTXRDLFFBQVUsR0FBSXNDLEVBQU01bUMsTUFBUUEsRUFBTzRtQyxFQUFNeEksT0EzRXpMLFdBQ011SSxJQUFXOUUsS0FHYjhFLEVBQVMsR0FDVDNtQyxFQUFNbW5DLFlBRU56M0MsRUFBSWlzQyxJQUFhLEdBRXJCLEVBa0UwTWlMLEVBQU1SLEtBQU9BLEVBQU1RLEVBQU1sM0MsSUFBTUEsRUFBS2szQyxFQUFNVSxXQXhCcFAsU0FBb0IxcUMsR0FLbEIrL0IsR0FBa0IvaUMsRUFBU2dELEVBQzdCLEVBa0I2UWdxQyxFQUFNVyxVQWhCblIsV0FDRSxPQUFJUixJQUlKQSxFQUFjLEtBRVZKLElBQVc3RSxHQUNiaUYsRUFBWTNwQixPQUFPMHBCLEdBQ1ZILElBQVc5RSxJQUNwQmtGLEVBQVl4eUMsUUFBUXN5QyxJQVJiRSxFQUFZM0csT0FZdkIsRUFFMFN3RyxFQUFNdEUsVUFBWSxXQUMxVCxPQUFPcUUsSUFBVzlFLEVBQ3BCLEVBQUcrRSxFQUFNL0IsWUFBYyxXQUNyQixPQUFPOEIsSUFBVyxJQUFhQSxJQUFXOUUsSUFBVzZFLEVBQVNDLFNBQVcsRUFDM0UsRUFBR0MsRUFBTTVDLFVBQVksV0FDbkIsT0FBTzJDLElBQVc3RSxFQUNwQixFQUFHOEUsRUFBTTNyQixPQUFTLFdBQ2hCLE9BQU80ckIsQ0FDVCxFQUFHRCxFQUFNcHVFLE1BQVEsV0FDZixPQUFPc3VFLENBQ1QsRUFBR0YsR0FDSCxPQUFPdEcsQ0FDVCxDQTJCYWtILENBQVFoRixFQUFLa0UsRUFBVVQsRUFBZUMsRUFBZ0IzZ0QsRUFBTTRnRCxFQUFRQyxHQUMzRUssRUFBbUIsQ0FDckJuRyxLQUFNQSxFQUNOd0MsYUFBY0EsR0F5QmhCLE9BUElzRCxJQUNGQSxFQUFLaEksT0FBU2tDLEVBQUtsQyxRQUlyQjFuRSxJQUVPNHBFLEVBV1AsU0FBUzVwRSxFQUFLNnRELEVBQUs0WixHQUNqQixJQUNFLElBQUlsakIsRUFFQWtqQixHQUNGbGpCLEVBQVMrcUIsRUFBV2hMLE1BQU16VyxHQUUxQnByQyxNQUNTcWtELEdBQWFqWixJQU90Qm1pQixFQUFTQyxPQUFTLEdBS2xCandFLEVBQUswbkUsU0FNTG5qQixFQUFTLEdBQUsrcUIsRUFBVzkvQyxRQUFVOC9DLEVBQVc5L0MsT0FBT3kxQyxJQUFlLENBQ2xFeGxFLE1BQU0sRUFDTmpCLE1BQU95bUUsS0FJVDFnQixFQUZTc2lCLEdBQWdCaFosR0FFaEIsR0FBS3loQixFQUFXOS9DLFFBQVU4L0MsRUFBVzkvQyxTQUFXLENBQ3ZEL3ZCLE1BQU0sR0FHQzZ2RSxFQUFXdHZFLEtBQUs2dEQsR0FHdEJ0SixFQUFPOWtELE1BTU51d0UsRUFBU0MsU0FBVyxLQUN0QkQsRUFBU0MsT0FBUzVFLElBR3BCMkUsRUFBU04sS0FBS25yQixFQUFPL2xELFFBVHJCNHRFLEVBQWE3bkIsRUFBTy9sRCxNQUFPZ3hFLEVBQWdCeHZFLEVBVy9DLENBQUUsTUFBTzhCLEdBQ1AsR0FBSWt1RSxFQUFTQyxTQUFXLEdBQ3RCLE1BQU1udUUsRUFHUmt1RSxFQUFTQyxPQUFTN0UsR0FDbEI0RSxFQUFTTixLQUFLNXRFLEdBQU8sRUFDdkIsQ0FDRixDQStCQSxTQUFTc3FFLEVBQWE4QyxFQUFRTSxFQUFnQmpvRSxFQUFJb3VELFFBQ2xDLElBQVZBLElBQ0ZBLEVBQVEsSUFHVixJQWFJb2IsRUFiQTFFLEVBQVdaLEtBZWYsU0FBU29FLEVBQU81WCxFQUFLd1AsR0FDZnNKLElBSUpBLEdBQWdCLEVBQ2hCeHBFLEVBQUdtZ0UsT0FBUyxHQUVSb0UsRUFBSWtGLGNBQ0Z2SixFQUNGcUUsRUFBSWtGLFlBQVlDLGVBQWU1RSxFQUFVcFUsR0FFekM2VCxFQUFJa0YsWUFBWUUsZUFBZTdFLEVBQVVwVSxJQUl6Q3dQLEdBQ0Z3SCxHQUFpQkMsR0FHbkIzbkUsRUFBRzB3RCxFQUFLd1AsR0FDVixDQW5DQXFFLEVBQUlrRixhQUFlbEYsRUFBSWtGLFlBQVlHLGdCQUFnQixDQUNqRDlFLFNBQVVBLEVBQ1ZtRCxlQUFnQkEsRUFDaEI3WixNQUFPQSxFQUNQdVosT0FBUUEsSUFrQ1ZXLEVBQU9uSSxPQUFTLEdBRWhCbmdFLEVBQUdtZ0UsT0FBUyxXQUVOcUosSUFJSkEsR0FBZ0IsRUFDaEJsQixFQUFPbkksU0FFUG1JLEVBQU9uSSxPQUFTLEdBRWhCb0UsRUFBSWtGLGFBQWVsRixFQUFJa0YsWUFBWUksZ0JBQWdCL0UsR0FDckQsRUFFQXNELEVBQWVULEVBQVE3QyxFQUFVd0QsRUFDbkMsQ0FDRixDQUlBLFNBQVN3QixHQUFRM1gsRUFBTTRYLEdBZ0JyQixJQWZBLElBQUlDLEVBQWU3WCxFQUFLeVAsUUFDcEJBLE9BQTJCLElBQWpCb0ksRUFBMEI5RyxLQUFlOEcsRUFDbkR6bkMsRUFBVzR2QixFQUFLNXZCLFNBQ2hCZ2hCLEVBQVc0TyxFQUFLNU8sU0FDaEIwbUIsRUFBZTlYLEVBQUt4MkIsUUFDcEJBLE9BQTJCLElBQWpCc3VDLEVBQTBCLENBQUMsRUFBSUEsRUFDekNSLEVBQWN0WCxFQUFLc1gsWUFDbkJTLEVBQW9CL1gsRUFBSytYLGtCQUN6QkMsRUFBZWhZLEVBQUtwcUMsUUFDcEJBLE9BQTJCLElBQWpCb2lELEVBQTBCakwsR0FBV2lMLEVBTTFDcGxCLEVBQU8zckQsVUFBVTlCLE9BQVEwdEQsRUFBTyxJQUFJanVELE1BQU1ndUQsRUFBTyxFQUFJQSxFQUFPLEVBQUksR0FBSUUsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUNsR0QsRUFBS0MsRUFBTyxHQUFLN3JELFVBQVU2ckQsR0FHN0IsSUEyQ0lvakIsRUEzQ0FOLEVBQWFnQyxFQUFLN3dFLFdBQU0sRUFBUThyRCxHQU1oQzhmLEVBQVdaLEtBdUNmLEdBckNJdUYsSUFFRkEsRUFBWVcsZ0JBQWtCWCxFQUFZVyxpQkFBbUIsR0FDN0RYLEVBQVlHLGdCQUFrQkgsRUFBWUcsaUJBQW1CLEdBQzdESCxFQUFZRSxlQUFpQkYsRUFBWUUsZ0JBQWtCLEdBQzNERixFQUFZQyxlQUFpQkQsRUFBWUMsZ0JBQWtCLEdBQzNERCxFQUFZSSxnQkFBa0JKLEVBQVlJLGlCQUFtQixHQUM3REosRUFBWVksaUJBQW1CWixFQUFZWSxrQkFBb0IsR0FDL0RaLEVBQVlXLGdCQUFnQixDQUMxQnRGLFNBQVVBLEVBQ1ZpRixLQUFNQSxFQUNOL2tCLEtBQU1BLEtBMEJOa2xCLEVBQW1CLENBQ3JCLElBQUl2VyxFQUFhUCxHQUFRbDZELFdBQU0sRUFBUWd4RSxHQUV2QzdCLEVBQW9CLFNBQTJCaUMsR0FDN0MsT0FBTyxTQUFVM0MsRUFBUTdDLEVBQVV3RCxHQUtqQyxPQUFPM1UsR0FKYyxTQUF3QjRXLEdBQzNDLE9BQU9ELEVBQVVDLEVBQUt6RixFQUFVd0QsRUFDbEMsR0FFTzNVLENBQTJCZ1UsRUFDcEMsQ0FDRixDQUNGLE1BQ0VVLEVBQW9CN0osR0FHdEIsSUFBSStGLEVBQU0sQ0FDUjNDLFFBQVNBLEVBQ1RyL0IsU0FBVTg4QixHQUFpQjk4QixHQUMzQmdoQixTQUFVQSxFQUNWa21CLFlBQWFBLEVBQ2IxaEQsUUFBU0EsRUFDVHNnRCxrQkFBbUJBLEdBRXJCLE9BQU81RixJQUFZLFdBQ2pCLElBQUlKLEVBQU8rQyxHQUFLYixFQUFLd0QsRUFBWXBzQyxFQUFTbXBDLEVBQVUxRSxHQUFZMkosSUFFaEUsT0FBTTF1QixHQU1OLE9BSklvdUIsR0FDRkEsRUFBWUUsZUFBZTdFLEVBQVV6QyxHQUdoQ0EsQ0FDVCxHQUNGLENBNERBLE1DdjVDQSxHRDYxQ0EsU0FBK0JtSSxHQUM3QixJQVFJQyxFQVJBdFksT0FBaUIsSUFBVnFZLEVBQW1CLENBQUMsRUFBSUEsRUFDL0JQLEVBQWU5WCxFQUFLeDJCLFFBQ3BCQSxPQUEyQixJQUFqQnN1QyxFQUEwQixDQUFDLEVBQUlBLEVBQ3pDRCxFQUFlN1gsRUFBS3lQLFFBQ3BCQSxPQUEyQixJQUFqQm9JLEVBQTBCOUcsS0FBZThHLEVBQ25EUCxFQUFjdFgsRUFBS3NYLFlBQ25Cbm1ELEVFejJDUyxTQUF1QzFqQixFQUFROHFFLEdBQzVELEdBQWMsTUFBVjlxRSxFQUFnQixNQUFPLENBQUMsRUFDNUIsSUFFSXdmLEVBQUsxRCxFQUZMbEQsRUFBUyxDQUFDLEVBQ1ZteUQsRUFBYWwwRSxPQUFPeUksS0FBS1UsR0FFN0IsSUFBSzhiLEVBQUksRUFBR0EsRUFBSWl2RCxFQUFXcnpFLE9BQVFva0IsSUFDakMwRCxFQUFNdXJELEVBQVdqdkQsR0FDYmd2RCxFQUFTaHhFLFFBQVEwbEIsSUFBUSxJQUM3QjVHLEVBQU80RyxHQUFPeGYsRUFBT3dmLElBRXZCLE9BQU81RyxDQUNULENGODFDZ0IsQ0FBOEIyNUMsRUFBTSxDQUFDLFVBQVcsVUFBVyxnQkFRekUsU0FBU3lZLEVBQWVwWixHQUN0QixJQUFJak8sRUFBV2lPLEVBQU1qTyxTQUNqQmhoQixFQUFXaXZCLEVBQU1qdkIsU0FRckIsT0FQQWtvQyxFQUFlWCxHQUFRM3dFLEtBQUssS0FBTSxHQUFTLENBQUMsRUFBR21xQixFQUFTLENBQ3REcVksUUFBU0EsRUFDVGltQyxRQUFTQSxFQUNUci9CLFNBQVVBLEVBQ1ZnaEIsU0FBVUEsRUFDVmttQixZQUFhQSxLQUVSLFNBQVVoeEUsR0FDZixPQUFPLFNBQVU2YSxHQUNYbTJELEdBQWVBLEVBQVlZLGtCQUM3QlosRUFBWVksaUJBQWlCLzJELEdBRy9CLElBQUkwcEMsRUFBU3ZrRCxFQUFLNmEsR0FHbEIsT0FEQXN1RCxFQUFRWixJQUFJMXRELEdBQ0wwcEMsQ0FDVCxDQUNGLENBQ0YsQ0FrQkEsT0FoQkE0dEIsRUFBZUMsSUFBTSxXQUtuQixPQUFPSixFQUFhdnhFLFdBQU0sRUFBUUUsVUFDcEMsRUFFQXd4RSxFQUFldkIsV0FBYSxTQUFVMXFDLEdBS3BDKy9CLEdBQWtCL2lDLEVBQVNnRCxFQUM3QixFQUVPaXNDLENBQ1QsRUduNUNBLElBQUkxeUUsR0FBTyxTQUFjakIsR0FDdkIsTUFBTyxDQUNMaUIsTUFBTSxFQUNOakIsTUFBT0EsRUFFWCxFQUVJNnpFLEdBQU8sQ0FBQyxFQUNaLFNBQVNDLEdBQVN0SixHQUNoQixPQUFJLEdBQVFBLEdBQ0gsVUFHTHJELEdBQWVxRCxHQUNWN29FLE9BQU82b0UsR0FHWixHQUFLQSxHQUNBQSxFQUFpQjdtRSxLQUduQmhDLE9BQU82b0UsRUFDaEIsQ0FDQSxTQUFTdUosR0FBWUMsRUFBS0MsRUFBWXR3RSxHQUNwQyxJQUFJdXdFLEVBQ0FDLEVBQ0F6RCxFQUNBM1UsRUFBWWtZLEVBRWhCLFNBQVN6eUUsRUFBSzZ0RCxFQUFLL3JELEdBQ2pCLEdBQUl5NEQsSUFBYzhYLEdBQ2hCLE9BQU81eUUsR0FBS291RCxHQUdkLEdBQUkvckQsSUFBVTZ3RSxFQUVaLE1BREFwWSxFQUFZOFgsR0FDTnZ3RSxFQUVONHdFLEdBQWdCQSxFQUFhN2tCLEdBQzdCLElBQUlvTCxFQUFlbjNELEVBQVEwd0UsRUFBSUcsR0FBWTd3RSxHQUFTMHdFLEVBQUlqWSxLQUt4RCxPQUpBQSxFQUFZdEIsRUFBYXNCLFVBQ3pCMlUsRUFBU2pXLEVBQWFpVyxPQUN0QndELEVBQWV6WixFQUFheVosYUFDNUJDLEVBQWExWixFQUFhMFosV0FDbkJwWSxJQUFjOFgsR0FBTzV5RSxHQUFLb3VELEdBQU9xaEIsQ0FFNUMsQ0FFQSxPQUFPNUksR0FBYXRtRSxHQUFNLFNBQVU4QixHQUNsQyxPQUFPOUIsRUFBSyxLQUFNOEIsRUFDcEIsR0FBR0ssRUFDTCxDQUVBLFNBQVN5d0UsR0FBVTVKLEVBQWtCNkosR0FDbkMsSUFBSyxJQUFJdm1CLEVBQU8zckQsVUFBVTlCLE9BQVEwdEQsRUFBTyxJQUFJanVELE1BQU1ndUQsRUFBTyxFQUFJQSxFQUFPLEVBQUksR0FBSUUsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUNsR0QsRUFBS0MsRUFBTyxHQUFLN3JELFVBQVU2ckQsR0FHN0IsSUFZSTN4QyxFQVpBaTRELEVBQVEsQ0FDVnJ6RSxNQUFNLEVBQ05qQixNQUFPLEdBQUt3cUUsSUFXVitKLEVBQVksU0FBbUJybEUsR0FDakMsT0FBT21OLEVBQVNuTixDQUNsQixFQUVBLE9BQU82a0UsR0FBWSxDQUNqQlMsR0FBSSxXQUNGLE1BQU8sQ0FDTHpZLFVBQVcsS0FDWDJVLE9BQVE0RCxFQUNSSixhQUFjSyxFQUVsQixFQUNBRSxHQUFJLFdBQ0YsTUFBTyxDQUNMMVksVUFBVyxLQUNYMlUsUUF2QnFCeGhFLEVBdUJQbU4sRUF0QlgsQ0FDTHBiLE1BQU0sRUFDTmpCLE1BQU8sY0FBVyxFQUFRLENBQUNxMEUsR0FBUWxvRSxPQUFPNGhELEVBQU0sQ0FBQzcrQyxRQUh6QyxJQUFlQSxDQXlCekIsR0FDQyxLQUFNLGFBQWU0a0UsR0FBU3RKLEdBQW9CLEtBQU82SixFQUFPMXdFLEtBQU8sSUFDNUUsQ0FFQSxTQUFTK3dFLEdBQVdsSyxFQUFrQjZKLEdBQ3BDLElBQUssSUFBSXZtQixFQUFPM3JELFVBQVU5QixPQUFRMHRELEVBQU8sSUFBSWp1RCxNQUFNZ3VELEVBQU8sRUFBSUEsRUFBTyxFQUFJLEdBQUlFLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDbEdELEVBQUtDLEVBQU8sR0FBSzdyRCxVQUFVNnJELEdBRzdCLElBbUJJb2QsRUFBTS91RCxFQW5CTmk0RCxFQUFRLENBQ1ZyekUsTUFBTSxFQUNOakIsTUFBTyxHQUFLd3FFLElBR1ZtSyxFQUFRLFNBQWV6bEUsR0FDekIsTUFBTyxDQUNMak8sTUFBTSxFQUNOakIsTUFBTyxjQUFXLEVBQVEsQ0FBQ3EwRSxHQUFRbG9FLE9BQU80aEQsRUFBTSxDQUFDNytDLEtBRXJELEVBRUkwbEUsRUFBVSxTQUFpQnhKLEdBQzdCLE1BQU8sQ0FDTG5xRSxNQUFNLEVBQ05qQixPTHFlVSt1RSxFS3JlSTNELE9Mc2VFLElBQWhCMkQsSUFDRkEsRUFBY3ZJLElBaUJUOEQsR0FBVyxHQUFReUUsS0FuQjVCLElBQWdCQSxDS25lZCxFQUlJOEYsRUFBVSxTQUFpQnB3RSxHQUM3QixPQUFPMm1FLEVBQU8zbUUsQ0FDaEIsRUFFSTh2RSxFQUFZLFNBQW1CcmxFLEdBQ2pDLE9BQU9tTixFQUFTbk4sQ0FDbEIsRUFFQSxPQUFPNmtFLEdBQVksQ0FDakJTLEdBQUksV0FDRixNQUFPLENBQ0x6WSxVQUFXLEtBQ1gyVSxPQUFRNEQsRUFDUkosYUFBY0ssRUFFbEIsRUFDQUUsR0FBSSxXQUNGLE9BQU9ySixFQUFPLENBQ1pyUCxVQUFXLEtBQ1gyVSxPQUFRa0UsRUFBUXhKLElBQ2QsQ0FDRnJQLFVBQVcsS0FDWDJVLE9BQVFpRSxFQUFNdDRELEdBQ2Q2M0QsYUFBY1csRUFFbEIsRUFDQUMsR0FBSSxXQUNGLE1BQU8sQ0FDTC9ZLFVBQVcsS0FDWDJVLE9BQVFpRSxFQUFNdDRELEdBQ2Q2M0QsYUFBY1csRUFFbEIsR0FDQyxLQUFNLGNBQWdCZixHQUFTdEosR0FBb0IsS0FBTzZKLEVBQU8xd0UsS0FBTyxJQUM3RSxDQXdPQSxTQUFTb3hFLEdBQVl2SyxFQUFrQjZKLEdBS3JDLElBQUssSUFBSXZtQixFQUFPM3JELFVBQVU5QixPQUFRMHRELEVBQU8sSUFBSWp1RCxNQUFNZ3VELEVBQU8sRUFBSUEsRUFBTyxFQUFJLEdBQUlFLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDbEdELEVBQUtDLEVBQU8sR0FBSzdyRCxVQUFVNnJELEdBRzdCLE9BQU8sY0FBVyxFQUFRLENBQUNvbUIsR0FBVzVKLEVBQWtCNkosR0FBUWxvRSxPQUFPNGhELEdBQ3pFLENBQ0EsU0FBU2luQixHQUFheEssRUFBa0I2SixHQUt0QyxJQUFLLElBQUlZLEVBQVE5eUUsVUFBVTlCLE9BQVEwdEQsRUFBTyxJQUFJanVELE1BQU1tMUUsRUFBUSxFQUFJQSxFQUFRLEVBQUksR0FBSUMsRUFBUSxFQUFHQSxFQUFRRCxFQUFPQyxJQUN4R25uQixFQUFLbW5CLEVBQVEsR0FBSy95RSxVQUFVK3lFLEdBRzlCLE9BQU8sY0FBVyxFQUFRLENBQUNSLEdBQVlsSyxFQUFrQjZKLEdBQVFsb0UsT0FBTzRoRCxHQUMxRSxDQzFaZSxTQUFTN3JELEdBQUttckQsRUFBSXVKLEdBQy9CLE9BQU8sV0FDTCxPQUFPdkosRUFBR3ByRCxNQUFNMjBELEVBQVN6MEQsVUFDM0IsQ0FDRixDQ0FBLE1BQU9mLFNBQVEsSUFBSTVCLE9BQU9PLFdBQ3BCLGVBQUN5bkIsSUFBa0Job0IsT0FFbkIsSUFBVXM2QyxHQUdidDZDLE9BQU9xSSxPQUFPLE1BSFFzdEUsSUFDckIsTUFBTUMsRUFBTSxHQUFTcHpFLEtBQUttekUsR0FDMUIsT0FBT3I3QixHQUFNczdCLEtBQVN0N0IsR0FBTXM3QixHQUFPQSxFQUFJL3lFLE1BQU0sR0FBSSxHQUFHMFEsY0FBYyxHQUZ2RCxJQUFDK21DLEdBS2hCLE1BQU11N0IsR0FBYzMzRCxJQUNsQkEsRUFBT0EsRUFBSzNLLGNBQ0pvaUUsR0FBVSxHQUFPQSxLQUFXejNELEdBR2hDNDNELEdBQWE1M0QsR0FBUXkzRCxVQUFnQkEsSUFBVXozRCxHQVMvQyxRQUFDNWIsSUFBV2hDLE1BU1p5MUUsR0FBY0QsR0FBVyxhQXFCekJFLEdBQWdCSCxHQUFXLGVBMkIzQmx3QixHQUFXbXdCLEdBQVcsVUFRdEJHLEdBQWFILEdBQVcsWUFTeEJJLEdBQVdKLEdBQVcsVUFTdEJLLEdBQVlSLEdBQW9CLE9BQVZBLEdBQW1DLGlCQUFWQSxFQWlCL0MsR0FBaUI1VSxJQUNyQixHQUFvQixXQUFoQixHQUFPQSxHQUNULE9BQU8sRUFHVCxNQUFNeGdFLEVBQVl5bkIsR0FBZSs0QyxHQUNqQyxRQUFzQixPQUFkeGdFLEdBQXNCQSxJQUFjUCxPQUFPTyxXQUFrRCxPQUFyQ1AsT0FBT2dvQixlQUFlem5CLElBQTBCdUIsT0FBT3MwRSxlQUFlclYsR0FBVWovRCxPQUFPRyxZQUFZOCtELEVBQUksRUFVbkssR0FBUzhVLEdBQVcsUUFTcEJRLEdBQVNSLEdBQVcsUUFTcEJTLEdBQVNULEdBQVcsUUFTcEJVLEdBQWFWLEdBQVcsWUFrQ3hCVyxHQUFvQlgsR0FBVyxtQkEyQnJDLFNBQVM3cUQsR0FBUWc3QixFQUFLNkgsR0FBSSxXQUFDNG9CLEdBQWEsR0FBUyxDQUFDLEdBRWhELEdBQUl6d0IsUUFDRixPQUdGLElBQUkvZ0MsRUFDQWxWLEVBUUosR0FMbUIsaUJBQVJpMkMsSUFFVEEsRUFBTSxDQUFDQSxJQUdMMWpELEdBQVEwakQsR0FFVixJQUFLL2dDLEVBQUksRUFBR2xWLEVBQUlpMkMsRUFBSW5sRCxPQUFRb2tCLEVBQUlsVixFQUFHa1YsSUFDakM0b0MsRUFBR3JyRCxLQUFLLEtBQU13akQsRUFBSS9nQyxHQUFJQSxFQUFHK2dDLE9BRXRCLENBRUwsTUFBTXY5QyxFQUFPZ3VFLEVBQWF6MkUsT0FBTzZuQixvQkFBb0JtK0IsR0FBT2htRCxPQUFPeUksS0FBS3U5QyxHQUNsRWluQixFQUFNeGtFLEVBQUs1SCxPQUNqQixJQUFJOG5CLEVBRUosSUFBSzFELEVBQUksRUFBR0EsRUFBSWdvRCxFQUFLaG9ELElBQ25CMEQsRUFBTWxnQixFQUFLd2MsR0FDWDRvQyxFQUFHcnJELEtBQUssS0FBTXdqRCxFQUFJcjlCLEdBQU1BLEVBQUtxOUIsRUFFakMsQ0FDRixDQUVBLFNBQVMwd0IsR0FBUTF3QixFQUFLcjlCLEdBQ3BCQSxFQUFNQSxFQUFJcFYsY0FDVixNQUFNOUssRUFBT3pJLE9BQU95SSxLQUFLdTlDLEdBQ3pCLElBQ0l3SSxFQURBdnBDLEVBQUl4YyxFQUFLNUgsT0FFYixLQUFPb2tCLEtBQU0sR0FFWCxHQURBdXBDLEVBQU8vbEQsRUFBS3djLEdBQ1IwRCxJQUFRNmxDLEVBQUtqN0MsY0FDZixPQUFPaTdDLEVBR1gsT0FBTyxJQUNULENBRUEsTUFBTW1vQixHQUVzQixvQkFBZmoyRSxXQUFtQ0EsV0FDdkIsb0JBQVRDLEtBQXVCQSxLQUEwQixvQkFBWGhCLE9BQXlCQSxPQUFTaTNFLE9BR2xGQyxHQUFvQjN4QyxJQUFhNndDLEdBQVk3d0MsSUFBWUEsSUFBWXl4QyxHQWtMckVHLElBQWdCQyxHQUtHLG9CQUFmQyxZQUE4Qmh2RCxHQUFlZ3ZELFlBSDlDckIsR0FDRW9CLElBQWNwQixhQUFpQm9CLElBSHJCLElBQUNBLEdBZXRCLE1BaUNNRSxHQUFhcEIsR0FBVyxtQkFXeEIsR0FBaUIsR0FBR3R0RSxvQkFBb0IsQ0FBQ3k5QyxFQUFLOEYsSUFBU3ZqRCxFQUFlL0YsS0FBS3dqRCxFQUFLOEYsR0FBL0QsQ0FBc0U5ckQsT0FBT08sV0FTOUYyMkUsR0FBV3JCLEdBQVcsVUFFdEJzQixHQUFvQixDQUFDbnhCLEVBQUs0VSxLQUM5QixNQUFNd2MsRUFBY3AzRSxPQUFPODVELDBCQUEwQjlULEdBQy9DcXhCLEVBQXFCLENBQUMsRUFFNUJyc0QsR0FBUW9zRCxHQUFhLENBQUN4dUQsRUFBWXprQixNQUNPLElBQW5DeTJELEVBQVFoeUMsRUFBWXprQixFQUFNNmhELEtBQzVCcXhCLEVBQW1CbHpFLEdBQVF5a0IsRUFDN0IsSUFHRjVvQixPQUFPQyxpQkFBaUIrbEQsRUFBS3F4QixFQUFtQixFQXVENUNDLEdBQVEsNkJBRVJDLEdBQVEsYUFFUkMsR0FBVyxDQUNmRCxTQUNBRCxTQUNBRyxZQUFhSCxHQUFRQSxHQUFNNXRFLGNBQWdCNnRFLElBdUQ3QyxJQUNFajFFLFdBQ0EwekUsaUJBQ0EwQixTQXptQkYsU0FBa0IzVyxHQUNoQixPQUFlLE9BQVJBLElBQWlCZ1YsR0FBWWhWLElBQTRCLE9BQXBCQSxFQUFJNTlELGNBQXlCNHlFLEdBQVloVixFQUFJNTlELGNBQ3BGOHlFLEdBQVdsVixFQUFJNTlELFlBQVl1MEUsV0FBYTNXLEVBQUk1OUQsWUFBWXUwRSxTQUFTM1csRUFDeEUsRUF1bUJFNFcsV0EzZGtCaEMsSUFDbEIsTUFBTXJPLEVBQVUsb0JBQ2hCLE9BQU9xTyxJQUNnQixtQkFBYmlDLFVBQTJCakMsYUFBaUJpQyxVQUNwRCxHQUFTcDFFLEtBQUttekUsS0FBV3JPLEdBQ3hCMk8sR0FBV04sRUFBTS96RSxXQUFhK3pFLEVBQU0vekUsYUFBZTBsRSxFQUNyRCxFQXNkRHVRLGtCQXJsQkYsU0FBMkI5VyxHQUN6QixJQUFJeGEsRUFNSixPQUpFQSxFQUQwQixvQkFBaEJ1eEIsYUFBaUNBLFlBQWtCLE9BQ3BEQSxZQUFZQyxPQUFPaFgsR0FFbkIsR0FBVUEsRUFBVSxRQUFNaVYsR0FBY2pWLEVBQUlrUCxRQUVoRDFwQixDQUNULEVBOGtCRVosWUFDQXV3QixZQUNBOEIsVUFyaUJnQnJDLElBQW1CLElBQVZBLElBQTRCLElBQVZBLEVBc2lCM0NRLFlBQ0F2d0IsY0FBYSxHQUNibXdCLGVBQ0Fyd0IsT0FBTSxHQUNOMndCLFVBQ0FDLFVBQ0FZLFlBQ0FqQixjQUNBZ0MsU0FqZmdCbFgsR0FBUW9WLEdBQVNwVixJQUFRa1YsR0FBV2xWLEVBQUltWCxNQWtmeEQxQixxQkFDQU0sZ0JBQ0FQLGNBQ0F2ckQsV0FDQW10RCxNQXpYRixTQUFTQSxJQUNQLE1BQU0sU0FBQ0MsR0FBWXZCLEdBQWlCNTFFLE9BQVNBLE1BQVEsQ0FBQyxFQUNoRHNsRCxFQUFTLENBQUMsRUFDVjh4QixFQUFjLENBQUN0WCxFQUFLcDRDLEtBQ3hCLE1BQU0ydkQsRUFBWUYsR0FBWTFCLEdBQVFud0IsRUFBUTU5QixJQUFRQSxFQUNsRCxHQUFjNDlCLEVBQU8reEIsS0FBZSxHQUFjdlgsR0FDcER4YSxFQUFPK3hCLEdBQWFILEVBQU01eEIsRUFBTyt4QixHQUFZdlgsR0FDcEMsR0FBY0EsR0FDdkJ4YSxFQUFPK3hCLEdBQWFILEVBQU0sQ0FBQyxFQUFHcFgsR0FDckJ6K0QsR0FBUXkrRCxHQUNqQnhhLEVBQU8reEIsR0FBYXZYLEVBQUlsK0QsUUFFeEIwakQsRUFBTyt4QixHQUFhdlgsQ0FDdEIsRUFHRixJQUFLLElBQUk5N0MsRUFBSSxFQUFHbFYsRUFBSXBOLFVBQVU5QixPQUFRb2tCLEVBQUlsVixFQUFHa1YsSUFDM0N0aUIsVUFBVXNpQixJQUFNK0YsR0FBUXJvQixVQUFVc2lCLEdBQUlvekQsR0FFeEMsT0FBTzl4QixDQUNULEVBc1dFbnJCLE9BMVZhLENBQUNqN0IsRUFBR0MsRUFBR2czRCxHQUFVcWYsY0FBYSxDQUFDLEtBQzVDenJELEdBQVE1cUIsR0FBRyxDQUFDMmdFLEVBQUtwNEMsS0FDWHl1QyxHQUFXNmUsR0FBV2xWLEdBQ3hCNWdFLEVBQUV3b0IsR0FBT2ptQixHQUFLcStELEVBQUszSixHQUVuQmozRCxFQUFFd29CLEdBQU9vNEMsQ0FDWCxHQUNDLENBQUMwVixlQUNHdDJFLEdBbVZQa3JCLEtBdGRZdXFELEdBQVFBLEVBQUl2cUQsS0FDeEJ1cUQsRUFBSXZxRCxPQUFTdXFELEVBQUl6dEUsUUFBUSxxQ0FBc0MsSUFzZC9Eb3dFLFNBMVVnQjlrRSxJQUNjLFFBQTFCQSxFQUFRaEMsV0FBVyxLQUNyQmdDLEVBQVVBLEVBQVE1USxNQUFNLElBRW5CNFEsR0F1VVAra0UsU0EzVGUsQ0FBQ3IxRSxFQUFhczFFLEVBQWtCdndDLEVBQU9rdkMsS0FDdERqMEUsRUFBWTVDLFVBQVlQLE9BQU9xSSxPQUFPb3dFLEVBQWlCbDRFLFVBQVc2MkUsR0FDbEVqMEUsRUFBWTVDLFVBQVU0QyxZQUFjQSxFQUNwQ25ELE9BQU9FLGVBQWVpRCxFQUFhLFFBQVMsQ0FDMUMzQyxNQUFPaTRFLEVBQWlCbDRFLFlBRTFCMm5DLEdBQVNsb0MsT0FBT29yQixPQUFPam9CLEVBQVk1QyxVQUFXMm5DLEVBQU0sRUFzVHBEd3dDLGFBMVNtQixDQUFDQyxFQUFXQyxFQUFTNXpCLEVBQVE2ekIsS0FDaEQsSUFBSTN3QyxFQUNBampCLEVBQ0E2bUMsRUFDSixNQUFNZ3RCLEVBQVMsQ0FBQyxFQUloQixHQUZBRixFQUFVQSxHQUFXLENBQUMsRUFFTCxNQUFiRCxFQUFtQixPQUFPQyxFQUU5QixFQUFHLENBR0QsSUFGQTF3QyxFQUFRbG9DLE9BQU82bkIsb0JBQW9COHdELEdBQ25DMXpELEVBQUlpakIsRUFBTXJuQyxPQUNIb2tCLEtBQU0sR0FDWDZtQyxFQUFPNWpCLEVBQU1qakIsR0FDUDR6RCxJQUFjQSxFQUFXL3NCLEVBQU02c0IsRUFBV0MsSUFBY0UsRUFBT2h0QixLQUNuRThzQixFQUFROXNCLEdBQVE2c0IsRUFBVTdzQixHQUMxQmd0QixFQUFPaHRCLElBQVEsR0FHbkI2c0IsR0FBdUIsSUFBWDN6QixHQUFvQmg5QixHQUFlMndELEVBQ2pELE9BQVNBLEtBQWUzekIsR0FBVUEsRUFBTzJ6QixFQUFXQyxLQUFhRCxJQUFjMzRFLE9BQU9PLFdBRXRGLE9BQU9xNEUsQ0FBTyxFQW9SZEcsT0FBTSxHQUNObEQsY0FDQW1ELFNBMVFlLENBQUNwRCxFQUFLcUQsRUFBY3QxRCxLQUNuQ2l5RCxFQUFNenpFLE9BQU95ekUsU0FDSWh4QixJQUFiamhDLEdBQTBCQSxFQUFXaXlELEVBQUkvMEUsVUFDM0M4aUIsRUFBV2l5RCxFQUFJLzBFLFFBRWpCOGlCLEdBQVlzMUQsRUFBYXA0RSxPQUN6QixNQUFNcTRFLEVBQVl0RCxFQUFJM3lFLFFBQVFnMkUsRUFBY3QxRCxHQUM1QyxPQUFzQixJQUFmdTFELEdBQW9CQSxJQUFjdjFELENBQVEsRUFvUWpEKzdCLFFBelBlaTJCLElBQ2YsSUFBS0EsRUFBTyxPQUFPLEtBQ25CLEdBQUlyekUsR0FBUXF6RSxHQUFRLE9BQU9BLEVBQzNCLElBQUkxd0QsRUFBSTB3RCxFQUFNOTBFLE9BQ2QsSUFBS3ExRSxHQUFTanhELEdBQUksT0FBTyxLQUN6QixNQUFNbTRDLEVBQU0sSUFBSTk4RCxNQUFNMmtCLEdBQ3RCLEtBQU9BLEtBQU0sR0FDWG00QyxFQUFJbjRDLEdBQUswd0QsRUFBTTF3RCxHQUVqQixPQUFPbTRDLENBQUcsRUFpUFYrYixhQXRObUIsQ0FBQ256QixFQUFLNkgsS0FDekIsTUFFTTVyRCxHQUZZK2pELEdBQU9BLEVBQUlsa0QsT0FBT0csV0FFVE8sS0FBS3dqRCxHQUVoQyxJQUFJTyxFQUVKLE1BQVFBLEVBQVN0a0QsRUFBU0QsVUFBWXVrRCxFQUFPOWtELE1BQU0sQ0FDakQsTUFBTTIzRSxFQUFPN3lCLEVBQU8vbEQsTUFDcEJxdEQsRUFBR3JyRCxLQUFLd2pELEVBQUtvekIsRUFBSyxHQUFJQSxFQUFLLEdBQzdCLEdBNk1BQyxTQWxNZSxDQUFDQyxFQUFRMUQsS0FDeEIsSUFBSTJELEVBQ0osTUFBTW5jLEVBQU0sR0FFWixLQUF3QyxRQUFoQ21jLEVBQVVELEVBQU90d0UsS0FBSzRzRSxLQUM1QnhZLEVBQUl4MUQsS0FBSzJ4RSxHQUdYLE9BQU9uYyxDQUFHLEVBMkxWNlosY0FDQTF1RSxlQUFjLEdBQ2RpeEUsV0FBWSxHQUNackMscUJBQ0FzQyxjQW5KcUJ6ekIsSUFDckJteEIsR0FBa0JueEIsR0FBSyxDQUFDcDlCLEVBQVl6a0IsS0FFbEMsR0FBSTh4RSxHQUFXandCLEtBQTZELElBQXJELENBQUMsWUFBYSxTQUFVLFVBQVUvaUQsUUFBUWtCLEdBQy9ELE9BQU8sRUFHVCxNQUFNM0QsRUFBUXdsRCxFQUFJN2hELEdBRWI4eEUsR0FBV3oxRSxLQUVoQm9vQixFQUFXcUQsWUFBYSxFQUVwQixhQUFjckQsRUFDaEJBLEVBQVdybkIsVUFBVyxFQUluQnFuQixFQUFXMkMsTUFDZDNDLEVBQVcyQyxJQUFNLEtBQ2YsTUFBTXhxQixNQUFNLHFDQUF3Q29ELEVBQU8sSUFBSyxHQUVwRSxHQUNBLEVBNkhGdTFFLFlBMUhrQixDQUFDQyxFQUFlQyxLQUNsQyxNQUFNNXpCLEVBQU0sQ0FBQyxFQUVQNnpCLEVBQVV6YyxJQUNkQSxFQUFJcHlDLFNBQVF4cUIsSUFDVndsRCxFQUFJeGxELElBQVMsQ0FBSSxHQUNqQixFQUtKLE9BRkE4QixHQUFRcTNFLEdBQWlCRSxFQUFPRixHQUFpQkUsRUFBTzEzRSxPQUFPdzNFLEdBQWV4NEUsTUFBTXk0RSxJQUU3RTV6QixDQUFHLEVBZ0hWOHpCLFlBM0xrQmxFLEdBQ1hBLEVBQUlyaUUsY0FBY3BMLFFBQVEseUJBQy9CLFNBQWtCL0YsRUFBRzIzRSxFQUFJQyxHQUN2QixPQUFPRCxFQUFHcndFLGNBQWdCc3dFLENBQzVCLElBd0xGbHhCLEtBOUdXLE9BK0dYbXhCLGVBN0dxQixDQUFDejVFLEVBQU9nc0IsS0FDN0Joc0IsR0FBU0EsRUFDRmdWLE9BQU8wa0UsU0FBUzE1RSxHQUFTQSxFQUFRZ3NCLEdBNEd4Q2txRCxXQUNBRSxPQUFRRCxHQUNSRSxvQkFDQVcsWUFDQTJDLGVBbkdxQixDQUFDbG1DLEVBQU8sR0FBSW1tQyxFQUFXNUMsR0FBU0MsZUFDckQsSUFBSTdCLEVBQU0sR0FDVixNQUFNLE9BQUMvMEUsR0FBVXU1RSxFQUNqQixLQUFPbm1DLEtBQ0wyaEMsR0FBT3dFLEVBQVN0NUUsS0FBSzJZLFNBQVc1WSxFQUFPLEdBR3pDLE9BQU8rMEUsQ0FBRyxFQTZGVnlFLG9CQW5GRixTQUE2QjFFLEdBQzNCLFNBQVVBLEdBQVNNLEdBQVdOLEVBQU0yRSxTQUF5QyxhQUE5QjNFLEVBQU03ekUsT0FBT3MwRSxjQUErQlQsRUFBTTd6RSxPQUFPRyxVQUMxRyxFQWtGRXM0RSxhQWhGb0J2MEIsSUFDcEIsTUFBTTloRCxFQUFRLElBQUk1RCxNQUFNLElBRWxCazZFLEVBQVEsQ0FBQ3J4RSxFQUFROGIsS0FFckIsR0FBSWt4RCxHQUFTaHRFLEdBQVMsQ0FDcEIsR0FBSWpGLEVBQU1qQixRQUFRa0csSUFBVyxFQUMzQixPQUdGLEtBQUssV0FBWUEsR0FBUyxDQUN4QmpGLEVBQU0rZ0IsR0FBSzliLEVBQ1gsTUFBTTRZLEVBQVN6ZixHQUFRNkcsR0FBVSxHQUFLLENBQUMsRUFTdkMsT0FQQTZoQixHQUFRN2hCLEdBQVEsQ0FBQzNJLEVBQU9tb0IsS0FDdEIsTUFBTTh4RCxFQUFlRCxFQUFNaDZFLEVBQU95a0IsRUFBSSxJQUNyQzh3RCxHQUFZMEUsS0FBa0IxNEQsRUFBTzRHLEdBQU84eEQsRUFBYSxJQUc1RHYyRSxFQUFNK2dCLFFBQUsyL0IsRUFFSjdpQyxDQUNULENBQ0YsQ0FFQSxPQUFPNVksQ0FBTSxFQUdmLE9BQU9xeEUsRUFBTXgwQixFQUFLLEVBQUUsR0Nsb0J0QixTQUFTMDBCLEdBQVczMkUsRUFBUzB6QixFQUFNdm5CLEVBQVF5cUUsRUFBU3BNLEdBQ2xEeHRFLE1BQU15QixLQUFLdkIsTUFFUEYsTUFBTWtELGtCQUNSbEQsTUFBTWtELGtCQUFrQmhELEtBQU1BLEtBQUtrQyxhQUVuQ2xDLEtBQUtpRCxPQUFRLElBQUtuRCxPQUFTbUQsTUFHN0JqRCxLQUFLOEMsUUFBVUEsRUFDZjlDLEtBQUtrRCxLQUFPLGFBQ1pzekIsSUFBU3gyQixLQUFLdzJCLEtBQU9BLEdBQ3JCdm5CLElBQVdqUCxLQUFLaVAsT0FBU0EsR0FDekJ5cUUsSUFBWTE1RSxLQUFLMDVFLFFBQVVBLEdBQzNCcE0sSUFBYXR0RSxLQUFLc3RFLFNBQVdBLEVBQy9CLENBRUFxTSxHQUFNcEMsU0FBU2tDLEdBQVkzNUUsTUFBTyxDQUNoQ3dVLE9BQVEsV0FDTixNQUFPLENBRUx4UixRQUFTOUMsS0FBSzhDLFFBQ2RJLEtBQU1sRCxLQUFLa0QsS0FFWDR5RCxZQUFhOTFELEtBQUs4MUQsWUFDbEI1OUIsT0FBUWw0QixLQUFLazRCLE9BRWJvM0MsU0FBVXR2RSxLQUFLc3ZFLFNBQ2ZDLFdBQVl2dkUsS0FBS3V2RSxXQUNqQnFLLGFBQWM1NUUsS0FBSzQ1RSxhQUNuQjMyRSxNQUFPakQsS0FBS2lELE1BRVpnTSxPQUFRMHFFLEdBQU1MLGFBQWF0NUUsS0FBS2lQLFFBQ2hDdW5CLEtBQU14MkIsS0FBS3cyQixLQUNYdzZDLE9BQVFoeEUsS0FBS3N0RSxVQUFZdHRFLEtBQUtzdEUsU0FBUzBELE9BQVNoeEUsS0FBS3N0RSxTQUFTMEQsT0FBUyxLQUUzRSxJQUdGLE1BQU0sR0FBWXlJLEdBQVduNkUsVUFDdkI2MkUsR0FBYyxDQUFDLEVBRXJCLENBQ0UsdUJBQ0EsaUJBQ0EsZUFDQSxZQUNBLGNBQ0EsNEJBQ0EsaUJBQ0EsbUJBQ0Esa0JBQ0EsZUFDQSxrQkFDQSxtQkFFQXBzRCxTQUFReU0sSUFDUjIvQyxHQUFZMy9DLEdBQVEsQ0FBQ2ozQixNQUFPaTNCLEVBQUssSUFHbkN6M0IsT0FBT0MsaUJBQWlCeTZFLEdBQVl0RCxJQUNwQ3AzRSxPQUFPRSxlQUFlLEdBQVcsZUFBZ0IsQ0FBQ00sT0FBTyxJQUd6RGs2RSxHQUFXbGQsS0FBTyxDQUFDMTVELEVBQU8yekIsRUFBTXZuQixFQUFReXFFLEVBQVNwTSxFQUFVdU0sS0FDekQsTUFBTUMsRUFBYS82RSxPQUFPcUksT0FBTyxJQWdCakMsT0FkQXV5RSxHQUFNbEMsYUFBYTUwRSxFQUFPaTNFLEdBQVksU0FBZ0IvMEIsR0FDcEQsT0FBT0EsSUFBUWpsRCxNQUFNUixTQUN2QixJQUFHdXJELEdBQ2UsaUJBQVRBLElBR1Q0dUIsR0FBV2w0RSxLQUFLdTRFLEVBQVlqM0UsRUFBTUMsUUFBUzB6QixFQUFNdm5CLEVBQVF5cUUsRUFBU3BNLEdBRWxFd00sRUFBV0MsTUFBUWwzRSxFQUVuQmkzRSxFQUFXNTJFLEtBQU9MLEVBQU1LLEtBRXhCMjJFLEdBQWU5NkUsT0FBT29yQixPQUFPMnZELEVBQVlELEdBRWxDQyxDQUFVLEVBR25CLFlDckZBLFNBQVNFLEdBQVl0RixHQUNuQixPQUFPaUYsR0FBTWgxQixjQUFjK3ZCLElBQVVpRixHQUFNdDRFLFFBQVFxekUsRUFDckQsQ0FTQSxTQUFTdUYsR0FBZXZ5RCxHQUN0QixPQUFPaXlELEdBQU01QixTQUFTcndELEVBQUssTUFBUUEsRUFBSTlsQixNQUFNLEdBQUksR0FBSzhsQixDQUN4RCxDQVdBLFNBQVN3eUQsR0FBVWwzRCxFQUFNMEUsRUFBS3l5RCxHQUM1QixPQUFLbjNELEVBQ0VBLEVBQUt0WCxPQUFPZ2MsR0FBSzYyQixLQUFJLFNBQWM2N0IsRUFBT3AyRCxHQUcvQyxPQURBbzJELEVBQVFILEdBQWVHLElBQ2ZELEdBQVFuMkQsRUFBSSxJQUFNbzJELEVBQVEsSUFBTUEsQ0FDMUMsSUFBR3Z4RSxLQUFLc3hFLEVBQU8sSUFBTSxJQUxIenlELENBTXBCLENBYUEsTUFBTTJ5RCxHQUFhVixHQUFNbEMsYUFBYWtDLEdBQU8sQ0FBQyxFQUFHLE1BQU0sU0FBZ0I5dUIsR0FDckUsTUFBTyxXQUFXL2xELEtBQUsrbEQsRUFDekIsSUE4SkEsR0FySUEsU0FBb0I5RixFQUFLdTFCLEVBQVUxdUQsR0FDakMsSUFBSyt0RCxHQUFNekUsU0FBU253QixHQUNsQixNQUFNLElBQUlua0QsVUFBVSw0QkFJdEIwNUUsRUFBV0EsR0FBWSxJQUF5QjNELFNBWWhELE1BQU00RCxHQVROM3VELEVBQVUrdEQsR0FBTWxDLGFBQWE3ckQsRUFBUyxDQUNwQzJ1RCxZQUFZLEVBQ1pKLE1BQU0sRUFDTkssU0FBUyxJQUNSLEdBQU8sU0FBaUJDLEVBQVF2eUUsR0FFakMsT0FBUXl4RSxHQUFNN0UsWUFBWTVzRSxFQUFPdXlFLEdBQ25DLEtBRTJCRixXQUVyQkcsRUFBVTl1RCxFQUFROHVELFNBQVdDLEVBQzdCUixFQUFPdnVELEVBQVF1dUQsS0FDZkssRUFBVTV1RCxFQUFRNHVELFFBRWxCSSxHQURRaHZELEVBQVFpdkQsTUFBd0Isb0JBQVRBLE1BQXdCQSxPQUNwQ2xCLEdBQU1QLG9CQUFvQmtCLEdBRW5ELElBQUtYLEdBQU0zRSxXQUFXMEYsR0FDcEIsTUFBTSxJQUFJOTVFLFVBQVUsOEJBR3RCLFNBQVNrNkUsRUFBYXY3RSxHQUNwQixHQUFjLE9BQVZBLEVBQWdCLE1BQU8sR0FFM0IsR0FBSW82RSxHQUFNbDFCLE9BQU9sbEQsR0FDZixPQUFPQSxFQUFNa1YsY0FHZixJQUFLbW1FLEdBQVdqQixHQUFNdEUsT0FBTzkxRSxHQUMzQixNQUFNLElBQUksR0FBVyxnREFHdkIsT0FBSW82RSxHQUFNNUUsY0FBY3gxRSxJQUFVbzZFLEdBQU05RCxhQUFhdDJFLEdBQzVDcTdFLEdBQTJCLG1CQUFUQyxLQUFzQixJQUFJQSxLQUFLLENBQUN0N0UsSUFBVXc3RSxPQUFPeGUsS0FBS2g5RCxHQUcxRUEsQ0FDVCxDQVlBLFNBQVNvN0UsRUFBZXA3RSxFQUFPbW9CLEVBQUsxRSxHQUNsQyxJQUFJbTVDLEVBQU01OEQsRUFFVixHQUFJQSxJQUFVeWpCLEdBQXlCLGlCQUFWempCLEVBQzNCLEdBQUlvNkUsR0FBTTVCLFNBQVNyd0QsRUFBSyxNQUV0QkEsRUFBTTZ5RCxFQUFhN3lELEVBQU1BLEVBQUk5bEIsTUFBTSxHQUFJLEdBRXZDckMsRUFBUWtSLEtBQUtxRixVQUFVdlcsUUFDbEIsR0FDSm82RSxHQUFNdDRFLFFBQVE5QixJQW5HdkIsU0FBcUI0OEQsR0FDbkIsT0FBT3dkLEdBQU10NEUsUUFBUTg2RCxLQUFTQSxFQUFJOE8sS0FBSytPLEdBQ3pDLENBaUdpQ2dCLENBQVl6N0UsS0FDbkNvNkUsR0FBTXJFLFdBQVcvMUUsSUFBVW82RSxHQUFNNUIsU0FBU3J3RCxFQUFLLFNBQVd5MEMsRUFBTXdkLEdBQU1sN0IsUUFBUWwvQyxJQVloRixPQVRBbW9CLEVBQU11eUQsR0FBZXZ5RCxHQUVyQnkwQyxFQUFJcHlDLFNBQVEsU0FBY3d2QixFQUFJMVIsSUFDMUI4eEMsR0FBTTdFLFlBQVl2N0IsSUFBYyxPQUFQQSxHQUFnQitnQyxFQUFTakIsUUFFdEMsSUFBWm1CLEVBQW1CTixHQUFVLENBQUN4eUQsR0FBTW1nQixFQUFPc3lDLEdBQXFCLE9BQVpLLEVBQW1COXlELEVBQU1BLEVBQU0sS0FDbkZvekQsRUFBYXZoQyxHQUVqQixLQUNPLEVBSVgsUUFBSXlnQyxHQUFZejZFLEtBSWhCKzZFLEVBQVNqQixPQUFPYSxHQUFVbDNELEVBQU0wRSxFQUFLeXlELEdBQU9XLEVBQWF2N0UsS0FFbEQsRUFDVCxDQUVBLE1BQU0wRCxFQUFRLEdBRVJnNEUsRUFBaUJsOEUsT0FBT29yQixPQUFPa3dELEdBQVksQ0FDL0NNLGlCQUNBRyxlQUNBZCxpQkF5QkYsSUFBS0wsR0FBTXpFLFNBQVNud0IsR0FDbEIsTUFBTSxJQUFJbmtELFVBQVUsMEJBS3RCLE9BNUJBLFNBQVNzNkUsRUFBTTM3RSxFQUFPeWpCLEdBQ3BCLElBQUkyMkQsR0FBTTdFLFlBQVl2MUUsR0FBdEIsQ0FFQSxJQUE4QixJQUExQjBELEVBQU1qQixRQUFRekMsR0FDaEIsTUFBTU8sTUFBTSxrQ0FBb0NrakIsRUFBS25hLEtBQUssTUFHNUQ1RixFQUFNMEQsS0FBS3BILEdBRVhvNkUsR0FBTTV2RCxRQUFReHFCLEdBQU8sU0FBY2c2QyxFQUFJN3hCLElBS3RCLE9BSkVpeUQsR0FBTTdFLFlBQVl2N0IsSUFBYyxPQUFQQSxJQUFnQm1oQyxFQUFRbjVFLEtBQ2hFKzRFLEVBQVUvZ0MsRUFBSW9nQyxHQUFNajFCLFNBQVNoOUIsR0FBT0EsRUFBSTBDLE9BQVMxQyxFQUFLMUUsRUFBTWk0RCxLQUk1REMsRUFBTTNoQyxFQUFJdjJCLEVBQU9BLEVBQUt0WCxPQUFPZ2MsR0FBTyxDQUFDQSxHQUV6QyxJQUVBemtCLEVBQU00TixLQWxCOEIsQ0FtQnRDLENBTUFxcUUsQ0FBTW4yQixHQUVDdTFCLENBQ1QsRUM1TUEsU0FBU2EsR0FBT3hHLEdBQ2QsTUFBTXlHLEVBQVUsQ0FDZCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLE1BQU8sSUFDUCxNQUFPLE1BRVQsT0FBTzV5RSxtQkFBbUJtc0UsR0FBS3p0RSxRQUFRLG9CQUFvQixTQUFrQndCLEdBQzNFLE9BQU8weUUsRUFBUTF5RSxFQUNqQixHQUNGLENBVUEsU0FBUzJ5RSxHQUFxQkMsRUFBUTF2RCxHQUNwQzVyQixLQUFLdTdFLE9BQVMsR0FFZEQsR0FBVSxHQUFXQSxFQUFRdDdFLEtBQU00ckIsRUFDckMsQ0FFQSxNQUFNLEdBQVl5dkQsR0FBcUIvN0UsVUFFdkMsR0FBVSs1RSxPQUFTLFNBQWdCbjJFLEVBQU0zRCxHQUN2Q1MsS0FBS3U3RSxPQUFPNTBFLEtBQUssQ0FBQ3pELEVBQU0zRCxHQUMxQixFQUVBLEdBQVVvQixTQUFXLFNBQWtCNjZFLEdBQ3JDLE1BQU1DLEVBQVVELEVBQVUsU0FBU2o4RSxHQUNqQyxPQUFPaThFLEVBQVFqNkUsS0FBS3ZCLEtBQU1ULEVBQU80N0UsR0FDbkMsRUFBSUEsR0FFSixPQUFPbjdFLEtBQUt1N0UsT0FBT2g5QixLQUFJLFNBQWM0NUIsR0FDbkMsT0FBT3NELEVBQVF0RCxFQUFLLElBQU0sSUFBTXNELEVBQVF0RCxFQUFLLEdBQy9DLEdBQUcsSUFBSXR2RSxLQUFLLElBQ2QsRUFFQSxZQzVDQSxTQUFTLEdBQU9pM0QsR0FDZCxPQUFPdDNELG1CQUFtQnMzRCxHQUN4QjU0RCxRQUFRLFFBQVMsS0FDakJBLFFBQVEsT0FBUSxLQUNoQkEsUUFBUSxRQUFTLEtBQ2pCQSxRQUFRLE9BQVEsS0FDaEJBLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxRQUFTLElBQ3JCLENBV2UsU0FBU3cwRSxHQUFTeC9ELEVBQUtvL0QsRUFBUTF2RCxHQUU1QyxJQUFLMHZELEVBQ0gsT0FBT3AvRCxFQUdULE1BQU11L0QsRUFBVTd2RCxHQUFXQSxFQUFRdXZELFFBQVUsR0FFdkNRLEVBQWMvdkQsR0FBV0EsRUFBUWd3RCxVQUV2QyxJQUFJQyxFQVVKLEdBUEVBLEVBREVGLEVBQ2lCQSxFQUFZTCxFQUFRMXZELEdBRXBCK3RELEdBQU1wRSxrQkFBa0IrRixHQUN6Q0EsRUFBTzM2RSxXQUNQLElBQUksR0FBcUIyNkUsRUFBUTF2RCxHQUFTanJCLFNBQVM4NkUsR0FHbkRJLEVBQWtCLENBQ3BCLE1BQU1DLEVBQWdCNS9ELEVBQUlsYSxRQUFRLE1BRVgsSUFBbkI4NUUsSUFDRjUvRCxFQUFNQSxFQUFJdGEsTUFBTSxFQUFHazZFLElBRXJCNS9ELEtBQThCLElBQXRCQSxFQUFJbGEsUUFBUSxLQUFjLElBQU0sS0FBTzY1RSxDQUNqRCxDQUVBLE9BQU8zL0QsQ0FDVCxDQ1FBLFNBbEVBLE1BQ0VoYSxjQUNFbEMsS0FBSys3RSxTQUFXLEVBQ2xCLENBVUF6dEIsSUFBSWdJLEVBQVdFLEVBQVU1cUMsR0FPdkIsT0FOQTVyQixLQUFLKzdFLFNBQVNwMUUsS0FBSyxDQUNqQjJ2RCxZQUNBRSxXQUNBd2xCLGNBQWFwd0QsR0FBVUEsRUFBUW93RCxZQUMvQkMsUUFBU3J3RCxFQUFVQSxFQUFRcXdELFFBQVUsT0FFaENqOEUsS0FBSys3RSxTQUFTbjhFLE9BQVMsQ0FDaEMsQ0FTQXM4RSxNQUFNN2tFLEdBQ0FyWCxLQUFLKzdFLFNBQVMxa0UsS0FDaEJyWCxLQUFLKzdFLFNBQVMxa0UsR0FBTSxLQUV4QixDQU9BbU0sUUFDTXhqQixLQUFLKzdFLFdBQ1AvN0UsS0FBSys3RSxTQUFXLEdBRXBCLENBWUFoeUQsUUFBUTZpQyxHQUNOK3NCLEdBQU01dkQsUUFBUS9wQixLQUFLKzdFLFVBQVUsU0FBd0IzNUUsR0FDekMsT0FBTkEsR0FDRndxRCxFQUFHeHFELEVBRVAsR0FDRixHQ2pFRixJQUNFKzVFLG1CQUFtQixFQUNuQkMsbUJBQW1CLEVBQ25CQyxxQkFBcUIsR0NnRHZCLElBQ0VDLFdBQVcsRUFDWEMsUUFBUyxDQUNQQyxnQkNyRHNDLG9CQUFwQkEsZ0JBQWtDQSxnQkFBa0IsR0RzRHRFN0YsU0V2RCtCLG9CQUFiQSxTQUEyQkEsU0FBVyxLRndEeERrRSxLR3hEMkIsb0JBQVRBLEtBQXVCQSxLQUFPLE1IMERsRDRCLHFCQXZDMkIsTUFDM0IsSUFBSUMsRUFDSixPQUF5QixvQkFBZDl5RSxXQUN5QixpQkFBakM4eUUsRUFBVTl5RSxVQUFVOHlFLFVBQ1QsaUJBQVpBLEdBQ1ksT0FBWkEsSUFLdUIsb0JBQVhoK0UsUUFBOEMsb0JBQWJrSCxRQUNoRCxFQVg0QixHQXdDM0IrMkUsOEJBaEIrQixvQkFBdEJDLG1CQUVQbDlFLGdCQUFnQms5RSxtQkFDYyxtQkFBdkJsOUUsS0FBS3FyRCxjQWNkOHhCLFVBQVcsQ0FBQyxPQUFRLFFBQVMsT0FBUSxPQUFRLE1BQU8sU0k2QnRELEdBM0NBLFNBQXdCdkMsR0FDdEIsU0FBU3dDLEVBQVU5NUQsRUFBTXpqQixFQUFPdWhCLEVBQVErbUIsR0FDdEMsSUFBSTNrQyxFQUFPOGYsRUFBSzZrQixLQUNoQixNQUFNazFDLEVBQWV4b0UsT0FBTzBrRSxVQUFVLzFFLEdBQ2hDODVFLEVBQVNuMUMsR0FBUzdrQixFQUFLcGpCLE9BRzdCLE9BRkFzRCxHQUFRQSxHQUFReTJFLEdBQU10NEUsUUFBUXlmLEdBQVVBLEVBQU9saEIsT0FBU3NELEVBRXBEODVFLEdBQ0VyRCxHQUFNcEIsV0FBV3ozRCxFQUFRNWQsR0FDM0I0ZCxFQUFPNWQsR0FBUSxDQUFDNGQsRUFBTzVkLEdBQU8zRCxHQUU5QnVoQixFQUFPNWQsR0FBUTNELEdBR1R3OUUsSUFHTGo4RCxFQUFPNWQsSUFBVXkyRSxHQUFNekUsU0FBU3AwRCxFQUFPNWQsTUFDMUM0ZCxFQUFPNWQsR0FBUSxJQUdGNDVFLEVBQVU5NUQsRUFBTXpqQixFQUFPdWhCLEVBQU81ZCxHQUFPMmtDLElBRXRDOHhDLEdBQU10NEUsUUFBUXlmLEVBQU81ZCxNQUNqQzRkLEVBQU81ZCxHQTVDYixTQUF1Qmk1RCxHQUNyQixNQUFNcFgsRUFBTSxDQUFDLEVBQ1B2OUMsRUFBT3pJLE9BQU95SSxLQUFLMjBELEdBQ3pCLElBQUluNEMsRUFDSixNQUFNZ29ELEVBQU14a0UsRUFBSzVILE9BQ2pCLElBQUk4bkIsRUFDSixJQUFLMUQsRUFBSSxFQUFHQSxFQUFJZ29ELEVBQUtob0QsSUFDbkIwRCxFQUFNbGdCLEVBQUt3YyxHQUNYK2dDLEVBQUlyOUIsR0FBT3kwQyxFQUFJejBDLEdBRWpCLE9BQU9xOUIsQ0FDVCxDQWlDcUJrNEIsQ0FBY244RCxFQUFPNWQsTUFHOUI2NUUsRUFDVixDQUVBLEdBQUlwRCxHQUFNakQsV0FBVzRELElBQWFYLEdBQU0zRSxXQUFXc0YsRUFBUzRDLFNBQVUsQ0FDcEUsTUFBTW40QixFQUFNLENBQUMsRUFNYixPQUpBNDBCLEdBQU16QixhQUFhb0MsR0FBVSxDQUFDcDNFLEVBQU0zRCxLQUNsQ3U5RSxFQXZFTixTQUF1QjU1RSxHQUtyQixPQUFPeTJFLEdBQU12QixTQUFTLGdCQUFpQmwxRSxHQUFNcTdDLEtBQUk3MUMsR0FDM0IsT0FBYkEsRUFBTSxHQUFjLEdBQUtBLEVBQU0sSUFBTUEsRUFBTSxJQUV0RCxDQStEZ0J5MEUsQ0FBY2o2RSxHQUFPM0QsRUFBT3dsRCxFQUFLLEVBQUUsSUFHeENBLENBQ1QsQ0FFQSxPQUFPLElBQ1QsRUMvRU1xNEIsR0FBdUIsQ0FDM0Isb0JBQWdCejVCLEdBNEJaMDVCLEdBQVcsQ0FFZkMsYUFBYyxHQUVkQyxRQUFTLENBQUMsTUFBTyxRQUVqQkMsaUJBQWtCLENBQUMsU0FBMEI3N0QsRUFBTTg3RCxHQUNqRCxNQUFNQyxFQUFjRCxFQUFRRSxrQkFBb0IsR0FDMUNDLEVBQXFCRixFQUFZMTdFLFFBQVEscUJBQXVCLEVBQ2hFNjdFLEVBQWtCbEUsR0FBTXpFLFNBQVN2ekQsR0FRdkMsR0FOSWs4RCxHQUFtQmxFLEdBQU0zRCxXQUFXcjBELEtBQ3RDQSxFQUFPLElBQUlnMUQsU0FBU2gxRCxJQUdIZzRELEdBQU1qRCxXQUFXLzBELEdBR2xDLE9BQUtpOEQsR0FHRUEsRUFBcUJudEUsS0FBS3FGLFVBQVUsR0FBZTZMLElBRmpEQSxFQUtYLEdBQUlnNEQsR0FBTTVFLGNBQWNwekQsSUFDdEJnNEQsR0FBTWxELFNBQVM5MEQsSUFDZmc0RCxHQUFNM0MsU0FBU3IxRCxJQUNmZzRELEdBQU12RSxPQUFPenpELElBQ2JnNEQsR0FBTXRFLE9BQU8xekQsR0FFYixPQUFPQSxFQUVULEdBQUlnNEQsR0FBTS9DLGtCQUFrQmoxRCxHQUMxQixPQUFPQSxFQUFLcXRELE9BRWQsR0FBSTJLLEdBQU1wRSxrQkFBa0I1ekQsR0FFMUIsT0FEQTg3RCxFQUFRSyxlQUFlLG1EQUFtRCxHQUNuRW44RCxFQUFLaGhCLFdBR2QsSUFBSTIwRSxFQUVKLEdBQUl1SSxFQUFpQixDQUNuQixHQUFJSCxFQUFZMTdFLFFBQVEsc0NBQXdDLEVBQzlELE9DN0VPLFNBQTBCMmYsRUFBTWlLLEdBQzdDLE9BQU8sR0FBV2pLLEVBQU0sSUFBSSwyQkFBb0M1aUIsT0FBT29yQixPQUFPLENBQzVFdXdELFFBQVMsU0FBU243RSxFQUFPbW9CLEVBQUsxRSxFQUFNKzZELEdBQ2xDLE9BQUksV0FBbUJwRSxHQUFNbEQsU0FBU2wzRSxJQUNwQ1MsS0FBS3E1RSxPQUFPM3hELEVBQUtub0IsRUFBTW9CLFNBQVMsWUFDekIsR0FHRm85RSxFQUFRcEQsZUFBZW41RSxNQUFNeEIsS0FBTTBCLFVBQzVDLEdBQ0NrcUIsR0FDTCxDRGtFZW95RCxDQUFpQnI4RCxFQUFNM2hCLEtBQUtpK0UsZ0JBQWdCdDlFLFdBR3JELElBQUsyMEUsRUFBYXFFLEdBQU1yRSxXQUFXM3pELEtBQVUrN0QsRUFBWTE3RSxRQUFRLHdCQUEwQixFQUFHLENBQzVGLE1BQU1rOEUsRUFBWWwrRSxLQUFLNnNFLEtBQU83c0UsS0FBSzZzRSxJQUFJOEosU0FFdkMsT0FBTyxHQUNMckIsRUFBYSxDQUFDLFVBQVczekQsR0FBUUEsRUFDakN1OEQsR0FBYSxJQUFJQSxFQUNqQmwrRSxLQUFLaStFLGVBRVQsQ0FDRixDQUVBLE9BQUlKLEdBQW1CRCxHQUNyQkgsRUFBUUssZUFBZSxvQkFBb0IsR0ExRWpELFNBQXlCSyxFQUFVQyxFQUFRNUMsR0FDekMsR0FBSTdCLEdBQU1qMUIsU0FBU3k1QixHQUNqQixJQUVFLE9BREEsRUFBVzF0RSxLQUFLQyxPQUFPeXRFLEdBQ2hCeEUsR0FBTXZ2RCxLQUFLK3pELEVBQ3BCLENBQUUsTUFBTy85RSxHQUNQLEdBQWUsZ0JBQVhBLEVBQUU4QyxLQUNKLE1BQU05QyxDQUVWLENBR0YsT0FBTyxFQUFZcVEsS0FBS3FGLFdBQVdxb0UsRUFDckMsQ0E4RGFFLENBQWdCMThELElBR2xCQSxDQUNULEdBRUEyOEQsa0JBQW1CLENBQUMsU0FBMkIzOEQsR0FDN0MsTUFBTTI3RCxFQUFldDlFLEtBQUtzOUUsY0FBZ0JELEdBQVNDLGFBQzdDbEIsRUFBb0JrQixHQUFnQkEsRUFBYWxCLGtCQUNqRG1DLEVBQXNDLFNBQXRCditFLEtBQUt3K0UsYUFFM0IsR0FBSTc4RCxHQUFRZzRELEdBQU1qMUIsU0FBUy9pQyxLQUFXeTZELElBQXNCcDhFLEtBQUt3K0UsY0FBaUJELEdBQWdCLENBQ2hHLE1BQ01FLElBRG9CbkIsR0FBZ0JBLEVBQWFuQixvQkFDUG9DLEVBRWhELElBQ0UsT0FBTzl0RSxLQUFLQyxNQUFNaVIsRUFDcEIsQ0FBRSxNQUFPdmhCLEdBQ1AsR0FBSXErRSxFQUFtQixDQUNyQixHQUFlLGdCQUFYcitFLEVBQUU4QyxLQUNKLE1BQU0sUUFBZ0I5QyxFQUFHLG9CQUE2QkosS0FBTSxLQUFNQSxLQUFLc3RFLFVBRXpFLE1BQU1sdEUsQ0FDUixDQUNGLENBQ0YsQ0FFQSxPQUFPdWhCLENBQ1QsR0FNQXpTLFFBQVMsRUFFVHd2RSxlQUFnQixhQUNoQkMsZUFBZ0IsZUFFaEJDLGtCQUFtQixFQUNuQkMsZUFBZ0IsRUFFaEJoUyxJQUFLLENBQ0g4SixTQUFVLG9CQUNWa0UsS0FBTSxpQkFHUmlFLGVBQWdCLFNBQXdCOU4sR0FDdEMsT0FBT0EsR0FBVSxLQUFPQSxFQUFTLEdBQ25DLEVBRUF5TSxRQUFTLENBQ1BzQixPQUFRLENBQ04sT0FBVSx1Q0FLaEJwRixHQUFNNXZELFFBQVEsQ0FBQyxTQUFVLE1BQU8sU0FBUyxTQUE2QmxKLEdBQ3BFdzhELEdBQVNJLFFBQVE1OEQsR0FBVSxDQUFDLENBQzlCLElBRUE4NEQsR0FBTTV2RCxRQUFRLENBQUMsT0FBUSxNQUFPLFVBQVUsU0FBK0JsSixHQUNyRXc4RCxHQUFTSSxRQUFRNThELEdBQVU4NEQsR0FBTXpDLE1BQU1rRyxHQUN6QyxJQUVBLFlFL0pNNEIsR0FBb0JyRixHQUFNbEIsWUFBWSxDQUMxQyxNQUFPLGdCQUFpQixpQkFBa0IsZUFBZ0IsT0FDMUQsVUFBVyxPQUFRLE9BQVEsb0JBQXFCLHNCQUNoRCxnQkFBaUIsV0FBWSxlQUFnQixzQkFDN0MsVUFBVyxjQUFlLGVDTHRCd0csR0FBYXArRSxPQUFPLGFBRTFCLFNBQVNxK0UsR0FBZ0JDLEdBQ3ZCLE9BQU9BLEdBQVVqK0UsT0FBT2krRSxHQUFRLzBELE9BQU85WCxhQUN6QyxDQUVBLFNBQVM4c0UsR0FBZTcvRSxHQUN0QixPQUFjLElBQVZBLEdBQTRCLE1BQVRBLEVBQ2RBLEVBR0ZvNkUsR0FBTXQ0RSxRQUFROUIsR0FBU0EsRUFBTWcvQyxJQUFJNmdDLElBQWtCbCtFLE9BQU8zQixFQUNuRSxDQWdCQSxTQUFTOC9FLEdBQWlCcDdDLEVBQVMxa0MsRUFBTzQvRSxFQUFRcDdCLEVBQVF1N0IsR0FDeEQsT0FBSTNGLEdBQU0zRSxXQUFXanhCLEdBQ1pBLEVBQU94aUQsS0FBS3ZCLEtBQU1ULEVBQU80L0UsSUFHOUJHLElBQ0YvL0UsRUFBUTQvRSxHQUdMeEYsR0FBTWoxQixTQUFTbmxELEdBRWhCbzZFLEdBQU1qMUIsU0FBU1gsSUFDaUIsSUFBM0J4a0QsRUFBTXlDLFFBQVEraEQsR0FHbkI0MUIsR0FBTTFELFNBQVNseUIsR0FDVkEsRUFBT2ovQyxLQUFLdkYsUUFEckIsT0FOQSxFQVNGLENBc0JBLE1BQU1nZ0YsR0FDSnI5RSxZQUFZdTdFLEdBQ1ZBLEdBQVd6OUUsS0FBS3NxQixJQUFJbXpELEVBQ3RCLENBRUFuekQsSUFBSTYwRCxFQUFRSyxFQUFnQkMsR0FDMUIsTUFBTS8vRSxFQUFPTSxLQUViLFNBQVMwL0UsRUFBVUMsRUFBUUMsRUFBU0MsR0FDbEMsTUFBTUMsRUFBVVosR0FBZ0JVLEdBRWhDLElBQUtFLEVBQ0gsTUFBTSxJQUFJaGdGLE1BQU0sMENBR2xCLE1BQU00bkIsRUFBTWl5RCxHQUFNbEUsUUFBUS8xRSxFQUFNb2dGLEtBRTVCcDRELFFBQXFCaThCLElBQWRqa0QsRUFBS2dvQixLQUFtQyxJQUFibTRELFFBQW1DbDhCLElBQWJrOEIsSUFBd0MsSUFBZG5nRixFQUFLZ29CLE1BQ3pGaG9CLEVBQUtnb0IsR0FBT2s0RCxHQUFXUixHQUFlTyxHQUUxQyxDQUVBLE1BQU1JLEVBQWEsQ0FBQ3RDLEVBQVNvQyxJQUMzQmxHLEdBQU01dkQsUUFBUTB6RCxHQUFTLENBQUNrQyxFQUFRQyxJQUFZRixFQUFVQyxFQUFRQyxFQUFTQyxLQVV6RSxPQVJJbEcsR0FBTWgxQixjQUFjdzZCLElBQVdBLGFBQWtCbi9FLEtBQUtrQyxZQUN4RDY5RSxFQUFXWixFQUFRSyxHQUNYN0YsR0FBTWoxQixTQUFTeTZCLEtBQVlBLEVBQVNBLEVBQU8vMEQsVUFyRXRCLGlDQUFpQ3RsQixLQXFFbUJxNkUsRUFyRVYvMEQsUUFzRXZFMjFELEVEMUVOLENBQWVDLElBQ2IsTUFBTUMsRUFBUyxDQUFDLEVBQ2hCLElBQUl2NEQsRUFDQW80QyxFQUNBOTdDLEVBc0JKLE9BcEJBZzhELEdBQWNBLEVBQVc5L0UsTUFBTSxNQUFNNnBCLFNBQVEsU0FBZ0JtMkQsR0FDM0RsOEQsRUFBSWs4RCxFQUFLbCtFLFFBQVEsS0FDakIwbEIsRUFBTXc0RCxFQUFLcHpFLFVBQVUsRUFBR2tYLEdBQUdvRyxPQUFPOVgsY0FDbEN3dEQsRUFBTW9nQixFQUFLcHpFLFVBQVVrWCxFQUFJLEdBQUdvRyxRQUV2QjFDLEdBQVF1NEQsRUFBT3Y0RCxJQUFRczNELEdBQWtCdDNELEtBSWxDLGVBQVJBLEVBQ0V1NEQsRUFBT3Y0RCxHQUNUdTRELEVBQU92NEQsR0FBSy9nQixLQUFLbTVELEdBRWpCbWdCLEVBQU92NEQsR0FBTyxDQUFDbzRDLEdBR2pCbWdCLEVBQU92NEQsR0FBT3U0RCxFQUFPdjRELEdBQU91NEQsRUFBT3Y0RCxHQUFPLEtBQU9vNEMsRUFBTUEsRUFFM0QsSUFFT21nQixDQUNSLEVDK0NnQkUsQ0FBYWhCLEdBQVNLLEdBRXZCLE1BQVZMLEdBQWtCTyxFQUFVRixFQUFnQkwsRUFBUU0sR0FHL0N6L0UsSUFDVCxDQUVBK3FCLElBQUlvMEQsRUFBUWYsR0FHVixHQUZBZSxFQUFTRCxHQUFnQkMsR0FFYixDQUNWLE1BQU16M0QsRUFBTWl5RCxHQUFNbEUsUUFBUXoxRSxLQUFNbS9FLEdBRWhDLEdBQUl6M0QsRUFBSyxDQUNQLE1BQU1ub0IsRUFBUVMsS0FBSzBuQixHQUVuQixJQUFLMDJELEVBQ0gsT0FBTzcrRSxFQUdULElBQWUsSUFBWDYrRSxFQUNGLE9BeEdWLFNBQXFCekosR0FDbkIsTUFBTXlMLEVBQVNyaEYsT0FBT3FJLE9BQU8sTUFDdkJpNUUsRUFBVyxtQ0FDakIsSUFBSTMzRSxFQUVKLEtBQVFBLEVBQVEyM0UsRUFBU3Q0RSxLQUFLNHNFLElBQzVCeUwsRUFBTzEzRSxFQUFNLElBQU1BLEVBQU0sR0FHM0IsT0FBTzAzRSxDQUNULENBOEZpQkUsQ0FBWS9nRixHQUdyQixHQUFJbzZFLEdBQU0zRSxXQUFXb0osR0FDbkIsT0FBT0EsRUFBTzc4RSxLQUFLdkIsS0FBTVQsRUFBT21vQixHQUdsQyxHQUFJaXlELEdBQU0xRCxTQUFTbUksR0FDakIsT0FBT0EsRUFBT3IyRSxLQUFLeEksR0FHckIsTUFBTSxJQUFJcUIsVUFBVSx5Q0FDdEIsQ0FDRixDQUNGLENBRUFxOEIsSUFBSWtpRCxFQUFRdmUsR0FHVixHQUZBdWUsRUFBU0QsR0FBZ0JDLEdBRWIsQ0FDVixNQUFNejNELEVBQU1peUQsR0FBTWxFLFFBQVF6MUUsS0FBTW0vRSxHQUVoQyxTQUFVejNELFFBQXFCaThCLElBQWQzakQsS0FBSzBuQixJQUF3Qms1QyxJQUFXeWUsR0FBaUJyL0UsRUFBTUEsS0FBSzBuQixHQUFNQSxFQUFLazVDLEdBQ2xHLENBRUEsT0FBTyxDQUNULENBRUExdUMsT0FBT2l0RCxFQUFRdmUsR0FDYixNQUFNbGhFLEVBQU9NLEtBQ2IsSUFBSXVnRixHQUFVLEVBRWQsU0FBU0MsRUFBYVosR0FHcEIsR0FGQUEsRUFBVVYsR0FBZ0JVLEdBRWIsQ0FDWCxNQUFNbDRELEVBQU1peUQsR0FBTWxFLFFBQVEvMUUsRUFBTWtnRixJQUU1Qmw0RCxHQUFTazVDLElBQVd5ZSxHQUFpQjMvRSxFQUFNQSxFQUFLZ29CLEdBQU1BLEVBQUtrNUMsWUFDdERsaEUsRUFBS2dvQixHQUVaNjRELEdBQVUsRUFFZCxDQUNGLENBUUEsT0FOSTVHLEdBQU10NEUsUUFBUTg5RSxHQUNoQkEsRUFBT3AxRCxRQUFReTJELEdBRWZBLEVBQWFyQixHQUdSb0IsQ0FDVCxDQUVBLzhELE1BQU1vOUMsR0FDSixNQUFNcDVELEVBQU96SSxPQUFPeUksS0FBS3hILE1BQ3pCLElBQUlna0IsRUFBSXhjLEVBQUs1SCxPQUNUMmdGLEdBQVUsRUFFZCxLQUFPdjhELEtBQUssQ0FDVixNQUFNMEQsRUFBTWxnQixFQUFLd2MsR0FDYjQ4QyxJQUFXeWUsR0FBaUJyL0UsRUFBTUEsS0FBSzBuQixHQUFNQSxFQUFLazVDLEdBQVMsWUFDdEQ1Z0UsS0FBSzBuQixHQUNaNjRELEdBQVUsRUFFZCxDQUVBLE9BQU9BLENBQ1QsQ0FFQUUsVUFBVUMsR0FDUixNQUFNaGhGLEVBQU9NLEtBQ1B5OUUsRUFBVSxDQUFDLEVBc0JqQixPQXBCQTlELEdBQU01dkQsUUFBUS9wQixNQUFNLENBQUNULEVBQU80L0UsS0FDMUIsTUFBTXozRCxFQUFNaXlELEdBQU1sRSxRQUFRZ0ksRUFBUzBCLEdBRW5DLEdBQUl6M0QsRUFHRixPQUZBaG9CLEVBQUtnb0IsR0FBTzAzRCxHQUFlNy9FLGVBQ3BCRyxFQUFLeS9FLEdBSWQsTUFBTXdCLEVBQWFELEVBMUp6QixTQUFzQnZCLEdBQ3BCLE9BQU9BLEVBQU8vMEQsT0FDWDlYLGNBQWNwTCxRQUFRLG1CQUFtQixDQUFDbkMsRUFBRzY0QixFQUFNKzJDLElBQzNDLzJDLEVBQUtuMUIsY0FBZ0Jrc0UsR0FFbEMsQ0FxSmtDaU0sQ0FBYXpCLEdBQVVqK0UsT0FBT2krRSxHQUFRLzBELE9BRTlEdTJELElBQWV4QixVQUNWei9FLEVBQUt5L0UsR0FHZHovRSxFQUFLaWhGLEdBQWN2QixHQUFlNy9FLEdBRWxDaytFLEVBQVFrRCxJQUFjLENBQUksSUFHckIzZ0YsSUFDVCxDQUVBMEwsVUFBVW0xRSxHQUNSLE9BQU83Z0YsS0FBS2tDLFlBQVl3SixPQUFPMUwsUUFBUzZnRixFQUMxQyxDQUVBdnNFLE9BQU93c0UsR0FDTCxNQUFNLzdCLEVBQU1obUQsT0FBT3FJLE9BQU8sTUFNMUIsT0FKQXV5RSxHQUFNNXZELFFBQVEvcEIsTUFBTSxDQUFDVCxFQUFPNC9FLEtBQ2pCLE1BQVQ1L0UsSUFBMkIsSUFBVkEsSUFBb0J3bEQsRUFBSW82QixHQUFVMkIsR0FBYW5ILEdBQU10NEUsUUFBUTlCLEdBQVNBLEVBQU1zSixLQUFLLE1BQVF0SixFQUFNLElBRzNHd2xELENBQ1QsQ0FFQSxDQUFDbGtELE9BQU9HLFlBQ04sT0FBT2pDLE9BQU9tK0UsUUFBUWw5RSxLQUFLc1UsVUFBVXpULE9BQU9HLFdBQzlDLENBRUFMLFdBQ0UsT0FBTzVCLE9BQU9tK0UsUUFBUWw5RSxLQUFLc1UsVUFBVWlxQyxLQUFJLEVBQUU0Z0MsRUFBUTUvRSxLQUFXNC9FLEVBQVMsS0FBTzUvRSxJQUFPc0osS0FBSyxLQUM1RixDQUVZc3NFLElBQVB0MEUsT0FBT3MwRSxlQUNWLE1BQU8sY0FDVCxDQUVBNEwsWUFBWXJNLEdBQ1YsT0FBT0EsYUFBaUIxMEUsS0FBTzAwRSxFQUFRLElBQUkxMEUsS0FBSzAwRSxFQUNsRCxDQUVBcU0sY0FBY0MsS0FBVUgsR0FDdEIsTUFBTUksRUFBVyxJQUFJamhGLEtBQUtnaEYsR0FJMUIsT0FGQUgsRUFBUTkyRCxTQUFTakosR0FBV21nRSxFQUFTMzJELElBQUl4SixLQUVsQ21nRSxDQUNULENBRUFGLGdCQUFnQjVCLEdBQ2QsTUFJTStCLEdBSllsaEYsS0FBS2kvRSxJQUFlai9FLEtBQUtpL0UsSUFBYyxDQUN2RGlDLFVBQVcsQ0FBQyxJQUdjQSxVQUN0QjVoRixFQUFZVSxLQUFLVixVQUV2QixTQUFTNmhGLEVBQWV2QixHQUN0QixNQUFNRSxFQUFVWixHQUFnQlUsR0FFM0JzQixFQUFVcEIsS0FsTnJCLFNBQXdCLzZCLEVBQUtvNkIsR0FDM0IsTUFBTWlDLEVBQWV6SCxHQUFNZCxZQUFZLElBQU1zRyxHQUU3QyxDQUFDLE1BQU8sTUFBTyxPQUFPcDFELFNBQVFzM0QsSUFDNUJ0aUYsT0FBT0UsZUFBZThsRCxFQUFLczhCLEVBQWFELEVBQWMsQ0FDcEQ3aEYsTUFBTyxTQUFTK2hGLEVBQU1DLEVBQU1DLEdBQzFCLE9BQU94aEYsS0FBS3FoRixHQUFZOS9FLEtBQUt2QixLQUFNbS9FLEVBQVFtQyxFQUFNQyxFQUFNQyxFQUN6RCxFQUNBbmhGLGNBQWMsR0FDZCxHQUVOLENBd01Rb2hGLENBQWVuaUYsRUFBV3NnRixHQUMxQnNCLEVBQVVwQixJQUFXLEVBRXpCLENBSUEsT0FGQW5HLEdBQU10NEUsUUFBUTg5RSxHQUFVQSxFQUFPcDFELFFBQVFvM0QsR0FBa0JBLEVBQWVoQyxHQUVqRW4vRSxJQUNULEVBR0Z1L0UsR0FBYW1DLFNBQVMsQ0FBQyxlQUFnQixpQkFBa0IsU0FBVSxrQkFBbUIsYUFBYyxrQkFFcEcvSCxHQUFNbkIsY0FBYytHLEdBQWFqZ0YsV0FDakNxNkUsR0FBTW5CLGNBQWMrRyxJQUVwQixZQ2pSZSxTQUFTb0MsR0FBY0MsRUFBS3RVLEdBQ3pDLE1BQU1yK0QsRUFBU2pQLE1BQVEsR0FDakJpa0MsRUFBVXFwQyxHQUFZcitELEVBQ3RCd3VFLEVBQVUsUUFBa0J4NUMsRUFBUXc1QyxTQUMxQyxJQUFJOTdELEVBQU9zaUIsRUFBUXRpQixLQVFuQixPQU5BZzRELEdBQU01dkQsUUFBUTYzRCxHQUFLLFNBQW1CaDFCLEdBQ3BDanJDLEVBQU9pckMsRUFBR3JyRCxLQUFLME4sRUFBUTBTLEVBQU04N0QsRUFBUWdELFlBQWFuVCxFQUFXQSxFQUFTMEQsWUFBU3J0QixFQUNqRixJQUVBODVCLEVBQVFnRCxZQUVEOStELENBQ1QsQ0N6QmUsU0FBU2tnRSxHQUFTdGlGLEdBQy9CLFNBQVVBLElBQVNBLEVBQU11aUYsV0FDM0IsQ0NVQSxTQUFTQyxHQUFjai9FLEVBQVNtTSxFQUFReXFFLEdBRXRDLFFBQWdCMTVFLEtBQWlCLE1BQVg4QyxFQUFrQixXQUFhQSxFQUFTLGdCQUF5Qm1NLEVBQVF5cUUsR0FDL0YxNUUsS0FBS2tELEtBQU8sZUFDZCxDQUVBeTJFLEdBQU1wQyxTQUFTd0ssR0FBZSxHQUFZLENBQ3hDRCxZQUFZLElBR2QsWUNuQkEsR0FBZSx3QkFJSixDQUNMbDBFLE1BQU8sU0FBZTFLLEVBQU0zRCxFQUFPeWlGLEVBQVNoL0QsRUFBTUQsRUFBUUcsR0FDeEQsTUFBTTNLLEVBQVMsR0FDZkEsRUFBTzVSLEtBQUt6RCxFQUFPLElBQU1zRixtQkFBbUJqSixJQUV4Q282RSxHQUFNMUUsU0FBUytNLElBQ2pCenBFLEVBQU81UixLQUFLLFdBQWEsSUFBSS9ILEtBQUtvakYsR0FBU0MsZUFHekN0SSxHQUFNajFCLFNBQVMxaEMsSUFDakJ6SyxFQUFPNVIsS0FBSyxRQUFVcWMsR0FHcEIyMkQsR0FBTWoxQixTQUFTM2hDLElBQ2pCeEssRUFBTzVSLEtBQUssVUFBWW9jLElBR1gsSUFBWEcsR0FDRjNLLEVBQU81UixLQUFLLFVBR2RmLFNBQVMyUyxPQUFTQSxFQUFPMVAsS0FBSyxLQUNoQyxFQUVBc2EsS0FBTSxTQUFjamdCLEdBQ2xCLE1BQU13RixFQUFROUMsU0FBUzJTLE9BQU83UCxNQUFNLElBQUlaLE9BQU8sYUFBZTVFLEVBQU8sY0FDckUsT0FBUXdGLEVBQVFWLG1CQUFtQlUsRUFBTSxJQUFNLElBQ2pELEVBRUF1K0QsT0FBUSxTQUFnQi9qRSxHQUN0QmxELEtBQUs0TixNQUFNMUssRUFBTSxHQUFJdEUsS0FBS3ExQixNQUFRLE1BQ3BDLEdBTUssQ0FDTHJtQixNQUFPLFdBQWtCLEVBQ3pCdVYsS0FBTSxXQUFrQixPQUFPLElBQU0sRUFDckM4akQsT0FBUSxXQUFtQixHQ2xDbEIsU0FBU2liLEdBQWNDLEVBQVNDLEdBQzdDLE9BQUlELElDSEcsOEJBQThCcjlFLEtER1BzOUUsR0VOakIsU0FBcUJELEVBQVNFLEdBQzNDLE9BQU9BLEVBQ0hGLEVBQVFqN0UsUUFBUSxPQUFRLElBQU0sSUFBTW03RSxFQUFZbjdFLFFBQVEsT0FBUSxJQUNoRWk3RSxDQUNOLENGR1dHLENBQVlILEVBQVNDLEdBRXZCQSxDQUNULENHZkEsU0FBZSx3QkFJYixXQUNFLE1BQU1HLEVBQU8sa0JBQWtCejlFLEtBQUs4RSxVQUFVQyxXQUN4QzI0RSxFQUFpQjU4RSxTQUFTQyxjQUFjLEtBQzlDLElBQUk0OEUsRUFRSixTQUFTQyxFQUFXeG1FLEdBQ2xCLElBQUkvUyxFQUFPK1MsRUFXWCxPQVRJcW1FLElBRUZDLEVBQWUxMEUsYUFBYSxPQUFRM0UsR0FDcENBLEVBQU9xNUUsRUFBZXI1RSxNQUd4QnE1RSxFQUFlMTBFLGFBQWEsT0FBUTNFLEdBRzdCLENBQ0xBLEtBQU1xNUUsRUFBZXI1RSxLQUNyQjRTLFNBQVV5bUUsRUFBZXptRSxTQUFXeW1FLEVBQWV6bUUsU0FBUzdVLFFBQVEsS0FBTSxJQUFNLEdBQ2hGOFUsS0FBTXdtRSxFQUFleG1FLEtBQ3JCcWMsT0FBUW1xRCxFQUFlbnFELE9BQVNtcUQsRUFBZW5xRCxPQUFPbnhCLFFBQVEsTUFBTyxJQUFNLEdBQzNFMHFELEtBQU00d0IsRUFBZTV3QixLQUFPNHdCLEVBQWU1d0IsS0FBSzFxRCxRQUFRLEtBQU0sSUFBTSxHQUNwRTZjLFNBQVV5K0QsRUFBZXorRCxTQUN6QjQrRCxLQUFNSCxFQUFlRyxLQUNyQkMsU0FBaUQsTUFBdENKLEVBQWVJLFNBQVMvMUUsT0FBTyxHQUN4QzIxRSxFQUFlSSxTQUNmLElBQU1KLEVBQWVJLFNBRTNCLENBVUEsT0FSQUgsRUFBWUMsRUFBV2hrRixPQUFPMkgsU0FBUzhDLE1BUWhDLFNBQXlCMDVFLEdBQzlCLE1BQU01QyxFQUFVdEcsR0FBTWoxQixTQUFTbStCLEdBQWVILEVBQVdHLEdBQWNBLEVBQ3ZFLE9BQVE1QyxFQUFPbGtFLFdBQWEwbUUsRUFBVTFtRSxVQUNsQ2trRSxFQUFPamtFLE9BQVN5bUUsRUFBVXptRSxJQUNoQyxDQUNELENBbERELEdBc0RTLFdBQ0wsT0FBTyxDQUNULEVDakRKLFNBQVM4bUUsR0FBcUIvbEQsRUFBVWdtRCxHQUN0QyxJQUFJQyxFQUFnQixFQUNwQixNQUFNQyxFQ1ZSLFNBQXFCQyxFQUFjeitELEdBQ2pDeStELEVBQWVBLEdBQWdCLEdBQy9CLE1BQU1DLEVBQVEsSUFBSTlqRixNQUFNNmpGLEdBQ2xCRSxFQUFhLElBQUkvakYsTUFBTTZqRixHQUM3QixJQUVJRyxFQUZBbjFFLEVBQU8sRUFDUG1rQyxFQUFPLEVBS1gsT0FGQTV0QixPQUFjay9CLElBQVJsL0IsRUFBb0JBLEVBQU0sSUFFekIsU0FBYzYrRCxHQUNuQixNQUFNcnZELEVBQU1yMUIsS0FBS3ExQixNQUVYc3ZELEVBQVlILEVBQVcvd0MsR0FFeEJneEMsSUFDSEEsRUFBZ0JwdkQsR0FHbEJrdkQsRUFBTWoxRSxHQUFRbzFFLEVBQ2RGLEVBQVdsMUUsR0FBUStsQixFQUVuQixJQUFJalEsRUFBSXF1QixFQUNKbXhDLEVBQWEsRUFFakIsS0FBT3gvRCxJQUFNOVYsR0FDWHMxRSxHQUFjTCxFQUFNbi9ELEtBQ3BCQSxHQUFRay9ELEVBU1YsR0FOQWgxRSxHQUFRQSxFQUFPLEdBQUtnMUUsRUFFaEJoMUUsSUFBU21rQyxJQUNYQSxHQUFRQSxFQUFPLEdBQUs2d0MsR0FHbEJqdkQsRUFBTW92RCxFQUFnQjUrRCxFQUN4QixPQUdGLE1BQU1nL0QsRUFBU0YsR0FBYXR2RCxFQUFNc3ZELEVBRWxDLE9BQU9FLEVBQVM1akYsS0FBS3FnQixNQUFtQixJQUFic2pFLEVBQW9CQyxRQUFVOS9CLENBQzNELENBQ0YsQ0RsQ3VCLENBQVksR0FBSSxLQUVyQyxPQUFPdmpELElBQ0wsTUFBTXNqRixFQUFTdGpGLEVBQUVzakYsT0FDWEMsRUFBUXZqRixFQUFFd2pGLGlCQUFtQnhqRixFQUFFdWpGLFdBQVFoZ0MsRUFDdkNrZ0MsRUFBZ0JILEVBQVNWLEVBQ3pCYyxFQUFPYixFQUFhWSxHQUcxQmIsRUFBZ0JVLEVBRWhCLE1BQU0vaEUsRUFBTyxDQUNYK2hFLFNBQ0FDLFFBQ0FJLFNBQVVKLEVBQVNELEVBQVNDLE9BQVNoZ0MsRUFDckN3L0IsTUFBT1UsRUFDUEMsS0FBTUEsUUFBY25nQyxFQUNwQnFnQyxVQUFXRixHQUFRSCxHQVZMRCxHQUFVQyxHQVVlQSxFQUFRRCxHQUFVSSxPQUFPbmdDLEVBQ2hFaHNDLE1BQU92WCxHQUdUdWhCLEVBQUtvaEUsRUFBbUIsV0FBYSxXQUFZLEVBRWpEaG1ELEVBQVNwYixFQUFLLENBRWxCLENBRUEsTUFFQSxHQUZ3RCxvQkFBbkJzaUUsZ0JBRUcsU0FBVWgxRSxHQUNoRCxPQUFPLElBQUl3dkIsU0FBUSxTQUE0QkcsRUFBUzZvQixHQUN0RCxJQUFJeThCLEVBQWNqMUUsRUFBTzBTLEtBQ3pCLE1BQU13aUUsRUFBaUIsUUFBa0JsMUUsRUFBT3d1RSxTQUFTZ0QsWUFDbkRqQyxFQUFldnZFLEVBQU91dkUsYUFDNUIsSUFBSTRGLEVBQ0osU0FBUzVqRixJQUNIeU8sRUFBT28xRSxhQUNUcDFFLEVBQU9vMUUsWUFBWXhwQixZQUFZdXBCLEdBRzdCbjFFLEVBQU84MEQsUUFDVDkwRCxFQUFPODBELE9BQU8zekMsb0JBQW9CLFFBQVNnMEQsRUFFL0MsQ0FFSXpLLEdBQU1qRCxXQUFXd04sS0FBaUIseUJBQWlDLG1DQUNyRUMsRUFBZXJHLGdCQUFlLEdBR2hDLElBQUlwRSxFQUFVLElBQUl1SyxlQUdsQixHQUFJaDFFLEVBQU8yVixLQUFNLENBQ2YsTUFBTTAvRCxFQUFXcjFFLEVBQU8yVixLQUFLMC9ELFVBQVksR0FDbkNuc0QsRUFBV2xwQixFQUFPMlYsS0FBS3VULFNBQVdsZ0IsU0FBU3pQLG1CQUFtQnlHLEVBQU8yVixLQUFLdVQsV0FBYSxHQUM3RmdzRCxFQUFlNzVELElBQUksZ0JBQWlCLFNBQVdpNkQsS0FBS0QsRUFBVyxJQUFNbnNELEdBQ3ZFLENBRUEsTUFBTXFzRCxFQUFXdEMsR0FBY2p6RSxFQUFPa3pFLFFBQVNsekUsRUFBT2lOLEtBT3RELFNBQVN1b0UsSUFDUCxJQUFLL0ssRUFDSCxPQUdGLE1BQU1nTCxFQUFrQixRQUN0QiwwQkFBMkJoTCxHQUFXQSxFQUFRaUwsMEJFNUV2QyxTQUFnQi9sRCxFQUFTNm9CLEVBQVE2bEIsR0FDOUMsTUFBTXdSLEVBQWlCeFIsRUFBU3IrRCxPQUFPNnZFLGVBQ2xDeFIsRUFBUzBELFFBQVc4TixJQUFrQkEsRUFBZXhSLEVBQVMwRCxRQUdqRXZwQixFQUFPLElBQUksR0FDVCxtQ0FBcUM2bEIsRUFBUzBELE9BQzlDLENBQUMsbUJBQTRCLHFCQUE2Qm54RSxLQUFLcVksTUFBTW8xRCxFQUFTMEQsT0FBUyxLQUFPLEdBQzlGMUQsRUFBU3IrRCxPQUNUcStELEVBQVNvTSxRQUNUcE0sSUFQRjF1QyxFQUFRMHVDLEVBVVosQ0Y0RU1zWCxFQUFPLFNBQWtCcmxGLEdBQ3ZCcS9CLEVBQVFyL0IsR0FDUmlCLEdBQ0YsSUFBRyxTQUFpQms5QyxHQUNsQitKLEVBQU8vSixHQUNQbDlDLEdBQ0YsR0FmaUIsQ0FDZm1oQixLQUhvQjY4RCxHQUFpQyxTQUFqQkEsR0FBNEMsU0FBakJBLEVBQ3hDOUUsRUFBUXBNLFNBQS9Cb00sRUFBUW1MLGFBR1I3VCxPQUFRMEksRUFBUTFJLE9BQ2hCOFQsV0FBWXBMLEVBQVFvTCxXQUNwQnJILFFBQVNpSCxFQUNUejFFLFNBQ0F5cUUsWUFZRkEsRUFBVSxJQUNaLENBbUVBLEdBckdBQSxFQUFROTRELEtBQUszUixFQUFPNFIsT0FBT3BZLGNBQWVpekUsR0FBUzhJLEVBQVV2MUUsRUFBT3FzRSxPQUFRcnNFLEVBQU91UixtQkFBbUIsR0FHdEdrNUQsRUFBUXhxRSxRQUFVRCxFQUFPQyxRQWlDckIsY0FBZXdxRSxFQUVqQkEsRUFBUStLLFVBQVlBLEVBR3BCL0ssRUFBUXFMLG1CQUFxQixXQUN0QnJMLEdBQWtDLElBQXZCQSxFQUFRL3ZFLGFBUUQsSUFBbkIrdkUsRUFBUTFJLFFBQWtCMEksRUFBUXNMLGFBQXdELElBQXpDdEwsRUFBUXNMLFlBQVloakYsUUFBUSxXQUtqRjJGLFdBQVc4OEUsRUFDYixFQUlGL0ssRUFBUTFWLFFBQVUsV0FDWDBWLElBSUxqeUIsRUFBTyxJQUFJLEdBQVcsa0JBQW1CLGdCQUF5Qng0QyxFQUFReXFFLElBRzFFQSxFQUFVLEtBQ1osRUFHQUEsRUFBUXRxRSxRQUFVLFdBR2hCcTRDLEVBQU8sSUFBSSxHQUFXLGdCQUFpQixlQUF3Qng0QyxFQUFReXFFLElBR3ZFQSxFQUFVLElBQ1osRUFHQUEsRUFBUXZxRSxVQUFZLFdBQ2xCLElBQUk4MUUsRUFBc0JoMkUsRUFBT0MsUUFBVSxjQUFnQkQsRUFBT0MsUUFBVSxjQUFnQixtQkFDNUYsTUFBTW91RSxFQUFlcnVFLEVBQU9xdUUsY0FBZ0IsR0FDeENydUUsRUFBT2cyRSxzQkFDVEEsRUFBc0JoMkUsRUFBT2cyRSxxQkFFL0J4OUIsRUFBTyxJQUFJLEdBQ1R3OUIsRUFDQTNILEVBQWFqQixvQkFBc0IsYUFBdUIsZ0JBQzFEcHRFLEVBQ0F5cUUsSUFHRkEsRUFBVSxJQUNaLEVBS0ksd0JBQStCLENBRWpDLE1BQU13TCxHQUFhajJFLEVBQU9rMkUsaUJBQW1CQyxHQUFnQlosS0FDeER2MUUsRUFBT3l2RSxnQkFBa0IyRyxHQUFRbGlFLEtBQUtsVSxFQUFPeXZFLGdCQUU5Q3dHLEdBQ0ZmLEVBQWU3NUQsSUFBSXJiLEVBQU8wdkUsZUFBZ0J1RyxFQUU5QyxNQUdnQnZoQyxJQUFoQnVnQyxHQUE2QkMsRUFBZXJHLGVBQWUsTUFHdkQscUJBQXNCcEUsR0FDeEJDLEdBQU01dkQsUUFBUW82RCxFQUFlN3ZFLFVBQVUsU0FBMEJ3ckQsRUFBS3A0QyxHQUNwRWd5RCxFQUFRNEwsaUJBQWlCNTlELEVBQUtvNEMsRUFDaEMsSUFJRzZaLEdBQU03RSxZQUFZN2xFLEVBQU9rMkUsbUJBQzVCekwsRUFBUXlMLGtCQUFvQmwyRSxFQUFPazJFLGlCQUlqQzNHLEdBQWlDLFNBQWpCQSxJQUNsQjlFLEVBQVE4RSxhQUFldnZFLEVBQU91dkUsY0FJUyxtQkFBOUJ2dkUsRUFBT3MyRSxvQkFDaEI3TCxFQUFRenZFLGlCQUFpQixXQUFZNjRFLEdBQXFCN3pFLEVBQU9zMkUsb0JBQW9CLElBSWhELG1CQUE1QnQyRSxFQUFPdTJFLGtCQUFtQzlMLEVBQVErTCxRQUMzRC9MLEVBQVErTCxPQUFPeDdFLGlCQUFpQixXQUFZNjRFLEdBQXFCN3pFLEVBQU91MkUsb0JBR3RFdjJFLEVBQU9vMUUsYUFBZXAxRSxFQUFPODBELFVBRy9CcWdCLEVBQWEzYixJQUNOaVIsSUFHTGp5QixHQUFRZ2hCLEdBQVVBLEVBQU94ckQsS0FBTyxJQUFJLEdBQWMsS0FBTWhPLEVBQVF5cUUsR0FBV2pSLEdBQzNFaVIsRUFBUXZWLFFBQ1J1VixFQUFVLEtBQUksRUFHaEJ6cUUsRUFBT28xRSxhQUFlcDFFLEVBQU9vMUUsWUFBWW4yQixVQUFVazJCLEdBQy9DbjFFLEVBQU84MEQsU0FDVDkwRCxFQUFPODBELE9BQU9MLFFBQVUwZ0IsSUFBZW4xRSxFQUFPODBELE9BQU85NUQsaUJBQWlCLFFBQVNtNkUsS0FJbkYsTUFBTXJvRSxFRzNPSyxTQUF1QkcsR0FDcEMsTUFBTXhULEVBQVEsNEJBQTRCWCxLQUFLbVUsR0FDL0MsT0FBT3hULEdBQVNBLEVBQU0sSUFBTSxFQUM5QixDSHdPcUJnOUUsQ0FBY2xCLEdBRTNCem9FLElBQXNELElBQTFDLHFCQUEyQkEsR0FDekMwckMsRUFBTyxJQUFJLEdBQVcsd0JBQTBCMXJDLEVBQVcsSUFBSyxtQkFBNEI5TSxJQU05RnlxRSxFQUFRaU0sS0FBS3pCLEdBQWUsS0FDOUIsR0FDRixFSW5QTTBCLEdBQWdCLENBQ3BCQyxLQ0xGLEtETUVDLElBQUtBLElBR1BuTSxHQUFNNXZELFFBQVE2N0QsSUFBZSxDQUFDaDVCLEVBQUlydEQsS0FDaEMsR0FBR3F0RCxFQUFJLENBQ0wsSUFDRTd0RCxPQUFPRSxlQUFlMnRELEVBQUksT0FBUSxDQUFDcnRELFNBQ3JDLENBQUUsTUFBT2EsR0FFVCxDQUNBckIsT0FBT0UsZUFBZTJ0RCxFQUFJLGNBQWUsQ0FBQ3J0RCxTQUM1QyxLRUZGLFNBQVN3bUYsR0FBNkI5MkUsR0FLcEMsR0FKSUEsRUFBT28xRSxhQUNUcDFFLEVBQU9vMUUsWUFBWTJCLG1CQUdqQi8yRSxFQUFPODBELFFBQVU5MEQsRUFBTzgwRCxPQUFPTCxRQUNqQyxNQUFNLElBQUksR0FBYyxLQUFNejBELEVBRWxDLENBU2UsU0FBU2czRSxHQUFnQmgzRSxHQWlCdEMsT0FoQkE4MkUsR0FBNkI5MkUsR0FFN0JBLEVBQU93dUUsUUFBVSxRQUFrQnh1RSxFQUFPd3VFLFNBRzFDeHVFLEVBQU8wUyxLQUFPZ2dFLEdBQWNwZ0YsS0FDMUIwTixFQUNBQSxFQUFPdXVFLG1CQUdnRCxJQUFyRCxDQUFDLE9BQVEsTUFBTyxTQUFTeDdFLFFBQVFpTixFQUFPNFIsU0FDMUM1UixFQUFPd3VFLFFBQVFLLGVBQWUscUNBQXFDLEdGdkJ6RCxDQUFDb0ksSUFDWEEsRUFBV3ZNLEdBQU10NEUsUUFBUTZrRixHQUFZQSxFQUFXLENBQUNBLEdBRWpELE1BQU0sT0FBQ3RtRixHQUFVc21GLEVBQ2pCLElBQUlDLEVBQ0E1SSxFQUVKLElBQUssSUFBSXY1RCxFQUFJLEVBQUdBLEVBQUlwa0IsSUFDbEJ1bUYsRUFBZ0JELEVBQVNsaUUsS0FDckJ1NUQsRUFBVTVELEdBQU1qMUIsU0FBU3loQyxHQUFpQlAsR0FBY08sRUFBYzd6RSxlQUFpQjZ6RSxJQUZqRW5pRSxLQU81QixJQUFLdTVELEVBQVMsQ0FDWixJQUFnQixJQUFaQSxFQUNGLE1BQU0sSUFBSSxHQUNSLFdBQVc0SSx3Q0FDWCxtQkFJSixNQUFNLElBQUlybUYsTUFDUjY1RSxHQUFNcEIsV0FBV3FOLEdBQWVPLEdBQzlCLFlBQVlBLG1DQUNaLG9CQUFvQkEsS0FFMUIsQ0FFQSxJQUFLeE0sR0FBTTNFLFdBQVd1SSxHQUNwQixNQUFNLElBQUkzOEUsVUFBVSw2QkFHdEIsT0FBTzI4RSxDQUFPLEVFUEEySSxDQUFvQmozRSxFQUFPc3VFLFNBQVcsV0FFL0NBLENBQVF0dUUsR0FBUTR2QixNQUFLLFNBQTZCeXVDLEdBWXZELE9BWEF5WSxHQUE2QjkyRSxHQUc3QnErRCxFQUFTM3JELEtBQU9nZ0UsR0FBY3BnRixLQUM1QjBOLEVBQ0FBLEVBQU9xdkUsa0JBQ1BoUixHQUdGQSxFQUFTbVEsUUFBVSxRQUFrQm5RLEVBQVNtUSxTQUV2Q25RLENBQ1QsSUFBRyxTQUE0QnJKLEdBZTdCLE9BZEs0ZCxHQUFTNWQsS0FDWjhoQixHQUE2QjkyRSxHQUd6QmcxRCxHQUFVQSxFQUFPcUosV0FDbkJySixFQUFPcUosU0FBUzNyRCxLQUFPZ2dFLEdBQWNwZ0YsS0FDbkMwTixFQUNBQSxFQUFPcXZFLGtCQUNQcmEsRUFBT3FKLFVBRVRySixFQUFPcUosU0FBU21RLFFBQVUsUUFBa0J4WixFQUFPcUosU0FBU21RLFdBSXpEaC9DLFFBQVFncEIsT0FBT3djLEVBQ3hCLEdBQ0YsQ0MzRUEsTUFBTW1pQixHQUFtQjFSLEdBQVVBLGFBQWlCLEdBQWVBLEVBQU1wZ0UsU0FBV29nRSxFQVdyRSxTQUFTMlIsR0FBWUMsRUFBU0MsR0FFM0NBLEVBQVVBLEdBQVcsQ0FBQyxFQUN0QixNQUFNdDNFLEVBQVMsQ0FBQyxFQUVoQixTQUFTdTNFLEVBQWUxbEUsRUFBUTVZLEVBQVFpdkUsR0FDdEMsT0FBSXdDLEdBQU1oMUIsY0FBYzdqQyxJQUFXNjRELEdBQU1oMUIsY0FBY3o4QyxHQUM5Q3l4RSxHQUFNekMsTUFBTTMxRSxLQUFLLENBQUM0MUUsWUFBV3IyRCxFQUFRNVksR0FDbkN5eEUsR0FBTWgxQixjQUFjejhDLEdBQ3RCeXhFLEdBQU16QyxNQUFNLENBQUMsRUFBR2h2RSxHQUNkeXhFLEdBQU10NEUsUUFBUTZHLEdBQ2hCQSxFQUFPdEcsUUFFVHNHLENBQ1QsQ0FHQSxTQUFTdStFLEVBQW9Cdm5GLEVBQUdDLEVBQUdnNEUsR0FDakMsT0FBS3dDLEdBQU03RSxZQUFZMzFFLEdBRVh3NkUsR0FBTTdFLFlBQVk1MUUsUUFBdkIsRUFDRXNuRixPQUFlN2lDLEVBQVd6a0QsRUFBR2k0RSxHQUY3QnFQLEVBQWV0bkYsRUFBR0MsRUFBR2c0RSxFQUloQyxDQUdBLFNBQVN1UCxFQUFpQnhuRixFQUFHQyxHQUMzQixJQUFLdzZFLEdBQU03RSxZQUFZMzFFLEdBQ3JCLE9BQU9xbkYsT0FBZTdpQyxFQUFXeGtELEVBRXJDLENBR0EsU0FBU3duRixFQUFpQnpuRixFQUFHQyxHQUMzQixPQUFLdzZFLEdBQU03RSxZQUFZMzFFLEdBRVh3NkUsR0FBTTdFLFlBQVk1MUUsUUFBdkIsRUFDRXNuRixPQUFlN2lDLEVBQVd6a0QsR0FGMUJzbkYsT0FBZTdpQyxFQUFXeGtELEVBSXJDLENBR0EsU0FBU3luRixFQUFnQjFuRixFQUFHQyxFQUFHMHJELEdBQzdCLE9BQUlBLEtBQVEwN0IsRUFDSEMsRUFBZXRuRixFQUFHQyxHQUNoQjByRCxLQUFReTdCLEVBQ1ZFLE9BQWU3aUMsRUFBV3prRCxRQUQ1QixDQUdULENBRUEsTUFBTTJuRixFQUFXLENBQ2YzcUUsSUFBS3dxRSxFQUNMN2xFLE9BQVE2bEUsRUFDUi9rRSxLQUFNK2tFLEVBQ052RSxRQUFTd0UsRUFDVG5KLGlCQUFrQm1KLEVBQ2xCckksa0JBQW1CcUksRUFDbkJubUUsaUJBQWtCbW1FLEVBQ2xCejNFLFFBQVN5M0UsRUFDVEcsZUFBZ0JILEVBQ2hCeEIsZ0JBQWlCd0IsRUFDakJwSixRQUFTb0osRUFDVG5JLGFBQWNtSSxFQUNkakksZUFBZ0JpSSxFQUNoQmhJLGVBQWdCZ0ksRUFDaEJuQixpQkFBa0JtQixFQUNsQnBCLG1CQUFvQm9CLEVBQ3BCSSxXQUFZSixFQUNaL0gsaUJBQWtCK0gsRUFDbEI5SCxjQUFlOEgsRUFDZkssZUFBZ0JMLEVBQ2hCTSxVQUFXTixFQUNYTyxVQUFXUCxFQUNYUSxXQUFZUixFQUNadEMsWUFBYXNDLEVBQ2JTLFdBQVlULEVBQ1pVLGlCQUFrQlYsRUFDbEI3SCxlQUFnQjhILEVBQ2hCbkosUUFBUyxDQUFDditFLEVBQUdDLElBQU1zbkYsRUFBb0JMLEdBQWdCbG5GLEdBQUlrbkYsR0FBZ0JqbkYsSUFBSSxJQVNqRixPQU5BdzZFLEdBQU01dkQsUUFBUWhyQixPQUFPeUksS0FBSzgrRSxHQUFTNTZFLE9BQU8zTSxPQUFPeUksS0FBSysrRSxLQUFXLFNBQTRCMTdCLEdBQzNGLE1BQU1xc0IsRUFBUTJQLEVBQVNoOEIsSUFBUzQ3QixFQUMxQmEsRUFBY3BRLEVBQU1vUCxFQUFRejdCLEdBQU8wN0IsRUFBUTE3QixHQUFPQSxHQUN2RDh1QixHQUFNN0UsWUFBWXdTLElBQWdCcFEsSUFBVTBQLElBQXFCMzNFLEVBQU80N0MsR0FBUXk4QixFQUNuRixJQUVPcjRFLENBQ1QsQ0N4R08sTUNLRHM0RSxHQUFhLENBQUMsRUFHcEIsQ0FBQyxTQUFVLFVBQVcsU0FBVSxXQUFZLFNBQVUsVUFBVXg5RCxTQUFRLENBQUM5TSxFQUFNK0csS0FDN0V1akUsR0FBV3RxRSxHQUFRLFNBQW1CeTNELEdBQ3BDLGNBQWNBLElBQVV6M0QsR0FBUSxLQUFPK0csRUFBSSxFQUFJLEtBQU8sS0FBTy9HLENBQy9ELENBQUMsSUFHSCxNQUFNdXFFLEdBQXFCLENBQUMsRUFXNUJELEdBQVdqSyxhQUFlLFNBQXNCbUssRUFBVy82RSxFQUFTNUosR0FDbEUsU0FBUzRrRixFQUFjQyxFQUFLQyxHQUMxQixNQUFPLHVDQUFvREQsRUFBTSxJQUFPQyxHQUFROWtGLEVBQVUsS0FBT0EsRUFBVSxHQUM3RyxDQUdBLE1BQU8sQ0FBQ3ZELEVBQU9vb0YsRUFBS0UsS0FDbEIsSUFBa0IsSUFBZEosRUFDRixNQUFNLElBQUksR0FDUkMsRUFBY0MsRUFBSyxxQkFBdUJqN0UsRUFBVSxPQUFTQSxFQUFVLEtBQ3ZFLG1CQWVKLE9BWElBLElBQVk4NkUsR0FBbUJHLEtBQ2pDSCxHQUFtQkcsSUFBTyxFQUUxQi9rRixRQUFRcW5FLEtBQ055ZCxFQUNFQyxFQUNBLCtCQUFpQ2o3RSxFQUFVLDhDQUsxQys2RSxHQUFZQSxFQUFVbG9GLEVBQU9vb0YsRUFBS0UsRUFBWSxDQUV6RCxFQW1DQSxVQUNFQyxjQXhCRixTQUF1Qmw4RCxFQUFTbThELEVBQVFDLEdBQ3RDLEdBQXVCLGlCQUFacDhELEVBQ1QsTUFBTSxJQUFJLEdBQVcsNEJBQTZCLHlCQUVwRCxNQUFNcGtCLEVBQU96SSxPQUFPeUksS0FBS29rQixHQUN6QixJQUFJNUgsRUFBSXhjLEVBQUs1SCxPQUNiLEtBQU9va0IsS0FBTSxHQUFHLENBQ2QsTUFBTTJqRSxFQUFNbmdGLEVBQUt3YyxHQUNYeWpFLEVBQVlNLEVBQU9KLEdBQ3pCLEdBQUlGLEVBQUosQ0FDRSxNQUFNbG9GLEVBQVFxc0IsRUFBUSs3RCxHQUNoQnJpQyxPQUFtQjNCLElBQVZwa0QsR0FBdUJrb0YsRUFBVWxvRixFQUFPb29GLEVBQUsvN0QsR0FDNUQsSUFBZSxJQUFYMDVCLEVBQ0YsTUFBTSxJQUFJLEdBQVcsVUFBWXFpQyxFQUFNLFlBQWNyaUMsRUFBUSx3QkFHakUsTUFDQSxJQUFxQixJQUFqQjBpQyxFQUNGLE1BQU0sSUFBSSxHQUFXLGtCQUFvQkwsRUFBSyxrQkFFbEQsQ0FDRixFQUlFSixlQzlFSSxHQUFhRSxHQUFVRixXQVM3QixNQUFNVSxHQUNKL2xGLFlBQVlnbUYsR0FDVmxvRixLQUFLcTlFLFNBQVc2SyxFQUNoQmxvRixLQUFLbW9GLGFBQWUsQ0FDbEJ6TyxRQUFTLElBQUksR0FDYnBNLFNBQVUsSUFBSSxHQUVsQixDQVVBb00sUUFBUTBPLEVBQWFuNUUsR0FHUSxpQkFBaEJtNUUsR0FDVG41RSxFQUFTQSxHQUFVLENBQUMsR0FDYmlOLElBQU1rc0UsRUFFYm41RSxFQUFTbTVFLEdBQWUsQ0FBQyxFQUczQm41RSxFQUFTbzNFLEdBQVlybUYsS0FBS3E5RSxTQUFVcHVFLEdBRXBDLE1BQU0sYUFBQ3F1RSxFQUFZLGlCQUFFOThELEVBQWdCLFFBQUVpOUQsR0FBV3h1RSxFQTBCbEQsSUFBSW81RSxPQXhCaUIxa0MsSUFBakIyNUIsR0FDRm1LLEdBQVVLLGNBQWN4SyxFQUFjLENBQ3BDbkIsa0JBQW1CLEdBQVdtQixhQUFhLEdBQVdnTCxTQUN0RGxNLGtCQUFtQixHQUFXa0IsYUFBYSxHQUFXZ0wsU0FDdERqTSxvQkFBcUIsR0FBV2lCLGFBQWEsR0FBV2dMLFdBQ3ZELEdBR21CLE1BQXBCOW5FLElBQ0VtNUQsR0FBTTNFLFdBQVd4MEQsR0FDbkJ2UixFQUFPdVIsaUJBQW1CLENBQ3hCbzdELFVBQVdwN0QsR0FHYmluRSxHQUFVSyxjQUFjdG5FLEVBQWtCLENBQ3hDMjZELE9BQVEsR0FBV29OLFNBQ25CM00sVUFBVyxHQUFXMk0sV0FDckIsSUFLUHQ1RSxFQUFPNFIsUUFBVTVSLEVBQU80UixRQUFVN2dCLEtBQUtxOUUsU0FBU3g4RCxRQUFVLE9BQU92TyxjQUtqRSsxRSxFQUFpQjVLLEdBQVc5RCxHQUFNekMsTUFDaEN1RyxFQUFRc0IsT0FDUnRCLEVBQVF4dUUsRUFBTzRSLFNBR2pCd25FLEdBQWtCMU8sR0FBTTV2RCxRQUN0QixDQUFDLFNBQVUsTUFBTyxPQUFRLE9BQVEsTUFBTyxRQUFTLFdBQ2pEbEosV0FDUTQ4RCxFQUFRNThELEVBQU8sSUFJMUI1UixFQUFPd3VFLFFBQVUsVUFBb0I0SyxFQUFnQjVLLEdBR3JELE1BQU0rSyxFQUEwQixHQUNoQyxJQUFJQyxHQUFpQyxFQUNyQ3pvRixLQUFLbW9GLGFBQWF6TyxRQUFRM3ZELFNBQVEsU0FBb0MyK0QsR0FDakMsbUJBQXhCQSxFQUFZek0sVUFBMEQsSUFBaEN5TSxFQUFZek0sUUFBUWh0RSxLQUlyRXc1RSxFQUFpQ0EsR0FBa0NDLEVBQVkxTSxZQUUvRXdNLEVBQXdCM21GLFFBQVE2bUYsRUFBWXB5QixVQUFXb3lCLEVBQVlseUIsVUFDckUsSUFFQSxNQUFNbXlCLEVBQTJCLEdBS2pDLElBQUlsZSxFQUpKenFFLEtBQUttb0YsYUFBYTdhLFNBQVN2akQsU0FBUSxTQUFrQzIrRCxHQUNuRUMsRUFBeUJoaUYsS0FBSytoRixFQUFZcHlCLFVBQVdveUIsRUFBWWx5QixTQUNuRSxJQUdBLElBQ0l3VixFQURBaG9ELEVBQUksRUFHUixJQUFLeWtFLEVBQWdDLENBQ25DLE1BQU16c0IsRUFBUSxDQUFDaXFCLEdBQWdCeGtGLEtBQUt6QixXQUFPMmpELEdBTzNDLElBTkFxWSxFQUFNbjZELFFBQVFMLE1BQU13NkQsRUFBT3dzQixHQUMzQnhzQixFQUFNcjFELEtBQUtuRixNQUFNdzZELEVBQU8yc0IsR0FDeEIzYyxFQUFNaFEsRUFBTXA4RCxPQUVaNnFFLEVBQVVoc0MsUUFBUUcsUUFBUTN2QixHQUVuQitVLEVBQUlnb0QsR0FDVHZCLEVBQVVBLEVBQVE1ckMsS0FBS205QixFQUFNaDRDLEtBQU1nNEMsRUFBTWg0QyxNQUczQyxPQUFPeW1ELENBQ1QsQ0FFQXVCLEVBQU13YyxFQUF3QjVvRixPQUU5QixJQUFJZ3BGLEVBQVkzNUUsRUFJaEIsSUFGQStVLEVBQUksRUFFR0EsRUFBSWdvRCxHQUFLLENBQ2QsTUFBTTZjLEVBQWNMLEVBQXdCeGtFLEtBQ3RDOGtFLEVBQWFOLEVBQXdCeGtFLEtBQzNDLElBQ0U0a0UsRUFBWUMsRUFBWUQsRUFDMUIsQ0FBRSxNQUFPL2xGLEdBQ1BpbUYsRUFBV3ZuRixLQUFLdkIsS0FBTTZDLEdBQ3RCLEtBQ0YsQ0FDRixDQUVBLElBQ0U0bkUsRUFBVXdiLEdBQWdCMWtGLEtBQUt2QixLQUFNNG9GLEVBQ3ZDLENBQUUsTUFBTy9sRixHQUNQLE9BQU80N0IsUUFBUWdwQixPQUFPNWtELEVBQ3hCLENBS0EsSUFIQW1oQixFQUFJLEVBQ0pnb0QsRUFBTTJjLEVBQXlCL29GLE9BRXhCb2tCLEVBQUlnb0QsR0FDVHZCLEVBQVVBLEVBQVE1ckMsS0FBSzhwRCxFQUF5QjNrRSxLQUFNMmtFLEVBQXlCM2tFLE1BR2pGLE9BQU95bUQsQ0FDVCxDQUVBc2UsT0FBTzk1RSxHQUdMLE9BQU95c0UsR0FEVXdHLElBRGpCanpFLEVBQVNvM0UsR0FBWXJtRixLQUFLcTlFLFNBQVVwdUUsSUFDRWt6RSxRQUFTbHpFLEVBQU9pTixLQUM1QmpOLEVBQU9xc0UsT0FBUXJzRSxFQUFPdVIsaUJBQ2xELEVBSUZtNUQsR0FBTTV2RCxRQUFRLENBQUMsU0FBVSxNQUFPLE9BQVEsWUFBWSxTQUE2QmxKLEdBRS9Fb25FLEdBQU0zb0YsVUFBVXVoQixHQUFVLFNBQVMzRSxFQUFLak4sR0FDdEMsT0FBT2pQLEtBQUswNUUsUUFBUTJNLEdBQVlwM0UsR0FBVSxDQUFDLEVBQUcsQ0FDNUM0UixTQUNBM0UsTUFDQXlGLE1BQU8xUyxHQUFVLENBQUMsR0FBRzBTLE9BRXpCLENBQ0YsSUFFQWc0RCxHQUFNNXZELFFBQVEsQ0FBQyxPQUFRLE1BQU8sVUFBVSxTQUErQmxKLEdBR3JFLFNBQVNtb0UsRUFBbUJDLEdBQzFCLE9BQU8sU0FBb0Ivc0UsRUFBS3lGLEVBQU0xUyxHQUNwQyxPQUFPalAsS0FBSzA1RSxRQUFRMk0sR0FBWXAzRSxHQUFVLENBQUMsRUFBRyxDQUM1QzRSLFNBQ0E0OEQsUUFBU3dMLEVBQVMsQ0FDaEIsZUFBZ0IsdUJBQ2QsQ0FBQyxFQUNML3NFLE1BQ0F5RixTQUVKLENBQ0YsQ0FFQXNtRSxHQUFNM29GLFVBQVV1aEIsR0FBVW1vRSxJQUUxQmYsR0FBTTNvRixVQUFVdWhCLEVBQVMsUUFBVW1vRSxHQUFtQixFQUN4RCxJQUVBLFlDL0xBLE1BQU1FLEdBQ0pobkYsWUFBWWluRixHQUNWLEdBQXdCLG1CQUFiQSxFQUNULE1BQU0sSUFBSXZvRixVQUFVLGdDQUd0QixJQUFJeXJFLEVBRUpyc0UsS0FBS3lxRSxRQUFVLElBQUloc0MsU0FBUSxTQUF5QkcsR0FDbER5dEMsRUFBaUJ6dEMsQ0FDbkIsSUFFQSxNQUFNdzdDLEVBQVFwNkUsS0FHZEEsS0FBS3lxRSxRQUFRNXJDLE1BQUs0cEMsSUFDaEIsSUFBSzJSLEVBQU1nUCxXQUFZLE9BRXZCLElBQUlwbEUsRUFBSW8yRCxFQUFNZ1AsV0FBV3hwRixPQUV6QixLQUFPb2tCLEtBQU0sR0FDWG8yRCxFQUFNZ1AsV0FBV3BsRSxHQUFHeWtELEdBRXRCMlIsRUFBTWdQLFdBQWEsSUFBSSxJQUl6QnBwRixLQUFLeXFFLFFBQVE1ckMsS0FBT3dxRCxJQUNsQixJQUFJQyxFQUVKLE1BQU03ZSxFQUFVLElBQUloc0MsU0FBUUcsSUFDMUJ3N0MsRUFBTWxzQixVQUFVdHZCLEdBQ2hCMHFELEVBQVcxcUQsQ0FBTyxJQUNqQkMsS0FBS3dxRCxHQU1SLE9BSkE1ZSxFQUFRaEMsT0FBUyxXQUNmMlIsRUFBTXZmLFlBQVl5dUIsRUFDcEIsRUFFTzdlLENBQU8sRUFHaEIwZSxHQUFTLFNBQWdCcm1GLEVBQVNtTSxFQUFReXFFLEdBQ3BDVSxFQUFNblcsU0FLVm1XLEVBQU1uVyxPQUFTLElBQUksR0FBY25oRSxFQUFTbU0sRUFBUXlxRSxHQUNsRHJOLEVBQWUrTixFQUFNblcsUUFDdkIsR0FDRixDQUtBK2hCLG1CQUNFLEdBQUlobUYsS0FBS2lrRSxPQUNQLE1BQU1qa0UsS0FBS2lrRSxNQUVmLENBTUEvVixVQUFVbnhCLEdBQ0ovOEIsS0FBS2lrRSxPQUNQbG5DLEVBQVMvOEIsS0FBS2lrRSxRQUlaamtFLEtBQUtvcEYsV0FDUHBwRixLQUFLb3BGLFdBQVd6aUYsS0FBS28yQixHQUVyQi84QixLQUFLb3BGLFdBQWEsQ0FBQ3JzRCxFQUV2QixDQU1BODlCLFlBQVk5OUIsR0FDVixJQUFLLzhCLEtBQUtvcEYsV0FDUixPQUVGLE1BQU12aEQsRUFBUTduQyxLQUFLb3BGLFdBQVdwbkYsUUFBUSs2QixJQUN2QixJQUFYOEssR0FDRjduQyxLQUFLb3BGLFdBQVcxdUMsT0FBTzdTLEVBQU8sRUFFbEMsQ0FNQWs1QyxnQkFDRSxJQUFJdFksRUFDSixNQUFNMlIsRUFBUSxJQUFJOE8sSUFBWSxTQUFrQjlwRixHQUM5Q3FwRSxFQUFTcnBFLENBQ1gsSUFDQSxNQUFPLENBQ0xnN0UsUUFDQTNSLFNBRUosRUFHRixZQ3hITThnQixHQUFpQixDQUNyQkMsU0FBVSxJQUNWQyxtQkFBb0IsSUFDcEJDLFdBQVksSUFDWkMsV0FBWSxJQUNaL3hDLEdBQUksSUFDSmd5QyxRQUFTLElBQ1RDLFNBQVUsSUFDVkMsNEJBQTZCLElBQzdCQyxVQUFXLElBQ1hDLGFBQWMsSUFDZEMsZUFBZ0IsSUFDaEJDLFlBQWEsSUFDYkMsZ0JBQWlCLElBQ2pCQyxPQUFRLElBQ1JDLGdCQUFpQixJQUNqQkMsaUJBQWtCLElBQ2xCQyxNQUFPLElBQ1BDLFNBQVUsSUFDVkMsWUFBYSxJQUNiQyxTQUFVLElBQ1ZDLE9BQVEsSUFDUkMsa0JBQW1CLElBQ25CQyxrQkFBbUIsSUFDbkJDLFdBQVksSUFDWkMsYUFBYyxJQUNkQyxnQkFBaUIsSUFDakJDLFVBQVcsSUFDWEMsU0FBVSxJQUNWQyxpQkFBa0IsSUFDbEJDLGNBQWUsSUFDZkMsNEJBQTZCLElBQzdCQyxlQUFnQixJQUNoQkMsU0FBVSxJQUNWQyxLQUFNLElBQ05DLGVBQWdCLElBQ2hCQyxtQkFBb0IsSUFDcEJDLGdCQUFpQixJQUNqQkMsV0FBWSxJQUNaQyxxQkFBc0IsSUFDdEJDLG9CQUFxQixJQUNyQkMsa0JBQW1CLElBQ25CQyxVQUFXLElBQ1hDLG1CQUFvQixJQUNwQkMsb0JBQXFCLElBQ3JCQyxPQUFRLElBQ1JDLGlCQUFrQixJQUNsQkMsU0FBVSxJQUNWQyxnQkFBaUIsSUFDakJDLHFCQUFzQixJQUN0QkMsZ0JBQWlCLElBQ2pCQyw0QkFBNkIsSUFDN0JDLDJCQUE0QixJQUM1QkMsb0JBQXFCLElBQ3JCQyxlQUFnQixJQUNoQkMsV0FBWSxJQUNaQyxtQkFBb0IsSUFDcEJDLGVBQWdCLElBQ2hCQyx3QkFBeUIsSUFDekJDLHNCQUF1QixJQUN2QkMsb0JBQXFCLElBQ3JCQyxhQUFjLElBQ2RDLFlBQWEsSUFDYkMsOEJBQStCLEtBR2pDdHVGLE9BQU9tK0UsUUFBUXFNLElBQWdCeC9ELFNBQVEsRUFBRXJDLEVBQUtub0IsTUFDNUNncUYsR0FBZWhxRixHQUFTbW9CLENBQUcsSUFHN0IsWUN6Qk00bEUsR0FuQk4sU0FBU0MsRUFBZUMsR0FDdEIsTUFBTXZwRCxFQUFVLElBQUksR0FBTXVwRCxHQUNwQjF3RCxFQUFXcjdCLEdBQUsscUJBQXlCd2lDLEdBYS9DLE9BVkEwMUMsR0FBTXgvQyxPQUFPMkMsRUFBVSxhQUFpQm1ILEVBQVMsQ0FBQ3V4QyxZQUFZLElBRzlEbUUsR0FBTXgvQyxPQUFPMkMsRUFBVW1ILEVBQVMsS0FBTSxDQUFDdXhDLFlBQVksSUFHbkQxNEMsRUFBUzExQixPQUFTLFNBQWdCOGdGLEdBQ2hDLE9BQU9xRixFQUFlbEgsR0FBWW1ILEVBQWV0RixHQUNuRCxFQUVPcHJELENBQ1QsQ0FHY3l3RCxDQUFlLElBRzdCRCxHQUFNckYsTUFBUSxHQUdkcUYsR0FBTXZMLGNBQWdCLEdBQ3RCdUwsR0FBTXBFLFlBQWMsR0FDcEJvRSxHQUFNekwsU0FBV0EsR0FDakJ5TCxHQUFNRyxRTHREaUIsUUt1RHZCSCxHQUFNSSxXQUFhLEdBR25CSixHQUFNN1QsV0FBYSxHQUduQjZULEdBQU1LLE9BQVNMLEdBQU12TCxjQUdyQnVMLEdBQU1wekUsSUFBTSxTQUFhMHpFLEdBQ3ZCLE9BQU9udkQsUUFBUXZrQixJQUFJMHpFLEVBQ3JCLEVBRUFOLEdBQU1PLE9DN0NTLFNBQWdCbi9FLEdBQzdCLE9BQU8sU0FBY3l0RCxHQUNuQixPQUFPenRELEVBQVNsTixNQUFNLEtBQU0yNkQsRUFDOUIsQ0FDRixFRDRDQW14QixHQUFNUSxhRTVEUyxTQUFzQnpvRCxHQUNuQyxPQUFPczBDLEdBQU16RSxTQUFTN3ZDLEtBQXNDLElBQXpCQSxFQUFReW9ELFlBQzdDLEVGNkRBUixHQUFNakgsWUFBY0EsR0FFcEJpSCxHQUFNL04sYUFBZSxHQUVyQitOLEdBQU1TLFdBQWFyWixHQUFTLEdBQWVpRixHQUFNM0QsV0FBV3RCLEdBQVMsSUFBSWlDLFNBQVNqQyxHQUFTQSxHQUUzRjRZLEdBQU0vRCxlQUFpQixHQUV2QitELEdBQU1qdkMsUUFBVWl2QyxHQUdoQixZR3JGQSxJQ0FJLEdEQUEsR0FBd0MsU0FBVW4zQixFQUFTQyxFQUFZbnlELEVBQUdveUQsR0FFMUUsT0FBTyxJQUFLcHlELElBQU1BLEVBQUl3NkIsV0FBVSxTQUFVRyxFQUFTNm9CLEdBQy9DLFNBQVM2TyxFQUFVLzJELEdBQVMsSUFBTWczRCxFQUFLRixFQUFVdDFELEtBQUt4QixHQUFTLENBQUUsTUFBT2EsR0FBS3FuRCxFQUFPcm5ELEVBQUksQ0FBRSxDQUMxRixTQUFTbzJELEVBQVNqM0QsR0FBUyxJQUFNZzNELEVBQUtGLEVBQWlCLE1BQUU5MkQsR0FBUyxDQUFFLE1BQU9hLEdBQUtxbkQsRUFBT3JuRCxFQUFJLENBQUUsQ0FDN0YsU0FBU20yRCxFQUFLalIsR0FKbEIsSUFBZS9sRCxFQUlhK2xELEVBQU85a0QsS0FBT28rQixFQUFRMG1CLEVBQU8vbEQsUUFKMUNBLEVBSXlEK2xELEVBQU8vbEQsTUFKaERBLGFBQWlCMEUsRUFBSTFFLEVBQVEsSUFBSTBFLEdBQUUsU0FBVTI2QixHQUFXQSxFQUFRci9CLEVBQVEsS0FJakJzL0IsS0FBS3kzQixFQUFXRSxFQUFXLENBQzdHRCxHQUFNRixFQUFZQSxFQUFVNzBELE1BQU0yMEQsRUFBU0MsR0FBYyxLQUFLcjFELE9BQ2xFLEdBQ0osRUFDSSxHQUE0QyxTQUFVbzFELEVBQVNob0QsR0FDL0QsSUFBc0cxTixFQUFHOE8sRUFBR3ZMLEVBQUdyRSxFQUEzR292RCxFQUFJLENBQUUySCxNQUFPLEVBQUdDLEtBQU0sV0FBYSxHQUFXLEVBQVAzeUQsRUFBRSxHQUFRLE1BQU1BLEVBQUUsR0FBSSxPQUFPQSxFQUFFLEVBQUksRUFBRzR5RCxLQUFNLEdBQUlDLElBQUssSUFDaEcsT0FBT2wzRCxFQUFJLENBQUVvQixLQUFNKzFELEVBQUssR0FBSSxNQUFTQSxFQUFLLEdBQUksT0FBVUEsRUFBSyxJQUF3QixtQkFBWGoyRCxTQUEwQmxCLEVBQUVrQixPQUFPRyxVQUFZLFdBQWEsT0FBT2hCLElBQU0sR0FBSUwsRUFDdkosU0FBU20zRCxFQUFLL25ELEdBQUssT0FBTyxTQUFVdkssR0FBSyxPQUN6QyxTQUFjdXlELEdBQ1YsR0FBSXQyRCxFQUFHLE1BQU0sSUFBSUcsVUFBVSxtQ0FDM0IsS0FBT2pCLElBQU1BLEVBQUksRUFBR28zRCxFQUFHLEtBQU9oSSxFQUFJLElBQUtBLE9BQ25DLEdBQUl0dUQsRUFBSSxFQUFHOE8sSUFBTXZMLEVBQVksRUFBUit5RCxFQUFHLEdBQVN4bkQsRUFBVSxPQUFJd25ELEVBQUcsR0FBS3huRCxFQUFTLFNBQU92TCxFQUFJdUwsRUFBVSxTQUFNdkwsRUFBRXpDLEtBQUtnTyxHQUFJLEdBQUtBLEVBQUV4TyxTQUFXaUQsRUFBSUEsRUFBRXpDLEtBQUtnTyxFQUFHd25ELEVBQUcsS0FBS3YyRCxLQUFNLE9BQU93RCxFQUUzSixPQURJdUwsRUFBSSxFQUFHdkwsSUFBRyt5RCxFQUFLLENBQVMsRUFBUkEsRUFBRyxHQUFRL3lELEVBQUV6RSxRQUN6QnczRCxFQUFHLElBQ1AsS0FBSyxFQUFHLEtBQUssRUFBRy95RCxFQUFJK3lELEVBQUksTUFDeEIsS0FBSyxFQUFjLE9BQVhoSSxFQUFFMkgsUUFBZ0IsQ0FBRW4zRCxNQUFPdzNELEVBQUcsR0FBSXYyRCxNQUFNLEdBQ2hELEtBQUssRUFBR3V1RCxFQUFFMkgsUUFBU25uRCxFQUFJd25ELEVBQUcsR0FBSUEsRUFBSyxDQUFDLEdBQUksU0FDeEMsS0FBSyxFQUFHQSxFQUFLaEksRUFBRThILElBQUlobUQsTUFBT2srQyxFQUFFNkgsS0FBSy9sRCxNQUFPLFNBQ3hDLFFBQ0ksTUFBa0I3TSxHQUFaQSxFQUFJK3FELEVBQUU2SCxNQUFZaDNELE9BQVMsR0FBS29FLEVBQUVBLEVBQUVwRSxPQUFTLEtBQWtCLElBQVZtM0QsRUFBRyxJQUFzQixJQUFWQSxFQUFHLElBQVcsQ0FBRWhJLEVBQUksRUFBRyxRQUFVLENBQzNHLEdBQWMsSUFBVmdJLEVBQUcsTUFBYy95RCxHQUFNK3lELEVBQUcsR0FBSy95RCxFQUFFLElBQU0reUQsRUFBRyxHQUFLL3lELEVBQUUsSUFBTSxDQUFFK3FELEVBQUUySCxNQUFRSyxFQUFHLEdBQUksS0FBTyxDQUNyRixHQUFjLElBQVZBLEVBQUcsSUFBWWhJLEVBQUUySCxNQUFRMXlELEVBQUUsR0FBSSxDQUFFK3FELEVBQUUySCxNQUFRMXlELEVBQUUsR0FBSUEsRUFBSSt5RCxFQUFJLEtBQU8sQ0FDcEUsR0FBSS95RCxHQUFLK3FELEVBQUUySCxNQUFRMXlELEVBQUUsR0FBSSxDQUFFK3FELEVBQUUySCxNQUFRMXlELEVBQUUsR0FBSStxRCxFQUFFOEgsSUFBSWx3RCxLQUFLb3dELEdBQUssS0FBTyxDQUM5RC95RCxFQUFFLElBQUkrcUQsRUFBRThILElBQUlobUQsTUFDaEJrK0MsRUFBRTZILEtBQUsvbEQsTUFBTyxTQUV0QmttRCxFQUFLNW9ELEVBQUs1TSxLQUFLNDBELEVBQVNwSCxFQUM1QixDQUFFLE1BQU8zdUQsR0FBSzIyRCxFQUFLLENBQUMsRUFBRzMyRCxHQUFJbVAsRUFBSSxDQUFHLENBQUUsUUFBVTlPLEVBQUl1RCxFQUFJLENBQUcsQ0FDekQsR0FBWSxFQUFSK3lELEVBQUcsR0FBUSxNQUFNQSxFQUFHLEdBQUksTUFBTyxDQUFFeDNELE1BQU93M0QsRUFBRyxHQUFLQSxFQUFHLFFBQUssRUFBUXYyRCxNQUFNLEVBQzlFLENBdEJnRCsxRCxDQUFLLENBQUN4bkQsRUFBR3ZLLEdBQUssQ0FBRyxDQXVCckUsRUFFSXdwRixHQUFVLHFCQUNWQyxHQUF1QixVQUFhLENBQ3BDOUwsUUFBUyxXQUFXejJFLE9BQU9zaUYsR0FBUyxnQkFDcEMxUyxPQUFRLENBQ0o0UyxTQUFVLGdCQUNWQyxXQUFZLGNBR1RDLEdBQWUsQ0FDdEJDLGlCQUFrQixTQUFVOTJCLEVBQVdELEdBQ25DLE9BQU8sR0FBVXQzRCxVQUFNLE9BQVEsR0FBUSxXQUVuQyxPQUFPLEdBQVlBLE1BQU0sU0FBVWtqRCxHQUMvQixPQUFRQSxFQUFHd1QsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQWF1M0IsR0FBcUJsakUsSUFBSSxHQUFJLENBQ2xEdXdELE9BQVEsQ0FDSi9qQixVQUFXQSxFQUNYRCxTQUFVQSxFQUNWZzNCLE9BQVEsQ0FBQyxpQkFBa0IsZUFBZXpsRixLQUFLLEtBQy9DMGxGLGNBQWUsTUFHM0IsS0FBSyxFQUVELE1BQU8sQ0FBQyxFQURBcnJDLEVBQUd5VCxPQUFRaDFDLE1BRy9CLEdBQ0osR0FDSixFQUNBNnNFLGdCQUFpQixTQUFVajNCLEVBQVdELEdBQ2xDLE9BQU8sR0FBVXQzRCxVQUFNLE9BQVEsR0FBUSxXQUVuQyxPQUFPLEdBQVlBLE1BQU0sU0FBVWtqRCxHQUMvQixPQUFRQSxFQUFHd1QsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQWF1M0IsR0FBcUJsakUsSUFBSSxHQUFJLENBQ2xEdXdELE9BQVEsQ0FDSi9qQixVQUFXQSxFQUNYRCxTQUFVQSxFQUNWbTNCLE1BQU8sQ0FBQyxjQUFlLHFCQUFzQixzQkFBc0I1bEYsS0FBSyxTQUdwRixLQUFLLEVBRUQsTUFBTyxDQUFDLEVBREFxNkMsRUFBR3lULE9BQVFoMUMsTUFHL0IsR0FDSixHQUNKLEVBQ0Erc0UsaUJBQWtCLFNBQVVDLEdBQ3hCLE9BQU8sR0FBVTN1RixVQUFNLE9BQVEsR0FBUSxXQUVuQyxPQUFPLEdBQVlBLE1BQU0sU0FBVWtqRCxHQUMvQixPQUFRQSxFQUFHd1QsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQWEsT0FBVSxxQkFBcUJockQsT0FBT3NpRixHQUFTLGNBQWUsQ0FDbkYxUyxPQUFRLENBQ0pwNEUsS0FBTXlyRixNQUdsQixLQUFLLEVBRUQsTUFBTyxDQUFDLEVBREF6ckMsRUFBR3lULE9BQVFoMUMsTUFHL0IsR0FDSixHQUNKLEdFckdBLEdBQXdDLFNBQVV3MEMsRUFBU0MsRUFBWW55RCxFQUFHb3lELEdBRTFFLE9BQU8sSUFBS3B5RCxJQUFNQSxFQUFJdzZCLFdBQVUsU0FBVUcsRUFBUzZvQixHQUMvQyxTQUFTNk8sRUFBVS8yRCxHQUFTLElBQU1nM0QsRUFBS0YsRUFBVXQxRCxLQUFLeEIsR0FBUyxDQUFFLE1BQU9hLEdBQUtxbkQsRUFBT3JuRCxFQUFJLENBQUUsQ0FDMUYsU0FBU28yRCxFQUFTajNELEdBQVMsSUFBTWczRCxFQUFLRixFQUFpQixNQUFFOTJELEdBQVMsQ0FBRSxNQUFPYSxHQUFLcW5ELEVBQU9ybkQsRUFBSSxDQUFFLENBQzdGLFNBQVNtMkQsRUFBS2pSLEdBSmxCLElBQWUvbEQsRUFJYStsRCxFQUFPOWtELEtBQU9vK0IsRUFBUTBtQixFQUFPL2xELFFBSjFDQSxFQUl5RCtsRCxFQUFPL2xELE1BSmhEQSxhQUFpQjBFLEVBQUkxRSxFQUFRLElBQUkwRSxHQUFFLFNBQVUyNkIsR0FBV0EsRUFBUXIvQixFQUFRLEtBSWpCcy9CLEtBQUt5M0IsRUFBV0UsRUFBVyxDQUM3R0QsR0FBTUYsRUFBWUEsRUFBVTcwRCxNQUFNMjBELEVBQVNDLEdBQWMsS0FBS3IxRCxPQUNsRSxHQUNKLEVBQ0ksR0FBNEMsU0FBVW8xRCxFQUFTaG9ELEdBQy9ELElBQXNHMU4sRUFBRzhPLEVBQUd2TCxFQUFHckUsRUFBM0dvdkQsRUFBSSxDQUFFMkgsTUFBTyxFQUFHQyxLQUFNLFdBQWEsR0FBVyxFQUFQM3lELEVBQUUsR0FBUSxNQUFNQSxFQUFFLEdBQUksT0FBT0EsRUFBRSxFQUFJLEVBQUc0eUQsS0FBTSxHQUFJQyxJQUFLLElBQ2hHLE9BQU9sM0QsRUFBSSxDQUFFb0IsS0FBTSsxRCxFQUFLLEdBQUksTUFBU0EsRUFBSyxHQUFJLE9BQVVBLEVBQUssSUFBd0IsbUJBQVhqMkQsU0FBMEJsQixFQUFFa0IsT0FBT0csVUFBWSxXQUFhLE9BQU9oQixJQUFNLEdBQUlMLEVBQ3ZKLFNBQVNtM0QsRUFBSy9uRCxHQUFLLE9BQU8sU0FBVXZLLEdBQUssT0FDekMsU0FBY3V5RCxHQUNWLEdBQUl0MkQsRUFBRyxNQUFNLElBQUlHLFVBQVUsbUNBQzNCLEtBQU9qQixJQUFNQSxFQUFJLEVBQUdvM0QsRUFBRyxLQUFPaEksRUFBSSxJQUFLQSxPQUNuQyxHQUFJdHVELEVBQUksRUFBRzhPLElBQU12TCxFQUFZLEVBQVIreUQsRUFBRyxHQUFTeG5ELEVBQVUsT0FBSXduRCxFQUFHLEdBQUt4bkQsRUFBUyxTQUFPdkwsRUFBSXVMLEVBQVUsU0FBTXZMLEVBQUV6QyxLQUFLZ08sR0FBSSxHQUFLQSxFQUFFeE8sU0FBV2lELEVBQUlBLEVBQUV6QyxLQUFLZ08sRUFBR3duRCxFQUFHLEtBQUt2MkQsS0FBTSxPQUFPd0QsRUFFM0osT0FESXVMLEVBQUksRUFBR3ZMLElBQUcreUQsRUFBSyxDQUFTLEVBQVJBLEVBQUcsR0FBUS95RCxFQUFFekUsUUFDekJ3M0QsRUFBRyxJQUNQLEtBQUssRUFBRyxLQUFLLEVBQUcveUQsRUFBSSt5RCxFQUFJLE1BQ3hCLEtBQUssRUFBYyxPQUFYaEksRUFBRTJILFFBQWdCLENBQUVuM0QsTUFBT3czRCxFQUFHLEdBQUl2MkQsTUFBTSxHQUNoRCxLQUFLLEVBQUd1dUQsRUFBRTJILFFBQVNubkQsRUFBSXduRCxFQUFHLEdBQUlBLEVBQUssQ0FBQyxHQUFJLFNBQ3hDLEtBQUssRUFBR0EsRUFBS2hJLEVBQUU4SCxJQUFJaG1ELE1BQU9rK0MsRUFBRTZILEtBQUsvbEQsTUFBTyxTQUN4QyxRQUNJLE1BQWtCN00sR0FBWkEsRUFBSStxRCxFQUFFNkgsTUFBWWgzRCxPQUFTLEdBQUtvRSxFQUFFQSxFQUFFcEUsT0FBUyxLQUFrQixJQUFWbTNELEVBQUcsSUFBc0IsSUFBVkEsRUFBRyxJQUFXLENBQUVoSSxFQUFJLEVBQUcsUUFBVSxDQUMzRyxHQUFjLElBQVZnSSxFQUFHLE1BQWMveUQsR0FBTSt5RCxFQUFHLEdBQUsveUQsRUFBRSxJQUFNK3lELEVBQUcsR0FBSy95RCxFQUFFLElBQU0sQ0FBRStxRCxFQUFFMkgsTUFBUUssRUFBRyxHQUFJLEtBQU8sQ0FDckYsR0FBYyxJQUFWQSxFQUFHLElBQVloSSxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUksQ0FBRStxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUlBLEVBQUkreUQsRUFBSSxLQUFPLENBQ3BFLEdBQUkveUQsR0FBSytxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUksQ0FBRStxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUkrcUQsRUFBRThILElBQUlsd0QsS0FBS293RCxHQUFLLEtBQU8sQ0FDOUQveUQsRUFBRSxJQUFJK3FELEVBQUU4SCxJQUFJaG1ELE1BQ2hCaytDLEVBQUU2SCxLQUFLL2xELE1BQU8sU0FFdEJrbUQsRUFBSzVvRCxFQUFLNU0sS0FBSzQwRCxFQUFTcEgsRUFDNUIsQ0FBRSxNQUFPM3VELEdBQUsyMkQsRUFBSyxDQUFDLEVBQUczMkQsR0FBSW1QLEVBQUksQ0FBRyxDQUFFLFFBQVU5TyxFQUFJdUQsRUFBSSxDQUFHLENBQ3pELEdBQVksRUFBUit5RCxFQUFHLEdBQVEsTUFBTUEsRUFBRyxHQUFJLE1BQU8sQ0FBRXgzRCxNQUFPdzNELEVBQUcsR0FBS0EsRUFBRyxRQUFLLEVBQVF2MkQsTUFBTSxFQUM5RSxDQXRCZ0QrMUQsQ0FBSyxDQUFDeG5ELEVBQUd2SyxHQUFLLENBQUcsQ0F1QnJFLEVBR0lvcUYsR0FBeUIsVUFBYSxDQUN0Q3pNLFFBQVMsMENBQ1Q3RyxPQUFRLENBQ0p1VCxNQUpJLG1DQUtKQyxNQUFPLFlBR0pDLEdBQWlCLENBQ3hCQywwQkFBMkIsU0FBVUwsR0FDakMsT0FBTyxHQUFVM3VGLFVBQU0sT0FBUSxHQUFRLFdBRW5DLE9BQU8sR0FBWUEsTUFBTSxTQUFVa2pELEdBQy9CLE9BQVFBLEVBQUd3VCxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYWs0QixHQUF1QjdqRSxJQUFJLFdBQVksQ0FDNUR1d0QsT0FBUSxDQUNKdjRFLEVBQUc0ckYsTUFHZixLQUFLLEVBRUQsTUFBTyxDQUFDLEVBREF6ckMsRUFBR3lULE9BQVFoMUMsTUFHL0IsR0FDSixHQUNKLEVBQ0FzdEUsd0JBQXlCLFNBQVV4M0IsRUFBS0QsR0FDcEMsT0FBTyxHQUFVeDNELFVBQU0sT0FBUSxHQUFRLFdBRW5DLE9BQU8sR0FBWUEsTUFBTSxTQUFVa2pELEdBQy9CLE9BQVFBLEVBQUd3VCxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYWs0QixHQUF1QjdqRSxJQUFJLFdBQVksQ0FDNUR1d0QsT0FBUSxDQUNKOWpCLElBQUtBLEVBQ0xDLElBQUtBLE1BR2pCLEtBQUssRUFFRCxNQUFPLENBQUMsRUFEQXZVLEVBQUd5VCxPQUFRaDFDLE1BRy9CLEdBQ0osR0FDSixHRHpFT3V0RSxHQUFvQnB1QixHQUFZLENBQ3ZDNTlELEtBQU0sZUFDTnc1RCxhQU5lLENBQ2Z5eUIsUUFBUyxLQUNUQyxjQUFldjdCLEdBQWV3N0IsTUFLOUJ0MEIsU0FBVSxDQUNOdTBCLGtCQUFtQixTQUFVbjhFLEVBQU95SSxHQUFVLEVBQzlDMnpFLGdCQUFpQixTQUFVcDhFLEVBQU95SSxHQUM5QnpJLEVBQU1nOEUsUUFBVXZ6RSxFQUFPeXBCLE9BQzNCLEVBQ0FtcUQsc0JBQXVCLFNBQVVyOEUsRUFBT3lJLEdBQ3BDekksRUFBTWk4RSxjQUFnQnh6RSxFQUFPeXBCLE9BQ2pDLEtBR0drcUQsSUFBbUIsR0FBS0wsR0FBa0J4c0IsU0FBWTZzQixnQkFBa0JDLEdBQXdCLEdBQUdBLHNCQUF1QkYsR0FBb0IsR0FBR0Esa0JBQzVKLFNBQWVKLEdBQXlCLFFFckJ4QyxJQ0FJLEdEQUEsR0FBNEMsU0FBVS80QixFQUFTaG9ELEdBQy9ELElBQXNHMU4sRUFBRzhPLEVBQUd2TCxFQUFHckUsRUFBM0dvdkQsRUFBSSxDQUFFMkgsTUFBTyxFQUFHQyxLQUFNLFdBQWEsR0FBVyxFQUFQM3lELEVBQUUsR0FBUSxNQUFNQSxFQUFFLEdBQUksT0FBT0EsRUFBRSxFQUFJLEVBQUc0eUQsS0FBTSxHQUFJQyxJQUFLLElBQ2hHLE9BQU9sM0QsRUFBSSxDQUFFb0IsS0FBTSsxRCxFQUFLLEdBQUksTUFBU0EsRUFBSyxHQUFJLE9BQVVBLEVBQUssSUFBd0IsbUJBQVhqMkQsU0FBMEJsQixFQUFFa0IsT0FBT0csVUFBWSxXQUFhLE9BQU9oQixJQUFNLEdBQUlMLEVBQ3ZKLFNBQVNtM0QsRUFBSy9uRCxHQUFLLE9BQU8sU0FBVXZLLEdBQUssT0FDekMsU0FBY3V5RCxHQUNWLEdBQUl0MkQsRUFBRyxNQUFNLElBQUlHLFVBQVUsbUNBQzNCLEtBQU9qQixJQUFNQSxFQUFJLEVBQUdvM0QsRUFBRyxLQUFPaEksRUFBSSxJQUFLQSxPQUNuQyxHQUFJdHVELEVBQUksRUFBRzhPLElBQU12TCxFQUFZLEVBQVIreUQsRUFBRyxHQUFTeG5ELEVBQVUsT0FBSXduRCxFQUFHLEdBQUt4bkQsRUFBUyxTQUFPdkwsRUFBSXVMLEVBQVUsU0FBTXZMLEVBQUV6QyxLQUFLZ08sR0FBSSxHQUFLQSxFQUFFeE8sU0FBV2lELEVBQUlBLEVBQUV6QyxLQUFLZ08sRUFBR3duRCxFQUFHLEtBQUt2MkQsS0FBTSxPQUFPd0QsRUFFM0osT0FESXVMLEVBQUksRUFBR3ZMLElBQUcreUQsRUFBSyxDQUFTLEVBQVJBLEVBQUcsR0FBUS95RCxFQUFFekUsUUFDekJ3M0QsRUFBRyxJQUNQLEtBQUssRUFBRyxLQUFLLEVBQUcveUQsRUFBSSt5RCxFQUFJLE1BQ3hCLEtBQUssRUFBYyxPQUFYaEksRUFBRTJILFFBQWdCLENBQUVuM0QsTUFBT3czRCxFQUFHLEdBQUl2MkQsTUFBTSxHQUNoRCxLQUFLLEVBQUd1dUQsRUFBRTJILFFBQVNubkQsRUFBSXduRCxFQUFHLEdBQUlBLEVBQUssQ0FBQyxHQUFJLFNBQ3hDLEtBQUssRUFBR0EsRUFBS2hJLEVBQUU4SCxJQUFJaG1ELE1BQU9rK0MsRUFBRTZILEtBQUsvbEQsTUFBTyxTQUN4QyxRQUNJLE1BQWtCN00sR0FBWkEsRUFBSStxRCxFQUFFNkgsTUFBWWgzRCxPQUFTLEdBQUtvRSxFQUFFQSxFQUFFcEUsT0FBUyxLQUFrQixJQUFWbTNELEVBQUcsSUFBc0IsSUFBVkEsRUFBRyxJQUFXLENBQUVoSSxFQUFJLEVBQUcsUUFBVSxDQUMzRyxHQUFjLElBQVZnSSxFQUFHLE1BQWMveUQsR0FBTSt5RCxFQUFHLEdBQUsveUQsRUFBRSxJQUFNK3lELEVBQUcsR0FBSy95RCxFQUFFLElBQU0sQ0FBRStxRCxFQUFFMkgsTUFBUUssRUFBRyxHQUFJLEtBQU8sQ0FDckYsR0FBYyxJQUFWQSxFQUFHLElBQVloSSxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUksQ0FBRStxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUlBLEVBQUkreUQsRUFBSSxLQUFPLENBQ3BFLEdBQUkveUQsR0FBSytxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUksQ0FBRStxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUkrcUQsRUFBRThILElBQUlsd0QsS0FBS293RCxHQUFLLEtBQU8sQ0FDOUQveUQsRUFBRSxJQUFJK3FELEVBQUU4SCxJQUFJaG1ELE1BQ2hCaytDLEVBQUU2SCxLQUFLL2xELE1BQU8sU0FFdEJrbUQsRUFBSzVvRCxFQUFLNU0sS0FBSzQwRCxFQUFTcEgsRUFDNUIsQ0FBRSxNQUFPM3VELEdBQUsyMkQsRUFBSyxDQUFDLEVBQUczMkQsR0FBSW1QLEVBQUksQ0FBRyxDQUFFLFFBQVU5TyxFQUFJdUQsRUFBSSxDQUFHLENBQ3pELEdBQVksRUFBUit5RCxFQUFHLEdBQVEsTUFBTUEsRUFBRyxHQUFJLE1BQU8sQ0FBRXgzRCxNQUFPdzNELEVBQUcsR0FBS0EsRUFBRyxRQUFLLEVBQVF2MkQsTUFBTSxFQUM5RSxDQXRCZ0QrMUQsQ0FBSyxDQUFDeG5ELEVBQUd2SyxHQUFLLENBQUcsQ0F1QnJFLEVBS0EsU0FBU2lyRixHQUF3Qjd6RSxHQUM3QixJQUFJK0YsRUFDSixPQUFPLEdBQVkzaEIsTUFBTSxTQUFVa2pELEdBQy9CLE9BQVFBLEVBQUd3VCxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYTRTLEdBQUlrbUIsR0FBc0IzN0IsR0FBZTY3QixXQUN0RSxLQUFLLEVBQ0R4c0MsRUFBR3lULE9BQ0h6VCxFQUFHd1QsTUFBUSxFQUNmLEtBQUssRUFFRCxPQURBeFQsRUFBRzBULEtBQUtqd0QsS0FBSyxDQUFDLEVBQUcsRUFBRyxDQUFFLElBQ2YsQ0FBQyxFQUFhLEdBQUtvb0YsR0FBZUUsd0JBQXlCcnpFLEVBQU95cEIsUUFBUW95QixJQUFLNzdDLEVBQU95cEIsUUFBUW15QixNQUN6RyxLQUFLLEVBRUQsT0FEQTcxQyxFQUFPdWhDLEVBQUd5VCxPQUNILENBQUMsRUFBYTJTLEdBQUlpbUIsR0FBZ0I1dEUsS0FDN0MsS0FBSyxFQUVELE9BREF1aEMsRUFBR3lULE9BQ0ksQ0FBQyxFQUFhMlMsR0FBSWttQixHQUFzQjM3QixHQUFldzdCLFFBQ2xFLEtBQUssRUFFRCxPQURBbnNDLEVBQUd5VCxPQUNJLENBQUMsRUFBYSxHQUN6QixLQUFLLEVBRUQsT0FEVXpULEVBQUd5VCxPQUNOLENBQUMsRUFBYTJTLEdBQUlrbUIsR0FBc0IzN0IsR0FBZTg3QixTQUNsRSxLQUFLLEVBRUQsT0FEQXpzQyxFQUFHeVQsT0FDSSxDQUFDLEVBQWEsR0FDekIsS0FBSyxFQUFHLE1BQU8sQ0FBQyxHQUV4QixHQUNKLENBQ08sU0FBU2k1QixLQUNaLE9BQU8sR0FBWTV2RixNQUFNLFNBQVVrakQsR0FDL0IsT0FBUUEsRUFBR3dULE9BQ1AsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFhLEdBQVU0NEIsR0FBa0JyeUUsS0FBTXd5RSxLQUMvRCxLQUFLLEVBRUQsT0FEQXZzQyxFQUFHeVQsT0FDSSxDQUFDLEdBRXBCLEdBQ0osQ0NuRUEsSUFJV2s1QixHQUFxQi91QixHQUFZLENBQ3hDNTlELEtBQU0sZ0JBQ053NUQsYUFOZSxDQUNmeXlCLFFBQVMsS0FDVEMsY0FBZXY3QixHQUFldzdCLE1BSzlCdDBCLFNBQVUsQ0FDTiswQixtQkFBb0IsU0FBVTM4RSxFQUFPeUksR0FBVSxFQUMvQ20wRSxpQkFBa0IsU0FBVTU4RSxFQUFPeUksR0FDL0J6SSxFQUFNZzhFLFFBQVV2ekUsRUFBT3lwQixPQUMzQixFQUNBMnFELHVCQUF3QixTQUFVNzhFLEVBQU95SSxHQUNyQ3pJLEVBQU1pOEUsY0FBZ0J4ekUsRUFBT3lwQixPQUNqQyxLQUdHeXFELElBQXNCLEdBQUtELEdBQW1CbnRCLFNBQVlvdEIsbUJBQXFCQyxHQUFtQixHQUFHQSxpQkFBa0JDLEdBQXlCLEdBQUdBLHVCQUM5SixTQUFlSCxHQUEwQixRQ3JCekMsSUNBSSxHREFBLEdBQTRDLFNBQVUxNUIsRUFBU2hvRCxHQUMvRCxJQUFzRzFOLEVBQUc4TyxFQUFHdkwsRUFBR3JFLEVBQTNHb3ZELEVBQUksQ0FBRTJILE1BQU8sRUFBR0MsS0FBTSxXQUFhLEdBQVcsRUFBUDN5RCxFQUFFLEdBQVEsTUFBTUEsRUFBRSxHQUFJLE9BQU9BLEVBQUUsRUFBSSxFQUFHNHlELEtBQU0sR0FBSUMsSUFBSyxJQUNoRyxPQUFPbDNELEVBQUksQ0FBRW9CLEtBQU0rMUQsRUFBSyxHQUFJLE1BQVNBLEVBQUssR0FBSSxPQUFVQSxFQUFLLElBQXdCLG1CQUFYajJELFNBQTBCbEIsRUFBRWtCLE9BQU9HLFVBQVksV0FBYSxPQUFPaEIsSUFBTSxHQUFJTCxFQUN2SixTQUFTbTNELEVBQUsvbkQsR0FBSyxPQUFPLFNBQVV2SyxHQUFLLE9BQ3pDLFNBQWN1eUQsR0FDVixHQUFJdDJELEVBQUcsTUFBTSxJQUFJRyxVQUFVLG1DQUMzQixLQUFPakIsSUFBTUEsRUFBSSxFQUFHbzNELEVBQUcsS0FBT2hJLEVBQUksSUFBS0EsT0FDbkMsR0FBSXR1RCxFQUFJLEVBQUc4TyxJQUFNdkwsRUFBWSxFQUFSK3lELEVBQUcsR0FBU3huRCxFQUFVLE9BQUl3bkQsRUFBRyxHQUFLeG5ELEVBQVMsU0FBT3ZMLEVBQUl1TCxFQUFVLFNBQU12TCxFQUFFekMsS0FBS2dPLEdBQUksR0FBS0EsRUFBRXhPLFNBQVdpRCxFQUFJQSxFQUFFekMsS0FBS2dPLEVBQUd3bkQsRUFBRyxLQUFLdjJELEtBQU0sT0FBT3dELEVBRTNKLE9BREl1TCxFQUFJLEVBQUd2TCxJQUFHK3lELEVBQUssQ0FBUyxFQUFSQSxFQUFHLEdBQVEveUQsRUFBRXpFLFFBQ3pCdzNELEVBQUcsSUFDUCxLQUFLLEVBQUcsS0FBSyxFQUFHL3lELEVBQUkreUQsRUFBSSxNQUN4QixLQUFLLEVBQWMsT0FBWGhJLEVBQUUySCxRQUFnQixDQUFFbjNELE1BQU93M0QsRUFBRyxHQUFJdjJELE1BQU0sR0FDaEQsS0FBSyxFQUFHdXVELEVBQUUySCxRQUFTbm5ELEVBQUl3bkQsRUFBRyxHQUFJQSxFQUFLLENBQUMsR0FBSSxTQUN4QyxLQUFLLEVBQUdBLEVBQUtoSSxFQUFFOEgsSUFBSWhtRCxNQUFPaytDLEVBQUU2SCxLQUFLL2xELE1BQU8sU0FDeEMsUUFDSSxNQUFrQjdNLEdBQVpBLEVBQUkrcUQsRUFBRTZILE1BQVloM0QsT0FBUyxHQUFLb0UsRUFBRUEsRUFBRXBFLE9BQVMsS0FBa0IsSUFBVm0zRCxFQUFHLElBQXNCLElBQVZBLEVBQUcsSUFBVyxDQUFFaEksRUFBSSxFQUFHLFFBQVUsQ0FDM0csR0FBYyxJQUFWZ0ksRUFBRyxNQUFjL3lELEdBQU0reUQsRUFBRyxHQUFLL3lELEVBQUUsSUFBTSt5RCxFQUFHLEdBQUsveUQsRUFBRSxJQUFNLENBQUUrcUQsRUFBRTJILE1BQVFLLEVBQUcsR0FBSSxLQUFPLENBQ3JGLEdBQWMsSUFBVkEsRUFBRyxJQUFZaEksRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJLENBQUUrcUQsRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJQSxFQUFJK3lELEVBQUksS0FBTyxDQUNwRSxHQUFJL3lELEdBQUsrcUQsRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJLENBQUUrcUQsRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJK3FELEVBQUU4SCxJQUFJbHdELEtBQUtvd0QsR0FBSyxLQUFPLENBQzlEL3lELEVBQUUsSUFBSStxRCxFQUFFOEgsSUFBSWhtRCxNQUNoQmsrQyxFQUFFNkgsS0FBSy9sRCxNQUFPLFNBRXRCa21ELEVBQUs1b0QsRUFBSzVNLEtBQUs0MEQsRUFBU3BILEVBQzVCLENBQUUsTUFBTzN1RCxHQUFLMjJELEVBQUssQ0FBQyxFQUFHMzJELEdBQUltUCxFQUFJLENBQUcsQ0FBRSxRQUFVOU8sRUFBSXVELEVBQUksQ0FBRyxDQUN6RCxHQUFZLEVBQVIreUQsRUFBRyxHQUFRLE1BQU1BLEVBQUcsR0FBSSxNQUFPLENBQUV4M0QsTUFBT3czRCxFQUFHLEdBQUtBLEVBQUcsUUFBSyxFQUFRdjJELE1BQU0sRUFDOUUsQ0F0QmdEKzFELENBQUssQ0FBQ3huRCxFQUFHdkssR0FBSyxDQUFHLENBdUJyRSxFQUtBLFNBQVN5ckYsR0FBeUJyMEUsR0FDOUIsSUFBSStGLEVBQ0osT0FBTyxHQUFZM2hCLE1BQU0sU0FBVWtqRCxHQUMvQixPQUFRQSxFQUFHd1QsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQWE0UyxHQUFJMG1CLEdBQXVCbjhCLEdBQWU2N0IsV0FDdkUsS0FBSyxFQUNEeHNDLEVBQUd5VCxPQUNIelQsRUFBR3dULE1BQVEsRUFDZixLQUFLLEVBRUQsT0FEQXhULEVBQUcwVCxLQUFLandELEtBQUssQ0FBQyxFQUFHLEVBQUcsQ0FBRSxJQUNmLENBQUMsRUFBYSxHQUFLeW5GLEdBQWFDLGlCQUFrQnp5RSxFQUFPeXBCLFFBQVFveUIsSUFBSzc3QyxFQUFPeXBCLFFBQVFteUIsTUFDaEcsS0FBSyxFQUVELE9BREE3MUMsRUFBT3VoQyxFQUFHeVQsT0FDSCxDQUFDLEVBQWEyUyxHQUFJeW1CLEdBQWlCcHVFLEtBQzlDLEtBQUssRUFFRCxPQURBdWhDLEVBQUd5VCxPQUNJLENBQUMsRUFBYTJTLEdBQUkwbUIsR0FBdUJuOEIsR0FBZXc3QixRQUNuRSxLQUFLLEVBRUQsT0FEQW5zQyxFQUFHeVQsT0FDSSxDQUFDLEVBQWEsR0FDekIsS0FBSyxFQUVELE9BRFV6VCxFQUFHeVQsT0FDTixDQUFDLEVBQWEyUyxHQUFJMG1CLEdBQXVCbjhCLEdBQWU4N0IsU0FDbkUsS0FBSyxFQUVELE9BREF6c0MsRUFBR3lULE9BQ0ksQ0FBQyxFQUFhLEdBQ3pCLEtBQUssRUFBRyxNQUFPLENBQUMsR0FFeEIsR0FDSixDQUNPLFNBQVN1NUIsS0FDWixPQUFPLEdBQVlsd0YsTUFBTSxTQUFVa2pELEdBQy9CLE9BQVFBLEVBQUd3VCxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYSxHQUFVbzVCLEdBQW1CN3lFLEtBQU1nekUsS0FDaEUsS0FBSyxFQUVELE9BREEvc0MsRUFBR3lULE9BQ0ksQ0FBQyxHQUVwQixHQUNKLENDbkVBLElBSVd3NUIsR0FBb0JydkIsR0FBWSxDQUN2QzU5RCxLQUFNLGVBQ053NUQsYUFOZSxDQUNmeXlCLFFBQVMsS0FDVEMsY0FBZXY3QixHQUFldzdCLE1BSzlCdDBCLFNBQVUsQ0FDTnExQixrQkFBbUIsU0FBVWo5RSxFQUFPeUksR0FBVSxFQUM5Q3kwRSxnQkFBaUIsU0FBVWw5RSxFQUFPeUksR0FDOUJ6SSxFQUFNZzhFLFFBQVV2ekUsRUFBT3lwQixPQUMzQixFQUNBaXJELHNCQUF1QixTQUFVbjlFLEVBQU95SSxHQUNwQ3pJLEVBQU1pOEUsY0FBZ0J4ekUsRUFBT3lwQixPQUNqQyxLQUdHK3FELElBQXFCLEdBQUtELEdBQWtCenRCLFNBQVkwdEIsa0JBQW9CQyxHQUFrQixHQUFHQSxnQkFBaUJDLEdBQXdCLEdBQUdBLHNCQUN4SixTQUFlSCxHQUF5QixRQ3JCeEMsSUNBSSxHREFBLEdBQTRDLFNBQVVoNkIsRUFBU2hvRCxHQUMvRCxJQUFzRzFOLEVBQUc4TyxFQUFHdkwsRUFBR3JFLEVBQTNHb3ZELEVBQUksQ0FBRTJILE1BQU8sRUFBR0MsS0FBTSxXQUFhLEdBQVcsRUFBUDN5RCxFQUFFLEdBQVEsTUFBTUEsRUFBRSxHQUFJLE9BQU9BLEVBQUUsRUFBSSxFQUFHNHlELEtBQU0sR0FBSUMsSUFBSyxJQUNoRyxPQUFPbDNELEVBQUksQ0FBRW9CLEtBQU0rMUQsRUFBSyxHQUFJLE1BQVNBLEVBQUssR0FBSSxPQUFVQSxFQUFLLElBQXdCLG1CQUFYajJELFNBQTBCbEIsRUFBRWtCLE9BQU9HLFVBQVksV0FBYSxPQUFPaEIsSUFBTSxHQUFJTCxFQUN2SixTQUFTbTNELEVBQUsvbkQsR0FBSyxPQUFPLFNBQVV2SyxHQUFLLE9BQ3pDLFNBQWN1eUQsR0FDVixHQUFJdDJELEVBQUcsTUFBTSxJQUFJRyxVQUFVLG1DQUMzQixLQUFPakIsSUFBTUEsRUFBSSxFQUFHbzNELEVBQUcsS0FBT2hJLEVBQUksSUFBS0EsT0FDbkMsR0FBSXR1RCxFQUFJLEVBQUc4TyxJQUFNdkwsRUFBWSxFQUFSK3lELEVBQUcsR0FBU3huRCxFQUFVLE9BQUl3bkQsRUFBRyxHQUFLeG5ELEVBQVMsU0FBT3ZMLEVBQUl1TCxFQUFVLFNBQU12TCxFQUFFekMsS0FBS2dPLEdBQUksR0FBS0EsRUFBRXhPLFNBQVdpRCxFQUFJQSxFQUFFekMsS0FBS2dPLEVBQUd3bkQsRUFBRyxLQUFLdjJELEtBQU0sT0FBT3dELEVBRTNKLE9BREl1TCxFQUFJLEVBQUd2TCxJQUFHK3lELEVBQUssQ0FBUyxFQUFSQSxFQUFHLEdBQVEveUQsRUFBRXpFLFFBQ3pCdzNELEVBQUcsSUFDUCxLQUFLLEVBQUcsS0FBSyxFQUFHL3lELEVBQUkreUQsRUFBSSxNQUN4QixLQUFLLEVBQWMsT0FBWGhJLEVBQUUySCxRQUFnQixDQUFFbjNELE1BQU93M0QsRUFBRyxHQUFJdjJELE1BQU0sR0FDaEQsS0FBSyxFQUFHdXVELEVBQUUySCxRQUFTbm5ELEVBQUl3bkQsRUFBRyxHQUFJQSxFQUFLLENBQUMsR0FBSSxTQUN4QyxLQUFLLEVBQUdBLEVBQUtoSSxFQUFFOEgsSUFBSWhtRCxNQUFPaytDLEVBQUU2SCxLQUFLL2xELE1BQU8sU0FDeEMsUUFDSSxNQUFrQjdNLEdBQVpBLEVBQUkrcUQsRUFBRTZILE1BQVloM0QsT0FBUyxHQUFLb0UsRUFBRUEsRUFBRXBFLE9BQVMsS0FBa0IsSUFBVm0zRCxFQUFHLElBQXNCLElBQVZBLEVBQUcsSUFBVyxDQUFFaEksRUFBSSxFQUFHLFFBQVUsQ0FDM0csR0FBYyxJQUFWZ0ksRUFBRyxNQUFjL3lELEdBQU0reUQsRUFBRyxHQUFLL3lELEVBQUUsSUFBTSt5RCxFQUFHLEdBQUsveUQsRUFBRSxJQUFNLENBQUUrcUQsRUFBRTJILE1BQVFLLEVBQUcsR0FBSSxLQUFPLENBQ3JGLEdBQWMsSUFBVkEsRUFBRyxJQUFZaEksRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJLENBQUUrcUQsRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJQSxFQUFJK3lELEVBQUksS0FBTyxDQUNwRSxHQUFJL3lELEdBQUsrcUQsRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJLENBQUUrcUQsRUFBRTJILE1BQVExeUQsRUFBRSxHQUFJK3FELEVBQUU4SCxJQUFJbHdELEtBQUtvd0QsR0FBSyxLQUFPLENBQzlEL3lELEVBQUUsSUFBSStxRCxFQUFFOEgsSUFBSWhtRCxNQUNoQmsrQyxFQUFFNkgsS0FBSy9sRCxNQUFPLFNBRXRCa21ELEVBQUs1b0QsRUFBSzVNLEtBQUs0MEQsRUFBU3BILEVBQzVCLENBQUUsTUFBTzN1RCxHQUFLMjJELEVBQUssQ0FBQyxFQUFHMzJELEdBQUltUCxFQUFJLENBQUcsQ0FBRSxRQUFVOU8sRUFBSXVELEVBQUksQ0FBRyxDQUN6RCxHQUFZLEVBQVIreUQsRUFBRyxHQUFRLE1BQU1BLEVBQUcsR0FBSSxNQUFPLENBQUV4M0QsTUFBT3czRCxFQUFHLEdBQUtBLEVBQUcsUUFBSyxFQUFRdjJELE1BQU0sRUFDOUUsQ0F0QmdEKzFELENBQUssQ0FBQ3huRCxFQUFHdkssR0FBSyxDQUFHLENBdUJyRSxFQUtBLFNBQVMrckYsR0FBd0IzMEUsR0FDN0IsSUFBSStGLEVBQ0osT0FBTyxHQUFZM2hCLE1BQU0sU0FBVWtqRCxHQUMvQixPQUFRQSxFQUFHd1QsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQWE0UyxHQUFJZ25CLEdBQXNCejhCLEdBQWU2N0IsV0FDdEUsS0FBSyxFQUNEeHNDLEVBQUd5VCxPQUNIelQsRUFBR3dULE1BQVEsRUFDZixLQUFLLEVBRUQsT0FEQXhULEVBQUcwVCxLQUFLandELEtBQUssQ0FBQyxFQUFHLEVBQUcsQ0FBRSxJQUNmLENBQUMsRUFBYSxHQUFLeW5GLEdBQWFJLGdCQUFpQjV5RSxFQUFPeXBCLFFBQVFveUIsSUFBSzc3QyxFQUFPeXBCLFFBQVFteUIsTUFDL0YsS0FBSyxFQUVELE9BREE3MUMsRUFBT3VoQyxFQUFHeVQsT0FDSCxDQUFDLEVBQWEyUyxHQUFJK21CLEdBQWdCMXVFLEtBQzdDLEtBQUssRUFFRCxPQURBdWhDLEVBQUd5VCxPQUNJLENBQUMsRUFBYTJTLEdBQUlnbkIsR0FBc0J6OEIsR0FBZXc3QixRQUNsRSxLQUFLLEVBRUQsT0FEQW5zQyxFQUFHeVQsT0FDSSxDQUFDLEVBQWEsR0FDekIsS0FBSyxFQUVELE9BRFV6VCxFQUFHeVQsT0FDTixDQUFDLEVBQWEyUyxHQUFJZ25CLEdBQXNCejhCLEdBQWU4N0IsU0FDbEUsS0FBSyxFQUVELE9BREF6c0MsRUFBR3lULE9BQ0ksQ0FBQyxFQUFhLEdBQ3pCLEtBQUssRUFBRyxNQUFPLENBQUMsR0FFeEIsR0FDSixDQUNPLFNBQVM2NUIsS0FDWixPQUFPLEdBQVl4d0YsTUFBTSxTQUFVa2pELEdBQy9CLE9BQVFBLEVBQUd3VCxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYSxHQUFVMDVCLEdBQWtCbnpFLEtBQU1zekUsS0FDL0QsS0FBSyxFQUVELE9BREFydEMsRUFBR3lULE9BQ0ksQ0FBQyxHQUVwQixHQUNKLENDbkVBLElBS1c4NUIsR0FBWTN2QixHQUFZLENBQy9CNTlELEtBQU0sT0FDTnc1RCxhQVBlLENBQ2ZnMEIsWUFBYSxLQUNiQyxpQkFBa0IsS0FDbEJDLDBCQUEyQi84QixHQUFldzdCLE1BSzFDdDBCLFNBQVUsQ0FDTjgxQixlQUFnQixTQUFVMTlFLEVBQU95SSxHQUM3QnpJLEVBQU11OUUsWUFBYzkwRSxFQUFPeXBCLE9BQy9CLEVBQ0F5ckQsNkJBQThCLFNBQVUzOUUsRUFBT3lJLEdBQzNDekksRUFBTXk5RSwwQkFBNEJoMUUsRUFBT3lwQixPQUM3QyxFQUNBMHJELHNCQUF1QixTQUFVNTlFLEVBQU95SSxHQUNwQ3pJLEVBQU13OUUsaUJBQW1CLzBFLEVBQU95cEIsT0FDcEMsRUFDQTJyRCxnQkFBaUIsU0FBVTc5RSxFQUFPeUksR0FBVSxLQUd6Q2kxRSxJQUFrQixHQUFLSixHQUFVL3RCLFNBQVltdUIsZUFBaUJDLEdBQStCLEdBQUdBLDZCQUE4QkMsR0FBd0IsR0FBR0Esc0JBQXVCQyxHQUFrQixHQUFHQSxnQkFDaE4sU0FBZVAsR0FBaUIsUUN6QmhDLElBQUksR0FBNEMsU0FBVXQ2QixFQUFTaG9ELEdBQy9ELElBQXNHMU4sRUFBRzhPLEVBQUd2TCxFQUFHckUsRUFBM0dvdkQsRUFBSSxDQUFFMkgsTUFBTyxFQUFHQyxLQUFNLFdBQWEsR0FBVyxFQUFQM3lELEVBQUUsR0FBUSxNQUFNQSxFQUFFLEdBQUksT0FBT0EsRUFBRSxFQUFJLEVBQUc0eUQsS0FBTSxHQUFJQyxJQUFLLElBQ2hHLE9BQU9sM0QsRUFBSSxDQUFFb0IsS0FBTSsxRCxFQUFLLEdBQUksTUFBU0EsRUFBSyxHQUFJLE9BQVVBLEVBQUssSUFBd0IsbUJBQVhqMkQsU0FBMEJsQixFQUFFa0IsT0FBT0csVUFBWSxXQUFhLE9BQU9oQixJQUFNLEdBQUlMLEVBQ3ZKLFNBQVNtM0QsRUFBSy9uRCxHQUFLLE9BQU8sU0FBVXZLLEdBQUssT0FDekMsU0FBY3V5RCxHQUNWLEdBQUl0MkQsRUFBRyxNQUFNLElBQUlHLFVBQVUsbUNBQzNCLEtBQU9qQixJQUFNQSxFQUFJLEVBQUdvM0QsRUFBRyxLQUFPaEksRUFBSSxJQUFLQSxPQUNuQyxHQUFJdHVELEVBQUksRUFBRzhPLElBQU12TCxFQUFZLEVBQVIreUQsRUFBRyxHQUFTeG5ELEVBQVUsT0FBSXduRCxFQUFHLEdBQUt4bkQsRUFBUyxTQUFPdkwsRUFBSXVMLEVBQVUsU0FBTXZMLEVBQUV6QyxLQUFLZ08sR0FBSSxHQUFLQSxFQUFFeE8sU0FBV2lELEVBQUlBLEVBQUV6QyxLQUFLZ08sRUFBR3duRCxFQUFHLEtBQUt2MkQsS0FBTSxPQUFPd0QsRUFFM0osT0FESXVMLEVBQUksRUFBR3ZMLElBQUcreUQsRUFBSyxDQUFTLEVBQVJBLEVBQUcsR0FBUS95RCxFQUFFekUsUUFDekJ3M0QsRUFBRyxJQUNQLEtBQUssRUFBRyxLQUFLLEVBQUcveUQsRUFBSSt5RCxFQUFJLE1BQ3hCLEtBQUssRUFBYyxPQUFYaEksRUFBRTJILFFBQWdCLENBQUVuM0QsTUFBT3czRCxFQUFHLEdBQUl2MkQsTUFBTSxHQUNoRCxLQUFLLEVBQUd1dUQsRUFBRTJILFFBQVNubkQsRUFBSXduRCxFQUFHLEdBQUlBLEVBQUssQ0FBQyxHQUFJLFNBQ3hDLEtBQUssRUFBR0EsRUFBS2hJLEVBQUU4SCxJQUFJaG1ELE1BQU9rK0MsRUFBRTZILEtBQUsvbEQsTUFBTyxTQUN4QyxRQUNJLE1BQWtCN00sR0FBWkEsRUFBSStxRCxFQUFFNkgsTUFBWWgzRCxPQUFTLEdBQUtvRSxFQUFFQSxFQUFFcEUsT0FBUyxLQUFrQixJQUFWbTNELEVBQUcsSUFBc0IsSUFBVkEsRUFBRyxJQUFXLENBQUVoSSxFQUFJLEVBQUcsUUFBVSxDQUMzRyxHQUFjLElBQVZnSSxFQUFHLE1BQWMveUQsR0FBTSt5RCxFQUFHLEdBQUsveUQsRUFBRSxJQUFNK3lELEVBQUcsR0FBSy95RCxFQUFFLElBQU0sQ0FBRStxRCxFQUFFMkgsTUFBUUssRUFBRyxHQUFJLEtBQU8sQ0FDckYsR0FBYyxJQUFWQSxFQUFHLElBQVloSSxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUksQ0FBRStxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUlBLEVBQUkreUQsRUFBSSxLQUFPLENBQ3BFLEdBQUkveUQsR0FBSytxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUksQ0FBRStxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUkrcUQsRUFBRThILElBQUlsd0QsS0FBS293RCxHQUFLLEtBQU8sQ0FDOUQveUQsRUFBRSxJQUFJK3FELEVBQUU4SCxJQUFJaG1ELE1BQ2hCaytDLEVBQUU2SCxLQUFLL2xELE1BQU8sU0FFdEJrbUQsRUFBSzVvRCxFQUFLNU0sS0FBSzQwRCxFQUFTcEgsRUFDNUIsQ0FBRSxNQUFPM3VELEdBQUsyMkQsRUFBSyxDQUFDLEVBQUczMkQsR0FBSW1QLEVBQUksQ0FBRyxDQUFFLFFBQVU5TyxFQUFJdUQsRUFBSSxDQUFHLENBQ3pELEdBQVksRUFBUit5RCxFQUFHLEdBQVEsTUFBTUEsRUFBRyxHQUFJLE1BQU8sQ0FBRXgzRCxNQUFPdzNELEVBQUcsR0FBS0EsRUFBRyxRQUFLLEVBQVF2MkQsTUFBTSxFQUM5RSxDQXRCZ0QrMUQsQ0FBSyxDQUFDeG5ELEVBQUd2SyxHQUFLLENBQUcsQ0F1QnJFLEVBS0EsU0FBU3lzRixHQUFzQnIxRSxHQUMzQixJQUFJK0YsRUFDSixPQUFPLEdBQVkzaEIsTUFBTSxTQUFVa2pELEdBQy9CLE9BQVFBLEVBQUd3VCxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYTRTLEdBQUl3bkIsR0FBNkJqOUIsR0FBZTY3QixXQUM3RSxLQUFLLEVBQ0R4c0MsRUFBR3lULE9BQ0h6VCxFQUFHd1QsTUFBUSxFQUNmLEtBQUssRUFFRCxPQURBeFQsRUFBRzBULEtBQUtqd0QsS0FBSyxDQUFDLEVBQUcsRUFBRyxDQUFFLElBQ2YsQ0FBQyxFQUFhLEdBQUt5bkYsR0FBYU0saUJBQWtCOXlFLEVBQU95cEIsVUFDcEUsS0FBSyxFQUVELE9BREExakIsRUFBT3VoQyxFQUFHeVQsT0FDSCxDQUFDLEVBQWEyUyxHQUFJeW5CLEdBQXNCcHZFLEtBQ25ELEtBQUssRUFFRCxPQURBdWhDLEVBQUd5VCxPQUNJLENBQUMsRUFBYTJTLEdBQUl3bkIsR0FBNkJqOUIsR0FBZXc3QixRQUN6RSxLQUFLLEVBRUQsT0FEQW5zQyxFQUFHeVQsT0FDSSxDQUFDLEVBQWEsR0FDekIsS0FBSyxFQUVELE9BRFV6VCxFQUFHeVQsT0FDTixDQUFDLEVBQWEyUyxHQUFJd25CLEdBQTZCajlCLEdBQWU4N0IsU0FDekUsS0FBSyxFQUVELE9BREF6c0MsRUFBR3lULE9BQ0ksQ0FBQyxFQUFhLEdBQ3pCLEtBQUssRUFBRyxNQUFPLENBQUMsR0FFeEIsR0FDSixDQUNPLFNBQVN1NkIsS0FDWixPQUFPLEdBQVlseEYsTUFBTSxTQUFVa2pELEdBQy9CLE9BQVFBLEVBQUd3VCxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYSxHQUFXczZCLEdBQWdCL3pFLEtBQU1nMEUsS0FDOUQsS0FBSyxFQUVELE9BREEvdEMsRUFBR3lULE9BQ0ksQ0FBQyxHQUVwQixHQUNKLENDdEVBLElDSUl3NkIsR0FBZ0Jyd0IsR0FBWSxDQUM1QjU5RCxLQUFNLFdBQ053NUQsYUFMZSxDQUNmcjJELFNBQVUsTUFLVjAwRCxTQUFVLENBQ045RCxZQUFhLFNBQVU5akQsRUFBT3lJLEdBQzFCekksRUFBTTlNLFNBQVd1VixFQUFPeXBCLE9BQzVCLEtBR0c0eEIsR0FBY2s2QixHQUFjenVCLFFBQVF6TCxZQUMvQyxTQUFlazZCLEdBQXFCLFFDYnBDLEl6RXFCdUNsaUYsR0FBUW1pRixHQU96QzFrRixHQUVBeTNDLEdBQ0FrdEMsR0FDQW5pRixHQUNBb2lGLEdBQ0FDLEdBQ0FDLEdBRUFDLEd5RWxDRkMsR0FBdUI1d0IsR0FBWSxDQUNuQzU5RCxLQUFNLGtCQUNOdzVELGFBTGUsQ0FDZmkxQixvQkFBcUIsU0FLckI1MkIsU0FBVSxDQUNONjJCLHVCQUF3QixTQUFVeitFLEVBQU95SSxHQUNyQ3pJLEVBQU13K0Usb0JBQXNCLzFFLEVBQU95cEIsT0FDdkMsS0FHR3VzRCxHQUF5QkYsR0FBcUJodkIsUUFBUWt2Qix1QkNEN0R4dUMsR0FBYzBYLEdBQWdCLENBQzlCKzJCLGFBQWMsR0FDZEMsY0FBZSxHQUNmQyxhQUFjLEdBQ2RDLGdCREZXTixHQUE0QixRQ0d2Qy9DLEtBQU0sR0FDTnRvRixTQUFVLEtBRVY0ckYsSUFBZ0IsS0FBQWp5QyxrQkFBaUIsQ0FDakN0NEIsSUFBSyxPQUNMeTdCLFFBQVNBLEdBQUEsRUFDVDc3QixVQUFXLEdBQ1g4N0IsWUFBYUEsS0FFYjh1QyxJMUVKMkNkLEcwRUlNaHVDLEcxRUcvQzEyQyxRQUE2QmkzQyxLQVBJMTBDLEcwRUlEZ2pGLEkxRUdmdmxGLFFBQXdCdUMsR0FBT3ZDLFNMdEJ6QixFS3VCZnVDLEdBQU9teUMsTUFDZitDLFFBQTZDUixJQUEzQjEwQyxHQUFPazFDLGdCSmxCaEIsU0FBeUJsRCxFQUFjQyxFQUFlQyxFQUFjc1osR0FDckVBLEVBQUtyWixNQUFqQixJQUVJRyxFQVpOLFNBQXVCemdDLEdBQVUsSUFBSyxJQUFJa0QsRUFBSSxFQUFHQSxFQUFJdGlCLFVBQVU5QixPQUFRb2tCLElBQUssQ0FBRSxJQUFJOWIsRUFBeUIsTUFBaEJ4RyxVQUFVc2lCLEdBQWF0aUIsVUFBVXNpQixHQUFLLENBQUMsRUFBT0EsRUFBSSxFQUFLbzBDLEdBQVFsd0QsR0FBUSxHQUFNNmhCLFNBQVEsU0FBVXJDLEdBQU8sR0FBZ0I1RyxFQUFRNEcsRUFBS3hmLEVBQU93ZixHQUFPLElBQWUzb0IsT0FBTzg1RCwwQkFBNkI5NUQsT0FBT0MsaUJBQWlCOGhCLEVBQVEvaEIsT0FBTzg1RCwwQkFBMEIzd0QsSUFBbUJrd0QsR0FBUWx3RCxHQUFRNmhCLFNBQVEsU0FBVXJDLEdBQU8zb0IsT0FBT0UsZUFBZTZoQixFQUFRNEcsRUFBSzNvQixPQUFPK25CLHlCQUF5QjVlLEVBQVF3ZixHQUFPLEdBQU0sQ0FBRSxPQUFPNUcsQ0FBUSxDQVlwZnF4RSxDQUFjLENBQUMsRUFBR2h4QyxHQW1CakMsT0FoQklGLEdBQTBDLFdBQTFCLEdBQVFBLElBQzFCbGlELE9BQU95SSxLQUFLeTVDLEdBQWNsM0IsU0FBUSxTQUFVckMsR0FFOUIsYUFBUkEsR0FFQXc1QixFQUFjeDVCLEtBQVN5NUIsRUFBYXo1QixLQU14QzY1QixFQUFTNzVCLEdBQU91NUIsRUFBYXY1QixHQUMvQixJQUlLNjVCLENBQ1QsRUlMaUZ0eUMsR0FBT2sxQyxnQkFDbEZrdEMsR0FBaUJwaUYsR0FBT29pRixnQkYvQmYsU0FBd0JwaUYsR0FDckMsSUFJSW1qRixFQUpBL3dDLEVBQWFweUMsRUFBT295QyxZQUFjLEdBQ2xDZ3hDLEVBQWEsR0FBRzNtRixZQUE0Qmk0QyxJQUFyQjEwQyxFQUFPcWpGLFVBQTBCcmpGLEVBQU9xakYsVUFBWXo2QixJQUFZbnNELE9BQU91RCxFQUFPeVksS0FDckd5N0IsRUFBVWwwQyxFQUFPazBDLFFBY3JCLE9BYllsMEMsRUFBT215QyxNQUlqQmd4QyxHQUR5QixJQUF2Qm5qRixFQUFPbWpGLFlBQ0ssU0FBcUJsc0YsR0FDakMsT0FBT0EsQ0FDVCxFQUN1QyxtQkFBdkIrSSxFQUFPbWpGLFlBQ1RuakYsRUFBT21qRixZQUVQMTVCLEdBR1R2VixFQUFRcUUsUUFBUTZxQyxHQUFZeHpELE1BQUssU0FBVTB6RCxHQUNoRCxHQUFLQSxFQUNILElBQ0UsSUFBSXAvRSxFQUFRLENBQUMsRUFDVHEvRSxFQUFXSixFQUFZRyxHQU0zQixPQUxBeHpGLE9BQU95SSxLQUFLZ3JGLEdBQVV6b0UsU0FBUSxTQUFVckMsR0FDdEN2VSxFQUFNdVUsR0FBTzI1QixFQUFXb3hDLGFBQVksU0FBVUMsRUFBVUMsR0FDdEQsT0FBT0EsRUFBWTV4QyxJQUFJMnhDLEVBQVVockUsRUFBSzhxRSxFQUN4QyxHQUFHSixFQUFZSSxFQUFTOXFFLElBQzFCLElBQ092VSxDQUNULENBQUUsTUFBT3VxQyxHQUVQLE1BQU1BLENBQ1IsQ0FFSixHQUNGLEVFRk14dUMsUUFBNkJ5MEMsSUFBbkIxMEMsR0FBT0MsUUFBd0JELEdBQU9DLFFBbEJoQyxJQW1CaEJvaUYsR0FBYyxLQUNkQyxJQUFTLEVBQ1RDLElBQVUsRUFFVkMsR0FBb0IsU0FBMkJ0K0UsR0FHakQsT0FEQUEsRUFBTW95QyxTQUFTcXRDLFlBQWN0QixLQUFnQkUsSUFBV0YsR0FBWTloRixPQUFPMkQsR0FDcEVBLENBQ1QsRUFFTyxTQUFVQSxFQUFPeUksR0FDdEIsSUFBSTYrQyxFQUFPdG5ELEdBQVMsQ0FBQyxFQUNqQm95QyxFQUFXa1YsRUFBS2xWLFNBSWhCc3RDLEVBNUNSLFNBQWtDM3FGLEVBQVE4cUUsR0FBWSxHQUFjLE1BQVY5cUUsRUFBZ0IsTUFBTyxDQUFDLEVBQUcsSUFBa0V3ZixFQUFLMUQsRUFBbkVsRCxFQUV6RixTQUF1QzVZLEVBQVE4cUUsR0FBWSxHQUFjLE1BQVY5cUUsRUFBZ0IsTUFBTyxDQUFDLEVBQUcsSUFBMkR3ZixFQUFLMUQsRUFBNURsRCxFQUFTLENBQUMsRUFBT215RCxFQUFhbDBFLE9BQU95SSxLQUFLVSxHQUFxQixJQUFLOGIsRUFBSSxFQUFHQSxFQUFJaXZELEVBQVdyekUsT0FBUW9rQixJQUFPMEQsRUFBTXVyRCxFQUFXanZELEdBQVFndkQsRUFBU2h4RSxRQUFRMGxCLElBQVEsSUFBYTVHLEVBQU80RyxHQUFPeGYsRUFBT3dmLElBQVEsT0FBTzVHLENBQVEsQ0FGaE4sQ0FBOEI1WSxFQUFROHFFLEdBQXVCLEdBQUlqMEUsT0FBTzhuQixzQkFBdUIsQ0FBRSxJQUFJaXNFLEVBQW1CL3pGLE9BQU84bkIsc0JBQXNCM2UsR0FBUyxJQUFLOGIsRUFBSSxFQUFHQSxFQUFJOHVFLEVBQWlCbHpGLE9BQVFva0IsSUFBTzBELEVBQU1vckUsRUFBaUI5dUUsR0FBUWd2RCxFQUFTaHhFLFFBQVEwbEIsSUFBUSxHQUFrQjNvQixPQUFPTyxVQUFVeWdELHFCQUFxQngrQyxLQUFLMkcsRUFBUXdmLEtBQWdCNUcsRUFBTzRHLEdBQU94ZixFQUFPd2YsR0FBUSxDQUFFLE9BQU81RyxDQUFRLENBeUM1ZGl5RSxDQUF5QnQ0QixFQUFNLENBQUMsYUFLM0MsR0FBSTcrQyxFQUFPcUIsT0FBU2c3QyxHQUFTLENBQzNCLElBQUkrNkIsR0FBVSxFQUVWQyxFQUFhLFNBQW9CNXRELEVBQVNxWSxHQUl2Q3MxQyxJQUNIcDNFLEVBQU9zM0UsVUFBVWprRixHQUFPeVksSUFBSzJkLEVBQVNxWSxHQUN0Q3MxQyxHQUFVLEVBRWQsRUFVQSxHQVJBOWpGLElBQVd2SCxZQUFXLFlBQ25CcXJGLEdBQVdDLE9BQVd0dkMsRUFBVyxJQUFJN2pELE1BQU0scURBQXNENEwsT0FBT3VELEdBQU95WSxJQUFLLE1BQ3ZILEdBQUd4WSxJQUVIc2lGLElBQVUsRUFFTEYsS0FBYUEsR0hyRVQsU0FBMEJyaUYsR0FFdkMsSUFNSTJzRSxFQU5BdDBELEVBQVlyWSxFQUFPcVksV0FBYSxLQUNoQ3E1QixFQUFZMXhDLEVBQU8weEMsV0FBYSxLQUNoQ1UsRUFBYXB5QyxFQUFPb3lDLFlBQWMsR0FDbEM4eEMsRUFBV2xrRixFQUFPa2tGLFVBQVksRUFDOUJkLEVBQWEsR0FBRzNtRixZQUE0Qmk0QyxJQUFyQjEwQyxFQUFPcWpGLFVBQTBCcmpGLEVBQU9xakYsVUFBWXo2QixJQUFZbnNELE9BQU91RCxFQUFPeVksS0FDckd5N0IsRUFBVWwwQyxFQUFPazBDLFFBSW5CeTRCLEdBRHVCLElBQXJCM3NFLEVBQU8yc0UsVUFDRyxTQUFtQjExRSxHQUM3QixPQUFPQSxDQUNULEVBQ3FDLG1CQUFyQitJLEVBQU8yc0UsVUFDWDNzRSxFQUFPMnNFLFVBRVBuakIsR0FHZCxJQUFJMjZCLEVBQW1CbmtGLEVBQU9ta0Ysa0JBQW9CLEtBRTlDQyxFQUFZLENBQUMsRUFDYkMsRUFBYyxDQUFDLEVBQ2ZDLEVBQWdCLEdBQ2hCQyxFQUFlLEtBQ2ZDLEVBQWUsS0E0Qm5CLFNBQVNDLElBQ1AsR0FBNkIsSUFBekJILEVBQWMzekYsT0FHaEIsT0FGSTR6RixHQUFjRyxjQUFjSCxRQUNoQ0EsRUFBZSxNQUlqQixJQUFJOXJFLEVBQU02ckUsRUFBY3JuRixRQUNwQjBuRixFQUFXdnlDLEVBQVd3QixRQUFPLFNBQVU2dkMsRUFBVUMsR0FDbkQsT0FBT0EsRUFBWTl4QyxHQUFHNnhDLEVBQVVockUsRUFBSzJyRSxFQUN2QyxHQUFHQSxFQUFVM3JFLElBRWIsUUFBaUJpOEIsSUFBYml3QyxFQUNGLElBQ0VOLEVBQVk1ckUsR0FBT2swRCxFQUFVZ1ksRUFDL0IsQ0FBRSxNQUFPbDJDLEdBQ1A5NkMsUUFBUUMsTUFBTSwwREFBMkQ2NkMsRUFDM0UsYUFHTzQxQyxFQUFZNXJFLEdBR1EsSUFBekI2ckUsRUFBYzN6RixTQU9sQmIsT0FBT3lJLEtBQUs4ckYsR0FBYXZwRSxTQUFRLFNBQVVyQyxRQUNsQmk4QixJQUFuQjB2QyxFQUFVM3JFLFdBQ0w0ckUsRUFBWTVyRSxFQUV2QixJQUNBK3JFLEVBQWV0d0MsRUFBUXVFLFFBQVEycUMsRUFBWXpXLEVBQVUwWCxJQUFjeDBELE1BQU0rMEQsR0FUM0UsQ0FZQSxTQUFTQyxFQUF1QnBzRSxHQUM5QixRQUFJaTVCLElBQXlDLElBQTVCQSxFQUFVMytDLFFBQVEwbEIsSUFBdUIsYUFBUkEsR0FDOUNKLElBQXlDLElBQTVCQSxFQUFVdGxCLFFBQVEwbEIsR0FFckMsQ0FFQSxTQUFTbXNFLEVBQVluMkMsR0FFZjAxQyxHQUFrQkEsRUFBaUIxMUMsRUFLekMsQ0FXQSxNQUFPLENBQ0xsdUMsT0F6RlcsU0FBZ0IyRCxHQUUzQnBVLE9BQU95SSxLQUFLMkwsR0FBTzRXLFNBQVEsU0FBVXJDLEdBQzlCb3NFLEVBQXVCcHNFLElBRXhCMnJFLEVBQVUzckUsS0FBU3ZVLEVBQU11VSxLQUVPLElBQWhDNnJFLEVBQWN2eEYsUUFBUTBsQixJQUUxQjZyRSxFQUFjNXNGLEtBQUsrZ0IsRUFDckIsSUFHQTNvQixPQUFPeUksS0FBSzZyRixHQUFXdHBFLFNBQVEsU0FBVXJDLFFBQ3BCaThCLElBQWZ4d0MsRUFBTXVVLElBQXNCb3NFLEVBQXVCcHNFLEtBQXdDLElBQWhDNnJFLEVBQWN2eEYsUUFBUTBsQixTQUFrQ2k4QixJQUFuQjB2QyxFQUFVM3JFLElBQzVHNnJFLEVBQWM1c0YsS0FBSytnQixFQUV2QixJQUVxQixPQUFqQjhyRSxJQUNGQSxFQUFlTyxZQUFZTCxFQUFnQlAsSUFHN0NFLEVBQVlsZ0YsQ0FDZCxFQWtFRWkyRCxNQVhVLFdBQ1YsS0FBZ0MsSUFBekJtcUIsRUFBYzN6RixRQUNuQjh6RixJQUdGLE9BQU9ELEdBQWdCaDFELFFBQVFHLFNBQ2pDLEVBT0YsQ0duRHNDbzFELENBQWlCL2tGLEtBRTdDczJDLEVBR0YsT0FBTyxHQUFjLENBQUMsRUFBRzZyQyxHQUFZeUIsRUFBV2ozRSxHQUFTLENBQ3ZEMnBDLFNBQVVBLElBSWQsR0FBZ0MsbUJBQXJCM3BDLEVBQU9zM0UsV0FBdUQsbUJBQXBCdDNFLEVBQU9xNEUsU0FBeUIsTUFBTSxJQUFJbjBGLE1BQU0sbU9BaUJyRyxPQWhCQThiLEVBQU9xNEUsU0FBU2hsRixHQUFPeVksS0FDdkIycEUsR0FBZXBpRixJQUFRNHZCLE1BQUssU0FBVXExRCxJQUN0QmpsRixHQUFPa2xGLFNBQVcsU0FBVXJ5RSxFQUFHdGQsR0FDM0MsT0FBT2k2QixRQUFRRyxRQUFROWMsRUFDekIsR0FFUW95RSxFQUFleG5GLElBQVNteUIsTUFBSyxTQUFVdTFELEdBQzdDbkIsRUFBV21CLEVBQ2IsSUFBRyxTQUFVQyxHQUdYcEIsT0FBV3R2QyxFQUFXMHdDLEVBQ3hCLEdBQ0YsSUFBRyxTQUFVMzJDLEdBQ1h1MUMsT0FBV3R2QyxFQUFXakcsRUFDeEIsSUFDTyxHQUFjLENBQUMsRUFBRzB6QyxHQUFZeUIsRUFBV2ozRSxHQUFTLENBQ3ZEMnBDLFNBQVUsQ0FDUjc0QyxRQUFTQSxHQUNUa21GLFlBQVksSUFHbEIsQ0FBTyxHQUFJaDNFLEVBQU9xQixPQUFTaTdDLEdBR3pCLE9BRkFxNUIsSUFBUyxFQUNUMzFFLEVBQU8wcEMsT0R6R0UsU0FBMEJyMkMsR0FDdkMsSUFBSWswQyxFQUFVbDBDLEVBQU9rMEMsUUFDakJrdkMsRUFBYSxHQUFHM21GLFlBQTRCaTRDLElBQXJCMTBDLEVBQU9xakYsVUFBMEJyakYsRUFBT3FqRixVQUFZejZCLElBQVluc0QsT0FBT3VELEVBQU95WSxLQUN6RyxPQUFPeTdCLEVBQVF3RSxXQUFXMHFDLEVBQVl6NUIsR0FDeEMsQ0NxR29CMDdCLENBQWlCcmxGLEtBQ3hCLEdBQWMsQ0FBQyxFQUFHbWlGLEdBQVl5QixFQUFXajNFLEdBQVMsQ0FDdkQycEMsU0FBVUEsSUFFUCxHQUFJM3BDLEVBQU9xQixPQUFTNjZDLEdBRXpCLE9BREFsOEMsRUFBTzBwQyxPQUFPZ3NDLElBQWVBLEdBQVlsb0IsU0FDbEMsR0FBYyxDQUFDLEVBQUdnb0IsR0FBWXlCLEVBQVdqM0UsR0FBUyxDQUN2RDJwQyxTQUFVQSxJQUVQLEdBQUkzcEMsRUFBT3FCLE9BQVMrNkMsR0FDekJ3NUIsSUFBVSxPQUNMLEdBQUk1MUUsRUFBT3FCLE9BQVM4NkMsR0FBVyxDQUVwQyxHQUFJdzVCLEdBQVEsT0FBTyxHQUFjLENBQUMsRUFBR3NCLEVBQVcsQ0FDOUN0dEMsU0FBVSxHQUFjLENBQUMsRUFBR0EsRUFBVSxDQUNwQ3F0QyxZQUFZLE1BS2hCLEdBQUloM0UsRUFBTzhMLE1BQVF6WSxHQUFPeVksSUFBSyxDQUM3QixJQUFJeTVCLEVBQWVpd0MsR0FBWXlCLEVBQVdqM0UsR0FDdENxbEMsRUFBZXJsQyxFQUFPeXBCLFFBSXRCa3ZELEVBQVksR0FBYyxDQUFDLEdBRlUsSUFBcEJwd0MsU0FBOENSLElBQWpCMUMsRUFBNkJrRCxHQUFnQmxELEVBQWM5dEMsRUFBT2d1QyxFQUFjbHlDLElBQVVreUMsRUFFMUYsQ0FDaERvRSxTQUFVLEdBQWMsQ0FBQyxFQUFHQSxFQUFVLENBQ3BDcXRDLFlBQVksTUFJaEIsT0FBT25CLEdBQWtCOEMsRUFDM0IsQ0FDRixDQUdBLElBQUtodkMsRUFBVSxPQUFPNnJDLEdBQVlqK0UsRUFBT3lJLEdBR3pDLElBQUkybEMsRUFBVzZ2QyxHQUFZeUIsRUFBV2ozRSxHQUN0QyxPQUFJMmxDLElBQWFzeEMsRUFBa0IxL0UsRUFDNUJzK0UsR0FBa0IsR0FBYyxDQUFDLEVBQUdsd0MsRUFBVSxDQUNuRGdFLFNBQVVBLElBRWQsRzBFNUhFMnRCLEdBQWlCLEtBQ1YxbkIsR2hFZ2RYLFNBQXdCNS9CLEdBQ3BCLElBRUl3M0IsRUFGQW94QyxFQXJDRyxTQUFxQzVvRSxHQUN4QyxPQUdSLFNBQThCQSxRQUNWLElBQVpBLElBQXNCQSxFQUFVLENBQUMsR0FDckMsSUFBSXRkLEVBQUtzZCxFQUFRMHlDLE1BQU9BLE9BQWUsSUFBUGh3RCxHQUF1QkEsRUFDbkRtbUYsR0FENEQ3b0UsRUFBUThvRSxlQUFpRTlvRSxFQUFRK29FLGtCQUMzSCxJQUFJbDFCLElBeUIxQixPQXhCSW5CLElBWlIsU0FBbUJwNEQsR0FDZixNQUFvQixrQkFBTkEsQ0FDbEIsQ0FXWTZ3RSxDQUFVelksR0FDVm0yQixFQUFnQjl0RixLQUFLLElBR3JCOHRGLEVBQWdCOXRGLEtBQUsscUJBQWtDMjNELEVBQU1ELGlCQW1COURvMkIsQ0FDWCxDQWhDZUcsQ0FBcUJocEUsRUFDaEMsRUFvQ0l0ZCxFQUFLc2QsR0FBVyxDQUFDLEVBQUcwMUMsRUFBS2h6RCxFQUFHcXJELFFBQVNBLE9BQWlCLElBQVAySCxPQUFnQixFQUFTQSxFQUFJcFAsRUFBSzVqRCxFQUFHMnRELFdBQVlBLE9BQW9CLElBQVAvSixFQUFnQnNpQyxJQUFnQ3RpQyxFQUFJcVAsRUFBS2p6RCxFQUFHdW1GLFNBQVVBLE9BQWtCLElBQVB0ekIsR0FBdUJBLEVBQUl1ekIsRUFBS3htRixFQUFHc3JELGVBQWdCQSxPQUF3QixJQUFQazdCLE9BQWdCLEVBQVNBLEVBQUlDLEVBQUt6bUYsRUFBRzBtRixVQUFXQSxPQUFtQixJQUFQRCxPQUFnQixFQUFTQSxFQUUzVixHQUF1QixtQkFBWnA3QixFQUNQdlcsRUFBY3VXLE1BRWIsS0FsWFQsU0FBdUJwNkQsR0FDbkIsR0FBcUIsaUJBQVZBLEdBQWdDLE9BQVZBLEVBQzdCLE9BQU8sRUFDWCxJQUFJKzZELEVBQVF2N0QsT0FBT2dvQixlQUFleG5CLEdBQ2xDLEdBQWMsT0FBVis2RCxFQUNBLE9BQU8sRUFFWCxJQURBLElBQUkyNkIsRUFBWTM2QixFQUM0QixPQUFyQ3Y3RCxPQUFPZ29CLGVBQWVrdUUsSUFDekJBLEVBQVlsMkYsT0FBT2dvQixlQUFla3VFLEdBRXRDLE9BQU8zNkIsSUFBVTI2QixDQUNyQixDQXVXYSxDQUFjdDdCLEdBSW5CLE1BQU0sSUFBSTc1RCxNQUFNLDRIQUhoQnNqRCxFQUFjMFgsR0FBZ0JuQixFQUlsQyxDQUNBLElBQUl1N0IsRUFBa0JqNUIsRUFDUyxtQkFBcEJpNUIsSUFDUEEsRUFBa0JBLEVBQWdCVixJQVF0QyxJQUFJVyxFQUFxQnY1QixHQUFnQnA2RCxXQUFNLEVBQVEwekYsR0FDbkRFLEVBQWUxNUIsR0FDZm01QixJQUNBTyxFQUFlOTFCLEdBQW9CRixHQUFlLENBQzlDaTJCLE9BQU8sR0FDWSxpQkFBYlIsR0FBeUJBLEtBRXZDLElBQUlTLEVBQWlCLENBQUNILEdBUXRCLE9BUEk5MUYsTUFBTWdDLFFBQVEyekYsR0FDZE0sRUFBaUIzMkIsR0FBYyxDQUFDdzJCLEdBQXFCSCxHQUUzQixtQkFBZEEsSUFDWk0sRUFBaUJOLEVBQVVNLElBR3hCNTdCLEdBQVl0VyxFQUFhd1csRUFEVHc3QixFQUFhNXpGLFdBQU0sRUFBUTh6RixHQUV0RCxDZ0V2Zm1CQyxDQUFlLENBQzlCNTdCLFFBQVN1NEIsR0FDVGoyQixXQUFZLFNBQVUyNEIsR0FDbEIsT0FBT0EsRUFBcUIsQ0FDeEJELGtCQUFtQixDQUNmYSxlQUFnQixDQUFDMTlCLEdBQU9DLEdBQVdDLEdBQU9DLEdBQVNDLEdBQU9DLEtBRTlEK2EsZUFBZ0JBLEtBQ2pCeG5FLE9BQU93bkUsR0FDZCxJQUVKQSxHQUFlQyxLSFBSLFdBQ0gsT0FqQzRDLFNBQVVoZCxFQUFTaG9ELEdBQy9ELElBQXNHMU4sRUFBRzhPLEVBQUd2TCxFQUFHckUsRUFBM0dvdkQsRUFBSSxDQUFFMkgsTUFBTyxFQUFHQyxLQUFNLFdBQWEsR0FBVyxFQUFQM3lELEVBQUUsR0FBUSxNQUFNQSxFQUFFLEdBQUksT0FBT0EsRUFBRSxFQUFJLEVBQUc0eUQsS0FBTSxHQUFJQyxJQUFLLElBQ2hHLE9BQU9sM0QsRUFBSSxDQUFFb0IsS0FBTSsxRCxFQUFLLEdBQUksTUFBU0EsRUFBSyxHQUFJLE9BQVVBLEVBQUssSUFBd0IsbUJBQVhqMkQsU0FBMEJsQixFQUFFa0IsT0FBT0csVUFBWSxXQUFhLE9BQU9oQixJQUFNLEdBQUlMLEVBQ3ZKLFNBQVNtM0QsRUFBSy9uRCxHQUFLLE9BQU8sU0FBVXZLLEdBQUssT0FDekMsU0FBY3V5RCxHQUNWLEdBQUl0MkQsRUFBRyxNQUFNLElBQUlHLFVBQVUsbUNBQzNCLEtBQU9qQixJQUFNQSxFQUFJLEVBQUdvM0QsRUFBRyxLQUFPaEksRUFBSSxJQUFLQSxPQUNuQyxHQUFJdHVELEVBQUksRUFBRzhPLElBQU12TCxFQUFZLEVBQVIreUQsRUFBRyxHQUFTeG5ELEVBQVUsT0FBSXduRCxFQUFHLEdBQUt4bkQsRUFBUyxTQUFPdkwsRUFBSXVMLEVBQVUsU0FBTXZMLEVBQUV6QyxLQUFLZ08sR0FBSSxHQUFLQSxFQUFFeE8sU0FBV2lELEVBQUlBLEVBQUV6QyxLQUFLZ08sRUFBR3duRCxFQUFHLEtBQUt2MkQsS0FBTSxPQUFPd0QsRUFFM0osT0FESXVMLEVBQUksRUFBR3ZMLElBQUcreUQsRUFBSyxDQUFTLEVBQVJBLEVBQUcsR0FBUS95RCxFQUFFekUsUUFDekJ3M0QsRUFBRyxJQUNQLEtBQUssRUFBRyxLQUFLLEVBQUcveUQsRUFBSSt5RCxFQUFJLE1BQ3hCLEtBQUssRUFBYyxPQUFYaEksRUFBRTJILFFBQWdCLENBQUVuM0QsTUFBT3czRCxFQUFHLEdBQUl2MkQsTUFBTSxHQUNoRCxLQUFLLEVBQUd1dUQsRUFBRTJILFFBQVNubkQsRUFBSXduRCxFQUFHLEdBQUlBLEVBQUssQ0FBQyxHQUFJLFNBQ3hDLEtBQUssRUFBR0EsRUFBS2hJLEVBQUU4SCxJQUFJaG1ELE1BQU9rK0MsRUFBRTZILEtBQUsvbEQsTUFBTyxTQUN4QyxRQUNJLE1BQWtCN00sR0FBWkEsRUFBSStxRCxFQUFFNkgsTUFBWWgzRCxPQUFTLEdBQUtvRSxFQUFFQSxFQUFFcEUsT0FBUyxLQUFrQixJQUFWbTNELEVBQUcsSUFBc0IsSUFBVkEsRUFBRyxJQUFXLENBQUVoSSxFQUFJLEVBQUcsUUFBVSxDQUMzRyxHQUFjLElBQVZnSSxFQUFHLE1BQWMveUQsR0FBTSt5RCxFQUFHLEdBQUsveUQsRUFBRSxJQUFNK3lELEVBQUcsR0FBSy95RCxFQUFFLElBQU0sQ0FBRStxRCxFQUFFMkgsTUFBUUssRUFBRyxHQUFJLEtBQU8sQ0FDckYsR0FBYyxJQUFWQSxFQUFHLElBQVloSSxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUksQ0FBRStxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUlBLEVBQUkreUQsRUFBSSxLQUFPLENBQ3BFLEdBQUkveUQsR0FBSytxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUksQ0FBRStxRCxFQUFFMkgsTUFBUTF5RCxFQUFFLEdBQUkrcUQsRUFBRThILElBQUlsd0QsS0FBS293RCxHQUFLLEtBQU8sQ0FDOUQveUQsRUFBRSxJQUFJK3FELEVBQUU4SCxJQUFJaG1ELE1BQ2hCaytDLEVBQUU2SCxLQUFLL2xELE1BQU8sU0FFdEJrbUQsRUFBSzVvRCxFQUFLNU0sS0FBSzQwRCxFQUFTcEgsRUFDNUIsQ0FBRSxNQUFPM3VELEdBQUsyMkQsRUFBSyxDQUFDLEVBQUczMkQsR0FBSW1QLEVBQUksQ0FBRyxDQUFFLFFBQVU5TyxFQUFJdUQsRUFBSSxDQUFHLENBQ3pELEdBQVksRUFBUit5RCxFQUFHLEdBQVEsTUFBTUEsRUFBRyxHQUFJLE1BQU8sQ0FBRXgzRCxNQUFPdzNELEVBQUcsR0FBS0EsRUFBRyxRQUFLLEVBQVF2MkQsTUFBTSxFQUM5RSxDQXRCZ0QrMUQsQ0FBSyxDQUFDeG5ELEVBQUd2SyxHQUFLLENBQUcsQ0F1QnJFLENBT1csQ0FBWXhFLE1BQU0sU0FBVWtqRCxHQUMvQixPQUFRQSxFQUFHd1QsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEd6RGlhZjF4QixFeURqYWdDLENBQUM0cUQsS0FBdUJNLEtBQXdCTSxLQUF1QlUsTXpEa2E5R3JlLEVBQU1oSixHQWpJRixNQWlJa0I3a0MsR0FDMUI2dEMsRUFBSS9JLFlBQWEsRUFDVitJLEl5RG5hRyxLQUFLLEVBRUQsT0FEQTN2QixFQUFHeVQsT0FDSSxDQUFDLEd6RDhaeEIsSUFBYTN4QixFQUNQNnRDLEN5RDdaRixHQUNKLElHRE8sSUMzQkgsR0FBa0I0aUIsR0NXbEIsR0NMQSxHQUFrQixHQ1ZsQixHQ0lBLEdBQWtCLEdDRGxCLEdDREEsR0FBa0IsR0FBa0JDLEdDQ3BDLEdDeUNBLEdBQWtCLEdBQWtCLEdDbENwQyxHQUFrQixHQ01sQixHQUFrQixHQ1psQixHQUFrQixHQ0ZsQixHQUFrQixHQUFrQixHQ0xwQyxHZGtDT2hvQyxHbkVPSSxTQUFzQmxDLEVBQU81L0IsRUFBU3RqQixHQUVSLElBUXZDcXRGLEdBQXNCLEVBRXRCQyxFQUFVbDhCLEdBQVlrRCxHQUFrQkYsUUFBK0QvWSxHQUV2R3N3QyxFQUFXLFNBQWtCdnNFLEdBQy9Ca3VFLEVBQVEvcUQsU0FBUyxDQUNmNXRCLEtBQU1rN0MsR0FDTnp3QyxJQUFLQSxHQUVULEVBRUl3ckUsRUFBWSxTQUFtQnhyRSxFQUFLMmQsRUFBU3FZLEdBQy9DLElBQUltNEMsRUFBa0IsQ0FDcEI1NEUsS0FBTTg2QyxHQUNOMXlCLFFBQVNBLEVBQ1RxWSxJQUFLQSxFQUNMaDJCLElBQUtBLEdBR1A4akMsRUFBTTNnQixTQUFTZ3JELEdBRWZELEVBQVEvcUQsU0FBU2dyRCxHQUViRixHQUFpQmpvQyxFQUFVN0IsV0FBVzRCLGVBQ3hDa29DLElBQ0FBLEdBQWdCLEVBRXBCLEVBRUlqb0MsRUFBWSxHQUFjLENBQUMsRUFBR2tvQyxFQUFTLENBQ3pDRSxNQUFPLFdBQ0wsSUFBSXp0QixFQUFVLEdBT2QsT0FOQTdjLEVBQU0zZ0IsU0FBUyxDQUNiNXRCLEtBQU1pN0MsR0FDTjVTLE9BQVEsU0FBZ0J5d0MsR0FDdEIxdEIsRUFBUTFoRSxLQUFLb3ZGLEVBQ2YsSUFFS3QzRCxRQUFRdmtCLElBQUltdUQsRUFDckIsRUFDQWUsTUFBTyxXQUNMLElBQUlmLEVBQVUsR0FPZCxPQU5BN2MsRUFBTTNnQixTQUFTLENBQ2I1dEIsS0FBTTY2QyxHQUNOeFMsT0FBUSxTQUFnQjB3QyxHQUN0QjN0QixFQUFRMWhFLEtBQUtxdkYsRUFDZixJQUVLdjNELFFBQVF2a0IsSUFBSW11RCxFQUNyQixFQUNBNHRCLE1BQU8sV0FDTHpxQyxFQUFNM2dCLFNBQVMsQ0FDYjV0QixLQUFNKzZDLElBRVYsRUFDQXJrQyxRQUFTLFdBQ1A2M0IsRUFBTTNnQixTQUFTLENBQ2I1dEIsS0FBTWc3QyxHQUNOZzhCLFNBQVVBLEVBQ1ZmLFVBQVdBLEdBRWYsSUFPRixPQUhFeGxDLEVBQVUvNUIsVUFHTCs1QixDQUNULENtRXRGdUJ3b0MsQ0FBYTFxQyxJZXZDekIycUMsR0FBa0MsU0FBVWhqRixHQUFTLE9BQU9BLEVBQU13N0UsS0FBS2lDLHlCQUEyQixFQUNsR3dGLEdBQXlCLFNBQVVqakYsR0FBUyxPQUFPQSxFQUFNdzdFLEtBQUtnQyxnQkFBa0IsRUNGaEYwRixHQUFxQixTQUFVbGpGLEdBQVMsT0FBT0EsRUFBTTQrRSxhQUFhNUMsT0FBUyxFQUMzRW1ILEdBQWtDLFNBQVVuakYsR0FBUyxPQUFPQSxFQUFNNCtFLGFBQWEzQyxhQUFlLEVDRDlGbUgsR0FBNEIsU0FBVXBqRixHQUFTLE9BQU9BLEVBQU02K0UsZ0JBQWdCTCxtQkFBcUIsRUNBakc2RSxHQUFzQixTQUFVcmpGLEdBQVMsT0FBT0EsRUFBTTIrRSxjQUFjM0MsT0FBUyxFQUM3RXNILEdBQW1DLFNBQVV0akYsR0FBUyxPQUFPQSxFQUFNMitFLGNBQWMxQyxhQUFlLEVDRGhHc0gsR0FBaUIsU0FBVXZqRixHQUFTLE9BQU9BLEVBQU05TSxTQUFTQSxRQUFVLEVDQXBFc3dGLEdBQXFCLFNBQVV4akYsR0FBUyxPQUFPQSxFQUFNMCtFLGFBQWExQyxPQUFTLEVBQzNFeUgsR0FBa0MsU0FBVXpqRixHQUFTLE9BQU9BLEVBQU0wK0UsYUFBYXpDLGFBQWUsRW5CRHJHLEdBQThELFNBQVV6N0IsRUFBUUMsR0FFaEYsT0FESTcwRCxPQUFPRSxlQUFrQkYsT0FBT0UsZUFBZTAwRCxFQUFRLE1BQU8sQ0FBRXAwRCxNQUFPcTBELElBQWlCRCxFQUFPQyxJQUFNQSxFQUNsR0QsQ0FDWCxFQUVXa2pDLEdBQWtCLE9BQVcsS0FBcUIsR0FBbUIsR0FBcUIsQ0FBQyw4QkFBK0IsQ0FBQyxpQ0FDM0hDLEdBQXdCLE9BQVdyQixLQUFxQkEsR0FBbUIsR0FBcUIsQ0FBQyxtQkFBb0Isb0VBQXFFLFNBQVUsQ0FBQyxtQkFBb0Isb0VBQXFFLFlBQVksU0FBVXZ5QyxHQUUzVCxPQURZQSxFQUFHa1AsTUFDRm53QyxPQUFPLEVBQ3hCLElBQUcsU0FBVWloQyxHQUVULE9BRFlBLEVBQUdrUCxNQUNGMmtDLEtBQUssRUFDdEIsSW9CWkksR0FBc0MsV0FTdEMsT0FSQSxHQUFXaDRGLE9BQU9vckIsUUFBVSxTQUFTbm1CLEdBQ2pDLElBQUssSUFBSThkLEVBQUdrQyxFQUFJLEVBQUdqVixFQUFJck4sVUFBVTlCLE9BQVFva0IsRUFBSWpWLEVBQUdpVixJQUU1QyxJQUFLLElBQUkzVSxLQURUeVMsRUFBSXBnQixVQUFVc2lCLEdBQ09qbEIsT0FBT08sVUFBVWdJLGVBQWUvRixLQUFLdWdCLEVBQUd6UyxLQUN6RHJMLEVBQUVxTCxHQUFLeVMsRUFBRXpTLElBRWpCLE9BQU9yTCxDQUNYLEVBQ08sR0FBU3hDLE1BQU14QixLQUFNMEIsVUFDaEMsRUFLV3MxRixHQUFXLFdBQ2xCLElBQUk5ekMsRXRHdUJpQixXQUNyQixJQUFJQSxHQUFLLElBQUF4VixXQUFTLEdBQVF1cEQsRUFBUy96QyxFQUFHLEdBQUlnMEMsRUFBWWgwQyxFQUFHLEdBQ3JEZ1UsR0FBSyxJQUFBeHBCLFVBQVMsSUFBS3lwRCxFQUFTamdDLEVBQUcsR0FBSWtnQyxFQUFZbGdDLEVBQUcsR0F1Q3RELE9BdENBLElBQUEvcEIsWUFBVSxXQUNOLFVBQVUsZ0JBQWdCLFdBQ3RCLGlCQUFpQm9uQixHQUNyQixHQUNKLEdBQUcsSUFrQ0ksQ0FBRTBpQyxPQUFRQSxFQUFRRSxPQUFRQSxFQUFRRSxXQWpDeEIsV0FDYixVQUFVLGdCQUFnQixXQUFjLE9BQU9uaEMsUUFBVSxPQUFRLE9BQVEsR0FBUSxXQUM3RSxJQUFJb1gsRUFBVTZwQixFQUNkLE9BQU8xZ0MsR0FBWXoyRCxNQUFNLFNBQVVrakQsR0FDL0IsT0FBUUEsRUFBR3dULE9BQ1AsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFhLDZCQUE2QjRnQyxVQUMxRCxLQUFLLEVBR0QsT0FGQXAwQyxFQUFHeVQsT0FDSHVnQyxHQUFVLEdBQ0gsQ0FBQyxFQUFhLGlDQUFpQ3hpQyxLQUMxRCxLQUFLLEVBSUQsT0FIQTRZLEVBQVdwcUIsRUFBR3lULE9BQ2R3Z0MsRUFBUzdwQixFQUFTaG9CLE9BQU8rakIsTUFDekIrdEIsRUFBVUQsR0FDSCxDQUFDLEdBRXBCLEdBQ0osR0FBSSxHQUNSLEVBZWlFSSxjQWQ3QyxXQUNoQixVQUFVLGdCQUFnQixXQUFjLE9BQU9yaEMsUUFBVSxPQUFRLE9BQVEsR0FBUSxXQUM3RSxPQUFPTyxHQUFZejJELE1BQU0sU0FBVWtqRCxHQUMvQixPQUFRQSxFQUFHd1QsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQWEsNkJBQTZCMXhDLFdBQzFELEtBQUssRUFJRCxPQUhBaytCLEVBQUd5VCxPQUNIdWdDLEdBQVUsR0FDVkUsRUFBVSxJQUNILENBQUMsR0FFcEIsR0FDSixHQUFJLEdBQ1IsRUFFSixDc0dqRWFJLEdBQWVQLEVBQVMvekMsRUFBRyt6QyxPQUFRRSxFQUFTajBDLEVBQUdpMEMsT0FBUUUsRUFBYW4wQyxFQUFHbTBDLFdBQVlFLEVBQWdCcjBDLEVBQUdxMEMsY0FDL0csT0FBUSxVQUFNVixHQUFpQixDQUFFNXFFLFNBQVUsQ0FBQ2dyRSxJQUFXLFNBQUszaUMsR0FBUSxHQUFTLENBQUUsZUFBZ0Isb0JBQXFCeGhCLFFBQVN5a0QsR0FBaUIsQ0FBRXRyRSxTQUFVLGVBQWtCZ3JFLElBQVcsU0FBSzNpQyxHQUFRLEdBQVMsQ0FBRSxlQUFnQixtQkFBb0J4aEIsUUFBU3VrRCxHQUFjLENBQUVwckUsU0FBVSxjQUFnQixTQUFLNnFFLEdBQXVCLENBQUU3cUUsU0FBVWtyRSxFQUFPNTRDLEtBQUksU0FBVTVtQyxHQUFTLE9BQVEsU0FBSzgvRSxHQUFlLENBQUU5L0UsTUFBT0EsR0FBU0EsRUFBTU4sR0FBTSxRQUMxYSxFQ2pCV3FnRixHQUEyQixTQUFVNS9ELEdBQzVDLE9BQU9BLEVBQUs2L0QsZUFBZSxRQUFTemlDLEdBQ3hDLEVBQ1cwaUMsR0FBMkIsU0FBVTkvRCxHQUM1QyxPQUFPQSxFQUFLNi9ELGVBQWUsUUFBU3JpQyxHQUN4QyxFQUlXdWlDLEdBQTJCLFNBQVUvL0QsR0FDNUMsT0FBT0EsRUFBSzYvRCxlQUFlLFFBQVNoaUMsR0FDeEMsRXBCUFdtaUMsR0FBdUIsT0FBVyxLQUFxQixHQUxBLFNBQVVua0MsRUFBUUMsR0FFaEYsT0FESTcwRCxPQUFPRSxlQUFrQkYsT0FBT0UsZUFBZTAwRCxFQUFRLE1BQU8sQ0FBRXAwRCxNQUFPcTBELElBQWlCRCxFQUFPQyxJQUFNQSxFQUNsR0QsQ0FDWCxDQUVxRixDQUFxQixDQUFDLGlCQUFrQiwyQkFBNEIsbUJBQW9CLHFCQUFzQiw0QkFBNkIsZUFBZ0IsT0FBUSxDQUFDLGlCQUFrQiwyQkFBNEIsbUJBQW9CLHFCQUFzQiw0QkFBNkIsZUFBZ0IsVUFBVSxTQUFVelEsR0FFOVksT0FEWUEsRUFBR2tQLE1BQ0YvNUMsTUFBTSxFQUN2QixJQUFHLFNBQVU2cUMsR0FFVCxPQURZQSxFQUFHa1AsTUFDRjJCLGFBQWEsRUFDOUIsSUFBRyxTQUFVN1EsR0FFVCxPQURZQSxFQUFHa1AsTUFDRmx3QyxRQUFRLEVBQ3pCLElBQUcsU0FBVWdoQyxHQUVULE9BRFlBLEVBQUdrUCxNQUNGNXZDLFNBQVMsRUFDMUIsSUFBRyxTQUFVMGdDLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0Y0QixPQUFPK2pDLElBQ3hCLElBQUcsU0FBVTcwQyxHQUVULE9BRFlBLEVBQUdrUCxNQUNGNEIsT0FBT0UsS0FDeEIsSXFCcEJXdWpDLEdBQWdCLFNBQVV2MEMsR0FDakMsSUFBSXZyQyxFQUFRdXJDLEVBQUd2ckMsTUFDWG1pQixFQUFRbmlCLEVBQU1taUIsTUFBT0MsRUFBTXBpQixFQUFNb2lCLElBQ2pDaStELEVBQVksSUFBSXA1RixLQUFLazdCLEVBQU1tK0QsVUFDM0JDLEVBQVUsSUFBSXQ1RixLQUFLbTdCLEVBQUlrK0QsVUFDM0IsT0FBUSxVQUFNSCxHQUFzQixDQUFFN3JFLFNBQVUsRUFBQyxTQUFLLElBQUssQ0FBRUEsU0FBVXRVLEVBQU13Z0YsV0FBWSxVQUFNLElBQUssQ0FBRWxzRSxTQUFVLENBQUM0ckUsR0FBeUJHLEdBQVksTUFBT0gsR0FBeUJLLFFBQzFMLEVwQlRJLEdBQThELFNBQVV2a0MsRUFBUUMsR0FFaEYsT0FESTcwRCxPQUFPRSxlQUFrQkYsT0FBT0UsZUFBZTAwRCxFQUFRLE1BQU8sQ0FBRXAwRCxNQUFPcTBELElBQWlCRCxFQUFPQyxJQUFNQSxFQUNsR0QsQ0FDWCxFQUVXeWtDLEdBQVksS0FBUyxLQUFxQixHQUFtQixHQUFxQixDQUFDLGNBQWUsbUJBQW9CLDBDQUEyQyx5Q0FBMEMsQ0FBQyxjQUFlLG1CQUFvQiwwQ0FBMkMsNENBQTRDLFNBQVVsMUMsR0FFdlYsT0FEWUEsRUFBR2tQLE1BQ0Y0QixPQUFPQyxLQUN4QixJQUFHLFNBQVUvUSxHQUVULE9BRFlBLEVBQUdrUCxNQUNGNXZDLFNBQVMsRUFDMUIsSUFBRyxTQUFVMGdDLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0ZpbUMsWUFBWUMsRUFDN0IsSUFDV0MsR0FBZSxPQUFXLEtBQXFCLEdBQW1CLEdBQXFCLENBQUMsNERBQTZELDJDQUE0QyxDQUFDLDREQUE2RCw4Q0FBOEMsU0FBVXIxQyxHQUU5VCxPQURZQSxFQUFHa1AsTUFDRmltQyxZQUFZQyxFQUM3QixJcUJsQkksR0FBc0MsV0FTdEMsT0FSQSxHQUFXdjVGLE9BQU9vckIsUUFBVSxTQUFTbm1CLEdBQ2pDLElBQUssSUFBSThkLEVBQUdrQyxFQUFJLEVBQUdqVixFQUFJck4sVUFBVTlCLE9BQVFva0IsRUFBSWpWLEVBQUdpVixJQUU1QyxJQUFLLElBQUkzVSxLQURUeVMsRUFBSXBnQixVQUFVc2lCLEdBQ09qbEIsT0FBT08sVUFBVWdJLGVBQWUvRixLQUFLdWdCLEVBQUd6UyxLQUN6RHJMLEVBQUVxTCxHQUFLeVMsRUFBRXpTLElBRWpCLE9BQU9yTCxDQUNYLEVBQ08sR0FBU3hDLE1BQU14QixLQUFNMEIsVUFDaEMsRUFLVzgyRixHQUFRLFdBQ2YsSUFBSTFnRSxFQ2ZvQixXQUN4QixJQUFJb3JCLEdBQUssSUFBQXhWLFVBQVMsSUFBSTl1QyxNQUFTazVCLEVBQU9vckIsRUFBRyxHQUFJdTFDLEVBQVV2MUMsRUFBRyxHQUN0RHcxQyxHQUFjLElBQUFqckQsUUFBTyxNQUNyQmtyRCxFQUFxQixXQUNyQkYsRUFBUSxJQUFJNzVGLEtBQ2hCLEVBQ0lnNkYsRUFBc0IsV0FDTSxPQUF4QkYsRUFBWTduRSxTQUNaOGlFLGNBQWMrRSxFQUFZN25FLFFBRWxDLEVBS0EsT0FKQSxJQUFBc2MsWUFBVSxXQUVOLE9BREF1ckQsRUFBWTduRSxRQUFVa2pFLFlBQVk0RSxFQUFvQixLQUMvQ0MsQ0FDWCxHQUFHLElBQ0k5Z0UsQ0FDWCxDRERlK2dFLEdBQ1gsT0FBUSxVQUFNTixHQUFjLENBQUV0c0UsU0FBVSxFQUFDLFNBQUttc0UsR0FBVyxHQUFTLENBQUUsZUFBZ0IsY0FBZ0IsQ0FBRW5zRSxTQUFVeXJFLEdBQXlCNS9ELE9BQVcsU0FBS3NnRSxHQUFXLEdBQVMsQ0FBRSxlQUFnQixjQUFnQixDQUFFbnNFLFNBQVUyckUsR0FBeUI5L0QsUUFDeFAsRUVsQkksR0FBd0MsV0FDeEMsSUFBSTBtQyxFQUFnQixTQUFVcitELEVBQUdoQixHQUk3QixPQUhBcS9ELEVBQWdCei9ELE9BQU91dEQsZ0JBQ2xCLENBQUVDLFVBQVcsY0FBZ0JsdEQsT0FBUyxTQUFVYyxFQUFHaEIsR0FBS2dCLEVBQUVvc0QsVUFBWXB0RCxDQUFHLEdBQzFFLFNBQVVnQixFQUFHaEIsR0FBSyxJQUFLLElBQUlrUSxLQUFLbFEsRUFBT0osT0FBT08sVUFBVWdJLGVBQWUvRixLQUFLcEMsRUFBR2tRLEtBQUlsUCxFQUFFa1AsR0FBS2xRLEVBQUVrUSxHQUFJLEVBQzdGbXZELEVBQWNyK0QsRUFBR2hCLEVBQzVCLEVBQ0EsT0FBTyxTQUFVZ0IsRUFBR2hCLEdBQ2hCLEdBQWlCLG1CQUFOQSxHQUEwQixPQUFOQSxFQUMzQixNQUFNLElBQUl5QixVQUFVLHVCQUF5Qk0sT0FBTy9CLEdBQUssaUNBRTdELFNBQVN1L0QsSUFBTzErRCxLQUFLa0MsWUFBYy9CLENBQUcsQ0FEdENxK0QsRUFBY3IrRCxFQUFHaEIsR0FFakJnQixFQUFFYixVQUFrQixPQUFOSCxFQUFhSixPQUFPcUksT0FBT2pJLElBQU11L0QsRUFBR3AvRCxVQUFZSCxFQUFFRyxVQUFXLElBQUlvL0QsRUFDbkYsQ0FDSCxDQWQyQyxHQWlCeENvNkIsR0FBK0IsU0FBVXA1QixHQUV6QyxTQUFTbzVCLEVBQWM3eEQsR0FDbkIsSUFBSWltQixFQUFRd1MsRUFBT24rRCxLQUFLdkIsS0FBTWluQyxJQUFVam5DLEtBSXhDLE9BSEFrdEQsRUFBTS81QyxNQUFRLENBQ1Z0USxPQUFPLEdBRUpxcUQsQ0FDWCxDQWNBLE9BckJBLEdBQVU0ckMsRUFBZXA1QixHQVF6Qm81QixFQUFjbHpFLHlCQUEyQixXQUNyQyxNQUFPLENBQUUvaUIsT0FBTyxFQUNwQixFQUNBaTJGLEVBQWN4NUYsVUFBVXN2QyxrQkFBb0IsU0FBVS9yQyxFQUFPazJGLEdBQ3pEbjJGLFFBQVFpUSxJQUFJaFEsR0FDWkQsUUFBUWlRLElBQUlrbUYsRUFBVWpxRCxlQUMxQixFQUNBZ3FELEVBQWN4NUYsVUFBVXlmLE9BQVMsV0FDN0IsT0FBSS9lLEtBQUttVCxNQUFNdFEsT0FDSixTQUFLLEtBQU0sQ0FBRW9wQixTQUFVLHFCQUUzQmpzQixLQUFLaW5DLE1BQU1oYixRQUN0QixFQUNPNnNFLENBQ1gsQ0F2QmtDLENBdUJoQyxhdEJuQ1NFLEdBQTJCLEtBQVMsS0FBcUIsR0FMRixTQUFVcmxDLEVBQVFDLEdBRWhGLE9BREk3MEQsT0FBT0UsZUFBa0JGLE9BQU9FLGVBQWUwMEQsRUFBUSxNQUFPLENBQUVwMEQsTUFBT3EwRCxJQUFpQkQsRUFBT0MsSUFBTUEsRUFDbEdELENBQ1gsQ0FFdUYsQ0FBcUIsQ0FBQyxrQkFBbUIsZ0NBQWlDLENBQUMsa0JBQW1CLG1DQUFtQyxTQUFVelEsR0FFOU4sT0FEWUEsRUFBR2tQLE1BQ0Y1dkMsU0FBUyxFQUMxQixJdUJSSSxHQUFzQyxXQVN0QyxPQVJBLEdBQVd6akIsT0FBT29yQixRQUFVLFNBQVNubUIsR0FDakMsSUFBSyxJQUFJOGQsRUFBR2tDLEVBQUksRUFBR2pWLEVBQUlyTixVQUFVOUIsT0FBUW9rQixFQUFJalYsRUFBR2lWLElBRTVDLElBQUssSUFBSTNVLEtBRFR5UyxFQUFJcGdCLFVBQVVzaUIsR0FDT2psQixPQUFPTyxVQUFVZ0ksZUFBZS9GLEtBQUt1Z0IsRUFBR3pTLEtBQ3pEckwsRUFBRXFMLEdBQUt5UyxFQUFFelMsSUFFakIsT0FBT3JMLENBQ1gsRUFDTyxHQUFTeEMsTUFBTXhCLEtBQU0wQixVQUNoQyxFQVNXdTNGLEdBQXVCLFdBQzlCLElBQUlsSCxFQUFlLEVBQVlzRSxJQUMzQjZDLEVBQTRCLEVBQVk1QyxJQUN4QzZDLEVBQW1CLEVBQVl6QyxJQUMvQjdyRCxFQUFXLElBTWYsSUFMQSxJQUFBc0MsWUFBVSxXQUNtQixPQUFyQmdzRCxHQUNBdHVELEVBQVN1bEQsR0FBa0IrSSxHQUVuQyxHQUFHLENBQUNBLElBQ0FELElBQThCcmxDLEdBQWU2N0IsUUFDN0MsT0FBTyxTQUFLMEosR0FBUyxDQUFFLGVBQWdCLHdCQUF5QnBtRCxLQUFNaWlCLEdBQWFva0MsUUFFdkYsR0FBcUIsT0FBakJ0SCxFQUNBLE9BQU8sS0FFWCxJQUFJN3VDLEVBQUs2dUMsRUFBYXRELE1BQU82SyxFQUFlcDJDLEVBQUdxMkMsWUFBYUMsRUFBaUJ0MkMsRUFBR3UyQyxtQkFBb0JDLEVBQWlCeDJDLEVBQUd5MkMsbUJBQ3hILE9BQVEsU0FBSyxXQUFXLENBQUUxdEUsU0FBVThsRSxhQUFtRCxFQUFTQSxFQUFhdEQsTUFBTWoyRCxLQUFLK2xCLEtBQUksU0FBVS9sQixFQUFNcVAsR0FDcEksSUw5QnlDL1AsRUs4QnJDOGhFLEVBQWNOLEVBQWF6eEQsR0FDM0JneUQsRUFBa0IsSUFBSWo3RixLQUFZLElBQVA0NUIsR0FDM0IwcUIsRUFBSzBTLEdBQWdCZ2tDLEdBQWMvakMsRUFBTzNTLEVBQUcyUyxLQUFNQyxFQUFjNVMsRUFBRzRTLFlBQ3hFLE9BQVEsVUFBTWdrQyxHQUFxQixHQUFTLENBQUVDLFdMakNMamlFLEVLaUM4QytoRSxFTGhDeEYvaEUsRUFBSzYvRCxlQUFlLFFBQVNqaUMsS0tnQzZFRyxNQUFNLFNBQUssTUFBTyxDQUFFM2tELElBQUsya0QsRUFBTW1rQyxJQUFLbGtDLEVBQWFta0MsTUFBT25rQyxLQUFrQixDQUFFN3BDLFNBQVUsRUFBQyxTQUFLK3NFLEdBQTBCLEdBQVMsQ0FBRSxlQUFnQix1QkFBeUIsQ0FBRS9zRSxTQUFVNnBDLE1BQWlCLFNBQUtrakMsR0FBMEIsQ0FBRS9zRSxTQUFVLFVBQVcsVUFBTStzRSxHQUEwQixDQUFFL3NFLFNBQVUsQ0FBQ3V0RSxFQUFlM3hELEdBQVEsUUFBYyxTQUFLbXhELEdBQTBCLENBQUUvc0UsU0FBVSxVQUFXLFVBQU0rc0UsR0FBMEIsQ0FBRS9zRSxTQUFVLENBQUN5dEUsRUFBZTd4RCxHQUFRLFVBQWtCclAsRUFDeGtCLEtBQ1IsRXRCMUNJLEdBQThELFNBQVVtN0IsRUFBUUMsR0FFaEYsT0FESTcwRCxPQUFPRSxlQUFrQkYsT0FBT0UsZUFBZTAwRCxFQUFRLE1BQU8sQ0FBRXAwRCxNQUFPcTBELElBQWlCRCxFQUFPQyxJQUFNQSxFQUNsR0QsQ0FDWCxFQUVXdW1DLEdBQTZCLEtBQVMsS0FBcUIsR0FBbUIsR0FBcUIsQ0FBQyxrQkFBbUIsZ0NBQWlDLENBQUMsa0JBQW1CLG1DQUFtQyxTQUFVaDNDLEdBRWhPLE9BRFlBLEVBQUdrUCxNQUNGNXZDLFNBQVMsRUFDMUIsSUFDVzIzRSxHQUE0QixLQUFTLEtBQXFCLEdBQW1CLEdBQXFCLENBQUMsa0JBQW1CLGdDQUFpQyxDQUFDLGtCQUFtQixtQ0FBbUMsU0FBVWozQyxHQUUvTixPQURZQSxFQUFHa1AsTUFDRjV2QyxTQUFTLEVBQzFCLEl1QlpJLEdBQXNDLFdBU3RDLE9BUkEsR0FBV3pqQixPQUFPb3JCLFFBQVUsU0FBU25tQixHQUNqQyxJQUFLLElBQUk4ZCxFQUFHa0MsRUFBSSxFQUFHalYsRUFBSXJOLFVBQVU5QixPQUFRb2tCLEVBQUlqVixFQUFHaVYsSUFFNUMsSUFBSyxJQUFJM1UsS0FEVHlTLEVBQUlwZ0IsVUFBVXNpQixHQUNPamxCLE9BQU9PLFVBQVVnSSxlQUFlL0YsS0FBS3VnQixFQUFHelMsS0FDekRyTCxFQUFFcUwsR0FBS3lTLEVBQUV6UyxJQUVqQixPQUFPckwsQ0FDWCxFQUNPLEdBQVN4QyxNQUFNeEIsS0FBTTBCLFVBQ2hDLEVBU1cwNEYsR0FBd0IsV0FDL0IsSUFBSXRJLEVBQWdCLEVBQVkwRSxJQUM1QjZELEVBQTZCLEVBQVk1RCxJQUN6QzBDLEVBQW1CLEVBQVl6QyxJQUMvQjdyRCxFQUFXLElBTWYsSUFMQSxJQUFBc0MsWUFBVSxXQUNtQixPQUFyQmdzRCxHQUNBdHVELEVBQVNpbEQsR0FBbUJxSixHQUVwQyxHQUFHLENBQUNBLElBQ0FrQixJQUErQnhtQyxHQUFlNjdCLFFBQzlDLE9BQU8sU0FBSzBKLEdBQVMsQ0FBRXBtRCxLQUFNaWlCLEdBQWFva0MsUUFFOUMsR0FBc0IsT0FBbEJ2SCxFQUNBLE9BQU8sS0FFWCxJQ25Da0R3SSxFQUM5Q3hpRSxFRGtDQW9yQixFQUFLNHVDLEVBQWN4RCxPQUFRZ0wsRUFBZXAyQyxFQUFHcTJDLFlBQWFnQixFQUFjcjNDLEVBQUdzM0MsZUFBZ0JoaUUsRUFBTzBxQixFQUFHMXFCLEtBQ3pHLE9BQVEsU0FBSyxXQUFXLENBQUV2TSxVQ3BDd0JxdUUsRURvQ2lCOWhFLEVDbkMvRFYsRUFBTyxJQUFJbDVCLEtBQ1IwN0YsRUFDRi83QyxLQUFJLFNBQVUvbEIsR0FBUSxPQUFPLElBQUk1NUIsS0FBWSxJQUFQNDVCLEVBQWMsSUFDcER1ckIsUUFBTyxTQUFVMDJDLEdBQWMsT0FBT0EsRUFBV0MsWUFBYzVpRSxFQUFLNGlFLFVBQVksSUFDaEY5NEYsTUFBTSxFQUFHLElEK0IyRDI4QyxLQUFJLFNBQVV6bUIsRUFBTStQLEdBQ3JGLElBQUkreEQsRUFBY04sRUFBYXp4RCxHQUMzQnFiLEVBQUswUyxHQUFnQmdrQyxHQUFjL2pDLEVBQU8zUyxFQUFHMlMsS0FBTUMsRUFBYzVTLEVBQUc0UyxZQUN4RSxPQUFRLFVBQU1na0MsR0FBcUIsR0FBUyxDQUFFLGVBQWdCLHNCQUF1QkMsVUFBV2xDLEdBQXlCLy9ELEdBQU8rOUIsTUFBTSxTQUFLLE1BQU8sQ0FBRTNrRCxJQUFLMmtELEVBQU1ta0MsSUFBS2xrQyxFQUFhbWtDLE1BQU9ua0MsS0FBa0IsQ0FBRTdwQyxTQUFVLEVBQUMsVUFBTWl1RSxHQUE0QixHQUFTLENBQUUsZUFBZ0Isd0JBQTBCLENBQUVqdUUsU0FBVSxDQUFDc3VFLEVBQVkxeUQsR0FBUSxTQUFlLFNBQUtzeUQsR0FBMkIsQ0FBRWx1RSxTQUFVNnBDLE9BQW9CaCtCLEVBQUtqNUIsVUFDdmEsS0FDUixFdEJwQ1c4N0YsR0FBeUIsT0FBVyxLQUFxQixHQUxGLFNBQVVobkMsRUFBUUMsR0FFaEYsT0FESTcwRCxPQUFPRSxlQUFrQkYsT0FBT0UsZUFBZTAwRCxFQUFRLE1BQU8sQ0FBRXAwRCxNQUFPcTBELElBQWlCRCxFQUFPQyxJQUFNQSxFQUNsR0QsQ0FDWCxDQUV1RixDQUFxQixDQUFDLCtIQUFnSSx3RkFBeUYsY0FBZSxDQUFDLCtIQUFnSSx3RkFBeUYsaUJBQWlCLFNBQVV6USxHQUV0a0IsT0FEWUEsRUFBR2tQLE1BQ0ZpbUMsWUFBWUMsRUFDN0IsSUFBRyxTQUFVcDFDLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0Yya0MsS0FBSyxFQUN0QixJd0JOVzZELEdBQWtCLFdBQ3pCLElBQUlqSixFQUFzQixFQUFZNEUsSUFFdEMsT0FBeUIsT0FERixFQUFZRyxLQUV4QixTQUFLLElBQUssQ0FBRXpxRSxTQUFVLGlFQUV6QixVQUFNMHVFLEdBQXdCLENBQUUxdUUsU0FBVSxDQUF5QixVQUF4QjBsRSxJQUFtQyxTQUFLc0gsR0FBc0IsQ0FBQyxHQUE0QixXQUF4QnRILElBQW9DLFNBQUt5SSxHQUF1QixDQUFDLEtBQzNMLEV2QlpJLEdBQThELFNBQVV6bUMsRUFBUUMsR0FFaEYsT0FESTcwRCxPQUFPRSxlQUFrQkYsT0FBT0UsZUFBZTAwRCxFQUFRLE1BQU8sQ0FBRXAwRCxNQUFPcTBELElBQWlCRCxFQUFPQyxJQUFNQSxFQUNsR0QsQ0FDWCxFQUVXa25DLEdBQTZCLE9BQVcsS0FBcUIsR0FBbUIsR0FBcUIsQ0FBQyxrSUFBbUksQ0FBQyxxSUFDMU9DLEdBQTBCLEtBQVMsS0FBcUIsR0FBbUIsR0FBcUIsQ0FBQyxrQkFBbUIsZ0NBQWlDLENBQUMsa0JBQW1CLG1DQUFtQyxTQUFVNTNDLEdBRTdOLE9BRFlBLEVBQUdrUCxNQUNGNXZDLFNBQVMsRUFDMUIsSUFDV3U0RSxHQUFvQyxPQUFXckYsS0FBcUJBLEdBQW1CLEdBQXFCLENBQUMsK0JBQWdDLENBQUMsa0N3QlI5SW9FLEdBQXNCLFNBQVU1MkMsR0FDdkMsSUFBSTYyQyxFQUFZNzJDLEVBQUc2MkMsVUFBV2xrQyxFQUFPM1MsRUFBRzJTLEtBQU01cEMsRUFBV2kzQixFQUFHajNCLFNBQzVELE9BQVEsVUFBTTR1RSxHQUE0QixDQUFFNXVFLFNBQVUsRUFBQyxTQUFLNnVFLEdBQXlCLENBQUU3dUUsU0FBVTh0RSxLQUFjLFNBQUtnQixHQUFtQyxDQUFFOXVFLFNBQVU0cEMsSUFBUzVwQyxJQUNoTCxFdkJBVyt1RSxHQUErQixPQUFXLEtBQXFCLEdBTFIsU0FBVXJuQyxFQUFRQyxHQUVoRixPQURJNzBELE9BQU9FLGVBQWtCRixPQUFPRSxlQUFlMDBELEVBQVEsTUFBTyxDQUFFcDBELE1BQU9xMEQsSUFBaUJELEVBQU9DLElBQU1BLEVBQ2xHRCxDQUNYLENBRTZGLENBQXFCLENBQUMsZ0hBQWlILHNCQUF1QixTQUFVLENBQUMsZ0hBQWlILHNCQUF1QixZQUFZLFNBQVV6USxHQUVoYSxPQURZQSxFQUFHa1AsTUFDRjk1QyxPQUFPLEVBQ3hCLElBQUcsU0FBVTRxQyxHQUVULE9BRFlBLEVBQUdrUCxNQUNGMmtDLEtBQUssRUFDdEIsSXdCWEksR0FBc0MsV0FTdEMsT0FSQSxHQUFXaDRGLE9BQU9vckIsUUFBVSxTQUFTbm1CLEdBQ2pDLElBQUssSUFBSThkLEVBQUdrQyxFQUFJLEVBQUdqVixFQUFJck4sVUFBVTlCLE9BQVFva0IsRUFBSWpWLEVBQUdpVixJQUU1QyxJQUFLLElBQUkzVSxLQURUeVMsRUFBSXBnQixVQUFVc2lCLEdBQ09qbEIsT0FBT08sVUFBVWdJLGVBQWUvRixLQUFLdWdCLEVBQUd6UyxLQUN6RHJMLEVBQUVxTCxHQUFLeVMsRUFBRXpTLElBRWpCLE9BQU9yTCxDQUNYLEVBQ08sR0FBU3hDLE1BQU14QixLQUFNMEIsVUFDaEMsRUFNV3U1RixHQUF3QixXQUMvQixJQUFJcHdELEVBQVcsSUFDWHF3RCxFQUFrQyxTQUFVeHpFLEdBQU8sT0FBTyxXQUMxRG1qQixFQUFTK21ELEdBQXVCbHFFLEdBQ3BDLENBQUcsRUFDSCxPQUFRLFVBQU1zekUsR0FBOEIsQ0FBRS91RSxTQUFVLEVBQUMsU0FBS3FvQyxHQUFRLEdBQVMsQ0FBRSxlQUFnQixvQkFBcUJ4aEIsUUFBU29vRCxFQUFnQyxVQUFZLENBQUVqdkUsU0FBVSxZQUFhLFNBQUtxb0MsR0FBUSxHQUFTLENBQUUsZUFBZ0IscUJBQXNCeGhCLFFBQVNvb0QsRUFBZ0MsV0FBYSxDQUFFanZFLFNBQVUsY0FDeFUsRXZCdEJJLEdBQThELFNBQVUwbkMsRUFBUUMsR0FFaEYsT0FESTcwRCxPQUFPRSxlQUFrQkYsT0FBT0UsZUFBZTAwRCxFQUFRLE1BQU8sQ0FBRXAwRCxNQUFPcTBELElBQWlCRCxFQUFPQyxJQUFNQSxFQUNsR0QsQ0FDWCxFQUVXd25DLEdBQVMsT0FBVyxLQUFxQixHQUFtQixHQUFxQixDQUFDLG1IQUFvSCx5RUFBMEUsb0RBQXFELHNCQUF1QixTQUFVLENBQUMsbUhBQW9ILHlFQUEwRSxvREFBcUQsc0JBQXVCLFlBQVksU0FBVWo0QyxHQUU5b0IsT0FEWUEsRUFBR2tQLE1BQ0YvNUMsTUFBTSxFQUN2QixJQUFHLFNBQVU2cUMsR0FFVCxPQURpQkEsRUFBRy9nQyxVQUV4QixJQUFHLFNBQVUrZ0MsR0FFVCxPQURZQSxFQUFHa1AsTUFDRi81QyxNQUFNLEVBQ3ZCLElBQUcsU0FBVTZxQyxHQUVULE9BRFlBLEVBQUdrUCxNQUNGOTVDLE9BQU8sRUFDeEIsSUFDVzhpRixHQUFpQixRQUFZLEtBQXFCLEdBQW1CLEdBQXFCLENBQUMsb0NBQXFDLDhMQUErTCw4QkFBK0Isc0JBQXVCLDBDQUEyQyx1QkFBd0Isb0tBQXFLLENBQUMsb0NBQXFDLDhMQUErTCw4QkFBK0Isc0JBQXVCLDBDQUEyQyx1QkFBd0IsdUtBQXVLLFNBQVVsNEMsR0FFbm5DLE9BRFlBLEVBQUdrUCxNQUNGMmtDLEtBQUssRUFDdEIsSUFBRyxTQUFVN3pDLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0Y0QixPQUFPcW5DLGdCQUN4QixJQUFHLFNBQVVuNEMsR0FFVCxPQURZQSxFQUFHa1AsTUFDRmtwQyxLQUFLLEVBQ3RCLElBQUcsU0FBVXA0QyxHQUVULE9BRFlBLEVBQUdrUCxNQUNGbHdDLFFBQVEsRUFDekIsSUFBRyxTQUFVZ2hDLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0ZpbUMsWUFBWUMsRUFDN0IsSUFBRyxTQUFVcDFDLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0Zsd0MsUUFBUSxFQUN6QixJQUNXcTVFLEdBQWlCLE9BQVcsS0FBcUIsR0FBbUIsR0FBcUIsQ0FBQyxzSEFBdUgsdUJBQXdCLG1CQUFvQixzRkFBdUYsd0RBQXlELDJGQUE0RixDQUFDLHNIQUF1SCx1QkFBd0IsbUJBQW9CLHNGQUF1Rix3REFBeUQsOEZBQThGLFNBQVVyNEMsR0FFNTRCLE9BRFlBLEVBQUdrUCxNQUNGNEIsT0FBT3FuQyxnQkFDeEIsSUFBRyxTQUFVbjRDLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0YyQixhQUFhLEVBQzlCLElBQUcsU0FBVTdRLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0Zsd0MsUUFBUSxFQUN6QixJQUFHLFNBQVVnaEMsR0FFVCxPQURZQSxFQUFHa1AsTUFDRmltQyxZQUFZQyxFQUM3QixJQUFHLFNBQVVwMUMsR0FFVCxPQURZQSxFQUFHa1AsTUFDRjJrQyxLQUFLLEVBQ3RCLEl3QnBESSxHQUFzQyxXQVN0QyxPQVJBLEdBQVdoNEYsT0FBT29yQixRQUFVLFNBQVNubUIsR0FDakMsSUFBSyxJQUFJOGQsRUFBR2tDLEVBQUksRUFBR2pWLEVBQUlyTixVQUFVOUIsT0FBUW9rQixFQUFJalYsRUFBR2lWLElBRTVDLElBQUssSUFBSTNVLEtBRFR5UyxFQUFJcGdCLFVBQVVzaUIsR0FDT2psQixPQUFPTyxVQUFVZ0ksZUFBZS9GLEtBQUt1Z0IsRUFBR3pTLEtBQ3pEckwsRUFBRXFMLEdBQUt5UyxFQUFFelMsSUFFakIsT0FBT3JMLENBQ1gsRUFDTyxHQUFTeEMsTUFBTXhCLEtBQU0wQixVQUNoQyxFQU9XODVGLEdBQU8sV0FDZCxJQ2pCNENua0YsRURpQnhDdzZFLEVBQWUsRUFBWThFLElBQy9CLE9BQVEsU0FBS3dFLEdBQVEsR0FBUyxDQUFFaDVFLFlDbEJZOUssRURrQnlCdzZFLGFBQW1ELEVBQVNBLEVBQWExQyxRQUFRLEdBQUc5M0UsUUNqQjlJLElBQVBBLElBQWlCQSxFQUFLLEtBQ3RCQSxHQUFNLEtBQU9BLEVBQUssSUFDWCxHQUVQQSxHQUFNLEtBQU9BLEVBQUssSUFDWCxHQUVQQSxHQUFNLEtBQU9BLEVBQUssSUFDWCxHQUVQQSxHQUFNLEtBQU9BLEVBQUssSUFDWCxHQUVQQSxHQUFNLEtBQU9BLEVBQUssSUFDWCxHQUVBLE1BQVBBLEVBQ08sR0FFUEEsRUFBSyxLQUFPQSxFQUFLLElBQ1YsR0FFSixLREx5SixDQUFFNFUsVUFBVSxVQUFNbXZFLEdBQWdCLENBQUVudkUsU0FBVSxFQUFDLFNBQUt1c0UsR0FBTyxDQUFDLElBQUksU0FBS2lELEdBQVksQ0FBQyxJQUFJLFNBQUt6RSxHQUFVLENBQUMsSUFBSSxTQUFLaUUsR0FBdUIsQ0FBQyxJQUFJLFVBQU1NLEdBQWdCLENBQUV0dkUsU0FBVSxFQUFDLFNBQUt5dkUsR0FBYyxDQUFDLElBQUksU0FBS2QsR0FBaUIsQ0FBQyxXQUNqWSxFdkJwQkksR0FBOEQsU0FBVWpuQyxFQUFRQyxHQUVoRixPQURJNzBELE9BQU9FLGVBQWtCRixPQUFPRSxlQUFlMDBELEVBQVEsTUFBTyxDQUFFcDBELE1BQU9xMEQsSUFBaUJELEVBQU9DLElBQU1BLEVBQ2xHRCxDQUNYLEVBRVdnb0MsR0FBb0IsT0FBVyxLQUFxQixHQUFtQixHQUFxQixDQUFDLG1EQUFvRCxDQUFDLHNEQUNsSkMsR0FBYyxTQUFhLEtBQXFCLEdBQW1CLEdBQXFCLENBQUMsZUFBZ0IsbUJBQW9CLHVCQUF3QiwyQkFBNEIsd0dBQXlHLENBQUMsZUFBZ0IsbUJBQW9CLHVCQUF3QiwyQkFBNEIsMkdBQTJHLFNBQVUxNEMsR0FFL2UsT0FEWUEsRUFBR2tQLE1BQ0Y5NUMsT0FBTyxFQUN4QixJQUFHLFNBQVU0cUMsR0FFVCxPQURZQSxFQUFHa1AsTUFDRmx3QyxRQUFRLEVBQ3pCLElBQUcsU0FBVWdoQyxHQUVULE9BRFlBLEVBQUdrUCxNQUNGNXZDLFNBQVMsRUFDMUIsSUFBRyxTQUFVMGdDLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0YyQixhQUFhLEVBQzlCLEl5QmxCSSxHQUFzQyxXQVN0QyxPQVJBLEdBQVdoMUQsT0FBT29yQixRQUFVLFNBQVNubUIsR0FDakMsSUFBSyxJQUFJOGQsRUFBR2tDLEVBQUksRUFBR2pWLEVBQUlyTixVQUFVOUIsT0FBUW9rQixFQUFJalYsRUFBR2lWLElBRTVDLElBQUssSUFBSTNVLEtBRFR5UyxFQUFJcGdCLFVBQVVzaUIsR0FDT2psQixPQUFPTyxVQUFVZ0ksZUFBZS9GLEtBQUt1Z0IsRUFBR3pTLEtBQ3pEckwsRUFBRXFMLEdBQUt5UyxFQUFFelMsSUFFakIsT0FBT3JMLENBQ1gsRUFDTyxHQUFTeEMsTUFBTXhCLEtBQU0wQixVQUNoQyxFQVFXKzVGLEdBQWEsV0FDcEIsSUFBSXAxRixFQUFXMndELEtBQXFCM3dELFNBQ2hDd2tDLEVBQVcsSUFDWHFZLEdBQUssSUFBQXhWLFVBQVMsTUFBT211RCxFQUFhMzRDLEVBQUcsR0FBSTQ0QyxFQUFnQjU0QyxFQUFHLEdBZWhFLE9BTEEsSUFBQS9WLFlBQVUsV0FDYSxPQUFmMHVELEdBQ0FoeEQsRUFBU21tRCxHQUFnQjZLLEdBRWpDLEdBQUcsQ0FBQ0EsS0FDSSxVQUFNRixHQUFtQixDQUFFMXZFLFNBQVUsRUFBQyxTQUFLcW9DLEdBQVEsR0FBUyxDQUFFLGVBQWdCLG9CQUFxQnhoQixRQVJyRixXQUNsQmpJLEVBQVNvc0IsR0FBWTV3RCxHQUN6QixHQU11SSxDQUFFNGxCLFNBQVUsaUJBQWtCLFNBQUssS0FBTSxDQUFFQSxTQUFVLGlCQUFrQixTQUFLMnZFLEdBQWEsQ0FBRSxlQUFnQixvQkFBcUIzK0UsS0FBTSxTQUFVMWQsTUFBT3M4RixRQUErQ0EsRUFBYSxHQUFJRSxTQWR0VSxTQUFVcGtGLEdBQzlCbWtGLEVBQWNua0YsRUFBTW1KLE9BQU92aEIsTUFDL0IsS0FZOFgsU0FBS3k4RixHQUFnQixDQUFFQyxrQkFYelgsV0FDeEJILEVBQWMsR0FDbEIsTUFVSixFeEJyQ0ksR0FBOEQsU0FBVW5vQyxFQUFRQyxHQUVoRixPQURJNzBELE9BQU9FLGVBQWtCRixPQUFPRSxlQUFlMDBELEVBQVEsTUFBTyxDQUFFcDBELE1BQU9xMEQsSUFBaUJELEVBQU9DLElBQU1BLEVBQ2xHRCxDQUNYLEVBRVd1b0MsR0FBd0IsT0FBVyxLQUFxQixHQUFtQixHQUFxQixDQUFDLHlCQUEwQiw4R0FBK0cseUVBQTBFLDhCQUErQixDQUFDLHlCQUEwQiw4R0FBK0cseUVBQTBFLGlDQUFpQyxTQUFVaDVDLEdBRXpsQixPQURZQSxFQUFHa1AsTUFDRjRCLE9BQU9FLEtBQ3hCLElBQUcsU0FBVWhSLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0YvNUMsTUFBTSxFQUN2QixJQUFHLFNBQVU2cUMsR0FFVCxPQURZQSxFQUFHa1AsTUFDRjk1QyxPQUFPLEVBQ3hCLElBQ1c2akYsR0FBNEIsT0FBVyxLQUFxQixHQUFtQixHQUFxQixDQUFDLGVBQWdCLG1DQUFvQyxpR0FBa0csU0FBVSxDQUFDLGVBQWdCLG1DQUFvQyxpR0FBa0csWUFBWSxTQUFVajVDLEdBRXpiLE9BRFlBLEVBQUdrUCxNQUNGOTVDLE9BQU8sRUFDeEIsSUFBRyxTQUFVNHFDLEdBRVQsT0FEWUEsRUFBR2tQLE1BQ0Y0QixPQUFPQyxLQUN4QixJQUFHLFNBQVUvUSxHQUVULE9BRFlBLEVBQUdrUCxNQUNGbHdDLFFBQVEsRUFDekIsSXlCeEJJLEdBQXNDLFdBU3RDLE9BUkEsR0FBV25qQixPQUFPb3JCLFFBQVUsU0FBU25tQixHQUNqQyxJQUFLLElBQUk4ZCxFQUFHa0MsRUFBSSxFQUFHalYsRUFBSXJOLFVBQVU5QixPQUFRb2tCLEVBQUlqVixFQUFHaVYsSUFFNUMsSUFBSyxJQUFJM1UsS0FEVHlTLEVBQUlwZ0IsVUFBVXNpQixHQUNPamxCLE9BQU9PLFVBQVVnSSxlQUFlL0YsS0FBS3VnQixFQUFHelMsS0FDekRyTCxFQUFFcUwsR0FBS3lTLEVBQUV6UyxJQUVqQixPQUFPckwsQ0FDWCxFQUNPLEdBQVN4QyxNQUFNeEIsS0FBTTBCLFVBQ2hDLEVBT1dzNkYsR0FBaUIsU0FBVTk0QyxHQUNsQyxJQUFJZ1UsRUFDQStrQyxFQUFvQi80QyxFQUFHKzRDLGtCQUN2QnB4RCxFQUFXLElBQ1h1eEQsRUFBMEIsRUFBWWpHLElBQ3RDa0csRUFBbUIsRUFBWWpHLElBQy9Ca0csRUFBbUIsU0FBVUMsR0FBYyxPQUFPLFdBQ2xEMXhELEVBQVNnbUQsR0FBZTBMLElBQ3hCLElBQUlobEMsRUFBWWdsQyxFQUFXaGxDLFVBQVdELEVBQVdpbEMsRUFBV2psQyxTQUM1RHpzQixFQUFTb3NCLEdBQVksQ0FDakJRLElBQUtGLEVBQ0xDLElBQUtGLEtBRVQya0MsR0FDSixDQUFHLEVBQ0gsT0FBSUcsSUFBNEJ2b0MsR0FBZTY3QixTQUNuQyxTQUFLd00sR0FBdUIsQ0FBRWp3RSxVQUFVLFNBQUttdEUsR0FBUyxDQUFFLGVBQWdCLHNCQUF1QnBtRCxLQUFNaWlCLEdBQWFva0MsV0FFdEgsU0FBSzZDLEdBQXVCLEdBQVMsQ0FBRSxlQUFnQiw4QkFBZ0MsQ0FBRWp3RSxTQUFrSCxRQUF2R2lyQyxFQUFLbWxDLGFBQTJELEVBQVNBLEVBQWlCaDBCLGVBQTRCLElBQVBuUixPQUFnQixFQUFTQSxFQUFHM1ksS0FBSSxTQUFVZytDLEdBQzdQLElBQUlsbEYsRUFBS2tsRixFQUFXbGxGLEdBQUluVSxFQUFPcTVGLEVBQVdyNUYsS0FBTXM1RixFQUFVRCxFQUFXQyxRQUFTQyxFQUFjRixFQUFXRyxhQUN2RyxPQUFRLFVBQU1QLEdBQTJCLENBQUVsd0UsU0FBVSxFQUFDLFVBQU0sSUFBSyxDQUFFQSxTQUFVLENBQUMvb0IsRUFBTSxLQUFNczVGLEVBQVMsS0FBTUMsTUFBaUIsU0FBS25vQyxHQUFRLEdBQVMsQ0FBRSxlQUFnQixxQkFBc0J4aEIsUUFBU3dwRCxFQUFpQkMsSUFBZSxDQUFFdHdFLFNBQVUsY0FBaUI1VSxFQUNsUSxNQUNSLEV4QnZDSSxHQUE4RCxTQUFVczhDLEVBQVFDLEdBRWhGLE9BREk3MEQsT0FBT0UsZUFBa0JGLE9BQU9FLGVBQWUwMEQsRUFBUSxNQUFPLENBQUVwMEQsTUFBT3EwRCxJQUFpQkQsRUFBT0MsSUFBTUEsRUFDbEdELENBQ1gsRUFFV2dwQyxHQUFlLE9BQVcsS0FBcUIsR0FBbUIsR0FBcUIsQ0FBQyxnRUFBaUUsa0JBQW1CLFNBQVUsQ0FBQyxnRUFBaUUsa0JBQW1CLFlBQVksU0FBVXo1QyxHQUV4UyxPQURXQSxFQUFHbFEsSUFFbEIsSUFBRyxTQUFVa1EsR0FFVCxPQURXQSxFQUFHbFEsSUFFbEIsSUFDVzRwRCxHQUFpQixPQUFXLEtBQXFCLEdBQW1CLEdBQXFCLENBQUMsd0tBQXlLLENBQUMsMkt5QlozUSxHQUFzQyxXQVN0QyxPQVJBLEdBQVc3OUYsT0FBT29yQixRQUFVLFNBQVNubUIsR0FDakMsSUFBSyxJQUFJOGQsRUFBR2tDLEVBQUksRUFBR2pWLEVBQUlyTixVQUFVOUIsT0FBUW9rQixFQUFJalYsRUFBR2lWLElBRTVDLElBQUssSUFBSTNVLEtBRFR5UyxFQUFJcGdCLFVBQVVzaUIsR0FDT2psQixPQUFPTyxVQUFVZ0ksZUFBZS9GLEtBQUt1Z0IsRUFBR3pTLEtBQ3pEckwsRUFBRXFMLEdBQUt5UyxFQUFFelMsSUFFakIsT0FBT3JMLENBQ1gsRUFDTyxHQUFTeEMsTUFBTXhCLEtBQU0wQixVQUNoQyxFQWVXMDNGLEdBQVUsU0FBVWwyQyxHQUMzQixJQUFJbFEsRUFBT2tRLEVBQUdsUSxLQUFNL0wsRUFmYyxTQUFVbmxCLEVBQUcxaEIsR0FDL0MsSUFBSTRELEVBQUksQ0FBQyxFQUNULElBQUssSUFBSXFMLEtBQUt5UyxFQUFPL2lCLE9BQU9PLFVBQVVnSSxlQUFlL0YsS0FBS3VnQixFQUFHelMsSUFBTWpQLEVBQUU0QixRQUFRcU4sR0FBSyxJQUM5RXJMLEVBQUVxTCxHQUFLeVMsRUFBRXpTLElBQ2IsR0FBUyxNQUFMeVMsR0FBcUQsbUJBQWpDL2lCLE9BQU84bkIsc0JBQ3RCLEtBQUk3QyxFQUFJLEVBQWIsSUFBZ0IzVSxFQUFJdFEsT0FBTzhuQixzQkFBc0IvRSxHQUFJa0MsRUFBSTNVLEVBQUV6UCxPQUFRb2tCLElBQzNENWpCLEVBQUU0QixRQUFRcU4sRUFBRTJVLElBQU0sR0FBS2psQixPQUFPTyxVQUFVeWdELHFCQUFxQngrQyxLQUFLdWdCLEVBQUd6UyxFQUFFMlUsTUFDdkVoZ0IsRUFBRXFMLEVBQUUyVSxJQUFNbEMsRUFBRXpTLEVBQUUyVSxJQUY0QixDQUl0RCxPQUFPaGdCLENBQ1gsQ0FLZ0MsQ0FBT2svQyxFQUFJLENBQUMsU0FDeEMsT0FBUSxTQUFLMDVDLEdBQWdCLEdBQVMsQ0FBRSxlQUFnQixtQkFBcUIzMUQsRUFBTyxDQUFFaGIsVUFBVSxTQUFLMHdFLEdBQWMsQ0FBRXpyRixJQUFLMnJGLEdBQWE3cEQsS0FBTUEsRUFBTWduRCxJQUFLLFVBQVdDLE1BQU8sY0FDOUssRXhCNUJJLEdBQThELFNBQVV0bUMsRUFBUUMsR0FFaEYsT0FESTcwRCxPQUFPRSxlQUFrQkYsT0FBT0UsZUFBZTAwRCxFQUFRLE1BQU8sQ0FBRXAwRCxNQUFPcTBELElBQWlCRCxFQUFPQyxJQUFNQSxFQUNsR0QsQ0FDWCxFQUVXbXBDLEdBQXNCLE9BQVcsS0FBcUIsR0FBbUIsR0FBcUIsQ0FBQyw4S0FBK0ssQ0FBQyxpTEFDL1FDLEdBQW1CLEtBQVMsS0FBcUIsR0FBbUIsR0FBcUIsQ0FBQyxrQkFBbUIsZ0NBQWlDLENBQUMsa0JBQW1CLG1DQUFtQyxTQUFVNzVDLEdBRXROLE9BRFlBLEVBQUdrUCxNQUNGNXZDLFNBQVMsRUFDMUIsSUFDV3c2RSxHQUFvQixPQUFXLEtBQXFCLEdBQW1CLEdBQXFCLENBQUMsK0JBQWdDLENBQUMsa0N5QlZySSxHQUFzQyxXQVN0QyxPQVJBLEdBQVdqK0YsT0FBT29yQixRQUFVLFNBQVNubUIsR0FDakMsSUFBSyxJQUFJOGQsRUFBR2tDLEVBQUksRUFBR2pWLEVBQUlyTixVQUFVOUIsT0FBUW9rQixFQUFJalYsRUFBR2lWLElBRTVDLElBQUssSUFBSTNVLEtBRFR5UyxFQUFJcGdCLFVBQVVzaUIsR0FDT2psQixPQUFPTyxVQUFVZ0ksZUFBZS9GLEtBQUt1Z0IsRUFBR3pTLEtBQ3pEckwsRUFBRXFMLEdBQUt5UyxFQUFFelMsSUFFakIsT0FBT3JMLENBQ1gsRUFDTyxHQUFTeEMsTUFBTXhCLEtBQU0wQixVQUNoQyxFQUlXZzZGLEdBQWUsV0FDdEIsSUFBSXg0QyxFQ1JxQixXQUN6QixJQUFJclksRUFBVyxJQUNYZ25ELEVBQWUsRUFBWThFLElBQzNCc0csRUFBNEIsRUFBWXJHLElBQ3hDdUMsRUFBbUIsRUFBWXpDLElBQy9CcndGLEVBQVcyd0QsS0FBcUIzd0QsU0FXcEMsT0FWQSxJQUFBOG1DLFlBQVUsV0FDVyxPQUFiOW1DLEdBQ0F3a0MsRUFBU29zQixHQUFZNXdELEdBRTdCLEdBQUcsQ0FBQ0EsS0FDSixJQUFBOG1DLFlBQVUsV0FDbUIsT0FBckJnc0QsR0FDQXR1RCxFQUFTeWtELEdBQWtCNkosR0FFbkMsR0FBRyxDQUFDQSxJQUNxQixPQUFyQkEsRUFDTyxDQUNIdEgsYUFBY0EsRUFDZHFMLGdCQUFnQixTQUFLLElBQUssQ0FBRWp4RSxTQUFVLGlFQUcxQ2d4RSxJQUE4QnBwQyxHQUFlNjdCLFFBQ3RDLENBQ0htQyxhQUFjQSxFQUNkcUwsZ0JBQWdCLFNBQUs5RCxHQUFTLENBQUVwbUQsS0FBTWlpQixHQUFhb2tDLFNBR3BELENBQUV4SCxhQUFjQSxFQUFjcUwsZUFBZ0IsS0FDekQsQ0RyQmFDLEdBQW1CdEwsRUFBZTN1QyxFQUFHMnVDLGFBQWNxTCxFQUFpQmg2QyxFQUFHZzZDLGVBQ2hGLEdBQXVCLE9BQW5CQSxFQUNBLE9BQU8sU0FBS0osR0FBcUIsR0FBUyxDQUFFLGVBQWdCLGlDQUFtQyxDQUFFN3dFLFNBQVVpeEUsS0FFL0csR0FBcUIsT0FBakJyTCxFQUNBLE9BQU8sS0FFWCxJQUFJMUMsRUFBVTBDLEVBQWExQyxRQUFTaU8sRUFBT3ZMLEVBQWF1TCxLQUFNbDZGLEVBQU8ydUYsRUFBYTN1RixLQUM5RWcwRCxFQUFLaTRCLEVBQVEsR0FBSXQ1QixFQUFPcUIsRUFBR3JCLEtBQU1DLEVBQWNvQixFQUFHcEIsWUFDbER1bkMsRUFBWUQsRUFBS0UsV0FBWUMsRUFBT0gsRUFBS0csS0FDN0MsT0FBUSxVQUFNVCxHQUFxQixHQUFTLENBQUUsZUFBZ0IseUJBQTJCLENBQUU3d0UsU0FBVSxFQUFDLFNBQUs4d0UsR0FBa0IsR0FBUyxDQUFFLGVBQWdCLHVCQUF5QixDQUFFOXdFLFNBQVUsWUFBYSxTQUFLOHdFLEdBQWtCLEdBQVMsQ0FBRSxlQUFnQixzQkFBd0IsQ0FBRTl3RSxTQUFVL29CLE1BQVUsU0FBSzg1RixHQUFtQixDQUFFLGVBQWdCLHNCQUF1QjlyRixJQUFLLHFDQUFxQ3hGLE9BQU9tcUQsRUFBTSxXQUFZbWtDLElBQUtsa0MsRUFBYW1rQyxNQUFPbmtDLEtBQWdCLFNBQUtpbkMsR0FBa0IsQ0FBRTl3RSxTQUFVNnBDLEtBQWdCLFVBQU1pbkMsR0FBa0IsQ0FBRTl3RSxTQUFVLENBQUNzeEUsRUFBS0MsUUFBUSxHQUFJLFFBQWMsVUFBTVQsR0FBa0IsQ0FBRTl3RSxTQUFVLENBQUMsY0FBZW94RSxFQUFVRyxRQUFRLEdBQUksVUFDNXBCLEV4QnJCV0MsRzdITG95c0IsU0FBWXI5RixHQUFHLElBQUksSUFBSTRELEVBQUV0QyxVQUFVOUIsT0FBT21QLEVBQUUsSUFBSTFQLE1BQU0yRSxFQUFFLEVBQUVBLEVBQUUsRUFBRSxHQUFHNlMsRUFBRSxFQUFFQSxFQUFFN1MsRUFBRTZTLElBQUk5SCxFQUFFOEgsRUFBRSxHQUFHblYsVUFBVW1WLEdBQUcsSUFBSW1OLEVBQUVPLEdBQUcvaUIsV0FBTSxFQUFPLENBQUNwQixHQUFHc0wsT0FBT3FELElBQUk3UCxFQUFFLGFBQWEra0IsR0FBR3hULEtBQUtxRixVQUFVa08sSUFBSXJZLEVBQUUsSUFBSXV3QixHQUFHbFksRUFBRTlrQixHQUFHLFNBQVM0UCxFQUFFMU8sR0FBRyxJQUFJNEQsRUFBRWliLEtBQUtsUSxFQUFFMFMsS0FBSzVLLEdBQUUsZ0JBQUV3N0MsSUFBSXZqRCxHQUFFLFlBQUU5SyxFQUFFZ3RELG1CQUFtQjl4RCxJQUFJMnhCLFFBQVEsT0FBeW9CN3NCLEVBQUU2c0QsUUFBUXp1RCxFQUFFME0sRUFBRTFPLEVBQUU0RCxFQUFFNlMsRUFBRTlILElBQUcsc0JBQUUsV0FBWSxJQUFJL0ssRUFBRTZzRCxPQUFPLE9BQU96dUQsRUFBRTBNLEVBQUUxTyxFQUFFNEQsRUFBRTZTLEVBQUU5SCxHQUFHLFdBQVcsT0FBT3BELEVBQUVzbkQsYUFBYW5rRCxFQUFFOUssRUFBRSxDQUFFLEdBQUUsQ0FBQzhLLEVBQUUxTyxFQUFFNEQsRUFBRTZTLEVBQUU5SCxJQUFJLElBQUksQ0FBQyxTQUFTM00sRUFBRWhDLEVBQUU0RCxFQUFFK0ssRUFBRTNELEVBQUV5TCxHQUFHLEdBQUdsTCxFQUFFNGxELFNBQVM1bEQsRUFBRXVuRCxhQUFhOXlELEVBQUVxTCxFQUFFc0QsRUFBRThILE9BQU8sQ0FBQyxJQUFJaUwsRUFBRXRkLEVBQUUsQ0FBQyxFQUFFUixFQUFFLENBQUNvdUQsTUFBTWgzQixHQUFHcDNCLEVBQUVvSCxFQUFFMEQsRUFBRTRXLGdCQUFnQi9aLEVBQUV1bkQsYUFBYTl5RCxFQUFFMGhCLEVBQUUvUyxFQUFFOEgsRUFBRSxDQUFDLENBQUMsT0FBaUQsT0FBTy9ILEVBQUUsQzZIS3QrdUIsQ0FBa0IsS0FBcUIsR0FMQyxTQUFVNmtELEVBQVFDLEdBRWhGLE9BREk3MEQsT0FBT0UsZUFBa0JGLE9BQU9FLGVBQWUwMEQsRUFBUSxNQUFPLENBQUVwMEQsTUFBT3EwRCxJQUFpQkQsRUFBT0MsSUFBTUEsRUFDbEdELENBQ1gsQ0FFb0YsQ0FBcUIsQ0FBQyxnakJBQW1qQixDQUFDLG1qQjBCZ0JucEJ2QixHQUFRLENBQ2Y0QixPQXRCZ0IsQ0FDaEJFLE1BQU8sVUFDUG1uQyxpQkFBa0IsMkJBQ2xCdEQsS0FBTSxvQkFDTjlqQyxNQUFPLFVBQ1BHLFdBQVksV0FrQlpMLGFBaEJzQixDQUFDLEVBQUcsR0FBSSxJQWlCOUIxN0MsTUFoQmUsQ0FBQyxHQUFJLEtBQU0sSUFBSyxJQWlCL0JDLE9BaEJnQixDQUFDLEdBQUksSUFBSyxJQUFLLEdBQUksSUFBSyxJQWlCeEM0SixRQWhCaUIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBaUJsQ00sU0FoQmtCLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFpQjNDdTBFLEtBaEJjLENBQUMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBaUJuQzkwRSxPQWhCZ0IsQ0FBQyxHQUFJLElBQUssS0FpQjFCbzJFLFlBWnFCLENBQ3JCQyxHQUFJLEtBWUpnRCxLQWpCYyxDQUFDLEtBa0JmeG9FLFdBakJvQixDQUNwQnFoQyxNQUFPLGtCQ2hCUCxHQUFzQyxXQVN0QyxPQVJBLEdBQVdwMUQsT0FBT29yQixRQUFVLFNBQVNubUIsR0FDakMsSUFBSyxJQUFJOGQsRUFBR2tDLEVBQUksRUFBR2pWLEVBQUlyTixVQUFVOUIsT0FBUW9rQixFQUFJalYsRUFBR2lWLElBRTVDLElBQUssSUFBSTNVLEtBRFR5UyxFQUFJcGdCLFVBQVVzaUIsR0FDT2psQixPQUFPTyxVQUFVZ0ksZUFBZS9GLEtBQUt1Z0IsRUFBR3pTLEtBQ3pEckwsRUFBRXFMLEdBQUt5UyxFQUFFelMsSUFFakIsT0FBT3JMLENBQ1gsRUFDTyxHQUFTeEMsTUFBTXhCLEtBQU0wQixVQUNoQyxFQ1ZJLEdBQXNDLFdBU3RDLE9BUkEsR0FBVzNDLE9BQU9vckIsUUFBVSxTQUFTbm1CLEdBQ2pDLElBQUssSUFBSThkLEVBQUdrQyxFQUFJLEVBQUdqVixFQUFJck4sVUFBVTlCLE9BQVFva0IsRUFBSWpWLEVBQUdpVixJQUU1QyxJQUFLLElBQUkzVSxLQURUeVMsRUFBSXBnQixVQUFVc2lCLEdBQ09qbEIsT0FBT08sVUFBVWdJLGVBQWUvRixLQUFLdWdCLEVBQUd6UyxLQUN6RHJMLEVBQUVxTCxHQUFLeVMsRUFBRXpTLElBRWpCLE9BQU9yTCxDQUNYLEVBQ08sR0FBU3hDLE1BQU14QixLQUFNMEIsVUFDaEMsRUFRSWc4RixHQUFZOTNGLFNBQVN1WCxlQUFlLFFBQ3hDLEdBQWtCLE9BQWR1Z0YsR0FDQSxNQUFNLElBQUk1OUYsTUFBTSxnQ0FFVCxPQUFXNDlGLElBQ2pCMytFLFFBQU8sVUNsQlosVUFBa0IsTUFDaEJ5c0MsRUFBSyxRQUNMdm5CLEVBQU8sU0FDUGhZLEVBQVEsWUFDUjB4RSxJQUVBLE1BQU1DLEdBQWUsSUFBQXJ3RCxVQUFRLEtBQzNCLE1BQU1rZSxFcktpRUgsU0FBNEJELEVBQU9xeUMsR0FDeEMsSUFBSWhqQyxFQUNBbmlDLEVBQVlvekIsRUFXaEIsU0FBU2d5QyxJQUNIcnlDLEVBQWFzeUMsZUFDZnR5QyxFQUFhc3lDLGVBRWpCLENBTUEsU0FBU0MsSUFDRm5qQyxJQUNIQSxFQUFjZ2pDLEVBQVlBLEVBQVVqeUMsYUFBYWt5QyxHQUF1QnR5QyxFQUFNMEMsVUFBVTR2QyxHQUN4RnBsRSxFQW5HTixXQUNFLE1BQU11eUIsRUFBUUMsSUFDZCxJQUFJODFCLEVBQVEsS0FDUjV1QyxFQUFPLEtBQ1gsTUFBTyxDQUNMNXVCLFFBQ0V3OUQsRUFBUSxLQUNSNXVDLEVBQU8sSUFDVCxFQUVBMlosU0FDRWQsR0FBTSxLQUNKLElBQUlsdUIsRUFBV2lrRCxFQUVmLEtBQU9qa0QsR0FDTEEsRUFBU3J1QixXQUNUcXVCLEVBQVdBLEVBQVNoOEIsSUFDdEIsR0FFSixFQUVBZ3FCLE1BQ0UsSUFBSTJOLEVBQVksR0FDWnFFLEVBQVdpa0QsRUFFZixLQUFPamtELEdBQ0xyRSxFQUFVL3hCLEtBQUtvMkIsR0FDZkEsRUFBV0EsRUFBU2g4QixLQUd0QixPQUFPMjNCLENBQ1QsRUFFQXcxQixVQUFVeC9DLEdBQ1IsSUFBSTJyRCxHQUFlLEVBQ2Z0OUIsRUFBV3FWLEVBQU8sQ0FDcEIxakMsV0FDQTNOLEtBQU0sS0FDTms5RixLQUFNN3JELEdBU1IsT0FOSXJWLEVBQVNraEUsS0FDWGxoRSxFQUFTa2hFLEtBQUtsOUYsS0FBT2c4QixFQUVyQmlrRCxFQUFRamtELEVBR0gsV0FDQXM5QixHQUEwQixPQUFWMm1CLElBQ3JCM21CLEdBQWUsRUFFWHQ5QixFQUFTaDhCLEtBQ1hnOEIsRUFBU2g4QixLQUFLazlGLEtBQU9saEUsRUFBU2toRSxLQUU5QjdyRCxFQUFPclYsRUFBU2toRSxLQUdkbGhFLEVBQVNraEUsS0FDWGxoRSxFQUFTa2hFLEtBQUtsOUYsS0FBT2c4QixFQUFTaDhCLEtBRTlCaWdGLEVBQVFqa0QsRUFBU2g4QixLQUVyQixDQUNGLEVBR0osQ0FpQ2tCbTlGLEdBRWhCLENBV0EsTUFBTXp5QyxFQUFlLENBQ25CRyxhQXBDRixTQUFzQjd1QixHQUVwQixPQURBaWhFLElBQ090bEUsRUFBVXcxQixVQUFVbnhCLEVBQzdCLEVBa0NFb2hFLGlCQWhDRixXQUNFemxFLEVBQVVxekIsUUFDWixFQStCRSt4QyxzQkFDQXpqQyxhQXhCRixXQUNFLE9BQU9qTCxRQUFReUwsRUFDakIsRUF1QkVtakMsZUFDQUksZUFmRixXQUNNdmpDLElBQ0ZBLElBQ0FBLE9BQWNsWCxFQUNkanJCLEVBQVVsVixRQUNWa1YsRUFBWW96QixFQUVoQixFQVNFdXlDLGFBQWMsSUFBTTNsRSxHQUV0QixPQUFPK3lCLENBQ1QsQ3FLbEh5QixDQUFtQkQsR0FDeEMsTUFBTyxDQUNMQSxRQUNBQyxlQUNBQyxlQUFnQml5QyxFQUFjLElBQU1BLE9BQWNoNkMsRUFDbkQsR0FDQSxDQUFDNkgsRUFBT215QyxJQUNMMTdCLEdBQWdCLElBQUExMEIsVUFBUSxJQUFNaWUsRUFBTUssWUFBWSxDQUFDTCxJQUN2RCxHQUEwQixLQUN4QixNQUFNLGFBQ0pDLEdBQ0VteUMsRUFRSixPQVBBbnlDLEVBQWFzeUMsY0FBZ0J0eUMsRUFBYTB5QyxpQkFDMUMxeUMsRUFBYXV5QyxlQUVULzdCLElBQWtCelcsRUFBTUssWUFDMUJKLEVBQWEweUMsbUJBR1IsS0FDTDF5QyxFQUFhMnlDLGlCQUNiM3lDLEVBQWFzeUMsbUJBQWdCcDZDLENBQVMsQ0FDdkMsR0FDQSxDQUFDaTZDLEVBQWMzN0IsSUFDbEIsTUFBTXE4QixFQUFVcjZELEdBQVcsRUFFM0IsT0FBb0IsZ0JBQW9CcTZELEVBQVF0L0MsU0FBVSxDQUN4RHovQyxNQUFPcStGLEdBQ04zeEUsRUFDTCxHRGxCMkIsR0FBUyxDQUFFdS9CLE1BQU9BLElBQVMsQ0FBRXYvQixVQUFVLFNBQUs4Z0MsRUFBYSxHQUFTLENBQUVxQixRQUFTLEtBQU1WLFVBQVdBLElBQWEsQ0FBRXpoQyxVQUFVLFNBQUs2c0UsR0FBZSxDQUFFN3NFLFVBQVUsVURSakssV0FDYixPQUFRLFVBQU0sR0FBZSxHQUFTLENBQUVtbUMsTUFBT0EsSUFBUyxDQUFFbm1DLFNBQVUsRUFBQyxTQUFLd3hFLEdBQWMsQ0FBQyxJQUFJLFNBQUtqQyxHQUFNLENBQUMsTUFDN0csR0NNNEwsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZ2FwaS1zY3JpcHQvZ2FwaVNjcmlwdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlZHV4LWRlZXAtcGVyc2lzdC9saWIvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVkdXgtZGVlcC1wZXJzaXN0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlZHV4LWRlZXAtcGVyc2lzdC9saWIvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWR1eC1kZWVwLXBlcnNpc3QvbGliL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVkdXgtcGVyc2lzdC9saWIvc3RvcmFnZS9jcmVhdGVXZWJTdG9yYWdlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVkdXgtcGVyc2lzdC9saWIvc3RvcmFnZS9nZXRTdG9yYWdlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVkdXgtcGVyc2lzdC9saWIvc3RvcmFnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc2hhbGxvd2VxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vd2l0aC1zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVJlZHV4Q29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlU3luY0V4dGVybmFsU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VEaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlZHV4LXBlcnNpc3QvZXMvaW50ZWdyYXRpb24vcmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxpcy9kaXN0L3N0eWxpcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvZW1vdGlvbi1tZW1vaXplLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9lbW90aW9uLWlzLXByb3AtdmFsaWQuZXNtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvZGlzdC9zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0J1dHRvbi9zdHlsZWQudHMiLCJ3ZWJwYWNrOi8vLy4vY29uc3RhbnRzL2xvYWRpbmdTdGF0dXMudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9CdXR0b24vYnV0dG9uLmNvbXBvbmVudC50c3giLCJ3ZWJwYWNrOi8vLy4vY29uc3RhbnRzL2NhbGVuZGFyQXBpQ29uZmlnLnRzIiwid2VicGFjazovLy8uL2NvbnN0YW50cy9jYWxlbmRhckV2ZW50c0NvbmZpZy50cyIsIndlYnBhY2s6Ly8vLi9jb25zdGFudHMvbG9jYWxlT3B0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9jb25zdGFudHMvc3Bpbm5lclNpemUudHMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2JhY2tncm91bmRzL2NsZWFyLXNreS1iYWNrZ3JvdW5kLmpwZyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvYmFja2dyb3VuZHMvZmV3LdGBbG91ZHMtYmFja2dyb3VuZC5qcGciLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2JhY2tncm91bmRzL21pc3QtYmFja2dyb3VuZC5qcGciLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2JhY2tncm91bmRzL3JhaW4tYmFja2dyb3VuZC5qcGciLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2JhY2tncm91bmRzL3Nob3dlci1yYWluLWJhY2tncm91bmQuanBnIiwid2VicGFjazovLy8uL2Fzc2V0cy9iYWNrZ3JvdW5kcy9zbm93LWJhY2tncm91bmQuanBnIiwid2VicGFjazovLy8uL2Fzc2V0cy9iYWNrZ3JvdW5kcy90aHVuZGVyc3Rvcm0tYmFja2dyb3VuZC5qcGciLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2ljb25zL2NsZWFyLXNreS1kYXkucG5nIiwid2VicGFjazovLy8uL2Fzc2V0cy9pY29ucy9icm9rZW4tY2xvdWRzLnBuZyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvaWNvbnMvZmV3LWNsb3Vkcy1kYXkucG5nIiwid2VicGFjazovLy8uL2Fzc2V0cy9pY29ucy9jbGVhci1za3ktbmlnaHQucG5nIiwid2VicGFjazovLy8uL2Fzc2V0cy9pY29ucy9taXN0LnBuZyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvaWNvbnMvZmV3LWNsb3Vkcy1uaWdodC5wbmciLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2ljb25zL3JhaW4tZGF5LnBuZyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvaWNvbnMvc2hvd2VyLXJhaW4ucG5nIiwid2VicGFjazovLy8uL2Fzc2V0cy9pY29ucy9yYWluLW5pZ2h0LnBuZyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvaWNvbnMvc2NhdHRlcmVkLWNsb3Vkcy1kYXkucG5nIiwid2VicGFjazovLy8uL2Fzc2V0cy9pY29ucy9zY2F0dGVyZWQtY2xvdWRzLW5pZ2h0LnBuZyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvaWNvbnMvc25vdy5wbmciLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2ljb25zL3NwaW5uZXIuZ2lmIiwid2VicGFjazovLy8uL2Fzc2V0cy9pY29ucy90aHVuZGVyc3Rvcm0ucG5nIiwid2VicGFjazovLy8uL2NvbnN0YW50cy93ZWF0aGVyU3RhdHVzZXMudHMiLCJ3ZWJwYWNrOi8vLy4vaG9va3MvdXNlQ2FsZW5kYXIudHMiLCJ3ZWJwYWNrOi8vLy4vaG9va3MvdXNlQ3VycmVudExvY2F0aW9uLnRzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVkdXgtcGVyc2lzdC9lcy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWR1eC1wZXJzaXN0L2VzL3N0YXRlUmVjb25jaWxlci9hdXRvTWVyZ2VMZXZlbDEuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWR1eC1wZXJzaXN0L2VzL2NyZWF0ZVBlcnNpc3RvaWQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWR1eC1wZXJzaXN0L2VzL2dldFN0b3JlZFN0YXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVkdXgtcGVyc2lzdC9lcy9wdXJnZVN0b3JlZFN0YXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVkdXgtcGVyc2lzdC9lcy9wZXJzaXN0UmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Qcm9wZXJ0eUtleS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvUHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVkdXgtcGVyc2lzdC9lcy9wZXJzaXN0U3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9pbW1lci9kaXN0L2ltbWVyLmVzbS5tanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvZGlzdC9yZWR1eC10b29sa2l0LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0ByZWR1eC1zYWdhL3N5bWJvbHMvZGlzdC9yZWR1eC1zYWdhLXN5bWJvbHMuZXNtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0ByZWR1eC1zYWdhL2lzL2Rpc3QvcmVkdXgtc2FnYS1pcy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AcmVkdXgtc2FnYS9jb3JlL2Rpc3QvaW8tYzM3OTI5NjMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AcmVkdXgtc2FnYS9kZWZlcnJlZC9kaXN0L3JlZHV4LXNhZ2EtZGVmZXJyZWQuZXNtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHJlZHV4LXNhZ2EvY29yZS9kaXN0L3JlZHV4LXNhZ2EtY29yZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2Rpc3QvcmVkdXgtc2FnYS1jb3JlLW5wbS1wcm94eS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHJlZHV4LXNhZ2EvY29yZS9kaXN0L3JlZHV4LXNhZ2EtZWZmZWN0cy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9CbG9iLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcGVlZG9tZXRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvYWRhcHRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9udWxsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9hcGkvb3Blbm1ldGVvLmFwaS50cyIsIndlYnBhY2s6Ly8vLi9zdG9yZS9zbGljZXMvdG9kYXl3ZWF0aGVyLnNsaWNlLnRzIiwid2VicGFjazovLy8uL2FwaS9vcGVud2VhdGhlci5hcGkudHMiLCJ3ZWJwYWNrOi8vLy4vc3RvcmUvc2FnYXMvdG9kYXl3ZWF0aGVyLnNhZ2EudHMiLCJ3ZWJwYWNrOi8vLy4vc3RvcmUvc2xpY2VzL2hvdXJseXdlYXRoZXIuc2xpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3RvcmUvc2FnYXMvaG91cmx5d2VhdGhlci5zYWdhLnRzIiwid2VicGFjazovLy8uL3N0b3JlL3NsaWNlcy9kYWlseXdlYXRoZXIuc2xpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3RvcmUvc2FnYXMvZGFpbHl3ZWF0aGVyLnNhZ2EudHMiLCJ3ZWJwYWNrOi8vLy4vc3RvcmUvc2xpY2VzL2NpdHkuc2xpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3RvcmUvc2FnYXMvY2l0eS5zYWdhLnRzIiwid2VicGFjazovLy8uL3N0b3JlL3NhZ2FzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3N0b3JlL3NsaWNlcy9sb2NhdGlvbi5zbGljZS50cyIsIndlYnBhY2s6Ly8vLi9zdG9yZS9zbGljZXMvZm9yZWNhc3R3ZWF0aGVyLnNsaWNlLnRzIiwid2VicGFjazovLy8uL3N0b3JlL3N0b3JlLnRzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvQ2FsZW5kYXIvc3R5bGVkLnRzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvQ2FsZW5kYXJFdmVudC9zdHlsZWQudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9DbG9jay9zdHlsZWQudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9Gb3JlY2FzdERhaWx5V2VhdGhlci9zdHlsZWQudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9Gb3JlY2FzdEhvdXJseVdlYXRoZXIvc3R5bGVkLnRzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvRm9yZWNhc3RXZWF0aGVyL3N0eWxlZC50cyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0ZvcmVjYXN0V2VhdGhlckl0ZW0vc3R5bGVkLnRzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvRm9yZWNhc3RXZWF0aGVyU3dpdGNoL3N0eWxlZC50cyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1Jvb3Qvc3R5bGVkLnRzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvU2VhcmNoQ2l0eS9zdHlsZWQudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9TZWFyY2hDaXR5TGlzdC9zdHlsZWQudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9TcGlubmVyL3N0eWxlZC50cyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1RvZGF5V2VhdGhlci9zdHlsZWQudHMiLCJ3ZWJwYWNrOi8vLy4vdGhlbWUvZ2xvYmFsU3R5bGVzLnRzIiwid2VicGFjazovLy8uL3N0b3JlL3NlbGVjdG9ycy9jaXR5LnNlbGVjdG9yLnRzIiwid2VicGFjazovLy8uL3N0b3JlL3NlbGVjdG9ycy9kYWlseXdlYXRoZXIuc2VsZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3RvcmUvc2VsZWN0b3JzL2ZvcmVjYXN0V2VhdGhlci5zZWxlY3Rvci50cyIsIndlYnBhY2s6Ly8vLi9zdG9yZS9zZWxlY3RvcnMvaG91cmx5d2VhdGhlci5zZWxlY3Rvci50cyIsIndlYnBhY2s6Ly8vLi9zdG9yZS9zZWxlY3RvcnMvbG9jYXRpb24uc2VsZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3RvcmUvc2VsZWN0b3JzL3RvZGF5d2VhdGhlci5zZWxlY3Rvci50cyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0NhbGVuZGFyL2NhbGVuZGFyLmNvbXBvbmVudC50c3giLCJ3ZWJwYWNrOi8vLy4vdXRpbHMvbG9jYWxlLnRzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvQ2FsZW5kYXJFdmVudC9jYWxlbmRhcmV2ZW50LmNvbXBvbmVudC50c3giLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9DbG9jay9jbG9jay5jb21wb25lbnQudHN4Iiwid2VicGFjazovLy8uL2hvb2tzL3VzZUN1cnJlbnREYXRlLnRzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvRXJyb3JCb3VuZGFyeS9lcnJvcmJvdW5kYXJ5LmNvbXBvbmVudC50c3giLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9Gb3JlY2FzdERhaWx5V2VhdGhlci9mb3JlYWN0ZGFpbHl3ZWF0aGVyLmNvbXBvbmVudC50c3giLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9Gb3JlY2FzdEhvdXJseVdlYXRoZXIvZm9yZWNhc3Rob3VybHl3ZWF0aGVyLmNvbXBvbmVudC50c3giLCJ3ZWJwYWNrOi8vLy4vdXRpbHMvaG91cnMudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9Gb3JlY2FzdFdlYXRoZXIvZm9yZWNhc3R3ZWF0aGVyLmNvbXBvbmVudC50c3giLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9Gb3JlY2FzdFdlYXRoZXJJdGVtL2ZvcmVjYXN0d2VhdGhlcml0ZW0uY29tcG9uZW50LnRzeCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0ZvcmVjYXN0V2VhdGhlclN3aXRjaC9mb3JlY2FzdHdlYXRoZXJzd2l0Y2guY29tcG9uZW50LnRzeCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1Jvb3Qvcm9vdC5jb21wb25lbnQudHN4Iiwid2VicGFjazovLy8uL3V0aWxzL2JhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9TZWFyY2hDaXR5L3NlYXJjaGNpdHkuY29tcG9uZW50LnRzeCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1NlYXJjaENpdHlMaXN0L3NlYXJjaGNpdHlsaXN0LmNvbXBvbmVudC50c3giLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9TcGlubmVyL3NwaW5uZXIuY29tcG9uZW50LnRzeCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1RvZGF5V2VhdGhlci90b2RheXdlYXRoZXIuY29tcG9uZW50LnRzeCIsIndlYnBhY2s6Ly8vLi9ob29rcy91c2VUb2RheVdlYXRoZXIudHN4Iiwid2VicGFjazovLy8uL3RoZW1lL3RoZW1lLnRzIiwid2VicGFjazovLy8uL0FwcC50c3giLCJ3ZWJwYWNrOi8vLy4vaW5kZXgudHN4Iiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2FwaT13aW5kb3cuZ2FwaT13aW5kb3cuZ2FwaXx8e307Z2FwaS5fYnM9bmV3IERhdGUoKS5nZXRUaW1lKCk7KGZ1bmN0aW9uKCl7LypcblxuICBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG4gdmFyIGFhPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihhLGIsYyl7aWYoYT09QXJyYXkucHJvdG90eXBlfHxhPT1PYmplY3QucHJvdG90eXBlKXJldHVybiBhO2FbYl09Yy52YWx1ZTtyZXR1cm4gYX0sZGE9ZnVuY3Rpb24oYSl7YT1bXCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbFRoaXMmJmdsb2JhbFRoaXMsYSxcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3csXCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYsXCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsXTtmb3IodmFyIGI9MDtiPGEubGVuZ3RoOysrYil7dmFyIGM9YVtiXTtpZihjJiZjLk1hdGg9PU1hdGgpcmV0dXJuIGN9dGhyb3cgRXJyb3IoXCJDYW5ub3QgZmluZCBnbG9iYWwgb2JqZWN0XCIpO30sZWE9ZGEodGhpcyksZmE9ZnVuY3Rpb24oYSxiKXtpZihiKWE6e3ZhciBjPWVhO2E9YS5zcGxpdChcIi5cIik7Zm9yKHZhciBkPTA7ZDxcbiBhLmxlbmd0aC0xO2QrKyl7dmFyIGU9YVtkXTtpZighKGUgaW4gYykpYnJlYWsgYTtjPWNbZV19YT1hW2EubGVuZ3RoLTFdO2Q9Y1thXTtiPWIoZCk7YiE9ZCYmbnVsbCE9YiYmYWEoYyxhLHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6Yn0pfX0saGE9ZnVuY3Rpb24oYSl7dmFyIGI9MDtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYjxhLmxlbmd0aD97ZG9uZTohMSx2YWx1ZTphW2IrK119Ontkb25lOiEwfX19O1xuIGZhKFwiU3ltYm9sXCIsZnVuY3Rpb24oYSl7aWYoYSlyZXR1cm4gYTt2YXIgYj1mdW5jdGlvbihlLGYpe3RoaXMuYmE9ZTthYSh0aGlzLFwiZGVzY3JpcHRpb25cIix7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmZ9KX07Yi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5iYX07dmFyIGM9MCxkPWZ1bmN0aW9uKGUpe2lmKHRoaXMgaW5zdGFuY2VvZiBkKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3JcIik7cmV0dXJuIG5ldyBiKFwianNjb21wX3N5bWJvbF9cIisoZXx8XCJcIikrXCJfXCIrYysrLGUpfTtyZXR1cm4gZH0pO1xuIGZhKFwiU3ltYm9sLml0ZXJhdG9yXCIsZnVuY3Rpb24oYSl7aWYoYSlyZXR1cm4gYTthPVN5bWJvbChcIlN5bWJvbC5pdGVyYXRvclwiKTtmb3IodmFyIGI9XCJBcnJheSBJbnQ4QXJyYXkgVWludDhBcnJheSBVaW50OENsYW1wZWRBcnJheSBJbnQxNkFycmF5IFVpbnQxNkFycmF5IEludDMyQXJyYXkgVWludDMyQXJyYXkgRmxvYXQzMkFycmF5IEZsb2F0NjRBcnJheVwiLnNwbGl0KFwiIFwiKSxjPTA7YzxiLmxlbmd0aDtjKyspe3ZhciBkPWVhW2JbY11dO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBkLnByb3RvdHlwZVthXSYmYWEoZC5wcm90b3R5cGUsYSx7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGlhKGhhKHRoaXMpKX19KX1yZXR1cm4gYX0pO1xuIHZhciBpYT1mdW5jdGlvbihhKXthPXtuZXh0OmF9O2FbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtyZXR1cm4gYX0samE9ZnVuY3Rpb24oYSxiKXthIGluc3RhbmNlb2YgU3RyaW5nJiYoYSs9XCJcIik7dmFyIGM9MCxkPSExLGU9e25leHQ6ZnVuY3Rpb24oKXtpZighZCYmYzxhLmxlbmd0aCl7dmFyIGY9YysrO3JldHVybnt2YWx1ZTpiKGYsYVtmXSksZG9uZTohMX19ZD0hMDtyZXR1cm57ZG9uZTohMCx2YWx1ZTp2b2lkIDB9fX07ZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBlfTtmYShcIkFycmF5LnByb3RvdHlwZS5rZXlzXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGE/YTpmdW5jdGlvbigpe3JldHVybiBqYSh0aGlzLGZ1bmN0aW9uKGIpe3JldHVybiBifSl9fSk7XG4gdmFyIG09dGhpc3x8c2VsZixrYT1mdW5jdGlvbihhKXt2YXIgYj10eXBlb2YgYTtyZXR1cm5cIm9iamVjdFwiIT1iP2I6YT9BcnJheS5pc0FycmF5KGEpP1wiYXJyYXlcIjpiOlwibnVsbFwifSxsYT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsYXJndW1lbnRzKX0sbWE9ZnVuY3Rpb24oYSxiLGMpe2lmKCFhKXRocm93IEVycm9yKCk7aWYoMjxhcmd1bWVudHMubGVuZ3RoKXt2YXIgZD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMik7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShlLGQpO3JldHVybiBhLmFwcGx5KGIsZSl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBhLmFwcGx5KGIsYXJndW1lbnRzKX19LG5hPWZ1bmN0aW9uKGEsYixjKXtuYT1GdW5jdGlvbi5wcm90b3R5cGUuYmluZCYmLTEhPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLnRvU3RyaW5nKCkuaW5kZXhPZihcIm5hdGl2ZSBjb2RlXCIpP1xuIGxhOm1hO3JldHVybiBuYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LG9hPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYygpe31jLnByb3RvdHlwZT1iLnByb3RvdHlwZTthLm1hPWIucHJvdG90eXBlO2EucHJvdG90eXBlPW5ldyBjO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7YS5BPWZ1bmN0aW9uKGQsZSxmKXtmb3IodmFyIGc9QXJyYXkoYXJndW1lbnRzLmxlbmd0aC0yKSxoPTI7aDxhcmd1bWVudHMubGVuZ3RoO2grKylnW2gtMl09YXJndW1lbnRzW2hdO3JldHVybiBiLnByb3RvdHlwZVtlXS5hcHBseShkLGcpfX0scGE9ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHFhPWZ1bmN0aW9uKGEpe3ZhciBiPW51bGwsYz1tLnRydXN0ZWRUeXBlcztpZighY3x8IWMuY3JlYXRlUG9saWN5KXJldHVybiBiO3RyeXtiPWMuY3JlYXRlUG9saWN5KGEse2NyZWF0ZUhUTUw6cGEsY3JlYXRlU2NyaXB0OnBhLGNyZWF0ZVNjcmlwdFVSTDpwYX0pfWNhdGNoKGQpe20uY29uc29sZSYmbS5jb25zb2xlLmVycm9yKGQubWVzc2FnZSl9cmV0dXJuIGJ9O2Z1bmN0aW9uIHEoYSl7aWYoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcyxxKTtlbHNle3ZhciBiPUVycm9yKCkuc3RhY2s7YiYmKHRoaXMuc3RhY2s9Yil9YSYmKHRoaXMubWVzc2FnZT1TdHJpbmcoYSkpfW9hKHEsRXJyb3IpO3EucHJvdG90eXBlLm5hbWU9XCJDdXN0b21FcnJvclwiO3ZhciByYT1mdW5jdGlvbihhLGIpe2E9YS5zcGxpdChcIiVzXCIpO2Zvcih2YXIgYz1cIlwiLGQ9YS5sZW5ndGgtMSxlPTA7ZTxkO2UrKyljKz1hW2VdKyhlPGIubGVuZ3RoP2JbZV06XCIlc1wiKTtxLmNhbGwodGhpcyxjK2FbZF0pfTtvYShyYSxxKTtyYS5wcm90b3R5cGUubmFtZT1cIkFzc2VydGlvbkVycm9yXCI7XG4gdmFyIHNhPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwiQXNzZXJ0aW9uIGZhaWxlZFwiO2lmKGMpe2UrPVwiOiBcIitjO3ZhciBmPWR9ZWxzZSBhJiYoZSs9XCI6IFwiK2EsZj1iKTt0aHJvdyBuZXcgcmEoXCJcIitlLGZ8fFtdKTt9LHRhPWZ1bmN0aW9uKGEsYixjKXthfHxzYShcIlwiLG51bGwsYixBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpO3JldHVybiBhfSx1YT1mdW5jdGlvbihhLGIpe3Rocm93IG5ldyByYShcIkZhaWx1cmVcIisoYT9cIjogXCIrYTpcIlwiKSxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpO30sdmE9ZnVuY3Rpb24oYSxiLGMpe1wic3RyaW5nXCIhPT10eXBlb2YgYSYmc2EoXCJFeHBlY3RlZCBzdHJpbmcgYnV0IGdvdCAlczogJXMuXCIsW2thKGEpLGFdLGIsQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpKX07dmFyIHhhPWZ1bmN0aW9uKGEsYil7YTp7dHJ5e3ZhciBjPWEmJmEub3duZXJEb2N1bWVudCxkPWMmJihjLmRlZmF1bHRWaWV3fHxjLnBhcmVudFdpbmRvdyk7ZD1kfHxtO2lmKGQuRWxlbWVudCYmZC5Mb2NhdGlvbil7dmFyIGU9ZDticmVhayBhfX1jYXRjaChnKXt9ZT1udWxsfWlmKGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBlW2JdJiYoIWF8fCEoYSBpbnN0YW5jZW9mIGVbYl0pJiYoYSBpbnN0YW5jZW9mIGUuTG9jYXRpb258fGEgaW5zdGFuY2VvZiBlLkVsZW1lbnQpKSl7ZT10eXBlb2YgYTtpZihcIm9iamVjdFwiPT1lJiZudWxsIT1hfHxcImZ1bmN0aW9uXCI9PWUpdHJ5e3ZhciBmPWEuY29uc3RydWN0b3IuZGlzcGxheU5hbWV8fGEuY29uc3RydWN0b3IubmFtZXx8T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpfWNhdGNoKGcpe2Y9XCI8b2JqZWN0IGNvdWxkIG5vdCBiZSBzdHJpbmdpZmllZD5cIn1lbHNlIGY9dm9pZCAwPT09YT9cInVuZGVmaW5lZFwiOm51bGw9PT1hP1wibnVsbFwiOlxuIHR5cGVvZiBhO3VhKFwiQXJndW1lbnQgaXMgbm90IGEgJXMgKG9yIGEgbm9uLUVsZW1lbnQsIG5vbi1Mb2NhdGlvbiBtb2NrKTsgZ290OiAlc1wiLGIsZil9cmV0dXJuIGF9O3ZhciB5YTt2YXIgdD1mdW5jdGlvbihhLGIpe3RoaXMuUD1hPT09emEmJmJ8fFwiXCI7dGhpcy5jYT1BYX07dC5wcm90b3R5cGUuSj0hMDt0LnByb3RvdHlwZS5IPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuUH07dC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIkNvbnN0e1wiK3RoaXMuUCtcIn1cIn07dmFyIEJhPWZ1bmN0aW9uKGEpe2lmKGEgaW5zdGFuY2VvZiB0JiZhLmNvbnN0cnVjdG9yPT09dCYmYS5jYT09PUFhKXJldHVybiBhLlA7dWEoXCJleHBlY3RlZCBvYmplY3Qgb2YgdHlwZSBDb25zdCwgZ290ICdcIithK1wiJ1wiKTtyZXR1cm5cInR5cGVfZXJyb3I6Q29uc3RcIn0sQWE9e30semE9e307dmFyIHY9ZnVuY3Rpb24oYSxiKXt0aGlzLk49Yj09PUNhP2E6XCJcIn07di5wcm90b3R5cGUuSj0hMDt2LnByb3RvdHlwZS5IPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuTi50b1N0cmluZygpfTt2LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiU2FmZVVybHtcIit0aGlzLk4rXCJ9XCJ9O1xuIHZhciBEYT1mdW5jdGlvbihhKXtpZihhIGluc3RhbmNlb2YgdiYmYS5jb25zdHJ1Y3Rvcj09PXYpcmV0dXJuIGEuTjt1YShcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIFNhZmVVcmwsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIitrYShhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlNhZmVVcmxcIn0sRWE9L14oPzooPzpodHRwcz98bWFpbHRvfGZ0cCk6fFteOi8/I10qKD86Wy8/I118JCkpL2ksRmE9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIHYpcmV0dXJuIGE7YT1cIm9iamVjdFwiPT10eXBlb2YgYSYmYS5KP2EuSCgpOlN0cmluZyhhKTt0YShFYS50ZXN0KGEpLFwiJXMgZG9lcyBub3QgbWF0Y2ggdGhlIHNhZmUgVVJMIHBhdHRlcm5cIixhKXx8KGE9XCJhYm91dDppbnZhbGlkI3pDbG9zdXJlelwiKTtyZXR1cm4gbmV3IHYoYSxDYSl9LENhPXt9O3ZhciB3PWZ1bmN0aW9uKGEsYixjKXt0aGlzLk09Yz09PUdhP2E6XCJcIn07dy5wcm90b3R5cGUuSj0hMDt3LnByb3RvdHlwZS5IPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuTS50b1N0cmluZygpfTt3LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiU2FmZUh0bWx7XCIrdGhpcy5NK1wifVwifTt2YXIgSGE9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIHcmJmEuY29uc3RydWN0b3I9PT13KXJldHVybiBhLk07dWEoXCJleHBlY3RlZCBvYmplY3Qgb2YgdHlwZSBTYWZlSHRtbCwgZ290ICdcIithK1wiJyBvZiB0eXBlIFwiK2thKGEpKTtyZXR1cm5cInR5cGVfZXJyb3I6U2FmZUh0bWxcIn0sR2E9e30sSWE9bmV3IHcobS50cnVzdGVkVHlwZXMmJm0udHJ1c3RlZFR5cGVzLmVtcHR5SFRNTHx8XCJcIiwwLEdhKTt2YXIgSmE9e01BVEg6ITAsU0NSSVBUOiEwLFNUWUxFOiEwLFNWRzohMCxURU1QTEFURTohMH0sS2E9ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYztyZXR1cm4gZnVuY3Rpb24oKXtifHwoYz1hKCksYj0hMCk7cmV0dXJuIGN9fShmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZG9jdW1lbnQpcmV0dXJuITE7dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Yi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTthLmFwcGVuZENoaWxkKGIpO2lmKCFhLmZpcnN0Q2hpbGQpcmV0dXJuITE7Yj1hLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZDthLmlubmVySFRNTD1IYShJYSk7cmV0dXJuIWIucGFyZW50RWxlbWVudH0pOy8qXG4gIGdhcGkubG9hZGVyLk9CSkVDVF9DUkVBVEVfVEVTVF9PVkVSUklERSAmJiovXG4gdmFyIHg9d2luZG93LHo9ZG9jdW1lbnQsTGE9eC5sb2NhdGlvbixNYT1mdW5jdGlvbigpe30sTmE9L1xcW25hdGl2ZSBjb2RlXFxdLyxBPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYVtiXT1hW2JdfHxjfSxPYT1mdW5jdGlvbihhKXtmb3IodmFyIGI9MDtiPHRoaXMubGVuZ3RoO2IrKylpZih0aGlzW2JdPT09YSlyZXR1cm4gYjtyZXR1cm4tMX0sUGE9ZnVuY3Rpb24oYSl7YT1hLnNvcnQoKTtmb3IodmFyIGI9W10sYz12b2lkIDAsZD0wO2Q8YS5sZW5ndGg7ZCsrKXt2YXIgZT1hW2RdO2UhPWMmJmIucHVzaChlKTtjPWV9cmV0dXJuIGJ9LFFhPS8mL2csUmE9LzwvZyxTYT0vPi9nLFVhPS9cIi9nLFZhPS8nL2csV2E9ZnVuY3Rpb24oYSl7cmV0dXJuIFN0cmluZyhhKS5yZXBsYWNlKFFhLFwiJmFtcDtcIikucmVwbGFjZShSYSxcIiZsdDtcIikucmVwbGFjZShTYSxcIiZndDtcIikucmVwbGFjZShVYSxcIiZxdW90O1wiKS5yZXBsYWNlKFZhLFwiJiMzOTtcIil9LEI9ZnVuY3Rpb24oKXt2YXIgYTtpZigoYT1PYmplY3QuY3JlYXRlKSYmXG4gTmEudGVzdChhKSlhPWEobnVsbCk7ZWxzZXthPXt9O2Zvcih2YXIgYiBpbiBhKWFbYl09dm9pZCAwfXJldHVybiBhfSxDPWZ1bmN0aW9uKGEsYil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGIpfSxYYT1mdW5jdGlvbihhKXtpZihOYS50ZXN0KE9iamVjdC5rZXlzKSlyZXR1cm4gT2JqZWN0LmtleXMoYSk7dmFyIGI9W10sYztmb3IoYyBpbiBhKUMoYSxjKSYmYi5wdXNoKGMpO3JldHVybiBifSxEPWZ1bmN0aW9uKGEsYil7YT1hfHx7fTtmb3IodmFyIGMgaW4gYSlDKGEsYykmJihiW2NdPWFbY10pfSxZYT1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXt4LnNldFRpbWVvdXQoYSwwKX19LEU9ZnVuY3Rpb24oYSxiKXtpZighYSl0aHJvdyBFcnJvcihifHxcIlwiKTt9LEY9QSh4LFwiZ2FwaVwiLHt9KTt2YXIgSD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9bmV3IFJlZ0V4cChcIihbI10uKiZ8WyNdKVwiK2IrXCI9KFteJiNdKilcIixcImdcIik7Yj1uZXcgUmVnRXhwKFwiKFs/I10uKiZ8Wz8jXSlcIitiK1wiPShbXiYjXSopXCIsXCJnXCIpO2lmKGE9YSYmKGQuZXhlYyhhKXx8Yi5leGVjKGEpKSl0cnl7Yz1kZWNvZGVVUklDb21wb25lbnQoYVsyXSl9Y2F0Y2goZSl7fXJldHVybiBjfSxaYT1uZXcgUmVnRXhwKC9eLy5zb3VyY2UrLyhbYS16QS1aXVstKy5hLXpBLVowLTldKjopPy8uc291cmNlKy8oXFwvXFwvW15cXC8/I10qKT8vLnNvdXJjZSsvKFtePyNdKik/Ly5zb3VyY2UrLyhcXD8oW14jXSopKT8vLnNvdXJjZSsvKCMoKCN8W14jXSkqKSk/Ly5zb3VyY2UrLyQvLnNvdXJjZSksJGE9L1tcXHVkODAwLVxcdWRiZmZdW1xcdWRjMDAtXFx1ZGZmZl18W14hLX5dL2csYWI9bmV3IFJlZ0V4cCgvKCUoW14wLTlhLWZBLUYlXXxbMC05YS1mQS1GXShbXjAtOWEtZkEtRiVdKT8pPykqLy5zb3VyY2UrLyUoJHxbXjAtOWEtZkEtRl18WzAtOWEtZkEtRl0oJHxbXjAtOWEtZkEtRl0pKS8uc291cmNlLFxuIFwiZ1wiKSxiYj0vJShbYS1mXXxbMC05YS1mQS1GXVthLWZdKS9nLGNiPS9eKGh0dHBzP3xmdHB8ZmlsZXxjaHJvbWUtZXh0ZW5zaW9uKTokL2ksST1mdW5jdGlvbihhKXthPVN0cmluZyhhKTthPWEucmVwbGFjZSgkYSxmdW5jdGlvbihlKXt0cnl7cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChlKX1jYXRjaChmKXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGUucmVwbGFjZSgvXlteJV0rJC9nLFwiXFx1ZmZmZFwiKSl9fSkucmVwbGFjZShhYixmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC8lL2csXCIlMjVcIil9KS5yZXBsYWNlKGJiLGZ1bmN0aW9uKGUpe3JldHVybiBlLnRvVXBwZXJDYXNlKCl9KTthPWEubWF0Y2goWmEpfHxbXTt2YXIgYj1CKCksYz1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXFxcL2csXCIlNUNcIikucmVwbGFjZSgvXFxeL2csXCIlNUVcIikucmVwbGFjZSgvYC9nLFwiJTYwXCIpLnJlcGxhY2UoL1xcey9nLFwiJTdCXCIpLnJlcGxhY2UoL1xcfC9nLFwiJTdDXCIpLnJlcGxhY2UoL1xcfS9nLFxuIFwiJTdEXCIpfSxkPSEhKGFbMV18fFwiXCIpLm1hdGNoKGNiKTtiLkE9YygoYVsxXXx8XCJcIikrKGFbMl18fFwiXCIpKyhhWzNdfHwoYVsyXSYmZD9cIi9cIjpcIlwiKSkpO2Q9ZnVuY3Rpb24oZSl7cmV0dXJuIGMoZS5yZXBsYWNlKC9cXD8vZyxcIiUzRlwiKS5yZXBsYWNlKC8jL2csXCIlMjNcIikpfTtiLnF1ZXJ5PWFbNV0/W2QoYVs1XSldOltdO2IuZz1hWzddP1tkKGFbN10pXTpbXTtyZXR1cm4gYn0sZGI9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuQSsoMDxhLnF1ZXJ5Lmxlbmd0aD9cIj9cIithLnF1ZXJ5LmpvaW4oXCImXCIpOlwiXCIpKygwPGEuZy5sZW5ndGg/XCIjXCIrYS5nLmpvaW4oXCImXCIpOlwiXCIpfSxlYj1mdW5jdGlvbihhLGIpe3ZhciBjPVtdO2lmKGEpZm9yKHZhciBkIGluIGEpaWYoQyhhLGQpJiZudWxsIT1hW2RdKXt2YXIgZT1iP2IoYVtkXSk6YVtkXTtjLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGQpK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChlKSl9cmV0dXJuIGN9LGZiPWZ1bmN0aW9uKGEsYixjLGQpe2E9SShhKTtcbiBhLnF1ZXJ5LnB1c2guYXBwbHkoYS5xdWVyeSxlYihiLGQpKTthLmcucHVzaC5hcHBseShhLmcsZWIoYyxkKSk7cmV0dXJuIGRiKGEpfSxnYj1uZXcgUmVnRXhwKC9cXC8/XFw/PyM/Ly5zb3VyY2UrXCIoXCIrL1tcXC8/I10vaS5zb3VyY2UrXCJ8XCIrL1tcXHVEODAwLVxcdURCRkZdL2kuc291cmNlK1wifFwiKy8lW2MtZl1bMC05YS1mXSglWzg5YWJdWzAtOWEtZl0pezAsMn0oJVs4OWFiXT8pPy9pLnNvdXJjZStcInxcIisvJVswLTlhLWZdPy9pLnNvdXJjZStcIikkXCIsXCJpXCIpLGhiPWZ1bmN0aW9uKGEsYil7dmFyIGM9SShiKTtiPWMuQTtjLnF1ZXJ5Lmxlbmd0aCYmKGIrPVwiP1wiK2MucXVlcnkuam9pbihcIlwiKSk7Yy5nLmxlbmd0aCYmKGIrPVwiI1wiK2MuZy5qb2luKFwiXCIpKTt2YXIgZD1cIlwiOzJFMzxiLmxlbmd0aCYmKGQ9YixiPWIuc3Vic3RyKDAsMkUzKSxiPWIucmVwbGFjZShnYixcIlwiKSxkPWQuc3Vic3RyKGIubGVuZ3RoKSk7dmFyIGU9YS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2E9YS5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiBjPUkoYik7Yj1jLkE7Yy5xdWVyeS5sZW5ndGgmJihiKz1cIj9cIitjLnF1ZXJ5LmpvaW4oXCJcIikpO2MuZy5sZW5ndGgmJihiKz1cIiNcIitjLmcuam9pbihcIlwiKSk7Yj1uZXcgdihiLENhKTt4YShhLFwiSFRNTEFuY2hvckVsZW1lbnRcIik7Yj1iIGluc3RhbmNlb2Ygdj9iOkZhKGIpO2EuaHJlZj1EYShiKTtlLmFwcGVuZENoaWxkKGEpO2I9ZS5pbm5lckhUTUw7Yz1uZXcgdCh6YSxcIkFzc2lnbm1lbnQgdG8gc2VsZi5cIik7dmEoQmEoYyksXCJtdXN0IHByb3ZpZGUganVzdGlmaWNhdGlvblwiKTt0YSghL15bXFxzXFx4YTBdKiQvLnRlc3QoQmEoYykpLFwibXVzdCBwcm92aWRlIG5vbi1lbXB0eSBqdXN0aWZpY2F0aW9uXCIpO3ZvaWQgMD09PXlhJiYoeWE9cWEoXCJnYXBpI2h0bWxcIikpO2I9KGM9eWEpP2MuY3JlYXRlSFRNTChiKTpiO2I9bmV3IHcoYixudWxsLEdhKTtpZihlLnRhZ05hbWUmJkphW2UudGFnTmFtZS50b1VwcGVyQ2FzZSgpXSl0aHJvdyBFcnJvcihcImdvb2cuZG9tLnNhZmUuc2V0SW5uZXJIdG1sIGNhbm5vdCBiZSB1c2VkIHRvIHNldCBjb250ZW50IG9mIFwiK1xuIGUudGFnTmFtZStcIi5cIik7aWYoS2EoKSlmb3IoO2UubGFzdENoaWxkOyllLnJlbW92ZUNoaWxkKGUubGFzdENoaWxkKTtlLmlubmVySFRNTD1IYShiKTtiPVN0cmluZyhlLmZpcnN0Q2hpbGQuaHJlZik7ZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7Yz1JKGIrZCk7ZD1jLkE7Yy5xdWVyeS5sZW5ndGgmJihkKz1cIj9cIitjLnF1ZXJ5LmpvaW4oXCJcIikpO2MuZy5sZW5ndGgmJihkKz1cIiNcIitjLmcuam9pbihcIlwiKSk7cmV0dXJuIGR9LGliPS9eaHR0cHM/OlxcL1xcL1teXFwvJVxcXFw/I1xcc10rXFwvW15cXHNdKiQvaTt2YXIgamI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoeFtjK1wiRXZlbnRMaXN0ZW5lclwiXSl4W2MrXCJFdmVudExpc3RlbmVyXCJdKGEsYiwhMSk7ZWxzZSBpZih4W2QrXCJ0YWNoRXZlbnRcIl0peFtkK1widGFjaEV2ZW50XCJdKFwib25cIithLGIpfSxrYj1mdW5jdGlvbigpe3ZhciBhPXoucmVhZHlTdGF0ZTtyZXR1cm5cImNvbXBsZXRlXCI9PT1hfHxcImludGVyYWN0aXZlXCI9PT1hJiYtMT09bmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiTVNJRVwiKX0sbmI9ZnVuY3Rpb24oYSl7dmFyIGI9bGI7aWYoIWtiKCkpdHJ5e2IoKX1jYXRjaChjKXt9bWIoYSl9LG1iPWZ1bmN0aW9uKGEpe2lmKGtiKCkpYSgpO2Vsc2V7dmFyIGI9ITEsYz1mdW5jdGlvbigpe2lmKCFiKXJldHVybiBiPSEwLGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfTt4LmFkZEV2ZW50TGlzdGVuZXI/KHguYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixjLCExKSx4LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsYywhMSkpOnguYXR0YWNoRXZlbnQmJlxuICh4LmF0dGFjaEV2ZW50KFwib25yZWFkeXN0YXRlY2hhbmdlXCIsZnVuY3Rpb24oKXtrYigpJiZjLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLHguYXR0YWNoRXZlbnQoXCJvbmxvYWRcIixjKSl9fSxvYj1mdW5jdGlvbihhKXtmb3IoO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpfSxwYj17YnV0dG9uOiEwLGRpdjohMCxzcGFuOiEwfTt2YXIgSztLPUEoeCxcIl9fX2pzbFwiLEIoKSk7QShLLFwiSVwiLDApO0EoSyxcImhlbFwiLDEwKTt2YXIgcWI9ZnVuY3Rpb24oYSl7cmV0dXJuIEsuZHBvP0suaDpIKGEsXCJqc2hcIixLLmgpfSxyYj1mdW5jdGlvbihhKXt2YXIgYj1BKEssXCJzd3NcIixbXSk7Yi5wdXNoLmFwcGx5KGIsYSl9LHNiPWZ1bmN0aW9uKGEpe3JldHVybiBBKEssXCJ3YXR0XCIsQigpKVthXX0sdGI9ZnVuY3Rpb24oYSl7dmFyIGI9QShLLFwiUFFcIixbXSk7Sy5QUT1bXTt2YXIgYz1iLmxlbmd0aDtpZigwPT09YylhKCk7ZWxzZSBmb3IodmFyIGQ9MCxlPWZ1bmN0aW9uKCl7KytkPT09YyYmYSgpfSxmPTA7ZjxjO2YrKyliW2ZdKGUpfSx1Yj1mdW5jdGlvbihhKXtyZXR1cm4gQShBKEssXCJIXCIsQigpKSxhLEIoKSl9O3ZhciB2Yj1BKEssXCJwZXJmXCIsQigpKSx3Yj1BKHZiLFwiZ1wiLEIoKSkseGI9QSh2YixcImlcIixCKCkpO0EodmIsXCJyXCIsW10pO0IoKTtCKCk7XG4gdmFyIHliPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD12Yi5yO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkP2QoYSxiLGMpOmQucHVzaChbYSxiLGNdKX0sTD1mdW5jdGlvbihhLGIsYyl7d2JbYV09IWImJndiW2FdfHxjfHwobmV3IERhdGUpLmdldFRpbWUoKTt5YihhKX0sQWI9ZnVuY3Rpb24oYSxiLGMpe2ImJjA8Yi5sZW5ndGgmJihiPXpiKGIpLGMmJjA8Yy5sZW5ndGgmJihiKz1cIl9fX1wiK3piKGMpKSwyODxiLmxlbmd0aCYmKGI9Yi5zdWJzdHIoMCwyOCkrKGIubGVuZ3RoLTI4KSksYz1iLGI9QSh4YixcIl9wXCIsQigpKSxBKGIsYyxCKCkpW2FdPShuZXcgRGF0ZSkuZ2V0VGltZSgpLHliKGEsXCJfcFwiLGMpKX0semI9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuam9pbihcIl9fXCIpLnJlcGxhY2UoL1xcLi9nLFwiX1wiKS5yZXBsYWNlKC9cXC0vZyxcIl9cIikucmVwbGFjZSgvLC9nLFwiX1wiKX07dmFyIEJiPUIoKSxOPVtdLE89ZnVuY3Rpb24oYSl7dGhyb3cgRXJyb3IoXCJCYWQgaGludFwiKyhhP1wiOiBcIithOlwiXCIpKTt9O04ucHVzaChbXCJqc2xcIixmdW5jdGlvbihhKXtmb3IodmFyIGIgaW4gYSlpZihDKGEsYikpe3ZhciBjPWFbYl07XCJvYmplY3RcIj09dHlwZW9mIGM/S1tiXT1BKEssYixbXSkuY29uY2F0KGMpOkEoSyxiLGMpfWlmKGI9YS51KWE9QShLLFwidXNcIixbXSksYS5wdXNoKGIpLChiPS9eaHR0cHM6KC4qKSQvLmV4ZWMoYikpJiZhLnB1c2goXCJodHRwOlwiK2JbMV0pfV0pO3ZhciBDYj0vXihcXC9bYS16QS1aMC05X1xcLV0rKSskLyxEYj1bL1xcL2FtcFxcLy8sL1xcL2FtcCQvLC9eXFwvYW1wJC9dLEViPS9eW2EtekEtWjAtOVxcLV9cXC4sIV0rJC8sRmI9L15nYXBpXFwubG9hZGVkX1swLTldKyQvLEdiPS9eW2EtekEtWjAtOSwuXy1dKyQvLEtiPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEuc3BsaXQoXCI7XCIpLGY9ZS5zaGlmdCgpLGc9QmJbZl0saD1udWxsO2c/aD1nKGUsYixjLGQpOk8oXCJubyBoaW50IHByb2Nlc3NvciBmb3I6IFwiK2YpO2h8fE8oXCJmYWlsZWQgdG8gZ2VuZXJhdGUgbG9hZCB1cmxcIik7Yj1oO2M9Yi5tYXRjaChIYik7KGQ9Yi5tYXRjaChJYikpJiYxPT09ZC5sZW5ndGgmJkpiLnRlc3QoYikmJmMmJjE9PT1jLmxlbmd0aHx8TyhcImZhaWxlZCBzYW5pdHk6IFwiK2EpO3JldHVybiBofSxOYj1mdW5jdGlvbihhLGIsYyxkKXthPUxiKGEpO0ZiLnRlc3QoYyl8fE8oXCJpbnZhbGlkX2NhbGxiYWNrXCIpO2I9TWIoYik7ZD1kJiZkLmxlbmd0aD9NYihkKTpudWxsO3ZhciBlPVxuIGZ1bmN0aW9uKGYpe3JldHVybiBlbmNvZGVVUklDb21wb25lbnQoZikucmVwbGFjZSgvJTJDL2csXCIsXCIpfTtyZXR1cm5bZW5jb2RlVVJJQ29tcG9uZW50KGEucGF0aFByZWZpeCkucmVwbGFjZSgvJTJDL2csXCIsXCIpLnJlcGxhY2UoLyUyRi9nLFwiL1wiKSxcIi9rPVwiLGUoYS52ZXJzaW9uKSxcIi9tPVwiLGUoYiksZD9cIi9leG09XCIrZShkKTpcIlwiLFwiL3J0PWovc3Y9MS9kPTEvZWQ9MVwiLGEuUz9cIi9hbT1cIitlKGEuUyk6XCJcIixhLlo/XCIvcnM9XCIrZShhLlopOlwiXCIsYS5hYT9cIi90PVwiK2UoYS5hYSk6XCJcIixcIi9jYj1cIixlKGMpXS5qb2luKFwiXCIpfSxMYj1mdW5jdGlvbihhKXtcIi9cIiE9PWEuY2hhckF0KDApJiZPKFwicmVsYXRpdmUgcGF0aFwiKTtmb3IodmFyIGI9YS5zdWJzdHJpbmcoMSkuc3BsaXQoXCIvXCIpLGM9W107Yi5sZW5ndGg7KXthPWIuc2hpZnQoKTtpZighYS5sZW5ndGh8fDA9PWEuaW5kZXhPZihcIi5cIikpTyhcImVtcHR5L3JlbGF0aXZlIGRpcmVjdG9yeVwiKTtlbHNlIGlmKDA8YS5pbmRleE9mKFwiPVwiKSl7Yi51bnNoaWZ0KGEpO1xuIGJyZWFrfWMucHVzaChhKX1hPXt9O2Zvcih2YXIgZD0wLGU9Yi5sZW5ndGg7ZDxlOysrZCl7dmFyIGY9YltkXS5zcGxpdChcIj1cIiksZz1kZWNvZGVVUklDb21wb25lbnQoZlswXSksaD1kZWNvZGVVUklDb21wb25lbnQoZlsxXSk7Mj09Zi5sZW5ndGgmJmcmJmgmJihhW2ddPWFbZ118fGgpfWI9XCIvXCIrYy5qb2luKFwiL1wiKTtDYi50ZXN0KGIpfHxPKFwiaW52YWxpZF9wcmVmaXhcIik7Yz0wO2ZvcihkPURiLmxlbmd0aDtjPGQ7KytjKURiW2NdLnRlc3QoYikmJk8oXCJpbnZhbGlkX3ByZWZpeFwiKTtjPU9iKGEsXCJrXCIsITApO2Q9T2IoYSxcImFtXCIpO2U9T2IoYSxcInJzXCIpO2E9T2IoYSxcInRcIik7cmV0dXJue3BhdGhQcmVmaXg6Yix2ZXJzaW9uOmMsUzpkLFo6ZSxhYTphfX0sTWI9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MCxkPWEubGVuZ3RoO2M8ZDsrK2Mpe3ZhciBlPWFbY10ucmVwbGFjZSgvXFwuL2csXCJfXCIpLnJlcGxhY2UoLy0vZyxcIl9cIik7R2IudGVzdChlKSYmYi5wdXNoKGUpfXJldHVybiBiLmpvaW4oXCIsXCIpfSxcbiBPYj1mdW5jdGlvbihhLGIsYyl7YT1hW2JdOyFhJiZjJiZPKFwibWlzc2luZzogXCIrYik7aWYoYSl7aWYoRWIudGVzdChhKSlyZXR1cm4gYTtPKFwiaW52YWxpZDogXCIrYil9cmV0dXJuIG51bGx9LEpiPS9eaHR0cHM/OlxcL1xcL1thLXowLTlfLi1dK1xcLmdvb2dsZShycyk/XFwuY29tKDpcXGQrKT9cXC9bYS16QS1aMC05Xy4sIT1cXC1cXC9dKyQvLEliPS9cXC9jYj0vZyxIYj0vXFwvXFwvL2csUGI9ZnVuY3Rpb24oKXt2YXIgYT1xYihMYS5ocmVmKTtpZighYSl0aHJvdyBFcnJvcihcIkJhZCBoaW50XCIpO3JldHVybiBhfTtCYi5tPWZ1bmN0aW9uKGEsYixjLGQpeyhhPWFbMF0pfHxPKFwibWlzc2luZ19oaW50XCIpO3JldHVyblwiaHR0cHM6Ly9hcGlzLmdvb2dsZS5jb21cIitOYihhLGIsYyxkKX07dmFyIFFiPWRlY29kZVVSSShcIiU3M2NyaXB0XCIpLFJiPS9eWy0rXzAtOVxcL0EtWmEtel0rPXswLDJ9JC8sU2I9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W10sZD0wO2Q8YS5sZW5ndGg7KytkKXt2YXIgZT1hW2RdO2UmJjA+T2EuY2FsbChiLGUpJiZjLnB1c2goZSl9cmV0dXJuIGN9LFRiPWZ1bmN0aW9uKCl7dmFyIGE9Sy5ub25jZTtyZXR1cm4gdm9pZCAwIT09YT9hJiZhPT09U3RyaW5nKGEpJiZhLm1hdGNoKFJiKT9hOksubm9uY2U9bnVsbDp6LnF1ZXJ5U2VsZWN0b3I/KGE9ei5xdWVyeVNlbGVjdG9yKFwic2NyaXB0W25vbmNlXVwiKSk/KGE9YS5ub25jZXx8YS5nZXRBdHRyaWJ1dGUoXCJub25jZVwiKXx8XCJcIixhJiZhPT09U3RyaW5nKGEpJiZhLm1hdGNoKFJiKT9LLm5vbmNlPWE6Sy5ub25jZT1udWxsKTpudWxsOm51bGx9LFdiPWZ1bmN0aW9uKGEpe2lmKFwibG9hZGluZ1wiIT16LnJlYWR5U3RhdGUpVWIoYSk7ZWxzZXt2YXIgYj1UYigpLGM9XCJcIjtudWxsIT09YiYmKGM9JyBub25jZT1cIicrXG4gYisnXCInKTthPVwiPFwiK1FiKycgc3JjPVwiJytlbmNvZGVVUkkoYSkrJ1wiJytjK1wiPjwvXCIrUWIrXCI+XCI7ei53cml0ZShWYj9WYi5jcmVhdGVIVE1MKGEpOmEpfX0sVWI9ZnVuY3Rpb24oYSl7dmFyIGI9ei5jcmVhdGVFbGVtZW50KFFiKTtiLnNldEF0dHJpYnV0ZShcInNyY1wiLFZiP1ZiLmNyZWF0ZVNjcmlwdFVSTChhKTphKTthPVRiKCk7bnVsbCE9PWEmJmIuc2V0QXR0cmlidXRlKFwibm9uY2VcIixhKTtiLmFzeW5jPVwidHJ1ZVwiOyhhPXouZ2V0RWxlbWVudHNCeVRhZ05hbWUoUWIpWzBdKT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYSk6KHouaGVhZHx8ei5ib2R5fHx6LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoYil9LFhiPWZ1bmN0aW9uKGEsYil7dmFyIGM9YiYmYi5fYztpZihjKWZvcih2YXIgZD0wO2Q8Ti5sZW5ndGg7ZCsrKXt2YXIgZT1OW2RdWzBdLGY9TltkXVsxXTtmJiZDKGMsZSkmJmYoY1tlXSxhLGIpfX0sWmI9ZnVuY3Rpb24oYSxiLGMpe1liKGZ1bmN0aW9uKCl7dmFyIGQ9XG4gYj09PXFiKExhLmhyZWYpP0EoRixcIl9cIixCKCkpOkIoKTtkPUEodWIoYiksXCJfXCIsZCk7YShkKX0sYyl9LGFjPWZ1bmN0aW9uKGEsYil7dmFyIGM9Ynx8e307XCJmdW5jdGlvblwiPT10eXBlb2YgYiYmKGM9e30sYy5jYWxsYmFjaz1iKTtYYihhLGMpO2I9YT9hLnNwbGl0KFwiOlwiKTpbXTt2YXIgZD1jLmh8fFBiKCksZT1BKEssXCJhaFwiLEIoKSk7aWYoZVtcIjo6XCJdJiZiLmxlbmd0aCl7YT1bXTtmb3IodmFyIGY9bnVsbDtmPWIuc2hpZnQoKTspe3ZhciBnPWYuc3BsaXQoXCIuXCIpO2c9ZVtmXXx8ZVtnWzFdJiZcIm5zOlwiK2dbMF18fFwiXCJdfHxkO3ZhciBoPWEubGVuZ3RoJiZhW2EubGVuZ3RoLTFdfHxudWxsLGs9aDtoJiZoLmhpbnQ9PWd8fChrPXtoaW50OmcsVjpbXX0sYS5wdXNoKGspKTtrLlYucHVzaChmKX12YXIgbD1hLmxlbmd0aDtpZigxPGwpe3ZhciBuPWMuY2FsbGJhY2s7biYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXswPT0tLWwmJm4oKX0pfWZvcig7Yj1hLnNoaWZ0KCk7KSRiKGIuVixjLFxuIGIuaGludCl9ZWxzZSAkYihifHxbXSxjLGQpfSwkYj1mdW5jdGlvbihhLGIsYyl7YT1QYShhKXx8W107dmFyIGQ9Yi5jYWxsYmFjayxlPWIuY29uZmlnLGY9Yi50aW1lb3V0LGc9Yi5vbnRpbWVvdXQsaD1iLm9uZXJyb3Isaz12b2lkIDA7XCJmdW5jdGlvblwiPT10eXBlb2YgaCYmKGs9aCk7dmFyIGw9bnVsbCxuPSExO2lmKGYmJiFnfHwhZiYmZyl0aHJvd1wiVGltZW91dCByZXF1aXJlcyBib3RoIHRoZSB0aW1lb3V0IHBhcmFtZXRlciBhbmQgb250aW1lb3V0IHBhcmFtZXRlciB0byBiZSBzZXRcIjtoPUEodWIoYyksXCJyXCIsW10pLnNvcnQoKTt2YXIgcD1BKHViKGMpLFwiTFwiLFtdKS5zb3J0KCkscj1bXS5jb25jYXQoaCksdT1mdW5jdGlvbihNLGJhKXtpZihuKXJldHVybiAwO3guY2xlYXJUaW1lb3V0KGwpO3AucHVzaC5hcHBseShwLHkpO3ZhciBjYT0oKEZ8fHt9KS5jb25maWd8fHt9KS51cGRhdGU7Y2E/Y2EoZSk6ZSYmQShLLFwiY3VcIixbXSkucHVzaChlKTtpZihiYSl7QWIoXCJtZTBcIixNLFxuIHIpO3RyeXtaYihiYSxjLGspfWZpbmFsbHl7QWIoXCJtZTFcIixNLHIpfX1yZXR1cm4gMX07MDxmJiYobD14LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtuPSEwO2coKX0sZikpO3ZhciB5PVNiKGEscCk7aWYoeS5sZW5ndGgpe3k9U2IoYSxoKTt2YXIgRz1BKEssXCJDUFwiLFtdKSxKPUcubGVuZ3RoO0dbSl09ZnVuY3Rpb24oTSl7aWYoIU0pcmV0dXJuIDA7QWIoXCJtbDFcIix5LHIpO3ZhciBiYT1mdW5jdGlvbih3YSl7R1tKXT1udWxsO3UoeSxNKSYmdGIoZnVuY3Rpb24oKXtkJiZkKCk7d2EoKX0pfSxjYT1mdW5jdGlvbigpe3ZhciB3YT1HW0orMV07d2EmJndhKCl9OzA8SiYmR1tKLTFdP0dbSl09ZnVuY3Rpb24oKXtiYShjYSl9OmJhKGNhKX07aWYoeS5sZW5ndGgpe3ZhciBUYT1cImxvYWRlZF9cIitLLkkrKztGW1RhXT1mdW5jdGlvbihNKXtHW0pdKE0pO0ZbVGFdPW51bGx9O2E9S2IoYyx5LFwiZ2FwaS5cIitUYSxoKTtoLnB1c2guYXBwbHkoaCx5KTtBYihcIm1sMFwiLHkscik7Yi5zeW5jfHx4Ll9fX2dhcGlzeW5jP1xuIFdiKGEpOlViKGEpfWVsc2UgR1tKXShNYSl9ZWxzZSB1KHkpJiZkJiZkKCl9LFZiPXFhKFwiZ2FwaSNnYXBpXCIpO3ZhciBZYj1mdW5jdGlvbihhLGIpe2lmKEsuaGVlJiYwPEsuaGVsKXRyeXtyZXR1cm4gYSgpfWNhdGNoKGMpe2ImJmIoYyksSy5oZWwtLSxhYyhcImRlYnVnX2Vycm9yXCIsZnVuY3Rpb24oKXt0cnl7d2luZG93Ll9fX2pzbC5oZWZuKGMpfWNhdGNoKGQpe3Rocm93IGM7fX0pfWVsc2UgdHJ5e3JldHVybiBhKCl9Y2F0Y2goYyl7dGhyb3cgYiYmYihjKSxjO319O0YubG9hZD1mdW5jdGlvbihhLGIpe3JldHVybiBZYihmdW5jdGlvbigpe3JldHVybiBhYyhhLGIpfSl9O3ZhciBiYz1mdW5jdGlvbihhKXt2YXIgYj13aW5kb3cuX19fanNsPXdpbmRvdy5fX19qc2x8fHt9O2JbYV09YlthXXx8W107cmV0dXJuIGJbYV19LGNjPWZ1bmN0aW9uKGEpe3ZhciBiPXdpbmRvdy5fX19qc2w9d2luZG93Ll9fX2pzbHx8e307Yi5jZmc9IWEmJmIuY2ZnfHx7fTtyZXR1cm4gYi5jZmd9LGRjPWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmL1xcW25hdGl2ZSBjb2RlXFxdLy50ZXN0KGEucHVzaCl9LFA9ZnVuY3Rpb24oYSxiLGMpe2lmKGImJlwib2JqZWN0XCI9PT10eXBlb2YgYilmb3IodmFyIGQgaW4gYikhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsZCl8fGMmJlwiX19fZ29jXCI9PT1kJiZcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJbZF18fChhW2RdJiZiW2RdJiZcIm9iamVjdFwiPT09dHlwZW9mIGFbZF0mJlwib2JqZWN0XCI9PT10eXBlb2YgYltkXSYmIWRjKGFbZF0pJiYhZGMoYltkXSk/UChhW2RdLGJbZF0pOmJbZF0mJlwib2JqZWN0XCI9PT1cbiB0eXBlb2YgYltkXT8oYVtkXT1kYyhiW2RdKT9bXTp7fSxQKGFbZF0sYltkXSkpOmFbZF09YltkXSl9LGVjPWZ1bmN0aW9uKGEpe2lmKGEmJiEvXlxccyskLy50ZXN0KGEpKXtmb3IoOzA9PWEuY2hhckNvZGVBdChhLmxlbmd0aC0xKTspYT1hLnN1YnN0cmluZygwLGEubGVuZ3RoLTEpO3RyeXt2YXIgYj13aW5kb3cuSlNPTi5wYXJzZShhKX1jYXRjaChjKXt9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiKXJldHVybiBiO3RyeXtiPShuZXcgRnVuY3Rpb24oXCJyZXR1cm4gKFwiK2ErXCJcXG4pXCIpKSgpfWNhdGNoKGMpe31pZihcIm9iamVjdFwiPT09dHlwZW9mIGIpcmV0dXJuIGI7dHJ5e2I9KG5ldyBGdW5jdGlvbihcInJldHVybiAoe1wiK2ErXCJcXG59KVwiKSkoKX1jYXRjaChjKXt9cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBiP2I6e319fSxmYz1mdW5jdGlvbihhLGIpe3ZhciBjPXtfX19nb2M6dm9pZCAwfTthLmxlbmd0aCYmYVthLmxlbmd0aC0xXSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYVthLmxlbmd0aC1cbiAxXSxcIl9fX2dvY1wiKSYmXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhW2EubGVuZ3RoLTFdLl9fX2dvYyYmKGM9YS5wb3AoKSk7UChjLGIpO2EucHVzaChjKX0sZ2M9ZnVuY3Rpb24oYSl7Y2MoITApO3ZhciBiPXdpbmRvdy5fX19nY2ZnLGM9YmMoXCJjdVwiKSxkPXdpbmRvdy5fX19ndTtiJiZiIT09ZCYmKGZjKGMsYiksd2luZG93Ll9fX2d1PWIpO2I9YmMoXCJjdVwiKTt2YXIgZT1kb2N1bWVudC5zY3JpcHRzfHxkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKXx8W107ZD1bXTt2YXIgZj1bXTtmLnB1c2guYXBwbHkoZixiYyhcInVzXCIpKTtmb3IodmFyIGc9MDtnPGUubGVuZ3RoOysrZylmb3IodmFyIGg9ZVtnXSxrPTA7azxmLmxlbmd0aDsrK2spaC5zcmMmJjA9PWguc3JjLmluZGV4T2YoZltrXSkmJmQucHVzaChoKTswPT1kLmxlbmd0aCYmMDxlLmxlbmd0aCYmZVtlLmxlbmd0aC0xXS5zcmMmJmQucHVzaChlW2UubGVuZ3RoLTFdKTtmb3IoZT0wO2U8ZC5sZW5ndGg7KytlKWRbZV0uZ2V0QXR0cmlidXRlKFwiZ2FwaV9wcm9jZXNzZWRcIil8fFxuIChkW2VdLnNldEF0dHJpYnV0ZShcImdhcGlfcHJvY2Vzc2VkXCIsITApLChmPWRbZV0pPyhnPWYubm9kZVR5cGUsZj0zPT1nfHw0PT1nP2Yubm9kZVZhbHVlOmYudGV4dENvbnRlbnR8fGYuaW5uZXJUZXh0fHxmLmlubmVySFRNTHx8XCJcIik6Zj12b2lkIDAsKGY9ZWMoZikpJiZiLnB1c2goZikpO2EmJmZjKGMsYSk7ZD1iYyhcImNkXCIpO2E9MDtmb3IoYj1kLmxlbmd0aDthPGI7KythKVAoY2MoKSxkW2FdLCEwKTtkPWJjKFwiY2lcIik7YT0wO2ZvcihiPWQubGVuZ3RoO2E8YjsrK2EpUChjYygpLGRbYV0sITApO2E9MDtmb3IoYj1jLmxlbmd0aDthPGI7KythKVAoY2MoKSxjW2FdLCEwKX0sUT1mdW5jdGlvbihhKXt2YXIgYj1jYygpO2lmKCFhKXJldHVybiBiO2E9YS5zcGxpdChcIi9cIik7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtiJiZcIm9iamVjdFwiPT09dHlwZW9mIGImJmM8ZDsrK2MpYj1iW2FbY11dO3JldHVybiBjPT09YS5sZW5ndGgmJnZvaWQgMCE9PWI/Yjp2b2lkIDB9LGhjPWZ1bmN0aW9uKGEsXG4gYil7dmFyIGM7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXt2YXIgZD1jPXt9O2E9YS5zcGxpdChcIi9cIik7Zm9yKHZhciBlPTAsZj1hLmxlbmd0aDtlPGYtMTsrK2Upe3ZhciBnPXt9O2Q9ZFthW2VdXT1nfWRbYVtlXV09Yn1lbHNlIGM9YTtnYyhjKX07dmFyIGljPWZ1bmN0aW9uKCl7dmFyIGE9d2luZG93Ll9fR09PR0xFQVBJUzthJiYoYS5nb29nbGVhcGlzJiYhYVtcImdvb2dsZWFwaXMuY29uZmlnXCJdJiYoYVtcImdvb2dsZWFwaXMuY29uZmlnXCJdPWEuZ29vZ2xlYXBpcyksQShLLFwiY2lcIixbXSkucHVzaChhKSx3aW5kb3cuX19HT09HTEVBUElTPXZvaWQgMCl9O3ZhciBqYz17Y2FsbGJhY2s6MSxjbGllbnRpZDoxLGNvb2tpZXBvbGljeToxLG9wZW5pZHJlYWxtOi0xLGluY2x1ZGVncmFudGVkc2NvcGVzOi0xLHJlcXVlc3R2aXNpYmxlYWN0aW9uczoxLHNjb3BlOjF9LGtjPSExLGxjPUIoKSxtYz1mdW5jdGlvbigpe2lmKCFrYyl7Zm9yKHZhciBhPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibWV0YVwiKSxiPTA7YjxhLmxlbmd0aDsrK2Ipe3ZhciBjPWFbYl0ubmFtZS50b0xvd2VyQ2FzZSgpO2lmKDA9PWMubGFzdEluZGV4T2YoXCJnb29nbGUtc2lnbmluLVwiLDApKXtjPWMuc3Vic3RyaW5nKDE0KTt2YXIgZD1hW2JdLmNvbnRlbnQ7amNbY10mJmQmJihsY1tjXT1kKX19aWYod2luZG93LnNlbGYhPT13aW5kb3cudG9wKXthPWRvY3VtZW50LmxvY2F0aW9uLnRvU3RyaW5nKCk7Zm9yKHZhciBlIGluIGpjKTA8amNbZV0mJihiPUgoYSxlLFwiXCIpKSYmKGxjW2VdPWIpfWtjPSEwfWU9QigpO0QobGMsZSk7cmV0dXJuIGV9LG5jPWZ1bmN0aW9uKGEpe3JldHVybiEhKGEuY2xpZW50aWQmJlxuIGEuc2NvcGUmJmEuY2FsbGJhY2spfTt2YXIgb2M9d2luZG93LmNvbnNvbGUscGM9ZnVuY3Rpb24oYSl7b2MmJm9jLmxvZyYmb2MubG9nKGEpfTt2YXIgcWM9ZnVuY3Rpb24oKXtyZXR1cm4hIUsub2F9LHJjPWZ1bmN0aW9uKCl7fTt2YXIgUj1BKEssXCJyd1wiLEIoKSksc2M9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiIGluIFIpYShSW2JdKX0sdGM9ZnVuY3Rpb24oYSxiKXsoYT1SW2FdKSYmYS5zdGF0ZTxiJiYoYS5zdGF0ZT1iKX07dmFyIHVjO3ZhciB2Yz0vXmh0dHBzPzpcXC9cXC8oPzpcXHd8W1xcLVxcLl0pK1xcLmdvb2dsZVxcLig/Olxcd3xbXFwtOlxcLl0pKyg/OlxcL1teXFw/I10qKT9cXC91XFwvKFxcZClcXC8vLHdjPS9eaHR0cHM/OlxcL1xcLyg/Olxcd3xbXFwtXFwuXSkrXFwuZ29vZ2xlXFwuKD86XFx3fFtcXC06XFwuXSkrKD86XFwvW15cXD8jXSopP1xcL2JcXC8oXFxkezEwLDIxfSlcXC8vLHhjPWZ1bmN0aW9uKGEpe3ZhciBiPVEoXCJnb29nbGVhcGlzLmNvbmZpZy9zZXNzaW9uSW5kZXhcIik7XCJzdHJpbmdcIj09PXR5cGVvZiBiJiYyNTQ8Yi5sZW5ndGgmJihiPW51bGwpO251bGw9PWImJihiPXdpbmRvdy5fX1hfR09PR19BVVRIVVNFUik7XCJzdHJpbmdcIj09PXR5cGVvZiBiJiYyNTQ8Yi5sZW5ndGgmJihiPW51bGwpO2lmKG51bGw9PWIpe3ZhciBjPXdpbmRvdy5nb29nbGU7YyYmKGI9Yy5hdXRodXNlcil9XCJzdHJpbmdcIj09PXR5cGVvZiBiJiYyNTQ8Yi5sZW5ndGgmJihiPW51bGwpO251bGw9PWImJihhPWF8fHdpbmRvdy5sb2NhdGlvbi5ocmVmLGI9SChhLFwiYXV0aHVzZXJcIil8fFxuIG51bGwsbnVsbD09YiYmKGI9KGI9YS5tYXRjaCh2YykpP2JbMV06bnVsbCkpO2lmKG51bGw9PWIpcmV0dXJuIG51bGw7Yj1TdHJpbmcoYik7MjU0PGIubGVuZ3RoJiYoYj1udWxsKTtyZXR1cm4gYn0seWM9ZnVuY3Rpb24oYSl7dmFyIGI9UShcImdvb2dsZWFwaXMuY29uZmlnL3Nlc3Npb25EZWxlZ2F0ZVwiKTtcInN0cmluZ1wiPT09dHlwZW9mIGImJjIxPGIubGVuZ3RoJiYoYj1udWxsKTtudWxsPT1iJiYoYj0oYT0oYXx8d2luZG93LmxvY2F0aW9uLmhyZWYpLm1hdGNoKHdjKSk/YVsxXTpudWxsKTtpZihudWxsPT1iKXJldHVybiBudWxsO2I9U3RyaW5nKGIpOzIxPGIubGVuZ3RoJiYoYj1udWxsKTtyZXR1cm4gYn07dmFyIHpjLFMsVD12b2lkIDAsVT1mdW5jdGlvbihhKXt0cnl7cmV0dXJuIG0uSlNPTi5wYXJzZS5jYWxsKG0uSlNPTixhKX1jYXRjaChiKXtyZXR1cm4hMX19LFY9ZnVuY3Rpb24oYSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKX0sQWM9VigwKSxCYz1WKG5ldyBEYXRlKDApKSxDYz1WKCEwKSxEYz1WKFwiXCIpLEVjPVYoe30pLEZjPVYoW10pLFc9ZnVuY3Rpb24oYSxiKXtpZihiKWZvcih2YXIgYz0wLGQ9Yi5sZW5ndGg7YzxkOysrYylpZihhPT09YltjXSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ29udmVydGluZyBjaXJjdWxhciBzdHJ1Y3R1cmUgdG8gSlNPTlwiKTtkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCIhPT1kKXtjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJ8fFtdLDApO2NbYy5sZW5ndGhdPWE7Yj1bXTt2YXIgZT1WKGEpO2lmKG51bGwhPWEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnRvSlNPTiYmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLFxuIFwidG9KU09OXCIpfHwoZSE9PUZjfHxhLmNvbnN0cnVjdG9yIT09QXJyYXkmJmEuY29uc3RydWN0b3IhPT1PYmplY3QpJiYoZSE9PUVjfHxhLmNvbnN0cnVjdG9yIT09QXJyYXkmJmEuY29uc3RydWN0b3IhPT1PYmplY3QpJiZlIT09RGMmJmUhPT1BYyYmZSE9PUNjJiZlIT09QmMpKXJldHVybiBXKGEudG9KU09OLmNhbGwoYSksYyk7aWYobnVsbD09YSliW2IubGVuZ3RoXT1cIm51bGxcIjtlbHNlIGlmKGU9PT1BYylhPU51bWJlcihhKSxpc05hTihhKXx8aXNOYU4oYS1hKT9hPVwibnVsbFwiOi0wPT09YSYmMD4xL2EmJihhPVwiLTBcIiksYltiLmxlbmd0aF09U3RyaW5nKGEpO2Vsc2UgaWYoZT09PUNjKWJbYi5sZW5ndGhdPVN0cmluZyghIU51bWJlcihhKSk7ZWxzZXtpZihlPT09QmMpcmV0dXJuIFcoYS50b0lTT1N0cmluZy5jYWxsKGEpLGMpO2lmKGU9PT1GYyYmVihhLmxlbmd0aCk9PT1BYyl7YltiLmxlbmd0aF09XCJbXCI7dmFyIGY9MDtmb3IoZD1OdW1iZXIoYS5sZW5ndGgpPj4wO2Y8ZDsrK2YpZiYmXG4gKGJbYi5sZW5ndGhdPVwiLFwiKSxiW2IubGVuZ3RoXT1XKGFbZl0sYyl8fFwibnVsbFwiO2JbYi5sZW5ndGhdPVwiXVwifWVsc2UgaWYoZT09RGMmJlYoYS5sZW5ndGgpPT09QWMpe2JbYi5sZW5ndGhdPSdcIic7Zj0wO2ZvcihjPU51bWJlcihhLmxlbmd0aCk+PjA7ZjxjOysrZilkPVN0cmluZy5wcm90b3R5cGUuY2hhckF0LmNhbGwoYSxmKSxlPVN0cmluZy5wcm90b3R5cGUuY2hhckNvZGVBdC5jYWxsKGEsZiksYltiLmxlbmd0aF09XCJcXGJcIj09PWQ/XCJcXFxcYlwiOlwiXFxmXCI9PT1kP1wiXFxcXGZcIjpcIlxcblwiPT09ZD9cIlxcXFxuXCI6XCJcXHJcIj09PWQ/XCJcXFxcclwiOlwiXFx0XCI9PT1kP1wiXFxcXHRcIjpcIlxcXFxcIj09PWR8fCdcIic9PT1kP1wiXFxcXFwiK2Q6MzE+PWU/XCJcXFxcdVwiKyhlKzY1NTM2KS50b1N0cmluZygxNikuc3Vic3RyKDEpOjMyPD1lJiY2NTUzNT49ZT9kOlwiXFx1ZmZmZFwiO2JbYi5sZW5ndGhdPSdcIid9ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl7YltiLmxlbmd0aF09XCJ7XCI7ZD0wO2ZvcihmIGluIGEpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsXG4gZikmJihlPVcoYVtmXSxjKSx2b2lkIDAhPT1lJiYoZCsrJiYoYltiLmxlbmd0aF09XCIsXCIpLGJbYi5sZW5ndGhdPVcoZiksYltiLmxlbmd0aF09XCI6XCIsYltiLmxlbmd0aF09ZSkpO2JbYi5sZW5ndGhdPVwifVwifWVsc2UgcmV0dXJufXJldHVybiBiLmpvaW4oXCJcIil9fSxHYz0vW1xcMC1cXHgwN1xceDBiXFx4MGUtXFx4MWZdLyxIYz0vXihbXlwiXSpcIihbXlxcXFxcIl18XFxcXC4pKlwiKSpbXlwiXSpcIihbXlwiXFxcXF18XFxcXC4pKltcXDAtXFx4MWZdLyxJYz0vXihbXlwiXSpcIihbXlxcXFxcIl18XFxcXC4pKlwiKSpbXlwiXSpcIihbXlwiXFxcXF18XFxcXC4pKlxcXFxbXlxcXFxcXC9cImJmbnJ0dV0vLEpjPS9eKFteXCJdKlwiKFteXFxcXFwiXXxcXFxcLikqXCIpKlteXCJdKlwiKFteXCJcXFxcXXxcXFxcLikqXFxcXHUoWzAtOWEtZkEtRl17MCwzfVteMC05YS1mQS1GXSkvLEtjPS9cIihbXlxcMC1cXHgxZlxcXFxcIl18XFxcXFtcXFxcXFwvXCJiZm5ydF18XFxcXHVbMC05YS1mQS1GXXs0fSkqXCIvZyxMYz0vLT8oMHxbMS05XVswLTldKikoXFwuWzAtOV0rKT8oW2VFXVstK10/WzAtOV0rKT8vZyxNYz0vWyBcXHRcXG5cXHJdKy9nLFxuIE5jPS9bXlwiXTovLE9jPS9cIlwiL2csUGM9L3RydWV8ZmFsc2V8bnVsbC9nLFFjPS8wMC8sUmM9L1tcXHtdKFteMFxcfV18MFteOl0pLyxTYz0vKF58XFxbKVssOl18Wyw6XShcXF18XFx9fFssOl18JCkvLFRjPS9bXlxcWyw6XVtcXFtcXHtdLyxVYz0vXihcXHt8XFx9fFxcW3xcXF18LHw6fDApKy8sVmM9L1xcdTIwMjgvZyxXYz0vXFx1MjAyOS9nLFhjPWZ1bmN0aW9uKGEpe2E9U3RyaW5nKGEpO2lmKEdjLnRlc3QoYSl8fEhjLnRlc3QoYSl8fEljLnRlc3QoYSl8fEpjLnRlc3QoYSkpcmV0dXJuITE7dmFyIGI9YS5yZXBsYWNlKEtjLCdcIlwiJyk7Yj1iLnJlcGxhY2UoTGMsXCIwXCIpO2I9Yi5yZXBsYWNlKE1jLFwiXCIpO2lmKE5jLnRlc3QoYikpcmV0dXJuITE7Yj1iLnJlcGxhY2UoT2MsXCIwXCIpO2I9Yi5yZXBsYWNlKFBjLFwiMFwiKTtpZihRYy50ZXN0KGIpfHxSYy50ZXN0KGIpfHxTYy50ZXN0KGIpfHxUYy50ZXN0KGIpfHwhYnx8KGI9Yi5yZXBsYWNlKFVjLFwiXCIpKSlyZXR1cm4hMTthPWEucmVwbGFjZShWYyxcIlxcXFx1MjAyOFwiKS5yZXBsYWNlKFdjLFxuIFwiXFxcXHUyMDI5XCIpO2I9dm9pZCAwO3RyeXtiPVQ/W1UoYSldOmV2YWwoXCIoZnVuY3Rpb24gKHZhcl9hcmdzKSB7XFxuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcXG59KShcXG5cIithK1wiXFxuKVwiKX1jYXRjaChjKXtyZXR1cm4hMX1yZXR1cm4gYiYmMT09PWIubGVuZ3RoP2JbMF06ITF9LFljPWZ1bmN0aW9uKCl7dmFyIGE9KChtLmRvY3VtZW50fHx7fSkuc2NyaXB0c3x8W10pLmxlbmd0aDtpZigodm9pZCAwPT09emN8fHZvaWQgMD09PVR8fFMhPT1hKSYmLTEhPT1TKXt6Yz1UPSExO1M9LTE7dHJ5e3RyeXtUPSEhbS5KU09OJiYne1wiYVwiOlszLHRydWUsXCIxOTcwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIl19Jz09PW0uSlNPTi5zdHJpbmdpZnkuY2FsbChtLkpTT04se2E6WzMsITAsbmV3IERhdGUoMCldLGM6ZnVuY3Rpb24oKXt9fSkmJiEwPT09VShcInRydWVcIikmJjM9PT1VKCdbe1wiYVwiOjN9XScpWzBdLmF9Y2F0Y2goYil7fXpjPVQmJiFVKFwiWzAwXVwiKSYmXG4gIVUoJ1wiXFx1MDAwN1wiJykmJiFVKCdcIlxcXFwwXCInKSYmIVUoJ1wiXFxcXHZcIicpfWZpbmFsbHl7Uz1hfX19LFpjPWZ1bmN0aW9uKGEpe2lmKC0xPT09UylyZXR1cm4hMTtZYygpO3JldHVybih6Yz9VOlhjKShhKX0sJGM9ZnVuY3Rpb24oYSl7aWYoLTEhPT1TKXJldHVybiBZYygpLFQ/bS5KU09OLnN0cmluZ2lmeS5jYWxsKG0uSlNPTixhKTpXKGEpfSxhZD0hRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmd8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ3x8XCIxOTcwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIiE9PShuZXcgRGF0ZSgwKSkudG9JU09TdHJpbmcoKSxiZD1mdW5jdGlvbigpe3ZhciBhPURhdGUucHJvdG90eXBlLmdldFVUQ0Z1bGxZZWFyLmNhbGwodGhpcyk7cmV0dXJuWzA+YT9cIi1cIitTdHJpbmcoMUU2LWEpLnN1YnN0cigxKTo5OTk5Pj1hP1N0cmluZygxRTQrYSkuc3Vic3RyKDEpOlwiK1wiK1N0cmluZygxRTYrYSkuc3Vic3RyKDEpLFwiLVwiLFN0cmluZygxMDErXG4gRGF0ZS5wcm90b3R5cGUuZ2V0VVRDTW9udGguY2FsbCh0aGlzKSkuc3Vic3RyKDEpLFwiLVwiLFN0cmluZygxMDArRGF0ZS5wcm90b3R5cGUuZ2V0VVRDRGF0ZS5jYWxsKHRoaXMpKS5zdWJzdHIoMSksXCJUXCIsU3RyaW5nKDEwMCtEYXRlLnByb3RvdHlwZS5nZXRVVENIb3Vycy5jYWxsKHRoaXMpKS5zdWJzdHIoMSksXCI6XCIsU3RyaW5nKDEwMCtEYXRlLnByb3RvdHlwZS5nZXRVVENNaW51dGVzLmNhbGwodGhpcykpLnN1YnN0cigxKSxcIjpcIixTdHJpbmcoMTAwK0RhdGUucHJvdG90eXBlLmdldFVUQ1NlY29uZHMuY2FsbCh0aGlzKSkuc3Vic3RyKDEpLFwiLlwiLFN0cmluZygxRTMrRGF0ZS5wcm90b3R5cGUuZ2V0VVRDTWlsbGlzZWNvbmRzLmNhbGwodGhpcykpLnN1YnN0cigxKSxcIlpcIl0uam9pbihcIlwiKX07RGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc9YWQ/YmQ6RGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7dmFyIGNkPWZ1bmN0aW9uKCl7dGhpcy5qPS0xfTt2YXIgZGQ9ZnVuY3Rpb24oKXt0aGlzLmo9NjQ7dGhpcy5iPVtdO3RoaXMuRz1bXTt0aGlzLmRhPVtdO3RoaXMuQz1bXTt0aGlzLkNbMF09MTI4O2Zvcih2YXIgYT0xO2E8dGhpcy5qOysrYSl0aGlzLkNbYV09MDt0aGlzLkQ9dGhpcy5vPTA7dGhpcy5yZXNldCgpfTtvYShkZCxjZCk7ZGQucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5iWzBdPTE3MzI1ODQxOTM7dGhpcy5iWzFdPTQwMjMyMzM0MTc7dGhpcy5iWzJdPTI1NjIzODMxMDI7dGhpcy5iWzNdPTI3MTczMzg3ODt0aGlzLmJbNF09MzI4NTM3NzUyMDt0aGlzLkQ9dGhpcy5vPTB9O1xuIHZhciBlZD1mdW5jdGlvbihhLGIsYyl7Y3x8KGM9MCk7dmFyIGQ9YS5kYTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpZm9yKHZhciBlPTA7MTY+ZTtlKyspZFtlXT1iLmNoYXJDb2RlQXQoYyk8PDI0fGIuY2hhckNvZGVBdChjKzEpPDwxNnxiLmNoYXJDb2RlQXQoYysyKTw8OHxiLmNoYXJDb2RlQXQoYyszKSxjKz00O2Vsc2UgZm9yKGU9MDsxNj5lO2UrKylkW2VdPWJbY108PDI0fGJbYysxXTw8MTZ8YltjKzJdPDw4fGJbYyszXSxjKz00O2ZvcihlPTE2OzgwPmU7ZSsrKXt2YXIgZj1kW2UtM11eZFtlLThdXmRbZS0xNF1eZFtlLTE2XTtkW2VdPShmPDwxfGY+Pj4zMSkmNDI5NDk2NzI5NX1iPWEuYlswXTtjPWEuYlsxXTt2YXIgZz1hLmJbMl0saD1hLmJbM10saz1hLmJbNF07Zm9yKGU9MDs4MD5lO2UrKyl7aWYoNDA+ZSlpZigyMD5lKXtmPWheYyYoZ15oKTt2YXIgbD0xNTE4NTAwMjQ5fWVsc2UgZj1jXmdeaCxsPTE4NTk3NzUzOTM7ZWxzZSA2MD5lPyhmPWMmZ3xoJihjfGcpLGw9MjQwMDk1OTcwOCk6XG4gKGY9Y15nXmgsbD0zMzk1NDY5NzgyKTtmPShiPDw1fGI+Pj4yNykrZitrK2wrZFtlXSY0Mjk0OTY3Mjk1O2s9aDtoPWc7Zz0oYzw8MzB8Yz4+PjIpJjQyOTQ5NjcyOTU7Yz1iO2I9Zn1hLmJbMF09YS5iWzBdK2ImNDI5NDk2NzI5NTthLmJbMV09YS5iWzFdK2MmNDI5NDk2NzI5NTthLmJbMl09YS5iWzJdK2cmNDI5NDk2NzI5NTthLmJbM109YS5iWzNdK2gmNDI5NDk2NzI5NTthLmJbNF09YS5iWzRdK2smNDI5NDk2NzI5NX07XG4gZGQucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWEpe3ZvaWQgMD09PWImJihiPWEubGVuZ3RoKTtmb3IodmFyIGM9Yi10aGlzLmosZD0wLGU9dGhpcy5HLGY9dGhpcy5vO2Q8Yjspe2lmKDA9PWYpZm9yKDtkPD1jOyllZCh0aGlzLGEsZCksZCs9dGhpcy5qO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlmb3IoO2Q8Yjspe2lmKGVbZl09YS5jaGFyQ29kZUF0KGQpLCsrZiwrK2QsZj09dGhpcy5qKXtlZCh0aGlzLGUpO2Y9MDticmVha319ZWxzZSBmb3IoO2Q8YjspaWYoZVtmXT1hW2RdLCsrZiwrK2QsZj09dGhpcy5qKXtlZCh0aGlzLGUpO2Y9MDticmVha319dGhpcy5vPWY7dGhpcy5EKz1ifX07XG4gZGQucHJvdG90eXBlLmRpZ2VzdD1mdW5jdGlvbigpe3ZhciBhPVtdLGI9OCp0aGlzLkQ7NTY+dGhpcy5vP3RoaXMudXBkYXRlKHRoaXMuQyw1Ni10aGlzLm8pOnRoaXMudXBkYXRlKHRoaXMuQyx0aGlzLmotKHRoaXMuby01NikpO2Zvcih2YXIgYz10aGlzLmotMTs1Njw9YztjLS0pdGhpcy5HW2NdPWImMjU1LGIvPTI1NjtlZCh0aGlzLHRoaXMuRyk7Zm9yKGM9Yj0wOzU+YztjKyspZm9yKHZhciBkPTI0OzA8PWQ7ZC09OClhW2JdPXRoaXMuYltjXT4+ZCYyNTUsKytiO3JldHVybiBhfTt2YXIgZmQ9ZnVuY3Rpb24oKXt0aGlzLk89bmV3IGRkfTtmZC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLk8ucmVzZXQoKX07dmFyIGdkPXguY3J5cHRvLGhkPSExLGlkPTAsamQ9MCxrZD0xLGxkPTAsbWQ9XCJcIixuZD1mdW5jdGlvbihhKXthPWF8fHguZXZlbnQ7dmFyIGI9YS5zY3JlZW5YK2EuY2xpZW50WDw8MTY7Yis9YS5zY3JlZW5ZK2EuY2xpZW50WTtiKj0obmV3IERhdGUpLmdldFRpbWUoKSUxRTY7a2Q9a2QqYiVsZDswPGlkJiYrK2pkPT1pZCYmamIoXCJtb3VzZW1vdmVcIixuZCxcInJlbW92ZVwiLFwiZGVcIil9LG9kPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBmZDthPXVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChhKSk7Zm9yKHZhciBjPVtdLGQ9MCxlPWEubGVuZ3RoO2Q8ZTsrK2QpYy5wdXNoKGEuY2hhckNvZGVBdChkKSk7Yi5PLnVwZGF0ZShjKTtiPWIuTy5kaWdlc3QoKTthPVwiXCI7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhKz1cIjAxMjM0NTY3ODlBQkNERUZcIi5jaGFyQXQoTWF0aC5mbG9vcihiW2NdLzE2KSkrXCIwMTIzNDU2Nzg5QUJDREVGXCIuY2hhckF0KGJbY10lMTYpO3JldHVybiBhfTtcbiBoZD0hIWdkJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBnZC5nZXRSYW5kb21WYWx1ZXM7aGR8fChsZD0xRTYqKHNjcmVlbi53aWR0aCpzY3JlZW4ud2lkdGgrc2NyZWVuLmhlaWdodCksbWQ9b2Qoei5jb29raWUrXCJ8XCIrei5sb2NhdGlvbitcInxcIisobmV3IERhdGUpLmdldFRpbWUoKStcInxcIitNYXRoLnJhbmRvbSgpKSxpZD1RKFwicmFuZG9tL21heE9ic2VydmVNb3VzZW1vdmVcIil8fDAsMCE9aWQmJmpiKFwibW91c2Vtb3ZlXCIsbmQsXCJhZGRcIixcImF0XCIpKTt2YXIgcGQ9ZnVuY3Rpb24oKXt2YXIgYT1rZDthKz1wYXJzZUludChtZC5zdWJzdHIoMCwyMCksMTYpO21kPW9kKG1kKTtyZXR1cm4gYS8obGQrTWF0aC5wb3coMTYsMjApKX0scWQ9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgeC5VaW50MzJBcnJheSgxKTtnZC5nZXRSYW5kb21WYWx1ZXMoYSk7cmV0dXJuIE51bWJlcihcIjAuXCIrYVswXSl9O3ZhciByZD1mdW5jdGlvbigpe3ZhciBhPUsub25sO2lmKCFhKXthPUIoKTtLLm9ubD1hO3ZhciBiPUIoKTthLmU9ZnVuY3Rpb24oYyl7dmFyIGQ9YltjXTtkJiYoZGVsZXRlIGJbY10sZCgpKX07YS5hPWZ1bmN0aW9uKGMsZCl7YltjXT1kfTthLnI9ZnVuY3Rpb24oYyl7ZGVsZXRlIGJbY119fXJldHVybiBhfSxzZD1mdW5jdGlvbihhLGIpe2I9Yi5vbmxvYWQ7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/KHJkKCkuYShhLGIpLGIpOm51bGx9LHRkPWZ1bmN0aW9uKGEpe0UoL15cXHcrJC8udGVzdChhKSxcIlVuc3VwcG9ydGVkIGlkIC0gXCIrYSk7cmQoKTtyZXR1cm4nb25sb2FkPVwid2luZG93Ll9fX2pzbC5vbmwuZSgmIzM0OycrYSsnJiMzNDspXCInfSx1ZD1mdW5jdGlvbihhKXtyZCgpLnIoYSl9O3ZhciB2ZD17YWxsb3d0cmFuc3BhcmVuY3k6XCJ0cnVlXCIsZnJhbWVib3JkZXI6XCIwXCIsaHNwYWNlOlwiMFwiLG1hcmdpbmhlaWdodDpcIjBcIixtYXJnaW53aWR0aDpcIjBcIixzY3JvbGxpbmc6XCJub1wiLHN0eWxlOlwiXCIsdGFiaW5kZXg6XCIwXCIsdnNwYWNlOlwiMFwiLHdpZHRoOlwiMTAwJVwifSx3ZD17YWxsb3d0cmFuc3BhcmVuY3k6ITAsb25sb2FkOiEwfSx4ZD0wLHlkPWZ1bmN0aW9uKGEpe0UoIWF8fGliLnRlc3QoYSksXCJJbGxlZ2FsIHVybCBmb3IgbmV3IGlmcmFtZSAtIFwiK2EpfSx6ZD1mdW5jdGlvbihhLGIsYyxkLGUpe3lkKGMuc3JjKTt2YXIgZixnPXNkKGQsYyksaD1nP3RkKGQpOlwiXCI7dHJ5e2RvY3VtZW50LmFsbCYmKGY9YS5jcmVhdGVFbGVtZW50KCc8aWZyYW1lIGZyYW1lYm9yZGVyPVwiJytXYShTdHJpbmcoYy5mcmFtZWJvcmRlcikpKydcIiBzY3JvbGxpbmc9XCInK1dhKFN0cmluZyhjLnNjcm9sbGluZykpKydcIiAnK2grJyBuYW1lPVwiJytXYShTdHJpbmcoYy5uYW1lKSkrJ1wiLz4nKSl9Y2F0Y2gobCl7fWZpbmFsbHl7Znx8XG4gKGY9YS5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpLGcmJihmLm9ubG9hZD1mdW5jdGlvbigpe2Yub25sb2FkPW51bGw7Zy5jYWxsKHRoaXMpfSx1ZChkKSkpfWYuc2V0QXR0cmlidXRlKFwibmctbm9uLWJpbmRhYmxlXCIsXCJcIik7Zm9yKHZhciBrIGluIGMpYT1jW2tdLFwic3R5bGVcIj09PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgYT9EKGEsZi5zdHlsZSk6d2Rba118fGYuc2V0QXR0cmlidXRlKGssU3RyaW5nKGEpKTsoaz1lJiZlLmJlZm9yZU5vZGV8fG51bGwpfHxlJiZlLmRvbnRjbGVhcnx8b2IoYik7Yi5pbnNlcnRCZWZvcmUoZixrKTtmPWs/ay5wcmV2aW91c1NpYmxpbmc6Yi5sYXN0Q2hpbGQ7Yy5hbGxvd3RyYW5zcGFyZW5jeSYmKGYuYWxsb3dUcmFuc3BhcmVuY3k9ITApO3JldHVybiBmfTt2YXIgQWQ9L146W1xcd10rJC8sQmQ9LzooW2EtekEtWl9dKyk6L2csQ2Q9ZnVuY3Rpb24oKXt2YXIgYT14YygpfHxcIjBcIixiPXljKCk7dmFyIGM9eGModm9pZCAwKXx8YTt2YXIgZD15Yyh2b2lkIDApLGU9XCJcIjtjJiYoZSs9XCJ1L1wiK2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYykpK1wiL1wiKTtkJiYoZSs9XCJiL1wiK2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZCkpK1wiL1wiKTtjPWV8fG51bGw7KGU9KGQ9ITE9PT1RKFwiaXNMb2dnZWRJblwiKSk/XCJfL2ltL1wiOlwiXCIpJiYoYz1cIlwiKTt2YXIgZj1RKFwiaWZyYW1lcy86c29jaWFsaG9zdDpcIiksZz1RKFwiaWZyYW1lcy86aW1fc29jaWFsaG9zdDpcIik7cmV0dXJuIHVjPXtzb2NpYWxob3N0OmYsY3R4X3NvY2lhbGhvc3Q6ZD9nOmYsc2Vzc2lvbl9pbmRleDphLHNlc3Npb25fZGVsZWdhdGU6YixzZXNzaW9uX3ByZWZpeDpjLGltX3ByZWZpeDplfX0sRGQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2QoKVtiXXx8XCJcIn0sRWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsXG4gYyl7cmV0dXJuIGE/Q2QoKVtjXXx8YVtjXXx8XCJcIjpDZCgpW2NdfHxcIlwifX07dmFyIEZkPWZ1bmN0aW9uKGEpe3ZhciBiO2EubWF0Y2goL15odHRwcz8lM0EvaSkmJihiPWRlY29kZVVSSUNvbXBvbmVudChhKSk7cmV0dXJuIGhiKGRvY3VtZW50LGI/YjphKX0sR2Q9ZnVuY3Rpb24oYSl7YT1hfHxcImNhbm9uaWNhbFwiO2Zvcih2YXIgYj1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIiksYz0wLGQ9Yi5sZW5ndGg7YzxkO2MrKyl7dmFyIGU9YltjXSxmPWUuZ2V0QXR0cmlidXRlKFwicmVsXCIpO2lmKGYmJmYudG9Mb3dlckNhc2UoKT09YSYmKGU9ZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpKSYmKGU9RmQoZSkpJiZudWxsIT1lLm1hdGNoKC9eaHR0cHM/OlxcL1xcL1tcXHdcXC1fXFwuXSsvaSkpcmV0dXJuIGV9cmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmfTt2YXIgSGQ9e3NlOlwiMFwifSxJZD17cG9zdDohMH0sSmQ9e3N0eWxlOlwicG9zaXRpb246YWJzb2x1dGU7dG9wOi0xMDAwMHB4O3dpZHRoOjQ1MHB4O21hcmdpbjowcHg7Ym9yZGVyLXN0eWxlOm5vbmVcIn0sS2Q9XCJvblBsdXNPbmUgX3JlYWR5IF9jbG9zZSBfb3BlbiBfcmVzaXplTWUgX3JlbmRlcnN0YXJ0IG9uY2lyY2xlZCBkcmVmcmVzaCBlcmVmcmVzaFwiLnNwbGl0KFwiIFwiKSxMZD1BKEssXCJXSVwiLEIoKSksTWQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkO3ZhciBlPXt9O3ZhciBmPWQ9YTtcInBsdXNcIj09YSYmYi5hY3Rpb24mJihkPWErXCJfXCIrYi5hY3Rpb24sZj1hK1wiL1wiK2IuYWN0aW9uKTsoZD1RKFwiaWZyYW1lcy9cIitkK1wiL3VybFwiKSl8fChkPVwiOmltX3NvY2lhbGhvc3Q6LzpzZXNzaW9uX3ByZWZpeDo6aW1fcHJlZml4Ol8vd2lkZ2V0L3JlbmRlci9cIitmK1wiP3VzZWdhcGk9MVwiKTtmb3IodmFyIGcgaW4gSGQpZVtnXT1nK1wiL1wiKyhiW2ddfHxIZFtnXSkrXCIvXCI7ZT1oYih6LGQucmVwbGFjZShCZCxcbiBFZChlKSkpO2c9XCJpZnJhbWVzL1wiK2ErXCIvcGFyYW1zL1wiO2Y9e307RChiLGYpOyhkPVEoXCJsYW5nXCIpfHxRKFwiZ3dpZGdldC9sYW5nXCIpKSYmKGYuaGw9ZCk7SWRbYV18fChmLm9yaWdpbj13aW5kb3cubG9jYXRpb24ub3JpZ2lufHx3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wrXCIvL1wiK3dpbmRvdy5sb2NhdGlvbi5ob3N0KTtmLmV4cD1RKGcrXCJleHBcIik7aWYoZz1RKGcrXCJsb2NhdGlvblwiKSlmb3IoZD0wO2Q8Zy5sZW5ndGg7ZCsrKXt2YXIgaD1nW2RdO2ZbaF09eC5sb2NhdGlvbltoXX1zd2l0Y2goYSl7Y2FzZSBcInBsdXNcIjpjYXNlIFwiZm9sbG93XCI6Zz1mLmhyZWY7ZD1iLmFjdGlvbj92b2lkIDA6XCJwdWJsaXNoZXJcIjtnPShnPVwic3RyaW5nXCI9PXR5cGVvZiBnP2c6dm9pZCAwKT9GZChnKTpHZChkKTtmLnVybD1nO2RlbGV0ZSBmLmhyZWY7YnJlYWs7Y2FzZSBcInBsdXNvbmVcIjpnPShnPWIuaHJlZik/RmQoZyk6R2QoKTtmLnVybD1nO2c9Yi5kYjtkPVEoKTtudWxsPT1nJiZkJiYoZz1kLmRiLFxuIG51bGw9PWcmJihnPWQuZ3dpZGdldCYmZC5nd2lkZ2V0LmRiKSk7Zi5kYj1nfHx2b2lkIDA7Zz1iLmVjcDtkPVEoKTtudWxsPT1nJiZkJiYoZz1kLmVjcCxudWxsPT1nJiYoZz1kLmd3aWRnZXQmJmQuZ3dpZGdldC5lY3ApKTtmLmVjcD1nfHx2b2lkIDA7ZGVsZXRlIGYuaHJlZjticmVhaztjYXNlIFwic2lnbmluXCI6Zi51cmw9R2QoKX1LLklMSSYmKGYuaWxvYWRlcj1cIjFcIik7ZGVsZXRlIGZbXCJkYXRhLW9ubG9hZFwiXTtkZWxldGUgZi5yZDtmb3IodmFyIGsgaW4gSGQpZltrXSYmZGVsZXRlIGZba107Zi5nc3JjPVEoXCJpZnJhbWVzLzpzb3VyY2U6XCIpO2s9UShcImlubGluZS9jc3NcIik7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBrJiYwPGMmJms+PWMmJihmLmljPVwiMVwiKTtrPS9eI3xeZnItLztjPXt9O2Zvcih2YXIgbCBpbiBmKUMoZixsKSYmay50ZXN0KGwpJiYoY1tsLnJlcGxhY2UoayxcIlwiKV09ZltsXSxkZWxldGUgZltsXSk7bD1cInFcIj09UShcImlmcmFtZXMvXCIrYStcIi9wYXJhbXMvc2lcIik/ZjpcbiBjO2s9bWMoKTtmb3IodmFyIG4gaW4gaykhQyhrLG4pfHxDKGYsbil8fEMoYyxuKXx8KGxbbl09a1tuXSk7bj1bXS5jb25jYXQoS2QpOyhsPVEoXCJpZnJhbWVzL1wiK2ErXCIvbWV0aG9kc1wiKSkmJlwib2JqZWN0XCI9PT10eXBlb2YgbCYmTmEudGVzdChsLnB1c2gpJiYobj1uLmNvbmNhdChsKSk7Zm9yKHZhciBwIGluIGIpQyhiLHApJiYvXm9uLy50ZXN0KHApJiYoXCJwbHVzXCIhPWF8fFwib25jb25uZWN0XCIhPXApJiYobi5wdXNoKHApLGRlbGV0ZSBmW3BdKTtkZWxldGUgZi5jYWxsYmFjaztjLl9tZXRob2RzPW4uam9pbihcIixcIik7cmV0dXJuIGZiKGUsZixjKX0sTmQ9W1wic3R5bGVcIixcImRhdGEtZ2FwaXNjYW5cIl0sUGQ9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPUIoKSxjPTAhPWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiZzpcIiksZD0wLGU9YS5hdHRyaWJ1dGVzLmxlbmd0aDtkPGU7ZCsrKXt2YXIgZj1hLmF0dHJpYnV0ZXNbZF0sZz1mLm5hbWUsaD1mLnZhbHVlOzA8PU9hLmNhbGwoTmQsXG4gZyl8fGMmJjAhPWcuaW5kZXhPZihcImRhdGEtXCIpfHxcIm51bGxcIj09PWh8fFwic3BlY2lmaWVkXCJpbiBmJiYhZi5zcGVjaWZpZWR8fChjJiYoZz1nLnN1YnN0cig1KSksYltnLnRvTG93ZXJDYXNlKCldPWgpfWE9YS5zdHlsZTsoYz1PZChhJiZhLmhlaWdodCkpJiYoYi5oZWlnaHQ9U3RyaW5nKGMpKTsoYT1PZChhJiZhLndpZHRoKSkmJihiLndpZHRoPVN0cmluZyhhKSk7cmV0dXJuIGJ9LE9kPWZ1bmN0aW9uKGEpe3ZhciBiPXZvaWQgMDtcIm51bWJlclwiPT09dHlwZW9mIGE/Yj1hOlwic3RyaW5nXCI9PT10eXBlb2YgYSYmKGI9cGFyc2VJbnQoYSwxMCkpO3JldHVybiBifSxSZD1mdW5jdGlvbigpe3ZhciBhPUsuZHJ3O3NjKGZ1bmN0aW9uKGIpe2lmKGEhPT1iLmlkJiY0IT1iLnN0YXRlJiZcInNoYXJlXCIhPWIudHlwZSl7dmFyIGM9Yi5pZCxkPWIudHlwZSxlPWIudXJsO2I9Yi51c2VyUGFyYW1zO3ZhciBmPXouZ2V0RWxlbWVudEJ5SWQoYyk7aWYoZil7dmFyIGc9TWQoZCxiLDApO2c/KGY9Zi5wYXJlbnROb2RlLFxuIGUucmVwbGFjZSgvIy4qLyxcIlwiKS5yZXBsYWNlKC8oXFw/fCYpaWM9MS8sXCJcIikhPT1nLnJlcGxhY2UoLyMuKi8sXCJcIikucmVwbGFjZSgvKFxcP3wmKWljPTEvLFwiXCIpJiYoYi5kb250Y2xlYXI9ITAsYi5yZD0hMCxiLnJpPSEwLGIudHlwZT1kLFFkKGYsYiksKGQ9UltmLmxhc3RDaGlsZC5pZF0pJiYoZC5vaWQ9YyksdGMoYyw0KSkpOmRlbGV0ZSBSW2NdfWVsc2UgZGVsZXRlIFJbY119fSl9O3ZhciBTZCxUZCxYLFVkLFZkLFdkPS8oPzpefFxccylnLSgoXFxTKSopKD86JHxcXHMpLyxYZD17cGx1c29uZTohMCxhdXRvY29tcGxldGU6ITAscHJvZmlsZTohMCxzaWduaW46ITAsc2lnbmluMjohMH07U2Q9QShLLFwiU1dcIixCKCkpO1RkPUEoSyxcIlNBXCIsQigpKTtYPUEoSyxcIlNNXCIsQigpKTtVZD1BKEssXCJGV1wiLFtdKTtWZD1udWxsO1xuIHZhciBaZD1mdW5jdGlvbihhLGIpe1lkKHZvaWQgMCwhMSxhLGIpfSxZZD1mdW5jdGlvbihhLGIsYyxkKXtMKFwicHMwXCIsITApO2M9KFwic3RyaW5nXCI9PT10eXBlb2YgYz9kb2N1bWVudC5nZXRFbGVtZW50QnlJZChjKTpjKXx8ejt2YXIgZT16LmRvY3VtZW50TW9kZTtpZihjLnF1ZXJ5U2VsZWN0b3JBbGwmJighZXx8ODxlKSl7ZT1kP1tkXTpYYShTZCkuY29uY2F0KFhhKFRkKSkuY29uY2F0KFhhKFgpKTtmb3IodmFyIGY9W10sZz0wO2c8ZS5sZW5ndGg7ZysrKXt2YXIgaD1lW2ddO2YucHVzaChcIi5nLVwiK2gsXCJnXFxcXDpcIitoKX1lPWMucXVlcnlTZWxlY3RvckFsbChmLmpvaW4oXCIsXCIpKX1lbHNlIGU9Yy5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIik7Yz1CKCk7Zm9yKGY9MDtmPGUubGVuZ3RoO2YrKyl7Zz1lW2ZdO3ZhciBrPWc7aD1kO3ZhciBsPWsubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxuPXZvaWQgMDtpZihrLmdldEF0dHJpYnV0ZShcImRhdGEtZ2FwaXNjYW5cIikpaD1udWxsO2Vsc2V7dmFyIHA9XG4gbC5pbmRleE9mKFwiZzpcIik7MD09cD9uPWwuc3Vic3RyKDIpOihwPShwPVN0cmluZyhrLmNsYXNzTmFtZXx8ay5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSkpJiZXZC5leGVjKHApKSYmKG49cFsxXSk7aD0hbnx8IShTZFtuXXx8VGRbbl18fFhbbl0pfHxoJiZuIT09aD9udWxsOm59aCYmKFhkW2hdfHwwPT1nLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImc6XCIpfHwwIT1YYShQZChnKSkubGVuZ3RoKSYmKGcuc2V0QXR0cmlidXRlKFwiZGF0YS1nYXBpc2NhblwiLCEwKSxBKGMsaCxbXSkucHVzaChnKSl9aWYoYilmb3IodmFyIHIgaW4gYylmb3IoYj1jW3JdLGQ9MDtkPGIubGVuZ3RoO2QrKyliW2RdLnNldEF0dHJpYnV0ZShcImRhdGEtb25sb2FkXCIsITApO2Zvcih2YXIgdSBpbiBjKVVkLnB1c2godSk7TChcInBzMVwiLCEwKTtpZigocj1VZC5qb2luKFwiOlwiKSl8fGEpdHJ5e0YubG9hZChyLGEpfWNhdGNoKEcpe3BjKEcpO3JldHVybn1pZigkZChWZHx8e30pKWZvcih2YXIgeSBpbiBjKXthPVxuIGNbeV07dT0wO2ZvcihiPWEubGVuZ3RoO3U8Yjt1KyspYVt1XS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWdhcGlzY2FuXCIpO2FlKHkpfWVsc2V7ZD1bXTtmb3IoeSBpbiBjKWZvcihhPWNbeV0sdT0wLGI9YS5sZW5ndGg7dTxiO3UrKyllPWFbdV0sYmUoeSxlLFBkKGUpLGQsYik7Y2UocixkKX19LGRlPWZ1bmN0aW9uKGEpe3ZhciBiPUEoRixhLHt9KTtiLmdvfHwoYi5nbz1mdW5jdGlvbihjKXtyZXR1cm4gWmQoYyxhKX0sYi5yZW5kZXI9ZnVuY3Rpb24oYyxkKXtkPWR8fHt9O2QudHlwZT1hO3JldHVybiBRZChjLGQpfSl9LGVlPWZ1bmN0aW9uKGEpe1NkW2FdPSEwfSxmZT1mdW5jdGlvbihhKXtUZFthXT0hMH0sZ2U9ZnVuY3Rpb24oYSl7WFthXT0hMH07dmFyIGFlPWZ1bmN0aW9uKGEsYil7dmFyIGM9c2IoYSk7YiYmYz8oYyhiKSwoYz1iLmlmcmFtZU5vZGUpJiZjLnNldEF0dHJpYnV0ZShcImRhdGEtZ2FwaWF0dGFjaGVkXCIsITApKTpGLmxvYWQoYSxmdW5jdGlvbigpe3ZhciBkPXNiKGEpLGU9YiYmYi5pZnJhbWVOb2RlLGY9YiYmYi51c2VyUGFyYW1zO2UmJmQ/KGQoYiksZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWdhcGlhdHRhY2hlZFwiLCEwKSk6KGQ9RlthXS5nbyxcInNpZ25pbjJcIj09YT9kKGUsZik6ZChlJiZlLnBhcmVudE5vZGUsZikpfSl9LCRkPWZ1bmN0aW9uKCl7cmV0dXJuITF9LGNlPWZ1bmN0aW9uKCl7fSxiZT1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXtzd2l0Y2goaGUoYixhLGYpKXtjYXNlIDA6YT1YW2FdP2ErXCJfYW5ub3RhdGlvblwiOmE7ZD17fTtkLmlmcmFtZU5vZGU9YjtkLnVzZXJQYXJhbXM9YzthZShhLGQpO2JyZWFrO2Nhc2UgMTppZihiLnBhcmVudE5vZGUpe2Zvcih2YXIgaCBpbiBjKXtpZihmPUMoYyxoKSlmPWNbaF0sXG4gZj0hIWYmJlwib2JqZWN0XCI9PT10eXBlb2YgZiYmKCFmLnRvU3RyaW5nfHxmLnRvU3RyaW5nPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ3x8Zi50b1N0cmluZz09PUFycmF5LnByb3RvdHlwZS50b1N0cmluZyk7aWYoZil0cnl7Y1toXT0kYyhjW2hdKX1jYXRjaCh5KXtkZWxldGUgY1toXX19Zj0hMDtjLmRvbnRjbGVhciYmKGY9ITEpO2RlbGV0ZSBjLmRvbnRjbGVhcjtyYygpO2g9TWQoYSxjLGUpO2U9Z3x8e307ZS5hbGxvd1Bvc3Q9MTtlLmF0dHJpYnV0ZXM9SmQ7ZS5kb250Y2xlYXI9IWY7Zz17fTtnLnVzZXJQYXJhbXM9YztnLnVybD1oO2cudHlwZT1hO2lmKGMucmQpdmFyIGs9YjtlbHNlIGs9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShcImRhdGEtZ2FwaXN0dWJcIiwhMCksay5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246YWJzb2x1dGU7d2lkdGg6NDUwcHg7bGVmdDotMTAwMDBweDtcIixiLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGssYik7Zy5zaXRlRWxlbWVudD1cbiBrO2suaWR8fChiPWssQShMZCxhLDApLGY9XCJfX19cIithK1wiX1wiK0xkW2FdKyssYi5pZD1mKTtiPUIoKTtiW1wiPnR5cGVcIl09YTtEKGMsYik7Zj1oO2M9aztoPWV8fHt9O2I9aC5hdHRyaWJ1dGVzfHx7fTtFKCEoaC5hbGxvd1Bvc3R8fGguZm9yY2VQb3N0KXx8IWIub25sb2FkLFwib25sb2FkIGlzIG5vdCBzdXBwb3J0ZWQgYnkgcG9zdCBpZnJhbWUgKGFsbG93UG9zdCBvciBmb3JjZVBvc3QpXCIpO2U9Yj1mO0FkLnRlc3QoYikmJihlPVEoXCJpZnJhbWVzL1wiK2Uuc3Vic3RyaW5nKDEpK1wiL3VybFwiKSxFKCEhZSxcIlVua25vd24gaWZyYW1lIHVybCBjb25maWcgZm9yIC0gXCIrYikpO2Y9aGIoeixlLnJlcGxhY2UoQmQsRGQpKTtiPWMub3duZXJEb2N1bWVudHx8ejtrPTA7ZG8gZT1oLmlkfHxbXCJJXCIseGQrKyxcIl9cIiwobmV3IERhdGUpLmdldFRpbWUoKV0uam9pbihcIlwiKTt3aGlsZShiLmdldEVsZW1lbnRCeUlkKGUpJiY1Pisrayk7RSg1PmssXCJFcnJvciBjcmVhdGluZyBpZnJhbWUgaWRcIik7az17fTtcbiB2YXIgbD17fTtiLmRvY3VtZW50TW9kZSYmOT5iLmRvY3VtZW50TW9kZSYmKGsuaG9zdGllbW9kZT1iLmRvY3VtZW50TW9kZSk7RChoLnF1ZXJ5UGFyYW1zfHx7fSxrKTtEKGguZnJhZ21lbnRQYXJhbXN8fHt9LGwpO3ZhciBuPWgucGZuYW1lO3ZhciBwPUIoKTtRKFwiaWZyYW1lcy9kcm9wTGVnYWN5SWRQYXJhbVwiKXx8KHAuaWQ9ZSk7cC5fZ2ZpZD1lO3AucGFyZW50PWIubG9jYXRpb24ucHJvdG9jb2wrXCIvL1wiK2IubG9jYXRpb24uaG9zdDt2YXIgcj1IKGIubG9jYXRpb24uaHJlZixcInBhcmVudFwiKTtuPW58fFwiXCI7IW4mJnImJihyPUgoYi5sb2NhdGlvbi5ocmVmLFwiX2dmaWRcIixcIlwiKXx8SChiLmxvY2F0aW9uLmhyZWYsXCJpZFwiLFwiXCIpLG49SChiLmxvY2F0aW9uLmhyZWYsXCJwZm5hbWVcIixcIlwiKSxuPXI/bitcIi9cIityOlwiXCIpO258fChyPVpjKEgoYi5sb2NhdGlvbi5ocmVmLFwiamNwXCIsXCJcIikpKSYmXCJvYmplY3RcIj09dHlwZW9mIHImJihuPShuPXIuaWQpP3IucGZuYW1lK1wiL1wiK246XCJcIik7cC5wZm5hbWU9XG4gbjtoLmNvbm5lY3RXaXRoSnNvblBhcmFtJiYocj17fSxyLmpjcD0kYyhwKSxwPXIpO3I9SChmLFwicnBjdG9rZW5cIil8fGsucnBjdG9rZW58fGwucnBjdG9rZW47cnx8KHI9aC5ycGN0b2tlbnx8U3RyaW5nKE1hdGgucm91bmQoMUU4KihoZD9xZCgpOnBkKCkpKSkscC5ycGN0b2tlbj1yKTtoLnJwY3Rva2VuPXI7RChwLGguY29ubmVjdFdpdGhRdWVyeVBhcmFtcz9rOmwpO3I9Yi5sb2NhdGlvbi5ocmVmO3A9QigpOyhuPUgocixcIl9ic2hcIixLLmJzaCkpJiYocC5fYnNoPW4pOyhyPXFiKHIpKSYmKHAuanNoPXIpO2guaGludEluRnJhZ21lbnQ/RChwLGwpOkQocCxrKTtmPWZiKGYsayxsLGgucGFyYW1zU2VyaWFsaXplcik7bD1CKCk7RCh2ZCxsKTtEKGguYXR0cmlidXRlcyxsKTtsLm5hbWU9bC5pZD1lO2wuc3JjPWY7aC5ldXJsPWY7az1ofHx7fTtwPSEhay5hbGxvd1Bvc3Q7aWYoay5mb3JjZVBvc3R8fHAmJjJFMzxmLmxlbmd0aCl7az1JKGYpO2wuc3JjPVwiXCI7aC5kcm9wRGF0YVBvc3RvcmlnaW58fFxuIChsW1wiZGF0YS1wb3N0b3JpZ2luXCJdPWYpO2Y9emQoYixjLGwsZSk7aWYoLTEhPW5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIldlYktpdFwiKSl7dmFyIHU9Zi5jb250ZW50V2luZG93LmRvY3VtZW50O3Uub3BlbigpO2w9dS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3A9e307cj1lK1wiX2lubmVyXCI7cC5uYW1lPXI7cC5zcmM9XCJcIjtwLnN0eWxlPVwiZGlzcGxheTpub25lXCI7emQoYixsLHAscixoKX1sPShoPWsucXVlcnlbMF0pP2guc3BsaXQoXCImXCIpOltdO2g9W107Zm9yKHA9MDtwPGwubGVuZ3RoO3ArKylyPWxbcF0uc3BsaXQoXCI9XCIsMiksaC5wdXNoKFtkZWNvZGVVUklDb21wb25lbnQoclswXSksZGVjb2RlVVJJQ29tcG9uZW50KHJbMV0pXSk7ay5xdWVyeT1bXTtsPWRiKGspO0UoaWIudGVzdChsKSxcIkludmFsaWQgVVJMOiBcIitsKTtrPWIuY3JlYXRlRWxlbWVudChcImZvcm1cIik7ay5tZXRob2Q9XCJQT1NUXCI7ay50YXJnZXQ9ZTtrLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7ZT1sIGluc3RhbmNlb2ZcbiB2P2w6RmEobCk7eGEoayxcIkhUTUxGb3JtRWxlbWVudFwiKS5hY3Rpb249RGEoZSk7Zm9yKGU9MDtlPGgubGVuZ3RoO2UrKylsPWIuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLGwudHlwZT1cImhpZGRlblwiLGwubmFtZT1oW2VdWzBdLGwudmFsdWU9aFtlXVsxXSxrLmFwcGVuZENoaWxkKGwpO2MuYXBwZW5kQ2hpbGQoayk7ay5zdWJtaXQoKTtrLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk7dSYmdS5jbG9zZSgpO3U9Zn1lbHNlIHU9emQoYixjLGwsZSxoKTtnLmlmcmFtZU5vZGU9dTtnLmlkPXUuZ2V0QXR0cmlidXRlKFwiaWRcIik7dT1nLmlkO2M9QigpO2MuaWQ9dTtjLnVzZXJQYXJhbXM9Zy51c2VyUGFyYW1zO2MudXJsPWcudXJsO2MudHlwZT1nLnR5cGU7Yy5zdGF0ZT0xO1JbdV09Yzt1PWd9ZWxzZSB1PW51bGw7dSYmKChnPXUuaWQpJiZkLnB1c2goZyksYWUoYSx1KSl9fSxoZT1mdW5jdGlvbihhLGIsYyl7aWYoYSYmMT09PWEubm9kZVR5cGUmJmIpe2lmKGMpcmV0dXJuIDE7aWYoWFtiXSl7aWYocGJbYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSlyZXR1cm4oYT1cbiBhLmlubmVySFRNTCkmJmEucmVwbGFjZSgvXltcXHNcXHhhMF0rfFtcXHNcXHhhMF0rJC9nLFwiXCIpPzA6MX1lbHNle2lmKFRkW2JdKXJldHVybiAwO2lmKFNkW2JdKXJldHVybiAxfX1yZXR1cm4gbnVsbH0sUWQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz1iLnR5cGU7ZGVsZXRlIGIudHlwZTt2YXIgZD0oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKGEpOmEpfHx2b2lkIDA7aWYoZCl7YT17fTtmb3IodmFyIGUgaW4gYilDKGIsZSkmJihhW2UudG9Mb3dlckNhc2UoKV09YltlXSk7YS5yZD0xOyhiPSEhYS5yaSkmJmRlbGV0ZSBhLnJpO2U9W107YmUoYyxkLGEsZSwwLGIsdm9pZCAwKTtjZShjLGUpfWVsc2UgcGMoXCJzdHJpbmdcIj09PVwiZ2FwaS5cIitjK1wiLnJlbmRlcjogbWlzc2luZyBlbGVtZW50IFwiK3R5cGVvZiBhP2E6XCJcIil9O0EoRixcInBsYXRmb3JtXCIse30pLmdvPVpkOyRkPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXCJfY1wiLFwianNsXCIsXCJoXCJdLGM9MDtjPGIubGVuZ3RoJiZhO2MrKylhPWFbYltjXV07Yj1xYihMYS5ocmVmKTtyZXR1cm4hYXx8MCE9YS5pbmRleE9mKFwibjtcIikmJjAhPWIuaW5kZXhPZihcIm47XCIpJiZhIT09Yn07Y2U9ZnVuY3Rpb24oYSxiKXtpZShhLGIpfTt2YXIgbGI9ZnVuY3Rpb24oYSl7WWQoYSwhMCl9LGplPWZ1bmN0aW9uKGEsYil7Yj1ifHxbXTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoOysrYylhKGJbY10pO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZGUoYlthXSl9O1xuIE4ucHVzaChbXCJwbGF0Zm9ybVwiLGZ1bmN0aW9uKGEsYixjKXtWZD1jO2ImJlVkLnB1c2goYik7amUoZWUsYSk7amUoZmUsYy5fYy5hbm5vdGF0aW9uKTtqZShnZSxjLl9jLmJpbW9kYWwpO2ljKCk7Z2MoKTtpZihcImV4cGxpY2l0XCIhPVEoXCJwYXJzZXRhZ3NcIikpe3JiKGEpO25jKG1jKCkpJiYhUShcImRpc2FibGVSZWFsdGltZUNhbGxiYWNrXCIpJiZyYygpO2lmKGMmJihhPWMuY2FsbGJhY2spKXt2YXIgZD1ZYShhKTtkZWxldGUgYy5jYWxsYmFja31uYihmdW5jdGlvbigpe2xiKGQpfSl9fV0pO0YuX3BsPSEwO3ZhciBrZT1mdW5jdGlvbihhKXthPShhPVJbYV0pP2Eub2lkOnZvaWQgMDtpZihhKXt2YXIgYj16LmdldEVsZW1lbnRCeUlkKGEpO2ImJmIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTtkZWxldGUgUlthXTtrZShhKX19O3ZhciBsZT0vXlxce2g6Jy8sbWU9L14hXy8sbmU9XCJcIixpZT1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoKXtqYihcIm1lc3NhZ2VcIixkLFwicmVtb3ZlXCIsXCJkZVwiKX1mdW5jdGlvbiBkKGYpe3ZhciBnPWYuZGF0YSxoPWYub3JpZ2luO2lmKG9lKGcsYikpe3ZhciBrPWU7ZT0hMTtrJiZMKFwicnFlXCIpO3BlKGEsZnVuY3Rpb24oKXtrJiZMKFwicnFkXCIpO2MoKTtmb3IodmFyIGw9QShLLFwiUlBNUVwiLFtdKSxuPTA7bjxsLmxlbmd0aDtuKyspbFtuXSh7ZGF0YTpnLG9yaWdpbjpofSl9KX19aWYoMCE9PWIubGVuZ3RoKXtuZT1IKExhLmhyZWYsXCJwZm5hbWVcIixcIlwiKTt2YXIgZT0hMDtqYihcIm1lc3NhZ2VcIixkLFwiYWRkXCIsXCJhdFwiKTthYyhhLGMpfX0sb2U9ZnVuY3Rpb24oYSxiKXthPVN0cmluZyhhKTtpZihsZS50ZXN0KGEpKXJldHVybiEwO3ZhciBjPSExO21lLnRlc3QoYSkmJihjPSEwLGE9YS5zdWJzdHIoMikpO2lmKCEvXlxcey8udGVzdChhKSlyZXR1cm4hMTt2YXIgZD1aYyhhKTtpZighZClyZXR1cm4hMTtcbiBhPWQuZjtpZihkLnMmJmEmJi0xIT1PYS5jYWxsKGIsYSkpe2lmKFwiX3JlbmRlcnN0YXJ0XCI9PT1kLnN8fGQucz09PW5lK1wiL1wiK2ErXCI6Ol9yZW5kZXJzdGFydFwiKWlmKGQ9ZC5hJiZkLmFbYz8wOjFdLGI9ei5nZXRFbGVtZW50QnlJZChhKSx0YyhhLDIpLGQmJmImJmQud2lkdGgmJmQuaGVpZ2h0KXthOntjPWIucGFyZW50Tm9kZTthPWR8fHt9O2lmKHFjKCkpe3ZhciBlPWIuaWQ7aWYoZSl7ZD0oZD1SW2VdKT9kLnN0YXRlOnZvaWQgMDtpZigxPT09ZHx8ND09PWQpYnJlYWsgYTtrZShlKX19KGQ9Yy5uZXh0U2libGluZykmJmQuZ2V0QXR0cmlidXRlJiZkLmdldEF0dHJpYnV0ZShcImRhdGEtZ2FwaXN0dWJcIikmJihjLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZCksYy5zdHlsZS5jc3NUZXh0PVwiXCIpO2Q9YS53aWR0aDt2YXIgZj1hLmhlaWdodCxnPWMuc3R5bGU7Zy50ZXh0SW5kZW50PVwiMFwiO2cubWFyZ2luPVwiMFwiO2cucGFkZGluZz1cIjBcIjtnLmJhY2tncm91bmQ9XCJ0cmFuc3BhcmVudFwiO2cuYm9yZGVyU3R5bGU9XG4gXCJub25lXCI7Zy5jc3NGbG9hdD1cIm5vbmVcIjtnLnN0eWxlRmxvYXQ9XCJub25lXCI7Zy5saW5lSGVpZ2h0PVwibm9ybWFsXCI7Zy5mb250U2l6ZT1cIjFweFwiO2cudmVydGljYWxBbGlnbj1cImJhc2VsaW5lXCI7Yz1jLnN0eWxlO2MuZGlzcGxheT1cImlubGluZS1ibG9ja1wiO2c9Yi5zdHlsZTtnLnBvc2l0aW9uPVwic3RhdGljXCI7Zy5sZWZ0PVwiMFwiO2cudG9wPVwiMFwiO2cudmlzaWJpbGl0eT1cInZpc2libGVcIjtkJiYoYy53aWR0aD1nLndpZHRoPWQrXCJweFwiKTtmJiYoYy5oZWlnaHQ9Zy5oZWlnaHQ9ZitcInB4XCIpO2EudmVydGljYWxBbGlnbiYmKGMudmVydGljYWxBbGlnbj1hLnZlcnRpY2FsQWxpZ24pO2UmJnRjKGUsMyl9YltcImRhdGEtY3NpLXdkdFwiXT0obmV3IERhdGUpLmdldFRpbWUoKX1yZXR1cm4hMH1yZXR1cm4hMX0scGU9ZnVuY3Rpb24oYSxiKXthYyhhLGIpfTt2YXIgcWU9ZnVuY3Rpb24oYSxiKXt0aGlzLkw9YTthPWJ8fHt9O3RoaXMuZmE9TnVtYmVyKGEubWF4QWdlKXx8MDt0aGlzLlU9YS5kb21haW47dGhpcy5YPWEucGF0aDt0aGlzLmdhPSEhYS5zZWN1cmV9O3FlLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuTCtcIj1cIixiPWRvY3VtZW50LmNvb2tpZS5zcGxpdCgvO1xccyovKSxjPTA7YzxiLmxlbmd0aDsrK2Mpe3ZhciBkPWJbY107aWYoMD09ZC5pbmRleE9mKGEpKXJldHVybiBkLnN1YnN0cihhLmxlbmd0aCl9fTtcbiBxZS5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24oYSxiKXtpZighcmUudGVzdCh0aGlzLkwpKXRocm93XCJJbnZhbGlkIGNvb2tpZSBuYW1lXCI7aWYoIXNlLnRlc3QoYSkpdGhyb3dcIkludmFsaWQgY29va2llIHZhbHVlXCI7YT10aGlzLkwrXCI9XCIrYTt0aGlzLlUmJihhKz1cIjtkb21haW49XCIrdGhpcy5VKTt0aGlzLlgmJihhKz1cIjtwYXRoPVwiK3RoaXMuWCk7Yj1cIm51bWJlclwiPT09dHlwZW9mIGI/Yjp0aGlzLmZhO2lmKDA8PWIpe3ZhciBjPW5ldyBEYXRlO2Muc2V0U2Vjb25kcyhjLmdldFNlY29uZHMoKStiKTthKz1cIjtleHBpcmVzPVwiK2MudG9VVENTdHJpbmcoKX10aGlzLmdhJiYoYSs9XCI7c2VjdXJlXCIpO2RvY3VtZW50LmNvb2tpZT1hO3JldHVybiEwfTtxZS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLndyaXRlKFwiXCIsMCl9O3ZhciBzZT0vXlstKy9fPS46fCUmYS16QS1aMC05QF0qJC8scmU9L15bQS1aX11bQS1aMC05X117MCw2M30kLztcbiBxZS5pdGVyYXRlPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1kb2N1bWVudC5jb29raWUuc3BsaXQoLztcXHMqLyksYz0wO2M8Yi5sZW5ndGg7KytjKXt2YXIgZD1iW2NdLnNwbGl0KFwiPVwiKSxlPWQuc2hpZnQoKTthKGUsZC5qb2luKFwiPVwiKSl9fTt2YXIgdGU9ZnVuY3Rpb24oYSl7dGhpcy5CPWF9O3RlLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKCl7aWYoWS5oYXNPd25Qcm9wZXJ0eSh0aGlzLkIpKXJldHVybiBZW3RoaXMuQl19O3RlLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbihhKXtZW3RoaXMuQl09YTtyZXR1cm4hMH07dGUucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7ZGVsZXRlIFlbdGhpcy5CXX07dmFyIFk9e307dGUuaXRlcmF0ZT1mdW5jdGlvbihhKXtmb3IodmFyIGIgaW4gWSlZLmhhc093blByb3BlcnR5KGIpJiZhKGIsWVtiXSl9O3ZhciB1ZT1cImh0dHBzOlwiPT09d2luZG93LmxvY2F0aW9uLnByb3RvY29sLHZlPXVlfHxcImh0dHA6XCI9PT13aW5kb3cubG9jYXRpb24ucHJvdG9jb2w/cWU6dGUsd2U9ZnVuY3Rpb24oYSl7dmFyIGI9YS5zdWJzdHIoMSksYz1cIlwiLGQ9d2luZG93LmxvY2F0aW9uLmhvc3RuYW1lO2lmKFwiXCIhPT1iKXtjPXBhcnNlSW50KGIsMTApO2lmKGlzTmFOKGMpKXJldHVybiBudWxsO2I9ZC5zcGxpdChcIi5cIik7aWYoYi5sZW5ndGg8Yy0xKXJldHVybiBudWxsO2IubGVuZ3RoPT1jLTEmJihkPVwiLlwiK2QpfWVsc2UgZD1cIlwiO3JldHVybntpOlwiU1wiPT1hLmNoYXJBdCgwKSxkb21haW46ZCxsOmN9fSx4ZT1mdW5jdGlvbigpe3ZhciBhLGI9bnVsbDt2ZS5pdGVyYXRlKGZ1bmN0aW9uKGMsZCl7MD09PWMuaW5kZXhPZihcIkdfQVVUSFVTRVJfXCIpJiYoYz13ZShjLnN1YnN0cmluZygxMSkpLCFhfHxjLmkmJiFhLml8fGMuaT09YS5pJiZjLmw+YS5sKSYmKGE9YyxiPWQpfSk7cmV0dXJue2VhOmEsRjpifX07dmFyIHllPWZ1bmN0aW9uKGEpe2lmKDAhPT1hLmluZGV4T2YoXCJHQ1NDXCIpKXJldHVybiBudWxsO3ZhciBiPXtXOiExfTthPWEuc3Vic3RyKDQpO2lmKCFhKXJldHVybiBiO3ZhciBjPWEuY2hhckF0KDApO2E9YS5zdWJzdHIoMSk7dmFyIGQ9YS5sYXN0SW5kZXhPZihcIl9cIik7aWYoLTE9PWQpcmV0dXJuIGI7dmFyIGU9d2UoYS5zdWJzdHIoZCsxKSk7aWYobnVsbD09ZSlyZXR1cm4gYjthPWEuc3Vic3RyaW5nKDAsZCk7aWYoXCJfXCIhPT1hLmNoYXJBdCgwKSlyZXR1cm4gYjtkPVwiRVwiPT09YyYmZS5pO3JldHVybiFkJiYoXCJVXCIhPT1jfHxlLmkpfHxkJiYhdWU/Yjp7VzohMCxpOmQsamE6YS5zdWJzdHIoMSksZG9tYWluOmUuZG9tYWluLGw6ZS5sfX0semU9ZnVuY3Rpb24oYSl7aWYoIWEpcmV0dXJuW107YT1hLnNwbGl0KFwiPVwiKTtyZXR1cm4gYVsxXT9hWzFdLnNwbGl0KFwifFwiKTpbXX0sQWU9ZnVuY3Rpb24oYSl7YT1hLnNwbGl0KFwiOlwiKTtyZXR1cm57Y2xpZW50SWQ6YVswXS5zcGxpdChcIj1cIilbMV0sXG4gaWE6emUoYVsxXSksbGE6emUoYVsyXSksa2E6emUoYVszXSl9fSxCZT1mdW5jdGlvbigpe3ZhciBhPXhlKCksYj1hLmVhO2E9YS5GO2lmKG51bGwhPT1hKXt2YXIgYzt2ZS5pdGVyYXRlKGZ1bmN0aW9uKGYsZyl7KGY9eWUoZikpJiZmLlcmJmYuaT09Yi5pJiZmLmw9PWIubCYmKGM9Zyl9KTtpZihjKXt2YXIgZD1BZShjKSxlPWQmJmQuaWFbTnVtYmVyKGEpXTtkPWQmJmQuY2xpZW50SWQ7aWYoZSlyZXR1cm57RjphLGhhOmUsY2xpZW50SWQ6ZH19fXJldHVybiBudWxsfTt2YXIgWj1mdW5jdGlvbigpe3RoaXMuVD1DZX07Wi5wcm90b3R5cGUuJD1mdW5jdGlvbigpe3RoaXMuS3x8KHRoaXMudj0wLHRoaXMuSz0hMCx0aGlzLlkoKSl9O1oucHJvdG90eXBlLlk9ZnVuY3Rpb24oKXt0aGlzLksmJih0aGlzLlQoKT90aGlzLnY9dGhpcy5SOnRoaXMudj1NYXRoLm1pbigyKih0aGlzLnZ8fHRoaXMuUiksMTIwKSx3aW5kb3cuc2V0VGltZW91dChuYSh0aGlzLlksdGhpcyksMUUzKnRoaXMudikpfTtaLnByb3RvdHlwZS52PTA7Wi5wcm90b3R5cGUuUj0yO1oucHJvdG90eXBlLlQ9bnVsbDtaLnByb3RvdHlwZS5LPSExO2Zvcih2YXIgRGU9MDs2ND5EZTsrK0RlKTt2YXIgRWU9bnVsbDtxYz1mdW5jdGlvbigpe3JldHVybiBLLm9hPSEwfTtyYz1mdW5jdGlvbigpe0sub2E9ITA7dmFyIGE9QmUoKTsoYT1hJiZhLkYpJiZoYyhcImdvb2dsZWFwaXMuY29uZmlnL3Nlc3Npb25JbmRleFwiLGEpO0VlfHwoRWU9QShLLFwic3NcIixuZXcgWikpO2E9RWU7YS4kJiZhLiQoKX07XG4gdmFyIENlPWZ1bmN0aW9uKCl7dmFyIGE9QmUoKSxiPWEmJmEuaGF8fG51bGwsYz1hJiZhLmNsaWVudElkO2FjKFwiYXV0aFwiLHtjYWxsYmFjazpmdW5jdGlvbigpe3ZhciBkPXguZ2FwaS5hdXRoLGU9e2NsaWVudF9pZDpjLHNlc3Npb25fc3RhdGU6Yn07ZC5jaGVja1Nlc3Npb25TdGF0ZShlLGZ1bmN0aW9uKGYpe3ZhciBnPWUuc2Vzc2lvbl9zdGF0ZSxoPVEoXCJpc0xvZ2dlZEluXCIpO2Y9UShcImRlYnVnL2ZvcmNlSW1cIik/ITE6ZyYmZnx8IWcmJiFmO2lmKGg9aCE9ZiloYyhcImlzTG9nZ2VkSW5cIixmKSxyYygpLFJkKCksZnx8KChmPWQuc2lnbk91dCk/ZigpOihmPWQuc2V0VG9rZW4pJiZmKG51bGwpKTtmPW1jKCk7dmFyIGs9UShcInNhdmVkVXNlclN0YXRlXCIpO2c9ZC5fZ3VzcyhmLmNvb2tpZXBvbGljeSk7az1rIT1nJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgaztoYyhcInNhdmVkVXNlclN0YXRlXCIsZyk7KGh8fGspJiZuYyhmKSYmIVEoXCJkaXNhYmxlUmVhbHRpbWVDYWxsYmFja1wiKSYmZC5fcGltZihmLFxuICEwKX0pfX0pO3JldHVybiEwfTtMKFwiYnMwXCIsITAsd2luZG93LmdhcGkuX2JzKTtMKFwiYnMxXCIsITApO2RlbGV0ZSB3aW5kb3cuZ2FwaS5fYnM7fSkuY2FsbCh0aGlzKTtcbiB2YXIgZ2FwaUNvbXBsZXRlID0gZ2FwaS5sb2FkKFwiXCIse2NhbGxiYWNrOndpbmRvd1tcImdhcGlfb25sb2FkXCJdLF9jOntcImpzbFwiOntcImNpXCI6e1wiZGV2aWNlVHlwZVwiOlwiZGVza3RvcFwiLFwib2F1dGgtZmxvd1wiOntcImF1dGhVcmxcIjpcImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoXCIsXCJwcm94eVVybFwiOlwiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3Bvc3RtZXNzYWdlUmVsYXlcIixcImRpc2FibGVPcHRcIjp0cnVlLFwiaWRwSWZyYW1lVXJsXCI6XCJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvaWZyYW1lXCIsXCJ1c2VnYXBpXCI6ZmFsc2V9LFwiZGVidWdcIjp7XCJyZXBvcnRFeGNlcHRpb25SYXRlXCI6MC4wNSxcImZvcmNlSW1cIjpmYWxzZSxcInJldGhyb3dFeGNlcHRpb25cIjpmYWxzZSxcImhvc3RcIjpcImh0dHBzOi8vYXBpcy5nb29nbGUuY29tXCJ9LFwiZW5hYmxlTXVsdGlsb2dpblwiOnRydWUsXCJnb29nbGVhcGlzLmNvbmZpZ1wiOntcImF1dGhcIjp7XCJ1c2VGaXJzdFBhcnR5QXV0aFYyXCI6dHJ1ZX19LFwiaXNQbHVzVXNlclwiOmZhbHNlLFwiaW5saW5lXCI6e1wiY3NzXCI6MX0sXCJkaXNhYmxlUmVhbHRpbWVDYWxsYmFja1wiOmZhbHNlLFwiZHJpdmVfc2hhcmVcIjp7XCJza2lwSW5pdENvbW1hbmRcIjp0cnVlfSxcImNzaVwiOntcInJhdGVcIjowLjAxfSxcImNsaWVudFwiOntcImNvcnNcIjpmYWxzZX0sXCJpc0xvZ2dlZEluXCI6dHJ1ZSxcInNpZ25JbkRlcHJlY2F0aW9uXCI6e1wicmF0ZVwiOjAuMH0sXCJpbmNsdWRlX2dyYW50ZWRfc2NvcGVzXCI6dHJ1ZSxcImxsYW5nXCI6XCJwdFwiLFwiaWZyYW1lc1wiOntcInlvdXR1YmVcIjp7XCJwYXJhbXNcIjp7XCJsb2NhdGlvblwiOltcInNlYXJjaFwiLFwiaGFzaFwiXX0sXCJ1cmxcIjpcIjpzb2NpYWxob3N0Oi86c2Vzc2lvbl9wcmVmaXg6Xy93aWRnZXQvcmVuZGVyL3lvdXR1YmU/dXNlZ2FwaVxcdTAwM2QxXCIsXCJtZXRob2RzXCI6W1wic2Nyb2xsXCIsXCJvcGVud2luZG93XCJdfSxcInl0c3Vic2NyaWJlXCI6e1widXJsXCI6XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9zdWJzY3JpYmVfZW1iZWQ/dXNlZ2FwaVxcdTAwM2QxXCJ9LFwicGx1c19jaXJjbGVcIjp7XCJwYXJhbXNcIjp7XCJ1cmxcIjpcIlwifSxcInVybFwiOlwiOnNvY2lhbGhvc3Q6LzpzZXNzaW9uX3ByZWZpeDo6c2U6Xy93aWRnZXQvcGx1cy9jaXJjbGU/dXNlZ2FwaVxcdTAwM2QxXCJ9LFwicGx1c19zaGFyZVwiOntcInBhcmFtc1wiOntcInVybFwiOlwiXCJ9LFwidXJsXCI6XCI6c29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4OjpzZTpfLysxL3NoYXJlYnV0dG9uP3BsdXNTaGFyZVxcdTAwM2R0cnVlXFx1MDAyNnVzZWdhcGlcXHUwMDNkMVwifSxcInJicl9zXCI6e1wicGFyYW1zXCI6e1widXJsXCI6XCJcIn0sXCJ1cmxcIjpcIjpzb2NpYWxob3N0Oi86c2Vzc2lvbl9wcmVmaXg6OnNlOl8vd2lkZ2V0L3JlbmRlci9yZWNvYmFyc2ltcGxlc2Nyb2xsZXJcIn0sXCI6c291cmNlOlwiOlwiM3BcIixcInBsYXllbW1cIjp7XCJ1cmxcIjpcImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3dvcmsvZW1iZWRkZWQvc2VhcmNoP3VzZWdhcGlcXHUwMDNkMVxcdTAwMjZ1c2VnYXBpXFx1MDAzZDFcIn0sXCJzYXZldG9hbmRyb2lkcGF5XCI6e1widXJsXCI6XCJodHRwczovL3BheS5nb29nbGUuY29tL2dwL3Yvd2lkZ2V0L3NhdmVcIn0sXCJibG9nZ2VyXCI6e1wicGFyYW1zXCI6e1wibG9jYXRpb25cIjpbXCJzZWFyY2hcIixcImhhc2hcIl19LFwidXJsXCI6XCI6c29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4Ol8vd2lkZ2V0L3JlbmRlci9ibG9nZ2VyP3VzZWdhcGlcXHUwMDNkMVwiLFwibWV0aG9kc1wiOltcInNjcm9sbFwiLFwib3BlbndpbmRvd1wiXX0sXCJldndpZGdldFwiOntcInBhcmFtc1wiOntcInVybFwiOlwiXCJ9LFwidXJsXCI6XCI6c29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4Ol8vZXZlbnRzL3dpZGdldD91c2VnYXBpXFx1MDAzZDFcIn0sXCJwYXJ0bmVyc2JhZGdlXCI6e1widXJsXCI6XCJodHRwczovL3d3dy5nc3RhdGljLmNvbS9wYXJ0bmVycy9iYWRnZS90ZW1wbGF0ZXMvYmFkZ2UuaHRtbD91c2VnYXBpXFx1MDAzZDFcIn0sXCJkYXRhY29ubmVjdG9yXCI6e1widXJsXCI6XCJodHRwczovL2RhdGFjb25uZWN0b3IuY29ycC5nb29nbGUuY29tLzpzZXNzaW9uX3ByZWZpeDp1aS93aWRnZXR2aWV3P3VzZWdhcGlcXHUwMDNkMVwifSxcInN1cnZleW9wdGluXCI6e1widXJsXCI6XCJodHRwczovL3d3dy5nb29nbGUuY29tL3Nob3BwaW5nL2N1c3RvbWVycmV2aWV3cy9vcHRpbj91c2VnYXBpXFx1MDAzZDFcIn0sXCI6c29jaWFsaG9zdDpcIjpcImh0dHBzOi8vYXBpcy5nb29nbGUuY29tXCIsXCJzaG9ydGxpc3RzXCI6e1widXJsXCI6XCJcIn0sXCJoYW5nb3V0XCI6e1widXJsXCI6XCJodHRwczovL3RhbGtnYWRnZXQuZ29vZ2xlLmNvbS86c2Vzc2lvbl9wcmVmaXg6dGFsa2dhZGdldC9fL3dpZGdldFwifSxcInBsdXNfZm9sbG93ZXJzXCI6e1wicGFyYW1zXCI6e1widXJsXCI6XCJcIn0sXCJ1cmxcIjpcIjpzb2NpYWxob3N0Oi9fL2ltL18vd2lkZ2V0L3JlbmRlci9wbHVzL2ZvbGxvd2Vycz91c2VnYXBpXFx1MDAzZDFcIn0sXCJwb3N0XCI6e1wicGFyYW1zXCI6e1widXJsXCI6XCJcIn0sXCJ1cmxcIjpcIjpzb2NpYWxob3N0Oi86c2Vzc2lvbl9wcmVmaXg6OmltX3ByZWZpeDpfL3dpZGdldC9yZW5kZXIvcG9zdD91c2VnYXBpXFx1MDAzZDFcIn0sXCI6Z3BsdXNfdXJsOlwiOlwiaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb21cIixcInNpZ25pblwiOntcInBhcmFtc1wiOntcInVybFwiOlwiXCJ9LFwidXJsXCI6XCI6c29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4Ol8vd2lkZ2V0L3JlbmRlci9zaWduaW4/dXNlZ2FwaVxcdTAwM2QxXCIsXCJtZXRob2RzXCI6W1wib25hdXRoXCJdfSxcInJicl9pXCI6e1wicGFyYW1zXCI6e1widXJsXCI6XCJcIn0sXCJ1cmxcIjpcIjpzb2NpYWxob3N0Oi86c2Vzc2lvbl9wcmVmaXg6OnNlOl8vd2lkZ2V0L3JlbmRlci9yZWNvYmFyaW52aXRhdGlvblwifSxcInNoYXJlXCI6e1widXJsXCI6XCI6c29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4OjppbV9wcmVmaXg6Xy93aWRnZXQvcmVuZGVyL3NoYXJlP3VzZWdhcGlcXHUwMDNkMVwifSxcInBsdXNvbmVcIjp7XCJwYXJhbXNcIjp7XCJjb3VudFwiOlwiXCIsXCJzaXplXCI6XCJcIixcInVybFwiOlwiXCJ9LFwidXJsXCI6XCI6c29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4OjpzZTpfLysxL2Zhc3RidXR0b24/dXNlZ2FwaVxcdTAwM2QxXCJ9LFwiY29tbWVudHNcIjp7XCJwYXJhbXNcIjp7XCJsb2NhdGlvblwiOltcInNlYXJjaFwiLFwiaGFzaFwiXX0sXCJ1cmxcIjpcIjpzb2NpYWxob3N0Oi86c2Vzc2lvbl9wcmVmaXg6Xy93aWRnZXQvcmVuZGVyL2NvbW1lbnRzP3VzZWdhcGlcXHUwMDNkMVwiLFwibWV0aG9kc1wiOltcInNjcm9sbFwiLFwib3BlbndpbmRvd1wiXX0sXCI6aW1fc29jaWFsaG9zdDpcIjpcImh0dHBzOi8vcGx1cy5nb29nbGVhcGlzLmNvbVwiLFwiYmFja2Ryb3BcIjp7XCJ1cmxcIjpcImh0dHBzOi8vY2xpZW50czMuZ29vZ2xlLmNvbS9jYXN0L2Nocm9tZWNhc3QvaG9tZS93aWRnZXQvYmFja2Ryb3A/dXNlZ2FwaVxcdTAwM2QxXCJ9LFwidmlzaWJpbGl0eVwiOntcInBhcmFtc1wiOntcInVybFwiOlwiXCJ9LFwidXJsXCI6XCI6c29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4Ol8vd2lkZ2V0L3JlbmRlci92aXNpYmlsaXR5P3VzZWdhcGlcXHUwMDNkMVwifSxcImF1dG9jb21wbGV0ZVwiOntcInBhcmFtc1wiOntcInVybFwiOlwiXCJ9LFwidXJsXCI6XCI6c29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4Ol8vd2lkZ2V0L3JlbmRlci9hdXRvY29tcGxldGVcIn0sXCJhZGRpdG5vd1wiOntcInVybFwiOlwiaHR0cHM6Ly9hcGlzLmdvb2dsZS5jb20vbWFya2V0cGxhY2UvYnV0dG9uP3VzZWdhcGlcXHUwMDNkMVwiLFwibWV0aG9kc1wiOltcImxhdW5jaHVybFwiXX0sXCI6c2lnbnVwaG9zdDpcIjpcImh0dHBzOi8vcGx1cy5nb29nbGUuY29tXCIsXCJyYXRpbmdiYWRnZVwiOntcInVybFwiOlwiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zaG9wcGluZy9jdXN0b21lcnJldmlld3MvYmFkZ2U/dXNlZ2FwaVxcdTAwM2QxXCJ9LFwiYXBwY2lyY2xlcGlja2VyXCI6e1widXJsXCI6XCI6c29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4Ol8vd2lkZ2V0L3JlbmRlci9hcHBjaXJjbGVwaWNrZXJcIn0sXCJmb2xsb3dcIjp7XCJ1cmxcIjpcIjpzb2NpYWxob3N0Oi86c2Vzc2lvbl9wcmVmaXg6Xy93aWRnZXQvcmVuZGVyL2ZvbGxvdz91c2VnYXBpXFx1MDAzZDFcIn0sXCJjb21tdW5pdHlcIjp7XCJ1cmxcIjpcIjpjdHhfc29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4OjppbV9wcmVmaXg6Xy93aWRnZXQvcmVuZGVyL2NvbW11bml0eT91c2VnYXBpXFx1MDAzZDFcIn0sXCJzaGFyZXRvY2xhc3Nyb29tXCI6e1widXJsXCI6XCJodHRwczovL2NsYXNzcm9vbS5nb29nbGUuY29tL3NoYXJld2lkZ2V0P3VzZWdhcGlcXHUwMDNkMVwifSxcInl0c2hhcmVcIjp7XCJwYXJhbXNcIjp7XCJ1cmxcIjpcIlwifSxcInVybFwiOlwiOnNvY2lhbGhvc3Q6LzpzZXNzaW9uX3ByZWZpeDpfL3dpZGdldC9yZW5kZXIveXRzaGFyZT91c2VnYXBpXFx1MDAzZDFcIn0sXCJwbHVzXCI6e1widXJsXCI6XCI6c29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4Ol8vd2lkZ2V0L3JlbmRlci9iYWRnZT91c2VnYXBpXFx1MDAzZDFcIn0sXCJmYW1pbHlfY3JlYXRpb25cIjp7XCJwYXJhbXNcIjp7XCJ1cmxcIjpcIlwifSxcInVybFwiOlwiaHR0cHM6Ly9mYW1pbGllcy5nb29nbGUuY29tL3dlYmNyZWF0aW9uP3VzZWdhcGlcXHUwMDNkMVxcdTAwMjZ1c2VnYXBpXFx1MDAzZDFcIn0sXCJjb21tZW50Y291bnRcIjp7XCJ1cmxcIjpcIjpzb2NpYWxob3N0Oi86c2Vzc2lvbl9wcmVmaXg6Xy93aWRnZXQvcmVuZGVyL2NvbW1lbnRjb3VudD91c2VnYXBpXFx1MDAzZDFcIn0sXCJjb25maWd1cmF0b3JcIjp7XCJ1cmxcIjpcIjpzb2NpYWxob3N0Oi86c2Vzc2lvbl9wcmVmaXg6Xy9wbHVzYnV0dG9uY29uZmlndXJhdG9yP3VzZWdhcGlcXHUwMDNkMVwifSxcInpvb21hYmxlaW1hZ2VcIjp7XCJ1cmxcIjpcImh0dHBzOi8vc3NsLmdzdGF0aWMuY29tL21pY3Jvc2NvcGUvZW1iZWQvXCJ9LFwiYXBwZmluZGVyXCI6e1widXJsXCI6XCJodHRwczovL3dvcmtzcGFjZS5nb29nbGUuY29tLzpzZXNzaW9uX3ByZWZpeDptYXJrZXRwbGFjZS9hcHBmaW5kZXI/dXNlZ2FwaVxcdTAwM2QxXCJ9LFwic2F2ZXRvd2FsbGV0XCI6e1widXJsXCI6XCJodHRwczovL3BheS5nb29nbGUuY29tL2dwL3Yvd2lkZ2V0L3NhdmVcIn0sXCJwZXJzb25cIjp7XCJ1cmxcIjpcIjpzb2NpYWxob3N0Oi86c2Vzc2lvbl9wcmVmaXg6Xy93aWRnZXQvcmVuZGVyL3BlcnNvbj91c2VnYXBpXFx1MDAzZDFcIn0sXCJzYXZldG9kcml2ZVwiOntcInVybFwiOlwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL3NhdmV0b2RyaXZlYnV0dG9uP3VzZWdhcGlcXHUwMDNkMVwiLFwibWV0aG9kc1wiOltcInNhdmVcIl19LFwicGFnZVwiOntcInVybFwiOlwiOnNvY2lhbGhvc3Q6LzpzZXNzaW9uX3ByZWZpeDpfL3dpZGdldC9yZW5kZXIvcGFnZT91c2VnYXBpXFx1MDAzZDFcIn0sXCJjYXJkXCI6e1widXJsXCI6XCI6c29jaWFsaG9zdDovOnNlc3Npb25fcHJlZml4Ol8vaG92ZXJjYXJkL2NhcmRcIn19fSxcImhcIjpcIm07L18vc2NzL2FwcHMtc3RhdGljL18vanMva1xcdTAwM2Rvei5nYXBpLnB0X0JSLmw0QnZfV2tWQzZnLk8vYW1cXHUwMDNkd1FFL2RcXHUwMDNkMS9jdFxcdTAwM2R6Z21zL3JzXFx1MDAzZEFHTFRjQ091SDVTMnVxbUY2RTh6T1c3bjN5aXFpd2h6TlEvbVxcdTAwM2RfX2ZlYXR1cmVzX19cIixcInVcIjpcImh0dHBzOi8vYXBpcy5nb29nbGUuY29tL2pzL3BsYXRmb3JtLmpzXCIsXCJoZWVcIjp0cnVlLFwiZnBcIjpcIjgyMWEyNTFiMTQwZTRhZGQzMmY4N2Y0YTdhMDhmMDQ0YTU5YWEwZTlcIixcImRwb1wiOmZhbHNlfSxcInBsYXRmb3JtXCI6W1wiYWRkaXRub3dcIixcImJhY2tkcm9wXCIsXCJibG9nZ2VyXCIsXCJjb21tZW50c1wiLFwiY29tbWVudGNvdW50XCIsXCJjb21tdW5pdHlcIixcImRvbmF0aW9uXCIsXCJmYW1pbHlfY3JlYXRpb25cIixcImZvbGxvd1wiLFwiaGFuZ291dFwiLFwiaGVhbHRoXCIsXCJwYWdlXCIsXCJwYXJ0bmVyc2JhZGdlXCIsXCJwZXJzb25cIixcInBsYXllbW1cIixcInBsYXlyZXZpZXdcIixcInBsdXNcIixcInBsdXNvbmVcIixcInBvc3RcIixcInJhdGluZ2JhZGdlXCIsXCJzYXZldG9hbmRyb2lkcGF5XCIsXCJzYXZldG9kcml2ZVwiLFwic2F2ZXRvd2FsbGV0XCIsXCJzaGFyZXRvY2xhc3Nyb29tXCIsXCJzaG9ydGxpc3RzXCIsXCJzaWduaW4yXCIsXCJzdXJ2ZXlvcHRpblwiLFwidmlzaWJpbGl0eVwiLFwieW91dHViZVwiLFwieXRzdWJzY3JpYmVcIixcInpvb21hYmxlaW1hZ2VcIl0sXCJmcFwiOlwiODIxYTI1MWIxNDBlNGFkZDMyZjg3ZjRhN2EwOGYwNDRhNTlhYTBlOVwiLFwiYW5ub3RhdGlvblwiOltcImludGVyYWN0aXZlcG9zdFwiLFwicmVjb2JhclwiLFwic2lnbmluMlwiLFwiYXV0b2NvbXBsZXRlXCIsXCJwcm9maWxlXCJdLFwiYmltb2RhbFwiOltcInNpZ25pblwiLFwic2hhcmVcIl19fSk7XG5cbmV4cG9ydCB7IGdhcGksIGdhcGlDb21wbGV0ZSB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBMZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgTWc9VWYobnVsbCksTmc9bnVsbCxPZz1udWxsLFBnPW51bGw7ZnVuY3Rpb24gUWcoKXtQZz1PZz1OZz1udWxsfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPU1nLmN1cnJlbnQ7RShNZyk7YS5fY3VycmVudFZhbHVlPWJ9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIFRnKGEsYil7Tmc9YTtQZz1PZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKFVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIFZnKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihQZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1PZyl7aWYobnVsbD09PU5nKXRocm93IEVycm9yKHAoMzA4KSk7T2c9YTtOZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgT2c9T2cubmV4dD1hO3JldHVybiBifXZhciBXZz1udWxsO2Z1bmN0aW9uIFhnKGEpe251bGw9PT1XZz9XZz1bYV06V2cucHVzaChhKX1mdW5jdGlvbiBZZyhhLGIsYyxkKXt2YXIgZT1iLmludGVybGVhdmVkO251bGw9PT1lPyhjLm5leHQ9YyxYZyhiKSk6KGMubmV4dD1lLm5leHQsZS5uZXh0PWMpO2IuaW50ZXJsZWF2ZWQ9YztyZXR1cm4gWmcoYSxkKX1cbmZ1bmN0aW9uIFpnKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH12YXIgJGc9ITE7ZnVuY3Rpb24gYWgoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIGJoKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIGNoKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gZGgoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZD1kLnNoYXJlZDtpZigwIT09KEsmMikpe3ZhciBlPWQucGVuZGluZztudWxsPT09ZT9iLm5leHQ9YjooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5wZW5kaW5nPWI7cmV0dXJuIFpnKGEsYyl9ZT1kLmludGVybGVhdmVkO251bGw9PT1lPyhiLm5leHQ9YixYZyhkKSk6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QuaW50ZXJsZWF2ZWQ9YjtyZXR1cm4gWmcoYSxjKX1mdW5jdGlvbiBlaChhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxuZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7JGc9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgcT1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHI9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcik9PT1yKXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHQ9aDtyPWI7eT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOm49dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXtxPW4uY2FsbCh5LHEscik7YnJlYWsgYX1xPW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49dC5wYXlsb2FkO3I9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHkscSxyKTpuO2lmKG51bGw9PT1yfHx2b2lkIDA9PT1yKWJyZWFrIGE7cT1BKHt9LHEscik7YnJlYWsgYTtjYXNlIDI6JGc9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscj1lLmVmZmVjdHMsbnVsbD09PXI/ZS5lZmZlY3RzPVtoXTpyLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpyLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9cSk6bT1tLm5leHQ9eSxnfD1yO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2Ugcj1oLGg9ci5uZXh0LHIubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cixlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO2hofD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9cX19XG5mdW5jdGlvbiBpaChhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBqaD0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBraChhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgbmg9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1MKCksZD1cbmxoKGEpLGU9Y2goYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtiPWRoKGEsZSxkKTtudWxsIT09YiYmKG1oKGIsYSxkLGMpLGVoKGIsYSxkKSl9fTtmdW5jdGlvbiBvaChhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFJZShjLGQpfHwhSWUoZSxmKTohMH1cbmZ1bmN0aW9uIHBoKGEsYixjKXt2YXIgZD0hMSxlPVZmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPVZnKGYpOihlPVpmKGIpP1hmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1lmKGEsZSk6VmYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1uaDthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHFoKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHJoKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9amg7YWgoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1WZyhmKTooZj1aZihiKT9YZjpILmN1cnJlbnQsZS5jb250ZXh0PVlmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihraChhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxnaChhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztiPT09amgmJihiPWUucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIHVoKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiB2aChhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT13aChhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXhoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT15YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09SGEmJnVoKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9c2goYSxiLGMpLGQucmV0dXJuPWEsZDtkPXloKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPXNoKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9emgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPUFoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXhoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjPXloKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9c2goYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHdhOnJldHVybiBiPXpoKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEhhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHEoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGViKGIpfHxLYShiKSlyZXR1cm4gYj1BaChiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjt0aChhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gZT1jLl9pbml0LHIoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihlYihjKXx8S2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO3RoKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB3YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEhhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihlYihkKXx8S2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO3RoKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCx1PWcsdz1nPTAseD1udWxsO251bGwhPT11JiZ3PGgubGVuZ3RoO3crKyl7dS5pbmRleD53Pyh4PXUsdT1udWxsKTp4PXUuc2libGluZzt2YXIgbj1yKGUsdSxoW3ddLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9eCk7YnJlYWt9YSYmdSYmbnVsbD09PW4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx3KTtudWxsPT09bT9sPW46bS5zaWJsaW5nPW47bT1uO3U9eH1pZih3PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PXUpe2Zvcig7dzxoLmxlbmd0aDt3KyspdT1xKGUsaFt3XSxrKSxudWxsIT09dSYmKGc9Zih1LGcsdyksbnVsbD09PW0/bD11Om0uc2libGluZz11LG09dSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7dzxoLmxlbmd0aDt3KyspeD15KHUsZSx3LGhbd10sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1cbngua2V5P3c6eC5rZXkpLGc9Zih4LGcsdyksbnVsbD09PW0/bD14Om0uc2libGluZz14LG09eCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIHQoZSxnLGgsayl7dmFyIGw9S2EoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciB1PWw9bnVsbCxtPWcsdz1nPTAseD1udWxsLG49aC5uZXh0KCk7bnVsbCE9PW0mJiFuLmRvbmU7dysrLG49aC5uZXh0KCkpe20uaW5kZXg+dz8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9cihlLG0sbi52YWx1ZSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcsdyk7bnVsbD09PXU/bD10OnUuc2libGluZz10O3U9dDttPXh9aWYobi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PW0pe2Zvcig7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcihtPWQoZSxtKTshbi5kb25lO3crKyxuPWgubmV4dCgpKW49eShtLGUsdyxuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09bi5rZXk/dzpuLmtleSksZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT15YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB2YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT15YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09SGEmJnVoKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1zaChhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09eWE/KGQ9QWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPXloKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPXNoKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB3YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXpoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgSGE6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGViKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKEthKGYpKXJldHVybiB0KGEsZCxmLGgpO3RoKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9eGgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgQmg9dmgoITApLENoPXZoKCExKSxEaD17fSxFaD1VZihEaCksRmg9VWYoRGgpLEdoPVVmKERoKTtmdW5jdGlvbiBIaChhKXtpZihhPT09RGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBJaChhLGIpe0coR2gsYik7RyhGaCxhKTtHKEVoLERoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1sYihiLGEpfUUoRWgpO0coRWgsYil9ZnVuY3Rpb24gSmgoKXtFKEVoKTtFKEZoKTtFKEdoKX1cbmZ1bmN0aW9uIEtoKGEpe0hoKEdoLmN1cnJlbnQpO3ZhciBiPUhoKEVoLmN1cnJlbnQpO3ZhciBjPWxiKGIsYS50eXBlKTtiIT09YyYmKEcoRmgsYSksRyhFaCxjKSl9ZnVuY3Rpb24gTGgoYSl7RmguY3VycmVudD09PWEmJihFKEVoKSxFKEZoKSl9dmFyIE09VWYoMCk7XG5mdW5jdGlvbiBNaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgTmg9W107XG5mdW5jdGlvbiBPaCgpe2Zvcih2YXIgYT0wO2E8TmgubGVuZ3RoO2ErKylOaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO05oLmxlbmd0aD0wfXZhciBQaD11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFFoPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFJoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsU2g9ITEsVGg9ITEsVWg9MCxWaD0wO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBXaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoYSxiLGMsZCxlLGYpe1JoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7UGguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9ZaDpaaDthPWMoZCxlKTtpZihUaCl7Zj0wO2Rve1RoPSExO1VoPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtQaC5jdXJyZW50PSRoO2E9YyhkLGUpfXdoaWxlKFRoKX1QaC5jdXJyZW50PWFpO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7Umg9MDtQPU89Tj1udWxsO1NoPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBiaSgpe3ZhciBhPTAhPT1VaDtVaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gY2koKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gZGkoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIGVpKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gZmkoYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChSaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciBxPXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXEsZz1kKTprPWsubmV4dD1xO04ubGFuZXN8PW07aGh8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTi5sYW5lc3w9ZixoaHw9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIGdpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIGhpKCl7fVxuZnVuY3Rpb24gaWkoYSxiKXt2YXIgYz1OLGQ9ZGkoKSxlPWIoKSxmPSFIZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLFVnPSEwKTtkPWQucXVldWU7amkoa2kuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09UCYmUC5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gbmkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gbWkoYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtvaShiKSYmcGkoYSl9ZnVuY3Rpb24ga2koYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7b2koYikmJnBpKGEpfSl9ZnVuY3Rpb24gb2koYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hSGUoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gcGkoYSl7dmFyIGI9WmcoYSwxKTtudWxsIT09YiYmbWgoYixhLDEsLTEpfVxuZnVuY3Rpb24gcWkoYSl7dmFyIGI9Y2koKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjplaSxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXJpLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBsaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2koKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHRpKGEsYixjLGQpe3ZhciBlPWNpKCk7Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWRpKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmV2goZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9bGkoYixjLGYsZCk7cmV0dXJufX1OLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyxmLGQpfWZ1bmN0aW9uIHZpKGEsYil7cmV0dXJuIHRpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uIGppKGEsYil7cmV0dXJuIHVpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIHdpKGEsYil7cmV0dXJuIHVpKDQsMixhLGIpfWZ1bmN0aW9uIHhpKGEsYil7cmV0dXJuIHVpKDQsNCxhLGIpfVxuZnVuY3Rpb24geWkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB6aShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHVpKDQsNCx5aS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBBaSgpe31mdW5jdGlvbiBCaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIENpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIERpKGEsYixjKXtpZigwPT09KFJoJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSxVZz0hMCksYS5tZW1vaXplZFN0YXRlPWM7SGUoYyxiKXx8KGM9eWMoKSxOLmxhbmVzfD1jLGhofD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiBFaShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1RaC50cmFuc2l0aW9uO1FoLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxRaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIEZpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1saChhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGMpO2Vsc2UgaWYoYz1ZZyhhLGIsYyxkKSxudWxsIT09Yyl7dmFyIGU9TCgpO21oKGMsYSxkLGUpO0ppKGMsYixkKX19XG5mdW5jdGlvbiByaShhLGIsYyl7dmFyIGQ9bGgoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixlKTtlbHNle3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoSGUoaCxnKSl7dmFyIGs9Yi5pbnRlcmxlYXZlZDtudWxsPT09az8oZS5uZXh0PWUsWGcoYikpOihlLm5leHQ9ay5uZXh0LGsubmV4dD1lKTtiLmludGVybGVhdmVkPWU7cmV0dXJufX1jYXRjaChsKXt9ZmluYWxseXt9Yz1ZZyhhLGIsZSxkKTtudWxsIT09YyYmKGU9TCgpLG1oKGMsYSxkLGUpLEppKGMsYixkKSl9fVxuZnVuY3Rpb24gSGkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1OfHxudWxsIT09YiYmYj09PU59ZnVuY3Rpb24gSWkoYSxiKXtUaD1TaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEppKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG52YXIgYWk9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VJbnNlcnRpb25FZmZlY3Q6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlEsdXNlTXV0YWJsZVNvdXJjZTpRLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlEsdXNlSWQ6USx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFloPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe2NpKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OnZpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0aSg0MTk0MzA4LFxuNCx5aS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1jaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1jaSgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPUdpLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cbmNpKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnFpLHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gY2koKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1xaSghMSksYj1hWzBdO2E9RWkuYmluZChudWxsLGFbMV0pO2NpKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TixlPWNpKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9Zjt2aShraS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1jaSgpLGI9Ui5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPXNnO3ZhciBkPXJnO2M9KGQmfigxPDwzMi1vYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1VaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9VmgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFpoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmZpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBmaShlaSl9LFxudXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIERpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9ZmkoZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sJGg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6Z2ksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGdpKGVpKX0sdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIG51bGw9PT1cbk8/Yi5tZW1vaXplZFN0YXRlPWE6RGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1naShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBLaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1QYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZSxkaWdlc3Q6bnVsbH19ZnVuY3Rpb24gTGkoYSxiLGMpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpudWxsLHN0YWNrOm51bGwhPWM/YzpudWxsLGRpZ2VzdDpudWxsIT1iP2I6bnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgTmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gT2koYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UGl8fChQaT0hMCxRaT1kKTtNaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFJpKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVNpP1NpPW5ldyBTZXQoW3RoaXNdKTpTaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gVGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBOaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVVpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFZpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9Y2goLTEsMSksYi50YWc9MixkaChjLGIsMSkpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgWGk9dWEuUmVhY3RDdXJyZW50T3duZXIsVWc9ITE7ZnVuY3Rpb24gWWkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9DaChiLG51bGwsYyxkKTpCaChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFppKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtUZyhiLGUpO2Q9WGgoYSxiLGMsZCxmLGUpO2M9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmMmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaihhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFiaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixjaihhLGIsZixkLGUpO2E9eWgoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpJZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuICRpKGEsYixlKX1iLmZsYWdzfD0xO2E9d2goZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSWUoZixkKSYmYS5yZWY9PT1iLnJlZilpZihVZz0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYoVWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcywkaShhLGIsZSl9cmV0dXJuIGRqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBlaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcoZmosZ2opLGdqfD1jO2Vsc2V7aWYoMD09PShjJjEwNzM3NDE4MjQpKXJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcoZmosZ2opLGdqfD1hLG51bGw7Yi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmM7Ryhmaixnaik7Z2p8PWR9ZWxzZSBudWxsIT09XG5mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKGZqLGdqKSxnanw9ZDtZaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBkaihhLGIsYyxkLGUpe3ZhciBmPVpmKGMpP1hmOkguY3VycmVudDtmPVlmKGIsZik7VGcoYixlKTtjPVhoKGEsYixjLGQsZixlKTtkPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZkJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiLGMsZCxlKXtpZihaZihjKSl7dmFyIGY9ITA7Y2coYil9ZWxzZSBmPSExO1RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKWpqKGEsYikscGgoYixjLGQpLHJoKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPVZnKGwpOihsPVpmKGMpP1hmOkguY3VycmVudCxsPVlmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09ZHx8ayE9PWwpJiZxaChiLGcsZCxsKTskZz0hMTt2YXIgcj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxyIT09a3x8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2goYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPSRnfHxvaChiLGMsaCxkLHIsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTtiaChhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkxnKGIudHlwZSxoKTtnLnByb3BzPWw7cT1iLnBlbmRpbmdQcm9wcztyPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPVZnKGspOihrPVpmKGMpP1hmOkguY3VycmVudCxrPVlmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cXx8ciE9PWspJiZxaChiLGcsZCxrKTskZz0hMTtyPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT1xfHxyIT09bnx8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoa2goYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPSRnfHxvaChiLGMsbCxkLHIsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PVxuYS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4ga2ooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24ga2ooYSxiLGMsZCxlLGYpe2hqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZkZyhiLGMsITEpLCRpKGEsYixmKTtkPWIuc3RhdGVOb2RlO1hpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9QmgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1CaChiLG51bGwsaCxmKSk6WWkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmZGcoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBsaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P2FnKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmFnKGEsYi5jb250ZXh0LCExKTtJaChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBtaihhLGIsYyxkLGUpe0lnKCk7SmcoZSk7Yi5mbGFnc3w9MjU2O1lpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBuaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIG9qKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1cbmZ1bmN0aW9uIHBqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPU0uY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhNLGUmMSk7aWYobnVsbD09PWEpe0VnKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtnPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmd9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZyk6Zj1xaihnLGQsMCxudWxsKSxhPUFoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGMpLGIubWVtb2l6ZWRTdGF0ZT1uaixhKTpyaihiLGcpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lJiYoaD1lLmRlaHlkcmF0ZWQsbnVsbCE9PWgpKXJldHVybiBzaihhLGIsZyxkLGgsZSxjKTtpZihmKXtmPWQuZmFsbGJhY2s7Zz1iLm1vZGU7ZT1hLmNoaWxkO2g9ZS5zaWJsaW5nO3ZhciBrPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn07MD09PShnJjEpJiZiLmNoaWxkIT09ZT8oZD1iLmNoaWxkLGQuY2hpbGRMYW5lcz0wLGQucGVuZGluZ1Byb3BzPWssYi5kZWxldGlvbnM9bnVsbCk6KGQ9d2goZSxrKSxkLnN1YnRyZWVGbGFncz1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWg/Zj13aChoLGYpOihmPUFoKGYsZyxjLG51bGwpLGYuZmxhZ3N8PTIpO2YucmV0dXJuPVxuYjtkLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDtkPWY7Zj1iLmNoaWxkO2c9YS5jaGlsZC5tZW1vaXplZFN0YXRlO2c9bnVsbD09PWc/b2ooYyk6e2Jhc2VMYW5lczpnLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9O2YubWVtb2l6ZWRTdGF0ZT1nO2YuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmM7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBkfWY9YS5jaGlsZDthPWYuc2libGluZztkPXdoKGYse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0pOzA9PT0oYi5tb2RlJjEpJiYoZC5sYW5lcz1jKTtkLnJldHVybj1iO2Quc2libGluZz1udWxsO251bGwhPT1hJiYoYz1iLmRlbGV0aW9ucyxudWxsPT09Yz8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpjLnB1c2goYSkpO2IuY2hpbGQ9ZDtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gZH1cbmZ1bmN0aW9uIHJqKGEsYil7Yj1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gdGooYSxiLGMsZCl7bnVsbCE9PWQmJkpnKGQpO0JoKGIsYS5jaGlsZCxudWxsLGMpO2E9cmooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHNqKGEsYixjLGQsZSxmLGcpe2lmKGMpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LGQ9TGkoRXJyb3IocCg0MjIpKSksdGooYSxiLGcsZCk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPUFoKGYsZSxnLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmQmgoYixhLmNoaWxkLG51bGwsZyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGcpO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSlyZXR1cm4gdGooYSxiLGcsbnVsbCk7aWYoXCIkIVwiPT09ZS5kYXRhKXtkPWUubmV4dFNpYmxpbmcmJmUubmV4dFNpYmxpbmcuZGF0YXNldDtcbmlmKGQpdmFyIGg9ZC5kZ3N0O2Q9aDtmPUVycm9yKHAoNDE5KSk7ZD1MaShmLGQsdm9pZCAwKTtyZXR1cm4gdGooYSxiLGcsZCl9aD0wIT09KGcmYS5jaGlsZExhbmVzKTtpZihVZ3x8aCl7ZD1SO2lmKG51bGwhPT1kKXtzd2l0Y2goZyYtZyl7Y2FzZSA0OmU9MjticmVhaztjYXNlIDE2OmU9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZT0zMjticmVhaztjYXNlIDUzNjg3MDkxMjplPTI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmU9MH1lPTAhPT0oZSYoZC5zdXNwZW5kZWRMYW5lc3xnKSk/MDplO1xuMCE9PWUmJmUhPT1mLnJldHJ5TGFuZSYmKGYucmV0cnlMYW5lPWUsWmcoYSxlKSxtaChkLGEsZSwtMSkpfXVqKCk7ZD1MaShFcnJvcihwKDQyMSkpKTtyZXR1cm4gdGooYSxiLGcsZCl9aWYoXCIkP1wiPT09ZS5kYXRhKXJldHVybiBiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9dmouYmluZChudWxsLGEpLGUuX3JlYWN0UmV0cnk9YixudWxsO2E9Zi50cmVlQ29udGV4dDt5Zz1MZihlLm5leHRTaWJsaW5nKTt4Zz1iO0k9ITA7emc9bnVsbDtudWxsIT09YSYmKG9nW3BnKytdPXJnLG9nW3BnKytdPXNnLG9nW3BnKytdPXFnLHJnPWEuaWQsc2c9YS5vdmVyZmxvdyxxZz1iKTtiPXJqKGIsZC5jaGlsZHJlbik7Yi5mbGFnc3w9NDA5NjtyZXR1cm4gYn1mdW5jdGlvbiB3aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO1NnKGEucmV0dXJuLGIsYyl9XG5mdW5jdGlvbiB4aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24geWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtZaShhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ3aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXdqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhNLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1NaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3hqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09TWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXhqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnhqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGpqKGEsYil7MD09PShiLm1vZGUmMSkmJm51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpfWZ1bmN0aW9uICRpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtoaHw9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9d2goYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXdoKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB6aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6bGooYik7SWcoKTticmVhaztjYXNlIDU6S2goYik7YnJlYWs7Y2FzZSAxOlpmKGIudHlwZSkmJmNnKGIpO2JyZWFrO2Nhc2UgNDpJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKE0sTS5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBwaihhLGIsYyk7RyhNLE0uY3VycmVudCYxKTthPSRpKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4geWooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coTSxNLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxlaihhLGIsYyl9cmV0dXJuICRpKGEsYixjKX12YXIgQWosQmosQ2osRGo7XG5Baj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Qmo9ZnVuY3Rpb24oKXt9O1xuQ2o9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO0hoKEVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXViKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtEaj1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIEVqKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFMoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBGaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUyhiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7SmgoKTtFKFdmKTtFKEgpO09oKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUdnKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09emcmJihHaih6Zyksemc9bnVsbCkpO0JqKGEsYik7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6TGgoYik7dmFyIGU9SGgoR2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQ2ooYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1MoYik7cmV0dXJuIG51bGx9YT1IaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtkW1BmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRChcImludmFsaWRcIixkKX11YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2RiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QmYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1rYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW09mXT1iO2FbUGZdPWQ7QWooYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dmIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1nYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dWIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/c2IoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm5iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmb2IoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm9iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnRhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7ZGIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1TKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlEaihhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPUhoKEdoLmN1cnJlbnQpO0hoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbnhnLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW09mXT1iLGIuc3RhdGVOb2RlPWR9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7aWYoSSYmbnVsbCE9PXlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpSGcoKSxJZygpLGIuZmxhZ3N8PTk4NTYwLGY9ITE7ZWxzZSBpZihmPUdnKGIpLG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtpZihudWxsPT09XG5hKXtpZighZil0aHJvdyBFcnJvcihwKDMxOCkpO2Y9Yi5tZW1vaXplZFN0YXRlO2Y9bnVsbCE9PWY/Zi5kZWh5ZHJhdGVkOm51bGw7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTcpKTtmW09mXT1ifWVsc2UgSWcoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1MoYik7Zj0hMX1lbHNlIG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSxmPSEwO2lmKCFmKXJldHVybiBiLmZsYWdzJjY1NTM2P2I6bnVsbH1pZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtkIT09KG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKSYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShNLmN1cnJlbnQmMSk/MD09PVQmJihUPTMpOnVqKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLFxuQmooYSxiKSxudWxsPT09YSYmc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUyhiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksUyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMTk6RShNKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUyhiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKUVqKGYsITEpO2Vsc2V7aWYoMCE9PVR8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1NaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O0VqKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LFxuZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9XG5hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPkhqJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9TWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxFaihmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUyhiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+SGomJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPVxuYixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUIoKSxiLnNpYmxpbmc9bnVsbCxjPU0uY3VycmVudCxHKE0sZD9jJjF8MjpjJjEpLGI7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oZ2omMTA3Mzc0MTgyNCkmJihTKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UyhiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIEpqKGEsYil7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiBKaCgpLEUoV2YpLEUoSCksT2goKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBMaChiKSxudWxsO2Nhc2UgMTM6RShNKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7SWcoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShNKSxudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEtqPSExLFU9ITEsTGo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVj1udWxsO2Z1bmN0aW9uIE1qKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VyhhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBOaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtXKGEsYixkKX19dmFyIE9qPSExO1xuZnVuY3Rpb24gUGooYSxiKXtDZj1kZDthPU1lKCk7aWYoTmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goRil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCxxPWEscj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7cSE9PWN8fDAhPT1lJiYzIT09cS5ub2RlVHlwZXx8KGg9ZytlKTtxIT09Znx8MCE9PWQmJjMhPT1xLm5vZGVUeXBlfHwoaz1nK2QpOzM9PT1xLm5vZGVUeXBlJiYoZys9XG5xLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT1xLmZpcnN0Q2hpbGQpKWJyZWFrO3I9cTtxPXl9Zm9yKDs7KXtpZihxPT09YSlicmVhayBiO3I9PT1jJiYrK2w9PT1lJiYoaD1nKTtyPT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9cjtyPXEucGFyZW50Tm9kZX1xPXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtEZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtkZD0hMTtmb3IoVj1iO251bGwhPT1WOylpZihiPVYsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVj1hO2Vsc2UgZm9yKDtudWxsIT09Vjspe2I9Vjt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bil7dmFyIHQ9bi5tZW1vaXplZFByb3BzLEo9bi5tZW1vaXplZFN0YXRlLHg9Yi5zdGF0ZU5vZGUsdz14LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dDpMZyhiLnR5cGUsdCksSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT13fWJyZWFrO2Nhc2UgMzp2YXIgdT1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOzE9PT11Lm5vZGVUeXBlP3UudGV4dENvbnRlbnQ9XCJcIjo5PT09dS5ub2RlVHlwZSYmdS5kb2N1bWVudEVsZW1lbnQmJnUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO2JyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goRil7VyhiLGIucmV0dXJuLEYpfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtWPWE7YnJlYWt9Vj1iLnJldHVybn1uPU9qO09qPSExO3JldHVybiBufVxuZnVuY3Rpb24gUWooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmTmooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gUmooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBUaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsVGooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltPZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW29mXSxkZWxldGUgYltRZl0sZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBVaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFZqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFVqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBXaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QmYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBYaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspWGooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBYPW51bGwsWWo9ITE7ZnVuY3Rpb24gWmooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KWFrKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIGFrKGEsYixjKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6VXx8TWooYyxiKTtjYXNlIDY6dmFyIGQ9WCxlPVlqO1g9bnVsbDtaaihhLGIsYyk7WD1kO1lqPWU7bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0tmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmS2YoYSxjKSxiZChhKSk6S2YoWCxjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVg7ZT1ZajtYPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7XG5aaihhLGIsYyk7WD1kO1lqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFVJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9OaihjLGIsZyk6MCE9PShmJjQpJiZOaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFVJiYoTWooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1coYyxiLGgpfVpqKGEsYixjKTticmVhaztjYXNlIDIxOlpqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhVPShkPVUpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsWmooYSxiLGMpLFU9ZCk6WmooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6WmooYSxiLGMpfX1mdW5jdGlvbiBiayhhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBMaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWNrLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1Olg9aC5zdGF0ZU5vZGU7WWo9ITE7YnJlYWsgYTtjYXNlIDM6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGE7Y2FzZSA0Olg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVgpdGhyb3cgRXJyb3IocCgxNjApKTthayhmLGcsZSk7WD1udWxsO1lqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtXKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspZWsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGVrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXt0cnl7UWooMyxhLGEucmV0dXJuKSxSaigzLGEpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX10cnl7UWooNSxhLGEucmV0dXJuKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7b2IoZSxcIlwiKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJmFiKGUsZik7dmIoaCxnKTt2YXIgbD12YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbT1rW2ddLHE9a1tnKzFdO1wic3R5bGVcIj09PW0/c2IoZSxxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1tP25iKGUscSk6XCJjaGlsZHJlblwiPT09bT9vYihlLHEpOnRhKGUsbSxxLGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpiYihlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciByPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9mYihlLCEhZi5tdWx0aXBsZSx5LCExKTpyIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZmIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtQZl09Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgNjpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7ZT1hLnN0YXRlTm9kZTtmPWEubWVtb2l6ZWRQcm9wczt0cnl7ZS5ub2RlVmFsdWU9Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMzpkayhiLGEpO2ZrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2JkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfWJyZWFrO2Nhc2UgNDpkayhiLGEpO2ZrKGEpO2JyZWFrO2Nhc2UgMTM6ZGsoYixhKTtmayhhKTtlPWEuY2hpbGQ7ZS5mbGFncyY4MTkyJiYoZj1udWxsIT09ZS5tZW1vaXplZFN0YXRlLGUuc3RhdGVOb2RlLmlzSGlkZGVuPWYsIWZ8fFxubnVsbCE9PWUuYWx0ZXJuYXRlJiZudWxsIT09ZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZXx8KGdrPUIoKSkpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMjptPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhVPShsPVUpfHxtLGRrKGIsYSksVT1sKTpkayhiLGEpO2ZrKGEpO2lmKGQmODE5Mil7bD1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKChhLnN0YXRlTm9kZS5pc0hpZGRlbj1sKSYmIW0mJjAhPT0oYS5tb2RlJjEpKWZvcihWPWEsbT1hLmNoaWxkO251bGwhPT1tOyl7Zm9yKHE9Vj1tO251bGwhPT1WOyl7cj1WO3k9ci5jaGlsZDtzd2l0Y2goci50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpRaig0LHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpNaihyLHIucmV0dXJuKTt2YXIgbj1yLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsVW5tb3VudCl7ZD1yO2M9ci5yZXR1cm47dHJ5e2I9ZCxuLnByb3BzPVxuYi5tZW1vaXplZFByb3BzLG4uc3RhdGU9Yi5tZW1vaXplZFN0YXRlLG4uY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtXKGQsYyx0KX19YnJlYWs7Y2FzZSA1Ok1qKHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PXIubWVtb2l6ZWRTdGF0ZSl7aGsocSk7Y29udGludWV9fW51bGwhPT15Pyh5LnJldHVybj1yLFY9eSk6aGsocSl9bT1tLnNpYmxpbmd9YTpmb3IobT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT1tKXttPXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbD8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9XG5yYihcImRpc3BsYXlcIixnKSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX19ZWxzZSBpZig2PT09cS50YWcpe2lmKG51bGw9PT1tKXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bD9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTttPT09cSYmKG09bnVsbCk7cT1xLnJldHVybn1tPT09cSYmKG09bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ319YnJlYWs7Y2FzZSAxOTpkayhiLGEpO2ZrKGEpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmRrKGIsXG5hKSxmayhhKX19ZnVuY3Rpb24gZmsoYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihVaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG9iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1WaihhKTtYaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9VmooYSk7V2ooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1coYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gaWsoYSxiLGMpe1Y9YTtqayhhLGIsYyl9XG5mdW5jdGlvbiBqayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1WOyl7dmFyIGU9VixmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8S2o7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFU7aD1Lajt2YXIgbD1VO0tqPWc7aWYoKFU9aykmJiFsKWZvcihWPWU7bnVsbCE9PVY7KWc9VixrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9rayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxWPWspOmtrKGUpO2Zvcig7bnVsbCE9PWY7KVY9ZixqayhmLGIsYyksZj1mLnNpYmxpbmc7Vj1lO0tqPWg7VT1sfWxrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFY9Zik6bGsoYSxiLGMpfX1cbmZ1bmN0aW9uIGxrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VXx8UmooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhVSlpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpMZyhiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZpaChiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9aWgoYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciBxPW0uZGVoeWRyYXRlZDtudWxsIT09cSYmYmQocSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6Y2FzZSAyNTpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VXx8Yi5mbGFncyY1MTImJlNqKGIpfWNhdGNoKHIpe1coYixiLnJldHVybixyKX19aWYoYj09PWEpe1Y9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fWZ1bmN0aW9uIGhrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19XG5mdW5jdGlvbiBrayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9Vjt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtSaig0LGIpfWNhdGNoKGspe1coYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtXKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGcsayl9fX1jYXRjaChrKXtXKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Y9aDticmVha31WPWIucmV0dXJufX1cbnZhciBtaz1NYXRoLmNlaWwsbms9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixvaz11YS5SZWFjdEN1cnJlbnRPd25lcixwaz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsUj1udWxsLFk9bnVsbCxaPTAsZ2o9MCxmaj1VZigwKSxUPTAscWs9bnVsbCxoaD0wLHJrPTAsc2s9MCx0az1udWxsLHVrPW51bGwsZ2s9MCxIaj1JbmZpbml0eSx2az1udWxsLFBpPSExLFFpPW51bGwsU2k9bnVsbCx3az0hMSx4az1udWxsLHlrPTAsems9MCxBaz1udWxsLEJrPS0xLENrPTA7ZnVuY3Rpb24gTCgpe3JldHVybiAwIT09KEsmNik/QigpOi0xIT09Qms/Qms6Qms9QigpfVxuZnVuY3Rpb24gbGgoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09S2cudHJhbnNpdGlvbilyZXR1cm4gMD09PUNrJiYoQ2s9eWMoKSksQ2s7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjpqZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIG1oKGEsYixjLGQpe2lmKDUwPHprKXRocm93IHprPTAsQWs9bnVsbCxFcnJvcihwKDE4NSkpO0FjKGEsYyxkKTtpZigwPT09KEsmMil8fGEhPT1SKWE9PT1SJiYoMD09PShLJjIpJiYocmt8PWMpLDQ9PT1UJiZEayhhLFopKSxFayhhLGQpLDE9PT1jJiYwPT09SyYmMD09PShiLm1vZGUmMSkmJihIaj1CKCkrNTAwLGZnJiZqZygpKX1cbmZ1bmN0aW9uIEVrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7d2MoYSxiKTt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmJjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYmMoYyk7aWYoMT09PWIpMD09PWEudGFnP2lnKEZrLmJpbmQobnVsbCxhKSk6aGcoRmsuYmluZChudWxsLGEpKSxKZihmdW5jdGlvbigpezA9PT0oSyY2KSYmamcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChEYyhkKSl7Y2FzZSAxOmM9ZmM7YnJlYWs7Y2FzZSA0OmM9Z2M7YnJlYWs7Y2FzZSAxNjpjPWhjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9amM7YnJlYWs7ZGVmYXVsdDpjPWhjfWM9R2soYyxIay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gSGsoYSxiKXtCaz0tMTtDaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKElrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUprKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsSGo9QigpKzUwMCxMayhhLGIpO2RvIHRyeXtNaygpO2JyZWFrfWNhdGNoKGgpe05rKGEsaCl9d2hpbGUoMSk7UWcoKTtuay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooUj1udWxsLFo9MCxiPVQpfWlmKDAhPT1iKXsyPT09YiYmKGU9eGMoYSksMCE9PWUmJihkPWUsYj1PayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7aWYoNj09PWIpRGsoYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFQayhlKSYmKGI9SmsoYSxkKSwyPT09YiYmKGY9eGMoYSksMCE9PWYmJihkPWYsYj1PayhhLGYpKSksMT09PWIpKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSAzOkRrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWdrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT11YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe0woKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxiKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDQ6RGsoYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1vYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCptayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksZCk7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA1OlFrKGEsdWssdmspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1FayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Iay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE9rKGEsYil7dmFyIGM9dGs7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoTGsoYSxiKS5mbGFnc3w9MjU2KTthPUprKGEsYik7MiE9PWEmJihiPXVrLHVrPWMsbnVsbCE9PWImJkdqKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBHaihhKXtudWxsPT09dWs/dWs9YTp1ay5wdXNoLmFwcGx5KHVrLGEpfVxuZnVuY3Rpb24gUGsoYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFIZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIERrKGEsYil7YiY9fnNrO2ImPX5yazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW9jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBGayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtJaygpO3ZhciBiPXVjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBFayhhLEIoKSksbnVsbDt2YXIgYz1KayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXhjKGEpOzAhPT1kJiYoYj1kLGM9T2soYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1xayxMayhhLDApLERrKGEsYiksRWsoYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1FrKGEsdWssdmspO0VrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfX1mdW5jdGlvbiBTayhhKXtudWxsIT09eGsmJjA9PT14ay50YWcmJjA9PT0oSyY2KSYmSWsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9cGsudHJhbnNpdGlvbixkPUM7dHJ5e2lmKHBrLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLHBrLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZqZygpfX1mdW5jdGlvbiBJaigpe2dqPWZqLmN1cnJlbnQ7RShmail9XG5mdW5jdGlvbiBMayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxHZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiYkZigpO2JyZWFrO2Nhc2UgMzpKaCgpO0UoV2YpO0UoSCk7T2goKTticmVhaztjYXNlIDU6TGgoZCk7YnJlYWs7Y2FzZSA0OkpoKCk7YnJlYWs7Y2FzZSAxMzpFKE0pO2JyZWFrO2Nhc2UgMTk6RShNKTticmVhaztjYXNlIDEwOlJnKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOklqKCl9Yz1jLnJldHVybn1SPWE7WT1hPXdoKGEuY3VycmVudCxudWxsKTtaPWdqPWI7VD0wO3FrPW51bGw7c2s9cms9aGg9MDt1az10az1udWxsO2lmKG51bGwhPT1XZyl7Zm9yKGI9XG4wO2I8V2cubGVuZ3RoO2IrKylpZihjPVdnW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfVdnPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBOayhhLGIpe2Rve3ZhciBjPVk7dHJ5e1FnKCk7UGguY3VycmVudD1haTtpZihTaCl7Zm9yKHZhciBkPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9U2g9ITF9Umg9MDtQPU89Tj1udWxsO1RoPSExO1VoPTA7b2suY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Q9MTtxaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgscT1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT1xfHwxMT09PXF8fDE1PT09cSkpe3ZhciByPW0uYWx0ZXJuYXRlO3I/KG0udXBkYXRlUXVldWU9ci51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9ci5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz1yLmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1WaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztXaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZUaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO2IudXBkYXRlUXVldWU9dH1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1RpKGYsbCxiKTt1aigpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1WaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7V2koSixnLGgsZixiKTtKZyhLaShrLGgpKTticmVhayBhfX1mPWs9S2koayxoKTs0IT09VCYmKFQ9Mik7bnVsbD09PXRrP3RrPVtmXTp0ay5wdXNoKGYpO2Y9Zztkb3tzd2l0Y2goZi50YWcpe2Nhc2UgMzpmLmZsYWdzfD02NTUzNjtcbmImPS1iO2YubGFuZXN8PWI7dmFyIHg9T2koZixrLGIpO2ZoKGYseCk7YnJlYWsgYTtjYXNlIDE6aD1rO3ZhciB3PWYudHlwZSx1PWYuc3RhdGVOb2RlO2lmKDA9PT0oZi5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHUuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXModSkpKSl7Zi5mbGFnc3w9NjU1MzY7YiY9LWI7Zi5sYW5lc3w9Yjt2YXIgRj1SaShmLGgsYik7ZmgoZixGKTticmVhayBhfX1mPWYucmV0dXJufXdoaWxlKG51bGwhPT1mKX1UayhjKX1jYXRjaChuYSl7Yj1uYTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEtrKCl7dmFyIGE9bmsuY3VycmVudDtuay5jdXJyZW50PWFpO3JldHVybiBudWxsPT09YT9haTphfVxuZnVuY3Rpb24gdWooKXtpZigwPT09VHx8Mz09PVR8fDI9PT1UKVQ9NDtudWxsPT09Unx8MD09PShoaCYyNjg0MzU0NTUpJiYwPT09KHJrJjI2ODQzNTQ1NSl8fERrKFIsWil9ZnVuY3Rpb24gSmsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxMayhhLGIpO2RvIHRyeXtVaygpO2JyZWFrfWNhdGNoKGUpe05rKGEsZSl9d2hpbGUoMSk7UWcoKTtLPWM7bmsuY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7Uj1udWxsO1o9MDtyZXR1cm4gVH1mdW5jdGlvbiBVaygpe2Zvcig7bnVsbCE9PVk7KVZrKFkpfWZ1bmN0aW9uIE1rKCl7Zm9yKDtudWxsIT09WSYmIWNjKCk7KVZrKFkpfWZ1bmN0aW9uIFZrKGEpe3ZhciBiPVdrKGEuYWx0ZXJuYXRlLGEsZ2opO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9UayhhKTpZPWI7b2suY3VycmVudD1udWxsfVxuZnVuY3Rpb24gVGsoYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9RmooYyxiLGdqKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPUpqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7VD02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VCYmKFQ9NSl9ZnVuY3Rpb24gUWsoYSxiLGMpe3ZhciBkPUMsZT1way50cmFuc2l0aW9uO3RyeXtway50cmFuc2l0aW9uPW51bGwsQz0xLFhrKGEsYixjLGQpfWZpbmFsbHl7cGsudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFhrKGEsYixjLGQpe2RvIElrKCk7d2hpbGUobnVsbCE9PXhrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0JjKGEsZik7YT09PVImJihZPVI9bnVsbCxaPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8d2t8fCh3az0hMCxHayhoYyxmdW5jdGlvbigpe0lrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPXBrLnRyYW5zaXRpb247cGsudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9SztLfD00O29rLmN1cnJlbnQ9bnVsbDtQaihhLGMpO2VrKGMsYSk7T2UoRGYpO2RkPSEhQ2Y7RGY9Q2Y9bnVsbDthLmN1cnJlbnQ9YztpayhjLGEsZSk7ZGMoKTtLPWg7Qz1nO3BrLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3drJiYod2s9ITEseGs9YSx5az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoU2k9bnVsbCk7bWMoYy5zdGF0ZU5vZGUsZCk7RWsoYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKyllPWJbY10sZChlLnZhbHVlLHtjb21wb25lbnRTdGFjazplLnN0YWNrLGRpZ2VzdDplLmRpZ2VzdH0pO2lmKFBpKXRocm93IFBpPSExLGE9UWksUWk9bnVsbCxhOzAhPT0oeWsmMSkmJjAhPT1hLnRhZyYmSWsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09QWs/emsrKzooems9MCxBaz1hKTp6az0wO2pnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBJaygpe2lmKG51bGwhPT14ayl7dmFyIGE9RGMoeWspLGI9cGsudHJhbnNpdGlvbixjPUM7dHJ5e3BrLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09eGspdmFyIGQ9ITE7ZWxzZXthPXhrO3hrPW51bGw7eWs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFY9YS5jdXJyZW50O251bGwhPT1WOyl7dmFyIGY9VixnPWYuY2hpbGQ7aWYoMCE9PShWLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihWPWw7bnVsbCE9PVY7KXt2YXIgbT1WO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig4LG0sZil9dmFyIHE9bS5jaGlsZDtpZihudWxsIT09cSlxLnJldHVybj1tLFY9cTtlbHNlIGZvcig7bnVsbCE9PVY7KXttPVY7dmFyIHI9bS5zaWJsaW5nLHk9bS5yZXR1cm47VGoobSk7aWYobT09PVxubCl7Vj1udWxsO2JyZWFrfWlmKG51bGwhPT1yKXtyLnJldHVybj15O1Y9cjticmVha31WPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHQ9bi5jaGlsZDtpZihudWxsIT09dCl7bi5jaGlsZD1udWxsO2Rve3ZhciBKPXQuc2libGluZzt0LnNpYmxpbmc9bnVsbDt0PUp9d2hpbGUobnVsbCE9PXQpfX1WPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVj1nO2Vsc2UgYjpmb3IoO251bGwhPT1WOyl7Zj1WO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOSxmLGYucmV0dXJuKX12YXIgeD1mLnNpYmxpbmc7aWYobnVsbCE9PXgpe3gucmV0dXJuPWYucmV0dXJuO1Y9eDticmVhayBifVY9Zi5yZXR1cm59fXZhciB3PWEuY3VycmVudDtmb3IoVj13O251bGwhPT1WOyl7Zz1WO3ZhciB1PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxudSl1LnJldHVybj1nLFY9dTtlbHNlIGI6Zm9yKGc9dztudWxsIT09Vjspe2g9VjtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpSaig5LGgpfX1jYXRjaChuYSl7VyhoLGgucmV0dXJuLG5hKX1pZihoPT09Zyl7Vj1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtWPUY7YnJlYWsgYn1WPWgucmV0dXJufX1LPWU7amcoKTtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Qb3N0Q29tbWl0RmliZXJSb290KGtjLGEpfWNhdGNoKG5hKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxway50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFlrKGEsYixjKXtiPUtpKGMsYik7Yj1PaShhLGIsMSk7YT1kaChhLGIsMSk7Yj1MKCk7bnVsbCE9PWEmJihBYyhhLDEsYiksRWsoYSxiKSl9XG5mdW5jdGlvbiBXKGEsYixjKXtpZigzPT09YS50YWcpWWsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7WWsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXMoZCkpKXthPUtpKGMsYSk7YT1SaShiLGEsMSk7Yj1kaChiLGEsMSk7YT1MKCk7bnVsbCE9PWImJihBYyhiLDEsYSksRWsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gVWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUwoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7Uj09PWEmJihaJmMpPT09YyYmKDQ9PT1UfHwzPT09VCYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5CKCktZ2s/TGsoYSwwKTpza3w9Yyk7RWsoYSxiKX1mdW5jdGlvbiBaayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXNjLHNjPDw9MSwwPT09KHNjJjEzMDAyMzQyNCkmJihzYz00MTk0MzA0KSkpO3ZhciBjPUwoKTthPVpnKGEsYik7bnVsbCE9PWEmJihBYyhhLGIsYyksRWsoYSxjKSl9ZnVuY3Rpb24gdmooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1prKGEsYyl9XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtaayhhLGMpfXZhciBXaztcbldrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8V2YuY3VycmVudClVZz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIFVnPSExLHpqKGEsYixjKTtVZz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIFVnPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmdWcoYixuZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1ZZihiLEguY3VycmVudCk7VGcoYixjKTtlPVhoKG51bGwsYixkLGEsZSxjKTt2YXIgZj1iaSgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mPyhiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9XG5udWxsLFpmKGQpPyhmPSEwLGNnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsYWgoYiksZS51cGRhdGVyPW5oLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixyaChiLGQsYSxjKSxiPWtqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJnZnKGIpLFlpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz0kayhkKTthPUxnKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWRqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1paihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVppKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWoobnVsbCxiLGQsTGcoZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsXG5kLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGRqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGlqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2xqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDtiaChhLGIpO2doKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLGNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9XG5mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUtpKEVycm9yKHAoNDIzKSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1LaShFcnJvcihwKDQyNCkpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKHlnPUxmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCkseGc9YixJPSEwLHpnPW51bGwsYz1DaChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtJZygpO2lmKGQ9PT1lKXtiPSRpKGEsYixjKTticmVhayBhfVlpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEtoKGIpLG51bGw9PT1hJiZFZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLEVmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZFZihkLGYpJiYoYi5mbGFnc3w9MzIpLFxuaGooYSxiKSxZaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gcGooYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9QmgoYixudWxsLGQsYyk6WWkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLFppKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztcbmc9ZS52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoSGUoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFXZi5jdXJyZW50KXtiPSRpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPWNoKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtTZyhmLnJldHVybixcbmMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtTZyhnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WWkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixUZyhiLGMpLGU9VmcoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWWkoYSxiLGQsYyksXG5iLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9TGcoZCxiLnBlbmRpbmdQcm9wcyksZT1MZyhkLnR5cGUsZSksYWooYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBjaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksamooYSxiKSxiLnRhZz0xLFpmKGQpPyhhPSEwLGNnKGIpKTphPSExLFRnKGIsYykscGgoYixkLGUpLHJoKGIsZCxlLGMpLGtqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4geWooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGVqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gR2soYSxiKXtyZXR1cm4gYWMoYSxiKX1cbmZ1bmN0aW9uIGFsKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEJnKGEsYixjLGQpe3JldHVybiBuZXcgYWwoYSxiLGMsZCl9ZnVuY3Rpb24gYmooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uICRrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09RGEpcmV0dXJuIDExO2lmKGE9PT1HYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiB3aChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUJnKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB5aChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuIEFoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgemE6Zz04O2V8PTg7YnJlYWs7Y2FzZSBBYTpyZXR1cm4gYT1CZygxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPUFhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9QmcoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBGYTpyZXR1cm4gYT1CZygxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1GYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiBxaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6Zz0xMDticmVhayBhO2Nhc2UgQ2E6Zz05O2JyZWFrIGE7Y2FzZSBEYTpnPTExO1xuYnJlYWsgYTtjYXNlIEdhOmc9MTQ7YnJlYWsgYTtjYXNlIEhhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1CZyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9QmcoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHFqKGEsYixjLGQpe2E9QmcoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXtpc0hpZGRlbjohMX07cmV0dXJuIGF9ZnVuY3Rpb24geGgoYSxiLGMpe2E9QmcoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gemgoYSxiLGMpe2I9QmcoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBibChhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXpjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBjbChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgYmwoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1CZygzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O2FoKGYpO3JldHVybiBhfWZ1bmN0aW9uIGRsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6d2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBlbChhKXtpZighYSlyZXR1cm4gVmY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihWYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFpmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWmYoYykpcmV0dXJuIGJnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGZsKGEsYixjLGQsZSxmLGcsaCxrKXthPWNsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWVsKG51bGwpO2M9YS5jdXJyZW50O2Q9TCgpO2U9bGgoYyk7Zj1jaChkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO2RoKGMsZixlKTthLmN1cnJlbnQubGFuZXM9ZTtBYyhhLGUsZCk7RWsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBnbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1MKCksZz1saChlKTtjPWVsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9Y2goZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7YT1kaChlLGIsZyk7bnVsbCE9PWEmJihtaChhLGUsZyxmKSxlaChhLGUsZykpO3JldHVybiBnfVxuZnVuY3Rpb24gaGwoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBpbChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gamwoYSxiKXtpbChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmaWwoYSxiKX1mdW5jdGlvbiBrbCgpe3JldHVybiBudWxsfXZhciBsbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gbWwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUucmVuZGVyPW1sLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7Z2woYSxiLG51bGwsbnVsbCl9O25sLnByb3RvdHlwZS51bm1vdW50PW1sLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87U2soZnVuY3Rpb24oKXtnbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdWZdPW51bGx9fTtmdW5jdGlvbiBubChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1IYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UWMubGVuZ3RoJiYwIT09YiYmYjxRY1tjXS5wcmlvcml0eTtjKyspO1FjLnNwbGljZShjLDAsYSk7MD09PWMmJlZjKGEpfX07ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIHBsKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBxbCgpe31cbmZ1bmN0aW9uIHJsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2YuY2FsbChhKX19dmFyIGc9ZmwoYixkLGEsMCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdWZdPWcuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGspO2guY2FsbChhKX19dmFyIGs9Y2woYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3VmXT1rLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKGZ1bmN0aW9uKCl7Z2woYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHNsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2guY2FsbChhKX19Z2woYixnLGEsZSl9ZWxzZSBnPXJsKGMsYixhLGUsZCk7cmV0dXJuIGhsKGcpfUVjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9dGMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQ2MoYixjfDEpLEVrKGIsQigpKSwwPT09KEsmNikmJihIaj1CKCkrNTAwLGpnKCkpKX1icmVhaztjYXNlIDEzOlNrKGZ1bmN0aW9uKCl7dmFyIGI9WmcoYSwxKTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxLGMpfX0pLGpsKGEsMSl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPVpnKGEsMTM0MjE3NzI4KTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxMzQyMTc3MjgsYyl9amwoYSwxMzQyMTc3MjgpfX07R2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9bGgoYSksYz1aZyhhLGIpO2lmKG51bGwhPT1jKXt2YXIgZD1MKCk7bWgoYyxhLGIsZCl9amwoYSxiKX19O0hjPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0ljPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YmIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtXYShkKTtiYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9Ums7SGI9U2s7XG52YXIgdGw9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0NiLHVlLERiLEViLEZiLFJrXX0sdWw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOldjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMi4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB2bD17YnVuZGxlVHlwZTp1bC5idW5kbGVUeXBlLHZlcnNpb246dWwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnVsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6dWwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVpiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp1bC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5rbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgd2w9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF3bC5pc0Rpc2FibGVkJiZ3bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz13bC5pbmplY3QodmwpLGxjPXdsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD10bDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGRsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1sbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9Y2woYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IG1sKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBTayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1sbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZmwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbmwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcGwoYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFNrKGZ1bmN0aW9uKCl7c2wobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9Ums7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFwbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gc2woYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksYz1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLGQ9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLGU9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLGY9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLGc9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLGg9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksaz1TeW1ib2wuZm9yKFwicmVhY3Quc2VydmVyX2NvbnRleHRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksbT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksbj1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksdD1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpLHU7dT1TeW1ib2wuZm9yKFwicmVhY3QubW9kdWxlLnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIHYoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHI9YS4kJHR5cGVvZjtzd2l0Y2gocil7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIG06Y2FzZSBuOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBoOmNhc2UgbDpjYXNlIHE6Y2FzZSBwOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiByfX1jYXNlIGM6cmV0dXJuIHJ9fX1leHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWc7ZXhwb3J0cy5FbGVtZW50PWI7ZXhwb3J0cy5Gb3J3YXJkUmVmPWw7ZXhwb3J0cy5GcmFnbWVudD1kO2V4cG9ydHMuTGF6eT1xO2V4cG9ydHMuTWVtbz1wO2V4cG9ydHMuUG9ydGFsPWM7ZXhwb3J0cy5Qcm9maWxlcj1mO2V4cG9ydHMuU3RyaWN0TW9kZT1lO2V4cG9ydHMuU3VzcGVuc2U9bTtcbmV4cG9ydHMuU3VzcGVuc2VMaXN0PW47ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1sfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXF9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cH07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1tfTtleHBvcnRzLmlzU3VzcGVuc2VMaXN0PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT1lfHxhPT09bXx8YT09PW58fGE9PT10fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1sfHxhLiQkdHlwZW9mPT09dXx8dm9pZCAwIT09YS5nZXRNb2R1bGVJZCk/ITA6ITF9O2V4cG9ydHMudHlwZU9mPXY7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksaz1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbj1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGcpe3ZhciBiLGQ9e30sZT1udWxsLGg9bnVsbDt2b2lkIDAhPT1nJiYoZT1cIlwiK2cpO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGg9YS5yZWYpO2ZvcihiIGluIGEpbS5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmssdHlwZTpjLGtleTplLHJlZjpoLHByb3BzOmQsX293bmVyOm4uY3VycmVudH19ZXhwb3J0cy5GcmFnbWVudD1sO2V4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUExBQ0VIT0xERVJfVU5ERUZJTkVEID0gZXhwb3J0cy5QQUNLQUdFX05BTUUgPSB2b2lkIDA7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdyZWR1eC1kZWVwLXBlcnNpc3QnO1xuZXhwb3J0cy5QTEFDRUhPTERFUl9VTkRFRklORUQgPSAnQEBwbGFjZWhvbGRlci91bmRlZmluZWQnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRQZXJzaXN0Q29uZmlnID0gZXhwb3J0cy5nZXRUcmFuc2Zvcm1zID0gZXhwb3J0cy5jcmVhdGVCbGFja2xpc3QgPSBleHBvcnRzLmNyZWF0ZVdoaXRlbGlzdCA9IGV4cG9ydHMuYXV0b01lcmdlRGVlcCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgY3JlYXRlVHJhbnNmb3JtID0gZnVuY3Rpb24gKGluYm91bmQsIG91dGJvdW5kLCBjb25maWcgPSB7fSkge1xuICAgIGNvbnN0IHdoaXRlbGlzdCA9IGNvbmZpZy53aGl0ZWxpc3QgfHwgbnVsbDtcbiAgICBjb25zdCBibGFja2xpc3QgPSBjb25maWcuYmxhY2tsaXN0IHx8IG51bGw7XG4gICAgZnVuY3Rpb24gd2hpdGVsaXN0QmxhY2tsaXN0Q2hlY2soa2V5KSB7XG4gICAgICAgIGlmICh3aGl0ZWxpc3QgJiYgd2hpdGVsaXN0LmluZGV4T2Yoa2V5KSA9PT0gLTEpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGJsYWNrbGlzdCAmJiBibGFja2xpc3QuaW5kZXhPZihrZXkpICE9PSAtMSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGluOiAoc3RhdGUsIGtleSwgZnVsbFN0YXRlKSA9PiAhd2hpdGVsaXN0QmxhY2tsaXN0Q2hlY2soa2V5KSAmJiBpbmJvdW5kID8gaW5ib3VuZChzdGF0ZSwga2V5LCBmdWxsU3RhdGUpIDogc3RhdGUsXG4gICAgICAgIG91dDogKHN0YXRlLCBrZXksIGZ1bGxTdGF0ZSkgPT4gIXdoaXRlbGlzdEJsYWNrbGlzdENoZWNrKGtleSkgJiYgb3V0Ym91bmQgPyBvdXRib3VuZChzdGF0ZSwga2V5LCBmdWxsU3RhdGUpIDogc3RhdGUsXG4gICAgICAgIGRlZXBQZXJzaXN0S2V5OiB3aGl0ZWxpc3QgJiYgd2hpdGVsaXN0WzBdLFxuICAgIH07XG59O1xuY29uc3QgYXV0b01lcmdlRGVlcCA9IChpbmJvdW5kU3RhdGUsIG9yaWdpbmFsU3RhdGUsIHJlZHVjZWRTdGF0ZSwgeyBkZWJ1Zywgd2hpdGVsaXN0LCBibGFja2xpc3QsIHRyYW5zZm9ybXMgfSkgPT4ge1xuICAgIGlmICh3aGl0ZWxpc3QgfHwgYmxhY2tsaXN0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3RhdGUgcmVjb25jaWxlciBhdXRvTWVyZ2VEZWVwIHVzZXMgY3VzdG9tIHRyYW5zZm9ybXMgaW5zdGVhZCBvZiBvbGQgd2hpdGVsaXN0IG9yIGJsYWNrbGlzdCBjb25maWcgcHJvcGVydGllcy4gUGxlYXNlIHVzZSBjcmVhdGVXaGl0ZWxpc3Qgb3IgY3JlYXRlQmxhY2tsaXN0IHRyYW5zZm9ybXMuJyk7XG4gICAgfVxuICAgICgwLCB1dGlsc18xLnRyYW5zZm9ybXNWYWxpZGF0b3IpKHRyYW5zZm9ybXMpO1xuICAgIGNvbnN0IG5ld1N0YXRlID0gKDAsIHV0aWxzXzEuY2xvbmVEZWVwKShyZWR1Y2VkU3RhdGUpO1xuICAgIGxldCB0b1JlaHlkcmF0ZVN0YXRlID0gaW5ib3VuZFN0YXRlO1xuICAgIGlmICh0b1JlaHlkcmF0ZVN0YXRlICYmICgwLCB1dGlsc18xLmlzT2JqZWN0TGlrZSkodG9SZWh5ZHJhdGVTdGF0ZSkpIHtcbiAgICAgICAgY29uc3QgZGlmZiA9ICgwLCB1dGlsc18xLmRpZmZlcmVuY2UpKG9yaWdpbmFsU3RhdGUsIHJlZHVjZWRTdGF0ZSk7XG4gICAgICAgIGlmICghKDAsIHV0aWxzXzEuaXNFbXB0eSkoZGlmZikpIHtcbiAgICAgICAgICAgIHRvUmVoeWRyYXRlU3RhdGUgPSAoMCwgdXRpbHNfMS5tZXJnZURlZXApKGluYm91bmRTdGF0ZSwgZGlmZiwgeyBwcmVzZXJ2ZVVuZGVmaW5lZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2NvbnN0YW50c18xLlBBQ0tBR0VfTkFNRX0vYXV0b01lcmdlRGVlcDogc3ViIHN0YXRlIG9mIHlvdXIgc3RhdGUgd2FzIG1vZGlmaWVkIGJ5IHJlZHVjZXIgZHVyaW5nIHJlaHlkcmF0aW9uLiBWYWx1ZXMgZnJvbSByZWR1Y2VyIHdpbGwgYmUga2VwdDogJHtKU09OLnN0cmluZ2lmeShkaWZmKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyh0b1JlaHlkcmF0ZVN0YXRlKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdfcGVyc2lzdCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKDAsIHV0aWxzXzEuaXNPYmplY3RMaWtlKShuZXdTdGF0ZVtrZXldKSkge1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlW2tleV0gPSAoMCwgdXRpbHNfMS5tZXJnZURlZXApKG5ld1N0YXRlW2tleV0sIHRvUmVoeWRyYXRlU3RhdGVba2V5XSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3U3RhdGVba2V5XSA9IHRvUmVoeWRyYXRlU3RhdGVba2V5XTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkZWJ1ZyAmJiB0b1JlaHlkcmF0ZVN0YXRlICYmICgwLCB1dGlsc18xLmlzT2JqZWN0TGlrZSkodG9SZWh5ZHJhdGVTdGF0ZSkpIHtcbiAgICAgICAgY29uc29sZS5sb2coYCR7Y29uc3RhbnRzXzEuUEFDS0FHRV9OQU1FfS9hdXRvTWVyZ2VEZWVwOiByZWh5ZHJhdGVkIGtleXMgJHtKU09OLnN0cmluZ2lmeSh0b1JlaHlkcmF0ZVN0YXRlKX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1N0YXRlO1xufTtcbmV4cG9ydHMuYXV0b01lcmdlRGVlcCA9IGF1dG9NZXJnZURlZXA7XG5jb25zdCBjcmVhdGVXaGl0ZWxpc3QgPSAoa2V5LCB3aGl0ZWxpc3QpID0+IHtcbiAgICAoMCwgdXRpbHNfMS5zaW5nbGVUcmFuc2Zvcm1WYWxpZGF0b3IpKHdoaXRlbGlzdCwga2V5LCB0eXBlc18xLkNvbmZpZ1R5cGUuV0hJVEVMSVNUKTtcbiAgICByZXR1cm4gY3JlYXRlVHJhbnNmb3JtKChpbmJvdW5kU3RhdGUpID0+IHtcbiAgICAgICAgaWYgKCF3aGl0ZWxpc3QgfHwgIXdoaXRlbGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmJvdW5kU3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGluYm91bmRUb1BlcnNpc3QgPSBudWxsO1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIHdoaXRlbGlzdC5mb3JFYWNoKChzdGF0ZVBhdGgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhBcnJheSA9IHN0YXRlUGF0aC5zcGxpdCgnLicpO1xuICAgICAgICAgICAgdmFsdWUgPSAoMCwgdXRpbHNfMS5wYXRoKShpbmJvdW5kU3RhdGUsIHBhdGhBcnJheSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJiAoMCwgdXRpbHNfMS5pc0ludGVnZXJTdHJpbmcpKHBhdGhBcnJheVtwYXRoQXJyYXkubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjb25zdGFudHNfMS5QTEFDRUhPTERFUl9VTkRFRklORUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhc3NvY1Jlc3VsdCA9ICgwLCB1dGlsc18xLmFzc29jUGF0aCkocGF0aEFycmF5LCB2YWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBpbml0aWFsID0gKDAsIHV0aWxzXzEuaXNBcnJheSkoYXNzb2NSZXN1bHQpID8gW10gOiB7fTtcbiAgICAgICAgICAgIGluYm91bmRUb1BlcnNpc3QgPSAoMCwgdXRpbHNfMS5tZXJnZURlZXApKCFpbmJvdW5kVG9QZXJzaXN0ID8gaW5pdGlhbCA6IGluYm91bmRUb1BlcnNpc3QsIGFzc29jUmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgcHJlc2VydmVQbGFjZWhvbGRlcjogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGluYm91bmRUb1BlcnNpc3QgfHwgaW5ib3VuZFN0YXRlO1xuICAgIH0sIChvdXRib3VuZFN0YXRlKSA9PiB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5wcmVzZXJ2ZVVuZGVmaW5lZCkob3V0Ym91bmRTdGF0ZSwgd2hpdGVsaXN0LCB0eXBlc18xLkNvbmZpZ1R5cGUuV0hJVEVMSVNUKTtcbiAgICB9LCB7XG4gICAgICAgIHdoaXRlbGlzdDogW2tleV0sXG4gICAgfSk7XG59O1xuZXhwb3J0cy5jcmVhdGVXaGl0ZWxpc3QgPSBjcmVhdGVXaGl0ZWxpc3Q7XG5jb25zdCBjcmVhdGVCbGFja2xpc3QgPSAoa2V5LCBibGFja2xpc3QpID0+IHtcbiAgICAoMCwgdXRpbHNfMS5zaW5nbGVUcmFuc2Zvcm1WYWxpZGF0b3IpKGJsYWNrbGlzdCwga2V5LCB0eXBlc18xLkNvbmZpZ1R5cGUuQkxBQ0tMSVNUKTtcbiAgICByZXR1cm4gY3JlYXRlVHJhbnNmb3JtKChpbmJvdW5kU3RhdGUpID0+IHtcbiAgICAgICAgaWYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmJvdW5kVG9QZXJzaXN0ID0gKDAsIHV0aWxzXzEucHJlc2VydmVVbmRlZmluZWQpKGluYm91bmRTdGF0ZSwgYmxhY2tsaXN0LCB0eXBlc18xLkNvbmZpZ1R5cGUuQkxBQ0tMSVNULCB0cnVlKTtcbiAgICAgICAgY29uc3QgcGF0aHMgPSBibGFja2xpc3QubWFwKChzdGF0ZVBhdGgpID0+IHN0YXRlUGF0aC5zcGxpdCgnLicpKTtcbiAgICAgICAgcmV0dXJuIHBhdGhzLnJlZHVjZSgoaW5ib3VuZFRvUGVyc2lzdCwgcGF0aEFycmF5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuZGlzc29jUGF0aCkoaW5ib3VuZFRvUGVyc2lzdCwgcGF0aEFycmF5KTtcbiAgICAgICAgfSwgaW5ib3VuZFRvUGVyc2lzdCk7XG4gICAgfSwgKG91dGJvdW5kU3RhdGUpID0+IHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLnByZXNlcnZlVW5kZWZpbmVkKShvdXRib3VuZFN0YXRlLCBibGFja2xpc3QsIHR5cGVzXzEuQ29uZmlnVHlwZS5CTEFDS0xJU1QpO1xuICAgIH0sIHtcbiAgICAgICAgd2hpdGVsaXN0OiBba2V5XSxcbiAgICB9KTtcbn07XG5leHBvcnRzLmNyZWF0ZUJsYWNrbGlzdCA9IGNyZWF0ZUJsYWNrbGlzdDtcbmNvbnN0IGdldFRyYW5zZm9ybXMgPSBmdW5jdGlvbiAodHlwZSwgbGlzdCkge1xuICAgIHJldHVybiBsaXN0Lm1hcCgocm9vdE9iamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhyb290T2JqZWN0KVswXTtcbiAgICAgICAgY29uc3QgcGF0aHMgPSByb290T2JqZWN0W2tleV07XG4gICAgICAgIHJldHVybiB0eXBlID09PSB0eXBlc18xLkNvbmZpZ1R5cGUuV0hJVEVMSVNUID8gKDAsIGV4cG9ydHMuY3JlYXRlV2hpdGVsaXN0KShrZXksIHBhdGhzKSA6ICgwLCBleHBvcnRzLmNyZWF0ZUJsYWNrbGlzdCkoa2V5LCBwYXRocyk7XG4gICAgfSk7XG59O1xuZXhwb3J0cy5nZXRUcmFuc2Zvcm1zID0gZ2V0VHJhbnNmb3JtcztcbmNvbnN0IGdldFBlcnNpc3RDb25maWcgPSAoX2EpID0+IHtcbiAgICB2YXIgeyBrZXksIHdoaXRlbGlzdCwgYmxhY2tsaXN0LCBzdG9yYWdlLCB0cmFuc2Zvcm1zLCByb290UmVkdWNlciB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcImtleVwiLCBcIndoaXRlbGlzdFwiLCBcImJsYWNrbGlzdFwiLCBcInN0b3JhZ2VcIiwgXCJ0cmFuc2Zvcm1zXCIsIFwicm9vdFJlZHVjZXJcIl0pO1xuICAgICgwLCB1dGlsc18xLmNvbmZpZ1ZhbGlkYXRvcikoeyB3aGl0ZWxpc3QsIGJsYWNrbGlzdCB9KTtcbiAgICBjb25zdCB3aGl0ZWxpc3RCeVJvb3RLZXlzID0gKDAsIHV0aWxzXzEuZ2V0Um9vdEtleXNHcm91cCkod2hpdGVsaXN0KTtcbiAgICBjb25zdCBibGFja2xpc3RCeVJvb3RLZXlzID0gKDAsIHV0aWxzXzEuZ2V0Um9vdEtleXNHcm91cCkoYmxhY2tsaXN0KTtcbiAgICBjb25zdCBhbGxSb290S2V5cyA9IE9iamVjdC5rZXlzKHJvb3RSZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiAnJyB9KSk7XG4gICAgY29uc3Qgd2hpdGVsaXN0Um9vdEtleXMgPSB3aGl0ZWxpc3RCeVJvb3RLZXlzLm1hcCgocm9vdE9iamVjdCkgPT4gT2JqZWN0LmtleXMocm9vdE9iamVjdClbMF0pO1xuICAgIGNvbnN0IGJsYWNrbGlzdFJvb3RLZXlzID0gYmxhY2tsaXN0QnlSb290S2V5cy5tYXAoKHJvb3RPYmplY3QpID0+IE9iamVjdC5rZXlzKHJvb3RPYmplY3QpWzBdKTtcbiAgICBjb25zdCBrZXlzVG9FeGNsdWRlID0gYWxsUm9vdEtleXMuZmlsdGVyKChrKSA9PiB3aGl0ZWxpc3RSb290S2V5cy5pbmRleE9mKGspID09PSAtMSAmJiBibGFja2xpc3RSb290S2V5cy5pbmRleE9mKGspID09PSAtMSk7XG4gICAgY29uc3Qgd2hpdGVsaXN0VHJhbnNmb3JtcyA9ICgwLCBleHBvcnRzLmdldFRyYW5zZm9ybXMpKHR5cGVzXzEuQ29uZmlnVHlwZS5XSElURUxJU1QsIHdoaXRlbGlzdEJ5Um9vdEtleXMpO1xuICAgIGNvbnN0IGJsYWNrbGlzdFRyYW5zZm9ybXMgPSAoMCwgZXhwb3J0cy5nZXRUcmFuc2Zvcm1zKSh0eXBlc18xLkNvbmZpZ1R5cGUuQkxBQ0tMSVNULCBibGFja2xpc3RCeVJvb3RLZXlzKTtcbiAgICBjb25zdCBleGNsdWRlZEtleXNUcmFuc2Zvcm1zID0gKDAsIHV0aWxzXzEuaXNBcnJheSkod2hpdGVsaXN0KSA/IGtleXNUb0V4Y2x1ZGUubWFwKChrZXkpID0+ICgwLCBleHBvcnRzLmNyZWF0ZUJsYWNrbGlzdCkoa2V5KSkgOiBbXTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXN0KSwgeyBrZXksXG4gICAgICAgIHN0b3JhZ2UsIHRyYW5zZm9ybXM6IFtcbiAgICAgICAgICAgIC4uLndoaXRlbGlzdFRyYW5zZm9ybXMsXG4gICAgICAgICAgICAuLi5ibGFja2xpc3RUcmFuc2Zvcm1zLFxuICAgICAgICAgICAgLi4uZXhjbHVkZWRLZXlzVHJhbnNmb3JtcyxcbiAgICAgICAgICAgIC4uLih0cmFuc2Zvcm1zID8gdHJhbnNmb3JtcyA6IFtdKSxcbiAgICAgICAgXSwgc3RhdGVSZWNvbmNpbGVyOiBleHBvcnRzLmF1dG9NZXJnZURlZXAgfSk7XG59O1xuZXhwb3J0cy5nZXRQZXJzaXN0Q29uZmlnID0gZ2V0UGVyc2lzdENvbmZpZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25maWdUeXBlID0gdm9pZCAwO1xudmFyIENvbmZpZ1R5cGU7XG4oZnVuY3Rpb24gKENvbmZpZ1R5cGUpIHtcbiAgICBDb25maWdUeXBlW0NvbmZpZ1R5cGVbXCJXSElURUxJU1RcIl0gPSAwXSA9IFwiV0hJVEVMSVNUXCI7XG4gICAgQ29uZmlnVHlwZVtDb25maWdUeXBlW1wiQkxBQ0tMSVNUXCJdID0gMV0gPSBcIkJMQUNLTElTVFwiO1xufSkoQ29uZmlnVHlwZSA9IGV4cG9ydHMuQ29uZmlnVHlwZSB8fCAoZXhwb3J0cy5Db25maWdUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRSb290S2V5c0dyb3VwID0gZXhwb3J0cy50aHJvd0Vycm9yID0gZXhwb3J0cy5jb25maWdWYWxpZGF0b3IgPSBleHBvcnRzLnRyYW5zZm9ybXNWYWxpZGF0b3IgPSBleHBvcnRzLnNpbmdsZVRyYW5zZm9ybVZhbGlkYXRvciA9IGV4cG9ydHMuZmluZER1cGxpY2F0ZXNBbmRTdWJzZXRzID0gZXhwb3J0cy51bmlxdWUgPSBleHBvcnRzLnByZXNlcnZlVW5kZWZpbmVkID0gZXhwb3J0cy5tZXJnZURlZXAgPSBleHBvcnRzLmRpc3NvY1BhdGggPSBleHBvcnRzLmFzc29jUGF0aCA9IGV4cG9ydHMucGF0aCA9IGV4cG9ydHMuZGlmZmVyZW5jZSA9IGV4cG9ydHMuY2xvbmVEZWVwID0gZXhwb3J0cy5fY2xvbmVEZWVwID0gZXhwb3J0cy5nZXRDaXJjdWxhclBhdGggPSBleHBvcnRzLmlzRW1wdHkgPSBleHBvcnRzLmlzRGF0ZSA9IGV4cG9ydHMuaXNTdHJpbmcgPSBleHBvcnRzLmlzSW50ZWdlclN0cmluZyA9IGV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGV4cG9ydHMuaXNBcnJheSA9IGV4cG9ydHMuaXNMZW5ndGggPSBleHBvcnRzLmlzT2JqZWN0TGlrZSA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG5jb25zdCBpc09iamVjdExpa2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbDtcbn07XG5leHBvcnRzLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbmNvbnN0IGlzTGVuZ3RoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbn07XG5leHBvcnRzLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG5leHBvcnRzLmlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8XG4gICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoMCwgZXhwb3J0cy5pc0xlbmd0aCkodmFsdWUgJiYgdmFsdWUubGVuZ3RoKSAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH07XG5jb25zdCBpc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gISFpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiAhKDAsIGV4cG9ydHMuaXNBcnJheSkoaXRlbSk7XG59O1xuZXhwb3J0cy5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbmNvbnN0IGlzSW50ZWdlclN0cmluZyA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIFN0cmluZyh+fngpID09PSB4ICYmIE51bWJlcih4KSA+PSAwO1xufTtcbmV4cG9ydHMuaXNJbnRlZ2VyU3RyaW5nID0gaXNJbnRlZ2VyU3RyaW5nO1xuY29uc3QgaXNTdHJpbmcgPSBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xufTtcbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcbmNvbnN0IGlzRGF0ZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufTtcbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuY29uc3QgaXNFbXB0eSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59O1xuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcbmNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmNvbnN0IGdldENpcmN1bGFyUGF0aCA9IGZ1bmN0aW9uIChvYmosIHBhdGgsIHNlZW4pIHtcbiAgICBzZWVuIHx8IChzZWVuID0gbmV3IFNldChbb2JqXSkpO1xuICAgIHBhdGggfHwgKHBhdGggPSAnJyk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gcGF0aCA/IGAke3BhdGh9LiR7a2V5fWAgOiBrZXk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgIGlmICgoMCwgZXhwb3J0cy5pc09iamVjdExpa2UpKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHNlZW4uaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtwYXRofS4ke2tleX06PENpcmN1bGFyPmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWVuLmFkZCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBleHBvcnRzLmdldENpcmN1bGFyUGF0aCkodmFsdWUsIGN1cnJlbnRQYXRoLCBzZWVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5leHBvcnRzLmdldENpcmN1bGFyUGF0aCA9IGdldENpcmN1bGFyUGF0aDtcbmNvbnN0IF9jbG9uZURlZXAgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKCEoMCwgZXhwb3J0cy5pc09iamVjdExpa2UpKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgaWYgKCgwLCBleHBvcnRzLmlzRGF0ZSkob2JqKSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoK29iaik7XG4gICAgfVxuICAgIGNvbnN0IG5ld09iaiA9ICgwLCBleHBvcnRzLmlzQXJyYXkpKG9iaikgPyBbXSA6IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICBuZXdPYmpba2V5XSA9ICgwLCBleHBvcnRzLl9jbG9uZURlZXApKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld09iajtcbn07XG5leHBvcnRzLl9jbG9uZURlZXAgPSBfY2xvbmVEZWVwO1xuY29uc3QgY2xvbmVEZWVwID0gZnVuY3Rpb24gKG9iaikge1xuICAgIGNvbnN0IHBhdGggPSAoMCwgZXhwb3J0cy5nZXRDaXJjdWxhclBhdGgpKG9iaik7XG4gICAgaWYgKHBhdGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2NvbnN0YW50c18xLlBBQ0tBR0VfTkFNRX06IGNpcmN1bGFyIGRlcGVuZGVuY3kgZGV0ZWN0ZWQgdW5kZXIgdGhlIHBhdGggJyR7cGF0aH0nIG9mIG9iamVjdCB5b3UncmUgdHJ5aW5nIHRvIHBlcnNpc3Q6ICR7b2JqfWApO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGV4cG9ydHMuX2Nsb25lRGVlcCkob2JqKTtcbn07XG5leHBvcnRzLmNsb25lRGVlcCA9IGNsb25lRGVlcDtcbmNvbnN0IGRpZmZlcmVuY2UgPSBmdW5jdGlvbiAoYmFzZSwgbmV3VmFsdWUpIHtcbiAgICBpZiAoYmFzZSA9PT0gbmV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAoISgwLCBleHBvcnRzLmlzT2JqZWN0TGlrZSkoYmFzZSkgfHwgISgwLCBleHBvcnRzLmlzT2JqZWN0TGlrZSkobmV3VmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgICB9XG4gICAgY29uc3QgbCA9ICgwLCBleHBvcnRzLmNsb25lRGVlcCkoYmFzZSk7XG4gICAgY29uc3QgciA9ICgwLCBleHBvcnRzLmNsb25lRGVlcCkobmV3VmFsdWUpO1xuICAgIGNvbnN0IGRlbGV0ZWRWYWx1ZXMgPSBPYmplY3Qua2V5cyhsKS5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHIsIGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cbiAgICAgICAgYWNjW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICAgIGlmICgoMCwgZXhwb3J0cy5pc0RhdGUpKGwpIHx8ICgwLCBleHBvcnRzLmlzRGF0ZSkocikpIHtcbiAgICAgICAgaWYgKGwudmFsdWVPZigpID09PSByLnZhbHVlT2YoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBPYmplY3Qua2V5cyhyKS5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsLCBrZXkpKSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IHJba2V5XTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlmZiA9ICgwLCBleHBvcnRzLmRpZmZlcmVuY2UpKGxba2V5XSwgcltrZXldKTtcbiAgICAgICAgaWYgKCgwLCBleHBvcnRzLmlzT2JqZWN0TGlrZSkoZGlmZikgJiYgKDAsIGV4cG9ydHMuaXNFbXB0eSkoZGlmZikgJiYgISgwLCBleHBvcnRzLmlzRGF0ZSkoZGlmZikpIHtcbiAgICAgICAgICAgIGlmICgoKDAsIGV4cG9ydHMuaXNBcnJheSkobCkgJiYgISgwLCBleHBvcnRzLmlzQXJyYXkpKHIpKSB8fCAoISgwLCBleHBvcnRzLmlzQXJyYXkpKGwpICYmICgwLCBleHBvcnRzLmlzQXJyYXkpKHIpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBhY2Nba2V5XSA9IGRpZmY7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgZGVsZXRlZFZhbHVlcyk7XG4gICAgZGVsZXRlIHJlc3VsdC5fcGVyc2lzdDtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbmV4cG9ydHMuZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG5jb25zdCBwYXRoID0gZnVuY3Rpb24gKG9iaiwgcGF0aEFycmF5KSB7XG4gICAgcmV0dXJuIHBhdGhBcnJheS5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xuICAgICAgICBpZiAoYWNjKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRDdXJyID0gcGFyc2VJbnQoY3VyciwgMTApO1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSAoMCwgZXhwb3J0cy5pc0ludGVnZXJTdHJpbmcpKGN1cnIpICYmIHBhcnNlZEN1cnIgPCAwID8gYWNjLmxlbmd0aCArIHBhcnNlZEN1cnIgOiBjdXJyO1xuICAgICAgICAgICAgcmV0dXJuICgwLCBleHBvcnRzLmlzU3RyaW5nKShhY2MpID8gYWNjLmNoYXJBdChpbmRleCkgOiBhY2NbaW5kZXhdO1xuICAgICAgICB9XG4gICAgfSwgb2JqKTtcbn07XG5leHBvcnRzLnBhdGggPSBwYXRoO1xuY29uc3QgYXNzb2NQYXRoID0gZnVuY3Rpb24gKHBhdGgsIHZhbHVlKSB7XG4gICAgY29uc3QgcGF0aEFycmF5ID0gWy4uLnBhdGhdLnJldmVyc2UoKTtcbiAgICBjb25zdCByZXN1bHQgPSBwYXRoQXJyYXkucmVkdWNlKChhY2MsIGN1cnIsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gKDAsIGV4cG9ydHMuaXNJbnRlZ2VyU3RyaW5nKShjdXJyKSA/IFtdIDoge307XG4gICAgICAgIHBsYWNlaG9sZGVyW2N1cnJdID0gaW5kZXggPT09IDAgPyB2YWx1ZSA6IGFjYztcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgIH0sIHt9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbmV4cG9ydHMuYXNzb2NQYXRoID0gYXNzb2NQYXRoO1xuY29uc3QgZGlzc29jUGF0aCA9IGZ1bmN0aW9uIChvYmosIHBhdGhBcnJheSkge1xuICAgIGNvbnN0IGNsb25lID0gKDAsIGV4cG9ydHMuY2xvbmVEZWVwKShvYmopO1xuICAgIHBhdGhBcnJheS5yZWR1Y2UoKGFjYywgY3VyciwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ID09PSBwYXRoQXJyYXkubGVuZ3RoIC0gMSAmJiBhY2MpIHtcbiAgICAgICAgICAgIGlmICgoMCwgZXhwb3J0cy5pc09iamVjdExpa2UpKGFjYykpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgYWNjW2N1cnJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2MgJiYgYWNjW2N1cnJdO1xuICAgIH0sIGNsb25lKTtcbiAgICByZXR1cm4gY2xvbmU7XG59O1xuZXhwb3J0cy5kaXNzb2NQYXRoID0gZGlzc29jUGF0aDtcbmNvbnN0IF9tZXJnZURlZXAgPSBmdW5jdGlvbiAob3B0aW9ucywgdGFyZ2V0LCAuLi5zb3VyY2VzKSB7XG4gICAgaWYgKCFzb3VyY2VzIHx8ICFzb3VyY2VzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KCk7XG4gICAgY29uc3QgeyBwcmVzZXJ2ZVBsYWNlaG9sZGVyLCBwcmVzZXJ2ZVVuZGVmaW5lZCB9ID0gb3B0aW9ucztcbiAgICBpZiAoKDAsIGV4cG9ydHMuaXNPYmplY3RMaWtlKSh0YXJnZXQpICYmICgwLCBleHBvcnRzLmlzT2JqZWN0TGlrZSkoc291cmNlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmICgoMCwgZXhwb3J0cy5pc09iamVjdExpa2UpKHNvdXJjZVtrZXldKSAmJiAoMCwgZXhwb3J0cy5pc09iamVjdExpa2UpKHRhcmdldFtrZXldKSkge1xuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0W2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX21lcmdlRGVlcChvcHRpb25zLCB0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCBleHBvcnRzLmlzQXJyYXkpKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNvdXJjZVZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gcHJlc2VydmVQbGFjZWhvbGRlciA/IGNvbnN0YW50c18xLlBMQUNFSE9MREVSX1VOREVGSU5FRCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmVzZXJ2ZVVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlVmFsdWUgPSB0eXBlb2Ygc291cmNlVmFsdWUgIT09ICd1bmRlZmluZWQnID8gc291cmNlVmFsdWUgOiB0YXJnZXRbcGFyc2VJbnQoa2V5LCAxMCldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVZhbHVlID0gc291cmNlVmFsdWUgIT09IGNvbnN0YW50c18xLlBMQUNFSE9MREVSX1VOREVGSU5FRCA/IHNvdXJjZVZhbHVlIDogcGxhY2Vob2xkZXI7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtwYXJzZUludChrZXksIDEwKV0gPSBzb3VyY2VWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gc291cmNlW2tleV0gIT09IGNvbnN0YW50c18xLlBMQUNFSE9MREVSX1VOREVGSU5FRCA/IHNvdXJjZVtrZXldIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX21lcmdlRGVlcChvcHRpb25zLCB0YXJnZXQsIC4uLnNvdXJjZXMpO1xufTtcbmNvbnN0IG1lcmdlRGVlcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKHtcbiAgICAgICAgcHJlc2VydmVQbGFjZWhvbGRlcjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByZXNlcnZlUGxhY2Vob2xkZXIsXG4gICAgICAgIHByZXNlcnZlVW5kZWZpbmVkOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucHJlc2VydmVVbmRlZmluZWQsXG4gICAgfSwgKDAsIGV4cG9ydHMuY2xvbmVEZWVwKSh0YXJnZXQpLCAoMCwgZXhwb3J0cy5jbG9uZURlZXApKHNvdXJjZSkpO1xufTtcbmV4cG9ydHMubWVyZ2VEZWVwID0gbWVyZ2VEZWVwO1xuY29uc3QgX3ByZXNlcnZlVW5kZWZpbmVkID0gZnVuY3Rpb24gKG9iaiwgcGF0aHNBcnJheSA9IFtdLCB0eXBlLCBwcmV2UGF0aCwgcHJlc2VydmVBc1BsYWNlaG9sZGVyKSB7XG4gICAgaWYgKCEoMCwgZXhwb3J0cy5pc09iamVjdExpa2UpKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgIGNvbnN0IGJlbG9uZ3NUb0FycmF5ID0gKDAsIGV4cG9ydHMuaXNBcnJheSkob2JqKTtcbiAgICAgICAgY29uc3QgcGF0aFN0cmluZyA9IHByZXZQYXRoID8gcHJldlBhdGggKyAnLicgKyBrZXkgOiBrZXk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCAmJlxuICAgICAgICAgICAgKCh0eXBlID09PSB0eXBlc18xLkNvbmZpZ1R5cGUuV0hJVEVMSVNUICYmIHBhdGhzQXJyYXkuaW5kZXhPZihwYXRoU3RyaW5nKSA9PT0gLTEpIHx8XG4gICAgICAgICAgICAgICAgKHR5cGUgPT09IHR5cGVzXzEuQ29uZmlnVHlwZS5CTEFDS0xJU1QgJiYgcGF0aHNBcnJheS5pbmRleE9mKHBhdGhTdHJpbmcpICE9PSAtMSkpICYmXG4gICAgICAgICAgICBiZWxvbmdzVG9BcnJheSkge1xuICAgICAgICAgICAgb2JqW3BhcnNlSW50KGtleSwgMTApXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgcHJlc2VydmVBc1BsYWNlaG9sZGVyICYmXG4gICAgICAgICAgICB0eXBlID09PSB0eXBlc18xLkNvbmZpZ1R5cGUuQkxBQ0tMSVNUICYmXG4gICAgICAgICAgICBwYXRoc0FycmF5LmluZGV4T2YocGF0aFN0cmluZykgPT09IC0xICYmXG4gICAgICAgICAgICBiZWxvbmdzVG9BcnJheSkge1xuICAgICAgICAgICAgb2JqW3BhcnNlSW50KGtleSwgMTApXSA9IGNvbnN0YW50c18xLlBMQUNFSE9MREVSX1VOREVGSU5FRDtcbiAgICAgICAgfVxuICAgICAgICBfcHJlc2VydmVVbmRlZmluZWQodmFsdWUsIHBhdGhzQXJyYXksIHR5cGUsIHBhdGhTdHJpbmcsIHByZXNlcnZlQXNQbGFjZWhvbGRlcik7XG4gICAgfVxufTtcbmNvbnN0IHByZXNlcnZlVW5kZWZpbmVkID0gZnVuY3Rpb24gKG91dGJvdW5kU3RhdGUsIHBhdGhzQXJyYXksIHR5cGUsIHByZXNlcnZlQXNQbGFjZWhvbGRlcikge1xuICAgIGNvbnN0IGNsb25lID0gKDAsIGV4cG9ydHMuY2xvbmVEZWVwKShvdXRib3VuZFN0YXRlKTtcbiAgICBfcHJlc2VydmVVbmRlZmluZWQoY2xvbmUsIHBhdGhzQXJyYXksIHR5cGUsICcnLCBwcmVzZXJ2ZUFzUGxhY2Vob2xkZXIpO1xuICAgIHJldHVybiBjbG9uZTtcbn07XG5leHBvcnRzLnByZXNlcnZlVW5kZWZpbmVkID0gcHJlc2VydmVVbmRlZmluZWQ7XG5jb25zdCB1bmlxdWUgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBzZWxmKSB7XG4gICAgcmV0dXJuIHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4O1xufTtcbmV4cG9ydHMudW5pcXVlID0gdW5pcXVlO1xuY29uc3QgZmluZER1cGxpY2F0ZXNBbmRTdWJzZXRzID0gZnVuY3Rpb24gKGxpc3QpIHtcbiAgICByZXR1cm4gbGlzdC5yZWR1Y2UoKGVudGl0aWVzLCBwYXRoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkRHVwbGljYXRlcyA9IGxpc3QuZmlsdGVyKChpbm5lcikgPT4gaW5uZXIgPT09IHBhdGgpO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZFN1YnNldHMgPSBsaXN0LmZpbHRlcigoaW5uZXIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAocGF0aCArICcuJykuaW5kZXhPZihpbm5lciArICcuJykgPT09IDA7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IGR1cGxpY2F0ZXMsIHN1YnNldHMgfSA9IGVudGl0aWVzO1xuICAgICAgICBjb25zdCBmb3VuZER1cGxpY2F0ZXMgPSBmaWx0ZXJlZER1cGxpY2F0ZXMubGVuZ3RoID4gMSAmJiBkdXBsaWNhdGVzLmluZGV4T2YocGF0aCkgPT09IC0xO1xuICAgICAgICBjb25zdCBmb3VuZFN1YnNldHMgPSBmaWx0ZXJlZFN1YnNldHMubGVuZ3RoID4gMTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGR1cGxpY2F0ZXM6IFsuLi5kdXBsaWNhdGVzLCAuLi4oZm91bmREdXBsaWNhdGVzID8gZmlsdGVyZWREdXBsaWNhdGVzIDogW10pXSxcbiAgICAgICAgICAgIHN1YnNldHM6IFsuLi5zdWJzZXRzLCAuLi4oZm91bmRTdWJzZXRzID8gZmlsdGVyZWRTdWJzZXRzIDogW10pXS5maWx0ZXIoZXhwb3J0cy51bmlxdWUpLnNvcnQoKSxcbiAgICAgICAgfTtcbiAgICB9LCB7XG4gICAgICAgIGR1cGxpY2F0ZXM6IFtdLFxuICAgICAgICBzdWJzZXRzOiBbXSxcbiAgICB9KTtcbn07XG5leHBvcnRzLmZpbmREdXBsaWNhdGVzQW5kU3Vic2V0cyA9IGZpbmREdXBsaWNhdGVzQW5kU3Vic2V0cztcbmNvbnN0IHNpbmdsZVRyYW5zZm9ybVZhbGlkYXRvciA9IGZ1bmN0aW9uIChjb25maWcsIG5hbWUsIHR5cGUpIHtcbiAgICBjb25zdCBsaXN0VHlwZSA9IHR5cGUgPT09IHR5cGVzXzEuQ29uZmlnVHlwZS5XSElURUxJU1QgPyAnd2hpdGVsaXN0JyA6ICdibGFja2xpc3QnO1xuICAgIGNvbnN0IGNvbW1vbkVycm9yTXNnMSA9IGAke2NvbnN0YW50c18xLlBBQ0tBR0VfTkFNRX06IGluY29ycmVjdCAke2xpc3RUeXBlfSBjb25maWd1cmF0aW9uLmA7XG4gICAgY29uc3QgY29tbW9uRXJyb3JNc2cyID0gYENoZWNrIHlvdXIgY3JlYXRlJHt0eXBlID09PSB0eXBlc18xLkNvbmZpZ1R5cGUuV0hJVEVMSVNUID8gJ1doaXRlJyA6ICdCbGFjayd9bGlzdCBhcmd1bWVudHMuXFxuXFxuYDtcbiAgICBpZiAoISgwLCBleHBvcnRzLmlzU3RyaW5nKShuYW1lKSB8fCBuYW1lLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2NvbW1vbkVycm9yTXNnMX0gTmFtZSAoa2V5KSBvZiByZWR1Y2VyIGlzIHJlcXVpcmVkLiAke2NvbW1vbkVycm9yTXNnMn1gKTtcbiAgICB9XG4gICAgaWYgKCFjb25maWcgfHwgIWNvbmZpZy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IGR1cGxpY2F0ZXMsIHN1YnNldHMgfSA9ICgwLCBleHBvcnRzLmZpbmREdXBsaWNhdGVzQW5kU3Vic2V0cykoY29uZmlnKTtcbiAgICBpZiAoZHVwbGljYXRlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtjb21tb25FcnJvck1zZzF9IER1cGxpY2F0ZWQgcGF0aHMuXFxuXFxuICR7SlNPTi5zdHJpbmdpZnkoZHVwbGljYXRlcyl9XFxuXFxuICR7Y29tbW9uRXJyb3JNc2cyfWApO1xuICAgIH1cbiAgICBpZiAoc3Vic2V0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtjb21tb25FcnJvck1zZzF9IFlvdSBhcmUgdHJ5aW5nIHRvIHBlcnNpc3QgYW4gZW50aXJlIHByb3BlcnR5IGFuZCBhbHNvIHNvbWUgb2YgaXRzIHN1YnNldC5cXG5cXG4ke0pTT04uc3RyaW5naWZ5KHN1YnNldHMpfVxcblxcbiAke2NvbW1vbkVycm9yTXNnMn1gKTtcbiAgICB9XG59O1xuZXhwb3J0cy5zaW5nbGVUcmFuc2Zvcm1WYWxpZGF0b3IgPSBzaW5nbGVUcmFuc2Zvcm1WYWxpZGF0b3I7XG5jb25zdCB0cmFuc2Zvcm1zVmFsaWRhdG9yID0gZnVuY3Rpb24gKHRyYW5zZm9ybXMpIHtcbiAgICBpZiAoISgwLCBleHBvcnRzLmlzQXJyYXkpKHRyYW5zZm9ybXMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qga2V5cyA9ICh0cmFuc2Zvcm1zID09PSBudWxsIHx8IHRyYW5zZm9ybXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRyYW5zZm9ybXMubWFwKCh0KSA9PiB0LmRlZXBQZXJzaXN0S2V5KS5maWx0ZXIoKGspID0+IGspKSB8fCBbXTtcbiAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZHVwbGljYXRlcyA9IGtleXMuZmlsdGVyKChrZXksIGluZGV4KSA9PiBrZXlzLmluZGV4T2Yoa2V5KSAhPT0gaW5kZXgpO1xuICAgICAgICBpZiAoZHVwbGljYXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtjb25zdGFudHNfMS5QQUNLQUdFX05BTUV9OiBmb3VuZCBkdXBsaWNhdGVkIGtleXMgaW4gdHJhbnNmb3JtcyBjcmVhdG9ycy4gWW91IGNhbiBjcmVhdGVXaGl0ZWxpc3Qgb3IgY3JlYXRlQmxhY2tsaXN0IGZvciBhIHNwZWNpZmljIHJvb3QgcmVkdWNlciBrZXkgb25seSBvbmNlLiBEdXBsaWNhdGVkIGtleXMgYW1vbmcgY3JlYXRlV2hpdGVsaXN0IGFuZCBjcmVhdGVCbGFja2xpc3QgdHJhbnNmb3JtcyBhcmUgbm90IGFsbG93ZWQuXFxuXFxuIER1cGxpY2F0ZXM6ICR7SlNPTi5zdHJpbmdpZnkoZHVwbGljYXRlcyl9YCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuZXhwb3J0cy50cmFuc2Zvcm1zVmFsaWRhdG9yID0gdHJhbnNmb3Jtc1ZhbGlkYXRvcjtcbmNvbnN0IGNvbmZpZ1ZhbGlkYXRvciA9IGZ1bmN0aW9uICh7IHdoaXRlbGlzdCwgYmxhY2tsaXN0IH0pIHtcbiAgICBpZiAod2hpdGVsaXN0ICYmIHdoaXRlbGlzdC5sZW5ndGggJiYgYmxhY2tsaXN0ICYmIGJsYWNrbGlzdC5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2NvbnN0YW50c18xLlBBQ0tBR0VfTkFNRX06IHlvdSBzaG91bGQgbm90IGRlZmluZSBhIHdoaXRlbGlzdCBhbmQgYmxhY2tsaXN0IGluIHBhcmFsbGVsLiBJdCBpcyBhbGxvd2VkIHRvIHVzZSBvbmx5IG9uZSBvZiB0aGVzZSBsaXN0cyBwZXIgY29uZmlnLmApO1xuICAgIH1cbiAgICBpZiAod2hpdGVsaXN0KSB7XG4gICAgICAgIGNvbnN0IHsgZHVwbGljYXRlcywgc3Vic2V0cyB9ID0gKDAsIGV4cG9ydHMuZmluZER1cGxpY2F0ZXNBbmRTdWJzZXRzKSh3aGl0ZWxpc3QpO1xuICAgICAgICAoMCwgZXhwb3J0cy50aHJvd0Vycm9yKSh7IGR1cGxpY2F0ZXMsIHN1YnNldHMgfSwgJ3doaXRlbGlzdCcpO1xuICAgIH1cbiAgICBpZiAoYmxhY2tsaXN0KSB7XG4gICAgICAgIGNvbnN0IHsgZHVwbGljYXRlcywgc3Vic2V0cyB9ID0gKDAsIGV4cG9ydHMuZmluZER1cGxpY2F0ZXNBbmRTdWJzZXRzKShibGFja2xpc3QpO1xuICAgICAgICAoMCwgZXhwb3J0cy50aHJvd0Vycm9yKSh7IGR1cGxpY2F0ZXMsIHN1YnNldHMgfSwgJ2JsYWNrbGlzdCcpO1xuICAgIH1cbn07XG5leHBvcnRzLmNvbmZpZ1ZhbGlkYXRvciA9IGNvbmZpZ1ZhbGlkYXRvcjtcbmNvbnN0IHRocm93RXJyb3IgPSBmdW5jdGlvbiAoeyBkdXBsaWNhdGVzLCBzdWJzZXRzIH0sIGxpc3RUeXBlKSB7XG4gICAgaWYgKGR1cGxpY2F0ZXMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtjb25zdGFudHNfMS5QQUNLQUdFX05BTUV9OiBkdXBsaWNhdGVzIG9mIHBhdGhzIGZvdW5kIGluIHlvdXIgJHtsaXN0VHlwZX0uXFxuXFxuICR7SlNPTi5zdHJpbmdpZnkoZHVwbGljYXRlcyl9YCk7XG4gICAgfVxuICAgIGlmIChzdWJzZXRzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7Y29uc3RhbnRzXzEuUEFDS0FHRV9OQU1FfTogc3Vic2V0cyBvZiBzb21lIHBhcmVudCBrZXlzIGZvdW5kIGluIHlvdXIgJHtsaXN0VHlwZX0uIFlvdSBtdXN0IGRlY2lkZSBpZiB5b3Ugd2FudCB0byBwZXJzaXN0IGFuIGVudGlyZSBwYXRoIG9yIGl0cyBzcGVjaWZpYyBzdWJzZXQuXFxuXFxuICR7SlNPTi5zdHJpbmdpZnkoc3Vic2V0cyl9YCk7XG4gICAgfVxufTtcbmV4cG9ydHMudGhyb3dFcnJvciA9IHRocm93RXJyb3I7XG5jb25zdCBnZXRSb290S2V5c0dyb3VwID0gZnVuY3Rpb24gKGxpc3QpIHtcbiAgICBpZiAoISgwLCBleHBvcnRzLmlzQXJyYXkpKGxpc3QpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3QuZmlsdGVyKGV4cG9ydHMudW5pcXVlKS5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xuICAgICAgICBjb25zdCBwYXRoQXJyYXkgPSBjdXJyLnNwbGl0KCcuJyk7XG4gICAgICAgIGNvbnN0IHJvb3RLZXkgPSBwYXRoQXJyYXlbMF07XG4gICAgICAgIGNvbnN0IHBhdGggPSBwYXRoQXJyYXkuc2xpY2UoMSkuam9pbignLicpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdFbGVtZW50ID0gYWNjLmZpbHRlcigoZW50aXR5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhlbnRpdHkpWzBdO1xuICAgICAgICAgICAgcmV0dXJuIGtleSA9PT0gcm9vdEtleTtcbiAgICAgICAgfSlbMF07XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nVmFsdWUgPSBleGlzdGluZ0VsZW1lbnQgPyBPYmplY3QudmFsdWVzKGV4aXN0aW5nRWxlbWVudClbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghZXhpc3RpbmdFbGVtZW50KSB7XG4gICAgICAgICAgICBhY2MucHVzaCh7XG4gICAgICAgICAgICAgICAgW3Jvb3RLZXldOiBwYXRoID8gW3BhdGhdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4aXN0aW5nRWxlbWVudCAmJiAhZXhpc3RpbmdWYWx1ZSAmJiBwYXRoKSB7XG4gICAgICAgICAgICBleGlzdGluZ0VsZW1lbnRbcm9vdEtleV0gPSBbcGF0aF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4aXN0aW5nRWxlbWVudCAmJiBleGlzdGluZ1ZhbHVlICYmIHBhdGgpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nVmFsdWUucHVzaChwYXRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcbn07XG5leHBvcnRzLmdldFJvb3RLZXlzR3JvdXAgPSBnZXRSb290S2V5c0dyb3VwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVXZWJTdG9yYWdlO1xuXG52YXIgX2dldFN0b3JhZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dldFN0b3JhZ2VcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBjcmVhdGVXZWJTdG9yYWdlKHR5cGUpIHtcbiAgdmFyIHN0b3JhZ2UgPSAoMCwgX2dldFN0b3JhZ2UuZGVmYXVsdCkodHlwZSk7XG4gIHJldHVybiB7XG4gICAgZ2V0SXRlbTogZnVuY3Rpb24gZ2V0SXRlbShrZXkpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHJlc29sdmUoc3RvcmFnZS5nZXRJdGVtKGtleSkpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXRJdGVtOiBmdW5jdGlvbiBzZXRJdGVtKGtleSwgaXRlbSkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcmVzb2x2ZShzdG9yYWdlLnNldEl0ZW0oa2V5LCBpdGVtKSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbW92ZUl0ZW06IGZ1bmN0aW9uIHJlbW92ZUl0ZW0oa2V5KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICByZXNvbHZlKHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldFN0b3JhZ2U7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgbm9vcFN0b3JhZ2UgPSB7XG4gIGdldEl0ZW06IG5vb3AsXG4gIHNldEl0ZW06IG5vb3AsXG4gIHJlbW92ZUl0ZW06IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIGhhc1N0b3JhZ2Uoc3RvcmFnZVR5cGUpIHtcbiAgaWYgKCh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHNlbGYpKSAhPT0gJ29iamVjdCcgfHwgIShzdG9yYWdlVHlwZSBpbiBzZWxmKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIHN0b3JhZ2UgPSBzZWxmW3N0b3JhZ2VUeXBlXTtcbiAgICB2YXIgdGVzdEtleSA9IFwicmVkdXgtcGVyc2lzdCBcIi5jb25jYXQoc3RvcmFnZVR5cGUsIFwiIHRlc3RcIik7XG4gICAgc3RvcmFnZS5zZXRJdGVtKHRlc3RLZXksICd0ZXN0Jyk7XG4gICAgc3RvcmFnZS5nZXRJdGVtKHRlc3RLZXkpO1xuICAgIHN0b3JhZ2UucmVtb3ZlSXRlbSh0ZXN0S2V5KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBjb25zb2xlLndhcm4oXCJyZWR1eC1wZXJzaXN0IFwiLmNvbmNhdChzdG9yYWdlVHlwZSwgXCIgdGVzdCBmYWlsZWQsIHBlcnNpc3RlbmNlIHdpbGwgYmUgZGlzYWJsZWQuXCIpKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RvcmFnZSh0eXBlKSB7XG4gIHZhciBzdG9yYWdlVHlwZSA9IFwiXCIuY29uY2F0KHR5cGUsIFwiU3RvcmFnZVwiKTtcbiAgaWYgKGhhc1N0b3JhZ2Uoc3RvcmFnZVR5cGUpKSByZXR1cm4gc2VsZltzdG9yYWdlVHlwZV07ZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJyZWR1eC1wZXJzaXN0IGZhaWxlZCB0byBjcmVhdGUgc3luYyBzdG9yYWdlLiBmYWxsaW5nIGJhY2sgdG8gbm9vcCBzdG9yYWdlLlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9vcFN0b3JhZ2U7XG4gIH1cbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVXZWJTdG9yYWdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVXZWJTdG9yYWdlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVXZWJTdG9yYWdlLmRlZmF1bHQpKCdsb2NhbCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCLCBjb21wYXJlLCBjb21wYXJlQ29udGV4dCkge1xuICB2YXIgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgb2JqQSwgb2JqQikgOiB2b2lkIDA7XG5cbiAgaWYgKHJldCAhPT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuICEhcmV0O1xuICB9XG5cbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQSB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYkhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKG9iakIpO1xuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGtleXNBLmxlbmd0aDsgaWR4KyspIHtcbiAgICB2YXIga2V5ID0ga2V5c0FbaWR4XTtcblxuICAgIGlmICghYkhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVBID0gb2JqQVtrZXldO1xuICAgIHZhciB2YWx1ZUIgPSBvYmpCW2tleV07XG5cbiAgICByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCB2YWx1ZUEsIHZhbHVlQiwga2V5KSA6IHZvaWQgMDtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IChyZXQgPT09IHZvaWQgMCAmJiB2YWx1ZUEgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiB1c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZT1yZXF1aXJlKFwicmVhY3RcIik7ZnVuY3Rpb24gaChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGs9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6aCxsPWUudXNlU3RhdGUsbT1lLnVzZUVmZmVjdCxuPWUudXNlTGF5b3V0RWZmZWN0LHA9ZS51c2VEZWJ1Z1ZhbHVlO2Z1bmN0aW9uIHEoYSxiKXt2YXIgZD1iKCksZj1sKHtpbnN0Ont2YWx1ZTpkLGdldFNuYXBzaG90OmJ9fSksYz1mWzBdLmluc3QsZz1mWzFdO24oZnVuY3Rpb24oKXtjLnZhbHVlPWQ7Yy5nZXRTbmFwc2hvdD1iO3IoYykmJmcoe2luc3Q6Y30pfSxbYSxkLGJdKTttKGZ1bmN0aW9uKCl7cihjKSYmZyh7aW5zdDpjfSk7cmV0dXJuIGEoZnVuY3Rpb24oKXtyKGMpJiZnKHtpbnN0OmN9KX0pfSxbYV0pO3AoZCk7cmV0dXJuIGR9XG5mdW5jdGlvbiByKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgZD1iKCk7cmV0dXJuIWsoYSxkKX1jYXRjaChmKXtyZXR1cm4hMH19ZnVuY3Rpb24gdChhLGIpe3JldHVybiBiKCl9dmFyIHU9XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50P3Q6cTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPXZvaWQgMCE9PWUudXNlU3luY0V4dGVybmFsU3RvcmU/ZS51c2VTeW5jRXh0ZXJuYWxTdG9yZTp1O1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgaD1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwidXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbVwiKTtmdW5jdGlvbiBwKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgcT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpwLHI9bi51c2VTeW5jRXh0ZXJuYWxTdG9yZSx0PWgudXNlUmVmLHU9aC51c2VFZmZlY3Qsdj1oLnVzZU1lbW8sdz1oLnVzZURlYnVnVmFsdWU7XG5leHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yPWZ1bmN0aW9uKGEsYixlLGwsZyl7dmFyIGM9dChudWxsKTtpZihudWxsPT09Yy5jdXJyZW50KXt2YXIgZj17aGFzVmFsdWU6ITEsdmFsdWU6bnVsbH07Yy5jdXJyZW50PWZ9ZWxzZSBmPWMuY3VycmVudDtjPXYoZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEpe2lmKCFjKXtjPSEwO2Q9YTthPWwoYSk7aWYodm9pZCAwIT09ZyYmZi5oYXNWYWx1ZSl7dmFyIGI9Zi52YWx1ZTtpZihnKGIsYSkpcmV0dXJuIGs9Yn1yZXR1cm4gaz1hfWI9aztpZihxKGQsYSkpcmV0dXJuIGI7dmFyIGU9bChhKTtpZih2b2lkIDAhPT1nJiZnKGIsZSkpcmV0dXJuIGI7ZD1hO3JldHVybiBrPWV9dmFyIGM9ITEsZCxrLG09dm9pZCAwPT09ZT9udWxsOmU7cmV0dXJuW2Z1bmN0aW9uKCl7cmV0dXJuIGEoYigpKX0sbnVsbD09PW0/dm9pZCAwOmZ1bmN0aW9uKCl7cmV0dXJuIGEobSgpKX1dfSxbYixlLGwsZ10pO3ZhciBkPXIoYSxjWzBdLGNbMV0pO1xudShmdW5jdGlvbigpe2YuaGFzVmFsdWU9ITA7Zi52YWx1ZT1kfSxbZF0pO3coZCk7cmV0dXJuIGR9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbmxldCBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCBjb25zdCBzZXRCYXRjaCA9IG5ld0JhdGNoID0+IGJhdGNoID0gbmV3QmF0Y2g7IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgY29uc3QgZ2V0QmF0Y2ggPSAoKSA9PiBiYXRjaDsiLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuZXhwb3J0IGNvbnN0IFJlYWN0UmVkdXhDb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuXG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcclxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWR1eENvbnRleHQoKSB7XG4gIGNvbnN0IGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VEZWJ1Z1ZhbHVlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyBub3RJbml0aWFsaXplZCB9IGZyb20gJy4uL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlJztcbmxldCB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciA9IG5vdEluaXRpYWxpemVkO1xuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVVc2VTZWxlY3RvciA9IGZuID0+IHtcbiAgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgPSBmbjtcbn07XG5cbmNvbnN0IHJlZkVxdWFsaXR5ID0gKGEsIGIpID0+IGEgPT09IGI7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dCkge1xuICBjb25zdCB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiAoKSA9PiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yYCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcmApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVxdWFsaXR5Rm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYW4gZXF1YWxpdHkgZnVuY3Rpb24gdG8gdXNlU2VsZWN0b3JgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbixcbiAgICAgIGdldFNlcnZlclN0YXRlXG4gICAgfSA9IHVzZVJlZHV4Q29udGV4dCgpO1xuICAgIGNvbnN0IHNlbGVjdGVkU3RhdGUgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvcihzdWJzY3JpcHRpb24uYWRkTmVzdGVkU3ViLCBzdG9yZS5nZXRTdGF0ZSwgZ2V0U2VydmVyU3RhdGUgfHwgc3RvcmUuZ2V0U3RhdGUsIHNlbGVjdG9yLCBlcXVhbGl0eUZuKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgY29uc3QgdXNlU2VsZWN0b3IgPSAvKiNfX1BVUkVfXyovY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiZXhwb3J0IGNvbnN0IG5vdEluaXRpYWxpemVkID0gKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3VTRVMgbm90IGluaXRpYWxpemVkIScpO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIGNvbnN0IGJhdGNoID0gZ2V0QmF0Y2goKTtcbiAgbGV0IGZpcnN0ID0gbnVsbDtcbiAgbGV0IGxhc3QgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcblxuICAgIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKCgpID0+IHtcbiAgICAgICAgbGV0IGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXQoKSB7XG4gICAgICBsZXQgbGlzdGVuZXJzID0gW107XG4gICAgICBsZXQgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG5cbiAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIGxldCBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgbGV0IGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICB9O1xufVxuXG5jb25zdCBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnkoKSB7fSxcblxuICBnZXQ6ICgpID0+IFtdXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gIGxldCB1bnN1YnNjcmliZTtcbiAgbGV0IGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG5cbiAgZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIGxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICBsaXN0ZW5lcnMubm90aWZ5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmIChzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odW5zdWJzY3JpYmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdW5zdWJzY3JpYmUpIHtcbiAgICAgIHVuc3Vic2NyaWJlID0gcGFyZW50U3ViID8gcGFyZW50U3ViLmFkZE5lc3RlZFN1YihoYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHN0b3JlLnN1YnNjcmliZShoYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIGxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIHVuc3Vic2NyaWJlID0gdW5kZWZpbmVkO1xuICAgICAgbGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICBsaXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHtcbiAgICBhZGROZXN0ZWRTdWIsXG4gICAgbm90aWZ5TmVzdGVkU3VicyxcbiAgICBoYW5kbGVDaGFuZ2VXcmFwcGVyLFxuICAgIGlzU3Vic2NyaWJlZCxcbiAgICB0cnlTdWJzY3JpYmUsXG4gICAgdHJ5VW5zdWJzY3JpYmUsXG4gICAgZ2V0TGlzdGVuZXJzOiAoKSA9PiBsaXN0ZW5lcnNcbiAgfTtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn0iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcbi8vIE1hdGNoZXMgbG9naWMgaW4gUmVhY3QncyBgc2hhcmVkL0V4ZWN1dGlvbkVudmlyb25tZW50YCBmaWxlXG5cbmV4cG9ydCBjb25zdCBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnKTtcbmV4cG9ydCBjb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gY2FuVXNlRE9NID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXCJdO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUsIGlzQ29udGV4dENvbnN1bWVyIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi4vY29ubmVjdC9zZWxlY3RvckZhY3RvcnknO1xuaW1wb3J0IHsgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeSB9IGZyb20gJy4uL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCB7IG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkgfSBmcm9tICcuLi9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgeyBtZXJnZVByb3BzRmFjdG9yeSB9IGZyb20gJy4uL2Nvbm5lY3QvbWVyZ2VQcm9wcyc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgeyBub3RJbml0aWFsaXplZCB9IGZyb20gJy4uL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlJztcbmxldCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IG5vdEluaXRpYWxpemVkO1xuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVDb25uZWN0ID0gZm4gPT4ge1xuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IGZuO1xufTsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxuY29uc3QgRU1QVFlfQVJSQVkgPSBbbnVsbCwgMF07XG5jb25zdCBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07IC8vIEF0dGVtcHRzIHRvIHN0cmluZ2lmeSB3aGF0ZXZlciBub3QtcmVhbGx5LWEtY29tcG9uZW50IHZhbHVlIHdlIHdlcmUgZ2l2ZW5cbi8vIGZvciBsb2dnaW5nIGluIGFuIGVycm9yIG1lc3NhZ2VcblxuY29uc3Qgc3RyaW5naWZ5Q29tcG9uZW50ID0gQ29tcCA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG4vLyBUaGlzIGlzIFwianVzdFwiIGEgYHVzZUxheW91dEVmZmVjdGAsIGJ1dCB3aXRoIHR3byBtb2RpZmljYXRpb25zOlxuLy8gLSB3ZSBuZWVkIHRvIGZhbGwgYmFjayB0byBgdXNlRWZmZWN0YCBpbiBTU1IgdG8gYXZvaWQgYW5ub3lpbmcgd2FybmluZ3Ncbi8vIC0gd2UgZXh0cmFjdCB0aGlzIHRvIGEgc2VwYXJhdGUgZnVuY3Rpb24gdG8gYXZvaWQgY2xvc2luZyBvdmVyIHZhbHVlc1xuLy8gICBhbmQgY2F1c2luZyBtZW1vcnkgbGVha3NcbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiBlZmZlY3RGdW5jKC4uLmVmZmVjdEFyZ3MpLCBkZXBlbmRlbmNpZXMpO1xufSAvLyBFZmZlY3QgY2FsbGJhY2ssIGV4dHJhY3RlZDogYXNzaWduIHRoZSBsYXRlc3QgcHJvcHMgdmFsdWVzIHRvIHJlZnMgZm9yIGxhdGVyIHVzYWdlXG5cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgLy8gYWN0dWFsQ2hpbGRQcm9wczogdW5rbm93bixcbmNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMpIHtcbiAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufSAvLyBFZmZlY3QgY2FsbGJhY2ssIGV4dHJhY3RlZDogc3Vic2NyaWJlIHRvIHRoZSBSZWR1eCBzdG9yZSBvciBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvcixcbi8vIGNoZWNrIGZvciB1cGRhdGVzIGFmdGVyIGRpc3BhdGNoZWQgYWN0aW9ucywgYW5kIHRyaWdnZXIgcmUtcmVuZGVycy5cblxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGlzTW91bnRlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgLy8gZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaDogUmVhY3QuRGlzcGF0Y2g8YW55PixcbmFkZGl0aW9uYWxTdWJzY3JpYmVMaXN0ZW5lcikge1xuICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuICgpID0+IHt9OyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICBsZXQgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgbGV0IGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICBjb25zdCBjaGVja0ZvclVwZGF0ZXMgPSAoKSA9PiB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlIHx8ICFpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFRPRE8gV2UncmUgY3VycmVudGx5IGNhbGxpbmcgZ2V0U3RhdGUgb3Vyc2VsdmVzIGhlcmUsIHJhdGhlciB0aGFuIGxldHRpbmcgYHVTRVNgIGRvIGl0XG5cblxuICAgIGNvbnN0IGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGxldCBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gVE9ETyBUaGlzIGlzIGhhY2t5IGFuZCBub3QgaG93IGB1U0VTYCBpcyBtZWFudCB0byBiZSB1c2VkXG4gICAgICAvLyBUcmlnZ2VyIHRoZSBSZWFjdCBgdXNlU3luY0V4dGVybmFsU3RvcmVgIHN1YnNjcmliZXJcblxuICAgICAgYWRkaXRpb25hbFN1YnNjcmliZUxpc3RlbmVyKCk7XG4gICAgfVxuICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgY29uc3QgdW5zdWJzY3JpYmVXcmFwcGVyID0gKCkgPT4ge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59IC8vIFJlZHVjZXIgaW5pdGlhbCBzdGF0ZSBjcmVhdGlvbiBmb3Igb3VyIHVwZGF0ZSByZWR1Y2VyXG5cblxuY29uc3QgaW5pdFN0YXRlVXBkYXRlcyA9ICgpID0+IEVNUFRZX0FSUkFZO1xuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuLyoqXHJcbiAqIEluZmVycyB0aGUgdHlwZSBvZiBwcm9wcyB0aGF0IGEgY29ubmVjdG9yIHdpbGwgaW5qZWN0IGludG8gYSBjb21wb25lbnQuXHJcbiAqL1xuXG5cbmxldCBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uID0gZmFsc2U7XG4vKipcclxuICogQ29ubmVjdHMgYSBSZWFjdCBjb21wb25lbnQgdG8gYSBSZWR1eCBzdG9yZS5cclxuICpcclxuICogLSBXaXRob3V0IGFyZ3VtZW50cywganVzdCB3cmFwcyB0aGUgY29tcG9uZW50LCB3aXRob3V0IGNoYW5naW5nIHRoZSBiZWhhdmlvciAvIHByb3BzXHJcbiAqXHJcbiAqIC0gSWYgMiBwYXJhbXMgYXJlIHBhc3NlZCAoM3JkIHBhcmFtLCBtZXJnZVByb3BzLCBpcyBza2lwcGVkKSwgZGVmYXVsdCBiZWhhdmlvclxyXG4gKiBpcyB0byBvdmVycmlkZSBvd25Qcm9wcyAoYXMgc3RhdGVkIGluIHRoZSBkb2NzKSwgc28gd2hhdCByZW1haW5zIGlzIGV2ZXJ5dGhpbmcgdGhhdCdzXHJcbiAqIG5vdCBhIHN0YXRlIG9yIGRpc3BhdGNoIHByb3BcclxuICpcclxuICogLSBXaGVuIDNyZCBwYXJhbSBpcyBwYXNzZWQsIHdlIGRvbid0IGtub3cgaWYgb3duUHJvcHMgcHJvcGFnYXRlIGFuZCB3aGV0aGVyIHRoZXlcclxuICogc2hvdWxkIGJlIHZhbGlkIGNvbXBvbmVudCBwcm9wcywgYmVjYXVzZSBpdCBkZXBlbmRzIG9uIG1lcmdlUHJvcHMgaW1wbGVtZW50YXRpb24uXHJcbiAqIEFzIHN1Y2gsIGl0IGlzIHRoZSB1c2VyJ3MgcmVzcG9uc2liaWxpdHkgdG8gZXh0ZW5kIG93blByb3BzIGludGVyZmFjZSBmcm9tIHN0YXRlIG9yXHJcbiAqIGRpc3BhdGNoIHByb3BzIG9yIGJvdGggd2hlbiBhcHBsaWNhYmxlXHJcbiAqXHJcbiAqIEBwYXJhbSBtYXBTdGF0ZVRvUHJvcHMgQSBmdW5jdGlvbiB0aGF0IGV4dHJhY3RzIHZhbHVlcyBmcm9tIHN0YXRlXHJcbiAqIEBwYXJhbSBtYXBEaXNwYXRjaFRvUHJvcHMgU2V0dXAgZm9yIGRpc3BhdGNoaW5nIGFjdGlvbnNcclxuICogQHBhcmFtIG1lcmdlUHJvcHMgT3B0aW9uYWwgY2FsbGJhY2sgdG8gbWVyZ2Ugc3RhdGUgYW5kIGRpc3BhdGNoIHByb3BzIHRvZ2V0aGVyXHJcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIHRoZSBjb25uZWN0aW9uXHJcbiAqXHJcbiAqL1xuXG5mdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCB7XG4gIC8vIFRoZSBgcHVyZWAgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQsIHNvIFRTIGRvZXNuJ3QgbGlrZSB1cyBkZXN0cnVjdHVyaW5nIHRoaXMgdG8gY2hlY2sgaXRzIGV4aXN0ZW5jZS5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdXJlLFxuICBhcmVTdGF0ZXNFcXVhbCA9IHN0cmljdEVxdWFsLFxuICBhcmVPd25Qcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIC8vIHVzZSBSZWFjdCdzIGZvcndhcmRSZWYgdG8gZXhwb3NlIGEgcmVmIG9mIHRoZSB3cmFwcGVkIGNvbXBvbmVudFxuICBmb3J3YXJkUmVmID0gZmFsc2UsXG4gIC8vIHRoZSBjb250ZXh0IGNvbnN1bWVyIHRvIHVzZVxuICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHRcbn0gPSB7fSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChwdXJlICE9PSB1bmRlZmluZWQgJiYgIWhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZFB1cmVPcHRpb24pIHtcbiAgICAgIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZFB1cmVPcHRpb24gPSB0cnVlO1xuICAgICAgd2FybmluZygnVGhlIGBwdXJlYCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gYGNvbm5lY3RgIGlzIG5vdyBhbHdheXMgYSBcInB1cmUvbWVtb2l6ZWRcIiBjb21wb25lbnQnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBDb250ZXh0ID0gY29udGV4dDtcbiAgY29uc3QgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkobWFwU3RhdGVUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcnkobWFwRGlzcGF0Y2hUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1lcmdlUHJvcHMgPSBtZXJnZVByb3BzRmFjdG9yeShtZXJnZVByb3BzKTtcbiAgY29uc3Qgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpO1xuXG4gIGNvbnN0IHdyYXBXaXRoQ29ubmVjdCA9IFdyYXBwZWRDb21wb25lbnQgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgY29ubmVjdC4gSW5zdGVhZCByZWNlaXZlZCAke3N0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gYENvbm5lY3QoJHt3cmFwcGVkQ29tcG9uZW50TmFtZX0pYDtcbiAgICBjb25zdCBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0ge1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzLFxuICAgICAgYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIGNvbnN0IFtwcm9wc0NvbnRleHQsIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc10gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZlxuICAgICAgICB9ID0gcHJvcHMsXG4gICAgICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pO1xuICAgICAgY29uc3QgQ29udGV4dFRvVXNlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaXNDb250ZXh0Q29uc3VtZXIoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICBjb25zdCBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICBjb25zdCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmdldFN0YXRlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIGNvbnN0IGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID0gQm9vbGVhbihjb250ZXh0VmFsdWUpICYmIEJvb2xlYW4oY29udGV4dFZhbHVlLnN0b3JlKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWRpZFN0b3JlQ29tZUZyb21Qcm9wcyAmJiAhZGlkU3RvcmVDb21lRnJvbUNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBcInN0b3JlXCIgaW4gdGhlIGNvbnRleHQgb2YgYCArIGBcIiR7ZGlzcGxheU5hbWV9XCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIGAgKyBgb3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIGAgKyBgUmVhY3QgY29udGV4dCBjb25zdW1lciB0byAke2Rpc3BsYXlOYW1lfSBpbiBjb25uZWN0IG9wdGlvbnMuYCk7XG4gICAgICB9IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG5cbiAgICAgIGNvbnN0IHN0b3JlID0gZGlkU3RvcmVDb21lRnJvbVByb3BzID8gcHJvcHMuc3RvcmUgOiBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICBjb25zdCBnZXRTZXJ2ZXJTdGF0ZSA9IGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID8gY29udGV4dFZhbHVlLmdldFNlcnZlclN0YXRlIDogc3RvcmUuZ2V0U3RhdGU7XG4gICAgICBjb25zdCBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICB9LCBbc3RvcmVdKTtcbiAgICAgIGNvbnN0IFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gdW5kZWZpbmVkIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgY29uc3Qgbm90aWZ5TmVzdGVkU3VicyA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pOyAvLyBEZXRlcm1pbmUgd2hhdCB7c3RvcmUsIHN1YnNjcmlwdGlvbn0gdmFsdWUgc2hvdWxkIGJlIHB1dCBpbnRvIG5lc3RlZCBjb250ZXh0LCBpZiBuZWNlc3NhcnksXG4gICAgICAvLyBhbmQgbWVtb2l6ZSB0aGF0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbnRleHQgdXBkYXRlcy5cblxuICAgICAgY29uc3Qgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwdXQgdGhpcyBjb21wb25lbnQncyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgaW50byBjb250ZXh0LCBzbyB0aGF0XG4gICAgICAgIC8vIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3b24ndCB1cGRhdGUgdW50aWwgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaXMgZG9uZVxuXG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cbiAgICAgIGNvbnN0IGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICBjb25zdCBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICBjb25zdCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gdXNlUmVmKCk7XG4gICAgICBjb25zdCByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICBjb25zdCBpc1Byb2Nlc3NpbmdEaXNwYXRjaCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICBjb25zdCBpc01vdW50ZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgY29uc3QgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICBpc01vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgfSwgW10pO1xuICAgICAgY29uc3QgYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICAgIH0gLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cblxuXG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICAgIH0sIFtzdG9yZSwgd3JhcHBlclByb3BzXSk7IC8vIFdlIG5lZWQgdGhpcyB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkgZXZlcnkgdGltZSB3ZSByZS1yZW5kZXIuIEhvd2V2ZXIsIFJlYWN0IHdhcm5zXG4gICAgICAvLyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgaW4gU1NSLCBzbyB3ZSB0cnkgdG8gZGV0ZWN0IGVudmlyb25tZW50IGFuZCBmYWxsIGJhY2sgdG9cbiAgICAgIC8vIGp1c3QgdXNlRWZmZWN0IGluc3RlYWQgdG8gYXZvaWQgdGhlIHdhcm5pbmcsIHNpbmNlIG5laXRoZXIgd2lsbCBydW4gYW55d2F5LlxuXG4gICAgICBjb25zdCBzdWJzY3JpYmVGb3JSZWFjdCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzdWJzY3JpYmUgPSByZWFjdExpc3RlbmVyID0+IHtcbiAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBpc01vdW50ZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIHJlYWN0TGlzdGVuZXIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzdWJzY3JpYmU7XG4gICAgICB9LCBbc3Vic2NyaXB0aW9uXSk7XG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoY2FwdHVyZVdyYXBwZXJQcm9wcywgW2xhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzXSk7XG4gICAgICBsZXQgYWN0dWFsQ2hpbGRQcm9wcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKCAvLyBUT0RPIFdlJ3JlIHBhc3NpbmcgdGhyb3VnaCBhIGJpZyB3cmFwcGVyIHRoYXQgZG9lcyBhIGJ1bmNoIG9mIGV4dHJhIHNpZGUgZWZmZWN0cyBiZXNpZGVzIHN1YnNjcmliaW5nXG4gICAgICAgIHN1YnNjcmliZUZvclJlYWN0LCAvLyBUT0RPIFRoaXMgaXMgaW5jcmVkaWJseSBoYWNreS4gV2UndmUgYWxyZWFkeSBwcm9jZXNzZWQgdGhlIHN0b3JlIHVwZGF0ZSBhbmQgY2FsY3VsYXRlZCBuZXcgY2hpbGQgcHJvcHMsXG4gICAgICAgIC8vIFRPRE8gYW5kIHdlJ3JlIGp1c3QgcGFzc2luZyB0aGF0IHRocm91Z2ggc28gaXQgdHJpZ2dlcnMgYSByZS1yZW5kZXIgZm9yIHVzIHJhdGhlciB0aGFuIHJlbHlpbmcgb24gYHVTRVNgLlxuICAgICAgICBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IsIGdldFNlcnZlclN0YXRlID8gKCkgPT4gY2hpbGRQcm9wc1NlbGVjdG9yKGdldFNlcnZlclN0YXRlKCksIHdyYXBwZXJQcm9wcykgOiBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgICAgICA7XG4gICAgICAgICAgZXJyLm1lc3NhZ2UgKz0gYFxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuJHtsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2t9XFxuXFxuYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gYWN0dWFsQ2hpbGRQcm9wcztcbiAgICAgIH0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgY29uc3QgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgICB9KSlcbiAgICAgICAgKTtcbiAgICAgIH0sIFtyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgY29uc3QgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH1cblxuICAgIGNvbnN0IF9Db25uZWN0ID0gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pO1xuXG4gICAgLy8gQWRkIGEgaGFja3kgY2FzdCB0byBnZXQgdGhlIHJpZ2h0IG91dHB1dCB0eXBlXG4gICAgY29uc3QgQ29ubmVjdCA9IF9Db25uZWN0O1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IENvbm5lY3RGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIGNvbnN0IF9mb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBmb3J3YXJkZWQgPSBfZm9yd2FyZGVkO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcblxuICByZXR1cm4gd3JhcFdpdGhDb25uZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0OyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0Jztcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmVIb29rKGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dCkge1xuICBjb25zdCB1c2VSZWR1eENvbnRleHQgPSAvLyBAdHMtaWdub3JlXG4gIGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6ICgpID0+IHVzZUNvbnRleHQoY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTdG9yZSgpIHtcbiAgICBjb25zdCB7XG4gICAgICBzdG9yZVxuICAgIH0gPSB1c2VSZWR1eENvbnRleHQoKTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGNvbnN0IHVzZVN0b3JlID0gLyojX19QVVJFX18qL2NyZWF0ZVN0b3JlSG9vaygpOyIsImltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVN0b3JlIGFzIHVzZURlZmF1bHRTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi91c2VTdG9yZSc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoSG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlU3RvcmUgPSAvLyBAdHMtaWdub3JlXG4gIGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFN0b3JlIDogY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlRGlzcGF0Y2goKSB7XG4gICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpOyAvLyBAdHMtaWdub3JlXG5cbiAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2g7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybnMge2FueXxmdW5jdGlvbn0gcmVkdXggc3RvcmUncyBgZGlzcGF0Y2hgIGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcclxuICogICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcclxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXHJcbiAqICAgcmV0dXJuIChcclxuICogICAgIDxkaXY+XHJcbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XHJcbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XHJcbiAqICAgICA8L2Rpdj5cclxuICogICApXHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCBjb25zdCB1c2VEaXNwYXRjaCA9IC8qI19fUFVSRV9fKi9jcmVhdGVEaXNwYXRjaEhvb2soKTsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgaW1wb3J0L25vLXVucmVzb2x2ZWRcblxuZXhwb3J0IHZhciBQZXJzaXN0R2F0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBlcnNpc3RHYXRlLCBfUHVyZUNvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGVyc2lzdEdhdGUoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGVyc2lzdEdhdGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoUGVyc2lzdEdhdGUpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBib290c3RyYXBwZWQ6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiX3Vuc3Vic2NyaWJlXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlUGVyc2lzdG9yU3RhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBlcnNpc3RvciA9IF90aGlzLnByb3BzLnBlcnNpc3RvcjtcblxuICAgICAgdmFyIF9wZXJzaXN0b3IkZ2V0U3RhdGUgPSBwZXJzaXN0b3IuZ2V0U3RhdGUoKSxcbiAgICAgICAgICBib290c3RyYXBwZWQgPSBfcGVyc2lzdG9yJGdldFN0YXRlLmJvb3RzdHJhcHBlZDtcblxuICAgICAgaWYgKGJvb3RzdHJhcHBlZCkge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMub25CZWZvcmVMaWZ0KSB7XG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKF90aGlzLnByb3BzLm9uQmVmb3JlTGlmdCgpKS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIGJvb3RzdHJhcHBlZDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgYm9vdHN0cmFwcGVkOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5fdW5zdWJzY3JpYmUgJiYgX3RoaXMuX3Vuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGVyc2lzdEdhdGUsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSB0aGlzLnByb3BzLnBlcnNpc3Rvci5zdWJzY3JpYmUodGhpcy5oYW5kbGVQZXJzaXN0b3JTdGF0ZSk7XG4gICAgICB0aGlzLmhhbmRsZVBlcnNpc3RvclN0YXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgJiYgdGhpcy5fdW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5jaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGlzLnByb3BzLmxvYWRpbmcpIGNvbnNvbGUuZXJyb3IoJ3JlZHV4LXBlcnNpc3Q6IFBlcnNpc3RHYXRlIGV4cGVjdHMgZWl0aGVyIGEgZnVuY3Rpb24gY2hpbGQgb3IgbG9hZGluZyBwcm9wLCBidXQgbm90IGJvdGguIFRoZSBsb2FkaW5nIHByb3Agd2lsbCBiZSBpZ25vcmVkLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4odGhpcy5zdGF0ZS5ib290c3RyYXBwZWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5ib290c3RyYXBwZWQgPyB0aGlzLnByb3BzLmNoaWxkcmVuIDogdGhpcy5wcm9wcy5sb2FkaW5nO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQZXJzaXN0R2F0ZTtcbn0oUHVyZUNvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShQZXJzaXN0R2F0ZSwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBjaGlsZHJlbjogbnVsbCxcbiAgbG9hZGluZzogbnVsbFxufSk7IiwiLy8gVGhlIHByaW1hcnkgZW50cnkgcG9pbnQgYXNzdW1lcyB3ZSdyZSB3b3JraW5nIHdpdGggc3RhbmRhcmQgUmVhY3RET00vUk4sIGJ1dFxuLy8gb2xkZXIgdmVyc2lvbnMgdGhhdCBkbyBub3QgaW5jbHVkZSBgdXNlU3luY0V4dGVybmFsU3RvcmVgIChSZWFjdCAxNi45IC0gMTcueCkuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoZSB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBjb21wYXQgc2hpbSBpcyBuZWVkZWQuXG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gJ3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0nO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgfSBmcm9tICd1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL3dpdGgtc2VsZWN0b3InO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IGluaXRpYWxpemVVc2VTZWxlY3RvciB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUNvbm5lY3QgfSBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdCc7XG5pbml0aWFsaXplVXNlU2VsZWN0b3IodXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IpO1xuaW5pdGlhbGl6ZUNvbm5lY3QodXNlU3luY0V4dGVybmFsU3RvcmUpOyAvLyBFbmFibGUgYmF0Y2hlZCB1cGRhdGVzIGluIG91ciBzdWJzY3JpcHRpb25zIGZvciB1c2Vcbi8vIHdpdGggc3RhbmRhcmQgUmVhY3QgcmVuZGVyZXJzIChSZWFjdERPTSwgUmVhY3QgTmF0aXZlKVxuXG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBiYXRjaCB9O1xuZXhwb3J0ICogZnJvbSAnLi9leHBvcnRzJzsiLCJmdW5jdGlvbiBzdHlsaXNfbWluIChXKSB7XG4gIGZ1bmN0aW9uIE0oZCwgYywgZSwgaCwgYSkge1xuICAgIGZvciAodmFyIG0gPSAwLCBiID0gMCwgdiA9IDAsIG4gPSAwLCBxLCBnLCB4ID0gMCwgSyA9IDAsIGssIHUgPSBrID0gcSA9IDAsIGwgPSAwLCByID0gMCwgSSA9IDAsIHQgPSAwLCBCID0gZS5sZW5ndGgsIEogPSBCIC0gMSwgeSwgZiA9ICcnLCBwID0gJycsIEYgPSAnJywgRyA9ICcnLCBDOyBsIDwgQjspIHtcbiAgICAgIGcgPSBlLmNoYXJDb2RlQXQobCk7XG4gICAgICBsID09PSBKICYmIDAgIT09IGIgKyBuICsgdiArIG0gJiYgKDAgIT09IGIgJiYgKGcgPSA0NyA9PT0gYiA/IDEwIDogNDcpLCBuID0gdiA9IG0gPSAwLCBCKyssIEorKyk7XG5cbiAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgIGlmIChsID09PSBKICYmICgwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpLCAwIDwgZi50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGYgKz0gZS5jaGFyQXQobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZyA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICBmID0gZi50cmltKCk7XG4gICAgICAgICAgICBxID0gZi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGZvciAodCA9ICsrbDsgbCA8IEI7KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSBsICsgMTsgdSA8IEo7ICsrdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckNvZGVBdCh1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDIgPT09IGcgJiYgNDIgPT09IGUuY2hhckNvZGVBdCh1IC0gMSkgJiYgbCArIDIgIT09IHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDcgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgbCsrIDwgSiAmJiBlLmNoYXJDb2RlQXQobCkgIT09IGc7KSB7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgwID09PSBrKSBicmVhaztcbiAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrID0gZS5zdWJzdHJpbmcodCwgbCk7XG4gICAgICAgICAgICAwID09PSBxICYmIChxID0gKGYgPSBmLnJlcGxhY2UoY2EsICcnKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHEpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpO1xuICAgICAgICAgICAgICAgIGcgPSBmLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgciA9IE87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgayA9IE0oYywgciwgaywgZywgYSArIDEpO1xuICAgICAgICAgICAgICAgIHQgPSBrLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAwIDwgQSAmJiAociA9IFgoTywgZiwgSSksIEMgPSBIKDMsIGssIHIsIGMsIEQsIHosIHQsIGcsIGEsIGgpLCBmID0gci5qb2luKCcnKSwgdm9pZCAwICE9PSBDICYmIDAgPT09ICh0ID0gKGsgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZyA9IDAsIGsgPSAnJykpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShkYSwgZWEpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZmEsICckMSAkMicpO1xuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGsgPSAxID09PSB3IHx8IDIgPT09IHcgJiYgTCgnQCcgKyBrLCAzKSA/ICdALXdlYmtpdC0nICsgayArICdAJyArIGsgOiAnQCcgKyBrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyBrLCAxMTIgPT09IGggJiYgKGsgPSAocCArPSBrLCAnJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBrID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBrID0gTShjLCBYKGMsIGYsIEkpLCBrLCBoLCBhICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYgKz0gaztcbiAgICAgICAgICAgIGsgPSBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGYgPSAoMCA8IHIgPyBmLnJlcGxhY2UoTiwgJycpIDogZikudHJpbSgpO1xuICAgICAgICAgICAgaWYgKDEgPCAodCA9IGYubGVuZ3RoKSkgc3dpdGNoICgwID09PSB1ICYmIChxID0gZi5jaGFyQ29kZUF0KDApLCA0NSA9PT0gcSB8fCA5NiA8IHEgJiYgMTIzID4gcSkgJiYgKHQgPSAoZiA9IGYucmVwbGFjZSgnICcsICc6JykpLmxlbmd0aCksIDAgPCBBICYmIHZvaWQgMCAhPT0gKEMgPSBIKDEsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKSkgJiYgMCA9PT0gKHQgPSAoZiA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChmID0gJ1xceDAwXFx4MDAnKSwgcSA9IGYuY2hhckNvZGVBdCgwKSwgZyA9IGYuY2hhckNvZGVBdCgxKSwgcSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICBpZiAoMTA1ID09PSBnIHx8IDk5ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICBHICs9IGYgKyBlLmNoYXJBdChsKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIDU4ICE9PSBmLmNoYXJDb2RlQXQodCAtIDEpICYmIChwICs9IFAoZiwgcSwgZywgZi5jaGFyQ29kZUF0KDIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICA0NyA9PT0gYiA/IGIgPSAwIDogMCA9PT0gMSArIHEgJiYgMTA3ICE9PSBoICYmIDAgPCBmLmxlbmd0aCAmJiAociA9IDEsIGYgKz0gJ1xceDAwJyk7XG4gICAgICAgICAgMCA8IEEgKiBZICYmIEgoMCwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpO1xuICAgICAgICAgIHogPSAxO1xuICAgICAgICAgIEQrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU5OlxuICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICAgICAgeisrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeisrO1xuICAgICAgICAgIHkgPSBlLmNoYXJBdChsKTtcblxuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBtICsgYikgc3dpdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgeSA9ICcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgMzIgIT09IGcgJiYgKHkgPSAnICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXDAnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcZic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAociA9IEkgPSAxLCB5ID0gJ1xcZicgKyB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtICsgRSAmJiAwIDwgdSkgc3dpdGNoIChsIC0gdSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIDExMiA9PT0geCAmJiA1OCA9PT0gZS5jaGFyQ29kZUF0KGwgLSAzKSAmJiAoRSA9IHgpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgMTExID09PSBLICYmIChFID0gSyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAodSA9IGwpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSAmJiAociA9IDEsIHkgKz0gJ1xccicpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgIDAgPT09IGIgJiYgKG4gPSBuID09PSBnID8gMCA6IDAgPT09IG4gPyBnIDogbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbSsrO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MzpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0tLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiB2LS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IHEpIHN3aXRjaCAoMiAqIHggKyAzICogSykge1xuICAgICAgICAgICAgICAgICAgY2FzZSA1MzM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gKyB1ICsgayAmJiAoayA9IDEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgIGlmICghKDAgPCBuICsgbSArIHYpKSBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKDIgKiBnICsgMyAqIGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzU6XG4gICAgICAgICAgICAgICAgICAgICAgYiA9IDQ3O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgICAgICAgICAgIHQgPSBsLCBiID0gNDI7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgIDQ3ID09PSBnICYmIDQyID09PSB4ICYmIHQgKyAyICE9PSBsICYmICgzMyA9PT0gZS5jaGFyQ29kZUF0KHQgKyAyKSAmJiAocCArPSBlLnN1YnN0cmluZyh0LCBsICsgMSkpLCB5ID0gJycsIGIgPSAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIDAgPT09IGIgJiYgKGYgKz0geSk7XG4gICAgICB9XG5cbiAgICAgIEsgPSB4O1xuICAgICAgeCA9IGc7XG4gICAgICBsKys7XG4gICAgfVxuXG4gICAgdCA9IHAubGVuZ3RoO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICByID0gYztcbiAgICAgIGlmICgwIDwgQSAmJiAoQyA9IEgoMiwgcCwgciwgZCwgRCwgeiwgdCwgaCwgYSwgaCksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAocCA9IEMpLmxlbmd0aCkpIHJldHVybiBHICsgcCArIEY7XG4gICAgICBwID0gci5qb2luKCcsJykgKyAneycgKyBwICsgJ30nO1xuXG4gICAgICBpZiAoMCAhPT0gdyAqIEUpIHtcbiAgICAgICAgMiAhPT0gdyB8fCBMKHAsIDIpIHx8IChFID0gMCk7XG5cbiAgICAgICAgc3dpdGNoIChFKSB7XG4gICAgICAgICAgY2FzZSAxMTE6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKGhhLCAnOi1tb3otJDEnKSArIHA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShRLCAnOjotd2Via2l0LWlucHV0LSQxJykgKyBwLnJlcGxhY2UoUSwgJzo6LW1vei0kMScpICsgcC5yZXBsYWNlKFEsICc6LW1zLWlucHV0LSQxJykgKyBwO1xuICAgICAgICB9XG5cbiAgICAgICAgRSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEcgKyBwICsgRjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFgoZCwgYywgZSkge1xuICAgIHZhciBoID0gYy50cmltKCkuc3BsaXQoaWEpO1xuICAgIGMgPSBoO1xuICAgIHZhciBhID0gaC5sZW5ndGgsXG4gICAgICAgIG0gPSBkLmxlbmd0aDtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgYiA9IDA7XG5cbiAgICAgICAgZm9yIChkID0gMCA9PT0gbSA/ICcnIDogZFswXSArICcgJzsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGNbYl0gPSBaKGQsIGNbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgdiA9IGIgPSAwO1xuXG4gICAgICAgIGZvciAoYyA9IFtdOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtOyArK24pIHtcbiAgICAgICAgICAgIGNbdisrXSA9IFooZFtuXSArICcgJywgaFtiXSwgZSkudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBaKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGggJiYgKGggPSAoYyA9IGMudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgIHN3aXRjaCAoaCkge1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgcmV0dXJuIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBjYXNlIDU4OlxuICAgICAgICByZXR1cm4gZC50cmltKCkgKyBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCAxICogZSAmJiAwIDwgYy5pbmRleE9mKCdcXGYnKSkgcmV0dXJuIGMucmVwbGFjZShGLCAoNTggPT09IGQuY2hhckNvZGVBdCgwKSA/ICcnIDogJyQxJykgKyBkLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gUChkLCBjLCBlLCBoKSB7XG4gICAgdmFyIGEgPSBkICsgJzsnLFxuICAgICAgICBtID0gMiAqIGMgKyAzICogZSArIDQgKiBoO1xuXG4gICAgaWYgKDk0NCA9PT0gbSkge1xuICAgICAgZCA9IGEuaW5kZXhPZignOicsIDkpICsgMTtcbiAgICAgIHZhciBiID0gYS5zdWJzdHJpbmcoZCwgYS5sZW5ndGggLSAxKS50cmltKCk7XG4gICAgICBiID0gYS5zdWJzdHJpbmcoMCwgZCkudHJpbSgpICsgYiArICc7JztcbiAgICAgIHJldHVybiAxID09PSB3IHx8IDIgPT09IHcgJiYgTChiLCAxKSA/ICctd2Via2l0LScgKyBiICsgYiA6IGI7XG4gICAgfVxuXG4gICAgaWYgKDAgPT09IHcgfHwgMiA9PT0gdyAmJiAhTChhLCAxKSkgcmV0dXJuIGE7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMTAxNTpcbiAgICAgICAgcmV0dXJuIDk3ID09PSBhLmNoYXJDb2RlQXQoMTApID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NTE6XG4gICAgICAgIHJldHVybiAxMTYgPT09IGEuY2hhckNvZGVBdCgzKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTYzOlxuICAgICAgICByZXR1cm4gMTEwID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTc4OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkpIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG4gICAgICAgIGlmICgwIDwgYS5pbmRleE9mKCdpbWFnZS1zZXQoJywgMTEpKSByZXR1cm4gYS5yZXBsYWNlKGphLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5MzI6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDQpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg1KSkge1xuICAgICAgICAgIGNhc2UgMTAzOlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC0nICsgYS5yZXBsYWNlKCctZ3JvdycsICcnKSArICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdncm93JywgJ3Bvc2l0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ3NocmluaycsICduZWdhdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk2NDpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoJzonLCAxNSkpLnJlcGxhY2UoJ2ZsZXgtJywgJycpLnJlcGxhY2UoJ3NwYWNlLWJldHdlZW4nLCAnanVzdGlmeScpO1xuICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LXBhY2snICsgYiArICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LXBhY2snICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgcmV0dXJuIGthLnRlc3QoYSkgPyBhLnJlcGxhY2UoYWEsICc6LXdlYmtpdC0nKSArIGEucmVwbGFjZShhYSwgJzotbW96LScpICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMWUzOlxuICAgICAgICBiID0gYS5zdWJzdHJpbmcoMTMpLnRyaW0oKTtcbiAgICAgICAgYyA9IGIuaW5kZXhPZignLScpICsgMTtcblxuICAgICAgICBzd2l0Y2ggKGIuY2hhckNvZGVBdCgwKSArIGIuY2hhckNvZGVBdChjKSkge1xuICAgICAgICAgIGNhc2UgMjI2OlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMzI6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0Yi1ybCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ2xyJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMTc6XG4gICAgICAgIGlmICgtMSA9PT0gYS5pbmRleE9mKCdzdGlja3knLCA5KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTc1OlxuICAgICAgICBjID0gKGEgPSBkKS5sZW5ndGggLSAxMDtcbiAgICAgICAgYiA9ICgzMyA9PT0gYS5jaGFyQ29kZUF0KGMpID8gYS5zdWJzdHJpbmcoMCwgYykgOiBhKS5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JywgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChtID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIwNzpcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArICgxMDIgPCBtID8gJ2lubGluZS0nIDogJycpICsgJ2JveCcpICsgJzsnICsgYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGEucmVwbGFjZShiLCAnLW1zLScgKyBiICsgJ2JveCcpICsgJzsnICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgJzsnO1xuXG4gICAgICBjYXNlIDkzODpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNSkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDYpKSB7XG4gICAgICAgICAgY2FzZSAxMDU6XG4gICAgICAgICAgICByZXR1cm4gYiA9IGEucmVwbGFjZSgnLWl0ZW1zJywgJycpLCAnLXdlYmtpdC0nICsgYSArICctd2Via2l0LWJveC0nICsgYiArICctbXMtZmxleC0nICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1pdGVtLScgKyBhLnJlcGxhY2UoYmEsICcnKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWxpbmUtcGFjaycgKyBhLnJlcGxhY2UoJ2FsaWduLWNvbnRlbnQnLCAnJykucmVwbGFjZShiYSwgJycpICsgYTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NzM6XG4gICAgICBjYXNlIDk4OTpcbiAgICAgICAgaWYgKDQ1ICE9PSBhLmNoYXJDb2RlQXQoMykgfHwgMTIyID09PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMTpcbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoITAgPT09IGxhLnRlc3QoZCkpIHJldHVybiAxMTUgPT09IChiID0gZC5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JykgKyAxKSkuY2hhckNvZGVBdCgwKSA/IFAoZC5yZXBsYWNlKCdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGMsIGUsIGgpLnJlcGxhY2UoJzpmaWxsLWF2YWlsYWJsZScsICc6c3RyZXRjaCcpIDogYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArIGEucmVwbGFjZShiLCAnLW1vei0nICsgYi5yZXBsYWNlKCdmaWxsLScsICcnKSkgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NjI6XG4gICAgICAgIGlmIChhID0gJy13ZWJraXQtJyArIGEgKyAoMTAyID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLW1zLScgKyBhIDogJycpICsgYSwgMjExID09PSBlICsgaCAmJiAxMDUgPT09IGEuY2hhckNvZGVBdCgxMykgJiYgMCA8IGEuaW5kZXhPZigndHJhbnNmb3JtJywgMTApKSByZXR1cm4gYS5zdWJzdHJpbmcoMCwgYS5pbmRleE9mKCc7JywgMjcpICsgMSkucmVwbGFjZShtYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEwoZCwgYykge1xuICAgIHZhciBlID0gZC5pbmRleE9mKDEgPT09IGMgPyAnOicgOiAneycpLFxuICAgICAgICBoID0gZC5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGUgOiAxMCk7XG4gICAgZSA9IGQuc3Vic3RyaW5nKGUgKyAxLCBkLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBSKDIgIT09IGMgPyBoIDogaC5yZXBsYWNlKG5hLCAnJDEnKSwgZSwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBlYShkLCBjKSB7XG4gICAgdmFyIGUgPSBQKGMsIGMuY2hhckNvZGVBdCgwKSwgYy5jaGFyQ29kZUF0KDEpLCBjLmNoYXJDb2RlQXQoMikpO1xuICAgIHJldHVybiBlICE9PSBjICsgJzsnID8gZS5yZXBsYWNlKG9hLCAnIG9yICgkMSknKS5zdWJzdHJpbmcoNCkgOiAnKCcgKyBjICsgJyknO1xuICB9XG5cbiAgZnVuY3Rpb24gSChkLCBjLCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSB7XG4gICAgZm9yICh2YXIgZyA9IDAsIHggPSBjLCB3OyBnIDwgQTsgKytnKSB7XG4gICAgICBzd2l0Y2ggKHcgPSBTW2ddLmNhbGwoQiwgZCwgeCwgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkpIHtcbiAgICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICAgIGNhc2UgITE6XG4gICAgICAgIGNhc2UgITA6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHggPSB3O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4ICE9PSBjKSByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFQoZCkge1xuICAgIHN3aXRjaCAoZCkge1xuICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICAgIEEgPSBTLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGQpIFNbQSsrXSA9IGQ7ZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBkKSBmb3IgKHZhciBjID0gMCwgZSA9IGQubGVuZ3RoOyBjIDwgZTsgKytjKSB7XG4gICAgICAgICAgVChkW2NdKTtcbiAgICAgICAgfSBlbHNlIFkgPSAhIWQgfCAwO1xuICAgIH1cblxuICAgIHJldHVybiBUO1xuICB9XG5cbiAgZnVuY3Rpb24gVShkKSB7XG4gICAgZCA9IGQucHJlZml4O1xuICAgIHZvaWQgMCAhPT0gZCAmJiAoUiA9IG51bGwsIGQgPyAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZCA/IHcgPSAxIDogKHcgPSAyLCBSID0gZCkgOiB3ID0gMCk7XG4gICAgcmV0dXJuIFU7XG4gIH1cblxuICBmdW5jdGlvbiBCKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQ7XG4gICAgMzMgPiBlLmNoYXJDb2RlQXQoMCkgJiYgKGUgPSBlLnRyaW0oKSk7XG4gICAgViA9IGU7XG4gICAgZSA9IFtWXTtcblxuICAgIGlmICgwIDwgQSkge1xuICAgICAgdmFyIGggPSBIKC0xLCBjLCBlLCBlLCBELCB6LCAwLCAwLCAwLCAwKTtcbiAgICAgIHZvaWQgMCAhPT0gaCAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGggJiYgKGMgPSBoKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IE0oTywgZSwgYywgMCwgMCk7XG4gICAgMCA8IEEgJiYgKGggPSBIKC0yLCBhLCBlLCBlLCBELCB6LCBhLmxlbmd0aCwgMCwgMCwgMCksIHZvaWQgMCAhPT0gaCAmJiAoYSA9IGgpKTtcbiAgICBWID0gJyc7XG4gICAgRSA9IDA7XG4gICAgeiA9IEQgPSAxO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGNhID0gL15cXDArL2csXG4gICAgICBOID0gL1tcXDBcXHJcXGZdL2csXG4gICAgICBhYSA9IC86ICovZyxcbiAgICAgIGthID0gL3pvb3xncmEvLFxuICAgICAgbWEgPSAvKFssOiBdKSh0cmFuc2Zvcm0pL2csXG4gICAgICBpYSA9IC8sXFxyKz8vZyxcbiAgICAgIEYgPSAvKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyxcbiAgICAgIGZhID0gL0Aoa1xcdyspXFxzKihcXFMqKVxccyovLFxuICAgICAgUSA9IC86OihwbGFjZSkvZyxcbiAgICAgIGhhID0gLzoocmVhZC1vbmx5KS9nLFxuICAgICAgRyA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIGRhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgb2EgPSAvKFtcXHNcXFNdKj8pOy9nLFxuICAgICAgYmEgPSAvLXNlbGZ8ZmxleC0vZyxcbiAgICAgIG5hID0gL1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLFxuICAgICAgbGEgPSAvc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLFxuICAgICAgamEgPSAvKFteLV0pKGltYWdlLXNldFxcKCkvLFxuICAgICAgeiA9IDEsXG4gICAgICBEID0gMSxcbiAgICAgIEUgPSAwLFxuICAgICAgdyA9IDEsXG4gICAgICBPID0gW10sXG4gICAgICBTID0gW10sXG4gICAgICBBID0gMCxcbiAgICAgIFIgPSBudWxsLFxuICAgICAgWSA9IDAsXG4gICAgICBWID0gJyc7XG4gIEIudXNlID0gVDtcbiAgQi5zZXQgPSBVO1xuICB2b2lkIDAgIT09IFcgJiYgVShXKTtcbiAgcmV0dXJuIEI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxpc19taW47XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhYmJyfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3d8YWxsb3dVc2VyTWVkaWF8YWxsb3dQYXltZW50UmVxdWVzdHxhbGxvd0Z1bGxTY3JlZW58YWxsb3dUcmFuc3BhcmVuY3l8YWx0fGFzeW5jfGF1dG9Db21wbGV0ZXxhdXRvUGxheXxjYXB0dXJlfGNlbGxQYWRkaW5nfGNlbGxTcGFjaW5nfGNoYWxsZW5nZXxjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlY29kaW5nfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlfGRvd25sb2FkfGRyYWdnYWJsZXxlbmNUeXBlfGVudGVyS2V5SGludHxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHRyYW5zbGF0ZXx0eXBlfHVzZU1hcHx2YWx1ZXx3aWR0aHx3bW9kZXx3cmFwfGFib3V0fGRhdGF0eXBlfGlubGlzdHxwcmVmaXh8cHJvcGVydHl8cmVzb3VyY2V8dHlwZW9mfHZvY2FifGF1dG9DYXBpdGFsaXplfGF1dG9Db3JyZWN0fGF1dG9TYXZlfGNvbG9yfGluY3JlbWVudGFsfGZhbGxiYWNrfGluZXJ0fGl0ZW1Qcm9wfGl0ZW1TY29wZXxpdGVtVHlwZXxpdGVtSUR8aXRlbVJlZnxvbnxvcHRpb258cmVzdWx0c3xzZWN1cml0eXx1bnNlbGVjdGFibGV8YWNjZW50SGVpZ2h0fGFjY3VtdWxhdGV8YWRkaXRpdmV8YWxpZ25tZW50QmFzZWxpbmV8YWxsb3dSZW9yZGVyfGFscGhhYmV0aWN8YW1wbGl0dWRlfGFyYWJpY0Zvcm18YXNjZW50fGF0dHJpYnV0ZU5hbWV8YXR0cmlidXRlVHlwZXxhdXRvUmV2ZXJzZXxhemltdXRofGJhc2VGcmVxdWVuY3l8YmFzZWxpbmVTaGlmdHxiYXNlUHJvZmlsZXxiYm94fGJlZ2lufGJpYXN8Ynl8Y2FsY01vZGV8Y2FwSGVpZ2h0fGNsaXB8Y2xpcFBhdGhVbml0c3xjbGlwUGF0aHxjbGlwUnVsZXxjb2xvckludGVycG9sYXRpb258Y29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc3xjb2xvclByb2ZpbGV8Y29sb3JSZW5kZXJpbmd8Y29udGVudFNjcmlwdFR5cGV8Y29udGVudFN0eWxlVHlwZXxjdXJzb3J8Y3h8Y3l8ZHxkZWNlbGVyYXRlfGRlc2NlbnR8ZGlmZnVzZUNvbnN0YW50fGRpcmVjdGlvbnxkaXNwbGF5fGRpdmlzb3J8ZG9taW5hbnRCYXNlbGluZXxkdXJ8ZHh8ZHl8ZWRnZU1vZGV8ZWxldmF0aW9ufGVuYWJsZUJhY2tncm91bmR8ZW5kfGV4cG9uZW50fGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWR8ZmlsbHxmaWxsT3BhY2l0eXxmaWxsUnVsZXxmaWx0ZXJ8ZmlsdGVyUmVzfGZpbHRlclVuaXRzfGZsb29kQ29sb3J8Zmxvb2RPcGFjaXR5fGZvY3VzYWJsZXxmb250RmFtaWx5fGZvbnRTaXplfGZvbnRTaXplQWRqdXN0fGZvbnRTdHJldGNofGZvbnRTdHlsZXxmb250VmFyaWFudHxmb250V2VpZ2h0fGZvcm1hdHxmcm9tfGZyfGZ4fGZ5fGcxfGcyfGdseXBoTmFtZXxnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbHxnbHlwaE9yaWVudGF0aW9uVmVydGljYWx8Z2x5cGhSZWZ8Z3JhZGllbnRUcmFuc2Zvcm18Z3JhZGllbnRVbml0c3xoYW5naW5nfGhvcml6QWR2WHxob3Jpek9yaWdpblh8aWRlb2dyYXBoaWN8aW1hZ2VSZW5kZXJpbmd8aW58aW4yfGludGVyY2VwdHxrfGsxfGsyfGszfGs0fGtlcm5lbE1hdHJpeHxrZXJuZWxVbml0TGVuZ3RofGtlcm5pbmd8a2V5UG9pbnRzfGtleVNwbGluZXN8a2V5VGltZXN8bGVuZ3RoQWRqdXN0fGxldHRlclNwYWNpbmd8bGlnaHRpbmdDb2xvcnxsaW1pdGluZ0NvbmVBbmdsZXxsb2NhbHxtYXJrZXJFbmR8bWFya2VyTWlkfG1hcmtlclN0YXJ0fG1hcmtlckhlaWdodHxtYXJrZXJVbml0c3xtYXJrZXJXaWR0aHxtYXNrfG1hc2tDb250ZW50VW5pdHN8bWFza1VuaXRzfG1hdGhlbWF0aWNhbHxtb2RlfG51bU9jdGF2ZXN8b2Zmc2V0fG9wYWNpdHl8b3BlcmF0b3J8b3JkZXJ8b3JpZW50fG9yaWVudGF0aW9ufG9yaWdpbnxvdmVyZmxvd3xvdmVybGluZVBvc2l0aW9ufG92ZXJsaW5lVGhpY2tuZXNzfHBhbm9zZTF8cGFpbnRPcmRlcnxwYXRoTGVuZ3RofHBhdHRlcm5Db250ZW50VW5pdHN8cGF0dGVyblRyYW5zZm9ybXxwYXR0ZXJuVW5pdHN8cG9pbnRlckV2ZW50c3xwb2ludHN8cG9pbnRzQXRYfHBvaW50c0F0WXxwb2ludHNBdFp8cHJlc2VydmVBbHBoYXxwcmVzZXJ2ZUFzcGVjdFJhdGlvfHByaW1pdGl2ZVVuaXRzfHJ8cmFkaXVzfHJlZlh8cmVmWXxyZW5kZXJpbmdJbnRlbnR8cmVwZWF0Q291bnR8cmVwZWF0RHVyfHJlcXVpcmVkRXh0ZW5zaW9uc3xyZXF1aXJlZEZlYXR1cmVzfHJlc3RhcnR8cmVzdWx0fHJvdGF0ZXxyeHxyeXxzY2FsZXxzZWVkfHNoYXBlUmVuZGVyaW5nfHNsb3BlfHNwYWNpbmd8c3BlY3VsYXJDb25zdGFudHxzcGVjdWxhckV4cG9uZW50fHNwZWVkfHNwcmVhZE1ldGhvZHxzdGFydE9mZnNldHxzdGREZXZpYXRpb258c3RlbWh8c3RlbXZ8c3RpdGNoVGlsZXN8c3RvcENvbG9yfHN0b3BPcGFjaXR5fHN0cmlrZXRocm91Z2hQb3NpdGlvbnxzdHJpa2V0aHJvdWdoVGhpY2tuZXNzfHN0cmluZ3xzdHJva2V8c3Ryb2tlRGFzaGFycmF5fHN0cm9rZURhc2hvZmZzZXR8c3Ryb2tlTGluZWNhcHxzdHJva2VMaW5lam9pbnxzdHJva2VNaXRlcmxpbWl0fHN0cm9rZU9wYWNpdHl8c3Ryb2tlV2lkdGh8c3VyZmFjZVNjYWxlfHN5c3RlbUxhbmd1YWdlfHRhYmxlVmFsdWVzfHRhcmdldFh8dGFyZ2V0WXx0ZXh0QW5jaG9yfHRleHREZWNvcmF0aW9ufHRleHRSZW5kZXJpbmd8dGV4dExlbmd0aHx0b3x0cmFuc2Zvcm18dTF8dTJ8dW5kZXJsaW5lUG9zaXRpb258dW5kZXJsaW5lVGhpY2tuZXNzfHVuaWNvZGV8dW5pY29kZUJpZGl8dW5pY29kZVJhbmdlfHVuaXRzUGVyRW18dkFscGhhYmV0aWN8dkhhbmdpbmd8dklkZW9ncmFwaGljfHZNYXRoZW1hdGljYWx8dmFsdWVzfHZlY3RvckVmZmVjdHx2ZXJzaW9ufHZlcnRBZHZZfHZlcnRPcmlnaW5YfHZlcnRPcmlnaW5ZfHZpZXdCb3h8dmlld1RhcmdldHx2aXNpYmlsaXR5fHdpZHRoc3x3b3JkU3BhY2luZ3x3cml0aW5nTW9kZXx4fHhIZWlnaHR8eDF8eDJ8eENoYW5uZWxTZWxlY3Rvcnx4bGlua0FjdHVhdGV8eGxpbmtBcmNyb2xlfHhsaW5rSHJlZnx4bGlua1JvbGV8eGxpbmtTaG93fHhsaW5rVGl0bGV8eGxpbmtUeXBlfHhtbEJhc2V8eG1sbnN8eG1sbnNYbGlua3x4bWxMYW5nfHhtbFNwYWNlfHl8eTF8eTJ8eUNoYW5uZWxTZWxlY3Rvcnx6fHpvb21BbmRQYW58Zm9yfGNsYXNzfGF1dG9mb2N1cyl8KChbRGRdW0FhXVtUdF1bQWFdfFtBYV1bUnJdW0lpXVtBYV18eCktLiopKSQvOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViZmVlNjhhNGNkN2U2MDA5ZWY2MWQyM1xuXG52YXIgaXNQcm9wVmFsaWQgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHJldHVybiByZWFjdFByb3BzUmVnZXgudGVzdChwcm9wKSB8fCBwcm9wLmNoYXJDb2RlQXQoMCkgPT09IDExMVxuICAvKiBvICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgxKSA9PT0gMTEwXG4gIC8qIG4gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDIpIDwgOTE7XG59XG4vKiBaKzEgKi9cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvcFZhbGlkO1xuIiwiaW1wb3J0e3R5cGVPZiBhcyBlLGlzRWxlbWVudCBhcyB0LGlzVmFsaWRFbGVtZW50VHlwZSBhcyBufWZyb21cInJlYWN0LWlzXCI7aW1wb3J0IHIse3VzZVN0YXRlIGFzIG8sdXNlQ29udGV4dCBhcyBzLHVzZU1lbW8gYXMgaSx1c2VFZmZlY3QgYXMgYSx1c2VSZWYgYXMgYyxjcmVhdGVFbGVtZW50IGFzIHUsdXNlRGVidWdWYWx1ZSBhcyBsLHVzZUxheW91dEVmZmVjdCBhcyBkfWZyb21cInJlYWN0XCI7aW1wb3J0IGggZnJvbVwic2hhbGxvd2VxdWFsXCI7aW1wb3J0IHAgZnJvbVwiQGVtb3Rpb24vc3R5bGlzXCI7aW1wb3J0IGYgZnJvbVwiQGVtb3Rpb24vdW5pdGxlc3NcIjtpbXBvcnQgbSBmcm9tXCJAZW1vdGlvbi9pcy1wcm9wLXZhbGlkXCI7aW1wb3J0IHkgZnJvbVwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIjtmdW5jdGlvbiB2KCl7cmV0dXJuKHY9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIG49YXJndW1lbnRzW3RdO2Zvcih2YXIgciBpbiBuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHIpJiYoZVtyXT1uW3JdKX1yZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1bZVswXV0scj0wLG89dC5sZW5ndGg7cjxvO3IrPTEpbi5wdXNoKHRbcl0sZVtyKzFdKTtyZXR1cm4gbn0sUz1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9PXQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZcIltvYmplY3QgT2JqZWN0XVwiPT09KHQudG9TdHJpbmc/dC50b1N0cmluZygpOk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSkmJiFlKHQpfSx3PU9iamVjdC5mcmVlemUoW10pLEU9T2JqZWN0LmZyZWV6ZSh7fSk7ZnVuY3Rpb24gYihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIF8oZSl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJzdHJpbmdcIj09dHlwZW9mIGUmJmV8fGUuZGlzcGxheU5hbWV8fGUubmFtZXx8XCJDb21wb25lbnRcIn1mdW5jdGlvbiBOKGUpe3JldHVybiBlJiZcInN0cmluZ1wiPT10eXBlb2YgZS5zdHlsZWRDb21wb25lbnRJZH12YXIgQT1cInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmdm9pZCAwIT09cHJvY2Vzcy5lbnYmJihwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfQVRUUnx8cHJvY2Vzcy5lbnYuU0NfQVRUUil8fFwiZGF0YS1zdHlsZWRcIixDPVwiNS4zLjlcIixJPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwiSFRNTEVsZW1lbnRcImluIHdpbmRvdyxQPUJvb2xlYW4oXCJib29sZWFuXCI9PXR5cGVvZiBTQ19ESVNBQkxFX1NQRUVEWT9TQ19ESVNBQkxFX1NQRUVEWTpcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmdm9pZCAwIT09cHJvY2Vzcy5lbnYmJih2b2lkIDAhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFk/XCJmYWxzZVwiIT09cHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZJiZwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFk6dm9pZCAwIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVikpLE89e30sUj1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3sxOlwiQ2Fubm90IGNyZWF0ZSBzdHlsZWQtY29tcG9uZW50IGZvciBjb21wb25lbnQ6ICVzLlxcblxcblwiLDI6XCJDYW4ndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdSd2ZSBjb25zdW1lZCBhIGBTZXJ2ZXJTdHlsZVNoZWV0YCdzIHN0eWxlcyEgYFNlcnZlclN0eWxlU2hlZXRgIGlzIGEgb25lIG9mZiBpbnN0YW5jZSBmb3IgZWFjaCBzZXJ2ZXItc2lkZSByZW5kZXIgY3ljbGUuXFxuXFxuLSBBcmUgeW91IHRyeWluZyB0byByZXVzZSBpdCBhY3Jvc3MgcmVuZGVycz9cXG4tIEFyZSB5b3UgYWNjaWRlbnRhbGx5IGNhbGxpbmcgY29sbGVjdFN0eWxlcyB0d2ljZT9cXG5cXG5cIiwzOlwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsNDpcIlRoZSBgU3R5bGVTaGVldE1hbmFnZXJgIGV4cGVjdHMgYSB2YWxpZCB0YXJnZXQgb3Igc2hlZXQgcHJvcCFcXG5cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgY2xpZW50IGFuZCBpcyB5b3VyIHRhcmdldCBmYWxzeT9cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgc2VydmVyIGFuZCBpcyB0aGUgc2hlZXQgZmFsc3k/XFxuXFxuXCIsNTpcIlRoZSBjbG9uZSBtZXRob2QgY2Fubm90IGJlIHVzZWQgb24gdGhlIGNsaWVudCFcXG5cXG4tIEFyZSB5b3UgcnVubmluZyBpbiBhIGNsaWVudC1saWtlIGVudmlyb25tZW50IG9uIHRoZSBzZXJ2ZXI/XFxuLSBBcmUgeW91IHRyeWluZyB0byBydW4gU1NSIG9uIHRoZSBjbGllbnQ/XFxuXFxuXCIsNjpcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsNzonVGhlbWVQcm92aWRlcjogUGxlYXNlIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIFwidGhlbWVcIiBwcm9wIGZ1bmN0aW9uLCBlLmcuXFxuXFxuYGBganNcXG50aGVtZT17KCkgPT4gKHt9KX1cXG5gYGBcXG5cXG4nLDg6J1RoZW1lUHJvdmlkZXI6IFBsZWFzZSBtYWtlIHlvdXIgXCJ0aGVtZVwiIHByb3AgYW4gb2JqZWN0LlxcblxcbicsOTpcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIiwxMDpcIkNhbm5vdCBmaW5kIGEgU3R5bGVTaGVldCBpbnN0YW5jZS4gVXN1YWxseSB0aGlzIGhhcHBlbnMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvcGllcyBvZiBzdHlsZWQtY29tcG9uZW50cyBsb2FkZWQgYXQgb25jZS4gQ2hlY2sgb3V0IHRoaXMgaXNzdWUgZm9yIGhvdyB0byB0cm91Ymxlc2hvb3QgYW5kIGZpeCB0aGUgY29tbW9uIGNhc2VzIHdoZXJlIHRoaXMgc2l0dWF0aW9uIGNhbiBoYXBwZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9pc3N1ZXMvMTk0MSNpc3N1ZWNvbW1lbnQtNDE3ODYyMDIxXFxuXFxuXCIsMTE6XCJfVGhpcyBlcnJvciB3YXMgcmVwbGFjZWQgd2l0aCBhIGRldi10aW1lIHdhcm5pbmcsIGl0IHdpbGwgYmUgZGVsZXRlZCBmb3IgdjQgZmluYWwuXyBbY3JlYXRlR2xvYmFsU3R5bGVdIHJlY2VpdmVkIGNoaWxkcmVuIHdoaWNoIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBQbGVhc2UgdXNlIHRoZSBjb21wb25lbnQgd2l0aG91dCBwYXNzaW5nIGNoaWxkcmVuIGVsZW1lbnRzLlxcblxcblwiLDEyOlwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzXFxuXFxuXCIsMTM6XCIlcyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXFxuXFxuXCIsMTQ6J1RoZW1lUHJvdmlkZXI6IFwidGhlbWVcIiBwcm9wIGlzIHJlcXVpcmVkLlxcblxcbicsMTU6XCJBIHN0eWxpcyBwbHVnaW4gaGFzIGJlZW4gc3VwcGxpZWQgdGhhdCBpcyBub3QgbmFtZWQuIFdlIG5lZWQgYSBuYW1lIGZvciBlYWNoIHBsdWdpbiB0byBiZSBhYmxlIHRvIHByZXZlbnQgc3R5bGluZyBjb2xsaXNpb25zIGJldHdlZW4gZGlmZmVyZW50IHN0eWxpcyBjb25maWd1cmF0aW9ucyB3aXRoaW4gdGhlIHNhbWUgYXBwLiBCZWZvcmUgeW91IHBhc3MgeW91ciBwbHVnaW4gdG8gYDxTdHlsZVNoZWV0TWFuYWdlciBzdHlsaXNQbHVnaW5zPXtbXX0+YCwgcGxlYXNlIG1ha2Ugc3VyZSBlYWNoIHBsdWdpbiBpcyB1bmlxdWVseS1uYW1lZCwgZS5nLlxcblxcbmBgYGpzXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGltcG9ydGVkUGx1Z2luLCAnbmFtZScsIHsgdmFsdWU6ICdzb21lLXVuaXF1ZS1uYW1lJyB9KTtcXG5gYGBcXG5cXG5cIiwxNjpcIlJlYWNoZWQgdGhlIGxpbWl0IG9mIGhvdyBtYW55IHN0eWxlZCBjb21wb25lbnRzIG1heSBiZSBjcmVhdGVkIGF0IGdyb3VwICVzLlxcbllvdSBtYXkgb25seSBjcmVhdGUgdXAgdG8gMSwwNzMsNzQxLDgyNCBjb21wb25lbnRzLiBJZiB5b3UncmUgY3JlYXRpbmcgY29tcG9uZW50cyBkeW5hbWljYWxseSxcXG5hcyBmb3IgaW5zdGFuY2UgaW4geW91ciByZW5kZXIgbWV0aG9kIHRoZW4geW91IG1heSBiZSBydW5uaW5nIGludG8gdGhpcyBsaW1pdGF0aW9uLlxcblxcblwiLDE3OlwiQ1NTU3R5bGVTaGVldCBjb3VsZCBub3QgYmUgZm91bmQgb24gSFRNTFN0eWxlRWxlbWVudC5cXG5IYXMgc3R5bGVkLWNvbXBvbmVudHMnIHN0eWxlIHRhZyBiZWVuIHVubW91bnRlZCBvciBhbHRlcmVkIGJ5IGFub3RoZXIgc2NyaXB0P1xcblwifTp7fTtmdW5jdGlvbiBEKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGg8PTA/dm9pZCAwOmFyZ3VtZW50c1swXSx0PVtdLG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rPTEpdC5wdXNoKG48MHx8YXJndW1lbnRzLmxlbmd0aDw9bj92b2lkIDA6YXJndW1lbnRzW25dKTtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtlPWUucmVwbGFjZSgvJVthLXpdLyx0KX0pKSxlfWZ1bmN0aW9uIGooZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3Rocm93XCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVj9uZXcgRXJyb3IoXCJBbiBlcnJvciBvY2N1cnJlZC4gU2VlIGh0dHBzOi8vZ2l0LmlvL0pVSWFFI1wiK2UrXCIgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIrKG4ubGVuZ3RoPjA/XCIgQXJnczogXCIrbi5qb2luKFwiLCBcIik6XCJcIikpOm5ldyBFcnJvcihELmFwcGx5KHZvaWQgMCxbUltlXV0uY29uY2F0KG4pKS50cmltKCkpfXZhciBUPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLmdyb3VwU2l6ZXM9bmV3IFVpbnQzMkFycmF5KDUxMiksdGhpcy5sZW5ndGg9NTEyLHRoaXMudGFnPWV9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5kZXhPZkdyb3VwPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49MDtuPGU7bisrKXQrPXRoaXMuZ3JvdXBTaXplc1tuXTtyZXR1cm4gdH0sdC5pbnNlcnRSdWxlcz1mdW5jdGlvbihlLHQpe2lmKGU+PXRoaXMuZ3JvdXBTaXplcy5sZW5ndGgpe2Zvcih2YXIgbj10aGlzLmdyb3VwU2l6ZXMscj1uLmxlbmd0aCxvPXI7ZT49bzspKG88PD0xKTwwJiZqKDE2LFwiXCIrZSk7dGhpcy5ncm91cFNpemVzPW5ldyBVaW50MzJBcnJheShvKSx0aGlzLmdyb3VwU2l6ZXMuc2V0KG4pLHRoaXMubGVuZ3RoPW87Zm9yKHZhciBzPXI7czxvO3MrKyl0aGlzLmdyb3VwU2l6ZXNbc109MH1mb3IodmFyIGk9dGhpcy5pbmRleE9mR3JvdXAoZSsxKSxhPTAsYz10Lmxlbmd0aDthPGM7YSsrKXRoaXMudGFnLmluc2VydFJ1bGUoaSx0W2FdKSYmKHRoaXMuZ3JvdXBTaXplc1tlXSsrLGkrKyl9LHQuY2xlYXJHcm91cD1mdW5jdGlvbihlKXtpZihlPHRoaXMubGVuZ3RoKXt2YXIgdD10aGlzLmdyb3VwU2l6ZXNbZV0sbj10aGlzLmluZGV4T2ZHcm91cChlKSxyPW4rdDt0aGlzLmdyb3VwU2l6ZXNbZV09MDtmb3IodmFyIG89bjtvPHI7bysrKXRoaXMudGFnLmRlbGV0ZVJ1bGUobil9fSx0LmdldEdyb3VwPWZ1bmN0aW9uKGUpe3ZhciB0PVwiXCI7aWYoZT49dGhpcy5sZW5ndGh8fDA9PT10aGlzLmdyb3VwU2l6ZXNbZV0pcmV0dXJuIHQ7Zm9yKHZhciBuPXRoaXMuZ3JvdXBTaXplc1tlXSxyPXRoaXMuaW5kZXhPZkdyb3VwKGUpLG89cituLHM9cjtzPG87cysrKXQrPXRoaXMudGFnLmdldFJ1bGUocykrXCIvKiFzYyovXFxuXCI7cmV0dXJuIHR9LGV9KCkseD1uZXcgTWFwLGs9bmV3IE1hcCxWPTEsQj1mdW5jdGlvbihlKXtpZih4LmhhcyhlKSlyZXR1cm4geC5nZXQoZSk7Zm9yKDtrLmhhcyhWKTspVisrO3ZhciB0PVYrKztyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoKDB8dCk8MHx8dD4xPDwzMCkmJmooMTYsXCJcIit0KSx4LnNldChlLHQpLGsuc2V0KHQsZSksdH0sej1mdW5jdGlvbihlKXtyZXR1cm4gay5nZXQoZSl9LE09ZnVuY3Rpb24oZSx0KXt0Pj1WJiYoVj10KzEpLHguc2V0KGUsdCksay5zZXQodCxlKX0sRz1cInN0eWxlW1wiK0ErJ11bZGF0YS1zdHlsZWQtdmVyc2lvbj1cIjUuMy45XCJdJyxMPW5ldyBSZWdFeHAoXCJeXCIrQSsnXFxcXC5nKFxcXFxkKylcXFxcW2lkPVwiKFtcXFxcd1xcXFxkLV0rKVwiXFxcXF0uKj9cIihbXlwiXSopJyksRj1mdW5jdGlvbihlLHQsbil7Zm9yKHZhciByLG89bi5zcGxpdChcIixcIikscz0wLGk9by5sZW5ndGg7czxpO3MrKykocj1vW3NdKSYmZS5yZWdpc3Rlck5hbWUodCxyKX0sWT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0odC50ZXh0Q29udGVudHx8XCJcIikuc3BsaXQoXCIvKiFzYyovXFxuXCIpLHI9W10sbz0wLHM9bi5sZW5ndGg7bzxzO28rKyl7dmFyIGk9bltvXS50cmltKCk7aWYoaSl7dmFyIGE9aS5tYXRjaChMKTtpZihhKXt2YXIgYz0wfHBhcnNlSW50KGFbMV0sMTApLHU9YVsyXTswIT09YyYmKE0odSxjKSxGKGUsdSxhWzNdKSxlLmdldFRhZygpLmluc2VydFJ1bGVzKGMscikpLHIubGVuZ3RoPTB9ZWxzZSByLnB1c2goaSl9fX0scT1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXz9fX3dlYnBhY2tfbm9uY2VfXzpudWxsfSxIPWZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmhlYWQsbj1lfHx0LHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLG89ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuY2hpbGROb2RlcyxuPXQubGVuZ3RoO24+PTA7bi0tKXt2YXIgcj10W25dO2lmKHImJjE9PT1yLm5vZGVUeXBlJiZyLmhhc0F0dHJpYnV0ZShBKSlyZXR1cm4gcn19KG4pLHM9dm9pZCAwIT09bz9vLm5leHRTaWJsaW5nOm51bGw7ci5zZXRBdHRyaWJ1dGUoQSxcImFjdGl2ZVwiKSxyLnNldEF0dHJpYnV0ZShcImRhdGEtc3R5bGVkLXZlcnNpb25cIixcIjUuMy45XCIpO3ZhciBpPXEoKTtyZXR1cm4gaSYmci5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLGkpLG4uaW5zZXJ0QmVmb3JlKHIscykscn0sJD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9dGhpcy5lbGVtZW50PUgoZSk7dC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKSksdGhpcy5zaGVldD1mdW5jdGlvbihlKXtpZihlLnNoZWV0KXJldHVybiBlLnNoZWV0O2Zvcih2YXIgdD1kb2N1bWVudC5zdHlsZVNoZWV0cyxuPTAscj10Lmxlbmd0aDtuPHI7bisrKXt2YXIgbz10W25dO2lmKG8ub3duZXJOb2RlPT09ZSlyZXR1cm4gb31qKDE3KX0odCksdGhpcy5sZW5ndGg9MH12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7dHJ5e3JldHVybiB0aGlzLnNoZWV0Lmluc2VydFJ1bGUodCxlKSx0aGlzLmxlbmd0aCsrLCEwfWNhdGNoKGUpe3JldHVybiExfX0sdC5kZWxldGVSdWxlPWZ1bmN0aW9uKGUpe3RoaXMuc2hlZXQuZGVsZXRlUnVsZShlKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zaGVldC5jc3NSdWxlc1tlXTtyZXR1cm4gdm9pZCAwIT09dCYmXCJzdHJpbmdcIj09dHlwZW9mIHQuY3NzVGV4dD90LmNzc1RleHQ6XCJcIn0sZX0oKSxXPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLmVsZW1lbnQ9SChlKTt0aGlzLm5vZGVzPXQuY2hpbGROb2Rlcyx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXtpZihlPD10aGlzLmxlbmd0aCYmZT49MCl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodCkscj10aGlzLm5vZGVzW2VdO3JldHVybiB0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKG4scnx8bnVsbCksdGhpcy5sZW5ndGgrKywhMH1yZXR1cm4hMX0sdC5kZWxldGVSdWxlPWZ1bmN0aW9uKGUpe3RoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLm5vZGVzW2VdKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU8dGhpcy5sZW5ndGg/dGhpcy5ub2Rlc1tlXS50ZXh0Q29udGVudDpcIlwifSxlfSgpLFU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMucnVsZXM9W10sdGhpcy5sZW5ndGg9MH12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU8PXRoaXMubGVuZ3RoJiYodGhpcy5ydWxlcy5zcGxpY2UoZSwwLHQpLHRoaXMubGVuZ3RoKyssITApfSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5ydWxlcy5zcGxpY2UoZSwxKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU8dGhpcy5sZW5ndGg/dGhpcy5ydWxlc1tlXTpcIlwifSxlfSgpLEo9SSxYPXtpc1NlcnZlcjohSSx1c2VDU1NPTUluamVjdGlvbjohUH0sWj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4pe3ZvaWQgMD09PWUmJihlPUUpLHZvaWQgMD09PXQmJih0PXt9KSx0aGlzLm9wdGlvbnM9dih7fSxYLHt9LGUpLHRoaXMuZ3M9dCx0aGlzLm5hbWVzPW5ldyBNYXAobiksdGhpcy5zZXJ2ZXI9ISFlLmlzU2VydmVyLCF0aGlzLnNlcnZlciYmSSYmSiYmKEo9ITEsZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoRyksbj0wLHI9dC5sZW5ndGg7bjxyO24rKyl7dmFyIG89dFtuXTtvJiZcImFjdGl2ZVwiIT09by5nZXRBdHRyaWJ1dGUoQSkmJihZKGUsbyksby5wYXJlbnROb2RlJiZvLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobykpfX0odGhpcykpfWUucmVnaXN0ZXJJZD1mdW5jdGlvbihlKXtyZXR1cm4gQihlKX07dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucz1mdW5jdGlvbih0LG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0hMCksbmV3IGUodih7fSx0aGlzLm9wdGlvbnMse30sdCksdGhpcy5ncyxuJiZ0aGlzLm5hbWVzfHx2b2lkIDApfSx0LmFsbG9jYXRlR1NJbnN0YW5jZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nc1tlXT0odGhpcy5nc1tlXXx8MCkrMX0sdC5nZXRUYWc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50YWd8fCh0aGlzLnRhZz0obj0odD10aGlzLm9wdGlvbnMpLmlzU2VydmVyLHI9dC51c2VDU1NPTUluamVjdGlvbixvPXQudGFyZ2V0LGU9bj9uZXcgVShvKTpyP25ldyAkKG8pOm5ldyBXKG8pLG5ldyBUKGUpKSk7dmFyIGUsdCxuLHIsb30sdC5oYXNOYW1lRm9ySWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5uYW1lcy5oYXMoZSkmJnRoaXMubmFtZXMuZ2V0KGUpLmhhcyh0KX0sdC5yZWdpc3Rlck5hbWU9ZnVuY3Rpb24oZSx0KXtpZihCKGUpLHRoaXMubmFtZXMuaGFzKGUpKXRoaXMubmFtZXMuZ2V0KGUpLmFkZCh0KTtlbHNle3ZhciBuPW5ldyBTZXQ7bi5hZGQodCksdGhpcy5uYW1lcy5zZXQoZSxuKX19LHQuaW5zZXJ0UnVsZXM9ZnVuY3Rpb24oZSx0LG4pe3RoaXMucmVnaXN0ZXJOYW1lKGUsdCksdGhpcy5nZXRUYWcoKS5pbnNlcnRSdWxlcyhCKGUpLG4pfSx0LmNsZWFyTmFtZXM9ZnVuY3Rpb24oZSl7dGhpcy5uYW1lcy5oYXMoZSkmJnRoaXMubmFtZXMuZ2V0KGUpLmNsZWFyKCl9LHQuY2xlYXJSdWxlcz1mdW5jdGlvbihlKXt0aGlzLmdldFRhZygpLmNsZWFyR3JvdXAoQihlKSksdGhpcy5jbGVhck5hbWVzKGUpfSx0LmNsZWFyVGFnPWZ1bmN0aW9uKCl7dGhpcy50YWc9dm9pZCAwfSx0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmdldFRhZygpLG49dC5sZW5ndGgscj1cIlwiLG89MDtvPG47bysrKXt2YXIgcz16KG8pO2lmKHZvaWQgMCE9PXMpe3ZhciBpPWUubmFtZXMuZ2V0KHMpLGE9dC5nZXRHcm91cChvKTtpZihpJiZhJiZpLnNpemUpe3ZhciBjPUErXCIuZ1wiK28rJ1tpZD1cIicrcysnXCJdJyx1PVwiXCI7dm9pZCAwIT09aSYmaS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmxlbmd0aD4wJiYodSs9ZStcIixcIil9KSkscis9XCJcIithK2MrJ3tjb250ZW50OlwiJyt1KydcIn0vKiFzYyovXFxuJ319fXJldHVybiByfSh0aGlzKX0sZX0oKSxLPS8oYSkoZCkvZ2ksUT1mdW5jdGlvbihlKXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShlKyhlPjI1PzM5Ojk3KSl9O2Z1bmN0aW9uIGVlKGUpe3ZhciB0LG49XCJcIjtmb3IodD1NYXRoLmFicyhlKTt0PjUyO3Q9dC81MnwwKW49USh0JTUyKStuO3JldHVybihRKHQlNTIpK24pLnJlcGxhY2UoSyxcIiQxLSQyXCIpfXZhciB0ZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10Lmxlbmd0aDtuOyllPTMzKmVedC5jaGFyQ29kZUF0KC0tbik7cmV0dXJuIGV9LG5lPWZ1bmN0aW9uKGUpe3JldHVybiB0ZSg1MzgxLGUpfTtmdW5jdGlvbiByZShlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrPTEpe3ZhciBuPWVbdF07aWYoYihuKSYmIU4obikpcmV0dXJuITF9cmV0dXJuITB9dmFyIG9lPW5lKFwiNS4zLjlcIiksc2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCxuKXt0aGlzLnJ1bGVzPWUsdGhpcy5zdGF0aWNSdWxlc0lkPVwiXCIsdGhpcy5pc1N0YXRpYz1cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYodm9pZCAwPT09bnx8bi5pc1N0YXRpYykmJnJlKGUpLHRoaXMuY29tcG9uZW50SWQ9dCx0aGlzLmJhc2VIYXNoPXRlKG9lLHQpLHRoaXMuYmFzZVN0eWxlPW4sWi5yZWdpc3RlcklkKHQpfXJldHVybiBlLnByb3RvdHlwZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcz1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcy5jb21wb25lbnRJZCxvPVtdO2lmKHRoaXMuYmFzZVN0eWxlJiZvLnB1c2godGhpcy5iYXNlU3R5bGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoZSx0LG4pKSx0aGlzLmlzU3RhdGljJiYhbi5oYXNoKWlmKHRoaXMuc3RhdGljUnVsZXNJZCYmdC5oYXNOYW1lRm9ySWQocix0aGlzLnN0YXRpY1J1bGVzSWQpKW8ucHVzaCh0aGlzLnN0YXRpY1J1bGVzSWQpO2Vsc2V7dmFyIHM9TmUodGhpcy5ydWxlcyxlLHQsbikuam9pbihcIlwiKSxpPWVlKHRlKHRoaXMuYmFzZUhhc2gscyk+Pj4wKTtpZighdC5oYXNOYW1lRm9ySWQocixpKSl7dmFyIGE9bihzLFwiLlwiK2ksdm9pZCAwLHIpO3QuaW5zZXJ0UnVsZXMocixpLGEpfW8ucHVzaChpKSx0aGlzLnN0YXRpY1J1bGVzSWQ9aX1lbHNle2Zvcih2YXIgYz10aGlzLnJ1bGVzLmxlbmd0aCx1PXRlKHRoaXMuYmFzZUhhc2gsbi5oYXNoKSxsPVwiXCIsZD0wO2Q8YztkKyspe3ZhciBoPXRoaXMucnVsZXNbZF07aWYoXCJzdHJpbmdcIj09dHlwZW9mIGgpbCs9aCxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYodT10ZSh1LGgrZCkpO2Vsc2UgaWYoaCl7dmFyIHA9TmUoaCxlLHQsbiksZj1BcnJheS5pc0FycmF5KHApP3Auam9pbihcIlwiKTpwO3U9dGUodSxmK2QpLGwrPWZ9fWlmKGwpe3ZhciBtPWVlKHU+Pj4wKTtpZighdC5oYXNOYW1lRm9ySWQocixtKSl7dmFyIHk9bihsLFwiLlwiK20sdm9pZCAwLHIpO3QuaW5zZXJ0UnVsZXMocixtLHkpfW8ucHVzaChtKX19cmV0dXJuIG8uam9pbihcIiBcIil9LGV9KCksaWU9L15cXHMqXFwvXFwvLiokL2dtLGFlPVtcIjpcIixcIltcIixcIi5cIixcIiNcIl07ZnVuY3Rpb24gY2UoZSl7dmFyIHQsbixyLG8scz12b2lkIDA9PT1lP0U6ZSxpPXMub3B0aW9ucyxhPXZvaWQgMD09PWk/RTppLGM9cy5wbHVnaW5zLHU9dm9pZCAwPT09Yz93OmMsbD1uZXcgcChhKSxkPVtdLGg9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtpZih0KXRyeXtlKHQrXCJ9XCIpfWNhdGNoKGUpe319cmV0dXJuIGZ1bmN0aW9uKG4scixvLHMsaSxhLGMsdSxsLGQpe3N3aXRjaChuKXtjYXNlIDE6aWYoMD09PWwmJjY0PT09ci5jaGFyQ29kZUF0KDApKXJldHVybiBlKHIrXCI7XCIpLFwiXCI7YnJlYWs7Y2FzZSAyOmlmKDA9PT11KXJldHVybiByK1wiLyp8Ki9cIjticmVhaztjYXNlIDM6c3dpdGNoKHUpe2Nhc2UgMTAyOmNhc2UgMTEyOnJldHVybiBlKG9bMF0rciksXCJcIjtkZWZhdWx0OnJldHVybiByKygwPT09ZD9cIi8qfCovXCI6XCJcIil9Y2FzZS0yOnIuc3BsaXQoXCIvKnwqL31cIikuZm9yRWFjaCh0KX19fSgoZnVuY3Rpb24oZSl7ZC5wdXNoKGUpfSkpLGY9ZnVuY3Rpb24oZSxyLHMpe3JldHVybiAwPT09ciYmLTEhPT1hZS5pbmRleE9mKHNbbi5sZW5ndGhdKXx8cy5tYXRjaChvKT9lOlwiLlwiK3R9O2Z1bmN0aW9uIG0oZSxzLGksYSl7dm9pZCAwPT09YSYmKGE9XCImXCIpO3ZhciBjPWUucmVwbGFjZShpZSxcIlwiKSx1PXMmJmk/aStcIiBcIitzK1wiIHsgXCIrYytcIiB9XCI6YztyZXR1cm4gdD1hLG49cyxyPW5ldyBSZWdFeHAoXCJcXFxcXCIrbitcIlxcXFxiXCIsXCJnXCIpLG89bmV3IFJlZ0V4cChcIihcXFxcXCIrbitcIlxcXFxiKXsyLH1cIiksbChpfHwhcz9cIlwiOnMsdSl9cmV0dXJuIGwudXNlKFtdLmNvbmNhdCh1LFtmdW5jdGlvbihlLHQsbyl7Mj09PWUmJm8ubGVuZ3RoJiZvWzBdLmxhc3RJbmRleE9mKG4pPjAmJihvWzBdPW9bMF0ucmVwbGFjZShyLGYpKX0saCxmdW5jdGlvbihlKXtpZigtMj09PWUpe3ZhciB0PWQ7cmV0dXJuIGQ9W10sdH19XSkpLG0uaGFzaD11Lmxlbmd0aD91LnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5uYW1lfHxqKDE1KSx0ZShlLHQubmFtZSl9KSw1MzgxKS50b1N0cmluZygpOlwiXCIsbX12YXIgdWU9ci5jcmVhdGVDb250ZXh0KCksbGU9dWUuQ29uc3VtZXIsZGU9ci5jcmVhdGVDb250ZXh0KCksaGU9KGRlLkNvbnN1bWVyLG5ldyBaKSxwZT1jZSgpO2Z1bmN0aW9uIGZlKCl7cmV0dXJuIHModWUpfHxoZX1mdW5jdGlvbiBtZSgpe3JldHVybiBzKGRlKXx8cGV9ZnVuY3Rpb24geWUoZSl7dmFyIHQ9byhlLnN0eWxpc1BsdWdpbnMpLG49dFswXSxzPXRbMV0sYz1mZSgpLHU9aSgoZnVuY3Rpb24oKXt2YXIgdD1jO3JldHVybiBlLnNoZWV0P3Q9ZS5zaGVldDplLnRhcmdldCYmKHQ9dC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHt0YXJnZXQ6ZS50YXJnZXR9LCExKSksZS5kaXNhYmxlQ1NTT01JbmplY3Rpb24mJih0PXQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyh7dXNlQ1NTT01JbmplY3Rpb246ITF9KSksdH0pLFtlLmRpc2FibGVDU1NPTUluamVjdGlvbixlLnNoZWV0LGUudGFyZ2V0XSksbD1pKChmdW5jdGlvbigpe3JldHVybiBjZSh7b3B0aW9uczp7cHJlZml4OiFlLmRpc2FibGVWZW5kb3JQcmVmaXhlc30scGx1Z2luczpufSl9KSxbZS5kaXNhYmxlVmVuZG9yUHJlZml4ZXMsbl0pO3JldHVybiBhKChmdW5jdGlvbigpe2gobixlLnN0eWxpc1BsdWdpbnMpfHxzKGUuc3R5bGlzUGx1Z2lucyl9KSxbZS5zdHlsaXNQbHVnaW5zXSksci5jcmVhdGVFbGVtZW50KHVlLlByb3ZpZGVyLHt2YWx1ZTp1fSxyLmNyZWF0ZUVsZW1lbnQoZGUuUHJvdmlkZXIse3ZhbHVlOmx9LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ci5DaGlsZHJlbi5vbmx5KGUuY2hpbGRyZW4pOmUuY2hpbGRyZW4pKX12YXIgdmU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG49dGhpczt0aGlzLmluamVjdD1mdW5jdGlvbihlLHQpe3ZvaWQgMD09PXQmJih0PXBlKTt2YXIgcj1uLm5hbWUrdC5oYXNoO2UuaGFzTmFtZUZvcklkKG4uaWQscil8fGUuaW5zZXJ0UnVsZXMobi5pZCxyLHQobi5ydWxlcyxyLFwiQGtleWZyYW1lc1wiKSl9LHRoaXMudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gaigxMixTdHJpbmcobi5uYW1lKSl9LHRoaXMubmFtZT1lLHRoaXMuaWQ9XCJzYy1rZXlmcmFtZXMtXCIrZSx0aGlzLnJ1bGVzPXR9cmV0dXJuIGUucHJvdG90eXBlLmdldE5hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPXBlKSx0aGlzLm5hbWUrZS5oYXNofSxlfSgpLGdlPS8oW0EtWl0pLyxTZT0vKFtBLVpdKS9nLHdlPS9ebXMtLyxFZT1mdW5jdGlvbihlKXtyZXR1cm5cIi1cIitlLnRvTG93ZXJDYXNlKCl9O2Z1bmN0aW9uIGJlKGUpe3JldHVybiBnZS50ZXN0KGUpP2UucmVwbGFjZShTZSxFZSkucmVwbGFjZSh3ZSxcIi1tcy1cIik6ZX12YXIgX2U9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWV8fCExPT09ZXx8XCJcIj09PWV9O2Z1bmN0aW9uIE5lKGUsbixyLG8pe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgcyxpPVtdLGE9MCxjPWUubGVuZ3RoO2E8YzthKz0xKVwiXCIhPT0ocz1OZShlW2FdLG4scixvKSkmJihBcnJheS5pc0FycmF5KHMpP2kucHVzaC5hcHBseShpLHMpOmkucHVzaChzKSk7cmV0dXJuIGl9aWYoX2UoZSkpcmV0dXJuXCJcIjtpZihOKGUpKXJldHVyblwiLlwiK2Uuc3R5bGVkQ29tcG9uZW50SWQ7aWYoYihlKSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YobD1lKXx8bC5wcm90b3R5cGUmJmwucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnR8fCFuKXJldHVybiBlO3ZhciB1PWUobik7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdCh1KSYmY29uc29sZS53YXJuKF8oZSkrXCIgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlwiKSxOZSh1LG4scixvKX12YXIgbDtyZXR1cm4gZSBpbnN0YW5jZW9mIHZlP3I/KGUuaW5qZWN0KHIsbyksZS5nZXROYW1lKG8pKTplOlMoZSk/ZnVuY3Rpb24gZSh0LG4pe3ZhciByLG8scz1bXTtmb3IodmFyIGkgaW4gdCl0Lmhhc093blByb3BlcnR5KGkpJiYhX2UodFtpXSkmJihBcnJheS5pc0FycmF5KHRbaV0pJiZ0W2ldLmlzQ3NzfHxiKHRbaV0pP3MucHVzaChiZShpKStcIjpcIix0W2ldLFwiO1wiKTpTKHRbaV0pP3MucHVzaC5hcHBseShzLGUodFtpXSxpKSk6cy5wdXNoKGJlKGkpK1wiOiBcIisocj1pLG51bGw9PShvPXRbaV0pfHxcImJvb2xlYW5cIj09dHlwZW9mIG98fFwiXCI9PT1vP1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIG98fDA9PT1vfHxyIGluIGY/U3RyaW5nKG8pLnRyaW0oKTpvK1wicHhcIikrXCI7XCIpKTtyZXR1cm4gbj9bbitcIiB7XCJdLmNvbmNhdChzLFtcIn1cIl0pOnN9KGUpOmUudG9TdHJpbmcoKX12YXIgQWU9ZnVuY3Rpb24oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSkmJihlLmlzQ3NzPSEwKSxlfTtmdW5jdGlvbiBDZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07cmV0dXJuIGIoZSl8fFMoZSk/QWUoTmUoZyh3LFtlXS5jb25jYXQobikpKSk6MD09PW4ubGVuZ3RoJiYxPT09ZS5sZW5ndGgmJlwic3RyaW5nXCI9PXR5cGVvZiBlWzBdP2U6QWUoTmUoZyhlLG4pKSl9dmFyIEllPS9pbnZhbGlkIGhvb2sgY2FsbC9pLFBlPW5ldyBTZXQsT2U9ZnVuY3Rpb24oZSx0KXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgbj1cIlRoZSBjb21wb25lbnQgXCIrZSsodD8nIHdpdGggdGhlIGlkIG9mIFwiJyt0KydcIic6XCJcIikrXCIgaGFzIGJlZW4gY3JlYXRlZCBkeW5hbWljYWxseS5cXG5Zb3UgbWF5IHNlZSB0aGlzIHdhcm5pbmcgYmVjYXVzZSB5b3UndmUgY2FsbGVkIHN0eWxlZCBpbnNpZGUgYW5vdGhlciBjb21wb25lbnQuXFxuVG8gcmVzb2x2ZSB0aGlzIG9ubHkgY3JlYXRlIG5ldyBTdHlsZWRDb21wb25lbnRzIG91dHNpZGUgb2YgYW55IHJlbmRlciBtZXRob2QgYW5kIGZ1bmN0aW9uIGNvbXBvbmVudC5cIixyPWNvbnNvbGUuZXJyb3I7dHJ5e3ZhciBvPSEwO2NvbnNvbGUuZXJyb3I9ZnVuY3Rpb24oZSl7aWYoSWUudGVzdChlKSlvPSExLFBlLmRlbGV0ZShuKTtlbHNle2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLHM9bmV3IEFycmF5KHQ+MT90LTE6MCksaT0xO2k8dDtpKyspc1tpLTFdPWFyZ3VtZW50c1tpXTtyLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KHMpKX19LGMoKSxvJiYhUGUuaGFzKG4pJiYoY29uc29sZS53YXJuKG4pLFBlLmFkZChuKSl9Y2F0Y2goZSl7SWUudGVzdChlLm1lc3NhZ2UpJiZQZS5kZWxldGUobil9ZmluYWxseXtjb25zb2xlLmVycm9yPXJ9fX0sUmU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj1FKSxlLnRoZW1lIT09bi50aGVtZSYmZS50aGVtZXx8dHx8bi50aGVtZX0sRGU9L1shXCIjJCUmJygpKissLi86Ozw9Pj9AW1xcXFxcXF1eYHt8fX4tXSsvZyxqZT0vKF4tfC0kKS9nO2Z1bmN0aW9uIFRlKGUpe3JldHVybiBlLnJlcGxhY2UoRGUsXCItXCIpLnJlcGxhY2UoamUsXCJcIil9dmFyIHhlPWZ1bmN0aW9uKGUpe3JldHVybiBlZShuZShlKT4+PjApfTtmdW5jdGlvbiBrZShlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmKFwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fGUuY2hhckF0KDApPT09ZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSl9dmFyIFZlPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV8fFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSYmIUFycmF5LmlzQXJyYXkoZSl9LEJlPWZ1bmN0aW9uKGUpe3JldHVyblwiX19wcm90b19fXCIhPT1lJiZcImNvbnN0cnVjdG9yXCIhPT1lJiZcInByb3RvdHlwZVwiIT09ZX07ZnVuY3Rpb24gemUoZSx0LG4pe3ZhciByPWVbbl07VmUodCkmJlZlKHIpP01lKHIsdCk6ZVtuXT10fWZ1bmN0aW9uIE1lKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtmb3IodmFyIG89MCxzPW47bzxzLmxlbmd0aDtvKyspe3ZhciBpPXNbb107aWYoVmUoaSkpZm9yKHZhciBhIGluIGkpQmUoYSkmJnplKGUsaVthXSxhKX1yZXR1cm4gZX12YXIgR2U9ci5jcmVhdGVDb250ZXh0KCksTGU9R2UuQ29uc3VtZXI7ZnVuY3Rpb24gRmUoZSl7dmFyIHQ9cyhHZSksbj1pKChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybiBqKDE0KTtpZihiKGUpKXt2YXIgbj1lKHQpO3JldHVyblwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fG51bGwhPT1uJiYhQXJyYXkuaXNBcnJheShuKSYmXCJvYmplY3RcIj09dHlwZW9mIG4/bjpqKDcpfXJldHVybiBBcnJheS5pc0FycmF5KGUpfHxcIm9iamVjdFwiIT10eXBlb2YgZT9qKDgpOnQ/dih7fSx0LHt9LGUpOmV9KGUudGhlbWUsdCl9KSxbZS50aGVtZSx0XSk7cmV0dXJuIGUuY2hpbGRyZW4/ci5jcmVhdGVFbGVtZW50KEdlLlByb3ZpZGVyLHt2YWx1ZTpufSxlLmNoaWxkcmVuKTpudWxsfXZhciBZZT17fTtmdW5jdGlvbiBxZShlLHQsbil7dmFyIG89TihlKSxpPSFrZShlKSxhPXQuYXR0cnMsYz12b2lkIDA9PT1hP3c6YSxkPXQuY29tcG9uZW50SWQsaD12b2lkIDA9PT1kP2Z1bmN0aW9uKGUsdCl7dmFyIG49XCJzdHJpbmdcIiE9dHlwZW9mIGU/XCJzY1wiOlRlKGUpO1llW25dPShZZVtuXXx8MCkrMTt2YXIgcj1uK1wiLVwiK3hlKFwiNS4zLjlcIituK1llW25dKTtyZXR1cm4gdD90K1wiLVwiK3I6cn0odC5kaXNwbGF5TmFtZSx0LnBhcmVudENvbXBvbmVudElkKTpkLHA9dC5kaXNwbGF5TmFtZSxmPXZvaWQgMD09PXA/ZnVuY3Rpb24oZSl7cmV0dXJuIGtlKGUpP1wic3R5bGVkLlwiK2U6XCJTdHlsZWQoXCIrXyhlKStcIilcIn0oZSk6cCxnPXQuZGlzcGxheU5hbWUmJnQuY29tcG9uZW50SWQ/VGUodC5kaXNwbGF5TmFtZSkrXCItXCIrdC5jb21wb25lbnRJZDp0LmNvbXBvbmVudElkfHxoLFM9byYmZS5hdHRycz9BcnJheS5wcm90b3R5cGUuY29uY2F0KGUuYXR0cnMsYykuZmlsdGVyKEJvb2xlYW4pOmMsQT10LnNob3VsZEZvcndhcmRQcm9wO28mJmUuc2hvdWxkRm9yd2FyZFByb3AmJihBPXQuc2hvdWxkRm9yd2FyZFByb3A/ZnVuY3Rpb24obixyLG8pe3JldHVybiBlLnNob3VsZEZvcndhcmRQcm9wKG4scixvKSYmdC5zaG91bGRGb3J3YXJkUHJvcChuLHIsbyl9OmUuc2hvdWxkRm9yd2FyZFByb3ApO3ZhciBDLEk9bmV3IHNlKG4sZyxvP2UuY29tcG9uZW50U3R5bGU6dm9pZCAwKSxQPUkuaXNTdGF0aWMmJjA9PT1jLmxlbmd0aCxPPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPWUuYXR0cnMsaT1lLmNvbXBvbmVudFN0eWxlLGE9ZS5kZWZhdWx0UHJvcHMsYz1lLmZvbGRlZENvbXBvbmVudElkcyxkPWUuc2hvdWxkRm9yd2FyZFByb3AsaD1lLnN0eWxlZENvbXBvbmVudElkLHA9ZS50YXJnZXQ7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmbChoKTt2YXIgZj1mdW5jdGlvbihlLHQsbil7dm9pZCAwPT09ZSYmKGU9RSk7dmFyIHI9dih7fSx0LHt0aGVtZTplfSksbz17fTtyZXR1cm4gbi5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgdCxuLHMsaT1lO2Zvcih0IGluIGIoaSkmJihpPWkocikpLGkpclt0XT1vW3RdPVwiY2xhc3NOYW1lXCI9PT10PyhuPW9bdF0scz1pW3RdLG4mJnM/bitcIiBcIitzOm58fHMpOmlbdF19KSksW3Isb119KFJlKHQscyhHZSksYSl8fEUsdCxvKSx5PWZbMF0sZz1mWzFdLFM9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89ZmUoKSxzPW1lKCksaT10P2UuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoRSxvLHMpOmUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMobixvLHMpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmwoaSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmIXQmJnImJnIoaSksaX0oaSxyLHksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9lLndhcm5Ub29NYW55Q2xhc3Nlczp2b2lkIDApLHc9bixfPWcuJGFzfHx0LiRhc3x8Zy5hc3x8dC5hc3x8cCxOPWtlKF8pLEE9ZyE9PXQ/dih7fSx0LHt9LGcpOnQsQz17fTtmb3IodmFyIEkgaW4gQSlcIiRcIiE9PUlbMF0mJlwiYXNcIiE9PUkmJihcImZvcndhcmRlZEFzXCI9PT1JP0MuYXM9QVtJXTooZD9kKEksbSxfKTohTnx8bShJKSkmJihDW0ldPUFbSV0pKTtyZXR1cm4gdC5zdHlsZSYmZy5zdHlsZSE9PXQuc3R5bGUmJihDLnN0eWxlPXYoe30sdC5zdHlsZSx7fSxnLnN0eWxlKSksQy5jbGFzc05hbWU9QXJyYXkucHJvdG90eXBlLmNvbmNhdChjLGgsUyE9PWg/UzpudWxsLHQuY2xhc3NOYW1lLGcuY2xhc3NOYW1lKS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIiksQy5yZWY9dyx1KF8sQyl9KEMsZSx0LFApfTtyZXR1cm4gTy5kaXNwbGF5TmFtZT1mLChDPXIuZm9yd2FyZFJlZihPKSkuYXR0cnM9UyxDLmNvbXBvbmVudFN0eWxlPUksQy5kaXNwbGF5TmFtZT1mLEMuc2hvdWxkRm9yd2FyZFByb3A9QSxDLmZvbGRlZENvbXBvbmVudElkcz1vP0FycmF5LnByb3RvdHlwZS5jb25jYXQoZS5mb2xkZWRDb21wb25lbnRJZHMsZS5zdHlsZWRDb21wb25lbnRJZCk6dyxDLnN0eWxlZENvbXBvbmVudElkPWcsQy50YXJnZXQ9bz9lLnRhcmdldDplLEMud2l0aENvbXBvbmVudD1mdW5jdGlvbihlKXt2YXIgcj10LmNvbXBvbmVudElkLG89ZnVuY3Rpb24oZSx0KXtpZihudWxsPT1lKXJldHVybnt9O3ZhciBuLHIsbz17fSxzPU9iamVjdC5rZXlzKGUpO2ZvcihyPTA7cjxzLmxlbmd0aDtyKyspbj1zW3JdLHQuaW5kZXhPZihuKT49MHx8KG9bbl09ZVtuXSk7cmV0dXJuIG99KHQsW1wiY29tcG9uZW50SWRcIl0pLHM9ciYmcitcIi1cIisoa2UoZSk/ZTpUZShfKGUpKSk7cmV0dXJuIHFlKGUsdih7fSxvLHthdHRyczpTLGNvbXBvbmVudElkOnN9KSxuKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KEMsXCJkZWZhdWx0UHJvcHNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ZvbGRlZERlZmF1bHRQcm9wc30sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX2ZvbGRlZERlZmF1bHRQcm9wcz1vP01lKHt9LGUuZGVmYXVsdFByb3BzLHQpOnR9fSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKE9lKGYsZyksQy53YXJuVG9vTWFueUNsYXNzZXM9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fSxyPSExO3JldHVybiBmdW5jdGlvbihvKXtpZighciYmKG5bb109ITAsT2JqZWN0LmtleXMobikubGVuZ3RoPj0yMDApKXt2YXIgcz10Pycgd2l0aCB0aGUgaWQgb2YgXCInK3QrJ1wiJzpcIlwiO2NvbnNvbGUud2FybihcIk92ZXIgMjAwIGNsYXNzZXMgd2VyZSBnZW5lcmF0ZWQgZm9yIGNvbXBvbmVudCBcIitlK3MrXCIuXFxuQ29uc2lkZXIgdXNpbmcgdGhlIGF0dHJzIG1ldGhvZCwgdG9nZXRoZXIgd2l0aCBhIHN0eWxlIG9iamVjdCBmb3IgZnJlcXVlbnRseSBjaGFuZ2VkIHN0eWxlcy5cXG5FeGFtcGxlOlxcbiAgY29uc3QgQ29tcG9uZW50ID0gc3R5bGVkLmRpdi5hdHRycyhwcm9wcyA9PiAoe1xcbiAgICBzdHlsZToge1xcbiAgICAgIGJhY2tncm91bmQ6IHByb3BzLmJhY2tncm91bmQsXFxuICAgIH0sXFxuICB9KSlgd2lkdGg6IDEwMCU7YFxcblxcbiAgPENvbXBvbmVudCAvPlwiKSxyPSEwLG49e319fX0oZixnKSksT2JqZWN0LmRlZmluZVByb3BlcnR5KEMsXCJ0b1N0cmluZ1wiLHt2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwiLlwiK0Muc3R5bGVkQ29tcG9uZW50SWR9fSksaSYmeShDLGUse2F0dHJzOiEwLGNvbXBvbmVudFN0eWxlOiEwLGRpc3BsYXlOYW1lOiEwLGZvbGRlZENvbXBvbmVudElkczohMCxzaG91bGRGb3J3YXJkUHJvcDohMCxzdHlsZWRDb21wb25lbnRJZDohMCx0YXJnZXQ6ITAsd2l0aENvbXBvbmVudDohMH0pLEN9dmFyIEhlPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbiBlKHQscixvKXtpZih2b2lkIDA9PT1vJiYobz1FKSwhbihyKSlyZXR1cm4gaigxLFN0cmluZyhyKSk7dmFyIHM9ZnVuY3Rpb24oKXtyZXR1cm4gdChyLG8sQ2UuYXBwbHkodm9pZCAwLGFyZ3VtZW50cykpfTtyZXR1cm4gcy53aXRoQ29uZmlnPWZ1bmN0aW9uKG4pe3JldHVybiBlKHQscix2KHt9LG8se30sbikpfSxzLmF0dHJzPWZ1bmN0aW9uKG4pe3JldHVybiBlKHQscix2KHt9LG8se2F0dHJzOkFycmF5LnByb3RvdHlwZS5jb25jYXQoby5hdHRycyxuKS5maWx0ZXIoQm9vbGVhbil9KSl9LHN9KHFlLGUpfTtbXCJhXCIsXCJhYmJyXCIsXCJhZGRyZXNzXCIsXCJhcmVhXCIsXCJhcnRpY2xlXCIsXCJhc2lkZVwiLFwiYXVkaW9cIixcImJcIixcImJhc2VcIixcImJkaVwiLFwiYmRvXCIsXCJiaWdcIixcImJsb2NrcXVvdGVcIixcImJvZHlcIixcImJyXCIsXCJidXR0b25cIixcImNhbnZhc1wiLFwiY2FwdGlvblwiLFwiY2l0ZVwiLFwiY29kZVwiLFwiY29sXCIsXCJjb2xncm91cFwiLFwiZGF0YVwiLFwiZGF0YWxpc3RcIixcImRkXCIsXCJkZWxcIixcImRldGFpbHNcIixcImRmblwiLFwiZGlhbG9nXCIsXCJkaXZcIixcImRsXCIsXCJkdFwiLFwiZW1cIixcImVtYmVkXCIsXCJmaWVsZHNldFwiLFwiZmlnY2FwdGlvblwiLFwiZmlndXJlXCIsXCJmb290ZXJcIixcImZvcm1cIixcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIixcImhlYWRcIixcImhlYWRlclwiLFwiaGdyb3VwXCIsXCJoclwiLFwiaHRtbFwiLFwiaVwiLFwiaWZyYW1lXCIsXCJpbWdcIixcImlucHV0XCIsXCJpbnNcIixcImtiZFwiLFwia2V5Z2VuXCIsXCJsYWJlbFwiLFwibGVnZW5kXCIsXCJsaVwiLFwibGlua1wiLFwibWFpblwiLFwibWFwXCIsXCJtYXJrXCIsXCJtYXJxdWVlXCIsXCJtZW51XCIsXCJtZW51aXRlbVwiLFwibWV0YVwiLFwibWV0ZXJcIixcIm5hdlwiLFwibm9zY3JpcHRcIixcIm9iamVjdFwiLFwib2xcIixcIm9wdGdyb3VwXCIsXCJvcHRpb25cIixcIm91dHB1dFwiLFwicFwiLFwicGFyYW1cIixcInBpY3R1cmVcIixcInByZVwiLFwicHJvZ3Jlc3NcIixcInFcIixcInJwXCIsXCJydFwiLFwicnVieVwiLFwic1wiLFwic2FtcFwiLFwic2NyaXB0XCIsXCJzZWN0aW9uXCIsXCJzZWxlY3RcIixcInNtYWxsXCIsXCJzb3VyY2VcIixcInNwYW5cIixcInN0cm9uZ1wiLFwic3R5bGVcIixcInN1YlwiLFwic3VtbWFyeVwiLFwic3VwXCIsXCJ0YWJsZVwiLFwidGJvZHlcIixcInRkXCIsXCJ0ZXh0YXJlYVwiLFwidGZvb3RcIixcInRoXCIsXCJ0aGVhZFwiLFwidGltZVwiLFwidGl0bGVcIixcInRyXCIsXCJ0cmFja1wiLFwidVwiLFwidWxcIixcInZhclwiLFwidmlkZW9cIixcIndiclwiLFwiY2lyY2xlXCIsXCJjbGlwUGF0aFwiLFwiZGVmc1wiLFwiZWxsaXBzZVwiLFwiZm9yZWlnbk9iamVjdFwiLFwiZ1wiLFwiaW1hZ2VcIixcImxpbmVcIixcImxpbmVhckdyYWRpZW50XCIsXCJtYXJrZXJcIixcIm1hc2tcIixcInBhdGhcIixcInBhdHRlcm5cIixcInBvbHlnb25cIixcInBvbHlsaW5lXCIsXCJyYWRpYWxHcmFkaWVudFwiLFwicmVjdFwiLFwic3RvcFwiLFwic3ZnXCIsXCJ0ZXh0XCIsXCJ0ZXh0UGF0aFwiLFwidHNwYW5cIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7SGVbZV09SGUoZSl9KSk7dmFyICRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMucnVsZXM9ZSx0aGlzLmNvbXBvbmVudElkPXQsdGhpcy5pc1N0YXRpYz1yZShlKSxaLnJlZ2lzdGVySWQodGhpcy5jb21wb25lbnRJZCsxKX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVTdHlsZXM9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89cihOZSh0aGlzLnJ1bGVzLHQsbixyKS5qb2luKFwiXCIpLFwiXCIpLHM9dGhpcy5jb21wb25lbnRJZCtlO24uaW5zZXJ0UnVsZXMocyxzLG8pfSx0LnJlbW92ZVN0eWxlcz1mdW5jdGlvbihlLHQpe3QuY2xlYXJSdWxlcyh0aGlzLmNvbXBvbmVudElkK2UpfSx0LnJlbmRlclN0eWxlcz1mdW5jdGlvbihlLHQsbixyKXtlPjImJloucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkK2UpLHRoaXMucmVtb3ZlU3R5bGVzKGUsbiksdGhpcy5jcmVhdGVTdHlsZXMoZSx0LG4scil9LGV9KCk7ZnVuY3Rpb24gV2UoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxvPTE7bzx0O28rKyluW28tMV09YXJndW1lbnRzW29dO3ZhciBpPUNlLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KG4pKSxhPVwic2MtZ2xvYmFsLVwiK3hlKEpTT04uc3RyaW5naWZ5KGkpKSx1PW5ldyAkZShpLGEpO2Z1bmN0aW9uIGwoZSl7dmFyIHQ9ZmUoKSxuPW1lKCksbz1zKEdlKSxsPWModC5hbGxvY2F0ZUdTSW5zdGFuY2UoYSkpLmN1cnJlbnQ7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmci5DaGlsZHJlbi5jb3VudChlLmNoaWxkcmVuKSYmY29uc29sZS53YXJuKFwiVGhlIGdsb2JhbCBzdHlsZSBjb21wb25lbnQgXCIrYStcIiB3YXMgZ2l2ZW4gY2hpbGQgSlNYLiBjcmVhdGVHbG9iYWxTdHlsZSBkb2VzIG5vdCByZW5kZXIgY2hpbGRyZW4uXCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmkuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJi0xIT09ZS5pbmRleE9mKFwiQGltcG9ydFwiKX0pKSYmY29uc29sZS53YXJuKFwiUGxlYXNlIGRvIG5vdCB1c2UgQGltcG9ydCBDU1Mgc3ludGF4IGluIGNyZWF0ZUdsb2JhbFN0eWxlIGF0IHRoaXMgdGltZSwgYXMgdGhlIENTU09NIEFQSXMgd2UgdXNlIGluIHByb2R1Y3Rpb24gZG8gbm90IGhhbmRsZSBpdCB3ZWxsLiBJbnN0ZWFkLCB3ZSByZWNvbW1lbmQgdXNpbmcgYSBsaWJyYXJ5IHN1Y2ggYXMgcmVhY3QtaGVsbWV0IHRvIGluamVjdCBhIHR5cGljYWwgPGxpbms+IG1ldGEgdGFnIHRvIHRoZSBzdHlsZXNoZWV0LCBvciBzaW1wbHkgZW1iZWRkaW5nIGl0IG1hbnVhbGx5IGluIHlvdXIgaW5kZXguaHRtbCA8aGVhZD4gc2VjdGlvbiBmb3IgYSBzaW1wbGVyIGFwcC5cIiksdC5zZXJ2ZXImJmgobCxlLHQsbyxuKSxkKChmdW5jdGlvbigpe2lmKCF0LnNlcnZlcilyZXR1cm4gaChsLGUsdCxvLG4pLGZ1bmN0aW9uKCl7cmV0dXJuIHUucmVtb3ZlU3R5bGVzKGwsdCl9fSksW2wsZSx0LG8sbl0pLG51bGx9ZnVuY3Rpb24gaChlLHQsbixyLG8pe2lmKHUuaXNTdGF0aWMpdS5yZW5kZXJTdHlsZXMoZSxPLG4sbyk7ZWxzZXt2YXIgcz12KHt9LHQse3RoZW1lOlJlKHQscixsLmRlZmF1bHRQcm9wcyl9KTt1LnJlbmRlclN0eWxlcyhlLHMsbixvKX19cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmT2UoYSksci5tZW1vKGwpfWZ1bmN0aW9uIFVlKGUpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJlwiUmVhY3ROYXRpdmVcIj09PW5hdmlnYXRvci5wcm9kdWN0JiZjb25zb2xlLndhcm4oXCJga2V5ZnJhbWVzYCBjYW5ub3QgYmUgdXNlZCBvbiBSZWFjdE5hdGl2ZSwgb25seSBvbiB0aGUgd2ViLiBUbyBkbyBhbmltYXRpb24gaW4gUmVhY3ROYXRpdmUgcGxlYXNlIHVzZSBBbmltYXRlZC5cIik7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3ZhciBvPUNlLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KG4pKS5qb2luKFwiXCIpLHM9eGUobyk7cmV0dXJuIG5ldyB2ZShzLG8pfXZhciBKZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2YXIgZT10aGlzO3RoaXMuX2VtaXRTaGVldENTUz1mdW5jdGlvbigpe3ZhciB0PWUuaW5zdGFuY2UudG9TdHJpbmcoKTtpZighdClyZXR1cm5cIlwiO3ZhciBuPXEoKTtyZXR1cm5cIjxzdHlsZSBcIitbbiYmJ25vbmNlPVwiJytuKydcIicsQSsnPVwidHJ1ZVwiJywnZGF0YS1zdHlsZWQtdmVyc2lvbj1cIjUuMy45XCInXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIikrXCI+XCIrdCtcIjwvc3R5bGU+XCJ9LHRoaXMuZ2V0U3R5bGVUYWdzPWZ1bmN0aW9uKCl7cmV0dXJuIGUuc2VhbGVkP2ooMik6ZS5fZW1pdFNoZWV0Q1NTKCl9LHRoaXMuZ2V0U3R5bGVFbGVtZW50PWZ1bmN0aW9uKCl7dmFyIHQ7aWYoZS5zZWFsZWQpcmV0dXJuIGooMik7dmFyIG49KCh0PXt9KVtBXT1cIlwiLHRbXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCJdPVwiNS4zLjlcIix0LmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXtfX2h0bWw6ZS5pbnN0YW5jZS50b1N0cmluZygpfSx0KSxvPXEoKTtyZXR1cm4gbyYmKG4ubm9uY2U9byksW3IuY3JlYXRlRWxlbWVudChcInN0eWxlXCIsdih7fSxuLHtrZXk6XCJzYy0wLTBcIn0pKV19LHRoaXMuc2VhbD1mdW5jdGlvbigpe2Uuc2VhbGVkPSEwfSx0aGlzLmluc3RhbmNlPW5ldyBaKHtpc1NlcnZlcjohMH0pLHRoaXMuc2VhbGVkPSExfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNvbGxlY3RTdHlsZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuc2VhbGVkP2ooMik6ci5jcmVhdGVFbGVtZW50KHllLHtzaGVldDp0aGlzLmluc3RhbmNlfSxlKX0sdC5pbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW09ZnVuY3Rpb24oZSl7cmV0dXJuIGooMyl9LGV9KCksWGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ci5mb3J3YXJkUmVmKChmdW5jdGlvbih0LG4pe3ZhciBvPXMoR2UpLGk9ZS5kZWZhdWx0UHJvcHMsYT1SZSh0LG8saSk7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdm9pZCAwPT09YSYmY29uc29sZS53YXJuKCdbd2l0aFRoZW1lXSBZb3UgYXJlIG5vdCB1c2luZyBhIFRoZW1lUHJvdmlkZXIgbm9yIHBhc3NpbmcgYSB0aGVtZSBwcm9wIG9yIGEgdGhlbWUgaW4gZGVmYXVsdFByb3BzIGluIGNvbXBvbmVudCBjbGFzcyBcIicrXyhlKSsnXCInKSxyLmNyZWF0ZUVsZW1lbnQoZSx2KHt9LHQse3RoZW1lOmEscmVmOm59KSl9KSk7cmV0dXJuIHkodCxlKSx0LmRpc3BsYXlOYW1lPVwiV2l0aFRoZW1lKFwiK18oZSkrXCIpXCIsdH0sWmU9ZnVuY3Rpb24oKXtyZXR1cm4gcyhHZSl9LEtlPXtTdHlsZVNoZWV0OlosbWFzdGVyU2hlZXQ6aGV9O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJlwiUmVhY3ROYXRpdmVcIj09PW5hdmlnYXRvci5wcm9kdWN0JiZjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHlvdSd2ZSBpbXBvcnRlZCAnc3R5bGVkLWNvbXBvbmVudHMnIG9uIFJlYWN0IE5hdGl2ZS5cXG5QZXJoYXBzIHlvdSdyZSBsb29raW5nIHRvIGltcG9ydCAnc3R5bGVkLWNvbXBvbmVudHMvbmF0aXZlJz9cXG5SZWFkIG1vcmUgYWJvdXQgdGhpcyBhdCBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9iYXNpY3MjcmVhY3QtbmF0aXZlXCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidGVzdFwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJih3aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXT13aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXXx8MCwxPT09d2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl0mJmNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mICdzdHlsZWQtY29tcG9uZW50cycgaW5pdGlhbGl6ZWQgaW4gdGhpcyBhcHBsaWNhdGlvbi4gVGhpcyBtYXkgY2F1c2UgZHluYW1pYyBzdHlsZXMgdG8gbm90IHJlbmRlciBwcm9wZXJseSwgZXJyb3JzIGR1cmluZyB0aGUgcmVoeWRyYXRpb24gcHJvY2VzcywgYSBtaXNzaW5nIHRoZW1lIHByb3AsIGFuZCBtYWtlcyB5b3VyIGFwcGxpY2F0aW9uIGJpZ2dlciB3aXRob3V0IGdvb2QgcmVhc29uLlxcblxcblNlZSBodHRwczovL3MtYy5zaC8yQkFYemVkIGZvciBtb3JlIGluZm8uXCIpLHdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdKz0xKTtleHBvcnQgZGVmYXVsdCBIZTtleHBvcnR7SmUgYXMgU2VydmVyU3R5bGVTaGVldCxsZSBhcyBTdHlsZVNoZWV0Q29uc3VtZXIsdWUgYXMgU3R5bGVTaGVldENvbnRleHQseWUgYXMgU3R5bGVTaGVldE1hbmFnZXIsTGUgYXMgVGhlbWVDb25zdW1lcixHZSBhcyBUaGVtZUNvbnRleHQsRmUgYXMgVGhlbWVQcm92aWRlcixLZSBhcyBfX1BSSVZBVEVfXyxXZSBhcyBjcmVhdGVHbG9iYWxTdHlsZSxDZSBhcyBjc3MsTiBhcyBpc1N0eWxlZENvbXBvbmVudCxVZSBhcyBrZXlmcmFtZXMsWmUgYXMgdXNlVGhlbWUsQyBhcyB2ZXJzaW9uLFhlIGFzIHdpdGhUaGVtZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcy5tYXBcbiIsInZhciBfX21ha2VUZW1wbGF0ZU9iamVjdCA9ICh0aGlzICYmIHRoaXMuX19tYWtlVGVtcGxhdGVPYmplY3QpIHx8IGZ1bmN0aW9uIChjb29rZWQsIHJhdykge1xuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gICAgcmV0dXJuIGNvb2tlZDtcbn07XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmV4cG9ydCB2YXIgU3R5bGVkQnV0dG9uID0gc3R5bGVkLmJ1dHRvbih0ZW1wbGF0ZU9iamVjdF8xIHx8ICh0ZW1wbGF0ZU9iamVjdF8xID0gX19tYWtlVGVtcGxhdGVPYmplY3QoW1wiXFxuXFx0bWluLXdpZHRoOiBcIiwgXCJweDtcXG5cXHRtaW4taGVpZ2h0OiBcIiwgXCJweDtcXG5cXG5cXHRib3JkZXItcmFkaXVzOiBcIiwgXCJweDtcXG5cXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiBcIiwgXCI7XFxuXFx0Y29sb3I6IFwiLCBcIjtcXG5cXG5cXHRmb250LXNpemU6IFwiLCBcInB4O1xcblxcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG5cXHRjdXJzb3I6IHBvaW50ZXI7XFxuXFxuXFx0dHJhbnNpdGlvbjogXCIsIFwiO1xcblxcblxcdCY6aG92ZXIge1xcblxcdFxcdHRyYW5zZm9ybTogc2NhbGUoMS4wMSk7XFxuXFx0XFx0YmFja2dyb3VuZC1jb2xvcjogXCIsIFwiO1xcblxcdH1cXG5cIl0sIFtcIlxcblxcdG1pbi13aWR0aDogXCIsIFwicHg7XFxuXFx0bWluLWhlaWdodDogXCIsIFwicHg7XFxuXFxuXFx0Ym9yZGVyLXJhZGl1czogXCIsIFwicHg7XFxuXFxuXFx0YmFja2dyb3VuZC1jb2xvcjogXCIsIFwiO1xcblxcdGNvbG9yOiBcIiwgXCI7XFxuXFxuXFx0Zm9udC1zaXplOiBcIiwgXCJweDtcXG5cXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFx0Y3Vyc29yOiBwb2ludGVyO1xcblxcblxcdHRyYW5zaXRpb246IFwiLCBcIjtcXG5cXG5cXHQmOmhvdmVyIHtcXG5cXHRcXHR0cmFuc2Zvcm06IHNjYWxlKDEuMDEpO1xcblxcdFxcdGJhY2tncm91bmQtY29sb3I6IFwiLCBcIjtcXG5cXHR9XFxuXCJdKSksIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS53aWR0aFswXTtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5oZWlnaHRbMF07XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuYm9yZGVyUmFkaXVzWzFdO1xufSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmNvbG9ycy5ibGFjaztcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5jb2xvcnMud2hpdGU7XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuZm9udFNpemVbMl07XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUudHJhbnNpdGlvbi5saWdodDtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5jb2xvcnMubGlnaHRCbGFjaztcbn0pO1xudmFyIHRlbXBsYXRlT2JqZWN0XzE7XG4iLCJleHBvcnQgdmFyIExPQURJTkdfU1RBVFVTO1xuKGZ1bmN0aW9uIChMT0FESU5HX1NUQVRVUykge1xuICAgIExPQURJTkdfU1RBVFVTW1wiSURMRVwiXSA9IFwiaWRsZVwiO1xuICAgIExPQURJTkdfU1RBVFVTW1wiRVJST1JcIl0gPSBcImVycm9yXCI7XG4gICAgTE9BRElOR19TVEFUVVNbXCJTVUNDRVNTXCJdID0gXCJzdWNjZXNzXCI7XG4gICAgTE9BRElOR19TVEFUVVNbXCJMT0FESU5HXCJdID0gXCJsb2FkaW5nXCI7XG59KShMT0FESU5HX1NUQVRVUyB8fCAoTE9BRElOR19TVEFUVVMgPSB7fSkpO1xuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBTdHlsZWRCdXR0b24gfSBmcm9tICcuL3N0eWxlZCc7XG5leHBvcnQgdmFyIEJ1dHRvbiA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBvbkNsaWNrID0gX2Eub25DbGljaywgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImNoaWxkcmVuXCIsIFwib25DbGlja1wiXSk7XG4gICAgcmV0dXJuIChfanN4KFN0eWxlZEJ1dHRvbiwgX19hc3NpZ24oe30sIHByb3BzLCB7IG9uQ2xpY2s6IG9uQ2xpY2sgfSwgeyBjaGlsZHJlbjogY2hpbGRyZW4gfSkpKTtcbn07XG4iLCJ2YXIgX2EsIF9iO1xuZXhwb3J0IHZhciBjYWxlbmRhckFwaUNvbmZpZyA9IHtcbiAgICBjbGllbnRJZDogKF9hID0gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0dPT0dMRUNMSUVOVF9JRCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycsXG4gICAgYXBpS2V5OiAoX2IgPSBwcm9jZXNzLmVudi5SRUFDVF9BUFBfR09PR0xFQ0FMRU5EQVJfQVBJX0tFWSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJycsXG4gICAgc2NvcGU6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2NhbGVuZGFyLmV2ZW50cycsXG4gICAgZGlzY292ZXJ5RG9jczogWydodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9kaXNjb3ZlcnkvdjEvYXBpcy9jYWxlbmRhci92My9yZXN0J10sXG59O1xuIiwiZXhwb3J0IHZhciBjYWxlbmRhckV2ZW50c0NvbmZpZyA9IHtcbiAgICBjYWxlbmRhcklkOiAncHJpbWFyeScsXG4gICAgdGltZU1pbjogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIHNob3dEZWxldGVkOiBmYWxzZSxcbiAgICBzaW5nbGVFdmVudHM6IHRydWUsXG4gICAgbWF4UmVzdWx0czogMTAsXG4gICAgb3JkZXJCeTogJ3N0YXJ0VGltZScsXG59O1xuIiwiZXhwb3J0IHZhciB0aW1lTG9jYWxlT3B0aW9ucyA9IHtcbiAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgbWludXRlOiAnbnVtZXJpYycsXG4gICAgc2Vjb25kOiAnbnVtZXJpYycsXG59O1xuZXhwb3J0IHZhciBhZHZhbmNlZERhdGVMb2NhbGVPcHRpb25zID0ge1xuICAgIHdlZWtkYXk6ICdsb25nJyxcbiAgICBtb250aDogJ2xvbmcnLFxuICAgIHllYXI6ICdudW1lcmljJyxcbiAgICBkYXk6ICdudW1lcmljJyxcbn07XG5leHBvcnQgdmFyIGRheU9mV2Vla0xvY2FsZU9wdGlvbiA9IHtcbiAgICB3ZWVrZGF5OiAnbG9uZycsXG59O1xuZXhwb3J0IHZhciBISE1NTG9jYWxlT3B0aW9ucyA9IHtcbiAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgbWludXRlOiAnbnVtZXJpYycsXG59O1xuIiwiZXhwb3J0IHZhciBTUElOTkVSX1NJWkU7XG4oZnVuY3Rpb24gKFNQSU5ORVJfU0laRSkge1xuICAgIFNQSU5ORVJfU0laRVtTUElOTkVSX1NJWkVbXCJTTUFMTFwiXSA9IDE2XSA9IFwiU01BTExcIjtcbiAgICBTUElOTkVSX1NJWkVbU1BJTk5FUl9TSVpFW1wiTUVESVVNXCJdID0gMzJdID0gXCJNRURJVU1cIjtcbiAgICBTUElOTkVSX1NJWkVbU1BJTk5FUl9TSVpFW1wiTEFSR0VcIl0gPSA2NF0gPSBcIkxBUkdFXCI7XG59KShTUElOTkVSX1NJWkUgfHwgKFNQSU5ORVJfU0laRSA9IHt9KSk7XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZDdhMzUyMzI3NDMzOWUzOGQ3MDQ4N2U2MjA0YzVhYzEuanBnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjMzYTY0MGU4YjQxNDgwMjU4NjI1YThlODM5ZGFlOTYyLmpwZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhYWQwZTIzODY4ZGQxYjJlNTdlMDdiZTM0Y2QzODRjYy5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiN2Y3OTc1NDJhZmM1OWE3ZTk4ZWY3MTVjMjg5Yzc1OGEuanBnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjk1MTBmZGQwYzFjMmVkMDFmOTViOWY2ZGE4NzI0Zjc3LmpwZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlZGE1OWU0MzlhYzI3YWFjZDg4YmE3NTk0YTQ2MTc5ZS5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjc5ODdmMDE0Y2IzMWRkYmRjMWQ4NDg0N2U0ZTJkODQuanBnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjIxZDAxNjZkNTU2YjQ1ZjlkMGZiYjY3YmQ1YzMzNzE1LnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlNjY2M2FiNjMyMmE1ZWFlYzFkNmQ1ZDJiMjYyNzk1ZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiN2ViNzRjNGUwYTk5ZWViZDRmOWY3OTg4NGYzM2Q2MjkucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjJkZWE0ZjBjNTBlMmM4YjczMTlhOTUyYjIwMDlkNWRmLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4NWJhODc5NThhODI4YTIxYmE0YjRjMTljY2U2OWMzMy5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiM2IyZTM0MjZlMzBjZGM1MTZiM2Q5MTI2M2VkZWU0NDgucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImVhYTYzMDllN2UwMGY4YTQ2MDYwZTAxOWM0YzJhN2ZkLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlNzhjOGM1NjYyN2U2OTdmMTE3NGY5Mjg3OTIyYmNkYS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMWNlNTc4Y2EwZWRiZWQzZTg4NjcwMWM3NGIyMDc4YWQucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjgyNmQwMTExYWQzZDRmYjlkNmVmNGM0YTU4MjQ0MTA3LnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4MjZkMDExMWFkM2Q0ZmI5ZDZlZjRjNGE1ODI0NDEwNy5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjMwMDRjZjhiYzYwZGJiODlkZjMwMWZjZTJjODEzYzAucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjhhZjg0NGY1MGIxYmVkNGRkMzE1NzIyZGZmNzg2YmNkLmdpZlwiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYjI3NGJkMmM3MzdlMzkzZjI0ODEwNGIzNDE3MGJkNi5wbmdcIjsiLCJpbXBvcnQgeyBjbGVhclNreURheUljb24sIGZld0Nsb3Vkc0RheUljb24sIG1pc3RJY29uLCByYWluRGF5SWNvbiwgc2hvd2VyUmFpbkljb24sIHNub3dJY29uLCB0aHVuZGVyc3Rvcm1JY29uLCB9IGZyb20gJ0Bhc3NldHMnO1xuZXhwb3J0IHZhciB3ZWF0aGVyU3RhdHVzZXMgPSB7XG4gICAgMDoge1xuICAgICAgICBpY29uOiBjbGVhclNreURheUljb24sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQ2xlYXIgc2t5JyxcbiAgICB9LFxuICAgIDE6IHtcbiAgICAgICAgaWNvbjogZmV3Q2xvdWRzRGF5SWNvbixcbiAgICAgICAgZGVzY3JpcHRpb246ICdNYWlubHkgY2xlYXInLFxuICAgIH0sXG4gICAgMjoge1xuICAgICAgICBpY29uOiBmZXdDbG91ZHNEYXlJY29uLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1BhcnRseSBjbG91ZHknLFxuICAgIH0sXG4gICAgMzoge1xuICAgICAgICBpY29uOiBmZXdDbG91ZHNEYXlJY29uLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ092ZXJjYXN0JyxcbiAgICB9LFxuICAgIDQ1OiB7XG4gICAgICAgIGljb246IG1pc3RJY29uLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0ZvZycsXG4gICAgfSxcbiAgICA0ODoge1xuICAgICAgICBpY29uOiBtaXN0SWNvbixcbiAgICAgICAgZGVzY3JpcHRpb246ICdkZXBvc2l0aW5nIHJpbWUgZm9nJyxcbiAgICB9LFxuICAgIDUxOiB7XG4gICAgICAgIGljb246IHJhaW5EYXlJY29uLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0RyaXp6bGUgTGlnaHQnLFxuICAgIH0sXG4gICAgNTM6IHtcbiAgICAgICAgaWNvbjogcmFpbkRheUljb24sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnRHJpenpsZSBNb2RlcmF0ZScsXG4gICAgfSxcbiAgICA1NToge1xuICAgICAgICBpY29uOiBzaG93ZXJSYWluSWNvbixcbiAgICAgICAgZGVzY3JpcHRpb246ICdEcml6emxlIEludGVzaXR5JyxcbiAgICB9LFxuICAgIDU2OiB7XG4gICAgICAgIGljb246IHJhaW5EYXlJY29uLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0ZyZWV6aW5nIERyaXp6bGUgTGlnaHQnLFxuICAgIH0sXG4gICAgNTc6IHtcbiAgICAgICAgaWNvbjogc2hvd2VyUmFpbkljb24sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnRnJlZXppbmcgRHJpenpsZSBJbnRlbnNpdHknLFxuICAgIH0sXG4gICAgNjE6IHtcbiAgICAgICAgaWNvbjogcmFpbkRheUljb24sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnU2xpZ2h0IHJhaW4nLFxuICAgIH0sXG4gICAgNjM6IHtcbiAgICAgICAgaWNvbjogc2hvd2VyUmFpbkljb24sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTW9kZXJhdGUgcmFpbicsXG4gICAgfSxcbiAgICA2NToge1xuICAgICAgICBpY29uOiBzaG93ZXJSYWluSWNvbixcbiAgICAgICAgZGVzY3JpcHRpb246ICdIZWF2eSBpbnRlbnNpdHkgcmFpbicsXG4gICAgfSxcbiAgICA2Njoge1xuICAgICAgICBpY29uOiByYWluRGF5SWNvbixcbiAgICAgICAgZGVzY3JpcHRpb246ICdMaWdodCBmcmVlemluZyBSYWluJyxcbiAgICB9LFxuICAgIDY3OiB7XG4gICAgICAgIGljb246IHNob3dlclJhaW5JY29uLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0hlYXZ5IGludGVuc2l0eSBmcmVlemluZyByYWluJyxcbiAgICB9LFxuICAgIDcxOiB7XG4gICAgICAgIGljb246IHNub3dJY29uLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1NsaWdodCBzbm93IGZhbGwnLFxuICAgIH0sXG4gICAgNzM6IHtcbiAgICAgICAgaWNvbjogc25vd0ljb24sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTW9kZXJhdGUgc25vdyBmYWxsJyxcbiAgICB9LFxuICAgIDc1OiB7XG4gICAgICAgIGljb246IHNub3dJY29uLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0hlYXZ5IGludGVuc2l0eSBzbm93IGZhbGwnLFxuICAgIH0sXG4gICAgNzc6IHtcbiAgICAgICAgaWNvbjogc25vd0ljb24sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnU25vdyBncmFpbnMnLFxuICAgIH0sXG4gICAgODA6IHtcbiAgICAgICAgaWNvbjogc2hvd2VyUmFpbkljb24sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnU2xpZ2h0IHJhaW4gc2hvd2VycycsXG4gICAgfSxcbiAgICA4MToge1xuICAgICAgICBpY29uOiBzaG93ZXJSYWluSWNvbixcbiAgICAgICAgZGVzY3JpcHRpb246ICdNb2RlcmF0ZSByYWluIHNob3dlcnMnLFxuICAgIH0sXG4gICAgODI6IHtcbiAgICAgICAgaWNvbjogc2hvd2VyUmFpbkljb24sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSGVhdnkgaW50ZW5zaXR5IHJhaW4gc2hvd2VycycsXG4gICAgfSxcbiAgICA4NToge1xuICAgICAgICBpY29uOiBzbm93SWNvbixcbiAgICAgICAgZGVzY3JpcHRpb246ICdTbGlnaHQgc25vdyBzaG93ZXInLFxuICAgIH0sXG4gICAgODY6IHtcbiAgICAgICAgaWNvbjogc25vd0ljb24sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSGVhdnkgc25vdyBzaG93ZXInLFxuICAgIH0sXG4gICAgOTU6IHtcbiAgICAgICAgaWNvbjogdGh1bmRlcnN0b3JtSWNvbixcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaHVuZGVyc3Rvcm0nLFxuICAgIH0sXG4gICAgOTY6IHtcbiAgICAgICAgaWNvbjogdGh1bmRlcnN0b3JtSWNvbixcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaHVuZGVyc3Rvcm0gd2l0aCBzbGlnaHQgaGFpbCcsXG4gICAgfSxcbiAgICA5OToge1xuICAgICAgICBpY29uOiB0aHVuZGVyc3Rvcm1JY29uLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1RodW5kZXJzdG9ybSB3aXRoIGhlYXZ5IGhhaWwnLFxuICAgIH0sXG59O1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdhcGkgfSBmcm9tICdnYXBpLXNjcmlwdCc7XG5pbXBvcnQgeyBjYWxlbmRhckFwaUNvbmZpZywgY2FsZW5kYXJFdmVudHNDb25maWcgfSBmcm9tICdAY29uc3RhbnRzJztcbmV4cG9ydCB2YXIgdXNlQ2FsZW5kYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9hID0gdXNlU3RhdGUoZmFsc2UpLCBpc0F1dGggPSBfYVswXSwgc2V0SXNBdXRoID0gX2FbMV07XG4gICAgdmFyIF9iID0gdXNlU3RhdGUoW10pLCBldmVudHMgPSBfYlswXSwgc2V0RXZlbnRzID0gX2JbMV07XG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2FwaS5sb2FkKCdjbGllbnQ6YXV0aDInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnYXBpLmNsaWVudC5pbml0KGNhbGVuZGFyQXBpQ29uZmlnKTtcbiAgICAgICAgfSk7XG4gICAgfSwgW10pO1xuICAgIHZhciBoYW5kbGVBdXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBnYXBpLmxvYWQoJ2NsaWVudDphdXRoMicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UsIGV2ZW50cztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgZ2FwaS5hdXRoMi5nZXRBdXRoSW5zdGFuY2UoKS5zaWduSW4oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldElzQXV0aCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdhcGkuY2xpZW50LmNhbGVuZGFyLmV2ZW50cy5saXN0KGNhbGVuZGFyRXZlbnRzQ29uZmlnKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gcmVzcG9uc2UucmVzdWx0Lml0ZW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXZlbnRzKGV2ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pOyB9KTtcbiAgICB9O1xuICAgIHZhciBoYW5kbGVTaWduT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBnYXBpLmxvYWQoJ2NsaWVudDphdXRoMicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdhcGkuYXV0aDIuZ2V0QXV0aEluc3RhbmNlKCkuc2lnbk91dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXNBdXRoKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEV2ZW50cyhbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pOyB9KTtcbiAgICB9O1xuICAgIHJldHVybiB7IGlzQXV0aDogaXNBdXRoLCBldmVudHM6IGV2ZW50cywgaGFuZGxlQXV0aDogaGFuZGxlQXV0aCwgaGFuZGxlU2lnbk91dDogaGFuZGxlU2lnbk91dCB9O1xufTtcbiIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIHVzZUN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgX2EgPSB1c2VTdGF0ZShudWxsKSwgbG9jYXRpb24gPSBfYVswXSwgc2V0TG9jYXRpb24gPSBfYVsxXTtcbiAgICB2YXIgX2IgPSB1c2VTdGF0ZShudWxsKSwgZXJyb3IgPSBfYlswXSwgc2V0RXJyb3IgPSBfYlsxXTtcbiAgICB2YXIgaGFuZGxlU3VjY2VzcyA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgY29vcmRzID0gX2EuY29vcmRzO1xuICAgICAgICB2YXIgbGF0aXR1ZGUgPSBjb29yZHMubGF0aXR1ZGUsIGxvbmdpdHVkZSA9IGNvb3Jkcy5sb25naXR1ZGU7XG4gICAgICAgIHNldExvY2F0aW9uKHtcbiAgICAgICAgICAgIGxhdDogbGF0aXR1ZGUsXG4gICAgICAgICAgICBsb246IGxvbmdpdHVkZSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgc2V0RXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihoYW5kbGVTdWNjZXNzLCBoYW5kbGVFcnJvciwgb3B0aW9ucyk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiB7IGxvY2F0aW9uOiBsb2NhdGlvbiwgZXJyb3I6IGVycm9yIH07XG59O1xuIiwiZXhwb3J0IHZhciBLRVlfUFJFRklYID0gJ3BlcnNpc3Q6JztcbmV4cG9ydCB2YXIgRkxVU0ggPSAncGVyc2lzdC9GTFVTSCc7XG5leHBvcnQgdmFyIFJFSFlEUkFURSA9ICdwZXJzaXN0L1JFSFlEUkFURSc7XG5leHBvcnQgdmFyIFBBVVNFID0gJ3BlcnNpc3QvUEFVU0UnO1xuZXhwb3J0IHZhciBQRVJTSVNUID0gJ3BlcnNpc3QvUEVSU0lTVCc7XG5leHBvcnQgdmFyIFBVUkdFID0gJ3BlcnNpc3QvUFVSR0UnO1xuZXhwb3J0IHZhciBSRUdJU1RFUiA9ICdwZXJzaXN0L1JFR0lTVEVSJztcbmV4cG9ydCB2YXIgREVGQVVMVF9WRVJTSU9OID0gLTE7IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLypcbiAgYXV0b01lcmdlTGV2ZWwxOiBcbiAgICAtIG1lcmdlcyAxIGxldmVsIG9mIHN1YnN0YXRlXG4gICAgLSBza2lwcyBzdWJzdGF0ZSBpZiBhbHJlYWR5IG1vZGlmaWVkXG4qL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXV0b01lcmdlTGV2ZWwxKGluYm91bmRTdGF0ZSwgb3JpZ2luYWxTdGF0ZSwgcmVkdWNlZFN0YXRlLCBfcmVmKSB7XG4gIHZhciBkZWJ1ZyA9IF9yZWYuZGVidWc7XG5cbiAgdmFyIG5ld1N0YXRlID0gX29iamVjdFNwcmVhZCh7fSwgcmVkdWNlZFN0YXRlKTsgLy8gb25seSByZWh5ZHJhdGUgaWYgaW5ib3VuZFN0YXRlIGV4aXN0cyBhbmQgaXMgYW4gb2JqZWN0XG5cblxuICBpZiAoaW5ib3VuZFN0YXRlICYmIF90eXBlb2YoaW5ib3VuZFN0YXRlKSA9PT0gJ29iamVjdCcpIHtcbiAgICBPYmplY3Qua2V5cyhpbmJvdW5kU3RhdGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLy8gaWdub3JlIF9wZXJzaXN0IGRhdGFcbiAgICAgIGlmIChrZXkgPT09ICdfcGVyc2lzdCcpIHJldHVybjsgLy8gaWYgcmVkdWNlciBtb2RpZmllcyBzdWJzdGF0ZSwgc2tpcCBhdXRvIHJlaHlkcmF0aW9uXG5cbiAgICAgIGlmIChvcmlnaW5hbFN0YXRlW2tleV0gIT09IHJlZHVjZWRTdGF0ZVtrZXldKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRlYnVnKSBjb25zb2xlLmxvZygncmVkdXgtcGVyc2lzdC9zdGF0ZVJlY29uY2lsZXI6IHN1YiBzdGF0ZSBmb3Iga2V5IGAlc2AgbW9kaWZpZWQsIHNraXBwaW5nLicsIGtleSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gb3RoZXJ3aXNlIGhhcmQgc2V0IHRoZSBuZXcgdmFsdWVcblxuXG4gICAgICBuZXdTdGF0ZVtrZXldID0gaW5ib3VuZFN0YXRlW2tleV07XG4gICAgfSk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkZWJ1ZyAmJiBpbmJvdW5kU3RhdGUgJiYgX3R5cGVvZihpbmJvdW5kU3RhdGUpID09PSAnb2JqZWN0JykgY29uc29sZS5sb2coXCJyZWR1eC1wZXJzaXN0L3N0YXRlUmVjb25jaWxlcjogcmVoeWRyYXRlZCBrZXlzICdcIi5jb25jYXQoT2JqZWN0LmtleXMoaW5ib3VuZFN0YXRlKS5qb2luKCcsICcpLCBcIidcIikpO1xuICByZXR1cm4gbmV3U3RhdGU7XG59IiwiaW1wb3J0IHsgS0VZX1BSRUZJWCwgUkVIWURSQVRFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuLy8gQFRPRE8gcmVtb3ZlIG9uY2UgZmxvdyA8IDAuNjMgc3VwcG9ydCBpcyBubyBsb25nZXIgcmVxdWlyZWQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQZXJzaXN0b2lkKGNvbmZpZykge1xuICAvLyBkZWZhdWx0c1xuICB2YXIgYmxhY2tsaXN0ID0gY29uZmlnLmJsYWNrbGlzdCB8fCBudWxsO1xuICB2YXIgd2hpdGVsaXN0ID0gY29uZmlnLndoaXRlbGlzdCB8fCBudWxsO1xuICB2YXIgdHJhbnNmb3JtcyA9IGNvbmZpZy50cmFuc2Zvcm1zIHx8IFtdO1xuICB2YXIgdGhyb3R0bGUgPSBjb25maWcudGhyb3R0bGUgfHwgMDtcbiAgdmFyIHN0b3JhZ2VLZXkgPSBcIlwiLmNvbmNhdChjb25maWcua2V5UHJlZml4ICE9PSB1bmRlZmluZWQgPyBjb25maWcua2V5UHJlZml4IDogS0VZX1BSRUZJWCkuY29uY2F0KGNvbmZpZy5rZXkpO1xuICB2YXIgc3RvcmFnZSA9IGNvbmZpZy5zdG9yYWdlO1xuICB2YXIgc2VyaWFsaXplO1xuXG4gIGlmIChjb25maWcuc2VyaWFsaXplID09PSBmYWxzZSkge1xuICAgIHNlcmlhbGl6ZSA9IGZ1bmN0aW9uIHNlcmlhbGl6ZSh4KSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcuc2VyaWFsaXplID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2VyaWFsaXplID0gY29uZmlnLnNlcmlhbGl6ZTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemUgPSBkZWZhdWx0U2VyaWFsaXplO1xuICB9XG5cbiAgdmFyIHdyaXRlRmFpbEhhbmRsZXIgPSBjb25maWcud3JpdGVGYWlsSGFuZGxlciB8fCBudWxsOyAvLyBpbml0aWFsaXplIHN0YXRlZnVsIHZhbHVlc1xuXG4gIHZhciBsYXN0U3RhdGUgPSB7fTtcbiAgdmFyIHN0YWdlZFN0YXRlID0ge307XG4gIHZhciBrZXlzVG9Qcm9jZXNzID0gW107XG4gIHZhciB0aW1lSXRlcmF0b3IgPSBudWxsO1xuICB2YXIgd3JpdGVQcm9taXNlID0gbnVsbDtcblxuICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHN0YXRlKSB7XG4gICAgLy8gYWRkIGFueSBjaGFuZ2VkIGtleXMgdG8gdGhlIHF1ZXVlXG4gICAgT2JqZWN0LmtleXMoc3RhdGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCFwYXNzV2hpdGVsaXN0QmxhY2tsaXN0KGtleSkpIHJldHVybjsgLy8gaXMga2V5c3BhY2UgaWdub3JlZD8gbm9vcFxuXG4gICAgICBpZiAobGFzdFN0YXRlW2tleV0gPT09IHN0YXRlW2tleV0pIHJldHVybjsgLy8gdmFsdWUgdW5jaGFuZ2VkPyBub29wXG5cbiAgICAgIGlmIChrZXlzVG9Qcm9jZXNzLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHJldHVybjsgLy8gaXMga2V5IGFscmVhZHkgcXVldWVkPyBub29wXG5cbiAgICAgIGtleXNUb1Byb2Nlc3MucHVzaChrZXkpOyAvLyBhZGQga2V5IHRvIHF1ZXVlXG4gICAgfSk7IC8vaWYgYW55IGtleSBpcyBtaXNzaW5nIGluIHRoZSBuZXcgc3RhdGUgd2hpY2ggd2FzIHByZXNlbnQgaW4gdGhlIGxhc3RTdGF0ZSxcbiAgICAvL2FkZCBpdCBmb3IgcHJvY2Vzc2luZyB0b29cblxuICAgIE9iamVjdC5rZXlzKGxhc3RTdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoc3RhdGVba2V5XSA9PT0gdW5kZWZpbmVkICYmIHBhc3NXaGl0ZWxpc3RCbGFja2xpc3Qoa2V5KSAmJiBrZXlzVG9Qcm9jZXNzLmluZGV4T2Yoa2V5KSA9PT0gLTEgJiYgbGFzdFN0YXRlW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlzVG9Qcm9jZXNzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9KTsgLy8gc3RhcnQgdGhlIHRpbWUgaXRlcmF0b3IgaWYgbm90IHJ1bm5pbmcgKHJlYWQ6IHRocm90dGxlKVxuXG4gICAgaWYgKHRpbWVJdGVyYXRvciA9PT0gbnVsbCkge1xuICAgICAgdGltZUl0ZXJhdG9yID0gc2V0SW50ZXJ2YWwocHJvY2Vzc05leHRLZXksIHRocm90dGxlKTtcbiAgICB9XG5cbiAgICBsYXN0U3RhdGUgPSBzdGF0ZTtcbiAgfTtcblxuICBmdW5jdGlvbiBwcm9jZXNzTmV4dEtleSgpIHtcbiAgICBpZiAoa2V5c1RvUHJvY2Vzcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmICh0aW1lSXRlcmF0b3IpIGNsZWFySW50ZXJ2YWwodGltZUl0ZXJhdG9yKTtcbiAgICAgIHRpbWVJdGVyYXRvciA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IGtleXNUb1Byb2Nlc3Muc2hpZnQoKTtcbiAgICB2YXIgZW5kU3RhdGUgPSB0cmFuc2Zvcm1zLnJlZHVjZShmdW5jdGlvbiAoc3ViU3RhdGUsIHRyYW5zZm9ybWVyKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtZXIuaW4oc3ViU3RhdGUsIGtleSwgbGFzdFN0YXRlKTtcbiAgICB9LCBsYXN0U3RhdGVba2V5XSk7XG5cbiAgICBpZiAoZW5kU3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RhZ2VkU3RhdGVba2V5XSA9IHNlcmlhbGl6ZShlbmRTdGF0ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcigncmVkdXgtcGVyc2lzdC9jcmVhdGVQZXJzaXN0b2lkOiBlcnJvciBzZXJpYWxpemluZyBzdGF0ZScsIGVycik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vaWYgdGhlIGVuZFN0YXRlIGlzIHVuZGVmaW5lZCwgbm8gbmVlZCB0byBwZXJzaXN0IHRoZSBleGlzdGluZyBzZXJpYWxpemVkIGNvbnRlbnRcbiAgICAgIGRlbGV0ZSBzdGFnZWRTdGF0ZVtrZXldO1xuICAgIH1cblxuICAgIGlmIChrZXlzVG9Qcm9jZXNzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgd3JpdGVTdGFnZWRTdGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHdyaXRlU3RhZ2VkU3RhdGUoKSB7XG4gICAgLy8gY2xlYW51cCBhbnkgcmVtb3ZlZCBrZXlzIGp1c3QgYmVmb3JlIHdyaXRlLlxuICAgIE9iamVjdC5rZXlzKHN0YWdlZFN0YXRlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChsYXN0U3RhdGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlbGV0ZSBzdGFnZWRTdGF0ZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdyaXRlUHJvbWlzZSA9IHN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5LCBzZXJpYWxpemUoc3RhZ2VkU3RhdGUpKS5jYXRjaChvbldyaXRlRmFpbCk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXNzV2hpdGVsaXN0QmxhY2tsaXN0KGtleSkge1xuICAgIGlmICh3aGl0ZWxpc3QgJiYgd2hpdGVsaXN0LmluZGV4T2Yoa2V5KSA9PT0gLTEgJiYga2V5ICE9PSAnX3BlcnNpc3QnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGJsYWNrbGlzdCAmJiBibGFja2xpc3QuaW5kZXhPZihrZXkpICE9PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Xcml0ZUZhaWwoZXJyKSB7XG4gICAgLy8gQFRPRE8gYWRkIGZhaWwgaGFuZGxlcnMgKHR5cGljYWxseSBzdG9yYWdlIGZ1bGwpXG4gICAgaWYgKHdyaXRlRmFpbEhhbmRsZXIpIHdyaXRlRmFpbEhhbmRsZXIoZXJyKTtcblxuICAgIGlmIChlcnIgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc3RvcmluZyBkYXRhJywgZXJyKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICB3aGlsZSAoa2V5c1RvUHJvY2Vzcy5sZW5ndGggIT09IDApIHtcbiAgICAgIHByb2Nlc3NOZXh0S2V5KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdyaXRlUHJvbWlzZSB8fCBQcm9taXNlLnJlc29sdmUoKTtcbiAgfTsgLy8gcmV0dXJuIGBwZXJzaXN0b2lkYFxuXG5cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICBmbHVzaDogZmx1c2hcbiAgfTtcbn0gLy8gQE5PVEUgaW4gdGhlIGZ1dHVyZSB0aGlzIG1heSBiZSBleHBvc2VkIHZpYSBjb25maWdcblxuZnVuY3Rpb24gZGVmYXVsdFNlcmlhbGl6ZShkYXRhKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbn0iLCJpbXBvcnQgeyBLRVlfUFJFRklYIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3RvcmVkU3RhdGUoY29uZmlnKSB7XG4gIHZhciB0cmFuc2Zvcm1zID0gY29uZmlnLnRyYW5zZm9ybXMgfHwgW107XG4gIHZhciBzdG9yYWdlS2V5ID0gXCJcIi5jb25jYXQoY29uZmlnLmtleVByZWZpeCAhPT0gdW5kZWZpbmVkID8gY29uZmlnLmtleVByZWZpeCA6IEtFWV9QUkVGSVgpLmNvbmNhdChjb25maWcua2V5KTtcbiAgdmFyIHN0b3JhZ2UgPSBjb25maWcuc3RvcmFnZTtcbiAgdmFyIGRlYnVnID0gY29uZmlnLmRlYnVnO1xuICB2YXIgZGVzZXJpYWxpemU7XG5cbiAgaWYgKGNvbmZpZy5kZXNlcmlhbGl6ZSA9PT0gZmFsc2UpIHtcbiAgICBkZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uIGRlc2VyaWFsaXplKHgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZy5kZXNlcmlhbGl6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRlc2VyaWFsaXplID0gY29uZmlnLmRlc2VyaWFsaXplO1xuICB9IGVsc2Uge1xuICAgIGRlc2VyaWFsaXplID0gZGVmYXVsdERlc2VyaWFsaXplO1xuICB9XG5cbiAgcmV0dXJuIHN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5KS50aGVuKGZ1bmN0aW9uIChzZXJpYWxpemVkKSB7XG4gICAgaWYgKCFzZXJpYWxpemVkKSByZXR1cm4gdW5kZWZpbmVkO2Vsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHN0YXRlID0ge307XG4gICAgICAgIHZhciByYXdTdGF0ZSA9IGRlc2VyaWFsaXplKHNlcmlhbGl6ZWQpO1xuICAgICAgICBPYmplY3Qua2V5cyhyYXdTdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgc3RhdGVba2V5XSA9IHRyYW5zZm9ybXMucmVkdWNlUmlnaHQoZnVuY3Rpb24gKHN1YlN0YXRlLCB0cmFuc2Zvcm1lcikge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVyLm91dChzdWJTdGF0ZSwga2V5LCByYXdTdGF0ZSk7XG4gICAgICAgICAgfSwgZGVzZXJpYWxpemUocmF3U3RhdGVba2V5XSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRlYnVnKSBjb25zb2xlLmxvZyhcInJlZHV4LXBlcnNpc3QvZ2V0U3RvcmVkU3RhdGU6IEVycm9yIHJlc3RvcmluZyBkYXRhIFwiLmNvbmNhdChzZXJpYWxpemVkKSwgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHREZXNlcmlhbGl6ZShzZXJpYWwpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2Uoc2VyaWFsKTtcbn0iLCJpbXBvcnQgeyBLRVlfUFJFRklYIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHVyZ2VTdG9yZWRTdGF0ZShjb25maWcpIHtcbiAgdmFyIHN0b3JhZ2UgPSBjb25maWcuc3RvcmFnZTtcbiAgdmFyIHN0b3JhZ2VLZXkgPSBcIlwiLmNvbmNhdChjb25maWcua2V5UHJlZml4ICE9PSB1bmRlZmluZWQgPyBjb25maWcua2V5UHJlZml4IDogS0VZX1BSRUZJWCkuY29uY2F0KGNvbmZpZy5rZXkpO1xuICByZXR1cm4gc3RvcmFnZS5yZW1vdmVJdGVtKHN0b3JhZ2VLZXksIHdhcm5JZlJlbW92ZUVycm9yKTtcbn1cblxuZnVuY3Rpb24gd2FybklmUmVtb3ZlRXJyb3IoZXJyKSB7XG4gIGlmIChlcnIgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ3JlZHV4LXBlcnNpc3QvcHVyZ2VTdG9yZWRTdGF0ZTogRXJyb3IgcHVyZ2luZyBkYXRhIHN0b3JlZCBzdGF0ZScsIGVycik7XG4gIH1cbn0iLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgeyBGTFVTSCwgUEFVU0UsIFBFUlNJU1QsIFBVUkdFLCBSRUhZRFJBVEUsIERFRkFVTFRfVkVSU0lPTiB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCBhdXRvTWVyZ2VMZXZlbDEgZnJvbSAnLi9zdGF0ZVJlY29uY2lsZXIvYXV0b01lcmdlTGV2ZWwxJztcbmltcG9ydCBjcmVhdGVQZXJzaXN0b2lkIGZyb20gJy4vY3JlYXRlUGVyc2lzdG9pZCc7XG5pbXBvcnQgZGVmYXVsdEdldFN0b3JlZFN0YXRlIGZyb20gJy4vZ2V0U3RvcmVkU3RhdGUnO1xuaW1wb3J0IHB1cmdlU3RvcmVkU3RhdGUgZnJvbSAnLi9wdXJnZVN0b3JlZFN0YXRlJztcbnZhciBERUZBVUxUX1RJTUVPVVQgPSA1MDAwO1xuLypcbiAgQFRPRE8gYWRkIHZhbGlkYXRpb24gLyBoYW5kbGluZyBmb3I6XG4gIC0gcGVyc2lzdGluZyBhIHJlZHVjZXIgd2hpY2ggaGFzIG5lc3RlZCBfcGVyc2lzdFxuICAtIGhhbmRsaW5nIGFjdGlvbnMgdGhhdCBmaXJlIGJlZm9yZSByZXlkcmF0ZSBpcyBjYWxsZWRcbiovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBlcnNpc3RSZWR1Y2VyKGNvbmZpZywgYmFzZVJlZHVjZXIpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IEVycm9yKCdjb25maWcgaXMgcmVxdWlyZWQgZm9yIHBlcnNpc3RSZWR1Y2VyJyk7XG4gICAgaWYgKCFjb25maWcua2V5KSB0aHJvdyBuZXcgRXJyb3IoJ2tleSBpcyByZXF1aXJlZCBpbiBwZXJzaXN0b3IgY29uZmlnJyk7XG4gICAgaWYgKCFjb25maWcuc3RvcmFnZSkgdGhyb3cgbmV3IEVycm9yKFwicmVkdXgtcGVyc2lzdDogY29uZmlnLnN0b3JhZ2UgaXMgcmVxdWlyZWQuIFRyeSB1c2luZyBvbmUgb2YgdGhlIHByb3ZpZGVkIHN0b3JhZ2UgZW5naW5lcyBgaW1wb3J0IHN0b3JhZ2UgZnJvbSAncmVkdXgtcGVyc2lzdC9saWIvc3RvcmFnZSdgXCIpO1xuICB9XG5cbiAgdmFyIHZlcnNpb24gPSBjb25maWcudmVyc2lvbiAhPT0gdW5kZWZpbmVkID8gY29uZmlnLnZlcnNpb24gOiBERUZBVUxUX1ZFUlNJT047XG4gIHZhciBkZWJ1ZyA9IGNvbmZpZy5kZWJ1ZyB8fCBmYWxzZTtcbiAgdmFyIHN0YXRlUmVjb25jaWxlciA9IGNvbmZpZy5zdGF0ZVJlY29uY2lsZXIgPT09IHVuZGVmaW5lZCA/IGF1dG9NZXJnZUxldmVsMSA6IGNvbmZpZy5zdGF0ZVJlY29uY2lsZXI7XG4gIHZhciBnZXRTdG9yZWRTdGF0ZSA9IGNvbmZpZy5nZXRTdG9yZWRTdGF0ZSB8fCBkZWZhdWx0R2V0U3RvcmVkU3RhdGU7XG4gIHZhciB0aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQgIT09IHVuZGVmaW5lZCA/IGNvbmZpZy50aW1lb3V0IDogREVGQVVMVF9USU1FT1VUO1xuICB2YXIgX3BlcnNpc3RvaWQgPSBudWxsO1xuICB2YXIgX3B1cmdlID0gZmFsc2U7XG4gIHZhciBfcGF1c2VkID0gdHJ1ZTtcblxuICB2YXIgY29uZGl0aW9uYWxVcGRhdGUgPSBmdW5jdGlvbiBjb25kaXRpb25hbFVwZGF0ZShzdGF0ZSkge1xuICAgIC8vIHVwZGF0ZSB0aGUgcGVyc2lzdG9pZCBvbmx5IGlmIHdlIGFyZSByZWh5ZHJhdGVkIGFuZCBub3QgcGF1c2VkXG4gICAgc3RhdGUuX3BlcnNpc3QucmVoeWRyYXRlZCAmJiBfcGVyc2lzdG9pZCAmJiAhX3BhdXNlZCAmJiBfcGVyc2lzdG9pZC51cGRhdGUoc3RhdGUpO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICB2YXIgX3JlZiA9IHN0YXRlIHx8IHt9LFxuICAgICAgICBfcGVyc2lzdCA9IF9yZWYuX3BlcnNpc3QsXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiX3BlcnNpc3RcIl0pOyAvLyAkRmxvd0lnbm9yZSBuZWVkIHRvIHVwZGF0ZSBTdGF0ZSB0eXBlXG5cblxuICAgIHZhciByZXN0U3RhdGUgPSByZXN0O1xuXG4gICAgaWYgKGFjdGlvbi50eXBlID09PSBQRVJTSVNUKSB7XG4gICAgICB2YXIgX3NlYWxlZCA9IGZhbHNlO1xuXG4gICAgICB2YXIgX3JlaHlkcmF0ZSA9IGZ1bmN0aW9uIF9yZWh5ZHJhdGUocGF5bG9hZCwgZXJyKSB7XG4gICAgICAgIC8vIGRldiB3YXJuaW5nIGlmIHdlIGFyZSBhbHJlYWR5IHNlYWxlZFxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBfc2VhbGVkKSBjb25zb2xlLmVycm9yKFwicmVkdXgtcGVyc2lzdDogcmVoeWRyYXRlIGZvciBcXFwiXCIuY29uY2F0KGNvbmZpZy5rZXksIFwiXFxcIiBjYWxsZWQgYWZ0ZXIgdGltZW91dC5cIiksIHBheWxvYWQsIGVycik7IC8vIG9ubHkgcmVoeWRyYXRlIGlmIHdlIGFyZSBub3QgYWxyZWFkeSBzZWFsZWRcblxuICAgICAgICBpZiAoIV9zZWFsZWQpIHtcbiAgICAgICAgICBhY3Rpb24ucmVoeWRyYXRlKGNvbmZpZy5rZXksIHBheWxvYWQsIGVycik7XG4gICAgICAgICAgX3NlYWxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRpbWVvdXQgJiYgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICFfc2VhbGVkICYmIF9yZWh5ZHJhdGUodW5kZWZpbmVkLCBuZXcgRXJyb3IoXCJyZWR1eC1wZXJzaXN0OiBwZXJzaXN0IHRpbWVkIG91dCBmb3IgcGVyc2lzdCBrZXkgXFxcIlwiLmNvbmNhdChjb25maWcua2V5LCBcIlxcXCJcIikpKTtcbiAgICAgIH0sIHRpbWVvdXQpOyAvLyBATk9URSBQRVJTSVNUIHJlc3VtZXMgaWYgcGF1c2VkLlxuXG4gICAgICBfcGF1c2VkID0gZmFsc2U7IC8vIEBOT1RFIG9ubHkgZXZlciBjcmVhdGUgcGVyc2lzdG9pZCBvbmNlLCBlbnN1cmUgd2UgY2FsbCBpdCBhdCBsZWFzdCBvbmNlLCBldmVuIGlmIF9wZXJzaXN0IGhhcyBhbHJlYWR5IGJlZW4gc2V0XG5cbiAgICAgIGlmICghX3BlcnNpc3RvaWQpIF9wZXJzaXN0b2lkID0gY3JlYXRlUGVyc2lzdG9pZChjb25maWcpOyAvLyBATk9URSBQRVJTSVNUIGNhbiBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMsIG5vb3AgYWZ0ZXIgdGhlIGZpcnN0XG5cbiAgICAgIGlmIChfcGVyc2lzdCkge1xuICAgICAgICAvLyBXZSBzdGlsbCBuZWVkIHRvIGNhbGwgdGhlIGJhc2UgcmVkdWNlciBiZWNhdXNlIHRoZXJlIG1pZ2h0IGJlIG5lc3RlZFxuICAgICAgICAvLyB1c2VzIG9mIHBlcnNpc3RSZWR1Y2VyIHdoaWNoIG5lZWQgdG8gYmUgYXdhcmUgb2YgdGhlIFBFUlNJU1QgYWN0aW9uXG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBiYXNlUmVkdWNlcihyZXN0U3RhdGUsIGFjdGlvbiksIHtcbiAgICAgICAgICBfcGVyc2lzdDogX3BlcnNpc3RcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYWN0aW9uLnJlaHlkcmF0ZSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYWN0aW9uLnJlZ2lzdGVyICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ3JlZHV4LXBlcnNpc3Q6IGVpdGhlciByZWh5ZHJhdGUgb3IgcmVnaXN0ZXIgaXMgbm90IGEgZnVuY3Rpb24gb24gdGhlIFBFUlNJU1QgYWN0aW9uLiBUaGlzIGNhbiBoYXBwZW4gaWYgdGhlIGFjdGlvbiBpcyBiZWluZyByZXBsYXllZC4gVGhpcyBpcyBhbiB1bmV4cGxvcmVkIHVzZSBjYXNlLCBwbGVhc2Ugb3BlbiBhbiBpc3N1ZSBhbmQgd2Ugd2lsbCBmaWd1cmUgb3V0IGEgcmVzb2x1dGlvbi4nKTtcbiAgICAgIGFjdGlvbi5yZWdpc3Rlcihjb25maWcua2V5KTtcbiAgICAgIGdldFN0b3JlZFN0YXRlKGNvbmZpZykudGhlbihmdW5jdGlvbiAocmVzdG9yZWRTdGF0ZSkge1xuICAgICAgICB2YXIgbWlncmF0ZSA9IGNvbmZpZy5taWdyYXRlIHx8IGZ1bmN0aW9uIChzLCB2KSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBtaWdyYXRlKHJlc3RvcmVkU3RhdGUsIHZlcnNpb24pLnRoZW4oZnVuY3Rpb24gKG1pZ3JhdGVkU3RhdGUpIHtcbiAgICAgICAgICBfcmVoeWRyYXRlKG1pZ3JhdGVkU3RhdGUpO1xuICAgICAgICB9LCBmdW5jdGlvbiAobWlncmF0ZUVycikge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG1pZ3JhdGVFcnIpIGNvbnNvbGUuZXJyb3IoJ3JlZHV4LXBlcnNpc3Q6IG1pZ3JhdGlvbiBlcnJvcicsIG1pZ3JhdGVFcnIpO1xuXG4gICAgICAgICAgX3JlaHlkcmF0ZSh1bmRlZmluZWQsIG1pZ3JhdGVFcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgX3JlaHlkcmF0ZSh1bmRlZmluZWQsIGVycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBiYXNlUmVkdWNlcihyZXN0U3RhdGUsIGFjdGlvbiksIHtcbiAgICAgICAgX3BlcnNpc3Q6IHtcbiAgICAgICAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICAgICAgICAgIHJlaHlkcmF0ZWQ6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09IFBVUkdFKSB7XG4gICAgICBfcHVyZ2UgPSB0cnVlO1xuICAgICAgYWN0aW9uLnJlc3VsdChwdXJnZVN0b3JlZFN0YXRlKGNvbmZpZykpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGJhc2VSZWR1Y2VyKHJlc3RTdGF0ZSwgYWN0aW9uKSwge1xuICAgICAgICBfcGVyc2lzdDogX3BlcnNpc3RcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09IEZMVVNIKSB7XG4gICAgICBhY3Rpb24ucmVzdWx0KF9wZXJzaXN0b2lkICYmIF9wZXJzaXN0b2lkLmZsdXNoKCkpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGJhc2VSZWR1Y2VyKHJlc3RTdGF0ZSwgYWN0aW9uKSwge1xuICAgICAgICBfcGVyc2lzdDogX3BlcnNpc3RcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09IFBBVVNFKSB7XG4gICAgICBfcGF1c2VkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSBSRUhZRFJBVEUpIHtcbiAgICAgIC8vIG5vb3Agb24gcmVzdFN0YXRlIGlmIHB1cmdpbmdcbiAgICAgIGlmIChfcHVyZ2UpIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCByZXN0U3RhdGUsIHtcbiAgICAgICAgX3BlcnNpc3Q6IF9vYmplY3RTcHJlYWQoe30sIF9wZXJzaXN0LCB7XG4gICAgICAgICAgcmVoeWRyYXRlZDogdHJ1ZVxuICAgICAgICB9KSAvLyBATk9URSBpZiBrZXkgZG9lcyBub3QgbWF0Y2gsIHdpbGwgY29udGludWUgdG8gZGVmYXVsdCBlbHNlIGJlbG93XG5cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWN0aW9uLmtleSA9PT0gY29uZmlnLmtleSkge1xuICAgICAgICB2YXIgcmVkdWNlZFN0YXRlID0gYmFzZVJlZHVjZXIocmVzdFN0YXRlLCBhY3Rpb24pO1xuICAgICAgICB2YXIgaW5ib3VuZFN0YXRlID0gYWN0aW9uLnBheWxvYWQ7IC8vIG9ubHkgcmVjb25jaWxlIHN0YXRlIGlmIHN0YXRlUmVjb25jaWxlciBhbmQgaW5ib3VuZFN0YXRlIGFyZSBib3RoIGRlZmluZWRcblxuICAgICAgICB2YXIgcmVjb25jaWxlZFJlc3QgPSBzdGF0ZVJlY29uY2lsZXIgIT09IGZhbHNlICYmIGluYm91bmRTdGF0ZSAhPT0gdW5kZWZpbmVkID8gc3RhdGVSZWNvbmNpbGVyKGluYm91bmRTdGF0ZSwgc3RhdGUsIHJlZHVjZWRTdGF0ZSwgY29uZmlnKSA6IHJlZHVjZWRTdGF0ZTtcblxuICAgICAgICB2YXIgX25ld1N0YXRlID0gX29iamVjdFNwcmVhZCh7fSwgcmVjb25jaWxlZFJlc3QsIHtcbiAgICAgICAgICBfcGVyc2lzdDogX29iamVjdFNwcmVhZCh7fSwgX3BlcnNpc3QsIHtcbiAgICAgICAgICAgIHJlaHlkcmF0ZWQ6IHRydWVcbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gY29uZGl0aW9uYWxVcGRhdGUoX25ld1N0YXRlKTtcbiAgICAgIH1cbiAgICB9IC8vIGlmIHdlIGhhdmUgbm90IGFscmVhZHkgaGFuZGxlZCBQRVJTSVNULCBzdHJhaWdodCBwYXNzdGhyb3VnaFxuXG5cbiAgICBpZiAoIV9wZXJzaXN0KSByZXR1cm4gYmFzZVJlZHVjZXIoc3RhdGUsIGFjdGlvbik7IC8vIHJ1biBiYXNlIHJlZHVjZXI6XG4gICAgLy8gaXMgc3RhdGUgbW9kaWZpZWQgPyByZXR1cm4gb3JpZ2luYWwgOiByZXR1cm4gdXBkYXRlZFxuXG4gICAgdmFyIG5ld1N0YXRlID0gYmFzZVJlZHVjZXIocmVzdFN0YXRlLCBhY3Rpb24pO1xuICAgIGlmIChuZXdTdGF0ZSA9PT0gcmVzdFN0YXRlKSByZXR1cm4gc3RhdGU7XG4gICAgcmV0dXJuIGNvbmRpdGlvbmFsVXBkYXRlKF9vYmplY3RTcHJlYWQoe30sIG5ld1N0YXRlLCB7XG4gICAgICBfcGVyc2lzdDogX3BlcnNpc3RcbiAgICB9KSk7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn0iLCJpbXBvcnQgdG9Qcm9wZXJ0eUtleSBmcm9tIFwiLi90b1Byb3BlcnR5S2V5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCB0b1ByaW1pdGl2ZSBmcm9tIFwiLi90b1ByaW1pdGl2ZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gX3R5cGVvZihrZXkpID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHtcbiAgaWYgKF90eXBlb2YoaW5wdXQpICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChfdHlwZW9mKHJlcykgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG4gIHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpO1xufSIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tIFwiLi9kZWZpbmVQcm9wZXJ0eS5qc1wiO1xuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDInO1xuXG4vKipcbiAqIEFkYXB0ZWQgZnJvbSBSZWFjdDogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3NoYXJlZC9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlLmpzXG4gKlxuICogRG8gbm90IHJlcXVpcmUgdGhpcyBtb2R1bGUgZGlyZWN0bHkhIFVzZSBub3JtYWwgdGhyb3cgZXJyb3IgY2FsbHMuIFRoZXNlIG1lc3NhZ2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBlcnJvciBjb2Rlc1xuICogZHVyaW5nIGJ1aWxkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHJldHVybiBcIk1pbmlmaWVkIFJlZHV4IGVycm9yICNcIiArIGNvZGUgKyBcIjsgdmlzaXQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvRXJyb3JzP2NvZGU9XCIgKyBjb2RlICsgXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgXCIgKyAndXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycy4gJztcbn1cblxuLy8gSW5saW5lZCB2ZXJzaW9uIG9mIHRoZSBgc3ltYm9sLW9ic2VydmFibGVgIHBvbHlmaWxsXG52YXIgJCRvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7XG59KSgpO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLy8gSW5saW5lZCAvIHNob3J0ZW5lZCB2ZXJzaW9uIG9mIGBraW5kT2ZgIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQva2luZC1vZlxuZnVuY3Rpb24gbWluaUtpbmRPZih2YWwpIHtcbiAgaWYgKHZhbCA9PT0gdm9pZCAwKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIGlmICh2YWwgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuICdhcnJheSc7XG4gIGlmIChpc0RhdGUodmFsKSkgcmV0dXJuICdkYXRlJztcbiAgaWYgKGlzRXJyb3IodmFsKSkgcmV0dXJuICdlcnJvcic7XG4gIHZhciBjb25zdHJ1Y3Rvck5hbWUgPSBjdG9yTmFtZSh2YWwpO1xuXG4gIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdQcm9taXNlJzpcbiAgICBjYXNlICdXZWFrTWFwJzpcbiAgICBjYXNlICdXZWFrU2V0JzpcbiAgICBjYXNlICdNYXAnOlxuICAgIGNhc2UgJ1NldCc6XG4gICAgICByZXR1cm4gY29uc3RydWN0b3JOYW1lO1xuICB9IC8vIG90aGVyXG5cblxuICByZXR1cm4gdHlwZS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpO1xufVxuXG5mdW5jdGlvbiBjdG9yTmFtZSh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIHZhbC5jb25zdHJ1Y3RvciAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIHZhbC50b0RhdGVTdHJpbmcgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5nZXREYXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuc2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24ga2luZE9mKHZhbCkge1xuICB2YXIgdHlwZU9mVmFsID0gdHlwZW9mIHZhbDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHR5cGVPZlZhbCA9IG1pbmlLaW5kT2YodmFsKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlT2ZWYWw7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiAqKldlIHJlY29tbWVuZCB1c2luZyB0aGUgYGNvbmZpZ3VyZVN0b3JlYCBtZXRob2RcbiAqIG9mIHRoZSBgQHJlZHV4anMvdG9vbGtpdGAgcGFja2FnZSoqLCB3aGljaCByZXBsYWNlcyBgY3JlYXRlU3RvcmVgLlxuICpcbiAqIFJlZHV4IFRvb2xraXQgaXMgb3VyIHJlY29tbWVuZGVkIGFwcHJvYWNoIGZvciB3cml0aW5nIFJlZHV4IGxvZ2ljIHRvZGF5LFxuICogaW5jbHVkaW5nIHN0b3JlIHNldHVwLCByZWR1Y2VycywgZGF0YSBmZXRjaGluZywgYW5kIG1vcmUuXG4gKlxuICogKipGb3IgbW9yZSBkZXRhaWxzLCBwbGVhc2UgcmVhZCB0aGlzIFJlZHV4IGRvY3MgcGFnZToqKlxuICogKipodHRwczovL3JlZHV4LmpzLm9yZy9pbnRyb2R1Y3Rpb24vd2h5LXJ0ay1pcy1yZWR1eC10b2RheSoqXG4gKlxuICogYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIFJlZHV4IFRvb2xraXQgaXMgYW4gaW1wcm92ZWQgdmVyc2lvbiBvZiBgY3JlYXRlU3RvcmVgIHRoYXRcbiAqIHNpbXBsaWZpZXMgc2V0dXAgYW5kIGhlbHBzIGF2b2lkIGNvbW1vbiBidWdzLlxuICpcbiAqIFlvdSBzaG91bGQgbm90IGJlIHVzaW5nIHRoZSBgcmVkdXhgIGNvcmUgcGFja2FnZSBieSBpdHNlbGYgdG9kYXksIGV4Y2VwdCBmb3IgbGVhcm5pbmcgcHVycG9zZXMuXG4gKiBUaGUgYGNyZWF0ZVN0b3JlYCBtZXRob2QgZnJvbSB0aGUgY29yZSBgcmVkdXhgIHBhY2thZ2Ugd2lsbCBub3QgYmUgcmVtb3ZlZCwgYnV0IHdlIGVuY291cmFnZVxuICogYWxsIHVzZXJzIHRvIG1pZ3JhdGUgdG8gdXNpbmcgUmVkdXggVG9vbGtpdCBmb3IgYWxsIFJlZHV4IGNvZGUuXG4gKlxuICogSWYgeW91IHdhbnQgdG8gdXNlIGBjcmVhdGVTdG9yZWAgd2l0aG91dCB0aGlzIHZpc3VhbCBkZXByZWNhdGlvbiB3YXJuaW5nLCB1c2VcbiAqIHRoZSBgbGVnYWN5X2NyZWF0ZVN0b3JlYCBpbXBvcnQgaW5zdGVhZDpcbiAqXG4gKiBgaW1wb3J0IHsgbGVnYWN5X2NyZWF0ZVN0b3JlIGFzIGNyZWF0ZVN0b3JlfSBmcm9tICdyZWR1eCdgXG4gKlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6ICdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNjcmVhdGluZy1hLXN0b3JlLXdpdGgtZW5oYW5jZXJzIGZvciBhbiBleGFtcGxlLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcIkV4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGVuaGFuY2VyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJFeHBlY3RlZCB0aGUgcm9vdCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YocmVkdWNlcikgKyBcIidcIik7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcIkV4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGxpc3RlbmVyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2KSA6ICdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICdcIiArIGtpbmRPZihhY3Rpb24pICsgXCInLiBZb3UgbWF5IG5lZWQgdG8gYWRkIG1pZGRsZXdhcmUgdG8geW91ciBzdG9yZSBzZXR1cCB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgb3RoZXIgdmFsdWVzLCBzdWNoIGFzICdyZWR1eC10aHVuaycgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIGZ1bmN0aW9ucy4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI21pZGRsZXdhcmUgYW5kIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC02LWFzeW5jLWxvZ2ljI3VzaW5nLXRoZS1yZWR1eC10aHVuay1taWRkbGV3YXJlIGZvciBleGFtcGxlcy5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYW4gYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50LicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6ICdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTApIDogXCJFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihuZXh0UmVkdWNlcikpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMSkgOiBcIkV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2Yob2JzZXJ2ZXIpICsgXCInXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKlxuICogKipXZSByZWNvbW1lbmQgdXNpbmcgYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIHRoZVxuICogYEByZWR1eGpzL3Rvb2xraXRgIHBhY2thZ2UqKiwgd2hpY2ggcmVwbGFjZXMgYGNyZWF0ZVN0b3JlYDpcbiAqICoqaHR0cHM6Ly9yZWR1eC5qcy5vcmcvaW50cm9kdWN0aW9uL3doeS1ydGstaXMtcmVkdXgtdG9kYXkqKlxuICpcbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG52YXIgbGVnYWN5X2NyZWF0ZVN0b3JlID0gY3JlYXRlU3RvcmU7XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSwgbGVnYWN5X2NyZWF0ZVN0b3JlIH07XG4iLCJmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IEZMVVNILCBQQVVTRSwgUEVSU0lTVCwgUFVSR0UsIFJFR0lTVEVSLCBSRUhZRFJBVEUgfSBmcm9tICcuL2NvbnN0YW50cyc7XG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICByZWdpc3RyeTogW10sXG4gIGJvb3RzdHJhcHBlZDogZmFsc2Vcbn07XG5cbnZhciBwZXJzaXN0b3JSZWR1Y2VyID0gZnVuY3Rpb24gcGVyc2lzdG9yUmVkdWNlcigpIHtcbiAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBpbml0aWFsU3RhdGU7XG4gIHZhciBhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBSRUdJU1RFUjpcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwge1xuICAgICAgICByZWdpc3RyeTogW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzdGF0ZS5yZWdpc3RyeSksIFthY3Rpb24ua2V5XSlcbiAgICAgIH0pO1xuXG4gICAgY2FzZSBSRUhZRFJBVEU6XG4gICAgICB2YXIgZmlyc3RJbmRleCA9IHN0YXRlLnJlZ2lzdHJ5LmluZGV4T2YoYWN0aW9uLmtleSk7XG5cbiAgICAgIHZhciByZWdpc3RyeSA9IF90b0NvbnN1bWFibGVBcnJheShzdGF0ZS5yZWdpc3RyeSk7XG5cbiAgICAgIHJlZ2lzdHJ5LnNwbGljZShmaXJzdEluZGV4LCAxKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwge1xuICAgICAgICByZWdpc3RyeTogcmVnaXN0cnksXG4gICAgICAgIGJvb3RzdHJhcHBlZDogcmVnaXN0cnkubGVuZ3RoID09PSAwXG4gICAgICB9KTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBlcnNpc3RTdG9yZShzdG9yZSwgb3B0aW9ucywgY2IpIHtcbiAgLy8gaGVscCBjYXRjaCBpbmNvcnJlY3QgdXNhZ2Ugb2YgcGFzc2luZyBQZXJzaXN0Q29uZmlnIGluIGFzIFBlcnNpc3Rvck9wdGlvbnNcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgb3B0aW9uc1RvVGVzdCA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIGJhbm5lZEtleXMgPSBbJ2JsYWNrbGlzdCcsICd3aGl0ZWxpc3QnLCAndHJhbnNmb3JtcycsICdzdG9yYWdlJywgJ2tleVByZWZpeCcsICdtaWdyYXRlJ107XG4gICAgYmFubmVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICBpZiAoISFvcHRpb25zVG9UZXN0W2tdKSBjb25zb2xlLmVycm9yKFwicmVkdXgtcGVyc2lzdDogaW52YWxpZCBvcHRpb24gcGFzc2VkIHRvIHBlcnNpc3RTdG9yZTogXFxcIlwiLmNvbmNhdChrLCBcIlxcXCIuIFlvdSBtYXkgYmUgaW5jb3JyZWN0bHkgcGFzc2luZyBwZXJzaXN0Q29uZmlnIGludG8gcGVyc2lzdFN0b3JlLCB3aGVyZWFzIGl0IHNob3VsZCBiZSBwYXNzZWQgaW50byBwZXJzaXN0UmVkdWNlci5cIikpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGJvb3N0cmFwcGVkQ2IgPSBjYiB8fCBmYWxzZTtcblxuICB2YXIgX3BTdG9yZSA9IGNyZWF0ZVN0b3JlKHBlcnNpc3RvclJlZHVjZXIsIGluaXRpYWxTdGF0ZSwgb3B0aW9ucyAmJiBvcHRpb25zLmVuaGFuY2VyID8gb3B0aW9ucy5lbmhhbmNlciA6IHVuZGVmaW5lZCk7XG5cbiAgdmFyIHJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoa2V5KSB7XG4gICAgX3BTdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiBSRUdJU1RFUixcbiAgICAgIGtleToga2V5XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlaHlkcmF0ZSA9IGZ1bmN0aW9uIHJlaHlkcmF0ZShrZXksIHBheWxvYWQsIGVycikge1xuICAgIHZhciByZWh5ZHJhdGVBY3Rpb24gPSB7XG4gICAgICB0eXBlOiBSRUhZRFJBVEUsXG4gICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgZXJyOiBlcnIsXG4gICAgICBrZXk6IGtleSAvLyBkaXNwYXRjaCB0byBgc3RvcmVgIHRvIHJlaHlkcmF0ZSBhbmQgYHBlcnNpc3RvcmAgdG8gdHJhY2sgcmVzdWx0XG5cbiAgICB9O1xuICAgIHN0b3JlLmRpc3BhdGNoKHJlaHlkcmF0ZUFjdGlvbik7XG5cbiAgICBfcFN0b3JlLmRpc3BhdGNoKHJlaHlkcmF0ZUFjdGlvbik7XG5cbiAgICBpZiAoYm9vc3RyYXBwZWRDYiAmJiBwZXJzaXN0b3IuZ2V0U3RhdGUoKS5ib290c3RyYXBwZWQpIHtcbiAgICAgIGJvb3N0cmFwcGVkQ2IoKTtcbiAgICAgIGJvb3N0cmFwcGVkQ2IgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHBlcnNpc3RvciA9IF9vYmplY3RTcHJlYWQoe30sIF9wU3RvcmUsIHtcbiAgICBwdXJnZTogZnVuY3Rpb24gcHVyZ2UoKSB7XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgc3RvcmUuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBQVVJHRSxcbiAgICAgICAgcmVzdWx0OiBmdW5jdGlvbiByZXN1bHQocHVyZ2VSZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2gocHVyZ2VSZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChyZXN1bHRzKTtcbiAgICB9LFxuICAgIGZsdXNoOiBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICBzdG9yZS5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IEZMVVNILFxuICAgICAgICByZXN1bHQ6IGZ1bmN0aW9uIHJlc3VsdChmbHVzaFJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChmbHVzaFJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHJlc3VsdHMpO1xuICAgIH0sXG4gICAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgc3RvcmUuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBQQVVTRVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBwZXJzaXN0OiBmdW5jdGlvbiBwZXJzaXN0KCkge1xuICAgICAgc3RvcmUuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBQRVJTSVNULFxuICAgICAgICByZWdpc3RlcjogcmVnaXN0ZXIsXG4gICAgICAgIHJlaHlkcmF0ZTogcmVoeWRyYXRlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmICghKG9wdGlvbnMgJiYgb3B0aW9ucy5tYW51YWxQZXJzaXN0KSkge1xuICAgIHBlcnNpc3Rvci5wZXJzaXN0KCk7XG4gIH1cblxuICByZXR1cm4gcGVyc2lzdG9yO1xufSIsImZ1bmN0aW9uIG4obil7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShyPjE/ci0xOjApLGU9MTtlPHI7ZSsrKXRbZS0xXT1hcmd1bWVudHNbZV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGk9WVtuXSxvPWk/XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KG51bGwsdCk6aTpcInVua25vd24gZXJyb3IgbnI6IFwiK247dGhyb3cgRXJyb3IoXCJbSW1tZXJdIFwiK28pfXRocm93IEVycm9yKFwiW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogXCIrbisodC5sZW5ndGg/XCIgXCIrdC5tYXAoKGZ1bmN0aW9uKG4pe3JldHVyblwiJ1wiK24rXCInXCJ9KSkuam9pbihcIixcIik6XCJcIikrXCIuIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZcIil9ZnVuY3Rpb24gcihuKXtyZXR1cm4hIW4mJiEhbltRXX1mdW5jdGlvbiB0KG4pe3ZhciByO3JldHVybiEhbiYmKGZ1bmN0aW9uKG4pe2lmKCFufHxcIm9iamVjdFwiIT10eXBlb2YgbilyZXR1cm4hMTt2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7aWYobnVsbD09PXIpcmV0dXJuITA7dmFyIHQ9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocixcImNvbnN0cnVjdG9yXCIpJiZyLmNvbnN0cnVjdG9yO3JldHVybiB0PT09T2JqZWN0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZGdW5jdGlvbi50b1N0cmluZy5jYWxsKHQpPT09Wn0obil8fEFycmF5LmlzQXJyYXkobil8fCEhbltMXXx8ISEobnVsbD09PShyPW4uY29uc3RydWN0b3IpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyW0xdKXx8cyhuKXx8dihuKSl9ZnVuY3Rpb24gZSh0KXtyZXR1cm4gcih0KXx8bigyMyx0KSx0W1FdLnR9ZnVuY3Rpb24gaShuLHIsdCl7dm9pZCAwPT09dCYmKHQ9ITEpLDA9PT1vKG4pPyh0P09iamVjdC5rZXlzOm5uKShuKS5mb3JFYWNoKChmdW5jdGlvbihlKXt0JiZcInN5bWJvbFwiPT10eXBlb2YgZXx8cihlLG5bZV0sbil9KSk6bi5mb3JFYWNoKChmdW5jdGlvbih0LGUpe3JldHVybiByKGUsdCxuKX0pKX1mdW5jdGlvbiBvKG4pe3ZhciByPW5bUV07cmV0dXJuIHI/ci5pPjM/ci5pLTQ6ci5pOkFycmF5LmlzQXJyYXkobik/MTpzKG4pPzI6dihuKT8zOjB9ZnVuY3Rpb24gdShuLHIpe3JldHVybiAyPT09byhuKT9uLmhhcyhyKTpPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKX1mdW5jdGlvbiBhKG4scil7cmV0dXJuIDI9PT1vKG4pP24uZ2V0KHIpOm5bcl19ZnVuY3Rpb24gZihuLHIsdCl7dmFyIGU9byhuKTsyPT09ZT9uLnNldChyLHQpOjM9PT1lP24uYWRkKHQpOm5bcl09dH1mdW5jdGlvbiBjKG4scil7cmV0dXJuIG49PT1yPzAhPT1ufHwxL249PTEvcjpuIT1uJiZyIT1yfWZ1bmN0aW9uIHMobil7cmV0dXJuIFgmJm4gaW5zdGFuY2VvZiBNYXB9ZnVuY3Rpb24gdihuKXtyZXR1cm4gcSYmbiBpbnN0YW5jZW9mIFNldH1mdW5jdGlvbiBwKG4pe3JldHVybiBuLm98fG4udH1mdW5jdGlvbiBsKG4pe2lmKEFycmF5LmlzQXJyYXkobikpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG4pO3ZhciByPXJuKG4pO2RlbGV0ZSByW1FdO2Zvcih2YXIgdD1ubihyKSxlPTA7ZTx0Lmxlbmd0aDtlKyspe3ZhciBpPXRbZV0sbz1yW2ldOyExPT09by53cml0YWJsZSYmKG8ud3JpdGFibGU9ITAsby5jb25maWd1cmFibGU9ITApLChvLmdldHx8by5zZXQpJiYocltpXT17Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6by5lbnVtZXJhYmxlLHZhbHVlOm5baV19KX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yobikscil9ZnVuY3Rpb24gZChuLGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSkseShuKXx8cihuKXx8IXQobil8fChvKG4pPjEmJihuLnNldD1uLmFkZD1uLmNsZWFyPW4uZGVsZXRlPWgpLE9iamVjdC5mcmVlemUobiksZSYmaShuLChmdW5jdGlvbihuLHIpe3JldHVybiBkKHIsITApfSksITApKSxufWZ1bmN0aW9uIGgoKXtuKDIpfWZ1bmN0aW9uIHkobil7cmV0dXJuIG51bGw9PW58fFwib2JqZWN0XCIhPXR5cGVvZiBufHxPYmplY3QuaXNGcm96ZW4obil9ZnVuY3Rpb24gYihyKXt2YXIgdD10bltyXTtyZXR1cm4gdHx8bigxOCxyKSx0fWZ1bmN0aW9uIG0obixyKXt0bltuXXx8KHRuW25dPXIpfWZ1bmN0aW9uIF8oKXtyZXR1cm5cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxVfHxuKDApLFV9ZnVuY3Rpb24gaihuLHIpe3ImJihiKFwiUGF0Y2hlc1wiKSxuLnU9W10sbi5zPVtdLG4udj1yKX1mdW5jdGlvbiBnKG4pe08obiksbi5wLmZvckVhY2goUyksbi5wPW51bGx9ZnVuY3Rpb24gTyhuKXtuPT09VSYmKFU9bi5sKX1mdW5jdGlvbiB3KG4pe3JldHVybiBVPXtwOltdLGw6VSxoOm4sbTohMCxfOjB9fWZ1bmN0aW9uIFMobil7dmFyIHI9bltRXTswPT09ci5pfHwxPT09ci5pP3IuaigpOnIuZz0hMH1mdW5jdGlvbiBQKHIsZSl7ZS5fPWUucC5sZW5ndGg7dmFyIGk9ZS5wWzBdLG89dm9pZCAwIT09ciYmciE9PWk7cmV0dXJuIGUuaC5PfHxiKFwiRVM1XCIpLlMoZSxyLG8pLG8/KGlbUV0uUCYmKGcoZSksbig0KSksdChyKSYmKHI9TShlLHIpLGUubHx8eChlLHIpKSxlLnUmJmIoXCJQYXRjaGVzXCIpLk0oaVtRXS50LHIsZS51LGUucykpOnI9TShlLGksW10pLGcoZSksZS51JiZlLnYoZS51LGUucyksciE9PUg/cjp2b2lkIDB9ZnVuY3Rpb24gTShuLHIsdCl7aWYoeShyKSlyZXR1cm4gcjt2YXIgZT1yW1FdO2lmKCFlKXJldHVybiBpKHIsKGZ1bmN0aW9uKGksbyl7cmV0dXJuIEEobixlLHIsaSxvLHQpfSksITApLHI7aWYoZS5BIT09bilyZXR1cm4gcjtpZighZS5QKXJldHVybiB4KG4sZS50LCEwKSxlLnQ7aWYoIWUuSSl7ZS5JPSEwLGUuQS5fLS07dmFyIG89ND09PWUuaXx8NT09PWUuaT9lLm89bChlLmspOmUubyx1PW8sYT0hMTszPT09ZS5pJiYodT1uZXcgU2V0KG8pLG8uY2xlYXIoKSxhPSEwKSxpKHUsKGZ1bmN0aW9uKHIsaSl7cmV0dXJuIEEobixlLG8scixpLHQsYSl9KSkseChuLG8sITEpLHQmJm4udSYmYihcIlBhdGNoZXNcIikuTihlLHQsbi51LG4ucyl9cmV0dXJuIGUub31mdW5jdGlvbiBBKGUsaSxvLGEsYyxzLHYpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmM9PT1vJiZuKDUpLHIoYykpe3ZhciBwPU0oZSxjLHMmJmkmJjMhPT1pLmkmJiF1KGkuUixhKT9zLmNvbmNhdChhKTp2b2lkIDApO2lmKGYobyxhLHApLCFyKHApKXJldHVybjtlLm09ITF9ZWxzZSB2JiZvLmFkZChjKTtpZih0KGMpJiYheShjKSl7aWYoIWUuaC5EJiZlLl88MSlyZXR1cm47TShlLGMpLGkmJmkuQS5sfHx4KGUsYyl9fWZ1bmN0aW9uIHgobixyLHQpe3ZvaWQgMD09PXQmJih0PSExKSwhbi5sJiZuLmguRCYmbi5tJiZkKHIsdCl9ZnVuY3Rpb24geihuLHIpe3ZhciB0PW5bUV07cmV0dXJuKHQ/cCh0KTpuKVtyXX1mdW5jdGlvbiBJKG4scil7aWYociBpbiBuKWZvcih2YXIgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7dDspe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZihlKXJldHVybiBlO3Q9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfX1mdW5jdGlvbiBrKG4pe24uUHx8KG4uUD0hMCxuLmwmJmsobi5sKSl9ZnVuY3Rpb24gRShuKXtuLm98fChuLm89bChuLnQpKX1mdW5jdGlvbiBOKG4scix0KXt2YXIgZT1zKHIpP2IoXCJNYXBTZXRcIikuRihyLHQpOnYocik/YihcIk1hcFNldFwiKS5UKHIsdCk6bi5PP2Z1bmN0aW9uKG4scil7dmFyIHQ9QXJyYXkuaXNBcnJheShuKSxlPXtpOnQ/MTowLEE6cj9yLkE6XygpLFA6ITEsSTohMSxSOnt9LGw6cix0Om4sazpudWxsLG86bnVsbCxqOm51bGwsQzohMX0saT1lLG89ZW47dCYmKGk9W2VdLG89b24pO3ZhciB1PVByb3h5LnJldm9jYWJsZShpLG8pLGE9dS5yZXZva2UsZj11LnByb3h5O3JldHVybiBlLms9ZixlLmo9YSxmfShyLHQpOmIoXCJFUzVcIikuSihyLHQpO3JldHVybih0P3QuQTpfKCkpLnAucHVzaChlKSxlfWZ1bmN0aW9uIFIoZSl7cmV0dXJuIHIoZSl8fG4oMjIsZSksZnVuY3Rpb24gbihyKXtpZighdChyKSlyZXR1cm4gcjt2YXIgZSx1PXJbUV0sYz1vKHIpO2lmKHUpe2lmKCF1LlAmJih1Lmk8NHx8IWIoXCJFUzVcIikuSyh1KSkpcmV0dXJuIHUudDt1Lkk9ITAsZT1EKHIsYyksdS5JPSExfWVsc2UgZT1EKHIsYyk7cmV0dXJuIGkoZSwoZnVuY3Rpb24ocix0KXt1JiZhKHUudCxyKT09PXR8fGYoZSxyLG4odCkpfSkpLDM9PT1jP25ldyBTZXQoZSk6ZX0oZSl9ZnVuY3Rpb24gRChuLHIpe3N3aXRjaChyKXtjYXNlIDI6cmV0dXJuIG5ldyBNYXAobik7Y2FzZSAzOnJldHVybiBBcnJheS5mcm9tKG4pfXJldHVybiBsKG4pfWZ1bmN0aW9uIEYoKXtmdW5jdGlvbiB0KG4scil7dmFyIHQ9c1tuXTtyZXR1cm4gdD90LmVudW1lcmFibGU9cjpzW25dPXQ9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOnIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHI9dGhpc1tRXTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHIpLGVuLmdldChyLG4pfSxzZXQ6ZnVuY3Rpb24ocil7dmFyIHQ9dGhpc1tRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHQpLGVuLnNldCh0LG4scil9fSx0fWZ1bmN0aW9uIGUobil7Zm9yKHZhciByPW4ubGVuZ3RoLTE7cj49MDtyLS0pe3ZhciB0PW5bcl1bUV07aWYoIXQuUClzd2l0Y2godC5pKXtjYXNlIDU6YSh0KSYmayh0KTticmVhaztjYXNlIDQ6byh0KSYmayh0KX19fWZ1bmN0aW9uIG8obil7Zm9yKHZhciByPW4udCx0PW4uayxlPW5uKHQpLGk9ZS5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIG89ZVtpXTtpZihvIT09USl7dmFyIGE9cltvXTtpZih2b2lkIDA9PT1hJiYhdShyLG8pKXJldHVybiEwO3ZhciBmPXRbb10scz1mJiZmW1FdO2lmKHM/cy50IT09YTohYyhmLGEpKXJldHVybiEwfX12YXIgdj0hIXJbUV07cmV0dXJuIGUubGVuZ3RoIT09bm4ocikubGVuZ3RoKyh2PzA6MSl9ZnVuY3Rpb24gYShuKXt2YXIgcj1uLms7aWYoci5sZW5ndGghPT1uLnQubGVuZ3RoKXJldHVybiEwO3ZhciB0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixyLmxlbmd0aC0xKTtpZih0JiYhdC5nZXQpcmV0dXJuITA7Zm9yKHZhciBlPTA7ZTxyLmxlbmd0aDtlKyspaWYoIXIuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZihyKXtyLmcmJm4oMyxKU09OLnN0cmluZ2lmeShwKHIpKSl9dmFyIHM9e307bShcIkVTNVwiLHtKOmZ1bmN0aW9uKG4scil7dmFyIGU9QXJyYXkuaXNBcnJheShuKSxpPWZ1bmN0aW9uKG4scil7aWYobil7Zm9yKHZhciBlPUFycmF5KHIubGVuZ3RoKSxpPTA7aTxyLmxlbmd0aDtpKyspT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJcIitpLHQoaSwhMCkpO3JldHVybiBlfXZhciBvPXJuKHIpO2RlbGV0ZSBvW1FdO2Zvcih2YXIgdT1ubihvKSxhPTA7YTx1Lmxlbmd0aDthKyspe3ZhciBmPXVbYV07b1tmXT10KGYsbnx8ISFvW2ZdLmVudW1lcmFibGUpfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihyKSxvKX0oZSxuKSxvPXtpOmU/NTo0LEE6cj9yLkE6XygpLFA6ITEsSTohMSxSOnt9LGw6cix0Om4sazppLG86bnVsbCxnOiExLEM6ITF9O3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaSxRLHt2YWx1ZTpvLHdyaXRhYmxlOiEwfSksaX0sUzpmdW5jdGlvbihuLHQsbyl7bz9yKHQpJiZ0W1FdLkE9PT1uJiZlKG4ucCk6KG4udSYmZnVuY3Rpb24gbihyKXtpZihyJiZcIm9iamVjdFwiPT10eXBlb2Ygcil7dmFyIHQ9cltRXTtpZih0KXt2YXIgZT10LnQsbz10LmssZj10LlIsYz10Lmk7aWYoND09PWMpaShvLChmdW5jdGlvbihyKXtyIT09USYmKHZvaWQgMCE9PWVbcl18fHUoZSxyKT9mW3JdfHxuKG9bcl0pOihmW3JdPSEwLGsodCkpKX0pKSxpKGUsKGZ1bmN0aW9uKG4pe3ZvaWQgMCE9PW9bbl18fHUobyxuKXx8KGZbbl09ITEsayh0KSl9KSk7ZWxzZSBpZig1PT09Yyl7aWYoYSh0KSYmKGsodCksZi5sZW5ndGg9ITApLG8ubGVuZ3RoPGUubGVuZ3RoKWZvcih2YXIgcz1vLmxlbmd0aDtzPGUubGVuZ3RoO3MrKylmW3NdPSExO2Vsc2UgZm9yKHZhciB2PWUubGVuZ3RoO3Y8by5sZW5ndGg7disrKWZbdl09ITA7Zm9yKHZhciBwPU1hdGgubWluKG8ubGVuZ3RoLGUubGVuZ3RoKSxsPTA7bDxwO2wrKylvLmhhc093blByb3BlcnR5KGwpfHwoZltsXT0hMCksdm9pZCAwPT09ZltsXSYmbihvW2xdKX19fX0obi5wWzBdKSxlKG4ucCkpfSxLOmZ1bmN0aW9uKG4pe3JldHVybiA0PT09bi5pP28obik6YShuKX19KX1mdW5jdGlvbiBUKCl7ZnVuY3Rpb24gZShuKXtpZighdChuKSlyZXR1cm4gbjtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBuLm1hcChlKTtpZihzKG4pKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20obi5lbnRyaWVzKCkpLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuW25bMF0sZShuWzFdKV19KSkpO2lmKHYobikpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShuKS5tYXAoZSkpO3ZhciByPU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pKTtmb3IodmFyIGkgaW4gbilyW2ldPWUobltpXSk7cmV0dXJuIHUobixMKSYmKHJbTF09bltMXSkscn1mdW5jdGlvbiBmKG4pe3JldHVybiByKG4pP2Uobik6bn12YXIgYz1cImFkZFwiO20oXCJQYXRjaGVzXCIseyQ6ZnVuY3Rpb24ocix0KXtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtmb3IodmFyIGk9dC5wYXRoLHU9dC5vcCxmPXIscz0wO3M8aS5sZW5ndGgtMTtzKyspe3ZhciB2PW8oZikscD1pW3NdO1wic3RyaW5nXCIhPXR5cGVvZiBwJiZcIm51bWJlclwiIT10eXBlb2YgcCYmKHA9XCJcIitwKSwwIT09diYmMSE9PXZ8fFwiX19wcm90b19fXCIhPT1wJiZcImNvbnN0cnVjdG9yXCIhPT1wfHxuKDI0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBmJiZcInByb3RvdHlwZVwiPT09cCYmbigyNCksXCJvYmplY3RcIiE9dHlwZW9mKGY9YShmLHApKSYmbigxNSxpLmpvaW4oXCIvXCIpKX12YXIgbD1vKGYpLGQ9ZSh0LnZhbHVlKSxoPWlbaS5sZW5ndGgtMV07c3dpdGNoKHUpe2Nhc2VcInJlcGxhY2VcIjpzd2l0Y2gobCl7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpuKDE2KTtkZWZhdWx0OnJldHVybiBmW2hdPWR9Y2FzZSBjOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuXCItXCI9PT1oP2YucHVzaChkKTpmLnNwbGljZShoLDAsZCk7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpyZXR1cm4gZi5hZGQoZCk7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2VcInJlbW92ZVwiOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuIGYuc3BsaWNlKGgsMSk7Y2FzZSAyOnJldHVybiBmLmRlbGV0ZShoKTtjYXNlIDM6cmV0dXJuIGYuZGVsZXRlKHQudmFsdWUpO2RlZmF1bHQ6cmV0dXJuIGRlbGV0ZSBmW2hdfWRlZmF1bHQ6bigxNyx1KX19KSkscn0sTjpmdW5jdGlvbihuLHIsdCxlKXtzd2l0Y2gobi5pKXtjYXNlIDA6Y2FzZSA0OmNhc2UgMjpyZXR1cm4gZnVuY3Rpb24obixyLHQsZSl7dmFyIG89bi50LHM9bi5vO2kobi5SLChmdW5jdGlvbihuLGkpe3ZhciB2PWEobyxuKSxwPWEocyxuKSxsPWk/dShvLG4pP1wicmVwbGFjZVwiOmM6XCJyZW1vdmVcIjtpZih2IT09cHx8XCJyZXBsYWNlXCIhPT1sKXt2YXIgZD1yLmNvbmNhdChuKTt0LnB1c2goXCJyZW1vdmVcIj09PWw/e29wOmwscGF0aDpkfTp7b3A6bCxwYXRoOmQsdmFsdWU6cH0pLGUucHVzaChsPT09Yz97b3A6XCJyZW1vdmVcIixwYXRoOmR9OlwicmVtb3ZlXCI9PT1sP3tvcDpjLHBhdGg6ZCx2YWx1ZTpmKHYpfTp7b3A6XCJyZXBsYWNlXCIscGF0aDpkLHZhbHVlOmYodil9KX19KSl9KG4scix0LGUpO2Nhc2UgNTpjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBpPW4udCxvPW4uUix1PW4ubztpZih1Lmxlbmd0aDxpLmxlbmd0aCl7dmFyIGE9W3UsaV07aT1hWzBdLHU9YVsxXTt2YXIgcz1bZSx0XTt0PXNbMF0sZT1zWzFdfWZvcih2YXIgdj0wO3Y8aS5sZW5ndGg7disrKWlmKG9bdl0mJnVbdl0hPT1pW3ZdKXt2YXIgcD1yLmNvbmNhdChbdl0pO3QucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpwLHZhbHVlOmYodVt2XSl9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKGlbdl0pfSl9Zm9yKHZhciBsPWkubGVuZ3RoO2w8dS5sZW5ndGg7bCsrKXt2YXIgZD1yLmNvbmNhdChbbF0pO3QucHVzaCh7b3A6YyxwYXRoOmQsdmFsdWU6Zih1W2xdKX0pfWkubGVuZ3RoPHUubGVuZ3RoJiZlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6ci5jb25jYXQoW1wibGVuZ3RoXCJdKSx2YWx1ZTppLmxlbmd0aH0pfShuLHIsdCxlKTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBpPW4udCxvPW4ubyx1PTA7aS5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighby5oYXMobikpe3ZhciBpPXIuY29uY2F0KFt1XSk7dC5wdXNoKHtvcDpcInJlbW92ZVwiLHBhdGg6aSx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpjLHBhdGg6aSx2YWx1ZTpufSl9dSsrfSkpLHU9MCxvLmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKCFpLmhhcyhuKSl7dmFyIG89ci5jb25jYXQoW3VdKTt0LnB1c2goe29wOmMscGF0aDpvLHZhbHVlOm59KSxlLnVuc2hpZnQoe29wOlwicmVtb3ZlXCIscGF0aDpvLHZhbHVlOm59KX11Kyt9KSl9KG4scix0LGUpfX0sTTpmdW5jdGlvbihuLHIsdCxlKXt0LnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6cj09PUg/dm9pZCAwOnJ9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6bn0pfX0pfWZ1bmN0aW9uIEMoKXtmdW5jdGlvbiByKG4scil7ZnVuY3Rpb24gdCgpe3RoaXMuY29uc3RydWN0b3I9bn1hKG4sciksbi5wcm90b3R5cGU9KHQucHJvdG90eXBlPXIucHJvdG90eXBlLG5ldyB0KX1mdW5jdGlvbiBlKG4pe24ub3x8KG4uUj1uZXcgTWFwLG4ubz1uZXcgTWFwKG4udCkpfWZ1bmN0aW9uIG8obil7bi5vfHwobi5vPW5ldyBTZXQsbi50LmZvckVhY2goKGZ1bmN0aW9uKHIpe2lmKHQocikpe3ZhciBlPU4obi5BLmgscixuKTtuLnAuc2V0KHIsZSksbi5vLmFkZChlKX1lbHNlIG4uby5hZGQocil9KSkpfWZ1bmN0aW9uIHUocil7ci5nJiZuKDMsSlNPTi5zdHJpbmdpZnkocChyKSkpfXZhciBhPWZ1bmN0aW9uKG4scil7cmV0dXJuKGE9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKG4scil7bi5fX3Byb3RvX189cn18fGZ1bmN0aW9uKG4scil7Zm9yKHZhciB0IGluIHIpci5oYXNPd25Qcm9wZXJ0eSh0KSYmKG5bdF09clt0XSl9KShuLHIpfSxmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHIpe3JldHVybiB0aGlzW1FdPXtpOjIsbDpyLEE6cj9yLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCxSOnZvaWQgMCx0Om4sazp0aGlzLEM6ITEsZzohMX0sdGhpc31yKG4sTWFwKTt2YXIgbz1uLnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksby5oYXM9ZnVuY3Rpb24obil7cmV0dXJuIHAodGhpc1tRXSkuaGFzKG4pfSxvLnNldD1mdW5jdGlvbihuLHIpe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCkscCh0KS5oYXMobikmJnAodCkuZ2V0KG4pPT09cnx8KGUodCksayh0KSx0LlIuc2V0KG4sITApLHQuby5zZXQobixyKSx0LlIuc2V0KG4sITApKSx0aGlzfSxvLmRlbGV0ZT1mdW5jdGlvbihuKXtpZighdGhpcy5oYXMobikpcmV0dXJuITE7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxlKHIpLGsociksci50LmhhcyhuKT9yLlIuc2V0KG4sITEpOnIuUi5kZWxldGUobiksci5vLmRlbGV0ZShuKSwhMH0sby5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07dShuKSxwKG4pLnNpemUmJihlKG4pLGsobiksbi5SPW5ldyBNYXAsaShuLnQsKGZ1bmN0aW9uKHIpe24uUi5zZXQociwhMSl9KSksbi5vLmNsZWFyKCkpfSxvLmZvckVhY2g9ZnVuY3Rpb24obixyKXt2YXIgdD10aGlzO3AodGhpc1tRXSkuZm9yRWFjaCgoZnVuY3Rpb24oZSxpKXtuLmNhbGwocix0LmdldChpKSxpLHQpfSkpfSxvLmdldD1mdW5jdGlvbihuKXt2YXIgcj10aGlzW1FdO3Uocik7dmFyIGk9cChyKS5nZXQobik7aWYoci5JfHwhdChpKSlyZXR1cm4gaTtpZihpIT09ci50LmdldChuKSlyZXR1cm4gaTt2YXIgbz1OKHIuQS5oLGkscik7cmV0dXJuIGUociksci5vLnNldChuLG8pLG99LG8ua2V5cz1mdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLmtleXMoKX0sby52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgbixyPXRoaXMsdD10aGlzLmtleXMoKTtyZXR1cm4obj17fSlbVl09ZnVuY3Rpb24oKXtyZXR1cm4gci52YWx1ZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49dC5uZXh0KCk7cmV0dXJuIG4uZG9uZT9uOntkb25lOiExLHZhbHVlOnIuZ2V0KG4udmFsdWUpfX0sbn0sby5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG4scj10aGlzLHQ9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHIuZW50cmllcygpfSxuLm5leHQ9ZnVuY3Rpb24oKXt2YXIgbj10Lm5leHQoKTtpZihuLmRvbmUpcmV0dXJuIG47dmFyIGU9ci5nZXQobi52YWx1ZSk7cmV0dXJue2RvbmU6ITEsdmFsdWU6W24udmFsdWUsZV19fSxufSxvW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfSxufSgpLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4scil7cmV0dXJuIHRoaXNbUV09e2k6MyxsOnIsQTpyP3IuQTpfKCksUDohMSxJOiExLG86dm9pZCAwLHQ6bixrOnRoaXMscDpuZXcgTWFwLGc6ITEsQzohMX0sdGhpc31yKG4sU2V0KTt2YXIgdD1uLnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksdC5oYXM9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxyLm8/ISFyLm8uaGFzKG4pfHwhKCFyLnAuaGFzKG4pfHwhci5vLmhhcyhyLnAuZ2V0KG4pKSk6ci50LmhhcyhuKX0sdC5hZGQ9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSx0aGlzLmhhcyhuKXx8KG8ociksayhyKSxyLm8uYWRkKG4pKSx0aGlzfSx0LmRlbGV0ZT1mdW5jdGlvbihuKXtpZighdGhpcy5oYXMobikpcmV0dXJuITE7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxvKHIpLGsociksci5vLmRlbGV0ZShuKXx8ISFyLnAuaGFzKG4pJiZyLm8uZGVsZXRlKHIucC5nZXQobikpfSx0LmNsZWFyPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTt1KG4pLHAobikuc2l6ZSYmKG8obiksayhuKSxuLm8uY2xlYXIoKSl9LHQudmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby52YWx1ZXMoKX0sdC5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby5lbnRyaWVzKCl9LHQua2V5cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSx0W1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9LHQuZm9yRWFjaD1mdW5jdGlvbihuLHIpe2Zvcih2YXIgdD10aGlzLnZhbHVlcygpLGU9dC5uZXh0KCk7IWUuZG9uZTspbi5jYWxsKHIsZS52YWx1ZSxlLnZhbHVlLHRoaXMpLGU9dC5uZXh0KCl9LG59KCk7bShcIk1hcFNldFwiLHtGOmZ1bmN0aW9uKG4scil7cmV0dXJuIG5ldyBmKG4scil9LFQ6ZnVuY3Rpb24obixyKXtyZXR1cm4gbmV3IGMobixyKX19KX1mdW5jdGlvbiBKKCl7RigpLEMoKSxUKCl9ZnVuY3Rpb24gSyhuKXtyZXR1cm4gbn1mdW5jdGlvbiAkKG4pe3JldHVybiBufXZhciBHLFUsVz1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sKFwieFwiKSxYPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBNYXAscT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU2V0LEI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb3h5JiZ2b2lkIDAhPT1Qcm94eS5yZXZvY2FibGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0LEg9Vz9TeW1ib2wuZm9yKFwiaW1tZXItbm90aGluZ1wiKTooKEc9e30pW1wiaW1tZXItbm90aGluZ1wiXT0hMCxHKSxMPVc/U3ltYm9sLmZvcihcImltbWVyLWRyYWZ0YWJsZVwiKTpcIl9fJGltbWVyX2RyYWZ0YWJsZVwiLFE9Vz9TeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIik6XCJfXyRpbW1lcl9zdGF0ZVwiLFY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yfHxcIkBAaXRlcmF0b3JcIixZPXswOlwiSWxsZWdhbCBzdGF0ZVwiLDE6XCJJbW1lciBkcmFmdHMgY2Fubm90IGhhdmUgY29tcHV0ZWQgcHJvcGVydGllc1wiLDI6XCJUaGlzIG9iamVjdCBoYXMgYmVlbiBmcm96ZW4gYW5kIHNob3VsZCBub3QgYmUgbXV0YXRlZFwiLDM6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgdXNlIGEgcHJveHkgdGhhdCBoYXMgYmVlbiByZXZva2VkLiBEaWQgeW91IHBhc3MgYW4gb2JqZWN0IGZyb20gaW5zaWRlIGFuIGltbWVyIGZ1bmN0aW9uIHRvIGFuIGFzeW5jIHByb2Nlc3M/IFwiK259LDQ6XCJBbiBpbW1lciBwcm9kdWNlciByZXR1cm5lZCBhIG5ldyB2YWx1ZSAqYW5kKiBtb2RpZmllZCBpdHMgZHJhZnQuIEVpdGhlciByZXR1cm4gYSBuZXcgdmFsdWUgKm9yKiBtb2RpZnkgdGhlIGRyYWZ0LlwiLDU6XCJJbW1lciBmb3JiaWRzIGNpcmN1bGFyIHJlZmVyZW5jZXNcIiw2OlwiVGhlIGZpcnN0IG9yIHNlY29uZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uXCIsNzpcIlRoZSB0aGlyZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZFwiLDg6XCJGaXJzdCBhcmd1bWVudCB0byBgY3JlYXRlRHJhZnRgIG11c3QgYmUgYSBwbGFpbiBvYmplY3QsIGFuIGFycmF5LCBvciBhbiBpbW1lcmFibGUgb2JqZWN0XCIsOTpcIkZpcnN0IGFyZ3VtZW50IHRvIGBmaW5pc2hEcmFmdGAgbXVzdCBiZSBhIGRyYWZ0IHJldHVybmVkIGJ5IGBjcmVhdGVEcmFmdGBcIiwxMDpcIlRoZSBnaXZlbiBkcmFmdCBpcyBhbHJlYWR5IGZpbmFsaXplZFwiLDExOlwiT2JqZWN0LmRlZmluZVByb3BlcnR5KCkgY2Fubm90IGJlIHVzZWQgb24gYW4gSW1tZXIgZHJhZnRcIiwxMjpcIk9iamVjdC5zZXRQcm90b3R5cGVPZigpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTM6XCJJbW1lciBvbmx5IHN1cHBvcnRzIGRlbGV0aW5nIGFycmF5IGluZGljZXNcIiwxNDpcIkltbWVyIG9ubHkgc3VwcG9ydHMgc2V0dGluZyBhcnJheSBpbmRpY2VzIGFuZCB0aGUgJ2xlbmd0aCcgcHJvcGVydHlcIiwxNTpmdW5jdGlvbihuKXtyZXR1cm5cIkNhbm5vdCBhcHBseSBwYXRjaCwgcGF0aCBkb2Vzbid0IHJlc29sdmU6IFwiK259LDE2OidTZXRzIGNhbm5vdCBoYXZlIFwicmVwbGFjZVwiIHBhdGNoZXMuJywxNzpmdW5jdGlvbihuKXtyZXR1cm5cIlVuc3VwcG9ydGVkIHBhdGNoIG9wZXJhdGlvbjogXCIrbn0sMTg6ZnVuY3Rpb24obil7cmV0dXJuXCJUaGUgcGx1Z2luIGZvciAnXCIrbitcIicgaGFzIG5vdCBiZWVuIGxvYWRlZCBpbnRvIEltbWVyLiBUbyBlbmFibGUgdGhlIHBsdWdpbiwgaW1wb3J0IGFuZCBjYWxsIGBlbmFibGVcIituK1wiKClgIHdoZW4gaW5pdGlhbGl6aW5nIHlvdXIgYXBwbGljYXRpb24uXCJ9LDIwOlwiQ2Fubm90IHVzZSBwcm94aWVzIGlmIFByb3h5LCBQcm94eS5yZXZvY2FibGUgb3IgUmVmbGVjdCBhcmUgbm90IGF2YWlsYWJsZVwiLDIxOmZ1bmN0aW9uKG4pe3JldHVyblwicHJvZHVjZSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhpbmdzIHRoYXQgYXJlIGRyYWZ0YWJsZTogcGxhaW4gb2JqZWN0cywgYXJyYXlzLCBNYXAsIFNldCBvciBjbGFzc2VzIHRoYXQgYXJlIG1hcmtlZCB3aXRoICdbaW1tZXJhYmxlXTogdHJ1ZScuIEdvdCAnXCIrbitcIidcIn0sMjI6ZnVuY3Rpb24obil7cmV0dXJuXCInY3VycmVudCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259LDIzOmZ1bmN0aW9uKG4pe3JldHVyblwiJ29yaWdpbmFsJyBleHBlY3RzIGEgZHJhZnQsIGdvdDogXCIrbn0sMjQ6XCJQYXRjaGluZyByZXNlcnZlZCBhdHRyaWJ1dGVzIGxpa2UgX19wcm90b19fLCBwcm90b3R5cGUgYW5kIGNvbnN0cnVjdG9yIGlzIG5vdCBhbGxvd2VkXCJ9LFo9XCJcIitPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLG5uPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0Lm93bktleXM/UmVmbGVjdC5vd25LZXlzOnZvaWQgMCE9PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG4pLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG4pKX06T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMscm49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnN8fGZ1bmN0aW9uKG4pe3ZhciByPXt9O3JldHVybiBubihuKS5mb3JFYWNoKChmdW5jdGlvbih0KXtyW3RdPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iobix0KX0pKSxyfSx0bj17fSxlbj17Z2V0OmZ1bmN0aW9uKG4scil7aWYocj09PVEpcmV0dXJuIG47dmFyIGU9cChuKTtpZighdShlLHIpKXJldHVybiBmdW5jdGlvbihuLHIsdCl7dmFyIGUsaT1JKHIsdCk7cmV0dXJuIGk/XCJ2YWx1ZVwiaW4gaT9pLnZhbHVlOm51bGw9PT0oZT1pLmdldCl8fHZvaWQgMD09PWU/dm9pZCAwOmUuY2FsbChuLmspOnZvaWQgMH0obixlLHIpO3ZhciBpPWVbcl07cmV0dXJuIG4uSXx8IXQoaSk/aTppPT09eihuLnQscik/KEUobiksbi5vW3JdPU4obi5BLmgsaSxuKSk6aX0saGFzOmZ1bmN0aW9uKG4scil7cmV0dXJuIHIgaW4gcChuKX0sb3duS2V5czpmdW5jdGlvbihuKXtyZXR1cm4gUmVmbGVjdC5vd25LZXlzKHAobikpfSxzZXQ6ZnVuY3Rpb24obixyLHQpe3ZhciBlPUkocChuKSxyKTtpZihudWxsPT1lP3ZvaWQgMDplLnNldClyZXR1cm4gZS5zZXQuY2FsbChuLmssdCksITA7aWYoIW4uUCl7dmFyIGk9eihwKG4pLHIpLG89bnVsbD09aT92b2lkIDA6aVtRXTtpZihvJiZvLnQ9PT10KXJldHVybiBuLm9bcl09dCxuLlJbcl09ITEsITA7aWYoYyh0LGkpJiYodm9pZCAwIT09dHx8dShuLnQscikpKXJldHVybiEwO0UobiksayhuKX1yZXR1cm4gbi5vW3JdPT09dCYmKHZvaWQgMCE9PXR8fHIgaW4gbi5vKXx8TnVtYmVyLmlzTmFOKHQpJiZOdW1iZXIuaXNOYU4obi5vW3JdKXx8KG4ub1tyXT10LG4uUltyXT0hMCksITB9LGRlbGV0ZVByb3BlcnR5OmZ1bmN0aW9uKG4scil7cmV0dXJuIHZvaWQgMCE9PXoobi50LHIpfHxyIGluIG4udD8obi5SW3JdPSExLEUobiksayhuKSk6ZGVsZXRlIG4uUltyXSxuLm8mJmRlbGV0ZSBuLm9bcl0sITB9LGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpmdW5jdGlvbihuLHIpe3ZhciB0PXAobiksZT1SZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpO3JldHVybiBlP3t3cml0YWJsZTohMCxjb25maWd1cmFibGU6MSE9PW4uaXx8XCJsZW5ndGhcIiE9PXIsZW51bWVyYWJsZTplLmVudW1lcmFibGUsdmFsdWU6dFtyXX06ZX0sZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oKXtuKDExKX0sZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuLnQpfSxzZXRQcm90b3R5cGVPZjpmdW5jdGlvbigpe24oMTIpfX0sb249e307aShlbiwoZnVuY3Rpb24obixyKXtvbltuXT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09YXJndW1lbnRzWzBdWzBdLHIuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pKSxvbi5kZWxldGVQcm9wZXJ0eT1mdW5jdGlvbihyLHQpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmlzTmFOKHBhcnNlSW50KHQpKSYmbigxMyksb24uc2V0LmNhbGwodGhpcyxyLHQsdm9pZCAwKX0sb24uc2V0PWZ1bmN0aW9uKHIsdCxlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcImxlbmd0aFwiIT09dCYmaXNOYU4ocGFyc2VJbnQodCkpJiZuKDE0KSxlbi5zZXQuY2FsbCh0aGlzLHJbMF0sdCxlLHJbMF0pfTt2YXIgdW49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHIpe3ZhciBlPXRoaXM7dGhpcy5PPUIsdGhpcy5EPSEwLHRoaXMucHJvZHVjZT1mdW5jdGlvbihyLGksbyl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgciYmXCJmdW5jdGlvblwiIT10eXBlb2YgaSl7dmFyIHU9aTtpPXI7dmFyIGE9ZTtyZXR1cm4gZnVuY3Rpb24obil7dmFyIHI9dGhpczt2b2lkIDA9PT1uJiYobj11KTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxlPUFycmF5KHQ+MT90LTE6MCksbz0xO288dDtvKyspZVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gYS5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3ZhciB0O3JldHVybih0PWkpLmNhbGwuYXBwbHkodCxbcixuXS5jb25jYXQoZSkpfSkpfX12YXIgZjtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBpJiZuKDYpLHZvaWQgMCE9PW8mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG8mJm4oNyksdChyKSl7dmFyIGM9dyhlKSxzPU4oZSxyLHZvaWQgMCksdj0hMDt0cnl7Zj1pKHMpLHY9ITF9ZmluYWxseXt2P2coYyk6TyhjKX1yZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmZiBpbnN0YW5jZW9mIFByb21pc2U/Zi50aGVuKChmdW5jdGlvbihuKXtyZXR1cm4gaihjLG8pLFAobixjKX0pLChmdW5jdGlvbihuKXt0aHJvdyBnKGMpLG59KSk6KGooYyxvKSxQKGYsYykpfWlmKCFyfHxcIm9iamVjdFwiIT10eXBlb2Ygcil7aWYodm9pZCAwPT09KGY9aShyKSkmJihmPXIpLGY9PT1IJiYoZj12b2lkIDApLGUuRCYmZChmLCEwKSxvKXt2YXIgcD1bXSxsPVtdO2IoXCJQYXRjaGVzXCIpLk0ocixmLHAsbCksbyhwLGwpfXJldHVybiBmfW4oMjEscil9LHRoaXMucHJvZHVjZVdpdGhQYXRjaGVzPWZ1bmN0aW9uKG4scil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gZnVuY3Rpb24ocil7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsaT1BcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKWlbby0xXT1hcmd1bWVudHNbb107cmV0dXJuIGUucHJvZHVjZVdpdGhQYXRjaGVzKHIsKGZ1bmN0aW9uKHIpe3JldHVybiBuLmFwcGx5KHZvaWQgMCxbcl0uY29uY2F0KGkpKX0pKX07dmFyIHQsaSxvPWUucHJvZHVjZShuLHIsKGZ1bmN0aW9uKG4scil7dD1uLGk9cn0pKTtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmbyBpbnN0YW5jZW9mIFByb21pc2U/by50aGVuKChmdW5jdGlvbihuKXtyZXR1cm5bbix0LGldfSkpOltvLHQsaV19LFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09cj92b2lkIDA6ci51c2VQcm94aWVzKSYmdGhpcy5zZXRVc2VQcm94aWVzKHIudXNlUHJveGllcyksXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT1yP3ZvaWQgMDpyLmF1dG9GcmVlemUpJiZ0aGlzLnNldEF1dG9GcmVlemUoci5hdXRvRnJlZXplKX12YXIgaT1lLnByb3RvdHlwZTtyZXR1cm4gaS5jcmVhdGVEcmFmdD1mdW5jdGlvbihlKXt0KGUpfHxuKDgpLHIoZSkmJihlPVIoZSkpO3ZhciBpPXcodGhpcyksbz1OKHRoaXMsZSx2b2lkIDApO3JldHVybiBvW1FdLkM9ITAsTyhpKSxvfSxpLmZpbmlzaERyYWZ0PWZ1bmN0aW9uKHIsdCl7dmFyIGU9ciYmcltRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoZSYmZS5DfHxuKDkpLGUuSSYmbigxMCkpO3ZhciBpPWUuQTtyZXR1cm4gaihpLHQpLFAodm9pZCAwLGkpfSxpLnNldEF1dG9GcmVlemU9ZnVuY3Rpb24obil7dGhpcy5EPW59LGkuc2V0VXNlUHJveGllcz1mdW5jdGlvbihyKXtyJiYhQiYmbigyMCksdGhpcy5PPXJ9LGkuYXBwbHlQYXRjaGVzPWZ1bmN0aW9uKG4sdCl7dmFyIGU7Zm9yKGU9dC5sZW5ndGgtMTtlPj0wO2UtLSl7dmFyIGk9dFtlXTtpZigwPT09aS5wYXRoLmxlbmd0aCYmXCJyZXBsYWNlXCI9PT1pLm9wKXtuPWkudmFsdWU7YnJlYWt9fWU+LTEmJih0PXQuc2xpY2UoZSsxKSk7dmFyIG89YihcIlBhdGNoZXNcIikuJDtyZXR1cm4gcihuKT9vKG4sdCk6dGhpcy5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3JldHVybiBvKG4sdCl9KSl9LGV9KCksYW49bmV3IHVuLGZuPWFuLnByb2R1Y2UsY249YW4ucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQoYW4pLHNuPWFuLnNldEF1dG9GcmVlemUuYmluZChhbiksdm49YW4uc2V0VXNlUHJveGllcy5iaW5kKGFuKSxwbj1hbi5hcHBseVBhdGNoZXMuYmluZChhbiksbG49YW4uY3JlYXRlRHJhZnQuYmluZChhbiksZG49YW4uZmluaXNoRHJhZnQuYmluZChhbik7ZXhwb3J0IGRlZmF1bHQgZm47ZXhwb3J0e3VuIGFzIEltbWVyLHBuIGFzIGFwcGx5UGF0Y2hlcyxLIGFzIGNhc3REcmFmdCwkIGFzIGNhc3RJbW11dGFibGUsbG4gYXMgY3JlYXRlRHJhZnQsUiBhcyBjdXJyZW50LEogYXMgZW5hYmxlQWxsUGx1Z2lucyxGIGFzIGVuYWJsZUVTNSxDIGFzIGVuYWJsZU1hcFNldCxUIGFzIGVuYWJsZVBhdGNoZXMsZG4gYXMgZmluaXNoRHJhZnQsZCBhcyBmcmVlemUsTCBhcyBpbW1lcmFibGUsciBhcyBpc0RyYWZ0LHQgYXMgaXNEcmFmdGFibGUsSCBhcyBub3RoaW5nLGUgYXMgb3JpZ2luYWwsZm4gYXMgcHJvZHVjZSxjbiBhcyBwcm9kdWNlV2l0aFBhdGNoZXMsc24gYXMgc2V0QXV0b0ZyZWV6ZSx2biBhcyBzZXRVc2VQcm94aWVzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltbWVyLmVzbS5qcy5tYXBcbiIsIi8qKiBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIHBvdGVudGlhbCBcImV4dHJhIGFyZ3VtZW50XCIgdmFsdWUgdG8gYmUgaW5qZWN0ZWQgbGF0ZXIsXHJcbiAqIGFuZCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZSB0aHVuayBtaWRkbGV3YXJlIHRoYXQgdXNlcyB0aGF0IHZhbHVlXHJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgLy8gU3RhbmRhcmQgUmVkdXggbWlkZGxld2FyZSBkZWZpbml0aW9uIHBhdHRlcm46XG4gIC8vIFNlZTogaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjd3JpdGluZy1jdXN0b20tbWlkZGxld2FyZVxuICB2YXIgbWlkZGxld2FyZSA9IGZ1bmN0aW9uIG1pZGRsZXdhcmUoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIC8vIFRoZSB0aHVuayBtaWRkbGV3YXJlIGxvb2tzIGZvciBhbnkgZnVuY3Rpb25zIHRoYXQgd2VyZSBwYXNzZWQgdG8gYHN0b3JlLmRpc3BhdGNoYC5cbiAgICAgICAgLy8gSWYgdGhpcyBcImFjdGlvblwiIGlzIHJlYWxseSBhIGZ1bmN0aW9uLCBjYWxsIGl0IGFuZCByZXR1cm4gdGhlIHJlc3VsdC5cbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBJbmplY3QgdGhlIHN0b3JlJ3MgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBtZXRob2RzLCBhcyB3ZWxsIGFzIGFueSBcImV4dHJhIGFyZ1wiXG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcGFzcyB0aGUgYWN0aW9uIGRvd24gdGhlIG1pZGRsZXdhcmUgY2hhaW4gYXMgdXN1YWxcblxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIG1pZGRsZXdhcmU7XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpOyAvLyBBdHRhY2ggdGhlIGZhY3RvcnkgZnVuY3Rpb24gc28gdXNlcnMgY2FuIGNyZWF0ZSBhIGN1c3RvbWl6ZWQgdmVyc2lvblxuLy8gd2l0aCB3aGF0ZXZlciBcImV4dHJhIGFyZ1wiIHRoZXkgd2FudCB0byBpbmplY3QgaW50byB0aGVpciB0aHVua3NcblxudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcclxuICAgICAgICB0b1tqXSA9IGZyb21baV07XHJcbiAgICByZXR1cm4gdG87XHJcbn07XHJcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XHJcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XHJcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xyXG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XHJcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcclxudmFyIF9fZGVmTm9ybWFsUHJvcCA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHsgcmV0dXJuIGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTsgfTtcclxudmFyIF9fc3ByZWFkVmFsdWVzID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcclxuICAgICAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXHJcbiAgICAgICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcclxuICAgIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2MgPSBfX2dldE93blByb3BTeW1ib2xzKGIpOyBfaSA8IF9jLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcHJvcCA9IF9jW19pXTtcclxuICAgICAgICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxyXG4gICAgICAgICAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiBhO1xyXG59O1xyXG52YXIgX19zcHJlYWRQcm9wcyA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTsgfTtcclxudmFyIF9fYXN5bmMgPSBmdW5jdGlvbiAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHZhciBmdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHN0ZXAgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9O1xyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG4vLyBzcmMvaW5kZXgudHNcclxuaW1wb3J0IHsgZW5hYmxlRVM1IH0gZnJvbSBcImltbWVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBkZWZhdWx0IGFzIGRlZmF1bHQyLCBjdXJyZW50IGFzIGN1cnJlbnQyLCBmcmVlemUsIG9yaWdpbmFsLCBpc0RyYWZ0IGFzIGlzRHJhZnQ0IH0gZnJvbSBcImltbWVyXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIGFzIGNyZWF0ZVNlbGVjdG9yMiB9IGZyb20gXCJyZXNlbGVjdFwiO1xyXG4vLyBzcmMvY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IudHNcclxuaW1wb3J0IHsgY3VycmVudCwgaXNEcmFmdCB9IGZyb20gXCJpbW1lclwiO1xyXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gXCJyZXNlbGVjdFwiO1xyXG52YXIgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICB2YXIgc2VsZWN0b3IgPSBjcmVhdGVTZWxlY3Rvci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xyXG4gICAgdmFyIHdyYXBwZWRTZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhciByZXN0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgcmVzdFtfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaXNEcmFmdCh2YWx1ZSkgPyBjdXJyZW50KHZhbHVlKSA6IHZhbHVlXSwgcmVzdCkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiB3cmFwcGVkU2VsZWN0b3I7XHJcbn07XHJcbi8vIHNyYy9jb25maWd1cmVTdG9yZS50c1xyXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgY29tcG9zZSBhcyBjb21wb3NlMiwgYXBwbHlNaWRkbGV3YXJlLCBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcclxuLy8gc3JjL2RldnRvb2xzRXh0ZW5zaW9uLnRzXHJcbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tIFwicmVkdXhcIjtcclxudmFyIGNvbXBvc2VXaXRoRGV2VG9vbHMgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIDogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcclxuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgIHJldHVybiBjb21wb3NlO1xyXG4gICAgcmV0dXJuIGNvbXBvc2UuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxufTtcclxudmFyIGRldlRvb2xzRW5oYW5jZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vb3AyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vb3AyO1xyXG4gICAgfTtcclxufTtcclxuLy8gc3JjL2lzUGxhaW5PYmplY3QudHNcclxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xyXG4gICAgaWYgKHByb3RvID09PSBudWxsKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgdmFyIGJhc2VQcm90byA9IHByb3RvO1xyXG4gICAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihiYXNlUHJvdG8pICE9PSBudWxsKSB7XHJcbiAgICAgICAgYmFzZVByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2VQcm90byk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJvdG8gPT09IGJhc2VQcm90bztcclxufVxyXG4vLyBzcmMvZ2V0RGVmYXVsdE1pZGRsZXdhcmUudHNcclxuaW1wb3J0IHRodW5rTWlkZGxld2FyZSBmcm9tIFwicmVkdXgtdGh1bmtcIjtcclxuLy8gc3JjL3V0aWxzLnRzXHJcbmltcG9ydCBjcmVhdGVOZXh0U3RhdGUsIHsgaXNEcmFmdGFibGUgfSBmcm9tIFwiaW1tZXJcIjtcclxuZnVuY3Rpb24gZ2V0VGltZU1lYXN1cmVVdGlscyhtYXhEZWxheSwgZm5OYW1lKSB7XHJcbiAgICB2YXIgZWxhcHNlZCA9IDA7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1lYXN1cmVUaW1lOiBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmluaXNoZWQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgZWxhcHNlZCArPSBmaW5pc2hlZCAtIHN0YXJ0ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHdhcm5JZkV4Y2VlZGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChlbGFwc2VkID4gbWF4RGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybihmbk5hbWUgKyBcIiB0b29rIFwiICsgZWxhcHNlZCArIFwibXMsIHdoaWNoIGlzIG1vcmUgdGhhbiB0aGUgd2FybmluZyB0aHJlc2hvbGQgb2YgXCIgKyBtYXhEZWxheSArIFwibXMuIFxcbklmIHlvdXIgc3RhdGUgb3IgYWN0aW9ucyBhcmUgdmVyeSBsYXJnZSwgeW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhlIG1pZGRsZXdhcmUgYXMgaXQgbWlnaHQgY2F1c2UgdG9vIG11Y2ggb2YgYSBzbG93ZG93biBpbiBkZXZlbG9wbWVudCBtb2RlLiBTZWUgaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvZ2V0RGVmYXVsdE1pZGRsZXdhcmUgZm9yIGluc3RydWN0aW9ucy5cXG5JdCBpcyBkaXNhYmxlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcywgc28geW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhhdC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbnZhciBNaWRkbGV3YXJlQXJyYXkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTWlkZGxld2FyZUFycmF5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTWlkZGxld2FyZUFycmF5KCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuYXBwbHkodGhpcywgYXJncykgfHwgdGhpcztcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGUpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNaWRkbGV3YXJlQXJyYXksIFN5bWJvbC5zcGVjaWVzLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5jb25jYXQuYXBwbHkodGhpcywgYXJyKTtcclxuICAgIH07XHJcbiAgICBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyclswXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoTWlkZGxld2FyZUFycmF5LmJpbmQuYXBwbHkoTWlkZGxld2FyZUFycmF5LCBfX3NwcmVhZEFycmF5KFt2b2lkIDBdLCBhcnJbMF0uY29uY2F0KHRoaXMpKSkpKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgKE1pZGRsZXdhcmVBcnJheS5iaW5kLmFwcGx5KE1pZGRsZXdhcmVBcnJheSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgYXJyLmNvbmNhdCh0aGlzKSkpKSgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XHJcbn0oQXJyYXkpKTtcclxuZnVuY3Rpb24gZnJlZXplRHJhZnRhYmxlKHZhbCkge1xyXG4gICAgcmV0dXJuIGlzRHJhZnRhYmxlKHZhbCkgPyBjcmVhdGVOZXh0U3RhdGUodmFsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB9KSA6IHZhbDtcclxufVxyXG4vLyBzcmMvaW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLnRzXHJcbnZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCI7XHJcbnZhciBwcmVmaXggPSBcIkludmFyaWFudCBmYWlsZWRcIjtcclxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKGNvbmRpdGlvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCBcIlwiKSk7XHJcbn1cclxuZnVuY3Rpb24gc3RyaW5naWZ5KG9iaiwgc2VyaWFsaXplciwgaW5kZW50LCBkZWN5Y2xlcikge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSwgaW5kZW50KTtcclxufVxyXG5mdW5jdGlvbiBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpIHtcclxuICAgIHZhciBzdGFjayA9IFtdLCBrZXlzID0gW107XHJcbiAgICBpZiAoIWRlY3ljbGVyKVxyXG4gICAgICAgIGRlY3ljbGVyID0gZnVuY3Rpb24gKF8sIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChzdGFja1swXSA9PT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXIgfl1cIjtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW0NpcmN1bGFyIH4uXCIgKyBrZXlzLnNsaWNlKDAsIHN0YWNrLmluZGV4T2YodmFsdWUpKS5qb2luKFwiLlwiKSArIFwiXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgdGhpc1BvcyA9IHN0YWNrLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgIH50aGlzUG9zID8gc3RhY2suc3BsaWNlKHRoaXNQb3MgKyAxKSA6IHN0YWNrLnB1c2godGhpcyk7XHJcbiAgICAgICAgICAgIH50aGlzUG9zID8ga2V5cy5zcGxpY2UodGhpc1BvcywgSW5maW5pdHksIGtleSkgOiBrZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgaWYgKH5zdGFjay5pbmRleE9mKHZhbHVlKSlcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVjeWNsZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gc2VyaWFsaXplciA9PSBudWxsID8gdmFsdWUgOiBzZXJpYWxpemVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzSW1tdXRhYmxlRGVmYXVsdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PSBudWxsIHx8IE9iamVjdC5pc0Zyb3plbih2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gdHJhY2tGb3JNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopIHtcclxuICAgIHZhciB0cmFja2VkUHJvcGVydGllcyA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRldGVjdE11dGF0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnRpZXMsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmosIHBhdGgpIHtcclxuICAgIGlmIChpZ25vcmVQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZVBhdGhzID0gW107IH1cclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIHZhciB0cmFja2VkID0geyB2YWx1ZTogb2JqIH07XHJcbiAgICBpZiAoIWlzSW1tdXRhYmxlKG9iaikpIHtcclxuICAgICAgICB0cmFja2VkLmNoaWxkcmVuID0ge307XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICAgICAgaWYgKGlnbm9yZVBhdGhzLmxlbmd0aCAmJiBpZ25vcmVQYXRocy5pbmRleE9mKGNoaWxkUGF0aCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cmFja2VkLmNoaWxkcmVuW2tleV0gPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmpba2V5XSwgY2hpbGRQYXRoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJhY2tlZDtcclxufVxyXG5mdW5jdGlvbiBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocywgdHJhY2tlZFByb3BlcnR5LCBvYmosIHNhbWVQYXJlbnRSZWYsIHBhdGgpIHtcclxuICAgIGlmIChpZ25vcmVkUGF0aHMgPT09IHZvaWQgMCkgeyBpZ25vcmVkUGF0aHMgPSBbXTsgfVxyXG4gICAgaWYgKHNhbWVQYXJlbnRSZWYgPT09IHZvaWQgMCkgeyBzYW1lUGFyZW50UmVmID0gZmFsc2U7IH1cclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIHZhciBwcmV2T2JqID0gdHJhY2tlZFByb3BlcnR5ID8gdHJhY2tlZFByb3BlcnR5LnZhbHVlIDogdm9pZCAwO1xyXG4gICAgdmFyIHNhbWVSZWYgPSBwcmV2T2JqID09PSBvYmo7XHJcbiAgICBpZiAoc2FtZVBhcmVudFJlZiAmJiAhc2FtZVJlZiAmJiAhTnVtYmVyLmlzTmFOKG9iaikpIHtcclxuICAgICAgICByZXR1cm4geyB3YXNNdXRhdGVkOiB0cnVlLCBwYXRoOiBwYXRoIH07XHJcbiAgICB9XHJcbiAgICBpZiAoaXNJbW11dGFibGUocHJldk9iaikgfHwgaXNJbW11dGFibGUob2JqKSkge1xyXG4gICAgICAgIHJldHVybiB7IHdhc011dGF0ZWQ6IGZhbHNlIH07XHJcbiAgICB9XHJcbiAgICB2YXIga2V5c1RvRGV0ZWN0ID0ge307XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuKSB7XHJcbiAgICAgICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHZhciBoYXNJZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMubGVuZ3RoID4gMDtcclxuICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBuZXN0ZWRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICBpZiAoaGFzSWdub3JlZFBhdGhzKSB7XHJcbiAgICAgICAgICAgIHZhciBoYXNNYXRjaGVzID0gaWdub3JlZFBhdGhzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpZ25vcmVkIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlnbm9yZWQudGVzdChuZXN0ZWRQYXRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXN0ZWRQYXRoID09PSBpZ25vcmVkO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGhhc01hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzLCB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW5ba2V5XSwgb2JqW2tleV0sIHNhbWVSZWYsIG5lc3RlZFBhdGgpO1xyXG4gICAgICAgIGlmIChyZXN1bHQud2FzTXV0YXRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogcmVzdWx0IH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZvciAodmFyIGtleSBpbiBrZXlzVG9EZXRlY3QpIHtcclxuICAgICAgICB2YXIgc3RhdGVfMSA9IF9sb29wXzEoa2V5KTtcclxuICAgICAgICBpZiAodHlwZW9mIHN0YXRlXzEgPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZV8xLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogZmFsc2UgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIG5leHQoYWN0aW9uKTsgfTsgfTsgfTtcclxuICAgIH1cclxuICAgIHZhciBfYyA9IG9wdGlvbnMuaXNJbW11dGFibGUsIGlzSW1tdXRhYmxlID0gX2MgPT09IHZvaWQgMCA/IGlzSW1tdXRhYmxlRGVmYXVsdCA6IF9jLCBpZ25vcmVkUGF0aHMgPSBvcHRpb25zLmlnbm9yZWRQYXRocywgX2QgPSBvcHRpb25zLndhcm5BZnRlciwgd2FybkFmdGVyID0gX2QgPT09IHZvaWQgMCA/IDMyIDogX2QsIGlnbm9yZSA9IG9wdGlvbnMuaWdub3JlO1xyXG4gICAgaWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzIHx8IGlnbm9yZTtcclxuICAgIHZhciB0cmFjayA9IHRyYWNrRm9yTXV0YXRpb25zLmJpbmQobnVsbCwgaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocyk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgdmFyIGdldFN0YXRlID0gX2MuZ2V0U3RhdGU7XHJcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICB2YXIgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsIFwiSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlXCIpO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnQoIXJlc3VsdC53YXNNdXRhdGVkLCBcIkEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGJldHdlZW4gZGlzcGF0Y2hlcywgaW4gdGhlIHBhdGggJ1wiICsgKHJlc3VsdC5wYXRoIHx8IFwiXCIpICsgXCInLiAgVGhpcyBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgZGlzcGF0Y2hlZEFjdGlvbiA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Lndhc011dGF0ZWQgJiYgaW52YXJpYW50KCFyZXN1bHQud2FzTXV0YXRlZCwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBpbnNpZGUgYSBkaXNwYXRjaCwgaW4gdGhlIHBhdGg6IFwiICsgKHJlc3VsdC5wYXRoIHx8IFwiXCIpICsgXCIuIFRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoZSBhY3Rpb24gXCIgKyBzdHJpbmdpZnkoYWN0aW9uKSArIFwiLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoZWRBY3Rpb247XHJcbiAgICAgICAgfTsgfTtcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL3NlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZS50c1xyXG5mdW5jdGlvbiBpc1BsYWluKHZhbCkge1xyXG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xyXG4gICAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgfHwgdHlwZSA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KHZhbCkgfHwgaXNQbGFpbk9iamVjdCh2YWwpO1xyXG59XHJcbmZ1bmN0aW9uIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZSh2YWx1ZSwgcGF0aCwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocywgY2FjaGUpIHtcclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIGlmIChpc1NlcmlhbGl6YWJsZSA9PT0gdm9pZCAwKSB7IGlzU2VyaWFsaXphYmxlID0gaXNQbGFpbjsgfVxyXG4gICAgaWYgKGlnbm9yZWRQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZWRQYXRocyA9IFtdOyB9XHJcbiAgICB2YXIgZm91bmROZXN0ZWRTZXJpYWxpemFibGU7XHJcbiAgICBpZiAoIWlzU2VyaWFsaXphYmxlKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGtleVBhdGg6IHBhdGggfHwgXCI8cm9vdD5cIixcclxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoY2FjaGUgPT0gbnVsbCA/IHZvaWQgMCA6IGNhY2hlLmhhcyh2YWx1ZSkpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGVudHJpZXMgPSBnZXRFbnRyaWVzICE9IG51bGwgPyBnZXRFbnRyaWVzKHZhbHVlKSA6IE9iamVjdC5lbnRyaWVzKHZhbHVlKTtcclxuICAgIHZhciBoYXNJZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMubGVuZ3RoID4gMDtcclxuICAgIHZhciBfbG9vcF8yID0gZnVuY3Rpb24gKGtleSwgbmVzdGVkVmFsdWUpIHtcclxuICAgICAgICB2YXIgbmVzdGVkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XHJcbiAgICAgICAgaWYgKGhhc0lnbm9yZWRQYXRocykge1xyXG4gICAgICAgICAgICB2YXIgaGFzTWF0Y2hlcyA9IGlnbm9yZWRQYXRocy5zb21lKGZ1bmN0aW9uIChpZ25vcmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlZCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZ25vcmVkLnRlc3QobmVzdGVkUGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmVzdGVkUGF0aCA9PT0gaWdub3JlZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChoYXNNYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNTZXJpYWxpemFibGUobmVzdGVkVmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5UGF0aDogbmVzdGVkUGF0aCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmVzdGVkVmFsdWVcclxuICAgICAgICAgICAgICAgIH0gfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuZXN0ZWRWYWx1ZSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShuZXN0ZWRWYWx1ZSwgbmVzdGVkUGF0aCwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocywgY2FjaGUpO1xyXG4gICAgICAgICAgICBpZiAoZm91bmROZXN0ZWRTZXJpYWxpemFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgZW50cmllc18xID0gZW50cmllczsgX2kgPCBlbnRyaWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIF9jID0gZW50cmllc18xW19pXSwga2V5ID0gX2NbMF0sIG5lc3RlZFZhbHVlID0gX2NbMV07XHJcbiAgICAgICAgdmFyIHN0YXRlXzIgPSBfbG9vcF8yKGtleSwgbmVzdGVkVmFsdWUpO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGVfMiA9PT0gXCJvYmplY3RcIilcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlXzIudmFsdWU7XHJcbiAgICB9XHJcbiAgICBpZiAoY2FjaGUgJiYgaXNOZXN0ZWRGcm96ZW4odmFsdWUpKVxyXG4gICAgICAgIGNhY2hlLmFkZCh2YWx1ZSk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gaXNOZXN0ZWRGcm96ZW4odmFsdWUpIHtcclxuICAgIGlmICghT2JqZWN0LmlzRnJvemVuKHZhbHVlKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9jID0gT2JqZWN0LnZhbHVlcyh2YWx1ZSk7IF9pIDwgX2MubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIG5lc3RlZFZhbHVlID0gX2NbX2ldO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbmVzdGVkVmFsdWUgIT09IFwib2JqZWN0XCIgfHwgbmVzdGVkVmFsdWUgPT09IG51bGwpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIGlmICghaXNOZXN0ZWRGcm96ZW4obmVzdGVkVmFsdWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIG5leHQoYWN0aW9uKTsgfTsgfTsgfTtcclxuICAgIH1cclxuICAgIHZhciBfYyA9IG9wdGlvbnMuaXNTZXJpYWxpemFibGUsIGlzU2VyaWFsaXphYmxlID0gX2MgPT09IHZvaWQgMCA/IGlzUGxhaW4gOiBfYywgZ2V0RW50cmllcyA9IG9wdGlvbnMuZ2V0RW50cmllcywgX2QgPSBvcHRpb25zLmlnbm9yZWRBY3Rpb25zLCBpZ25vcmVkQWN0aW9ucyA9IF9kID09PSB2b2lkIDAgPyBbXSA6IF9kLCBfZSA9IG9wdGlvbnMuaWdub3JlZEFjdGlvblBhdGhzLCBpZ25vcmVkQWN0aW9uUGF0aHMgPSBfZSA9PT0gdm9pZCAwID8gW1wibWV0YS5hcmdcIiwgXCJtZXRhLmJhc2VRdWVyeU1ldGFcIl0gOiBfZSwgX2YgPSBvcHRpb25zLmlnbm9yZWRQYXRocywgaWdub3JlZFBhdGhzID0gX2YgPT09IHZvaWQgMCA/IFtdIDogX2YsIF9nID0gb3B0aW9ucy53YXJuQWZ0ZXIsIHdhcm5BZnRlciA9IF9nID09PSB2b2lkIDAgPyAzMiA6IF9nLCBfaCA9IG9wdGlvbnMuaWdub3JlU3RhdGUsIGlnbm9yZVN0YXRlID0gX2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX2gsIF9qID0gb3B0aW9ucy5pZ25vcmVBY3Rpb25zLCBpZ25vcmVBY3Rpb25zID0gX2ogPT09IHZvaWQgMCA/IGZhbHNlIDogX2osIF9rID0gb3B0aW9ucy5kaXNhYmxlQ2FjaGUsIGRpc2FibGVDYWNoZSA9IF9rID09PSB2b2lkIDAgPyBmYWxzZSA6IF9rO1xyXG4gICAgdmFyIGNhY2hlID0gIWRpc2FibGVDYWNoZSAmJiBXZWFrU2V0ID8gbmV3IFdlYWtTZXQoKSA6IHZvaWQgMDtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVBUEkpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsIFwiU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlXCIpO1xyXG4gICAgICAgIGlmICghaWdub3JlQWN0aW9ucyAmJiAhKGlnbm9yZWRBY3Rpb25zLmxlbmd0aCAmJiBpZ25vcmVkQWN0aW9ucy5pbmRleE9mKGFjdGlvbi50eXBlKSAhPT0gLTEpKSB7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShhY3Rpb24sIFwiXCIsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkQWN0aW9uUGF0aHMsIGNhY2hlKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLmtleVBhdGgsIHZhbHVlID0gZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiBhbiBhY3Rpb24sIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIGxvZ2ljIHRoYXQgZGlzcGF0Y2hlZCB0aGlzIGFjdGlvbjogXCIsIGFjdGlvbiwgXCJcXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9hY3Rpb25zI3doeS1zaG91bGQtdHlwZS1iZS1hLXN0cmluZy1vci1hdC1sZWFzdC1zZXJpYWxpemFibGUtd2h5LXNob3VsZC1teS1hY3Rpb24tdHlwZXMtYmUtY29uc3RhbnRzKVwiLCBcIlxcbihUbyBhbGxvdyBub24tc2VyaWFsaXphYmxlIHZhbHVlcyBzZWU6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvdXNhZ2UvdXNhZ2UtZ3VpZGUjd29ya2luZy13aXRoLW5vbi1zZXJpYWxpemFibGUtZGF0YSlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlnbm9yZVN0YXRlKSB7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZUFQSS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShzdGF0ZSwgXCJcIiwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocywgY2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXlQYXRoID0gZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlLmtleVBhdGgsIHZhbHVlID0gZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBIG5vbi1zZXJpYWxpemFibGUgdmFsdWUgd2FzIGRldGVjdGVkIGluIHRoZSBzdGF0ZSwgaW4gdGhlIHBhdGg6IGBcIiArIGtleVBhdGggKyBcImAuIFZhbHVlOlwiLCB2YWx1ZSwgXCJcXG5UYWtlIGEgbG9vayBhdCB0aGUgcmVkdWNlcihzKSBoYW5kbGluZyB0aGlzIGFjdGlvbiB0eXBlOiBcIiArIGFjdGlvbi50eXBlICsgXCIuXFxuKFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9mYXEvb3JnYW5pemluZy1zdGF0ZSNjYW4taS1wdXQtZnVuY3Rpb25zLXByb21pc2VzLW9yLW90aGVyLW5vbi1zZXJpYWxpemFibGUtaXRlbXMtaW4tbXktc3RvcmUtc3RhdGUpXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLndhcm5JZkV4Y2VlZGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9OyB9OyB9O1xyXG59XHJcbi8vIHNyYy9nZXREZWZhdWx0TWlkZGxld2FyZS50c1xyXG5mdW5jdGlvbiBpc0Jvb2xlYW4oeCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcImJvb2xlYW5cIjtcclxufVxyXG5mdW5jdGlvbiBjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBnZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgdmFyIF9jID0gb3B0aW9ucy50aHVuaywgdGh1bmsgPSBfYyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9jLCBfZCA9IG9wdGlvbnMuaW1tdXRhYmxlQ2hlY2ssIGltbXV0YWJsZUNoZWNrID0gX2QgPT09IHZvaWQgMCA/IHRydWUgOiBfZCwgX2UgPSBvcHRpb25zLnNlcmlhbGl6YWJsZUNoZWNrLCBzZXJpYWxpemFibGVDaGVjayA9IF9lID09PSB2b2lkIDAgPyB0cnVlIDogX2U7XHJcbiAgICB2YXIgbWlkZGxld2FyZUFycmF5ID0gbmV3IE1pZGRsZXdhcmVBcnJheSgpO1xyXG4gICAgaWYgKHRodW5rKSB7XHJcbiAgICAgICAgaWYgKGlzQm9vbGVhbih0aHVuaykpIHtcclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2godGh1bmtNaWRkbGV3YXJlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKHRodW5rTWlkZGxld2FyZS53aXRoRXh0cmFBcmd1bWVudCh0aHVuay5leHRyYUFyZ3VtZW50KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIGlmIChpbW11dGFibGVDaGVjaykge1xyXG4gICAgICAgICAgICB2YXIgaW1tdXRhYmxlT3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAoIWlzQm9vbGVhbihpbW11dGFibGVDaGVjaykpIHtcclxuICAgICAgICAgICAgICAgIGltbXV0YWJsZU9wdGlvbnMgPSBpbW11dGFibGVDaGVjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkudW5zaGlmdChjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoaW1tdXRhYmxlT3B0aW9ucykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2VyaWFsaXphYmxlQ2hlY2spIHtcclxuICAgICAgICAgICAgdmFyIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgaWYgKCFpc0Jvb2xlYW4oc2VyaWFsaXphYmxlQ2hlY2spKSB7XHJcbiAgICAgICAgICAgICAgICBzZXJpYWxpemFibGVPcHRpb25zID0gc2VyaWFsaXphYmxlQ2hlY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2goY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKHNlcmlhbGl6YWJsZU9wdGlvbnMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWlkZGxld2FyZUFycmF5O1xyXG59XHJcbi8vIHNyYy9jb25maWd1cmVTdG9yZS50c1xyXG52YXIgSVNfUFJPRFVDVElPTiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIjtcclxuZnVuY3Rpb24gY29uZmlndXJlU3RvcmUob3B0aW9ucykge1xyXG4gICAgdmFyIGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSA9IGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKTtcclxuICAgIHZhciBfYyA9IG9wdGlvbnMgfHwge30sIF9kID0gX2MucmVkdWNlciwgcmVkdWNlciA9IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZCwgX2UgPSBfYy5taWRkbGV3YXJlLCBtaWRkbGV3YXJlID0gX2UgPT09IHZvaWQgMCA/IGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSgpIDogX2UsIF9mID0gX2MuZGV2VG9vbHMsIGRldlRvb2xzID0gX2YgPT09IHZvaWQgMCA/IHRydWUgOiBfZiwgX2cgPSBfYy5wcmVsb2FkZWRTdGF0ZSwgcHJlbG9hZGVkU3RhdGUgPSBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2csIF9oID0gX2MuZW5oYW5jZXJzLCBlbmhhbmNlcnMgPSBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2g7XHJcbiAgICB2YXIgcm9vdFJlZHVjZXI7XHJcbiAgICBpZiAodHlwZW9mIHJlZHVjZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHJvb3RSZWR1Y2VyID0gcmVkdWNlcjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocmVkdWNlcikpIHtcclxuICAgICAgICByb290UmVkdWNlciA9IGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2VyKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXCJyZWR1Y2VyXCIgaXMgYSByZXF1aXJlZCBhcmd1bWVudCwgYW5kIG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgb2YgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBjb21iaW5lUmVkdWNlcnMnKTtcclxuICAgIH1cclxuICAgIHZhciBmaW5hbE1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlO1xyXG4gICAgaWYgKHR5cGVvZiBmaW5hbE1pZGRsZXdhcmUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIGZpbmFsTWlkZGxld2FyZSA9IGZpbmFsTWlkZGxld2FyZShjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUpO1xyXG4gICAgICAgIGlmICghSVNfUFJPRFVDVElPTiAmJiAhQXJyYXkuaXNBcnJheShmaW5hbE1pZGRsZXdhcmUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIndoZW4gdXNpbmcgYSBtaWRkbGV3YXJlIGJ1aWxkZXIgZnVuY3Rpb24sIGFuIGFycmF5IG9mIG1pZGRsZXdhcmUgbXVzdCBiZSByZXR1cm5lZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIUlTX1BST0RVQ1RJT04gJiYgZmluYWxNaWRkbGV3YXJlLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIHR5cGVvZiBpdGVtICE9PSBcImZ1bmN0aW9uXCI7IH0pKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZWFjaCBtaWRkbGV3YXJlIHByb3ZpZGVkIHRvIGNvbmZpZ3VyZVN0b3JlIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcclxuICAgIH1cclxuICAgIHZhciBtaWRkbGV3YXJlRW5oYW5jZXIgPSBhcHBseU1pZGRsZXdhcmUuYXBwbHkodm9pZCAwLCBmaW5hbE1pZGRsZXdhcmUpO1xyXG4gICAgdmFyIGZpbmFsQ29tcG9zZSA9IGNvbXBvc2UyO1xyXG4gICAgaWYgKGRldlRvb2xzKSB7XHJcbiAgICAgICAgZmluYWxDb21wb3NlID0gY29tcG9zZVdpdGhEZXZUb29scyhfX3NwcmVhZFZhbHVlcyh7XHJcbiAgICAgICAgICAgIHRyYWNlOiAhSVNfUFJPRFVDVElPTlxyXG4gICAgICAgIH0sIHR5cGVvZiBkZXZUb29scyA9PT0gXCJvYmplY3RcIiAmJiBkZXZUb29scykpO1xyXG4gICAgfVxyXG4gICAgdmFyIHN0b3JlRW5oYW5jZXJzID0gW21pZGRsZXdhcmVFbmhhbmNlcl07XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbmhhbmNlcnMpKSB7XHJcbiAgICAgICAgc3RvcmVFbmhhbmNlcnMgPSBfX3NwcmVhZEFycmF5KFttaWRkbGV3YXJlRW5oYW5jZXJdLCBlbmhhbmNlcnMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGVuaGFuY2VycyA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgc3RvcmVFbmhhbmNlcnMgPSBlbmhhbmNlcnMoc3RvcmVFbmhhbmNlcnMpO1xyXG4gICAgfVxyXG4gICAgdmFyIGNvbXBvc2VkRW5oYW5jZXIgPSBmaW5hbENvbXBvc2UuYXBwbHkodm9pZCAwLCBzdG9yZUVuaGFuY2Vycyk7XHJcbiAgICByZXR1cm4gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBjb21wb3NlZEVuaGFuY2VyKTtcclxufVxyXG4vLyBzcmMvY3JlYXRlQWN0aW9uLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZUFjdGlvbih0eXBlLCBwcmVwYXJlQWN0aW9uKSB7XHJcbiAgICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJlcGFyZUFjdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgcHJlcGFyZWQgPSBwcmVwYXJlQWN0aW9uLmFwcGx5KHZvaWQgMCwgYXJncyk7XHJcbiAgICAgICAgICAgIGlmICghcHJlcGFyZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInByZXBhcmVBY3Rpb24gZGlkIG5vdCByZXR1cm4gYW4gb2JqZWN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogcHJlcGFyZWQucGF5bG9hZFxyXG4gICAgICAgICAgICB9LCBcIm1ldGFcIiBpbiBwcmVwYXJlZCAmJiB7IG1ldGE6IHByZXBhcmVkLm1ldGEgfSksIFwiZXJyb3JcIiBpbiBwcmVwYXJlZCAmJiB7IGVycm9yOiBwcmVwYXJlZC5lcnJvciB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgcGF5bG9hZDogYXJnc1swXSB9O1xyXG4gICAgfVxyXG4gICAgYWN0aW9uQ3JlYXRvci50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFwiXCIgKyB0eXBlOyB9O1xyXG4gICAgYWN0aW9uQ3JlYXRvci50eXBlID0gdHlwZTtcclxuICAgIGFjdGlvbkNyZWF0b3IubWF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24udHlwZSA9PT0gdHlwZTsgfTtcclxuICAgIHJldHVybiBhY3Rpb25DcmVhdG9yO1xyXG59XHJcbmZ1bmN0aW9uIGlzRlNBKGFjdGlvbikge1xyXG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3QoYWN0aW9uKSAmJiB0eXBlb2YgYWN0aW9uLnR5cGUgPT09IFwic3RyaW5nXCIgJiYgT2JqZWN0LmtleXMoYWN0aW9uKS5ldmVyeShpc1ZhbGlkS2V5KTtcclxufVxyXG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xyXG4gICAgcmV0dXJuIFtcInR5cGVcIiwgXCJwYXlsb2FkXCIsIFwiZXJyb3JcIiwgXCJtZXRhXCJdLmluZGV4T2Yoa2V5KSA+IC0xO1xyXG59XHJcbmZ1bmN0aW9uIGdldFR5cGUoYWN0aW9uQ3JlYXRvcikge1xyXG4gICAgcmV0dXJuIFwiXCIgKyBhY3Rpb25DcmVhdG9yO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXHJcbmltcG9ydCBjcmVhdGVOZXh0U3RhdGUyLCB7IGlzRHJhZnQgYXMgaXNEcmFmdDIsIGlzRHJhZnRhYmxlIGFzIGlzRHJhZnRhYmxlMiB9IGZyb20gXCJpbW1lclwiO1xyXG4vLyBzcmMvbWFwQnVpbGRlcnMudHNcclxuZnVuY3Rpb24gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2soYnVpbGRlckNhbGxiYWNrKSB7XHJcbiAgICB2YXIgYWN0aW9uc01hcCA9IHt9O1xyXG4gICAgdmFyIGFjdGlvbk1hdGNoZXJzID0gW107XHJcbiAgICB2YXIgZGVmYXVsdENhc2VSZWR1Y2VyO1xyXG4gICAgdmFyIGJ1aWxkZXIgPSB7XHJcbiAgICAgICAgYWRkQ2FzZTogZnVuY3Rpb24gKHR5cGVPckFjdGlvbkNyZWF0b3IsIHJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbk1hdGNoZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkTWF0Y2hlcmBcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkQ2FzZWAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZERlZmF1bHRDYXNlYFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiB0eXBlT3JBY3Rpb25DcmVhdG9yID09PSBcInN0cmluZ1wiID8gdHlwZU9yQWN0aW9uQ3JlYXRvciA6IHR5cGVPckFjdGlvbkNyZWF0b3IudHlwZTtcclxuICAgICAgICAgICAgaWYgKHR5cGUgaW4gYWN0aW9uc01hcCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWRkQ2FzZSBjYW5ub3QgYmUgY2FsbGVkIHdpdGggdHdvIHJlZHVjZXJzIGZvciB0aGUgc2FtZSBhY3Rpb24gdHlwZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3Rpb25zTWFwW3R5cGVdID0gcmVkdWNlcjtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhZGRNYXRjaGVyOiBmdW5jdGlvbiAobWF0Y2hlciwgcmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkTWF0Y2hlcmAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZERlZmF1bHRDYXNlYFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3Rpb25NYXRjaGVycy5wdXNoKHsgbWF0Y2hlcjogbWF0Y2hlciwgcmVkdWNlcjogcmVkdWNlciB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhZGREZWZhdWx0Q2FzZTogZnVuY3Rpb24gKHJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZERlZmF1bHRDYXNlYCBjYW4gb25seSBiZSBjYWxsZWQgb25jZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0Q2FzZVJlZHVjZXIgPSByZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYnVpbGRlckNhbGxiYWNrKGJ1aWxkZXIpO1xyXG4gICAgcmV0dXJuIFthY3Rpb25zTWFwLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXTtcclxufVxyXG4vLyBzcmMvY3JlYXRlUmVkdWNlci50c1xyXG5mdW5jdGlvbiBpc1N0YXRlRnVuY3Rpb24oeCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCI7XHJcbn1cclxudmFyIGhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24gPSBmYWxzZTtcclxuZnVuY3Rpb24gY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUsIG1hcE9yQnVpbGRlckNhbGxiYWNrLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICBpZiAoYWN0aW9uTWF0Y2hlcnMgPT09IHZvaWQgMCkgeyBhY3Rpb25NYXRjaGVycyA9IFtdOyB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICBpZiAoIWhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIG9iamVjdCBub3RhdGlvbiBmb3IgYGNyZWF0ZVJlZHVjZXJgIGlzIGRlcHJlY2F0ZWQsIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUlRLIDIuMC4gUGxlYXNlIHVzZSB0aGUgJ2J1aWxkZXIgY2FsbGJhY2snIG5vdGF0aW9uIGluc3RlYWQ6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2NyZWF0ZVJlZHVjZXJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2YXIgX2MgPSB0eXBlb2YgbWFwT3JCdWlsZGVyQ2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG1hcE9yQnVpbGRlckNhbGxiYWNrKSA6IFttYXBPckJ1aWxkZXJDYWxsYmFjaywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcl0sIGFjdGlvbnNNYXAgPSBfY1swXSwgZmluYWxBY3Rpb25NYXRjaGVycyA9IF9jWzFdLCBmaW5hbERlZmF1bHRDYXNlUmVkdWNlciA9IF9jWzJdO1xyXG4gICAgdmFyIGdldEluaXRpYWxTdGF0ZTtcclxuICAgIGlmIChpc1N0YXRlRnVuY3Rpb24oaW5pdGlhbFN0YXRlKSkge1xyXG4gICAgICAgIGdldEluaXRpYWxTdGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyZWV6ZURyYWZ0YWJsZShpbml0aWFsU3RhdGUoKSk7IH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgZnJvemVuSW5pdGlhbFN0YXRlXzEgPSBmcmVlemVEcmFmdGFibGUoaW5pdGlhbFN0YXRlKTtcclxuICAgICAgICBnZXRJbml0aWFsU3RhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBmcm96ZW5Jbml0aWFsU3RhdGVfMTsgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7IHN0YXRlID0gZ2V0SW5pdGlhbFN0YXRlKCk7IH1cclxuICAgICAgICB2YXIgY2FzZVJlZHVjZXJzID0gX19zcHJlYWRBcnJheShbXHJcbiAgICAgICAgICAgIGFjdGlvbnNNYXBbYWN0aW9uLnR5cGVdXHJcbiAgICAgICAgXSwgZmluYWxBY3Rpb25NYXRjaGVycy5maWx0ZXIoZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaGVyID0gX2MubWF0Y2hlcjtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcclxuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHZhciByZWR1Y2VyMiA9IF9jLnJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiByZWR1Y2VyMjtcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgaWYgKGNhc2VSZWR1Y2Vycy5maWx0ZXIoZnVuY3Rpb24gKGNyKSB7IHJldHVybiAhIWNyOyB9KS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgY2FzZVJlZHVjZXJzID0gW2ZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhc2VSZWR1Y2Vycy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzU3RhdGUsIGNhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChjYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRHJhZnQyKHByZXZpb3VzU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyYWZ0ID0gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWlzRHJhZnRhYmxlMihwcmV2aW91c1N0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihwcmV2aW91c1N0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNTdGF0ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJBIGNhc2UgcmVkdWNlciBvbiBhIG5vbi1kcmFmdGFibGUgdmFsdWUgbXVzdCBub3QgcmV0dXJuIHVuZGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVOZXh0U3RhdGUyKHByZXZpb3VzU3RhdGUsIGZ1bmN0aW9uIChkcmFmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgfSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmVkdWNlci5nZXRJbml0aWFsU3RhdGUgPSBnZXRJbml0aWFsU3RhdGU7XHJcbiAgICByZXR1cm4gcmVkdWNlcjtcclxufVxyXG4vLyBzcmMvY3JlYXRlU2xpY2UudHNcclxudmFyIGhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24yID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGdldFR5cGUyKHNsaWNlLCBhY3Rpb25LZXkpIHtcclxuICAgIHJldHVybiBzbGljZSArIFwiL1wiICsgYWN0aW9uS2V5O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVNsaWNlKG9wdGlvbnMpIHtcclxuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lO1xyXG4gICAgaWYgKCFuYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYG5hbWVgIGlzIGEgcmVxdWlyZWQgb3B0aW9uIGZvciBjcmVhdGVTbGljZVwiKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaW5pdGlhbFN0YXRlID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSBtdXN0IHByb3ZpZGUgYW4gYGluaXRpYWxTdGF0ZWAgdmFsdWUgdGhhdCBpcyBub3QgYHVuZGVmaW5lZGAuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGBpbml0aWFsU3RhdGVgXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBpbml0aWFsU3RhdGUgPSB0eXBlb2Ygb3B0aW9ucy5pbml0aWFsU3RhdGUgPT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucy5pbml0aWFsU3RhdGUgOiBmcmVlemVEcmFmdGFibGUob3B0aW9ucy5pbml0aWFsU3RhdGUpO1xyXG4gICAgdmFyIHJlZHVjZXJzID0gb3B0aW9ucy5yZWR1Y2VycyB8fCB7fTtcclxuICAgIHZhciByZWR1Y2VyTmFtZXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XHJcbiAgICB2YXIgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUgPSB7fTtcclxuICAgIHZhciBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSA9IHt9O1xyXG4gICAgdmFyIGFjdGlvbkNyZWF0b3JzID0ge307XHJcbiAgICByZWR1Y2VyTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocmVkdWNlck5hbWUpIHtcclxuICAgICAgICB2YXIgbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUgPSByZWR1Y2Vyc1tyZWR1Y2VyTmFtZV07XHJcbiAgICAgICAgdmFyIHR5cGUgPSBnZXRUeXBlMihuYW1lLCByZWR1Y2VyTmFtZSk7XHJcbiAgICAgICAgdmFyIGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIHZhciBwcmVwYXJlQ2FsbGJhY2s7XHJcbiAgICAgICAgaWYgKFwicmVkdWNlclwiIGluIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlKSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucmVkdWNlcjtcclxuICAgICAgICAgICAgcHJlcGFyZUNhbGxiYWNrID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucHJlcGFyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lW3JlZHVjZXJOYW1lXSA9IGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlW3R5cGVdID0gY2FzZVJlZHVjZXI7XHJcbiAgICAgICAgYWN0aW9uQ3JlYXRvcnNbcmVkdWNlck5hbWVdID0gcHJlcGFyZUNhbGxiYWNrID8gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVDYWxsYmFjaykgOiBjcmVhdGVBY3Rpb24odHlwZSk7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIGJ1aWxkUmVkdWNlcigpIHtcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbjIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRoZSBvYmplY3Qgbm90YXRpb24gZm9yIGBjcmVhdGVTbGljZS5leHRyYVJlZHVjZXJzYCBpcyBkZXByZWNhdGVkLCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJUSyAyLjAuIFBsZWFzZSB1c2UgdGhlICdidWlsZGVyIGNhbGxiYWNrJyBub3RhdGlvbiBpbnN0ZWFkOiBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL2FwaS9jcmVhdGVTbGljZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX2MgPSB0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSBcImZ1bmN0aW9uXCIgPyBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhvcHRpb25zLmV4dHJhUmVkdWNlcnMpIDogW29wdGlvbnMuZXh0cmFSZWR1Y2Vyc10sIF9kID0gX2NbMF0sIGV4dHJhUmVkdWNlcnMgPSBfZCA9PT0gdm9pZCAwID8ge30gOiBfZCwgX2UgPSBfY1sxXSwgYWN0aW9uTWF0Y2hlcnMgPSBfZSA9PT0gdm9pZCAwID8gW10gOiBfZSwgX2YgPSBfY1syXSwgZGVmYXVsdENhc2VSZWR1Y2VyID0gX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mO1xyXG4gICAgICAgIHZhciBmaW5hbENhc2VSZWR1Y2VycyA9IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBleHRyYVJlZHVjZXJzKSwgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUpO1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgZnVuY3Rpb24gKGJ1aWxkZXIpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGZpbmFsQ2FzZVJlZHVjZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLmFkZENhc2Uoa2V5LCBmaW5hbENhc2VSZWR1Y2Vyc1trZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFjdGlvbk1hdGNoZXJzXzEgPSBhY3Rpb25NYXRjaGVyczsgX2kgPCBhY3Rpb25NYXRjaGVyc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG0gPSBhY3Rpb25NYXRjaGVyc18xW19pXTtcclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkTWF0Y2hlcihtLm1hdGNoZXIsIG0ucmVkdWNlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICAgICAgYnVpbGRlci5hZGREZWZhdWx0Q2FzZShkZWZhdWx0Q2FzZVJlZHVjZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB2YXIgX3JlZHVjZXI7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgcmVkdWNlcjogZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcclxuICAgICAgICAgICAgaWYgKCFfcmVkdWNlcilcclxuICAgICAgICAgICAgICAgIF9yZWR1Y2VyID0gYnVpbGRSZWR1Y2VyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFjdGlvbnM6IGFjdGlvbkNyZWF0b3JzLFxyXG4gICAgICAgIGNhc2VSZWR1Y2Vyczogc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUsXHJcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghX3JlZHVjZXIpXHJcbiAgICAgICAgICAgICAgICBfcmVkdWNlciA9IGJ1aWxkUmVkdWNlcigpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3JlZHVjZXIuZ2V0SW5pdGlhbFN0YXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvZW50aXR5X3N0YXRlLnRzXHJcbmZ1bmN0aW9uIGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaWRzOiBbXSxcclxuICAgICAgICBlbnRpdGllczoge31cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSgpIHtcclxuICAgIGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZShhZGRpdGlvbmFsU3RhdGUpIHtcclxuICAgICAgICBpZiAoYWRkaXRpb25hbFN0YXRlID09PSB2b2lkIDApIHsgYWRkaXRpb25hbFN0YXRlID0ge307IH1cclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihnZXRJbml0aWFsRW50aXR5U3RhdGUoKSwgYWRkaXRpb25hbFN0YXRlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGdldEluaXRpYWxTdGF0ZTogZ2V0SW5pdGlhbFN0YXRlIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX3NlbGVjdG9ycy50c1xyXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCkge1xyXG4gICAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JzKHNlbGVjdFN0YXRlKSB7XHJcbiAgICAgICAgdmFyIHNlbGVjdElkcyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuaWRzOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RFbnRpdGllcyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuZW50aXRpZXM7IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdEFsbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgc2VsZWN0RW50aXRpZXMsIGZ1bmN0aW9uIChpZHMsIGVudGl0aWVzKSB7IHJldHVybiBpZHMubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gZW50aXRpZXNbaWRdOyB9KTsgfSk7XHJcbiAgICAgICAgdmFyIHNlbGVjdElkID0gZnVuY3Rpb24gKF8sIGlkKSB7IHJldHVybiBpZDsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0QnlJZCA9IGZ1bmN0aW9uIChlbnRpdGllcywgaWQpIHsgcmV0dXJuIGVudGl0aWVzW2lkXTsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0VG90YWwgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RJZHMsIGZ1bmN0aW9uIChpZHMpIHsgcmV0dXJuIGlkcy5sZW5ndGg7IH0pO1xyXG4gICAgICAgIGlmICghc2VsZWN0U3RhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdElkczogc2VsZWN0SWRzLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEVudGl0aWVzLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0QWxsOiBzZWxlY3RBbGwsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RUb3RhbDogc2VsZWN0VG90YWwsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RCeUlkOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0RW50aXRpZXMpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNlbGVjdElkczogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdElkcyksXHJcbiAgICAgICAgICAgIHNlbGVjdEVudGl0aWVzOiBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsXHJcbiAgICAgICAgICAgIHNlbGVjdEFsbDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdEFsbCksXHJcbiAgICAgICAgICAgIHNlbGVjdFRvdGFsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0VG90YWwpLFxyXG4gICAgICAgICAgICBzZWxlY3RCeUlkOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsIHNlbGVjdElkLCBzZWxlY3RCeUlkKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBnZXRTZWxlY3RvcnM6IGdldFNlbGVjdG9ycyB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9zdGF0ZV9hZGFwdGVyLnRzXHJcbmltcG9ydCBjcmVhdGVOZXh0U3RhdGUzLCB7IGlzRHJhZnQgYXMgaXNEcmFmdDMgfSBmcm9tIFwiaW1tZXJcIjtcclxuZnVuY3Rpb24gY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcclxuICAgIHZhciBvcGVyYXRvciA9IGNyZWF0ZVN0YXRlT3BlcmF0b3IoZnVuY3Rpb24gKF8sIHN0YXRlKSB7IHJldHVybiBtdXRhdG9yKHN0YXRlKTsgfSk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gb3BlcmF0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHN0YXRlLCB2b2lkIDApO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUsIGFyZykge1xyXG4gICAgICAgIGZ1bmN0aW9uIGlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50KGFyZzIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzRlNBKGFyZzIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcnVuTXV0YXRvciA9IGZ1bmN0aW9uIChkcmFmdCkge1xyXG4gICAgICAgICAgICBpZiAoaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnKSkge1xyXG4gICAgICAgICAgICAgICAgbXV0YXRvcihhcmcucGF5bG9hZCwgZHJhZnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbXV0YXRvcihhcmcsIGRyYWZ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGlzRHJhZnQzKHN0YXRlKSkge1xyXG4gICAgICAgICAgICBydW5NdXRhdG9yKHN0YXRlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZTMoc3RhdGUsIHJ1bk11dGF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3V0aWxzLnRzXHJcbmZ1bmN0aW9uIHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCkge1xyXG4gICAgdmFyIGtleSA9IHNlbGVjdElkKGVudGl0eSk7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGtleSA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIGVudGl0eSBwYXNzZWQgdG8gdGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24gcmV0dXJuZWQgdW5kZWZpbmVkLlwiLCBcIllvdSBzaG91bGQgcHJvYmFibHkgcHJvdmlkZSB5b3VyIG93biBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uLlwiLCBcIlRoZSBlbnRpdHkgdGhhdCB3YXMgcGFzc2VkOlwiLCBlbnRpdHksIFwiVGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb246XCIsIHNlbGVjdElkLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGtleTtcclxufVxyXG5mdW5jdGlvbiBlbnN1cmVFbnRpdGllc0FycmF5KGVudGl0aWVzKSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XHJcbiAgICAgICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbnRpdGllcztcclxufVxyXG5mdW5jdGlvbiBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzKG5ld0VudGl0aWVzLCBzZWxlY3RJZCwgc3RhdGUpIHtcclxuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICB2YXIgYWRkZWQgPSBbXTtcclxuICAgIHZhciB1cGRhdGVkID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzEgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBlbnRpdHkgPSBuZXdFbnRpdGllc18xW19pXTtcclxuICAgICAgICB2YXIgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xyXG4gICAgICAgIGlmIChpZCBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICB1cGRhdGVkLnB1c2goeyBpZDogaWQsIGNoYW5nZXM6IGVudGl0eSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFkZGVkLnB1c2goZW50aXR5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW2FkZGVkLCB1cGRhdGVkXTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvdW5zb3J0ZWRfc3RhdGVfYWRhcHRlci50c1xyXG5mdW5jdGlvbiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCkge1xyXG4gICAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmlkcy5wdXNoKGtleSk7XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNba2V5XSA9IGVudGl0eTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBuZXdFbnRpdGllc18yID0gbmV3RW50aXRpZXM7IF9pIDwgbmV3RW50aXRpZXNfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzJbX2ldO1xyXG4gICAgICAgICAgICBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBrZXkgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xyXG4gICAgICAgIGlmICghKGtleSBpbiBzdGF0ZS5lbnRpdGllcykpIHtcclxuICAgICAgICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNba2V5XSA9IGVudGl0eTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBuZXdFbnRpdGllc18zID0gbmV3RW50aXRpZXM7IF9pIDwgbmV3RW50aXRpZXNfMy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzNbX2ldO1xyXG4gICAgICAgICAgICBzZXRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldEFsbE11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBzdGF0ZS5pZHMgPSBbXTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVPbmVNdXRhYmx5KGtleSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gcmVtb3ZlTWFueU11dGFibHkoW2tleV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZU1hbnlNdXRhYmx5KGtleXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGRpZE11dGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1trZXldO1xyXG4gICAgICAgICAgICAgICAgZGlkTXV0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChkaWRNdXRhdGUpIHtcclxuICAgICAgICAgICAgc3RhdGUuaWRzID0gc3RhdGUuaWRzLmZpbHRlcihmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIGlkIGluIHN0YXRlLmVudGl0aWVzOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVBbGxNdXRhYmx5KHN0YXRlKSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwge1xyXG4gICAgICAgICAgICBpZHM6IFtdLFxyXG4gICAgICAgICAgICBlbnRpdGllczoge31cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHRha2VOZXdLZXkoa2V5cywgdXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBvcmlnaW5hbDIgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xyXG4gICAgICAgIHZhciB1cGRhdGVkID0gT2JqZWN0LmFzc2lnbih7fSwgb3JpZ2luYWwyLCB1cGRhdGUuY2hhbmdlcyk7XHJcbiAgICAgICAgdmFyIG5ld0tleSA9IHNlbGVjdElkVmFsdWUodXBkYXRlZCwgc2VsZWN0SWQpO1xyXG4gICAgICAgIHZhciBoYXNOZXdLZXkgPSBuZXdLZXkgIT09IHVwZGF0ZS5pZDtcclxuICAgICAgICBpZiAoaGFzTmV3S2V5KSB7XHJcbiAgICAgICAgICAgIGtleXNbdXBkYXRlLmlkXSA9IG5ld0tleTtcclxuICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzW25ld0tleV0gPSB1cGRhdGVkO1xyXG4gICAgICAgIHJldHVybiBoYXNOZXdLZXk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIG5ld0tleXMgPSB7fTtcclxuICAgICAgICB2YXIgdXBkYXRlc1BlckVudGl0eSA9IHt9O1xyXG4gICAgICAgIHVwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAodXBkYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICh1cGRhdGUuaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdXBkYXRlLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXM6IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0gPyB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0uY2hhbmdlcyA6IG51bGwpLCB1cGRhdGUuY2hhbmdlcylcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB1cGRhdGVzID0gT2JqZWN0LnZhbHVlcyh1cGRhdGVzUGVyRW50aXR5KTtcclxuICAgICAgICB2YXIgZGlkTXV0YXRlRW50aXRpZXMgPSB1cGRhdGVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgaWYgKGRpZE11dGF0ZUVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHZhciBkaWRNdXRhdGVJZHMgPSB1cGRhdGVzLmZpbHRlcihmdW5jdGlvbiAodXBkYXRlKSB7IHJldHVybiB0YWtlTmV3S2V5KG5ld0tleXMsIHVwZGF0ZSwgc3RhdGUpOyB9KS5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICBpZiAoZGlkTXV0YXRlSWRzKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5pZHMgPSBPYmplY3Qua2V5cyhzdGF0ZS5lbnRpdGllcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYyA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2NbMF0sIHVwZGF0ZWQgPSBfY1sxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVtb3ZlQWxsOiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IocmVtb3ZlQWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxyXG4gICAgICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KSxcclxuICAgICAgICByZW1vdmVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlT25lTXV0YWJseSksXHJcbiAgICAgICAgcmVtb3ZlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3NvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydCkge1xyXG4gICAgdmFyIF9jID0gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpLCByZW1vdmVPbmUgPSBfYy5yZW1vdmVPbmUsIHJlbW92ZU1hbnkgPSBfYy5yZW1vdmVNYW55LCByZW1vdmVBbGwgPSBfYy5yZW1vdmVBbGw7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gYWRkTWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgdmFyIG1vZGVscyA9IG5ld0VudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAobW9kZWwpIHsgcmV0dXJuICEoc2VsZWN0SWRWYWx1ZShtb2RlbCwgc2VsZWN0SWQpIGluIHN0YXRlLmVudGl0aWVzKTsgfSk7XHJcbiAgICAgICAgaWYgKG1vZGVscy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIGlmIChuZXdFbnRpdGllcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRBbGxNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXMgPSB7fTtcclxuICAgICAgICBzdGF0ZS5pZHMgPSBbXTtcclxuICAgICAgICBhZGRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBhcHBsaWVkVXBkYXRlcyA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgdXBkYXRlc18xID0gdXBkYXRlczsgX2kgPCB1cGRhdGVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB1cGRhdGUgPSB1cGRhdGVzXzFbX2ldO1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICAgICAgaWYgKCFlbnRpdHkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFwcGxpZWRVcGRhdGVzID0gdHJ1ZTtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlbnRpdHksIHVwZGF0ZS5jaGFuZ2VzKTtcclxuICAgICAgICAgICAgdmFyIG5ld0lkID0gc2VsZWN0SWQoZW50aXR5KTtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5pZCAhPT0gbmV3SWQpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuZW50aXRpZXNbbmV3SWRdID0gZW50aXR5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcHBsaWVkVXBkYXRlcykge1xyXG4gICAgICAgICAgICByZXNvcnRFbnRpdGllcyhzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgX2MgPSBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzKG5ld0VudGl0aWVzLCBzZWxlY3RJZCwgc3RhdGUpLCBhZGRlZCA9IF9jWzBdLCB1cGRhdGVkID0gX2NbMV07XHJcbiAgICAgICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpO1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhcmVBcnJheXNFcXVhbChhLCBiKSB7XHJcbiAgICAgICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGggJiYgaSA8IGIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFbaV0gPT09IGJbaV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBtZXJnZShtb2RlbHMsIHN0YXRlKSB7XHJcbiAgICAgICAgbW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKG1vZGVsKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmVudGl0aWVzW3NlbGVjdElkKG1vZGVsKV0gPSBtb2RlbDtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXNvcnRFbnRpdGllcyhzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXNvcnRFbnRpdGllcyhzdGF0ZSkge1xyXG4gICAgICAgIHZhciBhbGxFbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoc3RhdGUuZW50aXRpZXMpO1xyXG4gICAgICAgIGFsbEVudGl0aWVzLnNvcnQoc29ydCk7XHJcbiAgICAgICAgdmFyIG5ld1NvcnRlZElkcyA9IGFsbEVudGl0aWVzLm1hcChzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGlkcyA9IHN0YXRlLmlkcztcclxuICAgICAgICBpZiAoIWFyZUFycmF5c0VxdWFsKGlkcywgbmV3U29ydGVkSWRzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBuZXdTb3J0ZWRJZHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmVPbmU6IHJlbW92ZU9uZSxcclxuICAgICAgICByZW1vdmVNYW55OiByZW1vdmVNYW55LFxyXG4gICAgICAgIHJlbW92ZUFsbDogcmVtb3ZlQWxsLFxyXG4gICAgICAgIGFkZE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlT25lTXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL2NyZWF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eUFkYXB0ZXIob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHZhciBfYyA9IF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICBzb3J0Q29tcGFyZXI6IGZhbHNlLFxyXG4gICAgICAgIHNlbGVjdElkOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHsgcmV0dXJuIGluc3RhbmNlLmlkOyB9XHJcbiAgICB9LCBvcHRpb25zKSwgc2VsZWN0SWQgPSBfYy5zZWxlY3RJZCwgc29ydENvbXBhcmVyID0gX2Muc29ydENvbXBhcmVyO1xyXG4gICAgdmFyIHN0YXRlRmFjdG9yeSA9IGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3RvcnkoKTtcclxuICAgIHZhciBzZWxlY3RvcnNGYWN0b3J5ID0gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpO1xyXG4gICAgdmFyIHN0YXRlQWRhcHRlciA9IHNvcnRDb21wYXJlciA/IGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydENvbXBhcmVyKSA6IGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKTtcclxuICAgIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7XHJcbiAgICAgICAgc2VsZWN0SWQ6IHNlbGVjdElkLFxyXG4gICAgICAgIHNvcnRDb21wYXJlcjogc29ydENvbXBhcmVyXHJcbiAgICB9LCBzdGF0ZUZhY3RvcnkpLCBzZWxlY3RvcnNGYWN0b3J5KSwgc3RhdGVBZGFwdGVyKTtcclxufVxyXG4vLyBzcmMvbmFub2lkLnRzXHJcbnZhciB1cmxBbHBoYWJldCA9IFwiTW9kdWxlU3ltYmhhc093blByLTAxMjM0NTY3ODlBQkNERUZHSE5SVmZnY3RpVXZ6X0txWVRKa0x4cFpYSWpRV1wiO1xyXG52YXIgbmFub2lkID0gZnVuY3Rpb24gKHNpemUpIHtcclxuICAgIGlmIChzaXplID09PSB2b2lkIDApIHsgc2l6ZSA9IDIxOyB9XHJcbiAgICB2YXIgaWQgPSBcIlwiO1xyXG4gICAgdmFyIGkgPSBzaXplO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlkO1xyXG59O1xyXG4vLyBzcmMvY3JlYXRlQXN5bmNUaHVuay50c1xyXG52YXIgY29tbW9uUHJvcGVydGllcyA9IFtcclxuICAgIFwibmFtZVwiLFxyXG4gICAgXCJtZXNzYWdlXCIsXHJcbiAgICBcInN0YWNrXCIsXHJcbiAgICBcImNvZGVcIlxyXG5dO1xyXG52YXIgUmVqZWN0V2l0aFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVqZWN0V2l0aFZhbHVlKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVqZWN0V2l0aFZhbHVlO1xyXG59KCkpO1xyXG52YXIgRnVsZmlsbFdpdGhNZXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRnVsZmlsbFdpdGhNZXRhKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRnVsZmlsbFdpdGhNZXRhO1xyXG59KCkpO1xyXG52YXIgbWluaVNlcmlhbGl6ZUVycm9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgdmFyIHNpbXBsZUVycm9yID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb21tb25Qcm9wZXJ0aWVzXzEgPSBjb21tb25Qcm9wZXJ0aWVzOyBfaSA8IGNvbW1vblByb3BlcnRpZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gY29tbW9uUHJvcGVydGllc18xW19pXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtwcm9wZXJ0eV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHNpbXBsZUVycm9yW3Byb3BlcnR5XSA9IHZhbHVlW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2ltcGxlRXJyb3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBtZXNzYWdlOiBTdHJpbmcodmFsdWUpIH07XHJcbn07XHJcbnZhciBjcmVhdGVBc3luY1RodW5rID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzeW5jVGh1bmsyKHR5cGVQcmVmaXgsIHBheWxvYWRDcmVhdG9yLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGZ1bGZpbGxlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvZnVsZmlsbGVkXCIsIGZ1bmN0aW9uIChwYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICAgICAgbWV0YTogX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbWV0YSB8fCB7fSksIHtcclxuICAgICAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0U3RhdHVzOiBcImZ1bGZpbGxlZFwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIHZhciBwZW5kaW5nID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9wZW5kaW5nXCIsIGZ1bmN0aW9uIChyZXF1ZXN0SWQsIGFyZywgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgcGF5bG9hZDogdm9pZCAwLFxyXG4gICAgICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicGVuZGluZ1wiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIHZhciByZWplY3RlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvcmVqZWN0ZWRcIiwgZnVuY3Rpb24gKGVycm9yLCByZXF1ZXN0SWQsIGFyZywgcGF5bG9hZCwgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICAgICAgZXJyb3I6IChvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplRXJyb3IgfHwgbWluaVNlcmlhbGl6ZUVycm9yKShlcnJvciB8fCBcIlJlamVjdGVkXCIpLFxyXG4gICAgICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgIHJlamVjdGVkV2l0aFZhbHVlOiAhIXBheWxvYWQsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0U3RhdHVzOiBcInJlamVjdGVkXCIsXHJcbiAgICAgICAgICAgICAgICBhYm9ydGVkOiAoZXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yLm5hbWUpID09PSBcIkFib3J0RXJyb3JcIixcclxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbjogKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5uYW1lKSA9PT0gXCJDb25kaXRpb25FcnJvclwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIHZhciBkaXNwbGF5ZWRXYXJuaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIEFDID0gdHlwZW9mIEFib3J0Q29udHJvbGxlciAhPT0gXCJ1bmRlZmluZWRcIiA/IEFib3J0Q29udHJvbGxlciA6IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gY2xhc3NfMSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2lnbmFsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb25hYm9ydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uOiB2b2lkIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dJZkFib3J0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGlzcGxheWVkV2FybmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5ZWRXYXJuaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiVGhpcyBwbGF0Zm9ybSBkb2VzIG5vdCBpbXBsZW1lbnQgQWJvcnRDb250cm9sbGVyLiBcXG5JZiB5b3Ugd2FudCB0byB1c2UgdGhlIEFib3J0Q29udHJvbGxlciB0byByZWFjdCB0byBgYWJvcnRgIGV2ZW50cywgcGxlYXNlIGNvbnNpZGVyIGltcG9ydGluZyBhIHBvbHlmaWxsIGxpa2UgJ2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC9kaXN0L2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC1vbmx5Jy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gY2xhc3NfMTtcclxuICAgICAgICB9KCkpO1xyXG4gICAgICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoYXJnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RJZCA9IChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmlkR2VuZXJhdG9yKSA/IG9wdGlvbnMuaWRHZW5lcmF0b3IoYXJnKSA6IG5hbm9pZCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFib3J0Q29udHJvbGxlciA9IG5ldyBBQygpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFib3J0UmVhc29uO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFib3J0KHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0UmVhc29uID0gcmVhc29uO1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2UyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgZmluYWxBY3Rpb24sIGNvbmRpdGlvblJlc3VsdCwgYWJvcnRlZFByb21pc2UsIGVycl8xLCBza2lwRGlzcGF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMCwgNCwgLCA1XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IChfYSA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuY29uZGl0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChvcHRpb25zLCBhcmcsIHsgZ2V0U3RhdGU6IGdldFN0YXRlLCBleHRyYTogZXh0cmEgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNUaGVuYWJsZShjb25kaXRpb25SZXN1bHQpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY29uZGl0aW9uUmVzdWx0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvblJlc3VsdCA9PT0gZmFsc2UgfHwgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb25kaXRpb25FcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiQWJvcnRlZCBkdWUgdG8gY29uZGl0aW9uIGNhbGxiYWNrIHJldHVybmluZyBmYWxzZS5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnRlZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAoXywgcmVqZWN0KSB7IHJldHVybiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3Qoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJBYm9ydEVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBhYm9ydFJlYXNvbiB8fCBcIkFib3J0ZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgfSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChwZW5kaW5nKHJlcXVlc3RJZCwgYXJnLCAoX2IgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmdldFBlbmRpbmdNZXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChvcHRpb25zLCB7IHJlcXVlc3RJZDogcmVxdWVzdElkLCBhcmc6IGFyZyB9LCB7IGdldFN0YXRlOiBnZXRTdGF0ZSwgZXh0cmE6IGV4dHJhIH0pKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmFjZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnRlZFByb21pc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHBheWxvYWRDcmVhdG9yKGFyZywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydDogYWJvcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdFdpdGhWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBtZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlamVjdFdpdGhWYWx1ZSh2YWx1ZSwgbWV0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGxXaXRoVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgbWV0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGdWxmaWxsV2l0aE1ldGEodmFsdWUsIG1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEZ1bGZpbGxXaXRoTWV0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQucGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIHJlc3VsdC5tZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVsZmlsbGVkKHJlc3VsdCwgcmVxdWVzdElkLCBhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJfMSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxBY3Rpb24gPSBlcnJfMSBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSA/IHJlamVjdGVkKG51bGwsIHJlcXVlc3RJZCwgYXJnLCBlcnJfMS5wYXlsb2FkLCBlcnJfMS5tZXRhKSA6IHJlamVjdGVkKGVycl8xLCByZXF1ZXN0SWQsIGFyZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcERpc3BhdGNoID0gb3B0aW9ucyAmJiAhb3B0aW9ucy5kaXNwYXRjaENvbmRpdGlvblJlamVjdGlvbiAmJiByZWplY3RlZC5tYXRjaChmaW5hbEFjdGlvbikgJiYgZmluYWxBY3Rpb24ubWV0YS5jb25kaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2tpcERpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChmaW5hbEFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZpbmFsQWN0aW9uXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwcm9taXNlMiwge1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgICAgICAgICB1bndyYXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UyLnRoZW4odW53cmFwUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWN0aW9uQ3JlYXRvciwge1xyXG4gICAgICAgICAgICBwZW5kaW5nOiBwZW5kaW5nLFxyXG4gICAgICAgICAgICByZWplY3RlZDogcmVqZWN0ZWQsXHJcbiAgICAgICAgICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxyXG4gICAgICAgICAgICB0eXBlUHJlZml4OiB0eXBlUHJlZml4XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVBc3luY1RodW5rMi53aXRoVHlwZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVBc3luY1RodW5rMjsgfTtcclxuICAgIHJldHVybiBjcmVhdGVBc3luY1RodW5rMjtcclxufSkoKTtcclxuZnVuY3Rpb24gdW53cmFwUmVzdWx0KGFjdGlvbikge1xyXG4gICAgaWYgKGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLnBheWxvYWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoYWN0aW9uLmVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLmVycm9yO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xyXG59XHJcbmZ1bmN0aW9uIGlzVGhlbmFibGUodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG4vLyBzcmMvdHNIZWxwZXJzLnRzXHJcbnZhciBoYXNNYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gKHYpIHtcclxuICAgIHJldHVybiB2ICYmIHR5cGVvZiB2Lm1hdGNoID09PSBcImZ1bmN0aW9uXCI7XHJcbn07XHJcbi8vIHNyYy9tYXRjaGVycy50c1xyXG52YXIgbWF0Y2hlcyA9IGZ1bmN0aW9uIChtYXRjaGVyLCBhY3Rpb24pIHtcclxuICAgIGlmIChoYXNNYXRjaEZ1bmN0aW9uKG1hdGNoZXIpKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIubWF0Y2goYWN0aW9uKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGlzQW55T2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLnNvbWUoZnVuY3Rpb24gKG1hdGNoZXIpIHsgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTsgfSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzQWxsT2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLmV2ZXJ5KGZ1bmN0aW9uIChtYXRjaGVyKSB7IHJldHVybiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbik7IH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIHZhbGlkU3RhdHVzKSB7XHJcbiAgICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLm1ldGEpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGhhc1ZhbGlkUmVxdWVzdElkID0gdHlwZW9mIGFjdGlvbi5tZXRhLnJlcXVlc3RJZCA9PT0gXCJzdHJpbmdcIjtcclxuICAgIHZhciBoYXNWYWxpZFJlcXVlc3RTdGF0dXMgPSB2YWxpZFN0YXR1cy5pbmRleE9mKGFjdGlvbi5tZXRhLnJlcXVlc3RTdGF0dXMpID4gLTE7XHJcbiAgICByZXR1cm4gaGFzVmFsaWRSZXF1ZXN0SWQgJiYgaGFzVmFsaWRSZXF1ZXN0U3RhdHVzO1xyXG59XHJcbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FycmF5KGEpIHtcclxuICAgIHJldHVybiB0eXBlb2YgYVswXSA9PT0gXCJmdW5jdGlvblwiICYmIFwicGVuZGluZ1wiIGluIGFbMF0gJiYgXCJmdWxmaWxsZWRcIiBpbiBhWzBdICYmIFwicmVqZWN0ZWRcIiBpbiBhWzBdO1xyXG59XHJcbmZ1bmN0aW9uIGlzUGVuZGluZygpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcInBlbmRpbmdcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNQZW5kaW5nKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHsgcmV0dXJuIGFzeW5jVGh1bmsucGVuZGluZzsgfSk7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc1JlamVjdGVkKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicmVqZWN0ZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWplY3RlZCgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7IHJldHVybiBhc3luY1RodW5rLnJlamVjdGVkOyB9KTtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBoYXNGbGFnID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiBhY3Rpb24gJiYgYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWU7XHJcbiAgICB9O1xyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNGdWxmaWxsZWQoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJmdWxmaWxsZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNGdWxmaWxsZWQoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykgeyByZXR1cm4gYXN5bmNUaHVuay5mdWxmaWxsZWQ7IH0pO1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNBc3luY1RodW5rQWN0aW9uKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiLCBcImZ1bGZpbGxlZFwiLCBcInJlamVjdGVkXCJdKTsgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzQXN5bmNUaHVua0FjdGlvbigpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhc3luY1RodW5rc18xID0gYXN5bmNUaHVua3M7IF9pIDwgYXN5bmNUaHVua3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGFzeW5jVGh1bmsgPSBhc3luY1RodW5rc18xW19pXTtcclxuICAgICAgICAgICAgbWF0Y2hlcnMucHVzaChhc3luY1RodW5rLnBlbmRpbmcsIGFzeW5jVGh1bmsucmVqZWN0ZWQsIGFzeW5jVGh1bmsuZnVsZmlsbGVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL3V0aWxzLnRzXHJcbnZhciBhc3NlcnRGdW5jdGlvbiA9IGZ1bmN0aW9uIChmdW5jLCBleHBlY3RlZCkge1xyXG4gICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGV4cGVjdGVkICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbn07XHJcbnZhciBub29wID0gZnVuY3Rpb24gKCkge1xyXG59O1xyXG52YXIgY2F0Y2hSZWplY3Rpb24gPSBmdW5jdGlvbiAocHJvbWlzZTIsIG9uRXJyb3IpIHtcclxuICAgIGlmIChvbkVycm9yID09PSB2b2lkIDApIHsgb25FcnJvciA9IG5vb3A7IH1cclxuICAgIHByb21pc2UyLmNhdGNoKG9uRXJyb3IpO1xyXG4gICAgcmV0dXJuIHByb21pc2UyO1xyXG59O1xyXG52YXIgYWRkQWJvcnRTaWduYWxMaXN0ZW5lciA9IGZ1bmN0aW9uIChhYm9ydFNpZ25hbCwgY2FsbGJhY2spIHtcclxuICAgIGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBjYWxsYmFjaywgeyBvbmNlOiB0cnVlIH0pO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFib3J0U2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBjYWxsYmFjayk7IH07XHJcbn07XHJcbnZhciBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uID0gZnVuY3Rpb24gKGFib3J0Q29udHJvbGxlciwgcmVhc29uKSB7XHJcbiAgICB2YXIgc2lnbmFsID0gYWJvcnRDb250cm9sbGVyLnNpZ25hbDtcclxuICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghKFwicmVhc29uXCIgaW4gc2lnbmFsKSkge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzaWduYWwsIFwicmVhc29uXCIsIHtcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgdmFsdWU6IHJlYXNvbixcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgO1xyXG4gICAgYWJvcnRDb250cm9sbGVyLmFib3J0KHJlYXNvbik7XHJcbn07XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvZXhjZXB0aW9ucy50c1xyXG52YXIgdGFzayA9IFwidGFza1wiO1xyXG52YXIgbGlzdGVuZXIgPSBcImxpc3RlbmVyXCI7XHJcbnZhciBjb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xyXG52YXIgY2FuY2VsbGVkID0gXCJjYW5jZWxsZWRcIjtcclxudmFyIHRhc2tDYW5jZWxsZWQgPSBcInRhc2stXCIgKyBjYW5jZWxsZWQ7XHJcbnZhciB0YXNrQ29tcGxldGVkID0gXCJ0YXNrLVwiICsgY29tcGxldGVkO1xyXG52YXIgbGlzdGVuZXJDYW5jZWxsZWQgPSBsaXN0ZW5lciArIFwiLVwiICsgY2FuY2VsbGVkO1xyXG52YXIgbGlzdGVuZXJDb21wbGV0ZWQgPSBsaXN0ZW5lciArIFwiLVwiICsgY29tcGxldGVkO1xyXG52YXIgVGFza0Fib3J0RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUYXNrQWJvcnRFcnJvcihjb2RlKSB7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIlRhc2tBYm9ydEVycm9yXCI7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gdGFzayArIFwiIFwiICsgY2FuY2VsbGVkICsgXCIgKHJlYXNvbjogXCIgKyBjb2RlICsgXCIpXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVGFza0Fib3J0RXJyb3I7XHJcbn0oKSk7XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvdGFzay50c1xyXG52YXIgdmFsaWRhdGVBY3RpdmUgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XHJcbiAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVGFza0Fib3J0RXJyb3Ioc2lnbmFsLnJlYXNvbik7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHJhY2VXaXRoU2lnbmFsKHNpZ25hbCwgcHJvbWlzZTIpIHtcclxuICAgIHZhciBjbGVhbnVwID0gbm9vcDtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgdmFyIG5vdGlmeVJlamVjdGlvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlamVjdChuZXcgVGFza0Fib3J0RXJyb3Ioc2lnbmFsLnJlYXNvbikpOyB9O1xyXG4gICAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgICAgICBub3RpZnlSZWplY3Rpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbGVhbnVwID0gYWRkQWJvcnRTaWduYWxMaXN0ZW5lcihzaWduYWwsIG5vdGlmeVJlamVjdGlvbik7XHJcbiAgICAgICAgcHJvbWlzZTIuZmluYWxseShmdW5jdGlvbiAoKSB7IHJldHVybiBjbGVhbnVwKCk7IH0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcclxuICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNsZWFudXAgPSBub29wO1xyXG4gICAgfSk7XHJcbn1cclxudmFyIHJ1blRhc2sgPSBmdW5jdGlvbiAodGFzazIsIGNsZWFuVXApIHsgcmV0dXJuIF9fYXN5bmModm9pZCAwLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdmFsdWUsIGVycm9yXzE7XHJcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzAsIDMsIDQsIDVdKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGFzazIoKV07XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBcIm9rXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBlcnJvcl8xIGluc3RhbmNlb2YgVGFza0Fib3J0RXJyb3IgPyBcImNhbmNlbGxlZFwiIDogXCJyZWplY3RlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JfMVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICBjbGVhblVwID09IG51bGwgPyB2b2lkIDAgOiBjbGVhblVwKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7IH07XHJcbnZhciBjcmVhdGVQYXVzZSA9IGZ1bmN0aW9uIChzaWduYWwpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocHJvbWlzZTIpIHtcclxuICAgICAgICByZXR1cm4gY2F0Y2hSZWplY3Rpb24ocmFjZVdpdGhTaWduYWwoc2lnbmFsLCBwcm9taXNlMikudGhlbihmdW5jdGlvbiAob3V0cHV0KSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZURlbGF5ID0gZnVuY3Rpb24gKHNpZ25hbCkge1xyXG4gICAgdmFyIHBhdXNlID0gY3JlYXRlUGF1c2Uoc2lnbmFsKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGltZW91dE1zKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdXNlKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXRNcyk7IH0pKTtcclxuICAgIH07XHJcbn07XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgudHNcclxudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XHJcbnZhciBJTlRFUk5BTF9OSUxfVE9LRU4gPSB7fTtcclxudmFyIGFsbSA9IFwibGlzdGVuZXJNaWRkbGV3YXJlXCI7XHJcbnZhciBjcmVhdGVGb3JrID0gZnVuY3Rpb24gKHBhcmVudEFib3J0U2lnbmFsKSB7XHJcbiAgICB2YXIgbGlua0NvbnRyb2xsZXJzID0gZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHsgcmV0dXJuIGFkZEFib3J0U2lnbmFsTGlzdGVuZXIocGFyZW50QWJvcnRTaWduYWwsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgcGFyZW50QWJvcnRTaWduYWwucmVhc29uKTsgfSk7IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhc2tFeGVjdXRvcikge1xyXG4gICAgICAgIGFzc2VydEZ1bmN0aW9uKHRhc2tFeGVjdXRvciwgXCJ0YXNrRXhlY3V0b3JcIik7XHJcbiAgICAgICAgdmFyIGNoaWxkQWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgIGxpbmtDb250cm9sbGVycyhjaGlsZEFib3J0Q29udHJvbGxlcik7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJ1blRhc2soZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdDI7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHBhcmVudEFib3J0U2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGFza0V4ZWN1dG9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogY3JlYXRlRGVsYXkoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0MiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdDJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NvbXBsZXRlZCk7IH0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3VsdDogY3JlYXRlUGF1c2UocGFyZW50QWJvcnRTaWduYWwpKHJlc3VsdCksXHJcbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NhbmNlbGxlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZVRha2VQYXR0ZXJuID0gZnVuY3Rpb24gKHN0YXJ0TGlzdGVuaW5nLCBzaWduYWwpIHtcclxuICAgIHZhciB0YWtlID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGltZW91dCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdW5zdWJzY3JpYmUsIHR1cGxlUHJvbWlzZSwgcHJvbWlzZXMsIG91dHB1dDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdHVwbGVQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcExpc3RlbmluZyA9IHN0YXJ0TGlzdGVuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWRpY2F0ZTogcHJlZGljYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiBmdW5jdGlvbiAoYWN0aW9uLCBsaXN0ZW5lckFwaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyQXBpLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJBcGkuZ2V0U3RhdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJBcGkuZ2V0T3JpZ2luYWxTdGF0ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BMaXN0ZW5pbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0dXBsZVByb21pc2VcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCB0aW1lb3V0LCBudWxsKTsgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFsxLCAsIDMsIDRdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByYWNlV2l0aFNpZ25hbChzaWduYWwsIFByb21pc2UucmFjZShwcm9taXNlcykpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgb3V0cHV0XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGltZW91dCkgeyByZXR1cm4gY2F0Y2hSZWplY3Rpb24odGFrZShwcmVkaWNhdGUsIHRpbWVvdXQpKTsgfTtcclxufTtcclxudmFyIGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20gPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgdmFyIHR5cGUgPSBvcHRpb25zLnR5cGUsIGFjdGlvbkNyZWF0b3IgPSBvcHRpb25zLmFjdGlvbkNyZWF0b3IsIG1hdGNoZXIgPSBvcHRpb25zLm1hdGNoZXIsIHByZWRpY2F0ZSA9IG9wdGlvbnMucHJlZGljYXRlLCBlZmZlY3QgPSBvcHRpb25zLmVmZmVjdDtcclxuICAgIGlmICh0eXBlKSB7XHJcbiAgICAgICAgcHJlZGljYXRlID0gY3JlYXRlQWN0aW9uKHR5cGUpLm1hdGNoO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYWN0aW9uQ3JlYXRvcikge1xyXG4gICAgICAgIHR5cGUgPSBhY3Rpb25DcmVhdG9yLnR5cGU7XHJcbiAgICAgICAgcHJlZGljYXRlID0gYWN0aW9uQ3JlYXRvci5tYXRjaDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG1hdGNoZXIpIHtcclxuICAgICAgICBwcmVkaWNhdGUgPSBtYXRjaGVyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJlZGljYXRlKSB7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDcmVhdGluZyBvciByZW1vdmluZyBhIGxpc3RlbmVyIHJlcXVpcmVzIG9uZSBvZiB0aGUga25vd24gZmllbGRzIGZvciBtYXRjaGluZyBhbiBhY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICBhc3NlcnRGdW5jdGlvbihlZmZlY3QsIFwib3B0aW9ucy5saXN0ZW5lclwiKTtcclxuICAgIHJldHVybiB7IHByZWRpY2F0ZTogcHJlZGljYXRlLCB0eXBlOiB0eXBlLCBlZmZlY3Q6IGVmZmVjdCB9O1xyXG59O1xyXG52YXIgY3JlYXRlTGlzdGVuZXJFbnRyeSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICB2YXIgX2MgPSBnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tKG9wdGlvbnMpLCB0eXBlID0gX2MudHlwZSwgcHJlZGljYXRlID0gX2MucHJlZGljYXRlLCBlZmZlY3QgPSBfYy5lZmZlY3Q7XHJcbiAgICB2YXIgaWQgPSBuYW5vaWQoKTtcclxuICAgIHZhciBlbnRyeSA9IHtcclxuICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgZWZmZWN0OiBlZmZlY3QsXHJcbiAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICBwcmVkaWNhdGU6IHByZWRpY2F0ZSxcclxuICAgICAgICBwZW5kaW5nOiBuZXcgU2V0KCksXHJcbiAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdWJzY3JpYmUgbm90IGluaXRpYWxpemVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gZW50cnk7XHJcbn07XHJcbnZhciBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgIGVudHJ5LnBlbmRpbmcuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbGxlcikge1xyXG4gICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBjcmVhdGVDbGVhckxpc3RlbmVyTWlkZGxld2FyZSA9IGZ1bmN0aW9uIChsaXN0ZW5lck1hcCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsaXN0ZW5lck1hcC5mb3JFYWNoKGNhbmNlbEFjdGl2ZUxpc3RlbmVycyk7XHJcbiAgICAgICAgbGlzdGVuZXJNYXAuY2xlYXIoKTtcclxuICAgIH07XHJcbn07XHJcbnZhciBzYWZlbHlOb3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvckhhbmRsZXIsIGVycm9yVG9Ob3RpZnksIGVycm9ySW5mbykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBlcnJvckhhbmRsZXIoZXJyb3JUb05vdGlmeSwgZXJyb3JJbmZvKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvckhhbmRsZXJFcnJvcikge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnJvckhhbmRsZXJFcnJvcjtcclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxufTtcclxudmFyIGFkZExpc3RlbmVyID0gY3JlYXRlQWN0aW9uKGFsbSArIFwiL2FkZFwiKTtcclxudmFyIGNsZWFyQWxsTGlzdGVuZXJzID0gY3JlYXRlQWN0aW9uKGFsbSArIFwiL3JlbW92ZUFsbFwiKTtcclxudmFyIHJlbW92ZUxpc3RlbmVyID0gY3JlYXRlQWN0aW9uKGFsbSArIFwiL3JlbW92ZVwiKTtcclxudmFyIGRlZmF1bHRFcnJvckhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIF9fc3ByZWFkQXJyYXkoW2FsbSArIFwiL2Vycm9yXCJdLCBhcmdzKSk7XHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZShtaWRkbGV3YXJlT3B0aW9ucykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIGlmIChtaWRkbGV3YXJlT3B0aW9ucyA9PT0gdm9pZCAwKSB7IG1pZGRsZXdhcmVPcHRpb25zID0ge307IH1cclxuICAgIHZhciBsaXN0ZW5lck1hcCA9IG5ldyBNYXAoKTtcclxuICAgIHZhciBleHRyYSA9IG1pZGRsZXdhcmVPcHRpb25zLmV4dHJhLCBfYyA9IG1pZGRsZXdhcmVPcHRpb25zLm9uRXJyb3IsIG9uRXJyb3IgPSBfYyA9PT0gdm9pZCAwID8gZGVmYXVsdEVycm9ySGFuZGxlciA6IF9jO1xyXG4gICAgYXNzZXJ0RnVuY3Rpb24ob25FcnJvciwgXCJvbkVycm9yXCIpO1xyXG4gICAgdmFyIGluc2VydEVudHJ5ID0gZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgICAgZW50cnkudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXN0ZW5lck1hcC5kZWxldGUoZW50cnkuaWQpOyB9O1xyXG4gICAgICAgIGxpc3RlbmVyTWFwLnNldChlbnRyeS5pZCwgZW50cnkpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2FuY2VsT3B0aW9ucykge1xyXG4gICAgICAgICAgICBlbnRyeS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICBpZiAoY2FuY2VsT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogY2FuY2VsT3B0aW9ucy5jYW5jZWxBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGNhbmNlbEFjdGl2ZUxpc3RlbmVycyhlbnRyeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBmaW5kTGlzdGVuZXJFbnRyeSA9IGZ1bmN0aW9uIChjb21wYXJhdG9yKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYyA9IEFycmF5LmZyb20obGlzdGVuZXJNYXAudmFsdWVzKCkpOyBfaSA8IF9jLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSBfY1tfaV07XHJcbiAgICAgICAgICAgIGlmIChjb21wYXJhdG9yKGVudHJ5KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2b2lkIDA7XHJcbiAgICB9O1xyXG4gICAgdmFyIHN0YXJ0TGlzdGVuaW5nID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZW50cnkgPSBmaW5kTGlzdGVuZXJFbnRyeShmdW5jdGlvbiAoZXhpc3RpbmdFbnRyeSkgeyByZXR1cm4gZXhpc3RpbmdFbnRyeS5lZmZlY3QgPT09IG9wdGlvbnMuZWZmZWN0OyB9KTtcclxuICAgICAgICBpZiAoIWVudHJ5KSB7XHJcbiAgICAgICAgICAgIGVudHJ5ID0gY3JlYXRlTGlzdGVuZXJFbnRyeShvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc2VydEVudHJ5KGVudHJ5KTtcclxuICAgIH07XHJcbiAgICB2YXIgc3RvcExpc3RlbmluZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF9jID0gZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbShvcHRpb25zKSwgdHlwZSA9IF9jLnR5cGUsIGVmZmVjdCA9IF9jLmVmZmVjdCwgcHJlZGljYXRlID0gX2MucHJlZGljYXRlO1xyXG4gICAgICAgIHZhciBlbnRyeSA9IGZpbmRMaXN0ZW5lckVudHJ5KGZ1bmN0aW9uIChlbnRyeTIpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGNoUHJlZGljYXRlT3JUeXBlID0gdHlwZW9mIHR5cGUgPT09IFwic3RyaW5nXCIgPyBlbnRyeTIudHlwZSA9PT0gdHlwZSA6IGVudHJ5Mi5wcmVkaWNhdGUgPT09IHByZWRpY2F0ZTtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoUHJlZGljYXRlT3JUeXBlICYmIGVudHJ5Mi5lZmZlY3QgPT09IGVmZmVjdDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZW50cnkpIHtcclxuICAgICAgICAgICAgZW50cnkudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2FuY2VsQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAhIWVudHJ5O1xyXG4gICAgfTtcclxuICAgIHZhciBub3RpZnlMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbnRyeSwgYWN0aW9uLCBhcGksIGdldE9yaWdpbmFsU3RhdGUpIHsgcmV0dXJuIF9fYXN5bmMoX3RoaXMsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaW50ZXJuYWxUYXNrQ29udHJvbGxlciwgdGFrZSwgbGlzdGVuZXJFcnJvcl8xO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVGFza0NvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZSA9IGNyZWF0ZVRha2VQYXR0ZXJuKHN0YXJ0TGlzdGVuaW5nLCBpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMSwgMywgNCwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnBlbmRpbmcuYWRkKGludGVybmFsVGFza0NvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmVzb2x2ZShlbnRyeS5lZmZlY3QoYWN0aW9uLCBhc3NpZ24oe30sIGFwaSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0T3JpZ2luYWxTdGF0ZTogZ2V0T3JpZ2luYWxTdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbjogZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGltZW91dCkgeyByZXR1cm4gdGFrZShwcmVkaWNhdGUsIHRpbWVvdXQpLnRoZW4oQm9vbGVhbik7IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWtlOiB0YWtlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IGNyZWF0ZURlbGF5KGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlOiBjcmVhdGVQYXVzZShpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogZXh0cmEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yazogY3JlYXRlRm9yayhpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZW50cnkudW5zdWJzY3JpYmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lck1hcC5zZXQoZW50cnkuaWQsIGVudHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xsZXIsIF8sIHNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlciAhPT0gaW50ZXJuYWxUYXNrQ29udHJvbGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjb250cm9sbGVyLCBsaXN0ZW5lckNhbmNlbGxlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQuZGVsZXRlKGNvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lckVycm9yXzEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobGlzdGVuZXJFcnJvcl8xIGluc3RhbmNlb2YgVGFza0Fib3J0RXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhZmVseU5vdGlmeUVycm9yKG9uRXJyb3IsIGxpc3RlbmVyRXJyb3JfMSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2VkQnk6IFwiZWZmZWN0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oaW50ZXJuYWxUYXNrQ29udHJvbGxlciwgbGlzdGVuZXJDb21wbGV0ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnBlbmRpbmcuZGVsZXRlKGludGVybmFsVGFza0NvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7IH07XHJcbiAgICB2YXIgY2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUgPSBjcmVhdGVDbGVhckxpc3RlbmVyTWlkZGxld2FyZShsaXN0ZW5lck1hcCk7XHJcbiAgICB2YXIgbWlkZGxld2FyZSA9IGZ1bmN0aW9uIChhcGkpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKGFkZExpc3RlbmVyLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0TGlzdGVuaW5nKGFjdGlvbi5wYXlsb2FkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNsZWFyQWxsTGlzdGVuZXJzLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgY2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVtb3ZlTGlzdGVuZXIubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RvcExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvcmlnaW5hbFN0YXRlID0gYXBpLmdldFN0YXRlKCk7XHJcbiAgICAgICAgdmFyIGdldE9yaWdpbmFsU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbFN0YXRlID09PSBJTlRFUk5BTF9OSUxfVE9LRU4pIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihhbG0gKyBcIjogZ2V0T3JpZ2luYWxTdGF0ZSBjYW4gb25seSBiZSBjYWxsZWQgc3luY2hyb25vdXNseVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxTdGF0ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgICAgICBpZiAobGlzdGVuZXJNYXAuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBhcGkuZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lckVudHJpZXMgPSBBcnJheS5mcm9tKGxpc3RlbmVyTWFwLnZhbHVlcygpKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbGlzdGVuZXJFbnRyaWVzXzEgPSBsaXN0ZW5lckVudHJpZXM7IF9pIDwgbGlzdGVuZXJFbnRyaWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gbGlzdGVuZXJFbnRyaWVzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBydW5MaXN0ZW5lciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkxpc3RlbmVyID0gZW50cnkucHJlZGljYXRlKGFjdGlvbiwgY3VycmVudFN0YXRlLCBvcmlnaW5hbFN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKHByZWRpY2F0ZUVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkxpc3RlbmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhZmVseU5vdGlmeUVycm9yKG9uRXJyb3IsIHByZWRpY2F0ZUVycm9yLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZWRCeTogXCJwcmVkaWNhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFydW5MaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXIoZW50cnksIGFjdGlvbiwgYXBpLCBnZXRPcmlnaW5hbFN0YXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgb3JpZ2luYWxTdGF0ZSA9IElOVEVSTkFMX05JTF9UT0tFTjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07IH07IH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1pZGRsZXdhcmU6IG1pZGRsZXdhcmUsXHJcbiAgICAgICAgc3RhcnRMaXN0ZW5pbmc6IHN0YXJ0TGlzdGVuaW5nLFxyXG4gICAgICAgIHN0b3BMaXN0ZW5pbmc6IHN0b3BMaXN0ZW5pbmcsXHJcbiAgICAgICAgY2xlYXJMaXN0ZW5lcnM6IGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlXHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9hdXRvQmF0Y2hFbmhhbmNlci50c1xyXG52YXIgU0hPVUxEX0FVVE9CQVRDSCA9IFwiUlRLX2F1dG9CYXRjaFwiO1xyXG52YXIgcHJlcGFyZUF1dG9CYXRjaGVkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKHBheWxvYWQpIHtcclxuICAgIHZhciBfYztcclxuICAgIHJldHVybiAoe1xyXG4gICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXHJcbiAgICAgICAgbWV0YTogKF9jID0ge30sIF9jW1NIT1VMRF9BVVRPQkFUQ0hdID0gdHJ1ZSwgX2MpXHJcbiAgICB9KTtcclxufTsgfTtcclxudmFyIHByb21pc2U7XHJcbnZhciBxdWV1ZU1pY3JvdGFza1NoaW0gPSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgPT09IFwiZnVuY3Rpb25cIiA/IHF1ZXVlTWljcm90YXNrLmJpbmQodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiBnbG9iYWxUaGlzKSA6IGZ1bmN0aW9uIChjYikgeyByZXR1cm4gKHByb21pc2UgfHwgKHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKSkpLnRoZW4oY2IpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgdGhyb3cgZXJyO1xyXG59LCAwKTsgfSk7IH07XHJcbnZhciBjcmVhdGVRdWV1ZVdpdGhUaW1lciA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vdGlmeSkge1xyXG4gICAgICAgIHNldFRpbWVvdXQobm90aWZ5LCB0aW1lb3V0KTtcclxuICAgIH07XHJcbn07XHJcbnZhciByQUYgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIDogY3JlYXRlUXVldWVXaXRoVGltZXIoMTApO1xyXG52YXIgYXV0b0JhdGNoRW5oYW5jZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0geyB0eXBlOiBcInJhZlwiIH07IH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RvcmUgPSBuZXh0LmFwcGx5KHZvaWQgMCwgYXJncyk7XHJcbiAgICAgICAgdmFyIG5vdGlmeWluZyA9IHRydWU7XHJcbiAgICAgICAgdmFyIHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIG5vdGlmaWNhdGlvblF1ZXVlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdmFyIHF1ZXVlQ2FsbGJhY2sgPSBvcHRpb25zLnR5cGUgPT09IFwidGlja1wiID8gcXVldWVNaWNyb3Rhc2tTaGltIDogb3B0aW9ucy50eXBlID09PSBcInJhZlwiID8gckFGIDogb3B0aW9ucy50eXBlID09PSBcImNhbGxiYWNrXCIgPyBvcHRpb25zLnF1ZXVlTm90aWZpY2F0aW9uIDogY3JlYXRlUXVldWVXaXRoVGltZXIob3B0aW9ucy50aW1lb3V0KTtcclxuICAgICAgICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBub3RpZmljYXRpb25RdWV1ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrKSB7XHJcbiAgICAgICAgICAgICAgICBzaG91bGROb3RpZnlBdEVuZE9mVGljayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwoKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdG9yZSwge1xyXG4gICAgICAgICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIChsaXN0ZW5lcjIpIHtcclxuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBub3RpZnlpbmcgJiYgbGlzdGVuZXIyKCk7IH07XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBzdG9yZS5zdWJzY3JpYmUod3JhcHBlZExpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyMik7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBub3RpZnlpbmcgPSAhKChfYSA9IGFjdGlvbiA9PSBudWxsID8gdm9pZCAwIDogYWN0aW9uLm1ldGEpID09IG51bGwgPyB2b2lkIDAgOiBfYVtTSE9VTERfQVVUT0JBVENIXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkTm90aWZ5QXRFbmRPZlRpY2sgPSAhbm90aWZ5aW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGROb3RpZnlBdEVuZE9mVGljaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vdGlmaWNhdGlvblF1ZXVlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uUXVldWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlQ2FsbGJhY2sobm90aWZ5TGlzdGVuZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmeWluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07IH07XHJcbn07XHJcbi8vIHNyYy9pbmRleC50c1xyXG5lbmFibGVFUzUoKTtcclxuZXhwb3J0IHsgTWlkZGxld2FyZUFycmF5LCBTSE9VTERfQVVUT0JBVENILCBUYXNrQWJvcnRFcnJvciwgYWRkTGlzdGVuZXIsIGF1dG9CYXRjaEVuaGFuY2VyLCBjbGVhckFsbExpc3RlbmVycywgY29uZmlndXJlU3RvcmUsIGNyZWF0ZUFjdGlvbiwgY3JlYXRlQXN5bmNUaHVuaywgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IsIGNyZWF0ZUVudGl0eUFkYXB0ZXIsIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSwgY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlLCBkZWZhdWx0MiBhcyBjcmVhdGVOZXh0U3RhdGUsIGNyZWF0ZVJlZHVjZXIsIGNyZWF0ZVNlbGVjdG9yMiBhcyBjcmVhdGVTZWxlY3RvciwgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVTbGljZSwgY3VycmVudDIgYXMgY3VycmVudCwgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlLCBmcmVlemUsIGdldERlZmF1bHRNaWRkbGV3YXJlLCBnZXRUeXBlLCBpc0FsbE9mLCBpc0FueU9mLCBpc0FzeW5jVGh1bmtBY3Rpb24sIGlzRHJhZnQ0IGFzIGlzRHJhZnQsIGlzRnVsZmlsbGVkLCBpc0ltbXV0YWJsZURlZmF1bHQsIGlzUGVuZGluZywgaXNQbGFpbiwgaXNQbGFpbk9iamVjdCwgaXNSZWplY3RlZCwgaXNSZWplY3RlZFdpdGhWYWx1ZSwgbWluaVNlcmlhbGl6ZUVycm9yLCBuYW5vaWQsIG9yaWdpbmFsLCBwcmVwYXJlQXV0b0JhdGNoZWQsIHJlbW92ZUxpc3RlbmVyLCB1bndyYXBSZXN1bHQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkdXgtdG9vbGtpdC5lc20uanMubWFwIiwidmFyIGNyZWF0ZVN5bWJvbCA9IGZ1bmN0aW9uIGNyZWF0ZVN5bWJvbChuYW1lKSB7XG4gIHJldHVybiBcIkBAcmVkdXgtc2FnYS9cIiArIG5hbWU7XG59O1xuXG52YXIgQ0FOQ0VMID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVN5bWJvbCgnQ0FOQ0VMX1BST01JU0UnKTtcbnZhciBDSEFOTkVMX0VORF9UWVBFID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVN5bWJvbCgnQ0hBTk5FTF9FTkQnKTtcbnZhciBJTyA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTeW1ib2woJ0lPJyk7XG52YXIgTUFUQ0ggPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU3ltYm9sKCdNQVRDSCcpO1xudmFyIE1VTFRJQ0FTVCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTeW1ib2woJ01VTFRJQ0FTVCcpO1xudmFyIFNBR0FfQUNUSU9OID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVN5bWJvbCgnU0FHQV9BQ1RJT04nKTtcbnZhciBTRUxGX0NBTkNFTExBVElPTiA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTeW1ib2woJ1NFTEZfQ0FOQ0VMTEFUSU9OJyk7XG52YXIgVEFTSyA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTeW1ib2woJ1RBU0snKTtcbnZhciBUQVNLX0NBTkNFTCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTeW1ib2woJ1RBU0tfQ0FOQ0VMJyk7XG52YXIgVEVSTUlOQVRFID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVN5bWJvbCgnVEVSTUlOQVRFJyk7XG52YXIgU0FHQV9MT0NBVElPTiA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTeW1ib2woJ0xPQ0FUSU9OJyk7XG5cbmV4cG9ydCB7IENBTkNFTCwgQ0hBTk5FTF9FTkRfVFlQRSwgSU8sIE1BVENILCBNVUxUSUNBU1QsIFNBR0FfQUNUSU9OLCBTQUdBX0xPQ0FUSU9OLCBTRUxGX0NBTkNFTExBVElPTiwgVEFTSywgVEFTS19DQU5DRUwsIFRFUk1JTkFURSB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiaW1wb3J0IHsgVEFTSywgU0FHQV9BQ1RJT04sIE1VTFRJQ0FTVCwgSU8gfSBmcm9tICdAcmVkdXgtc2FnYS9zeW1ib2xzJztcblxudmFyIHVuZGVmID0gZnVuY3Rpb24gdW5kZWYodikge1xuICByZXR1cm4gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQ7XG59O1xudmFyIG5vdFVuZGVmID0gZnVuY3Rpb24gbm90VW5kZWYodikge1xuICByZXR1cm4gdiAhPT0gbnVsbCAmJiB2ICE9PSB1bmRlZmluZWQ7XG59O1xudmFyIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKGYpIHtcbiAgcmV0dXJuIHR5cGVvZiBmID09PSAnZnVuY3Rpb24nO1xufTtcbnZhciBudW1iZXIgPSBmdW5jdGlvbiBudW1iZXIobikge1xuICByZXR1cm4gdHlwZW9mIG4gPT09ICdudW1iZXInO1xufTtcbnZhciBzdHJpbmcgPSBmdW5jdGlvbiBzdHJpbmcocykge1xuICByZXR1cm4gdHlwZW9mIHMgPT09ICdzdHJpbmcnO1xufTtcbnZhciBhcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIgb2JqZWN0ID0gZnVuY3Rpb24gb2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqICYmICFhcnJheShvYmopICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnO1xufTtcbnZhciBwcm9taXNlID0gZnVuY3Rpb24gcHJvbWlzZShwKSB7XG4gIHJldHVybiBwICYmIGZ1bmMocC50aGVuKTtcbn07XG52YXIgaXRlcmF0b3IgPSBmdW5jdGlvbiBpdGVyYXRvcihpdCkge1xuICByZXR1cm4gaXQgJiYgZnVuYyhpdC5uZXh0KSAmJiBmdW5jKGl0LnRocm93KTtcbn07XG52YXIgaXRlcmFibGUgPSBmdW5jdGlvbiBpdGVyYWJsZShpdCkge1xuICByZXR1cm4gaXQgJiYgZnVuYyhTeW1ib2wpID8gZnVuYyhpdFtTeW1ib2wuaXRlcmF0b3JdKSA6IGFycmF5KGl0KTtcbn07XG52YXIgdGFzayA9IGZ1bmN0aW9uIHRhc2sodCkge1xuICByZXR1cm4gdCAmJiB0W1RBU0tdO1xufTtcbnZhciBzYWdhQWN0aW9uID0gZnVuY3Rpb24gc2FnYUFjdGlvbihhKSB7XG4gIHJldHVybiBCb29sZWFuKGEgJiYgYVtTQUdBX0FDVElPTl0pO1xufTtcbnZhciBvYnNlcnZhYmxlID0gZnVuY3Rpb24gb2JzZXJ2YWJsZShvYikge1xuICByZXR1cm4gb2IgJiYgZnVuYyhvYi5zdWJzY3JpYmUpO1xufTtcbnZhciBidWZmZXIgPSBmdW5jdGlvbiBidWZmZXIoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgZnVuYyhidWYuaXNFbXB0eSkgJiYgZnVuYyhidWYudGFrZSkgJiYgZnVuYyhidWYucHV0KTtcbn07XG52YXIgcGF0dGVybiA9IGZ1bmN0aW9uIHBhdHRlcm4ocGF0KSB7XG4gIHJldHVybiBwYXQgJiYgKHN0cmluZyhwYXQpIHx8IHN5bWJvbChwYXQpIHx8IGZ1bmMocGF0KSB8fCBhcnJheShwYXQpICYmIHBhdC5ldmVyeShwYXR0ZXJuKSk7XG59O1xudmFyIGNoYW5uZWwgPSBmdW5jdGlvbiBjaGFubmVsKGNoKSB7XG4gIHJldHVybiBjaCAmJiBmdW5jKGNoLnRha2UpICYmIGZ1bmMoY2guY2xvc2UpO1xufTtcbnZhciBzdHJpbmdhYmxlRnVuYyA9IGZ1bmN0aW9uIHN0cmluZ2FibGVGdW5jKGYpIHtcbiAgcmV0dXJuIGZ1bmMoZikgJiYgZi5oYXNPd25Qcm9wZXJ0eSgndG9TdHJpbmcnKTtcbn07XG52YXIgc3ltYm9sID0gZnVuY3Rpb24gc3ltYm9sKHN5bSkge1xuICByZXR1cm4gQm9vbGVhbihzeW0pICYmIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgc3ltLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgc3ltICE9PSBTeW1ib2wucHJvdG90eXBlO1xufTtcbnZhciBtdWx0aWNhc3QgPSBmdW5jdGlvbiBtdWx0aWNhc3QoY2gpIHtcbiAgcmV0dXJuIGNoYW5uZWwoY2gpICYmIGNoW01VTFRJQ0FTVF07XG59O1xudmFyIGVmZmVjdCA9IGZ1bmN0aW9uIGVmZmVjdChlZmYpIHtcbiAgcmV0dXJuIGVmZiAmJiBlZmZbSU9dO1xufTtcblxuZXhwb3J0IHsgYXJyYXksIGJ1ZmZlciwgY2hhbm5lbCwgZWZmZWN0LCBmdW5jLCBpdGVyYWJsZSwgaXRlcmF0b3IsIG11bHRpY2FzdCwgbm90VW5kZWYsIG51bWJlciwgb2JqZWN0LCBvYnNlcnZhYmxlLCBwYXR0ZXJuLCBwcm9taXNlLCBzYWdhQWN0aW9uLCBzdHJpbmcsIHN0cmluZ2FibGVGdW5jLCBzeW1ib2wsIHRhc2ssIHVuZGVmIH07XG4iLCJpbXBvcnQgeyBUQVNLX0NBTkNFTCwgVEVSTUlOQVRFLCBTQUdBX0xPQ0FUSU9OLCBTQUdBX0FDVElPTiwgSU8sIFNFTEZfQ0FOQ0VMTEFUSU9OIH0gZnJvbSAnQHJlZHV4LXNhZ2Evc3ltYm9scyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyBhcnJheSwgbm90VW5kZWYsIHBhdHRlcm4sIG11bHRpY2FzdCwgY2hhbm5lbCwgdW5kZWYsIGVmZmVjdCwgdGFzaywgZnVuYywgYnVmZmVyLCBzdHJpbmcsIG9iamVjdCB9IGZyb20gJ0ByZWR1eC1zYWdhL2lzJztcbmltcG9ydCBkZWxheVAgZnJvbSAnQHJlZHV4LXNhZ2EvZGVsYXktcCc7XG5cbnZhciBrb25zdCA9IGZ1bmN0aW9uIGtvbnN0KHYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdjtcbiAgfTtcbn07XG52YXIga1RydWUgPVxuLyojX19QVVJFX18qL1xua29uc3QodHJ1ZSk7XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnKSB7XG4gIG5vb3AgPVxuICAvKiNfX1BVUkVfXyovXG4gIG5ldyBQcm94eShub29wLCB7XG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoKSB7XG4gICAgICB0aHJvdyBpbnRlcm5hbEVycignVGhlcmUgd2FzIGFuIGF0dGVtcHQgdG8gYXNzaWduIGEgcHJvcGVydHkgdG8gaW50ZXJuYWwgYG5vb3BgIGZ1bmN0aW9uLicpO1xuICAgIH1cbiAgfSk7XG59XG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiBpZGVudGl0eSh2KSB7XG4gIHJldHVybiB2O1xufTtcbnZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nO1xudmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSBoYXNTeW1ib2wgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IgPyBTeW1ib2wuYXN5bmNJdGVyYXRvciA6ICdAQGFzeW5jSXRlcmF0b3InO1xuZnVuY3Rpb24gY2hlY2sodmFsdWUsIHByZWRpY2F0ZSwgZXJyb3IpIHtcbiAgaWYgKCFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgfVxufVxudmFyIGFzc2lnbldpdGhTeW1ib2xzID0gZnVuY3Rpb24gYXNzaWduV2l0aFN5bWJvbHModGFyZ2V0LCBzb3VyY2UpIHtcbiAgX2V4dGVuZHModGFyZ2V0LCBzb3VyY2UpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgIHRhcmdldFtzXSA9IHNvdXJjZVtzXTtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBmbGF0TWFwID0gZnVuY3Rpb24gZmxhdE1hcChtYXBwZXIsIGFycikge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gKF9yZWYgPSBbXSkuY29uY2F0LmFwcGx5KF9yZWYsIGFyci5tYXAobWFwcGVyKSk7XG59O1xuZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBpdGVtKSB7XG4gIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG5cbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICBmbigpO1xuICB9O1xufVxuXG52YXIga1Rocm93ID0gZnVuY3Rpb24ga1Rocm93KGVycikge1xuICB0aHJvdyBlcnI7XG59O1xuXG52YXIga1JldHVybiA9IGZ1bmN0aW9uIGtSZXR1cm4odmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgZG9uZTogdHJ1ZVxuICB9O1xufTtcblxuZnVuY3Rpb24gbWFrZUl0ZXJhdG9yKG5leHQsIHRocm8sIG5hbWUpIHtcbiAgaWYgKHRocm8gPT09IHZvaWQgMCkge1xuICAgIHRocm8gPSBrVGhyb3c7XG4gIH1cblxuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgbmFtZSA9ICdpdGVyYXRvcic7XG4gIH1cblxuICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgbWV0YToge1xuICAgICAgbmFtZTogbmFtZVxuICAgIH0sXG4gICAgbmV4dDogbmV4dCxcbiAgICB0aHJvdzogdGhybyxcbiAgICByZXR1cm46IGtSZXR1cm4sXG4gICAgaXNTYWdhSXRlcmF0b3I6IHRydWVcbiAgfTtcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3I7XG59XG5mdW5jdGlvbiBsb2dFcnJvcihlcnJvciwgX3JlZjIpIHtcbiAgdmFyIHNhZ2FTdGFjayA9IF9yZWYyLnNhZ2FTdGFjaztcblxuICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUqL1xuICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgY29uc29sZS5lcnJvcihzYWdhU3RhY2spO1xufVxudmFyIGludGVybmFsRXJyID0gZnVuY3Rpb24gaW50ZXJuYWxFcnIoZXJyKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoXCJcXG4gIHJlZHV4LXNhZ2E6IEVycm9yIGNoZWNraW5nIGhvb2tzIGRldGVjdGVkIGFuIGluY29uc2lzdGVudCBzdGF0ZS4gVGhpcyBpcyBsaWtlbHkgYSBidWdcXG4gIGluIHJlZHV4LXNhZ2EgY29kZSBhbmQgbm90IHlvdXJzLiBUaGFua3MgZm9yIHJlcG9ydGluZyB0aGlzIGluIHRoZSBwcm9qZWN0J3MgZ2l0aHViIHJlcG8uXFxuICBFcnJvcjogXCIgKyBlcnIgKyBcIlxcblwiKTtcbn07XG52YXIgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcgPSBmdW5jdGlvbiBjcmVhdGVTZXRDb250ZXh0V2FybmluZyhjdHgsIHByb3BzKSB7XG4gIHJldHVybiAoY3R4ID8gY3R4ICsgJy4nIDogJycpICsgXCJzZXRDb250ZXh0KHByb3BzKTogYXJndW1lbnQgXCIgKyBwcm9wcyArIFwiIGlzIG5vdCBhIHBsYWluIG9iamVjdFwiO1xufTtcbnZhciBGUk9aRU5fQUNUSU9OX0VSUk9SID0gXCJZb3UgY2FuJ3QgcHV0IChhLmsuYS4gZGlzcGF0Y2ggZnJvbSBzYWdhKSBmcm96ZW4gYWN0aW9ucy5cXG5XZSBoYXZlIHRvIGRlZmluZSBhIHNwZWNpYWwgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gdGhvc2UgYWN0aW9ucyBmb3Igc2NoZWR1bGluZyBwdXJwb3Nlcy5cXG5PdGhlcndpc2UgeW91IHdvdWxkbid0IGJlIGFibGUgdG8gY29tbXVuaWNhdGUgcHJvcGVybHkgYmV0d2VlbiBzYWdhcyAmIG90aGVyIHN1YnNjcmliZXJzIChhY3Rpb24gb3JkZXJpbmcgd291bGQgYmVjb21lIGZhciBsZXNzIHByZWRpY3RhYmxlKS5cXG5JZiB5b3UgYXJlIHVzaW5nIHJlZHV4IGFuZCB5b3UgY2FyZSBhYm91dCB0aGlzIGJlaGF2aW91ciAoZnJvemVuIGFjdGlvbnMpLFxcbnRoZW4geW91IG1pZ2h0IHdhbnQgdG8gc3dpdGNoIHRvIGZyZWV6aW5nIGFjdGlvbnMgaW4gYSBtaWRkbGV3YXJlIHJhdGhlciB0aGFuIGluIGFjdGlvbiBjcmVhdG9yLlxcbkV4YW1wbGUgaW1wbGVtZW50YXRpb246XFxuXFxuY29uc3QgZnJlZXplQWN0aW9ucyA9IHN0b3JlID0+IG5leHQgPT4gYWN0aW9uID0+IG5leHQoT2JqZWN0LmZyZWV6ZShhY3Rpb24pKVxcblwiOyAvLyBjcmVhdGVzIGVtcHR5LCBidXQgbm90LWhvbGV5IGFycmF5XG5cbnZhciBjcmVhdGVFbXB0eUFycmF5ID0gZnVuY3Rpb24gY3JlYXRlRW1wdHlBcnJheShuKSB7XG4gIHJldHVybiBBcnJheS5hcHBseShudWxsLCBuZXcgQXJyYXkobikpO1xufTtcbnZhciB3cmFwU2FnYURpc3BhdGNoID0gZnVuY3Rpb24gd3JhcFNhZ2FEaXNwYXRjaChkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVjayhhY3Rpb24sIGZ1bmN0aW9uIChhYykge1xuICAgICAgICByZXR1cm4gIU9iamVjdC5pc0Zyb3plbihhYyk7XG4gICAgICB9LCBGUk9aRU5fQUNUSU9OX0VSUk9SKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlzcGF0Y2goT2JqZWN0LmRlZmluZVByb3BlcnR5KGFjdGlvbiwgU0FHQV9BQ1RJT04sIHtcbiAgICAgIHZhbHVlOiB0cnVlXG4gICAgfSkpO1xuICB9O1xufTtcbnZhciBzaG91bGRUZXJtaW5hdGUgPSBmdW5jdGlvbiBzaG91bGRUZXJtaW5hdGUocmVzKSB7XG4gIHJldHVybiByZXMgPT09IFRFUk1JTkFURTtcbn07XG52YXIgc2hvdWxkQ2FuY2VsID0gZnVuY3Rpb24gc2hvdWxkQ2FuY2VsKHJlcykge1xuICByZXR1cm4gcmVzID09PSBUQVNLX0NBTkNFTDtcbn07XG52YXIgc2hvdWxkQ29tcGxldGUgPSBmdW5jdGlvbiBzaG91bGRDb21wbGV0ZShyZXMpIHtcbiAgcmV0dXJuIHNob3VsZFRlcm1pbmF0ZShyZXMpIHx8IHNob3VsZENhbmNlbChyZXMpO1xufTtcbmZ1bmN0aW9uIGNyZWF0ZUFsbFN0eWxlQ2hpbGRDYWxsYmFja3Moc2hhcGUsIHBhcmVudENhbGxiYWNrKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc2hhcGUpO1xuICB2YXIgdG90YWxDb3VudCA9IGtleXMubGVuZ3RoO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2sodG90YWxDb3VudCwgZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjID4gMDtcbiAgICB9LCAnY3JlYXRlQWxsU3R5bGVDaGlsZENhbGxiYWNrczogZ2V0IGFuIGVtcHR5IGFycmF5IG9yIG9iamVjdCcpO1xuICB9XG5cbiAgdmFyIGNvbXBsZXRlZENvdW50ID0gMDtcbiAgdmFyIGNvbXBsZXRlZDtcbiAgdmFyIHJlc3VsdHMgPSBhcnJheShzaGFwZSkgPyBjcmVhdGVFbXB0eUFycmF5KHRvdGFsQ291bnQpIDoge307XG4gIHZhciBjaGlsZENhbGxiYWNrcyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGNoZWNrRW5kKCkge1xuICAgIGlmIChjb21wbGV0ZWRDb3VudCA9PT0gdG90YWxDb3VudCkge1xuICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgIHBhcmVudENhbGxiYWNrKHJlc3VsdHMpO1xuICAgIH1cbiAgfVxuXG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoQ2JBdEtleSA9IGZ1bmN0aW9uIGNoQ2JBdEtleShyZXMsIGlzRXJyKSB7XG4gICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRXJyIHx8IHNob3VsZENvbXBsZXRlKHJlcykpIHtcbiAgICAgICAgcGFyZW50Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICAgIHBhcmVudENhbGxiYWNrKHJlcywgaXNFcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0c1trZXldID0gcmVzO1xuICAgICAgICBjb21wbGV0ZWRDb3VudCsrO1xuICAgICAgICBjaGVja0VuZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjaENiQXRLZXkuY2FuY2VsID0gbm9vcDtcbiAgICBjaGlsZENhbGxiYWNrc1trZXldID0gY2hDYkF0S2V5O1xuICB9KTtcblxuICBwYXJlbnRDYWxsYmFjay5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjb21wbGV0ZWQpIHtcbiAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gY2hpbGRDYWxsYmFja3Nba2V5XS5jYW5jZWwoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gY2hpbGRDYWxsYmFja3M7XG59XG5mdW5jdGlvbiBnZXRNZXRhSW5mbyhmbikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IGZuLm5hbWUgfHwgJ2Fub255bW91cycsXG4gICAgbG9jYXRpb246IGdldExvY2F0aW9uKGZuKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0TG9jYXRpb24oaW5zdHJ1bWVudGVkKSB7XG4gIHJldHVybiBpbnN0cnVtZW50ZWRbU0FHQV9MT0NBVElPTl07XG59XG5cbnZhciBCVUZGRVJfT1ZFUkZMT1cgPSBcIkNoYW5uZWwncyBCdWZmZXIgb3ZlcmZsb3chXCI7XG52YXIgT05fT1ZFUkZMT1dfVEhST1cgPSAxO1xudmFyIE9OX09WRVJGTE9XX0RST1AgPSAyO1xudmFyIE9OX09WRVJGTE9XX1NMSURFID0gMztcbnZhciBPTl9PVkVSRkxPV19FWFBBTkQgPSA0O1xudmFyIHplcm9CdWZmZXIgPSB7XG4gIGlzRW1wdHk6IGtUcnVlLFxuICBwdXQ6IG5vb3AsXG4gIHRha2U6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHJpbmdCdWZmZXIobGltaXQsIG92ZXJmbG93QWN0aW9uKSB7XG4gIGlmIChsaW1pdCA9PT0gdm9pZCAwKSB7XG4gICAgbGltaXQgPSAxMDtcbiAgfVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyYXkobGltaXQpO1xuICB2YXIgbGVuZ3RoID0gMDtcbiAgdmFyIHB1c2hJbmRleCA9IDA7XG4gIHZhciBwb3BJbmRleCA9IDA7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKGl0KSB7XG4gICAgYXJyW3B1c2hJbmRleF0gPSBpdDtcbiAgICBwdXNoSW5kZXggPSAocHVzaEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICBsZW5ndGgrKztcbiAgfTtcblxuICB2YXIgdGFrZSA9IGZ1bmN0aW9uIHRha2UoKSB7XG4gICAgaWYgKGxlbmd0aCAhPSAwKSB7XG4gICAgICB2YXIgaXQgPSBhcnJbcG9wSW5kZXhdO1xuICAgICAgYXJyW3BvcEluZGV4XSA9IG51bGw7XG4gICAgICBsZW5ndGgtLTtcbiAgICAgIHBvcEluZGV4ID0gKHBvcEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICAgIHJldHVybiBpdDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICB3aGlsZSAobGVuZ3RoKSB7XG4gICAgICBpdGVtcy5wdXNoKHRha2UoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaXNFbXB0eTogZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiBsZW5ndGggPT0gMDtcbiAgICB9LFxuICAgIHB1dDogZnVuY3Rpb24gcHV0KGl0KSB7XG4gICAgICBpZiAobGVuZ3RoIDwgbGltaXQpIHtcbiAgICAgICAgcHVzaChpdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZG91YmxlZExpbWl0O1xuXG4gICAgICAgIHN3aXRjaCAob3ZlcmZsb3dBY3Rpb24pIHtcbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX1RIUk9XOlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEJVRkZFUl9PVkVSRkxPVyk7XG5cbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX1NMSURFOlxuICAgICAgICAgICAgYXJyW3B1c2hJbmRleF0gPSBpdDtcbiAgICAgICAgICAgIHB1c2hJbmRleCA9IChwdXNoSW5kZXggKyAxKSAlIGxpbWl0O1xuICAgICAgICAgICAgcG9wSW5kZXggPSBwdXNoSW5kZXg7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfRVhQQU5EOlxuICAgICAgICAgICAgZG91YmxlZExpbWl0ID0gMiAqIGxpbWl0O1xuICAgICAgICAgICAgYXJyID0gZmx1c2goKTtcbiAgICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICBwdXNoSW5kZXggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgcG9wSW5kZXggPSAwO1xuICAgICAgICAgICAgYXJyLmxlbmd0aCA9IGRvdWJsZWRMaW1pdDtcbiAgICAgICAgICAgIGxpbWl0ID0gZG91YmxlZExpbWl0O1xuICAgICAgICAgICAgcHVzaChpdCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6IC8vIERST1BcblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB0YWtlOiB0YWtlLFxuICAgIGZsdXNoOiBmbHVzaFxuICB9O1xufVxuXG52YXIgbm9uZSA9IGZ1bmN0aW9uIG5vbmUoKSB7XG4gIHJldHVybiB6ZXJvQnVmZmVyO1xufTtcbnZhciBmaXhlZCA9IGZ1bmN0aW9uIGZpeGVkKGxpbWl0KSB7XG4gIHJldHVybiByaW5nQnVmZmVyKGxpbWl0LCBPTl9PVkVSRkxPV19USFJPVyk7XG59O1xudmFyIGRyb3BwaW5nID0gZnVuY3Rpb24gZHJvcHBpbmcobGltaXQpIHtcbiAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX0RST1ApO1xufTtcbnZhciBzbGlkaW5nID0gZnVuY3Rpb24gc2xpZGluZyhsaW1pdCkge1xuICByZXR1cm4gcmluZ0J1ZmZlcihsaW1pdCwgT05fT1ZFUkZMT1dfU0xJREUpO1xufTtcbnZhciBleHBhbmRpbmcgPSBmdW5jdGlvbiBleHBhbmRpbmcoaW5pdGlhbFNpemUpIHtcbiAgcmV0dXJuIHJpbmdCdWZmZXIoaW5pdGlhbFNpemUsIE9OX09WRVJGTE9XX0VYUEFORCk7XG59O1xuXG52YXIgYnVmZmVycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBub25lOiBub25lLFxuICBmaXhlZDogZml4ZWQsXG4gIGRyb3BwaW5nOiBkcm9wcGluZyxcbiAgc2xpZGluZzogc2xpZGluZyxcbiAgZXhwYW5kaW5nOiBleHBhbmRpbmdcbn0pO1xuXG52YXIgVEFLRSA9ICdUQUtFJztcbnZhciBQVVQgPSAnUFVUJztcbnZhciBBTEwgPSAnQUxMJztcbnZhciBSQUNFID0gJ1JBQ0UnO1xudmFyIENBTEwgPSAnQ0FMTCc7XG52YXIgQ1BTID0gJ0NQUyc7XG52YXIgRk9SSyA9ICdGT1JLJztcbnZhciBKT0lOID0gJ0pPSU4nO1xudmFyIENBTkNFTCA9ICdDQU5DRUwnO1xudmFyIFNFTEVDVCA9ICdTRUxFQ1QnO1xudmFyIEFDVElPTl9DSEFOTkVMID0gJ0FDVElPTl9DSEFOTkVMJztcbnZhciBDQU5DRUxMRUQgPSAnQ0FOQ0VMTEVEJztcbnZhciBGTFVTSCA9ICdGTFVTSCc7XG52YXIgR0VUX0NPTlRFWFQgPSAnR0VUX0NPTlRFWFQnO1xudmFyIFNFVF9DT05URVhUID0gJ1NFVF9DT05URVhUJztcblxudmFyIGVmZmVjdFR5cGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIFRBS0U6IFRBS0UsXG4gIFBVVDogUFVULFxuICBBTEw6IEFMTCxcbiAgUkFDRTogUkFDRSxcbiAgQ0FMTDogQ0FMTCxcbiAgQ1BTOiBDUFMsXG4gIEZPUks6IEZPUkssXG4gIEpPSU46IEpPSU4sXG4gIENBTkNFTDogQ0FOQ0VMLFxuICBTRUxFQ1Q6IFNFTEVDVCxcbiAgQUNUSU9OX0NIQU5ORUw6IEFDVElPTl9DSEFOTkVMLFxuICBDQU5DRUxMRUQ6IENBTkNFTExFRCxcbiAgRkxVU0g6IEZMVVNILFxuICBHRVRfQ09OVEVYVDogR0VUX0NPTlRFWFQsXG4gIFNFVF9DT05URVhUOiBTRVRfQ09OVEVYVFxufSk7XG5cbnZhciBURVNUX0hJTlQgPSAnXFxuKEhJTlQ6IGlmIHlvdSBhcmUgZ2V0dGluZyB0aGVzZSBlcnJvcnMgaW4gdGVzdHMsIGNvbnNpZGVyIHVzaW5nIGNyZWF0ZU1vY2tUYXNrIGZyb20gQHJlZHV4LXNhZ2EvdGVzdGluZy11dGlscyknO1xuXG52YXIgbWFrZUVmZmVjdCA9IGZ1bmN0aW9uIG1ha2VFZmZlY3QodHlwZSwgcGF5bG9hZCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW0lPXSA9IHRydWUsIF9yZWYuY29tYmluYXRvciA9IGZhbHNlLCBfcmVmLnR5cGUgPSB0eXBlLCBfcmVmLnBheWxvYWQgPSBwYXlsb2FkLCBfcmVmO1xufTtcblxudmFyIGlzRm9ya0VmZmVjdCA9IGZ1bmN0aW9uIGlzRm9ya0VmZmVjdChlZmYpIHtcbiAgcmV0dXJuIGVmZmVjdChlZmYpICYmIGVmZi50eXBlID09PSBGT1JLO1xufTtcblxudmFyIGRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaChlZmYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVjayhlZmYsIGlzRm9ya0VmZmVjdCwgJ2RldGFjaChlZmYpOiBhcmd1bWVudCBtdXN0IGJlIGEgZm9yayBlZmZlY3QnKTtcbiAgfVxuXG4gIHJldHVybiBtYWtlRWZmZWN0KEZPUkssIF9leHRlbmRzKHt9LCBlZmYucGF5bG9hZCwge1xuICAgIGRldGFjaGVkOiB0cnVlXG4gIH0pKTtcbn07XG5mdW5jdGlvbiB0YWtlKHBhdHRlcm5PckNoYW5uZWwsIG11bHRpY2FzdFBhdHRlcm4pIHtcbiAgaWYgKHBhdHRlcm5PckNoYW5uZWwgPT09IHZvaWQgMCkge1xuICAgIHBhdHRlcm5PckNoYW5uZWwgPSAnKic7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2hlY2soYXJndW1lbnRzWzBdLCBub3RVbmRlZiwgJ3Rha2UocGF0dGVybk9yQ2hhbm5lbCk6IHBhdHRlcm5PckNoYW5uZWwgaXMgdW5kZWZpbmVkJyk7XG4gIH1cblxuICBpZiAocGF0dGVybihwYXR0ZXJuT3JDaGFubmVsKSkge1xuICAgIGlmIChub3RVbmRlZihtdWx0aWNhc3RQYXR0ZXJuKSkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgICAgY29uc29sZS53YXJuKFwidGFrZShwYXR0ZXJuKSB0YWtlcyBvbmUgYXJndW1lbnQgYnV0IHR3byB3ZXJlIHByb3ZpZGVkLiBDb25zaWRlciBwYXNzaW5nIGFuIGFycmF5IGZvciBsaXN0ZW5pbmcgdG8gc2V2ZXJhbCBhY3Rpb24gdHlwZXNcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1ha2VFZmZlY3QoVEFLRSwge1xuICAgICAgcGF0dGVybjogcGF0dGVybk9yQ2hhbm5lbFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKG11bHRpY2FzdChwYXR0ZXJuT3JDaGFubmVsKSAmJiBub3RVbmRlZihtdWx0aWNhc3RQYXR0ZXJuKSAmJiBwYXR0ZXJuKG11bHRpY2FzdFBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIG1ha2VFZmZlY3QoVEFLRSwge1xuICAgICAgY2hhbm5lbDogcGF0dGVybk9yQ2hhbm5lbCxcbiAgICAgIHBhdHRlcm46IG11bHRpY2FzdFBhdHRlcm5cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChjaGFubmVsKHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgaWYgKG5vdFVuZGVmKG11bHRpY2FzdFBhdHRlcm4pKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgICBjb25zb2xlLndhcm4oXCJ0YWtlKGNoYW5uZWwpIHRha2VzIG9uZSBhcmd1bWVudCBidXQgdHdvIHdlcmUgcHJvdmlkZWQuIFNlY29uZCBhcmd1bWVudCBpcyBpZ25vcmVkLlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFrZUVmZmVjdChUQUtFLCB7XG4gICAgICBjaGFubmVsOiBwYXR0ZXJuT3JDaGFubmVsXG4gICAgfSk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihcInRha2UocGF0dGVybk9yQ2hhbm5lbCk6IGFyZ3VtZW50IFwiICsgcGF0dGVybk9yQ2hhbm5lbCArIFwiIGlzIG5vdCB2YWxpZCBjaGFubmVsIG9yIGEgdmFsaWQgcGF0dGVyblwiKTtcbiAgfVxufVxudmFyIHRha2VNYXliZSA9IGZ1bmN0aW9uIHRha2VNYXliZSgpIHtcbiAgdmFyIGVmZiA9IHRha2UuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICBlZmYucGF5bG9hZC5tYXliZSA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59O1xuZnVuY3Rpb24gcHV0KGNoYW5uZWwkMSwgYWN0aW9uKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBjaGVjayhjaGFubmVsJDEsIG5vdFVuZGVmLCAncHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50IGNoYW5uZWwgaXMgdW5kZWZpbmVkJyk7XG4gICAgICBjaGVjayhjaGFubmVsJDEsIGNoYW5uZWwsIFwicHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50IFwiICsgY2hhbm5lbCQxICsgXCIgaXMgbm90IGEgdmFsaWQgY2hhbm5lbFwiKTtcbiAgICAgIGNoZWNrKGFjdGlvbiwgbm90VW5kZWYsICdwdXQoY2hhbm5lbCwgYWN0aW9uKTogYXJndW1lbnQgYWN0aW9uIGlzIHVuZGVmaW5lZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGVjayhjaGFubmVsJDEsIG5vdFVuZGVmLCAncHV0KGFjdGlvbik6IGFyZ3VtZW50IGFjdGlvbiBpcyB1bmRlZmluZWQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAodW5kZWYoYWN0aW9uKSkge1xuICAgIGFjdGlvbiA9IGNoYW5uZWwkMTsgLy8gYHVuZGVmaW5lZGAgaW5zdGVhZCBvZiBgbnVsbGAgdG8gbWFrZSBkZWZhdWx0IHBhcmFtZXRlciB3b3JrXG5cbiAgICBjaGFubmVsJDEgPSB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gbWFrZUVmZmVjdChQVVQsIHtcbiAgICBjaGFubmVsOiBjaGFubmVsJDEsXG4gICAgYWN0aW9uOiBhY3Rpb25cbiAgfSk7XG59XG52YXIgcHV0UmVzb2x2ZSA9IGZ1bmN0aW9uIHB1dFJlc29sdmUoKSB7XG4gIHZhciBlZmYgPSBwdXQuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICBlZmYucGF5bG9hZC5yZXNvbHZlID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn07XG5mdW5jdGlvbiBhbGwoZWZmZWN0cykge1xuICB2YXIgZWZmID0gbWFrZUVmZmVjdChBTEwsIGVmZmVjdHMpO1xuICBlZmYuY29tYmluYXRvciA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59XG5mdW5jdGlvbiByYWNlKGVmZmVjdHMpIHtcbiAgdmFyIGVmZiA9IG1ha2VFZmZlY3QoUkFDRSwgZWZmZWN0cyk7XG4gIGVmZi5jb21iaW5hdG9yID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn0gLy8gdGhpcyBtYXRjaCBnZXRGbkNhbGxEZXNjcmlwdG9yIGxvZ2ljXG5cbnZhciB2YWxpZGF0ZUZuRGVzY3JpcHRvciA9IGZ1bmN0aW9uIHZhbGlkYXRlRm5EZXNjcmlwdG9yKGVmZmVjdE5hbWUsIGZuRGVzY3JpcHRvcikge1xuICBjaGVjayhmbkRlc2NyaXB0b3IsIG5vdFVuZGVmLCBlZmZlY3ROYW1lICsgXCI6IGFyZ3VtZW50IGZuIGlzIHVuZGVmaW5lZCBvciBudWxsXCIpO1xuXG4gIGlmIChmdW5jKGZuRGVzY3JpcHRvcikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY29udGV4dCA9IG51bGw7XG4gIHZhciBmbjtcblxuICBpZiAoYXJyYXkoZm5EZXNjcmlwdG9yKSkge1xuICAgIGNvbnRleHQgPSBmbkRlc2NyaXB0b3JbMF07XG4gICAgZm4gPSBmbkRlc2NyaXB0b3JbMV07XG4gICAgY2hlY2soZm4sIG5vdFVuZGVmLCBlZmZlY3ROYW1lICsgXCI6IGFyZ3VtZW50IG9mIHR5cGUgW2NvbnRleHQsIGZuXSBoYXMgdW5kZWZpbmVkIG9yIG51bGwgYGZuYFwiKTtcbiAgfSBlbHNlIGlmIChvYmplY3QoZm5EZXNjcmlwdG9yKSkge1xuICAgIGNvbnRleHQgPSBmbkRlc2NyaXB0b3IuY29udGV4dDtcbiAgICBmbiA9IGZuRGVzY3JpcHRvci5mbjtcbiAgICBjaGVjayhmbiwgbm90VW5kZWYsIGVmZmVjdE5hbWUgKyBcIjogYXJndW1lbnQgb2YgdHlwZSB7Y29udGV4dCwgZm59IGhhcyB1bmRlZmluZWQgb3IgbnVsbCBgZm5gXCIpO1xuICB9IGVsc2Uge1xuICAgIGNoZWNrKGZuRGVzY3JpcHRvciwgZnVuYywgZWZmZWN0TmFtZSArIFwiOiBhcmd1bWVudCBmbiBpcyBub3QgZnVuY3Rpb25cIik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNvbnRleHQgJiYgc3RyaW5nKGZuKSkge1xuICAgIGNoZWNrKGNvbnRleHRbZm5dLCBmdW5jLCBlZmZlY3ROYW1lICsgXCI6IGNvbnRleHQgYXJndW1lbnRzIGhhcyBubyBzdWNoIG1ldGhvZCAtIFxcXCJcIiArIGZuICsgXCJcXFwiXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoZWNrKGZuLCBmdW5jLCBlZmZlY3ROYW1lICsgXCI6IHVucGFja2VkIGZuIGFyZ3VtZW50IChmcm9tIFtjb250ZXh0LCBmbl0gb3Ige2NvbnRleHQsIGZufSkgaXMgbm90IGEgZnVuY3Rpb25cIik7XG59O1xuXG5mdW5jdGlvbiBnZXRGbkNhbGxEZXNjcmlwdG9yKGZuRGVzY3JpcHRvciwgYXJncykge1xuICB2YXIgY29udGV4dCA9IG51bGw7XG4gIHZhciBmbjtcblxuICBpZiAoZnVuYyhmbkRlc2NyaXB0b3IpKSB7XG4gICAgZm4gPSBmbkRlc2NyaXB0b3I7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGFycmF5KGZuRGVzY3JpcHRvcikpIHtcbiAgICAgIGNvbnRleHQgPSBmbkRlc2NyaXB0b3JbMF07XG4gICAgICBmbiA9IGZuRGVzY3JpcHRvclsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGV4dCA9IGZuRGVzY3JpcHRvci5jb250ZXh0O1xuICAgICAgZm4gPSBmbkRlc2NyaXB0b3IuZm47XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgc3RyaW5nKGZuKSAmJiBmdW5jKGNvbnRleHRbZm5dKSkge1xuICAgICAgZm4gPSBjb250ZXh0W2ZuXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgZm46IGZuLFxuICAgIGFyZ3M6IGFyZ3NcbiAgfTtcbn1cblxudmFyIGlzTm90RGVsYXlFZmZlY3QgPSBmdW5jdGlvbiBpc05vdERlbGF5RWZmZWN0KGZuKSB7XG4gIHJldHVybiBmbiAhPT0gZGVsYXk7XG59O1xuXG5mdW5jdGlvbiBjYWxsKGZuRGVzY3JpcHRvcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBhcmcwID0gdHlwZW9mIGFyZ3NbMF0gPT09ICdudW1iZXInID8gYXJnc1swXSA6ICdtcyc7XG4gICAgY2hlY2soZm5EZXNjcmlwdG9yLCBpc05vdERlbGF5RWZmZWN0LCBcImluc3RlYWQgb2Ygd3JpdGluZyBgeWllbGQgY2FsbChkZWxheSwgXCIgKyBhcmcwICsgXCIpYCB3aGVyZSBkZWxheSBpcyBhbiBlZmZlY3QgZnJvbSBgcmVkdXgtc2FnYS9lZmZlY3RzYCB5b3Ugc2hvdWxkIHdyaXRlIGB5aWVsZCBkZWxheShcIiArIGFyZzAgKyBcIilgXCIpO1xuICAgIHZhbGlkYXRlRm5EZXNjcmlwdG9yKCdjYWxsJywgZm5EZXNjcmlwdG9yKTtcbiAgfVxuXG4gIHJldHVybiBtYWtlRWZmZWN0KENBTEwsIGdldEZuQ2FsbERlc2NyaXB0b3IoZm5EZXNjcmlwdG9yLCBhcmdzKSk7XG59XG5mdW5jdGlvbiBhcHBseShjb250ZXh0LCBmbiwgYXJncykge1xuICBpZiAoYXJncyA9PT0gdm9pZCAwKSB7XG4gICAgYXJncyA9IFtdO1xuICB9XG5cbiAgdmFyIGZuRGVzY3JpcHRvciA9IFtjb250ZXh0LCBmbl07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YWxpZGF0ZUZuRGVzY3JpcHRvcignYXBwbHknLCBmbkRlc2NyaXB0b3IpO1xuICB9XG5cbiAgcmV0dXJuIG1ha2VFZmZlY3QoQ0FMTCwgZ2V0Rm5DYWxsRGVzY3JpcHRvcihbY29udGV4dCwgZm5dLCBhcmdzKSk7XG59XG5mdW5jdGlvbiBjcHMoZm5EZXNjcmlwdG9yKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVGbkRlc2NyaXB0b3IoJ2NwcycsIGZuRGVzY3JpcHRvcik7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICByZXR1cm4gbWFrZUVmZmVjdChDUFMsIGdldEZuQ2FsbERlc2NyaXB0b3IoZm5EZXNjcmlwdG9yLCBhcmdzKSk7XG59XG5mdW5jdGlvbiBmb3JrKGZuRGVzY3JpcHRvcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlRm5EZXNjcmlwdG9yKCdmb3JrJywgZm5EZXNjcmlwdG9yKTtcbiAgICBjaGVjayhmbkRlc2NyaXB0b3IsIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiAhZWZmZWN0KGFyZyk7XG4gICAgfSwgJ2Zvcms6IGFyZ3VtZW50IG11c3Qgbm90IGJlIGFuIGVmZmVjdCcpO1xuICB9XG5cbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zID4gMSA/IF9sZW4zIC0gMSA6IDApLCBfa2V5MyA9IDE7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgcmV0dXJuIG1ha2VFZmZlY3QoRk9SSywgZ2V0Rm5DYWxsRGVzY3JpcHRvcihmbkRlc2NyaXB0b3IsIGFyZ3MpKTtcbn1cbmZ1bmN0aW9uIHNwYXduKGZuRGVzY3JpcHRvcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlRm5EZXNjcmlwdG9yKCdzcGF3bicsIGZuRGVzY3JpcHRvcik7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQgPiAxID8gX2xlbjQgLSAxIDogMCksIF9rZXk0ID0gMTsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGFyZ3NbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICByZXR1cm4gZGV0YWNoKGZvcmsuYXBwbHkodm9pZCAwLCBbZm5EZXNjcmlwdG9yXS5jb25jYXQoYXJncykpKTtcbn1cbmZ1bmN0aW9uIGpvaW4odGFza09yVGFza3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignam9pbiguLi50YXNrcykgaXMgbm90IHN1cHBvcnRlZCBhbnkgbW9yZS4gUGxlYXNlIHVzZSBqb2luKFsuLi50YXNrc10pIHRvIGpvaW4gbXVsdGlwbGUgdGFza3MuJyk7XG4gICAgfVxuXG4gICAgaWYgKGFycmF5KHRhc2tPclRhc2tzKSkge1xuICAgICAgdGFza09yVGFza3MuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICBjaGVjayh0LCB0YXNrLCBcImpvaW4oWy4uLnRhc2tzXSk6IGFyZ3VtZW50IFwiICsgdCArIFwiIGlzIG5vdCBhIHZhbGlkIFRhc2sgb2JqZWN0IFwiICsgVEVTVF9ISU5UKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGVjayh0YXNrT3JUYXNrcywgdGFzaywgXCJqb2luKHRhc2spOiBhcmd1bWVudCBcIiArIHRhc2tPclRhc2tzICsgXCIgaXMgbm90IGEgdmFsaWQgVGFzayBvYmplY3QgXCIgKyBURVNUX0hJTlQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYWtlRWZmZWN0KEpPSU4sIHRhc2tPclRhc2tzKTtcbn1cbmZ1bmN0aW9uIGNhbmNlbCh0YXNrT3JUYXNrcykge1xuICBpZiAodGFza09yVGFza3MgPT09IHZvaWQgMCkge1xuICAgIHRhc2tPclRhc2tzID0gU0VMRl9DQU5DRUxMQVRJT047XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5jZWwoLi4udGFza3MpIGlzIG5vdCBzdXBwb3J0ZWQgYW55IG1vcmUuIFBsZWFzZSB1c2UgY2FuY2VsKFsuLi50YXNrc10pIHRvIGNhbmNlbCBtdWx0aXBsZSB0YXNrcy4nKTtcbiAgICB9XG5cbiAgICBpZiAoYXJyYXkodGFza09yVGFza3MpKSB7XG4gICAgICB0YXNrT3JUYXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGNoZWNrKHQsIHRhc2ssIFwiY2FuY2VsKFsuLi50YXNrc10pOiBhcmd1bWVudCBcIiArIHQgKyBcIiBpcyBub3QgYSB2YWxpZCBUYXNrIG9iamVjdCBcIiArIFRFU1RfSElOVCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRhc2tPclRhc2tzICE9PSBTRUxGX0NBTkNFTExBVElPTiAmJiBub3RVbmRlZih0YXNrT3JUYXNrcykpIHtcbiAgICAgIGNoZWNrKHRhc2tPclRhc2tzLCB0YXNrLCBcImNhbmNlbCh0YXNrKTogYXJndW1lbnQgXCIgKyB0YXNrT3JUYXNrcyArIFwiIGlzIG5vdCBhIHZhbGlkIFRhc2sgb2JqZWN0IFwiICsgVEVTVF9ISU5UKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWFrZUVmZmVjdChDQU5DRUwsIHRhc2tPclRhc2tzKTtcbn1cbmZ1bmN0aW9uIHNlbGVjdChzZWxlY3Rvcikge1xuICBpZiAoc2VsZWN0b3IgPT09IHZvaWQgMCkge1xuICAgIHNlbGVjdG9yID0gaWRlbnRpdHk7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjUgPiAxID8gX2xlbjUgLSAxIDogMCksIF9rZXk1ID0gMTsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIGFyZ3NbX2tleTUgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2hlY2soYXJndW1lbnRzWzBdLCBub3RVbmRlZiwgJ3NlbGVjdChzZWxlY3RvciwgWy4uLl0pOiBhcmd1bWVudCBzZWxlY3RvciBpcyB1bmRlZmluZWQnKTtcbiAgICBjaGVjayhzZWxlY3RvciwgZnVuYywgXCJzZWxlY3Qoc2VsZWN0b3IsIFsuLi5dKTogYXJndW1lbnQgXCIgKyBzZWxlY3RvciArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgcmV0dXJuIG1ha2VFZmZlY3QoU0VMRUNULCB7XG4gICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgIGFyZ3M6IGFyZ3NcbiAgfSk7XG59XG4vKipcbiAgY2hhbm5lbChwYXR0ZXJuLCBbYnVmZmVyXSkgICAgPT4gY3JlYXRlcyBhIHByb3h5IGNoYW5uZWwgZm9yIHN0b3JlIGFjdGlvbnNcbioqL1xuXG5mdW5jdGlvbiBhY3Rpb25DaGFubmVsKHBhdHRlcm4kMSwgYnVmZmVyJDEpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVjayhwYXR0ZXJuJDEsIHBhdHRlcm4sICdhY3Rpb25DaGFubmVsKHBhdHRlcm4sLi4uKTogYXJndW1lbnQgcGF0dGVybiBpcyBub3QgdmFsaWQnKTtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgY2hlY2soYnVmZmVyJDEsIG5vdFVuZGVmLCAnYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXIpOiBhcmd1bWVudCBidWZmZXIgaXMgdW5kZWZpbmVkJyk7XG4gICAgICBjaGVjayhidWZmZXIkMSwgYnVmZmVyLCBcImFjdGlvbkNoYW5uZWwocGF0dGVybiwgYnVmZmVyKTogYXJndW1lbnQgXCIgKyBidWZmZXIkMSArIFwiIGlzIG5vdCBhIHZhbGlkIGJ1ZmZlclwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWFrZUVmZmVjdChBQ1RJT05fQ0hBTk5FTCwge1xuICAgIHBhdHRlcm46IHBhdHRlcm4kMSxcbiAgICBidWZmZXI6IGJ1ZmZlciQxXG4gIH0pO1xufVxuZnVuY3Rpb24gY2FuY2VsbGVkKCkge1xuICByZXR1cm4gbWFrZUVmZmVjdChDQU5DRUxMRUQsIHt9KTtcbn1cbmZ1bmN0aW9uIGZsdXNoKGNoYW5uZWwkMSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrKGNoYW5uZWwkMSwgY2hhbm5lbCwgXCJmbHVzaChjaGFubmVsKTogYXJndW1lbnQgXCIgKyBjaGFubmVsJDEgKyBcIiBpcyBub3QgdmFsaWQgY2hhbm5lbFwiKTtcbiAgfVxuXG4gIHJldHVybiBtYWtlRWZmZWN0KEZMVVNILCBjaGFubmVsJDEpO1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dChwcm9wKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2socHJvcCwgc3RyaW5nLCBcImdldENvbnRleHQocHJvcCk6IGFyZ3VtZW50IFwiICsgcHJvcCArIFwiIGlzIG5vdCBhIHN0cmluZ1wiKTtcbiAgfVxuXG4gIHJldHVybiBtYWtlRWZmZWN0KEdFVF9DT05URVhULCBwcm9wKTtcbn1cbmZ1bmN0aW9uIHNldENvbnRleHQocHJvcHMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVjayhwcm9wcywgb2JqZWN0LCBjcmVhdGVTZXRDb250ZXh0V2FybmluZyhudWxsLCBwcm9wcykpO1xuICB9XG5cbiAgcmV0dXJuIG1ha2VFZmZlY3QoU0VUX0NPTlRFWFQsIHByb3BzKTtcbn1cbnZhciBkZWxheSA9XG4vKiNfX1BVUkVfXyovXG5jYWxsLmJpbmQobnVsbCwgZGVsYXlQKTtcblxuZXhwb3J0IHsgYXBwbHkgYXMgJCwgQUxMIGFzIEEsIGxvZ0Vycm9yIGFzIEIsIENBTEwgYXMgQywgd3JhcFNhZ2FEaXNwYXRjaCBhcyBELCBpZGVudGl0eSBhcyBFLCBGT1JLIGFzIEYsIEdFVF9DT05URVhUIGFzIEcsIGJ1ZmZlcnMgYXMgSCwgZGV0YWNoIGFzIEksIEpPSU4gYXMgSiwgdGFrZSBhcyBLLCBmb3JrIGFzIEwsIGNhbmNlbCBhcyBNLCBjYWxsIGFzIE4sIGRlbGF5IGFzIE8sIFBVVCBhcyBQLCBhY3Rpb25DaGFubmVsIGFzIFEsIFJBQ0UgYXMgUiwgU0VMRUNUIGFzIFMsIFRBS0UgYXMgVCwgc2xpZGluZyBhcyBVLCByYWNlIGFzIFYsIGVmZmVjdFR5cGVzIGFzIFcsIHRha2VNYXliZSBhcyBYLCBwdXQgYXMgWSwgcHV0UmVzb2x2ZSBhcyBaLCBhbGwgYXMgXywgQ1BTIGFzIGEsIGNwcyBhcyBhMCwgc3Bhd24gYXMgYTEsIGpvaW4gYXMgYTIsIHNlbGVjdCBhcyBhMywgY2FuY2VsbGVkIGFzIGE0LCBmbHVzaCBhcyBhNSwgZ2V0Q29udGV4dCBhcyBhNiwgc2V0Q29udGV4dCBhcyBhNywgQ0FOQ0VMIGFzIGIsIGNoZWNrIGFzIGMsIEFDVElPTl9DSEFOTkVMIGFzIGQsIGV4cGFuZGluZyBhcyBlLCBDQU5DRUxMRUQgYXMgZiwgRkxVU0ggYXMgZywgU0VUX0NPTlRFWFQgYXMgaCwgaW50ZXJuYWxFcnIgYXMgaSwgZ2V0TWV0YUluZm8gYXMgaiwga1RydWUgYXMgaywgY3JlYXRlQWxsU3R5bGVDaGlsZENhbGxiYWNrcyBhcyBsLCBjcmVhdGVFbXB0eUFycmF5IGFzIG0sIG5vbmUgYXMgbiwgb25jZSBhcyBvLCBhc3NpZ25XaXRoU3ltYm9scyBhcyBwLCBtYWtlSXRlcmF0b3IgYXMgcSwgcmVtb3ZlIGFzIHIsIHNob3VsZENvbXBsZXRlIGFzIHMsIG5vb3AgYXMgdCwgZmxhdE1hcCBhcyB1LCBnZXRMb2NhdGlvbiBhcyB2LCBjcmVhdGVTZXRDb250ZXh0V2FybmluZyBhcyB3LCBhc3luY0l0ZXJhdG9yU3ltYm9sIGFzIHgsIHNob3VsZENhbmNlbCBhcyB5LCBzaG91bGRUZXJtaW5hdGUgYXMgeiB9O1xuIiwiZnVuY3Rpb24gZGVmZXJyZWQoKSB7XG4gIHZhciBkZWYgPSB7fTtcbiAgZGVmLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZGVmLnJlc29sdmUgPSByZXNvbHZlO1xuICAgIGRlZi5yZWplY3QgPSByZWplY3Q7XG4gIH0pO1xuICByZXR1cm4gZGVmO1xufVxuZnVuY3Rpb24gYXJyYXlPZkRlZmVycmVkKGxlbmd0aCkge1xuICB2YXIgYXJyID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGFyci5wdXNoKGRlZmVycmVkKCkpO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmZXJyZWQ7XG5leHBvcnQgeyBhcnJheU9mRGVmZXJyZWQgfTtcbiIsImltcG9ydCB7IENIQU5ORUxfRU5EX1RZUEUsIE1VTFRJQ0FTVCwgTUFUQ0gsIFNBR0FfQUNUSU9OLCBDQU5DRUwsIFNFTEZfQ0FOQ0VMTEFUSU9OLCBURVJNSU5BVEUsIFRBU0ssIFRBU0tfQ0FOQ0VMLCBJTyB9IGZyb20gJ0ByZWR1eC1zYWdhL3N5bWJvbHMnO1xuZXhwb3J0IHsgQ0FOQ0VMLCBTQUdBX0xPQ0FUSU9OIH0gZnJvbSAnQHJlZHV4LXNhZ2Evc3ltYm9scyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgeyBzdHJpbmcgYXMgc3RyaW5nJDEsIGFycmF5IGFzIGFycmF5JDEsIHN0cmluZ2FibGVGdW5jLCBmdW5jLCBzeW1ib2wgYXMgc3ltYm9sJDEsIGJ1ZmZlciwgbm90VW5kZWYsIHByb21pc2UsIGl0ZXJhdG9yLCB1bmRlZiwgb2JqZWN0LCBjaGFubmVsIGFzIGNoYW5uZWwkMSB9IGZyb20gJ0ByZWR1eC1zYWdhL2lzJztcbmltcG9ydCB7IGsgYXMga1RydWUsIGUgYXMgZXhwYW5kaW5nLCBjIGFzIGNoZWNrLCBvIGFzIG9uY2UsIHIgYXMgcmVtb3ZlLCBuIGFzIG5vbmUsIGkgYXMgaW50ZXJuYWxFcnIsIFQgYXMgVEFLRSwgUCBhcyBQVVQsIEEgYXMgQUxMLCBSIGFzIFJBQ0UsIEMgYXMgQ0FMTCwgYSBhcyBDUFMsIEYgYXMgRk9SSywgSiBhcyBKT0lOLCBiIGFzIENBTkNFTCQxLCBTIGFzIFNFTEVDVCwgZCBhcyBBQ1RJT05fQ0hBTk5FTCwgZiBhcyBDQU5DRUxMRUQkMSwgZyBhcyBGTFVTSCwgRyBhcyBHRVRfQ09OVEVYVCwgaCBhcyBTRVRfQ09OVEVYVCwgaiBhcyBnZXRNZXRhSW5mbywgbCBhcyBjcmVhdGVBbGxTdHlsZUNoaWxkQ2FsbGJhY2tzLCBtIGFzIGNyZWF0ZUVtcHR5QXJyYXksIHAgYXMgYXNzaWduV2l0aFN5bWJvbHMsIHEgYXMgbWFrZUl0ZXJhdG9yLCBzIGFzIHNob3VsZENvbXBsZXRlLCB0IGFzIG5vb3AsIHUgYXMgZmxhdE1hcCwgdiBhcyBnZXRMb2NhdGlvbiwgdyBhcyBjcmVhdGVTZXRDb250ZXh0V2FybmluZywgeCBhcyBhc3luY0l0ZXJhdG9yU3ltYm9sLCB5IGFzIHNob3VsZENhbmNlbCwgeiBhcyBzaG91bGRUZXJtaW5hdGUsIEIgYXMgbG9nRXJyb3IsIEQgYXMgd3JhcFNhZ2FEaXNwYXRjaCwgRSBhcyBpZGVudGl0eSB9IGZyb20gJy4vaW8tYzM3OTI5NjMuanMnO1xuZXhwb3J0IHsgSCBhcyBidWZmZXJzLCBJIGFzIGRldGFjaCB9IGZyb20gJy4vaW8tYzM3OTI5NjMuanMnO1xuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCBkZWZlcnJlZCBmcm9tICdAcmVkdXgtc2FnYS9kZWZlcnJlZCc7XG5pbXBvcnQgJ0ByZWR1eC1zYWdhL2RlbGF5LXAnO1xuXG52YXIgcXVldWUgPSBbXTtcbi8qKlxuICBWYXJpYWJsZSB0byBob2xkIGEgY291bnRpbmcgc2VtYXBob3JlXG4gIC0gSW5jcmVtZW50aW5nIGFkZHMgYSBsb2NrIGFuZCBwdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgc3VzcGVuZGVkYCBzdGF0ZSAoaWYgaXQncyBub3RcbiAgICBhbHJlYWR5IHN1c3BlbmRlZClcbiAgLSBEZWNyZW1lbnRpbmcgcmVsZWFzZXMgYSBsb2NrLiBaZXJvIGxvY2tzIHB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGByZWxlYXNlZGAgc3RhdGUuIFRoaXNcbiAgICB0cmlnZ2VycyBmbHVzaGluZyB0aGUgcXVldWVkIHRhc2tzLlxuKiovXG5cbnZhciBzZW1hcGhvcmUgPSAwO1xuLyoqXG4gIEV4ZWN1dGVzIGEgdGFzayAnYXRvbWljYWxseScuIFRhc2tzIHNjaGVkdWxlZCBkdXJpbmcgdGhpcyBleGVjdXRpb24gd2lsbCBiZSBxdWV1ZWRcbiAgYW5kIGZsdXNoZWQgYWZ0ZXIgdGhpcyB0YXNrIGhhcyBmaW5pc2hlZCAoYXNzdW1pbmcgdGhlIHNjaGVkdWxlciBlbmR1cCBpbiBhIHJlbGVhc2VkXG4gIHN0YXRlKS5cbioqL1xuXG5mdW5jdGlvbiBleGVjKHRhc2spIHtcbiAgdHJ5IHtcbiAgICBzdXNwZW5kKCk7XG4gICAgdGFzaygpO1xuICB9IGZpbmFsbHkge1xuICAgIHJlbGVhc2UoKTtcbiAgfVxufVxuLyoqXG4gIEV4ZWN1dGVzIG9yIHF1ZXVlcyBhIHRhc2sgZGVwZW5kaW5nIG9uIHRoZSBzdGF0ZSBvZiB0aGUgc2NoZWR1bGVyIChgc3VzcGVuZGVkYCBvciBgcmVsZWFzZWRgKVxuKiovXG5cblxuZnVuY3Rpb24gYXNhcCh0YXNrKSB7XG4gIHF1ZXVlLnB1c2godGFzayk7XG5cbiAgaWYgKCFzZW1hcGhvcmUpIHtcbiAgICBzdXNwZW5kKCk7XG4gICAgZmx1c2goKTtcbiAgfVxufVxuLyoqXG4gKiBQdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgc3VzcGVuZGVkYCBzdGF0ZSBhbmQgZXhlY3V0ZXMgYSB0YXNrIGltbWVkaWF0ZWx5LlxuICovXG5cbmZ1bmN0aW9uIGltbWVkaWF0ZWx5KHRhc2spIHtcbiAgdHJ5IHtcbiAgICBzdXNwZW5kKCk7XG4gICAgcmV0dXJuIHRhc2soKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBmbHVzaCgpO1xuICB9XG59XG4vKipcbiAgUHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHN1c3BlbmRlZGAgc3RhdGUuIFNjaGVkdWxlZCB0YXNrcyB3aWxsIGJlIHF1ZXVlZCB1bnRpbCB0aGVcbiAgc2NoZWR1bGVyIGlzIHJlbGVhc2VkLlxuKiovXG5cbmZ1bmN0aW9uIHN1c3BlbmQoKSB7XG4gIHNlbWFwaG9yZSsrO1xufVxuLyoqXG4gIFB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGByZWxlYXNlZGAgc3RhdGUuXG4qKi9cblxuXG5mdW5jdGlvbiByZWxlYXNlKCkge1xuICBzZW1hcGhvcmUtLTtcbn1cbi8qKlxuICBSZWxlYXNlcyB0aGUgY3VycmVudCBsb2NrLiBFeGVjdXRlcyBhbGwgcXVldWVkIHRhc2tzIGlmIHRoZSBzY2hlZHVsZXIgaXMgaW4gdGhlIHJlbGVhc2VkIHN0YXRlLlxuKiovXG5cblxuZnVuY3Rpb24gZmx1c2goKSB7XG4gIHJlbGVhc2UoKTtcbiAgdmFyIHRhc2s7XG5cbiAgd2hpbGUgKCFzZW1hcGhvcmUgJiYgKHRhc2sgPSBxdWV1ZS5zaGlmdCgpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZXhlYyh0YXNrKTtcbiAgfVxufVxuXG52YXIgYXJyYXkgPSBmdW5jdGlvbiBhcnJheShwYXR0ZXJucykge1xuICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgcmV0dXJuIHBhdHRlcm5zLnNvbWUoZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiBtYXRjaGVyKHApKGlucHV0KTtcbiAgICB9KTtcbiAgfTtcbn07XG52YXIgcHJlZGljYXRlID0gZnVuY3Rpb24gcHJlZGljYXRlKF9wcmVkaWNhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHJldHVybiBfcHJlZGljYXRlKGlucHV0KTtcbiAgfTtcbn07XG52YXIgc3RyaW5nID0gZnVuY3Rpb24gc3RyaW5nKHBhdHRlcm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dC50eXBlID09PSBTdHJpbmcocGF0dGVybik7XG4gIH07XG59O1xudmFyIHN5bWJvbCA9IGZ1bmN0aW9uIHN5bWJvbChwYXR0ZXJuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQudHlwZSA9PT0gcGF0dGVybjtcbiAgfTtcbn07XG52YXIgd2lsZGNhcmQgPSBmdW5jdGlvbiB3aWxkY2FyZCgpIHtcbiAgcmV0dXJuIGtUcnVlO1xufTtcbmZ1bmN0aW9uIG1hdGNoZXIocGF0dGVybikge1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgdmFyIG1hdGNoZXJDcmVhdG9yID0gcGF0dGVybiA9PT0gJyonID8gd2lsZGNhcmQgOiBzdHJpbmckMShwYXR0ZXJuKSA/IHN0cmluZyA6IGFycmF5JDEocGF0dGVybikgPyBhcnJheSA6IHN0cmluZ2FibGVGdW5jKHBhdHRlcm4pID8gc3RyaW5nIDogZnVuYyhwYXR0ZXJuKSA/IHByZWRpY2F0ZSA6IHN5bWJvbCQxKHBhdHRlcm4pID8gc3ltYm9sIDogbnVsbDtcblxuICBpZiAobWF0Y2hlckNyZWF0b3IgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBhdHRlcm46IFwiICsgcGF0dGVybik7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlckNyZWF0b3IocGF0dGVybik7XG59XG5cbnZhciBFTkQgPSB7XG4gIHR5cGU6IENIQU5ORUxfRU5EX1RZUEVcbn07XG52YXIgaXNFbmQgPSBmdW5jdGlvbiBpc0VuZChhKSB7XG4gIHJldHVybiBhICYmIGEudHlwZSA9PT0gQ0hBTk5FTF9FTkRfVFlQRTtcbn07XG52YXIgQ0xPU0VEX0NIQU5ORUxfV0lUSF9UQUtFUlMgPSAnQ2Fubm90IGhhdmUgYSBjbG9zZWQgY2hhbm5lbCB3aXRoIHBlbmRpbmcgdGFrZXJzJztcbnZhciBJTlZBTElEX0JVRkZFUiA9ICdpbnZhbGlkIGJ1ZmZlciBwYXNzZWQgdG8gY2hhbm5lbCBmYWN0b3J5IGZ1bmN0aW9uJztcbnZhciBVTkRFRklORURfSU5QVVRfRVJST1IgPSBcIlNhZ2Egb3IgY2hhbm5lbCB3YXMgcHJvdmlkZWQgd2l0aCBhbiB1bmRlZmluZWQgYWN0aW9uXFxuSGludHM6XFxuICAtIGNoZWNrIHRoYXQgeW91ciBBY3Rpb24gQ3JlYXRvciByZXR1cm5zIGEgbm9uLXVuZGVmaW5lZCB2YWx1ZVxcbiAgLSBpZiB0aGUgU2FnYSB3YXMgc3RhcnRlZCB1c2luZyBydW5TYWdhLCBjaGVjayB0aGF0IHlvdXIgc3Vic2NyaWJlIHNvdXJjZSBwcm92aWRlcyB0aGUgYWN0aW9uIHRvIGl0cyBsaXN0ZW5lcnNcIjtcbmZ1bmN0aW9uIGNoYW5uZWwoYnVmZmVyJDEpIHtcbiAgaWYgKGJ1ZmZlciQxID09PSB2b2lkIDApIHtcbiAgICBidWZmZXIkMSA9IGV4cGFuZGluZygpO1xuICB9XG5cbiAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICB2YXIgdGFrZXJzID0gW107XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVjayhidWZmZXIkMSwgYnVmZmVyLCBJTlZBTElEX0JVRkZFUik7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0ZvcmJpZGRlblN0YXRlcygpIHtcbiAgICBpZiAoY2xvc2VkICYmIHRha2Vycy5sZW5ndGgpIHtcbiAgICAgIHRocm93IGludGVybmFsRXJyKENMT1NFRF9DSEFOTkVMX1dJVEhfVEFLRVJTKTtcbiAgICB9XG5cbiAgICBpZiAodGFrZXJzLmxlbmd0aCAmJiAhYnVmZmVyJDEuaXNFbXB0eSgpKSB7XG4gICAgICB0aHJvdyBpbnRlcm5hbEVycignQ2Fubm90IGhhdmUgcGVuZGluZyB0YWtlcnMgd2l0aCBub24gZW1wdHkgYnVmZmVyJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHV0KGlucHV0KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgICBjaGVjayhpbnB1dCwgbm90VW5kZWYsIFVOREVGSU5FRF9JTlBVVF9FUlJPUik7XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0YWtlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmZmVyJDEucHV0KGlucHV0KTtcbiAgICB9XG5cbiAgICB2YXIgY2IgPSB0YWtlcnMuc2hpZnQoKTtcbiAgICBjYihpbnB1dCk7XG4gIH1cblxuICBmdW5jdGlvbiB0YWtlKGNiKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgICBjaGVjayhjYiwgZnVuYywgXCJjaGFubmVsLnRha2UncyBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlZCAmJiBidWZmZXIkMS5pc0VtcHR5KCkpIHtcbiAgICAgIGNiKEVORCk7XG4gICAgfSBlbHNlIGlmICghYnVmZmVyJDEuaXNFbXB0eSgpKSB7XG4gICAgICBjYihidWZmZXIkMS50YWtlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YWtlcnMucHVzaChjYik7XG5cbiAgICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlKHRha2VycywgY2IpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaChjYikge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgICAgY2hlY2soY2IsIGZ1bmMsIFwiY2hhbm5lbC5mbHVzaCcgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyJDEuaXNFbXB0eSgpKSB7XG4gICAgICBjYihFTkQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNiKGJ1ZmZlciQxLmZsdXNoKCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNsb3NlZCA9IHRydWU7XG4gICAgdmFyIGFyciA9IHRha2VycztcbiAgICB0YWtlcnMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciB0YWtlciA9IGFycltpXTtcbiAgICAgIHRha2VyKEVORCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWtlOiB0YWtlLFxuICAgIHB1dDogcHV0LFxuICAgIGZsdXNoOiBmbHVzaCxcbiAgICBjbG9zZTogY2xvc2VcbiAgfTtcbn1cbmZ1bmN0aW9uIGV2ZW50Q2hhbm5lbChzdWJzY3JpYmUsIGJ1ZmZlcikge1xuICBpZiAoYnVmZmVyID09PSB2b2lkIDApIHtcbiAgICBidWZmZXIgPSBub25lKCk7XG4gIH1cblxuICB2YXIgY2xvc2VkID0gZmFsc2U7XG4gIHZhciB1bnN1YnNjcmliZTtcbiAgdmFyIGNoYW4gPSBjaGFubmVsKGJ1ZmZlcik7XG5cbiAgdmFyIGNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgaWYgKGNsb3NlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNsb3NlZCA9IHRydWU7XG5cbiAgICBpZiAoZnVuYyh1bnN1YnNjcmliZSkpIHtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgY2hhbi5jbG9zZSgpO1xuICB9O1xuXG4gIHVuc3Vic2NyaWJlID0gc3Vic2NyaWJlKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmIChpc0VuZChpbnB1dCkpIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2hhbi5wdXQoaW5wdXQpO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrKHVuc3Vic2NyaWJlLCBmdW5jLCAnaW4gZXZlbnRDaGFubmVsOiBzdWJzY3JpYmUgc2hvdWxkIHJldHVybiBhIGZ1bmN0aW9uIHRvIHVuc3Vic2NyaWJlJyk7XG4gIH1cblxuICB1bnN1YnNjcmliZSA9IG9uY2UodW5zdWJzY3JpYmUpO1xuXG4gIGlmIChjbG9zZWQpIHtcbiAgICB1bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWtlOiBjaGFuLnRha2UsXG4gICAgZmx1c2g6IGNoYW4uZmx1c2gsXG4gICAgY2xvc2U6IGNsb3NlXG4gIH07XG59XG5mdW5jdGlvbiBtdWx0aWNhc3RDaGFubmVsKCkge1xuICB2YXIgX3JlZjtcblxuICB2YXIgY2xvc2VkID0gZmFsc2U7XG4gIHZhciBjdXJyZW50VGFrZXJzID0gW107XG4gIHZhciBuZXh0VGFrZXJzID0gY3VycmVudFRha2VycztcblxuICBmdW5jdGlvbiBjaGVja0ZvcmJpZGRlblN0YXRlcygpIHtcbiAgICBpZiAoY2xvc2VkICYmIG5leHRUYWtlcnMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBpbnRlcm5hbEVycihDTE9TRURfQ0hBTk5FTF9XSVRIX1RBS0VSUyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGVuc3VyZUNhbk11dGF0ZU5leHRUYWtlcnMgPSBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0VGFrZXJzKCkge1xuICAgIGlmIChuZXh0VGFrZXJzICE9PSBjdXJyZW50VGFrZXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmV4dFRha2VycyA9IGN1cnJlbnRUYWtlcnMuc2xpY2UoKTtcbiAgfTtcblxuICB2YXIgY2xvc2UgPSBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICB9XG5cbiAgICBjbG9zZWQgPSB0cnVlO1xuICAgIHZhciB0YWtlcnMgPSBjdXJyZW50VGFrZXJzID0gbmV4dFRha2VycztcbiAgICBuZXh0VGFrZXJzID0gW107XG4gICAgdGFrZXJzLmZvckVhY2goZnVuY3Rpb24gKHRha2VyKSB7XG4gICAgICB0YWtlcihFTkQpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbTVVMVElDQVNUXSA9IHRydWUsIF9yZWYucHV0ID0gZnVuY3Rpb24gcHV0KGlucHV0KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgICBjaGVjayhpbnB1dCwgbm90VW5kZWYsIFVOREVGSU5FRF9JTlBVVF9FUlJPUik7XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0VuZChpbnB1dCkpIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRha2VycyA9IGN1cnJlbnRUYWtlcnMgPSBuZXh0VGFrZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRha2Vycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIHRha2VyID0gdGFrZXJzW2ldO1xuXG4gICAgICBpZiAodGFrZXJbTUFUQ0hdKGlucHV0KSkge1xuICAgICAgICB0YWtlci5jYW5jZWwoKTtcbiAgICAgICAgdGFrZXIoaW5wdXQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgX3JlZi50YWtlID0gZnVuY3Rpb24gdGFrZShjYiwgbWF0Y2hlcikge1xuICAgIGlmIChtYXRjaGVyID09PSB2b2lkIDApIHtcbiAgICAgIG1hdGNoZXIgPSB3aWxkY2FyZDtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICB9XG5cbiAgICBpZiAoY2xvc2VkKSB7XG4gICAgICBjYihFTkQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNiW01BVENIXSA9IG1hdGNoZXI7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dFRha2VycygpO1xuICAgIG5leHRUYWtlcnMucHVzaChjYik7XG4gICAgY2IuY2FuY2VsID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0VGFrZXJzKCk7XG4gICAgICByZW1vdmUobmV4dFRha2VycywgY2IpO1xuICAgIH0pO1xuICB9LCBfcmVmLmNsb3NlID0gY2xvc2UsIF9yZWY7XG59XG5mdW5jdGlvbiBzdGRDaGFubmVsKCkge1xuICB2YXIgY2hhbiA9IG11bHRpY2FzdENoYW5uZWwoKTtcbiAgdmFyIHB1dCA9IGNoYW4ucHV0O1xuXG4gIGNoYW4ucHV0ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKGlucHV0W1NBR0FfQUNUSU9OXSkge1xuICAgICAgcHV0KGlucHV0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhc2FwKGZ1bmN0aW9uICgpIHtcbiAgICAgIHB1dChpbnB1dCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIGNoYW47XG59XG5cbnZhciBSVU5OSU5HID0gMDtcbnZhciBDQU5DRUxMRUQgPSAxO1xudmFyIEFCT1JURUQgPSAyO1xudmFyIERPTkUgPSAzO1xuXG5mdW5jdGlvbiByZXNvbHZlUHJvbWlzZShwcm9taXNlLCBjYikge1xuICB2YXIgY2FuY2VsUHJvbWlzZSA9IHByb21pc2VbQ0FOQ0VMXTtcblxuICBpZiAoZnVuYyhjYW5jZWxQcm9taXNlKSkge1xuICAgIGNiLmNhbmNlbCA9IGNhbmNlbFByb21pc2U7XG4gIH1cblxuICBwcm9taXNlLnRoZW4oY2IsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIGNiKGVycm9yLCB0cnVlKTtcbiAgfSk7XG59XG5cbnZhciBjdXJyZW50ID0gMDtcbnZhciBuZXh0U2FnYUlkID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICsrY3VycmVudDtcbn0pO1xuXG52YXIgX2VmZmVjdFJ1bm5lck1hcDtcblxuZnVuY3Rpb24gZ2V0SXRlcmF0b3JNZXRhSW5mbyhpdGVyYXRvciwgZm4pIHtcbiAgaWYgKGl0ZXJhdG9yLmlzU2FnYUl0ZXJhdG9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGl0ZXJhdG9yLm1ldGEubmFtZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZ2V0TWV0YUluZm8oZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrSXRlcmF0b3IoX3JlZikge1xuICB2YXIgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGZuID0gX3JlZi5mbixcbiAgICAgIGFyZ3MgPSBfcmVmLmFyZ3M7XG5cbiAgLy8gY2F0Y2ggc3luY2hyb25vdXMgZmFpbHVyZXM7IHNlZSAjMTUyIGFuZCAjNDQxXG4gIHRyeSB7XG4gICAgdmFyIHJlc3VsdCA9IGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpOyAvLyBpLmUuIGEgZ2VuZXJhdG9yIGZ1bmN0aW9uIHJldHVybnMgYW4gaXRlcmF0b3JcblxuICAgIGlmIChpdGVyYXRvcihyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlZCA9IGZhbHNlO1xuXG4gICAgdmFyIG5leHQgPSBmdW5jdGlvbiBuZXh0KGFyZykge1xuICAgICAgaWYgKCFyZXNvbHZlZCkge1xuICAgICAgICByZXNvbHZlZCA9IHRydWU7IC8vIE9ubHkgcHJvbWlzZXMgcmV0dXJuZWQgZnJvbSBmb3JrIHdpbGwgYmUgaW50ZXJwcmV0ZWQuIFNlZSAjMTU3M1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IHJlc3VsdCxcbiAgICAgICAgICBkb25lOiAhcHJvbWlzZShyZXN1bHQpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiBhcmcsXG4gICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gbWFrZUl0ZXJhdG9yKG5leHQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBkbyBub3QgYnViYmxlIHVwIHN5bmNocm9ub3VzIGZhaWx1cmVzIGZvciBkZXRhY2hlZCBmb3Jrc1xuICAgIC8vIGluc3RlYWQgY3JlYXRlIGEgZmFpbGVkIHRhc2suIFNlZSAjMTUyIGFuZCAjNDQxXG4gICAgcmV0dXJuIG1ha2VJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcnVuUHV0RWZmZWN0KGVudiwgX3JlZjIsIGNiKSB7XG4gIHZhciBjaGFubmVsID0gX3JlZjIuY2hhbm5lbCxcbiAgICAgIGFjdGlvbiA9IF9yZWYyLmFjdGlvbixcbiAgICAgIHJlc29sdmUgPSBfcmVmMi5yZXNvbHZlO1xuXG4gIC8qKlxuICAgU2NoZWR1bGUgdGhlIHB1dCBpbiBjYXNlIGFub3RoZXIgc2FnYSBpcyBob2xkaW5nIGEgbG9jay5cbiAgIFRoZSBwdXQgd2lsbCBiZSBleGVjdXRlZCBhdG9taWNhbGx5LiBpZSBuZXN0ZWQgcHV0cyB3aWxsIGV4ZWN1dGUgYWZ0ZXJcbiAgIHRoaXMgcHV0IGhhcyB0ZXJtaW5hdGVkLlxuICAgKiovXG4gIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQ7XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gKGNoYW5uZWwgPyBjaGFubmVsLnB1dCA6IGVudi5kaXNwYXRjaCkoYWN0aW9uKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2IoZXJyb3IsIHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChyZXNvbHZlICYmIHByb21pc2UocmVzdWx0KSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UocmVzdWx0LCBjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKHJlc3VsdCk7XG4gICAgfVxuICB9KTsgLy8gUHV0IGVmZmVjdHMgYXJlIG5vbiBjYW5jZWxsYWJsZXNcbn1cblxuZnVuY3Rpb24gcnVuVGFrZUVmZmVjdChlbnYsIF9yZWYzLCBjYikge1xuICB2YXIgX3JlZjMkY2hhbm5lbCA9IF9yZWYzLmNoYW5uZWwsXG4gICAgICBjaGFubmVsID0gX3JlZjMkY2hhbm5lbCA9PT0gdm9pZCAwID8gZW52LmNoYW5uZWwgOiBfcmVmMyRjaGFubmVsLFxuICAgICAgcGF0dGVybiA9IF9yZWYzLnBhdHRlcm4sXG4gICAgICBtYXliZSA9IF9yZWYzLm1heWJlO1xuXG4gIHZhciB0YWtlQ2IgPSBmdW5jdGlvbiB0YWtlQ2IoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgY2IoaW5wdXQsIHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0VuZChpbnB1dCkgJiYgIW1heWJlKSB7XG4gICAgICBjYihURVJNSU5BVEUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNiKGlucHV0KTtcbiAgfTtcblxuICB0cnkge1xuICAgIGNoYW5uZWwudGFrZSh0YWtlQ2IsIG5vdFVuZGVmKHBhdHRlcm4pID8gbWF0Y2hlcihwYXR0ZXJuKSA6IG51bGwpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjYihlcnIsIHRydWUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNiLmNhbmNlbCA9IHRha2VDYi5jYW5jZWw7XG59XG5cbmZ1bmN0aW9uIHJ1bkNhbGxFZmZlY3QoZW52LCBfcmVmNCwgY2IsIF9yZWY1KSB7XG4gIHZhciBjb250ZXh0ID0gX3JlZjQuY29udGV4dCxcbiAgICAgIGZuID0gX3JlZjQuZm4sXG4gICAgICBhcmdzID0gX3JlZjQuYXJncztcbiAgdmFyIHRhc2sgPSBfcmVmNS50YXNrO1xuXG4gIC8vIGNhdGNoIHN5bmNocm9ub3VzIGZhaWx1cmVzOyBzZWUgIzE1MlxuICB0cnkge1xuICAgIHZhciByZXN1bHQgPSBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcblxuICAgIGlmIChwcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdCwgY2IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpdGVyYXRvcihyZXN1bHQpKSB7XG4gICAgICAvLyByZXNvbHZlIGl0ZXJhdG9yXG4gICAgICBwcm9jKGVudiwgcmVzdWx0LCB0YXNrLmNvbnRleHQsIGN1cnJlbnQsIGdldE1ldGFJbmZvKGZuKSxcbiAgICAgIC8qIGlzUm9vdCAqL1xuICAgICAgZmFsc2UsIGNiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYihyZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNiKGVycm9yLCB0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBydW5DUFNFZmZlY3QoZW52LCBfcmVmNiwgY2IpIHtcbiAgdmFyIGNvbnRleHQgPSBfcmVmNi5jb250ZXh0LFxuICAgICAgZm4gPSBfcmVmNi5mbixcbiAgICAgIGFyZ3MgPSBfcmVmNi5hcmdzO1xuXG4gIC8vIENQUyAoaWUgbm9kZSBzdHlsZSBmdW5jdGlvbnMpIGNhbiBkZWZpbmUgdGhlaXIgb3duIGNhbmNlbGxhdGlvbiBsb2dpY1xuICAvLyBieSBzZXR0aW5nIGNhbmNlbCBmaWVsZCBvbiB0aGUgY2JcbiAgLy8gY2F0Y2ggc3luY2hyb25vdXMgZmFpbHVyZXM7IHNlZSAjMTUyXG4gIHRyeSB7XG4gICAgdmFyIGNwc0NiID0gZnVuY3Rpb24gY3BzQ2IoZXJyLCByZXMpIHtcbiAgICAgIGlmICh1bmRlZihlcnIpKSB7XG4gICAgICAgIGNiKHJlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYihlcnIsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmbi5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChjcHNDYikpO1xuXG4gICAgaWYgKGNwc0NiLmNhbmNlbCkge1xuICAgICAgY2IuY2FuY2VsID0gY3BzQ2IuY2FuY2VsO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYihlcnJvciwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcnVuRm9ya0VmZmVjdChlbnYsIF9yZWY3LCBjYiwgX3JlZjgpIHtcbiAgdmFyIGNvbnRleHQgPSBfcmVmNy5jb250ZXh0LFxuICAgICAgZm4gPSBfcmVmNy5mbixcbiAgICAgIGFyZ3MgPSBfcmVmNy5hcmdzLFxuICAgICAgZGV0YWNoZWQgPSBfcmVmNy5kZXRhY2hlZDtcbiAgdmFyIHBhcmVudCA9IF9yZWY4LnRhc2s7XG4gIHZhciB0YXNrSXRlcmF0b3IgPSBjcmVhdGVUYXNrSXRlcmF0b3Ioe1xuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgZm46IGZuLFxuICAgIGFyZ3M6IGFyZ3NcbiAgfSk7XG4gIHZhciBtZXRhID0gZ2V0SXRlcmF0b3JNZXRhSW5mbyh0YXNrSXRlcmF0b3IsIGZuKTtcbiAgaW1tZWRpYXRlbHkoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGlsZCA9IHByb2MoZW52LCB0YXNrSXRlcmF0b3IsIHBhcmVudC5jb250ZXh0LCBjdXJyZW50LCBtZXRhLCBkZXRhY2hlZCwgdW5kZWZpbmVkKTtcblxuICAgIGlmIChkZXRhY2hlZCkge1xuICAgICAgY2IoY2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY2hpbGQuaXNSdW5uaW5nKCkpIHtcbiAgICAgICAgcGFyZW50LnF1ZXVlLmFkZFRhc2soY2hpbGQpO1xuICAgICAgICBjYihjaGlsZCk7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkLmlzQWJvcnRlZCgpKSB7XG4gICAgICAgIHBhcmVudC5xdWV1ZS5hYm9ydChjaGlsZC5lcnJvcigpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNiKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBGb3JrIGVmZmVjdHMgYXJlIG5vbiBjYW5jZWxsYWJsZXNcbn1cblxuZnVuY3Rpb24gcnVuSm9pbkVmZmVjdChlbnYsIHRhc2tPclRhc2tzLCBjYiwgX3JlZjkpIHtcbiAgdmFyIHRhc2sgPSBfcmVmOS50YXNrO1xuXG4gIHZhciBqb2luU2luZ2xlVGFzayA9IGZ1bmN0aW9uIGpvaW5TaW5nbGVUYXNrKHRhc2tUb0pvaW4sIGNiKSB7XG4gICAgaWYgKHRhc2tUb0pvaW4uaXNSdW5uaW5nKCkpIHtcbiAgICAgIHZhciBqb2luZXIgPSB7XG4gICAgICAgIHRhc2s6IHRhc2ssXG4gICAgICAgIGNiOiBjYlxuICAgICAgfTtcblxuICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGFza1RvSm9pbi5pc1J1bm5pbmcoKSkgcmVtb3ZlKHRhc2tUb0pvaW4uam9pbmVycywgam9pbmVyKTtcbiAgICAgIH07XG5cbiAgICAgIHRhc2tUb0pvaW4uam9pbmVycy5wdXNoKGpvaW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0YXNrVG9Kb2luLmlzQWJvcnRlZCgpKSB7XG4gICAgICAgIGNiKHRhc2tUb0pvaW4uZXJyb3IoKSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYih0YXNrVG9Kb2luLnJlc3VsdCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaWYgKGFycmF5JDEodGFza09yVGFza3MpKSB7XG4gICAgaWYgKHRhc2tPclRhc2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2IoW10pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjaGlsZENhbGxiYWNrcyA9IGNyZWF0ZUFsbFN0eWxlQ2hpbGRDYWxsYmFja3ModGFza09yVGFza3MsIGNiKTtcbiAgICB0YXNrT3JUYXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICBqb2luU2luZ2xlVGFzayh0LCBjaGlsZENhbGxiYWNrc1tpXSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgam9pblNpbmdsZVRhc2sodGFza09yVGFza3MsIGNiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW5jZWxTaW5nbGVUYXNrKHRhc2tUb0NhbmNlbCkge1xuICBpZiAodGFza1RvQ2FuY2VsLmlzUnVubmluZygpKSB7XG4gICAgdGFza1RvQ2FuY2VsLmNhbmNlbCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJ1bkNhbmNlbEVmZmVjdChlbnYsIHRhc2tPclRhc2tzLCBjYiwgX3JlZjEwKSB7XG4gIHZhciB0YXNrID0gX3JlZjEwLnRhc2s7XG5cbiAgaWYgKHRhc2tPclRhc2tzID09PSBTRUxGX0NBTkNFTExBVElPTikge1xuICAgIGNhbmNlbFNpbmdsZVRhc2sodGFzayk7XG4gIH0gZWxzZSBpZiAoYXJyYXkkMSh0YXNrT3JUYXNrcykpIHtcbiAgICB0YXNrT3JUYXNrcy5mb3JFYWNoKGNhbmNlbFNpbmdsZVRhc2spO1xuICB9IGVsc2Uge1xuICAgIGNhbmNlbFNpbmdsZVRhc2sodGFza09yVGFza3MpO1xuICB9XG5cbiAgY2IoKTsgLy8gY2FuY2VsIGVmZmVjdHMgYXJlIG5vbiBjYW5jZWxsYWJsZXNcbn1cblxuZnVuY3Rpb24gcnVuQWxsRWZmZWN0KGVudiwgZWZmZWN0cywgY2IsIF9yZWYxMSkge1xuICB2YXIgZGlnZXN0RWZmZWN0ID0gX3JlZjExLmRpZ2VzdEVmZmVjdDtcbiAgdmFyIGVmZmVjdElkID0gY3VycmVudDtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhlZmZlY3RzKTtcblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBjYihhcnJheSQxKGVmZmVjdHMpID8gW10gOiB7fSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNoaWxkQ2FsbGJhY2tzID0gY3JlYXRlQWxsU3R5bGVDaGlsZENhbGxiYWNrcyhlZmZlY3RzLCBjYik7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZGlnZXN0RWZmZWN0KGVmZmVjdHNba2V5XSwgZWZmZWN0SWQsIGNoaWxkQ2FsbGJhY2tzW2tleV0sIGtleSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBydW5SYWNlRWZmZWN0KGVudiwgZWZmZWN0cywgY2IsIF9yZWYxMikge1xuICB2YXIgZGlnZXN0RWZmZWN0ID0gX3JlZjEyLmRpZ2VzdEVmZmVjdDtcbiAgdmFyIGVmZmVjdElkID0gY3VycmVudDtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhlZmZlY3RzKTtcbiAgdmFyIHJlc3BvbnNlID0gYXJyYXkkMShlZmZlY3RzKSA/IGNyZWF0ZUVtcHR5QXJyYXkoa2V5cy5sZW5ndGgpIDoge307XG4gIHZhciBjaGlsZENicyA9IHt9O1xuICB2YXIgY29tcGxldGVkID0gZmFsc2U7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoQ2JBdEtleSA9IGZ1bmN0aW9uIGNoQ2JBdEtleShyZXMsIGlzRXJyKSB7XG4gICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRXJyIHx8IHNob3VsZENvbXBsZXRlKHJlcykpIHtcbiAgICAgICAgLy8gUmFjZSBBdXRvIGNhbmNlbGxhdGlvblxuICAgICAgICBjYi5jYW5jZWwoKTtcbiAgICAgICAgY2IocmVzLCBpc0Vycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYi5jYW5jZWwoKTtcbiAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgcmVzcG9uc2Vba2V5XSA9IHJlcztcbiAgICAgICAgY2IocmVzcG9uc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjaENiQXRLZXkuY2FuY2VsID0gbm9vcDtcbiAgICBjaGlsZENic1trZXldID0gY2hDYkF0S2V5O1xuICB9KTtcblxuICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcHJldmVudHMgdW5uZWNlc3NhcnkgY2FuY2VsbGF0aW9uXG4gICAgaWYgKCFjb21wbGV0ZWQpIHtcbiAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gY2hpbGRDYnNba2V5XS5jYW5jZWwoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkaWdlc3RFZmZlY3QoZWZmZWN0c1trZXldLCBlZmZlY3RJZCwgY2hpbGRDYnNba2V5XSwga2V5KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJ1blNlbGVjdEVmZmVjdChlbnYsIF9yZWYxMywgY2IpIHtcbiAgdmFyIHNlbGVjdG9yID0gX3JlZjEzLnNlbGVjdG9yLFxuICAgICAgYXJncyA9IF9yZWYxMy5hcmdzO1xuXG4gIHRyeSB7XG4gICAgdmFyIHN0YXRlID0gc2VsZWN0b3IuYXBwbHkodm9pZCAwLCBbZW52LmdldFN0YXRlKCldLmNvbmNhdChhcmdzKSk7XG4gICAgY2Ioc3RhdGUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNiKGVycm9yLCB0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBydW5DaGFubmVsRWZmZWN0KGVudiwgX3JlZjE0LCBjYikge1xuICB2YXIgcGF0dGVybiA9IF9yZWYxNC5wYXR0ZXJuLFxuICAgICAgYnVmZmVyID0gX3JlZjE0LmJ1ZmZlcjtcbiAgdmFyIGNoYW4gPSBjaGFubmVsKGJ1ZmZlcik7XG4gIHZhciBtYXRjaCA9IG1hdGNoZXIocGF0dGVybik7XG5cbiAgdmFyIHRha2VyID0gZnVuY3Rpb24gdGFrZXIoYWN0aW9uKSB7XG4gICAgaWYgKCFpc0VuZChhY3Rpb24pKSB7XG4gICAgICBlbnYuY2hhbm5lbC50YWtlKHRha2VyLCBtYXRjaCk7XG4gICAgfVxuXG4gICAgY2hhbi5wdXQoYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY2xvc2UgPSBjaGFuLmNsb3NlO1xuXG4gIGNoYW4uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGFrZXIuY2FuY2VsKCk7XG4gICAgY2xvc2UoKTtcbiAgfTtcblxuICBlbnYuY2hhbm5lbC50YWtlKHRha2VyLCBtYXRjaCk7XG4gIGNiKGNoYW4pO1xufVxuXG5mdW5jdGlvbiBydW5DYW5jZWxsZWRFZmZlY3QoZW52LCBkYXRhLCBjYiwgX3JlZjE1KSB7XG4gIHZhciB0YXNrID0gX3JlZjE1LnRhc2s7XG4gIGNiKHRhc2suaXNDYW5jZWxsZWQoKSk7XG59XG5cbmZ1bmN0aW9uIHJ1bkZsdXNoRWZmZWN0KGVudiwgY2hhbm5lbCwgY2IpIHtcbiAgY2hhbm5lbC5mbHVzaChjYik7XG59XG5cbmZ1bmN0aW9uIHJ1bkdldENvbnRleHRFZmZlY3QoZW52LCBwcm9wLCBjYiwgX3JlZjE2KSB7XG4gIHZhciB0YXNrID0gX3JlZjE2LnRhc2s7XG4gIGNiKHRhc2suY29udGV4dFtwcm9wXSk7XG59XG5cbmZ1bmN0aW9uIHJ1blNldENvbnRleHRFZmZlY3QoZW52LCBwcm9wcywgY2IsIF9yZWYxNykge1xuICB2YXIgdGFzayA9IF9yZWYxNy50YXNrO1xuICBhc3NpZ25XaXRoU3ltYm9scyh0YXNrLmNvbnRleHQsIHByb3BzKTtcbiAgY2IoKTtcbn1cblxudmFyIGVmZmVjdFJ1bm5lck1hcCA9IChfZWZmZWN0UnVubmVyTWFwID0ge30sIF9lZmZlY3RSdW5uZXJNYXBbVEFLRV0gPSBydW5UYWtlRWZmZWN0LCBfZWZmZWN0UnVubmVyTWFwW1BVVF0gPSBydW5QdXRFZmZlY3QsIF9lZmZlY3RSdW5uZXJNYXBbQUxMXSA9IHJ1bkFsbEVmZmVjdCwgX2VmZmVjdFJ1bm5lck1hcFtSQUNFXSA9IHJ1blJhY2VFZmZlY3QsIF9lZmZlY3RSdW5uZXJNYXBbQ0FMTF0gPSBydW5DYWxsRWZmZWN0LCBfZWZmZWN0UnVubmVyTWFwW0NQU10gPSBydW5DUFNFZmZlY3QsIF9lZmZlY3RSdW5uZXJNYXBbRk9SS10gPSBydW5Gb3JrRWZmZWN0LCBfZWZmZWN0UnVubmVyTWFwW0pPSU5dID0gcnVuSm9pbkVmZmVjdCwgX2VmZmVjdFJ1bm5lck1hcFtDQU5DRUwkMV0gPSBydW5DYW5jZWxFZmZlY3QsIF9lZmZlY3RSdW5uZXJNYXBbU0VMRUNUXSA9IHJ1blNlbGVjdEVmZmVjdCwgX2VmZmVjdFJ1bm5lck1hcFtBQ1RJT05fQ0hBTk5FTF0gPSBydW5DaGFubmVsRWZmZWN0LCBfZWZmZWN0UnVubmVyTWFwW0NBTkNFTExFRCQxXSA9IHJ1bkNhbmNlbGxlZEVmZmVjdCwgX2VmZmVjdFJ1bm5lck1hcFtGTFVTSF0gPSBydW5GbHVzaEVmZmVjdCwgX2VmZmVjdFJ1bm5lck1hcFtHRVRfQ09OVEVYVF0gPSBydW5HZXRDb250ZXh0RWZmZWN0LCBfZWZmZWN0UnVubmVyTWFwW1NFVF9DT05URVhUXSA9IHJ1blNldENvbnRleHRFZmZlY3QsIF9lZmZlY3RSdW5uZXJNYXApO1xuXG4vKipcbiBVc2VkIHRvIHRyYWNrIGEgcGFyZW50IHRhc2sgYW5kIGl0cyBmb3Jrc1xuIEluIHRoZSBmb3JrIG1vZGVsLCBmb3JrZWQgdGFza3MgYXJlIGF0dGFjaGVkIGJ5IGRlZmF1bHQgdG8gdGhlaXIgcGFyZW50XG4gV2UgbW9kZWwgdGhpcyB1c2luZyB0aGUgY29uY2VwdCBvZiBQYXJlbnQgdGFzayAmJiBtYWluIFRhc2tcbiBtYWluIHRhc2sgaXMgdGhlIG1haW4gZmxvdyBvZiB0aGUgY3VycmVudCBHZW5lcmF0b3IsIHRoZSBwYXJlbnQgdGFza3MgaXMgdGhlXG4gYWdncmVnYXRpb24gb2YgdGhlIG1haW4gdGFza3MgKyBhbGwgaXRzIGZvcmtlZCB0YXNrcy5cbiBUaHVzIHRoZSB3aG9sZSBtb2RlbCByZXByZXNlbnRzIGFuIGV4ZWN1dGlvbiB0cmVlIHdpdGggbXVsdGlwbGUgYnJhbmNoZXMgKHZzIHRoZVxuIGxpbmVhciBleGVjdXRpb24gdHJlZSBpbiBzZXF1ZW50aWFsIChub24gcGFyYWxsZWwpIHByb2dyYW1taW5nKVxuXG4gQSBwYXJlbnQgdGFza3MgaGFzIHRoZSBmb2xsb3dpbmcgc2VtYW50aWNzXG4gLSBJdCBjb21wbGV0ZXMgaWYgYWxsIGl0cyBmb3JrcyBlaXRoZXIgY29tcGxldGUgb3IgYWxsIGNhbmNlbGxlZFxuIC0gSWYgaXQncyBjYW5jZWxsZWQsIGFsbCBmb3JrcyBhcmUgY2FuY2VsbGVkIGFzIHdlbGxcbiAtIEl0IGFib3J0cyBpZiBhbnkgdW5jYXVnaHQgZXJyb3IgYnViYmxlcyB1cCBmcm9tIGZvcmtzXG4gLSBJZiBpdCBjb21wbGV0ZXMsIHRoZSByZXR1cm4gdmFsdWUgaXMgdGhlIG9uZSByZXR1cm5lZCBieSB0aGUgbWFpbiB0YXNrXG4gKiovXG5cbmZ1bmN0aW9uIGZvcmtRdWV1ZShtYWluVGFzaywgb25BYm9ydCwgY29udCkge1xuICB2YXIgdGFza3MgPSBbXTtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIGNvbXBsZXRlZCA9IGZhbHNlO1xuICBhZGRUYXNrKG1haW5UYXNrKTtcblxuICB2YXIgZ2V0VGFza3MgPSBmdW5jdGlvbiBnZXRUYXNrcygpIHtcbiAgICByZXR1cm4gdGFza3M7XG4gIH07XG5cbiAgZnVuY3Rpb24gYWJvcnQoZXJyKSB7XG4gICAgb25BYm9ydCgpO1xuICAgIGNhbmNlbEFsbCgpO1xuICAgIGNvbnQoZXJyLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFRhc2sodGFzaykge1xuICAgIHRhc2tzLnB1c2godGFzayk7XG5cbiAgICB0YXNrLmNvbnQgPSBmdW5jdGlvbiAocmVzLCBpc0Vycikge1xuICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlbW92ZSh0YXNrcywgdGFzayk7XG4gICAgICB0YXNrLmNvbnQgPSBub29wO1xuXG4gICAgICBpZiAoaXNFcnIpIHtcbiAgICAgICAgYWJvcnQocmVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXNrID09PSBtYWluVGFzaykge1xuICAgICAgICAgIHJlc3VsdCA9IHJlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGFza3MubGVuZ3RoKSB7XG4gICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICBjb250KHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsQWxsKCkge1xuICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgIHRhc2tzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgIHQuY29udCA9IG5vb3A7XG4gICAgICB0LmNhbmNlbCgpO1xuICAgIH0pO1xuICAgIHRhc2tzID0gW107XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGFkZFRhc2s6IGFkZFRhc2ssXG4gICAgY2FuY2VsQWxsOiBjYW5jZWxBbGwsXG4gICAgYWJvcnQ6IGFib3J0LFxuICAgIGdldFRhc2tzOiBnZXRUYXNrc1xuICB9O1xufVxuXG4vLyB0aGVyZSBjYW4gYmUgb25seSBhIHNpbmdsZSBzYWdhIGVycm9yIGNyZWF0ZWQgYXQgYW55IGdpdmVuIG1vbWVudFxuXG5mdW5jdGlvbiBmb3JtYXRMb2NhdGlvbihmaWxlTmFtZSwgbGluZU51bWJlcikge1xuICByZXR1cm4gZmlsZU5hbWUgKyBcIj9cIiArIGxpbmVOdW1iZXI7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdExvY2F0aW9uQXNTdHJpbmcoZWZmZWN0KSB7XG4gIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKGVmZmVjdCk7XG5cbiAgaWYgKGxvY2F0aW9uKSB7XG4gICAgdmFyIGNvZGUgPSBsb2NhdGlvbi5jb2RlLFxuICAgICAgICBmaWxlTmFtZSA9IGxvY2F0aW9uLmZpbGVOYW1lLFxuICAgICAgICBsaW5lTnVtYmVyID0gbG9jYXRpb24ubGluZU51bWJlcjtcbiAgICB2YXIgc291cmNlID0gY29kZSArIFwiICBcIiArIGZvcm1hdExvY2F0aW9uKGZpbGVOYW1lLCBsaW5lTnVtYmVyKTtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBzYWdhTG9jYXRpb25Bc1N0cmluZyhzYWdhTWV0YSkge1xuICB2YXIgbmFtZSA9IHNhZ2FNZXRhLm5hbWUsXG4gICAgICBsb2NhdGlvbiA9IHNhZ2FNZXRhLmxvY2F0aW9uO1xuXG4gIGlmIChsb2NhdGlvbikge1xuICAgIHJldHVybiBuYW1lICsgXCIgIFwiICsgZm9ybWF0TG9jYXRpb24obG9jYXRpb24uZmlsZU5hbWUsIGxvY2F0aW9uLmxpbmVOdW1iZXIpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWU7XG59XG5cbmZ1bmN0aW9uIGNhbmNlbGxlZFRhc2tzQXNTdHJpbmcoc2FnYVN0YWNrKSB7XG4gIHZhciBjYW5jZWxsZWRUYXNrcyA9IGZsYXRNYXAoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaS5jYW5jZWxsZWRUYXNrcztcbiAgfSwgc2FnYVN0YWNrKTtcblxuICBpZiAoIWNhbmNlbGxlZFRhc2tzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiBbJ1Rhc2tzIGNhbmNlbGxlZCBkdWUgdG8gZXJyb3I6J10uY29uY2F0KGNhbmNlbGxlZFRhc2tzKS5qb2luKCdcXG4nKTtcbn1cblxudmFyIGNyYXNoZWRFZmZlY3QgPSBudWxsO1xudmFyIHNhZ2FTdGFjayA9IFtdO1xudmFyIGFkZFNhZ2FGcmFtZSA9IGZ1bmN0aW9uIGFkZFNhZ2FGcmFtZShmcmFtZSkge1xuICBmcmFtZS5jcmFzaGVkRWZmZWN0ID0gY3Jhc2hlZEVmZmVjdDtcbiAgc2FnYVN0YWNrLnB1c2goZnJhbWUpO1xufTtcbnZhciBjbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICBjcmFzaGVkRWZmZWN0ID0gbnVsbDtcbiAgc2FnYVN0YWNrLmxlbmd0aCA9IDA7XG59OyAvLyB0aGlzIHNldHMgY3Jhc2hlZCBlZmZlY3QgZm9yIHRoZSBzb29uLXRvLWJlLXJlcG9ydGVkIHNhZ2EgZnJhbWVcbi8vIHRoaXMgc2xpZ2h0bHkgc3RyZWF0Y2hlcyB0aGUgc2luZ2xldG9uIG5hdHVyZSBvZiB0aGlzIG1vZHVsZSBpbnRvIHdyb25nIGRpcmVjdGlvblxuLy8gYXMgaXQncyBldmVuIGxlc3Mgb2J2aW91cyB3aGF0J3MgdGhlIGRhdGEgZmxvdyBoZXJlLCBidXQgaXQgaXMgd2hhdCBpdCBpcyBmb3Igbm93XG5cbnZhciBzZXRDcmFzaGVkRWZmZWN0ID0gZnVuY3Rpb24gc2V0Q3Jhc2hlZEVmZmVjdChlZmZlY3QpIHtcbiAgY3Jhc2hlZEVmZmVjdCA9IGVmZmVjdDtcbn07XG4vKipcbiAgQHJldHVybnMge3N0cmluZ31cblxuICBAZXhhbXBsZVxuICBUaGUgYWJvdmUgZXJyb3Igb2NjdXJyZWQgaW4gdGFzayBlcnJvckluUHV0U2FnYSB7cGF0aFRvRmlsZX1cbiAgd2hlbiBleGVjdXRpbmcgZWZmZWN0IHB1dCh7dHlwZTogJ1JFRFVDRVJfQUNUSU9OX0VSUk9SX0lOX1BVVCd9KSB7cGF0aFRvRmlsZX1cbiAgICAgIGNyZWF0ZWQgYnkgZmV0Y2hTYWdhIHtwYXRoVG9GaWxlfVxuICAgICAgY3JlYXRlZCBieSByb290U2FnYSB7cGF0aFRvRmlsZX1cbiovXG5cbnZhciB0b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICB2YXIgZmlyc3RTYWdhID0gc2FnYVN0YWNrWzBdLFxuICAgICAgb3RoZXJTYWdhcyA9IHNhZ2FTdGFjay5zbGljZSgxKTtcbiAgdmFyIGNyYXNoZWRFZmZlY3RMb2NhdGlvbiA9IGZpcnN0U2FnYS5jcmFzaGVkRWZmZWN0ID8gZWZmZWN0TG9jYXRpb25Bc1N0cmluZyhmaXJzdFNhZ2EuY3Jhc2hlZEVmZmVjdCkgOiBudWxsO1xuICB2YXIgZXJyb3JNZXNzYWdlID0gXCJUaGUgYWJvdmUgZXJyb3Igb2NjdXJyZWQgaW4gdGFzayBcIiArIHNhZ2FMb2NhdGlvbkFzU3RyaW5nKGZpcnN0U2FnYS5tZXRhKSArIChjcmFzaGVkRWZmZWN0TG9jYXRpb24gPyBcIiBcXG4gd2hlbiBleGVjdXRpbmcgZWZmZWN0IFwiICsgY3Jhc2hlZEVmZmVjdExvY2F0aW9uIDogJycpO1xuICByZXR1cm4gW2Vycm9yTWVzc2FnZV0uY29uY2F0KG90aGVyU2FnYXMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIFwiICAgIGNyZWF0ZWQgYnkgXCIgKyBzYWdhTG9jYXRpb25Bc1N0cmluZyhzLm1ldGEpO1xuICB9KSwgW2NhbmNlbGxlZFRhc2tzQXNTdHJpbmcoc2FnYVN0YWNrKV0pLmpvaW4oJ1xcbicpO1xufTtcblxuZnVuY3Rpb24gbmV3VGFzayhlbnYsIG1haW5UYXNrLCBwYXJlbnRDb250ZXh0LCBwYXJlbnRFZmZlY3RJZCwgbWV0YSwgaXNSb290LCBjb250KSB7XG4gIHZhciBfdGFzaztcblxuICBpZiAoY29udCA9PT0gdm9pZCAwKSB7XG4gICAgY29udCA9IG5vb3A7XG4gIH1cblxuICB2YXIgc3RhdHVzID0gUlVOTklORztcbiAgdmFyIHRhc2tSZXN1bHQ7XG4gIHZhciB0YXNrRXJyb3I7XG4gIHZhciBkZWZlcnJlZEVuZCA9IG51bGw7XG4gIHZhciBjYW5jZWxsZWREdWVUb0Vycm9yVGFza3MgPSBbXTtcbiAgdmFyIGNvbnRleHQgPSBPYmplY3QuY3JlYXRlKHBhcmVudENvbnRleHQpO1xuICB2YXIgcXVldWUgPSBmb3JrUXVldWUobWFpblRhc2ssIGZ1bmN0aW9uIG9uQWJvcnQoKSB7XG4gICAgY2FuY2VsbGVkRHVlVG9FcnJvclRhc2tzLnB1c2guYXBwbHkoY2FuY2VsbGVkRHVlVG9FcnJvclRhc2tzLCBxdWV1ZS5nZXRUYXNrcygpLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHQubWV0YS5uYW1lO1xuICAgIH0pKTtcbiAgfSwgZW5kKTtcbiAgLyoqXG4gICBUaGlzIG1heSBiZSBjYWxsZWQgYnkgYSBwYXJlbnQgZ2VuZXJhdG9yIHRvIHRyaWdnZXIvcHJvcGFnYXRlIGNhbmNlbGxhdGlvblxuICAgY2FuY2VsIGFsbCBwZW5kaW5nIHRhc2tzIChpbmNsdWRpbmcgdGhlIG1haW4gdGFzayksIHRoZW4gZW5kIHRoZSBjdXJyZW50IHRhc2suXG4gICAgQ2FuY2VsbGF0aW9uIHByb3BhZ2F0ZXMgZG93biB0byB0aGUgd2hvbGUgZXhlY3V0aW9uIHRyZWUgaGVsZCBieSB0aGlzIFBhcmVudCB0YXNrXG4gICBJdCdzIGFsc28gcHJvcGFnYXRlZCB0byBhbGwgam9pbmVycyBvZiB0aGlzIHRhc2sgYW5kIHRoZWlyIGV4ZWN1dGlvbiB0cmVlL2pvaW5lcnNcbiAgICBDYW5jZWxsYXRpb24gaXMgbm9vcCBmb3IgdGVybWluYXRlZC9DYW5jZWxsZWQgdGFza3MgdGFza3NcbiAgICoqL1xuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAoc3RhdHVzID09PSBSVU5OSU5HKSB7XG4gICAgICAvLyBTZXR0aW5nIHN0YXR1cyB0byBDQU5DRUxMRUQgZG9lcyBub3QgbmVjZXNzYXJpbHkgbWVhbiB0aGF0IHRoZSB0YXNrL2l0ZXJhdG9ycyBhcmUgc3RvcHBlZFxuICAgICAgLy8gZWZmZWN0cyBpbiB0aGUgaXRlcmF0b3IncyBmaW5hbGx5IGJsb2NrIHdpbGwgc3RpbGwgYmUgZXhlY3V0ZWRcbiAgICAgIHN0YXR1cyA9IENBTkNFTExFRDtcbiAgICAgIHF1ZXVlLmNhbmNlbEFsbCgpOyAvLyBFbmRpbmcgd2l0aCBhIFRBU0tfQ0FOQ0VMIHdpbGwgcHJvcGFnYXRlIHRoZSBDYW5jZWxsYXRpb24gdG8gYWxsIGpvaW5lcnNcblxuICAgICAgZW5kKFRBU0tfQ0FOQ0VMLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW5kKHJlc3VsdCwgaXNFcnIpIHtcbiAgICBpZiAoIWlzRXJyKSB7XG4gICAgICAvLyBUaGUgc3RhdHVzIGhlcmUgbWF5IGJlIFJVTk5JTkcgb3IgQ0FOQ0VMTEVEXG4gICAgICAvLyBJZiB0aGUgc3RhdHVzIGlzIENBTkNFTExFRCwgdGhlbiB3ZSBkbyBub3QgbmVlZCB0byBjaGFuZ2UgaXQgaGVyZVxuICAgICAgaWYgKHJlc3VsdCA9PT0gVEFTS19DQU5DRUwpIHtcbiAgICAgICAgc3RhdHVzID0gQ0FOQ0VMTEVEO1xuICAgICAgfSBlbHNlIGlmIChzdGF0dXMgIT09IENBTkNFTExFRCkge1xuICAgICAgICBzdGF0dXMgPSBET05FO1xuICAgICAgfVxuXG4gICAgICB0YXNrUmVzdWx0ID0gcmVzdWx0O1xuICAgICAgZGVmZXJyZWRFbmQgJiYgZGVmZXJyZWRFbmQucmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0dXMgPSBBQk9SVEVEO1xuICAgICAgYWRkU2FnYUZyYW1lKHtcbiAgICAgICAgbWV0YTogbWV0YSxcbiAgICAgICAgY2FuY2VsbGVkVGFza3M6IGNhbmNlbGxlZER1ZVRvRXJyb3JUYXNrc1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0YXNrLmlzUm9vdCkge1xuICAgICAgICB2YXIgc2FnYVN0YWNrID0gdG9TdHJpbmcoKTsgLy8gd2UndmUgZHVtcGVkIHRoZSBzYWdhIHN0YWNrIHRvIHN0cmluZyBhbmQgYXJlIHBhc3NpbmcgaXQgdG8gdXNlcidzIGNvZGVcbiAgICAgICAgLy8gd2Uga25vdyB0aGF0IGl0IHdvbid0IGJlIG5lZWRlZCBhbnltb3JlIGFuZCB3ZSBuZWVkIHRvIGNsZWFyIGl0XG5cbiAgICAgICAgY2xlYXIoKTtcbiAgICAgICAgZW52Lm9uRXJyb3IocmVzdWx0LCB7XG4gICAgICAgICAgc2FnYVN0YWNrOiBzYWdhU3RhY2tcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRhc2tFcnJvciA9IHJlc3VsdDtcbiAgICAgIGRlZmVycmVkRW5kICYmIGRlZmVycmVkRW5kLnJlamVjdChyZXN1bHQpO1xuICAgIH1cblxuICAgIHRhc2suY29udChyZXN1bHQsIGlzRXJyKTtcbiAgICB0YXNrLmpvaW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoam9pbmVyKSB7XG4gICAgICBqb2luZXIuY2IocmVzdWx0LCBpc0Vycik7XG4gICAgfSk7XG4gICAgdGFzay5qb2luZXJzID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldENvbnRleHQocHJvcHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2socHJvcHMsIG9iamVjdCwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcoJ3Rhc2snLCBwcm9wcykpO1xuICAgIH1cblxuICAgIGFzc2lnbldpdGhTeW1ib2xzKGNvbnRleHQsIHByb3BzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvUHJvbWlzZSgpIHtcbiAgICBpZiAoZGVmZXJyZWRFbmQpIHtcbiAgICAgIHJldHVybiBkZWZlcnJlZEVuZC5wcm9taXNlO1xuICAgIH1cblxuICAgIGRlZmVycmVkRW5kID0gZGVmZXJyZWQoKTtcblxuICAgIGlmIChzdGF0dXMgPT09IEFCT1JURUQpIHtcbiAgICAgIGRlZmVycmVkRW5kLnJlamVjdCh0YXNrRXJyb3IpO1xuICAgIH0gZWxzZSBpZiAoc3RhdHVzICE9PSBSVU5OSU5HKSB7XG4gICAgICBkZWZlcnJlZEVuZC5yZXNvbHZlKHRhc2tSZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZlcnJlZEVuZC5wcm9taXNlO1xuICB9XG5cbiAgdmFyIHRhc2sgPSAoX3Rhc2sgPSB7fSwgX3Rhc2tbVEFTS10gPSB0cnVlLCBfdGFzay5pZCA9IHBhcmVudEVmZmVjdElkLCBfdGFzay5tZXRhID0gbWV0YSwgX3Rhc2suaXNSb290ID0gaXNSb290LCBfdGFzay5jb250ZXh0ID0gY29udGV4dCwgX3Rhc2suam9pbmVycyA9IFtdLCBfdGFzay5xdWV1ZSA9IHF1ZXVlLCBfdGFzay5jYW5jZWwgPSBjYW5jZWwsIF90YXNrLmNvbnQgPSBjb250LCBfdGFzay5lbmQgPSBlbmQsIF90YXNrLnNldENvbnRleHQgPSBzZXRDb250ZXh0LCBfdGFzay50b1Byb21pc2UgPSB0b1Byb21pc2UsIF90YXNrLmlzUnVubmluZyA9IGZ1bmN0aW9uIGlzUnVubmluZygpIHtcbiAgICByZXR1cm4gc3RhdHVzID09PSBSVU5OSU5HO1xuICB9LCBfdGFzay5pc0NhbmNlbGxlZCA9IGZ1bmN0aW9uIGlzQ2FuY2VsbGVkKCkge1xuICAgIHJldHVybiBzdGF0dXMgPT09IENBTkNFTExFRCB8fCBzdGF0dXMgPT09IFJVTk5JTkcgJiYgbWFpblRhc2suc3RhdHVzID09PSBDQU5DRUxMRUQ7XG4gIH0sIF90YXNrLmlzQWJvcnRlZCA9IGZ1bmN0aW9uIGlzQWJvcnRlZCgpIHtcbiAgICByZXR1cm4gc3RhdHVzID09PSBBQk9SVEVEO1xuICB9LCBfdGFzay5yZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgcmV0dXJuIHRhc2tSZXN1bHQ7XG4gIH0sIF90YXNrLmVycm9yID0gZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgcmV0dXJuIHRhc2tFcnJvcjtcbiAgfSwgX3Rhc2spO1xuICByZXR1cm4gdGFzaztcbn1cblxuZnVuY3Rpb24gcHJvYyhlbnYsIGl0ZXJhdG9yJDEsIHBhcmVudENvbnRleHQsIHBhcmVudEVmZmVjdElkLCBtZXRhLCBpc1Jvb3QsIGNvbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXRlcmF0b3IkMVthc3luY0l0ZXJhdG9yU3ltYm9sXSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInJlZHV4LXNhZ2EgZG9lc24ndCBzdXBwb3J0IGFzeW5jIGdlbmVyYXRvcnMsIHBsZWFzZSB1c2Ugb25seSByZWd1bGFyIG9uZXNcIik7XG4gIH1cblxuICB2YXIgZmluYWxSdW5FZmZlY3QgPSBlbnYuZmluYWxpemVSdW5FZmZlY3QocnVuRWZmZWN0KTtcbiAgLyoqXG4gICAgVHJhY2tzIHRoZSBjdXJyZW50IGVmZmVjdCBjYW5jZWxsYXRpb25cbiAgICBFYWNoIHRpbWUgdGhlIGdlbmVyYXRvciBwcm9ncmVzc2VzLiBjYWxsaW5nIHJ1bkVmZmVjdCB3aWxsIHNldCBhIG5ldyB2YWx1ZVxuICAgIG9uIGl0LiBJdCBhbGxvd3MgcHJvcGFnYXRpbmcgY2FuY2VsbGF0aW9uIHRvIGNoaWxkIGVmZmVjdHNcbiAgKiovXG5cbiAgbmV4dC5jYW5jZWwgPSBub29wO1xuICAvKiogQ3JlYXRlcyBhIG1haW4gdGFzayB0byB0cmFjayB0aGUgbWFpbiBmbG93ICovXG5cbiAgdmFyIG1haW5UYXNrID0ge1xuICAgIG1ldGE6IG1ldGEsXG4gICAgY2FuY2VsOiBjYW5jZWxNYWluLFxuICAgIHN0YXR1czogUlVOTklOR1xuICB9O1xuICAvKipcbiAgIENyZWF0ZXMgYSBuZXcgdGFzayBkZXNjcmlwdG9yIGZvciB0aGlzIGdlbmVyYXRvci5cbiAgIEEgdGFzayBpcyB0aGUgYWdncmVnYXRpb24gb2YgaXQncyBtYWluVGFzayBhbmQgYWxsIGl0J3MgZm9ya2VkIHRhc2tzLlxuICAgKiovXG5cbiAgdmFyIHRhc2sgPSBuZXdUYXNrKGVudiwgbWFpblRhc2ssIHBhcmVudENvbnRleHQsIHBhcmVudEVmZmVjdElkLCBtZXRhLCBpc1Jvb3QsIGNvbnQpO1xuICB2YXIgZXhlY3V0aW5nQ29udGV4dCA9IHtcbiAgICB0YXNrOiB0YXNrLFxuICAgIGRpZ2VzdEVmZmVjdDogZGlnZXN0RWZmZWN0XG4gIH07XG4gIC8qKlxuICAgIGNhbmNlbGxhdGlvbiBvZiB0aGUgbWFpbiB0YXNrLiBXZSdsbCBzaW1wbHkgcmVzdW1lIHRoZSBHZW5lcmF0b3Igd2l0aCBhIFRBU0tfQ0FOQ0VMXG4gICoqL1xuXG4gIGZ1bmN0aW9uIGNhbmNlbE1haW4oKSB7XG4gICAgaWYgKG1haW5UYXNrLnN0YXR1cyA9PT0gUlVOTklORykge1xuICAgICAgbWFpblRhc2suc3RhdHVzID0gQ0FOQ0VMTEVEO1xuICAgICAgbmV4dChUQVNLX0NBTkNFTCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgIGF0dGFjaGVzIGNhbmNlbGxhdGlvbiBsb2dpYyB0byB0aGlzIHRhc2sncyBjb250aW51YXRpb25cbiAgICB0aGlzIHdpbGwgcGVybWl0IGNhbmNlbGxhdGlvbiB0byBwcm9wYWdhdGUgZG93biB0aGUgY2FsbCBjaGFpblxuICAqKi9cblxuXG4gIGlmIChjb250KSB7XG4gICAgY29udC5jYW5jZWwgPSB0YXNrLmNhbmNlbDtcbiAgfSAvLyBraWNrcyB1cCB0aGUgZ2VuZXJhdG9yXG5cblxuICBuZXh0KCk7IC8vIHRoZW4gcmV0dXJuIHRoZSB0YXNrIGRlc2NyaXB0b3IgdG8gdGhlIGNhbGxlclxuXG4gIHJldHVybiB0YXNrO1xuICAvKipcbiAgICogVGhpcyBpcyB0aGUgZ2VuZXJhdG9yIGRyaXZlclxuICAgKiBJdCdzIGEgcmVjdXJzaXZlIGFzeW5jL2NvbnRpbnVhdGlvbiBmdW5jdGlvbiB3aGljaCBjYWxscyBpdHNlbGZcbiAgICogdW50aWwgdGhlIGdlbmVyYXRvciB0ZXJtaW5hdGVzIG9yIHRocm93c1xuICAgKiBAcGFyYW0ge2ludGVybmFsIGNvbW1hbmRzKFRBU0tfQ0FOQ0VMIHwgVEVSTUlOQVRFKSB8IGFueX0gYXJnIC0gdmFsdWUsIGdlbmVyYXRvciB3aWxsIGJlIHJlc3VtZWQgd2l0aC5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc0VyciAtIHRoZSBmbGFnIHNob3dzIGlmIGVmZmVjdCBmaW5pc2hlZCB3aXRoIGFuIGVycm9yXG4gICAqXG4gICAqIHJlY2VpdmVzIGVpdGhlciAoY29tbWFuZCB8IGVmZmVjdCByZXN1bHQsIGZhbHNlKSBvciAoYW55IHRocm93biB0aGluZywgdHJ1ZSlcbiAgICovXG5cbiAgZnVuY3Rpb24gbmV4dChhcmcsIGlzRXJyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGlmIChpc0Vycikge1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvciQxLnRocm93KGFyZyk7IC8vIHVzZXIgaGFuZGxlZCB0aGUgZXJyb3IsIHdlIGNhbiBjbGVhciBib29ra2VwdCB2YWx1ZXNcblxuICAgICAgICBjbGVhcigpO1xuICAgICAgfSBlbHNlIGlmIChzaG91bGRDYW5jZWwoYXJnKSkge1xuICAgICAgICAvKipcbiAgICAgICAgICBnZXR0aW5nIFRBU0tfQ0FOQ0VMIGF1dG9tYXRpY2FsbHkgY2FuY2VscyB0aGUgbWFpbiB0YXNrXG4gICAgICAgICAgV2UgY2FuIGdldCB0aGlzIHZhbHVlIGhlcmVcbiAgICAgICAgICAgLSBCeSBjYW5jZWxsaW5nIHRoZSBwYXJlbnQgdGFzayBtYW51YWxseVxuICAgICAgICAgIC0gQnkgam9pbmluZyBhIENhbmNlbGxlZCB0YXNrXG4gICAgICAgICoqL1xuICAgICAgICBtYWluVGFzay5zdGF0dXMgPSBDQU5DRUxMRUQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgIENhbmNlbHMgdGhlIGN1cnJlbnQgZWZmZWN0OyB0aGlzIHdpbGwgcHJvcGFnYXRlIHRoZSBjYW5jZWxsYXRpb24gZG93biB0byBhbnkgY2FsbGVkIHRhc2tzXG4gICAgICAgICoqL1xuXG4gICAgICAgIG5leHQuY2FuY2VsKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgIElmIHRoaXMgR2VuZXJhdG9yIGhhcyBhIGByZXR1cm5gIG1ldGhvZCB0aGVuIGludm9rZXMgaXRcbiAgICAgICAgICBUaGlzIHdpbGwganVtcCB0byB0aGUgZmluYWxseSBibG9ja1xuICAgICAgICAqKi9cblxuICAgICAgICByZXN1bHQgPSBmdW5jKGl0ZXJhdG9yJDEucmV0dXJuKSA/IGl0ZXJhdG9yJDEucmV0dXJuKFRBU0tfQ0FOQ0VMKSA6IHtcbiAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiBUQVNLX0NBTkNFTFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChzaG91bGRUZXJtaW5hdGUoYXJnKSkge1xuICAgICAgICAvLyBXZSBnZXQgVEVSTUlOQVRFIGZsYWcsIGkuZS4gYnkgdGFraW5nIGZyb20gYSBjaGFubmVsIHRoYXQgZW5kZWQgdXNpbmcgYHRha2VgIChhbmQgbm90IGB0YWtlbWAgdXNlZCB0byB0cmFwIEVuZCBvZiBjaGFubmVscylcbiAgICAgICAgcmVzdWx0ID0gZnVuYyhpdGVyYXRvciQxLnJldHVybikgPyBpdGVyYXRvciQxLnJldHVybigpIDoge1xuICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yJDEubmV4dChhcmcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIGRpZ2VzdEVmZmVjdChyZXN1bHQudmFsdWUsIHBhcmVudEVmZmVjdElkLCBuZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgIFRoaXMgR2VuZXJhdG9yIGhhcyBlbmRlZCwgdGVybWluYXRlIHRoZSBtYWluIHRhc2sgYW5kIG5vdGlmeSB0aGUgZm9yayBxdWV1ZVxuICAgICAgICAqKi9cbiAgICAgICAgaWYgKG1haW5UYXNrLnN0YXR1cyAhPT0gQ0FOQ0VMTEVEKSB7XG4gICAgICAgICAgbWFpblRhc2suc3RhdHVzID0gRE9ORTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1haW5UYXNrLmNvbnQocmVzdWx0LnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKG1haW5UYXNrLnN0YXR1cyA9PT0gQ0FOQ0VMTEVEKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICBtYWluVGFzay5zdGF0dXMgPSBBQk9SVEVEO1xuICAgICAgbWFpblRhc2suY29udChlcnJvciwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcnVuRWZmZWN0KGVmZmVjdCwgZWZmZWN0SWQsIGN1cnJDYikge1xuICAgIC8qKlxuICAgICAgZWFjaCBlZmZlY3QgcnVubmVyIG11c3QgYXR0YWNoIGl0cyBvd24gbG9naWMgb2YgY2FuY2VsbGF0aW9uIHRvIHRoZSBwcm92aWRlZCBjYWxsYmFja1xuICAgICAgaXQgYWxsb3dzIHRoaXMgZ2VuZXJhdG9yIHRvIHByb3BhZ2F0ZSBjYW5jZWxsYXRpb24gZG93bndhcmQuXG4gICAgICAgQVRURU5USU9OISBlZmZlY3QgcnVubmVycyBtdXN0IHNldHVwIHRoZSBjYW5jZWwgbG9naWMgYnkgc2V0dGluZyBjYi5jYW5jZWwgPSBbY2FuY2VsTWV0aG9kXVxuICAgICAgQW5kIHRoZSBzZXR1cCBtdXN0IG9jY3VyIGJlZm9yZSBjYWxsaW5nIHRoZSBjYWxsYmFja1xuICAgICAgIFRoaXMgaXMgYSBzb3J0IG9mIGludmVyc2lvbiBvZiBjb250cm9sOiBjYWxsZWQgYXN5bmMgZnVuY3Rpb25zIGFyZSByZXNwb25zaWJsZVxuICAgICAgb2YgY29tcGxldGluZyB0aGUgZmxvdyBieSBjYWxsaW5nIHRoZSBwcm92aWRlZCBjb250aW51YXRpb247IHdoaWxlIGNhbGxlciBmdW5jdGlvbnNcbiAgICAgIGFyZSByZXNwb25zaWJsZSBmb3IgYWJvcnRpbmcgdGhlIGN1cnJlbnQgZmxvdyBieSBjYWxsaW5nIHRoZSBhdHRhY2hlZCBjYW5jZWwgZnVuY3Rpb25cbiAgICAgICBMaWJyYXJ5IHVzZXJzIGNhbiBhdHRhY2ggdGhlaXIgb3duIGNhbmNlbGxhdGlvbiBsb2dpYyB0byBwcm9taXNlcyBieSBkZWZpbmluZyBhXG4gICAgICBwcm9taXNlW0NBTkNFTF0gbWV0aG9kIGluIHRoZWlyIHJldHVybmVkIHByb21pc2VzXG4gICAgICBBVFRFTlRJT04hIGNhbGxpbmcgY2FuY2VsIG11c3QgaGF2ZSBubyBlZmZlY3Qgb24gYW4gYWxyZWFkeSBjb21wbGV0ZWQgb3IgY2FuY2VsbGVkIGVmZmVjdFxuICAgICoqL1xuICAgIGlmIChwcm9taXNlKGVmZmVjdCkpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlKGVmZmVjdCwgY3VyckNiKTtcbiAgICB9IGVsc2UgaWYgKGl0ZXJhdG9yKGVmZmVjdCkpIHtcbiAgICAgIC8vIHJlc29sdmUgaXRlcmF0b3JcbiAgICAgIHByb2MoZW52LCBlZmZlY3QsIHRhc2suY29udGV4dCwgZWZmZWN0SWQsIG1ldGEsXG4gICAgICAvKiBpc1Jvb3QgKi9cbiAgICAgIGZhbHNlLCBjdXJyQ2IpO1xuICAgIH0gZWxzZSBpZiAoZWZmZWN0ICYmIGVmZmVjdFtJT10pIHtcbiAgICAgIHZhciBlZmZlY3RSdW5uZXIgPSBlZmZlY3RSdW5uZXJNYXBbZWZmZWN0LnR5cGVdO1xuICAgICAgZWZmZWN0UnVubmVyKGVudiwgZWZmZWN0LnBheWxvYWQsIGN1cnJDYiwgZXhlY3V0aW5nQ29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgcmV0dXJuZWQgYXMgaXNcbiAgICAgIGN1cnJDYihlZmZlY3QpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRpZ2VzdEVmZmVjdChlZmZlY3QsIHBhcmVudEVmZmVjdElkLCBjYiwgbGFiZWwpIHtcbiAgICBpZiAobGFiZWwgPT09IHZvaWQgMCkge1xuICAgICAgbGFiZWwgPSAnJztcbiAgICB9XG5cbiAgICB2YXIgZWZmZWN0SWQgPSBuZXh0U2FnYUlkKCk7XG4gICAgZW52LnNhZ2FNb25pdG9yICYmIGVudi5zYWdhTW9uaXRvci5lZmZlY3RUcmlnZ2VyZWQoe1xuICAgICAgZWZmZWN0SWQ6IGVmZmVjdElkLFxuICAgICAgcGFyZW50RWZmZWN0SWQ6IHBhcmVudEVmZmVjdElkLFxuICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgZWZmZWN0OiBlZmZlY3RcbiAgICB9KTtcbiAgICAvKipcbiAgICAgIGNvbXBsZXRpb24gY2FsbGJhY2sgYW5kIGNhbmNlbCBjYWxsYmFjayBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlXG4gICAgICBXZSBjYW4ndCBjYW5jZWwgYW4gYWxyZWFkeSBjb21wbGV0ZWQgZWZmZWN0XG4gICAgICBBbmQgV2UgY2FuJ3QgY29tcGxldGUgYW4gYWxyZWFkeSBjYW5jZWxsZWQgZWZmZWN0SWRcbiAgICAqKi9cblxuICAgIHZhciBlZmZlY3RTZXR0bGVkOyAvLyBDb21wbGV0aW9uIGNhbGxiYWNrIHBhc3NlZCB0byB0aGUgYXBwcm9wcmlhdGUgZWZmZWN0IHJ1bm5lclxuXG4gICAgZnVuY3Rpb24gY3VyckNiKHJlcywgaXNFcnIpIHtcbiAgICAgIGlmIChlZmZlY3RTZXR0bGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWZmZWN0U2V0dGxlZCA9IHRydWU7XG4gICAgICBjYi5jYW5jZWwgPSBub29wOyAvLyBkZWZlbnNpdmUgbWVhc3VyZVxuXG4gICAgICBpZiAoZW52LnNhZ2FNb25pdG9yKSB7XG4gICAgICAgIGlmIChpc0Vycikge1xuICAgICAgICAgIGVudi5zYWdhTW9uaXRvci5lZmZlY3RSZWplY3RlZChlZmZlY3RJZCwgcmVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbnYuc2FnYU1vbml0b3IuZWZmZWN0UmVzb2x2ZWQoZWZmZWN0SWQsIHJlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzRXJyKSB7XG4gICAgICAgIHNldENyYXNoZWRFZmZlY3QoZWZmZWN0KTtcbiAgICAgIH1cblxuICAgICAgY2IocmVzLCBpc0Vycik7XG4gICAgfSAvLyB0cmFja3MgZG93biB0aGUgY3VycmVudCBjYW5jZWxcblxuXG4gICAgY3VyckNiLmNhbmNlbCA9IG5vb3A7IC8vIHNldHVwIGNhbmNlbGxhdGlvbiBsb2dpYyBvbiB0aGUgcGFyZW50IGNiXG5cbiAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBwcmV2ZW50cyBjYW5jZWxsaW5nIGFuIGFscmVhZHkgY29tcGxldGVkIGVmZmVjdFxuICAgICAgaWYgKGVmZmVjdFNldHRsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlZmZlY3RTZXR0bGVkID0gdHJ1ZTtcbiAgICAgIGN1cnJDYi5jYW5jZWwoKTsgLy8gcHJvcGFnYXRlcyBjYW5jZWwgZG93bndhcmRcblxuICAgICAgY3VyckNiLmNhbmNlbCA9IG5vb3A7IC8vIGRlZmVuc2l2ZSBtZWFzdXJlXG5cbiAgICAgIGVudi5zYWdhTW9uaXRvciAmJiBlbnYuc2FnYU1vbml0b3IuZWZmZWN0Q2FuY2VsbGVkKGVmZmVjdElkKTtcbiAgICB9O1xuXG4gICAgZmluYWxSdW5FZmZlY3QoZWZmZWN0LCBlZmZlY3RJZCwgY3VyckNiKTtcbiAgfVxufVxuXG52YXIgUlVOX1NBR0FfU0lHTkFUVVJFID0gJ3J1blNhZ2Eob3B0aW9ucywgc2FnYSwgLi4uYXJncyknO1xudmFyIE5PTl9HRU5FUkFUT1JfRVJSID0gUlVOX1NBR0FfU0lHTkFUVVJFICsgXCI6IHNhZ2EgYXJndW1lbnQgbXVzdCBiZSBhIEdlbmVyYXRvciBmdW5jdGlvbiFcIjtcbmZ1bmN0aW9uIHJ1blNhZ2EoX3JlZiwgc2FnYSkge1xuICB2YXIgX3JlZiRjaGFubmVsID0gX3JlZi5jaGFubmVsLFxuICAgICAgY2hhbm5lbCA9IF9yZWYkY2hhbm5lbCA9PT0gdm9pZCAwID8gc3RkQ2hhbm5lbCgpIDogX3JlZiRjaGFubmVsLFxuICAgICAgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlLFxuICAgICAgX3JlZiRjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY29udGV4dCA9IF9yZWYkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfcmVmJGNvbnRleHQsXG4gICAgICBzYWdhTW9uaXRvciA9IF9yZWYuc2FnYU1vbml0b3IsXG4gICAgICBlZmZlY3RNaWRkbGV3YXJlcyA9IF9yZWYuZWZmZWN0TWlkZGxld2FyZXMsXG4gICAgICBfcmVmJG9uRXJyb3IgPSBfcmVmLm9uRXJyb3IsXG4gICAgICBvbkVycm9yID0gX3JlZiRvbkVycm9yID09PSB2b2lkIDAgPyBsb2dFcnJvciA6IF9yZWYkb25FcnJvcjtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrKHNhZ2EsIGZ1bmMsIE5PTl9HRU5FUkFUT1JfRVJSKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBpdGVyYXRvciQxID0gc2FnYS5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2soaXRlcmF0b3IkMSwgaXRlcmF0b3IsIE5PTl9HRU5FUkFUT1JfRVJSKTtcbiAgfVxuXG4gIHZhciBlZmZlY3RJZCA9IG5leHRTYWdhSWQoKTtcblxuICBpZiAoc2FnYU1vbml0b3IpIHtcbiAgICAvLyBtb25pdG9ycyBhcmUgZXhwZWN0ZWQgdG8gaGF2ZSBhIGNlcnRhaW4gaW50ZXJmYWNlLCBsZXQncyBmaWxsLWluIGFueSBtaXNzaW5nIG9uZXNcbiAgICBzYWdhTW9uaXRvci5yb290U2FnYVN0YXJ0ZWQgPSBzYWdhTW9uaXRvci5yb290U2FnYVN0YXJ0ZWQgfHwgbm9vcDtcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RUcmlnZ2VyZWQgPSBzYWdhTW9uaXRvci5lZmZlY3RUcmlnZ2VyZWQgfHwgbm9vcDtcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RSZXNvbHZlZCA9IHNhZ2FNb25pdG9yLmVmZmVjdFJlc29sdmVkIHx8IG5vb3A7XG4gICAgc2FnYU1vbml0b3IuZWZmZWN0UmVqZWN0ZWQgPSBzYWdhTW9uaXRvci5lZmZlY3RSZWplY3RlZCB8fCBub29wO1xuICAgIHNhZ2FNb25pdG9yLmVmZmVjdENhbmNlbGxlZCA9IHNhZ2FNb25pdG9yLmVmZmVjdENhbmNlbGxlZCB8fCBub29wO1xuICAgIHNhZ2FNb25pdG9yLmFjdGlvbkRpc3BhdGNoZWQgPSBzYWdhTW9uaXRvci5hY3Rpb25EaXNwYXRjaGVkIHx8IG5vb3A7XG4gICAgc2FnYU1vbml0b3Iucm9vdFNhZ2FTdGFydGVkKHtcbiAgICAgIGVmZmVjdElkOiBlZmZlY3RJZCxcbiAgICAgIHNhZ2E6IHNhZ2EsXG4gICAgICBhcmdzOiBhcmdzXG4gICAgfSk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChub3RVbmRlZihkaXNwYXRjaCkpIHtcbiAgICAgIGNoZWNrKGRpc3BhdGNoLCBmdW5jLCAnZGlzcGF0Y2ggbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKG5vdFVuZGVmKGdldFN0YXRlKSkge1xuICAgICAgY2hlY2soZ2V0U3RhdGUsIGZ1bmMsICdnZXRTdGF0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICBpZiAobm90VW5kZWYoZWZmZWN0TWlkZGxld2FyZXMpKSB7XG4gICAgICB2YXIgTUlERExFV0FSRV9UWVBFX0VSUk9SID0gJ2VmZmVjdE1pZGRsZXdhcmVzIG11c3QgYmUgYW4gYXJyYXkgb2YgZnVuY3Rpb25zJztcbiAgICAgIGNoZWNrKGVmZmVjdE1pZGRsZXdhcmVzLCBhcnJheSQxLCBNSURETEVXQVJFX1RZUEVfRVJST1IpO1xuICAgICAgZWZmZWN0TWlkZGxld2FyZXMuZm9yRWFjaChmdW5jdGlvbiAoZWZmZWN0TWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gY2hlY2soZWZmZWN0TWlkZGxld2FyZSwgZnVuYywgTUlERExFV0FSRV9UWVBFX0VSUk9SKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNoZWNrKG9uRXJyb3IsIGZ1bmMsICdvbkVycm9yIHBhc3NlZCB0byB0aGUgcmVkdXgtc2FnYSBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgfVxuXG4gIHZhciBmaW5hbGl6ZVJ1bkVmZmVjdDtcblxuICBpZiAoZWZmZWN0TWlkZGxld2FyZXMpIHtcbiAgICB2YXIgbWlkZGxld2FyZSA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBlZmZlY3RNaWRkbGV3YXJlcyk7XG5cbiAgICBmaW5hbGl6ZVJ1bkVmZmVjdCA9IGZ1bmN0aW9uIGZpbmFsaXplUnVuRWZmZWN0KHJ1bkVmZmVjdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlZmZlY3QsIGVmZmVjdElkLCBjdXJyQ2IpIHtcbiAgICAgICAgdmFyIHBsYWluUnVuRWZmZWN0ID0gZnVuY3Rpb24gcGxhaW5SdW5FZmZlY3QoZWZmKSB7XG4gICAgICAgICAgcmV0dXJuIHJ1bkVmZmVjdChlZmYsIGVmZmVjdElkLCBjdXJyQ2IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKHBsYWluUnVuRWZmZWN0KShlZmZlY3QpO1xuICAgICAgfTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGZpbmFsaXplUnVuRWZmZWN0ID0gaWRlbnRpdHk7XG4gIH1cblxuICB2YXIgZW52ID0ge1xuICAgIGNoYW5uZWw6IGNoYW5uZWwsXG4gICAgZGlzcGF0Y2g6IHdyYXBTYWdhRGlzcGF0Y2goZGlzcGF0Y2gpLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICBzYWdhTW9uaXRvcjogc2FnYU1vbml0b3IsXG4gICAgb25FcnJvcjogb25FcnJvcixcbiAgICBmaW5hbGl6ZVJ1bkVmZmVjdDogZmluYWxpemVSdW5FZmZlY3RcbiAgfTtcbiAgcmV0dXJuIGltbWVkaWF0ZWx5KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGFzayA9IHByb2MoZW52LCBpdGVyYXRvciQxLCBjb250ZXh0LCBlZmZlY3RJZCwgZ2V0TWV0YUluZm8oc2FnYSksXG4gICAgLyogaXNSb290ICovXG4gICAgdHJ1ZSwgdW5kZWZpbmVkKTtcblxuICAgIGlmIChzYWdhTW9uaXRvcikge1xuICAgICAgc2FnYU1vbml0b3IuZWZmZWN0UmVzb2x2ZWQoZWZmZWN0SWQsIHRhc2spO1xuICAgIH1cblxuICAgIHJldHVybiB0YXNrO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc2FnYU1pZGRsZXdhcmVGYWN0b3J5KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF9yZWYkY29udGV4dCxcbiAgICAgIF9yZWYkY2hhbm5lbCA9IF9yZWYuY2hhbm5lbCxcbiAgICAgIGNoYW5uZWwgPSBfcmVmJGNoYW5uZWwgPT09IHZvaWQgMCA/IHN0ZENoYW5uZWwoKSA6IF9yZWYkY2hhbm5lbCxcbiAgICAgIHNhZ2FNb25pdG9yID0gX3JlZi5zYWdhTW9uaXRvcixcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJjb250ZXh0XCIsIFwiY2hhbm5lbFwiLCBcInNhZ2FNb25pdG9yXCJdKTtcblxuICB2YXIgYm91bmRSdW5TYWdhO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2soY2hhbm5lbCwgY2hhbm5lbCQxLCAnb3B0aW9ucy5jaGFubmVsIHBhc3NlZCB0byB0aGUgU2FnYSBtaWRkbGV3YXJlIGlzIG5vdCBhIGNoYW5uZWwnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhZ2FNaWRkbGV3YXJlKF9yZWYyKSB7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZjIuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoID0gX3JlZjIuZGlzcGF0Y2g7XG4gICAgYm91bmRSdW5TYWdhID0gcnVuU2FnYS5iaW5kKG51bGwsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgY2hhbm5lbDogY2hhbm5lbCxcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICAgIHNhZ2FNb25pdG9yOiBzYWdhTW9uaXRvclxuICAgIH0pKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChzYWdhTW9uaXRvciAmJiBzYWdhTW9uaXRvci5hY3Rpb25EaXNwYXRjaGVkKSB7XG4gICAgICAgICAgc2FnYU1vbml0b3IuYWN0aW9uRGlzcGF0Y2hlZChhY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IG5leHQoYWN0aW9uKTsgLy8gaGl0IHJlZHVjZXJzXG5cbiAgICAgICAgY2hhbm5lbC5wdXQoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHNhZ2FNaWRkbGV3YXJlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhYm91bmRSdW5TYWdhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JlZm9yZSBydW5uaW5nIGEgU2FnYSwgeW91IG11c3QgbW91bnQgdGhlIFNhZ2EgbWlkZGxld2FyZSBvbiB0aGUgU3RvcmUgdXNpbmcgYXBwbHlNaWRkbGV3YXJlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kUnVuU2FnYS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgc2FnYU1pZGRsZXdhcmUuc2V0Q29udGV4dCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVjayhwcm9wcywgb2JqZWN0LCBjcmVhdGVTZXRDb250ZXh0V2FybmluZygnc2FnYU1pZGRsZXdhcmUnLCBwcm9wcykpO1xuICAgIH1cblxuICAgIGFzc2lnbldpdGhTeW1ib2xzKGNvbnRleHQsIHByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gc2FnYU1pZGRsZXdhcmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNhZ2FNaWRkbGV3YXJlRmFjdG9yeTtcbmV4cG9ydCB7IEVORCwgY2hhbm5lbCwgZXZlbnRDaGFubmVsLCBpc0VuZCwgbXVsdGljYXN0Q2hhbm5lbCwgcnVuU2FnYSwgc3RkQ2hhbm5lbCB9O1xuIiwiaW1wb3J0IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlX19kZWZhdWx0IGZyb20gJ0ByZWR1eC1zYWdhL2NvcmUnO1xuZXhwb3J0ICogZnJvbSAnQHJlZHV4LXNhZ2EvY29yZSc7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTYWdhTWlkZGxld2FyZV9fZGVmYXVsdDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0ICdAcmVkdXgtc2FnYS9zeW1ib2xzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyBjaGFubmVsLCBzdHJpbmdhYmxlRnVuYywgZnVuYywgbm90VW5kZWYgfSBmcm9tICdAcmVkdXgtc2FnYS9pcyc7XG5pbXBvcnQgeyBxIGFzIG1ha2VJdGVyYXRvciwgSyBhcyB0YWtlLCBMIGFzIGZvcmssIE0gYXMgY2FuY2VsLCBOIGFzIGNhbGwsIE8gYXMgZGVsYXksIFEgYXMgYWN0aW9uQ2hhbm5lbCwgVSBhcyBzbGlkaW5nLCBWIGFzIHJhY2UsIGMgYXMgY2hlY2sgfSBmcm9tICcuL2lvLWMzNzkyOTYzLmpzJztcbmV4cG9ydCB7IFEgYXMgYWN0aW9uQ2hhbm5lbCwgXyBhcyBhbGwsICQgYXMgYXBwbHksIE4gYXMgY2FsbCwgTSBhcyBjYW5jZWwsIGE0IGFzIGNhbmNlbGxlZCwgYTAgYXMgY3BzLCBPIGFzIGRlbGF5LCBXIGFzIGVmZmVjdFR5cGVzLCBhNSBhcyBmbHVzaCwgTCBhcyBmb3JrLCBhNiBhcyBnZXRDb250ZXh0LCBhMiBhcyBqb2luLCBZIGFzIHB1dCwgWiBhcyBwdXRSZXNvbHZlLCBWIGFzIHJhY2UsIGEzIGFzIHNlbGVjdCwgYTcgYXMgc2V0Q29udGV4dCwgYTEgYXMgc3Bhd24sIEsgYXMgdGFrZSwgWCBhcyB0YWtlTWF5YmUgfSBmcm9tICcuL2lvLWMzNzkyOTYzLmpzJztcbmltcG9ydCAnQHJlZHV4LXNhZ2EvZGVsYXktcCc7XG5cbnZhciBkb25lID0gZnVuY3Rpb24gZG9uZSh2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGRvbmU6IHRydWUsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuXG52YXIgcUVuZCA9IHt9O1xuZnVuY3Rpb24gc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkge1xuICBpZiAoY2hhbm5lbChwYXR0ZXJuT3JDaGFubmVsKSkge1xuICAgIHJldHVybiAnY2hhbm5lbCc7XG4gIH1cblxuICBpZiAoc3RyaW5nYWJsZUZ1bmMocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gU3RyaW5nKHBhdHRlcm5PckNoYW5uZWwpO1xuICB9XG5cbiAgaWYgKGZ1bmMocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gcGF0dGVybk9yQ2hhbm5lbC5uYW1lO1xuICB9XG5cbiAgcmV0dXJuIFN0cmluZyhwYXR0ZXJuT3JDaGFubmVsKTtcbn1cbmZ1bmN0aW9uIGZzbUl0ZXJhdG9yKGZzbSwgc3RhcnRTdGF0ZSwgbmFtZSkge1xuICB2YXIgc3RhdGVVcGRhdGVyLFxuICAgICAgZXJyb3JTdGF0ZSxcbiAgICAgIGVmZmVjdCxcbiAgICAgIG5leHRTdGF0ZSA9IHN0YXJ0U3RhdGU7XG5cbiAgZnVuY3Rpb24gbmV4dChhcmcsIGVycm9yKSB7XG4gICAgaWYgKG5leHRTdGF0ZSA9PT0gcUVuZCkge1xuICAgICAgcmV0dXJuIGRvbmUoYXJnKTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3IgJiYgIWVycm9yU3RhdGUpIHtcbiAgICAgIG5leHRTdGF0ZSA9IHFFbmQ7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGVVcGRhdGVyICYmIHN0YXRlVXBkYXRlcihhcmcpO1xuICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IGVycm9yID8gZnNtW2Vycm9yU3RhdGVdKGVycm9yKSA6IGZzbVtuZXh0U3RhdGVdKCk7XG4gICAgICBuZXh0U3RhdGUgPSBjdXJyZW50U3RhdGUubmV4dFN0YXRlO1xuICAgICAgZWZmZWN0ID0gY3VycmVudFN0YXRlLmVmZmVjdDtcbiAgICAgIHN0YXRlVXBkYXRlciA9IGN1cnJlbnRTdGF0ZS5zdGF0ZVVwZGF0ZXI7XG4gICAgICBlcnJvclN0YXRlID0gY3VycmVudFN0YXRlLmVycm9yU3RhdGU7XG4gICAgICByZXR1cm4gbmV4dFN0YXRlID09PSBxRW5kID8gZG9uZShhcmcpIDogZWZmZWN0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYWtlSXRlcmF0b3IobmV4dCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIG5leHQobnVsbCwgZXJyb3IpO1xuICB9LCBuYW1lKTtcbn1cblxuZnVuY3Rpb24gdGFrZUV2ZXJ5KHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgeVRha2UgPSB7XG4gICAgZG9uZTogZmFsc2UsXG4gICAgdmFsdWU6IHRha2UocGF0dGVybk9yQ2hhbm5lbClcbiAgfTtcblxuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7XG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBmb3JrLmFwcGx5KHZvaWQgMCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGFjdGlvbixcbiAgICAgIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3EyJyxcbiAgICAgICAgZWZmZWN0OiB5VGFrZSxcbiAgICAgICAgc3RhdGVVcGRhdGVyOiBzZXRBY3Rpb25cbiAgICAgIH07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMScsXG4gICAgICAgIGVmZmVjdDogeUZvcmsoYWN0aW9uKVxuICAgICAgfTtcbiAgICB9XG4gIH0sICdxMScsIFwidGFrZUV2ZXJ5KFwiICsgc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkgKyBcIiwgXCIgKyB3b3JrZXIubmFtZSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gdGFrZUxhdGVzdChwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHlUYWtlID0ge1xuICAgIGRvbmU6IGZhbHNlLFxuICAgIHZhbHVlOiB0YWtlKHBhdHRlcm5PckNoYW5uZWwpXG4gIH07XG5cbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICB2YWx1ZTogZm9yay5hcHBseSh2b2lkIDAsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSlcbiAgICB9O1xuICB9O1xuXG4gIHZhciB5Q2FuY2VsID0gZnVuY3Rpb24geUNhbmNlbCh0YXNrKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgdmFsdWU6IGNhbmNlbCh0YXNrKVxuICAgIH07XG4gIH07XG5cbiAgdmFyIHRhc2ssIGFjdGlvbjtcblxuICB2YXIgc2V0VGFzayA9IGZ1bmN0aW9uIHNldFRhc2sodCkge1xuICAgIHJldHVybiB0YXNrID0gdDtcbiAgfTtcblxuICB2YXIgc2V0QWN0aW9uID0gZnVuY3Rpb24gc2V0QWN0aW9uKGFjKSB7XG4gICAgcmV0dXJuIGFjdGlvbiA9IGFjO1xuICB9O1xuXG4gIHJldHVybiBmc21JdGVyYXRvcih7XG4gICAgcTE6IGZ1bmN0aW9uIHExKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTInLFxuICAgICAgICBlZmZlY3Q6IHlUYWtlLFxuICAgICAgICBzdGF0ZVVwZGF0ZXI6IHNldEFjdGlvblxuICAgICAgfTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiB0YXNrID8ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMycsXG4gICAgICAgIGVmZmVjdDogeUNhbmNlbCh0YXNrKVxuICAgICAgfSA6IHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTEnLFxuICAgICAgICBlZmZlY3Q6IHlGb3JrKGFjdGlvbiksXG4gICAgICAgIHN0YXRlVXBkYXRlcjogc2V0VGFza1xuICAgICAgfTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3ExJyxcbiAgICAgICAgZWZmZWN0OiB5Rm9yayhhY3Rpb24pLFxuICAgICAgICBzdGF0ZVVwZGF0ZXI6IHNldFRhc2tcbiAgICAgIH07XG4gICAgfVxuICB9LCAncTEnLCBcInRha2VMYXRlc3QoXCIgKyBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSArIFwiLCBcIiArIHdvcmtlci5uYW1lICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiB0YWtlTGVhZGluZyhwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHlUYWtlID0ge1xuICAgIGRvbmU6IGZhbHNlLFxuICAgIHZhbHVlOiB0YWtlKHBhdHRlcm5PckNoYW5uZWwpXG4gIH07XG5cbiAgdmFyIHlDYWxsID0gZnVuY3Rpb24geUNhbGwoYWMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICB2YWx1ZTogY2FsbC5hcHBseSh2b2lkIDAsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSlcbiAgICB9O1xuICB9O1xuXG4gIHZhciBhY3Rpb247XG5cbiAgdmFyIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3EyJyxcbiAgICAgICAgZWZmZWN0OiB5VGFrZSxcbiAgICAgICAgc3RhdGVVcGRhdGVyOiBzZXRBY3Rpb25cbiAgICAgIH07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMScsXG4gICAgICAgIGVmZmVjdDogeUNhbGwoYWN0aW9uKVxuICAgICAgfTtcbiAgICB9XG4gIH0sICdxMScsIFwidGFrZUxlYWRpbmcoXCIgKyBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSArIFwiLCBcIiArIHdvcmtlci5uYW1lICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiB0aHJvdHRsZShkZWxheUxlbmd0aCwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAzID8gX2xlbiAtIDMgOiAwKSwgX2tleSA9IDM7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAzXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBhY3Rpb24sIGNoYW5uZWwkMTtcblxuICB2YXIgeVRha2UgPSBmdW5jdGlvbiB5VGFrZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICB2YWx1ZTogdGFrZShjaGFubmVsJDEpXG4gICAgfTtcbiAgfTtcblxuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7XG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBmb3JrLmFwcGx5KHZvaWQgMCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKVxuICAgIH07XG4gIH07XG5cbiAgdmFyIHlEZWxheSA9IHtcbiAgICBkb25lOiBmYWxzZSxcbiAgICB2YWx1ZTogZGVsYXkoZGVsYXlMZW5ndGgpXG4gIH07XG5cbiAgdmFyIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICB2YXIgc2V0Q2hhbm5lbCA9IGZ1bmN0aW9uIHNldENoYW5uZWwoY2gpIHtcbiAgICByZXR1cm4gY2hhbm5lbCQxID0gY2g7XG4gIH07XG5cbiAgdmFyIG5lZWRzQ2hhbm5lbCA9ICFjaGFubmVsKHBhdHRlcm5PckNoYW5uZWwpO1xuXG4gIGlmICghbmVlZHNDaGFubmVsKSB7XG4gICAgc2V0Q2hhbm5lbChwYXR0ZXJuT3JDaGFubmVsKTtcbiAgfVxuXG4gIHJldHVybiBmc21JdGVyYXRvcih7XG4gICAgcTE6IGZ1bmN0aW9uIHExKCkge1xuICAgICAgdmFyIHlBY3Rpb25DaGFubmVsID0ge1xuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IGFjdGlvbkNoYW5uZWwocGF0dGVybk9yQ2hhbm5lbCwgc2xpZGluZygxKSlcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMicsXG4gICAgICAgIGVmZmVjdDogeUFjdGlvbkNoYW5uZWwsXG4gICAgICAgIHN0YXRlVXBkYXRlcjogc2V0Q2hhbm5lbFxuICAgICAgfTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3EzJyxcbiAgICAgICAgZWZmZWN0OiB5VGFrZSgpLFxuICAgICAgICBzdGF0ZVVwZGF0ZXI6IHNldEFjdGlvblxuICAgICAgfTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3E0JyxcbiAgICAgICAgZWZmZWN0OiB5Rm9yayhhY3Rpb24pXG4gICAgICB9O1xuICAgIH0sXG4gICAgcTQ6IGZ1bmN0aW9uIHE0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTInLFxuICAgICAgICBlZmZlY3Q6IHlEZWxheVxuICAgICAgfTtcbiAgICB9XG4gIH0sIG5lZWRzQ2hhbm5lbCA/ICdxMScgOiAncTInLCBcInRocm90dGxlKFwiICsgc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkgKyBcIiwgXCIgKyB3b3JrZXIubmFtZSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gcmV0cnkobWF4VHJpZXMsIGRlbGF5TGVuZ3RoLCBmbikge1xuICB2YXIgY291bnRlciA9IG1heFRyaWVzO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAzID8gX2xlbiAtIDMgOiAwKSwgX2tleSA9IDM7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAzXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciB5Q2FsbCA9IHtcbiAgICBkb25lOiBmYWxzZSxcbiAgICB2YWx1ZTogY2FsbC5hcHBseSh2b2lkIDAsIFtmbl0uY29uY2F0KGFyZ3MpKVxuICB9O1xuICB2YXIgeURlbGF5ID0ge1xuICAgIGRvbmU6IGZhbHNlLFxuICAgIHZhbHVlOiBkZWxheShkZWxheUxlbmd0aClcbiAgfTtcbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMicsXG4gICAgICAgIGVmZmVjdDogeUNhbGwsXG4gICAgICAgIGVycm9yU3RhdGU6ICdxMTAnXG4gICAgICB9O1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiBxRW5kXG4gICAgICB9O1xuICAgIH0sXG4gICAgcTEwOiBmdW5jdGlvbiBxMTAoZXJyb3IpIHtcbiAgICAgIGNvdW50ZXIgLT0gMTtcblxuICAgICAgaWYgKGNvdW50ZXIgPD0gMCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTEnLFxuICAgICAgICBlZmZlY3Q6IHlEZWxheVxuICAgICAgfTtcbiAgICB9XG4gIH0sICdxMScsIFwicmV0cnkoXCIgKyBmbi5uYW1lICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiBkZWJvdW5jZUhlbHBlcihkZWxheUxlbmd0aCwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAzID8gX2xlbiAtIDMgOiAwKSwgX2tleSA9IDM7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAzXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBhY3Rpb24sIHJhY2VPdXRwdXQ7XG4gIHZhciB5VGFrZSA9IHtcbiAgICBkb25lOiBmYWxzZSxcbiAgICB2YWx1ZTogdGFrZShwYXR0ZXJuT3JDaGFubmVsKVxuICB9O1xuICB2YXIgeVJhY2UgPSB7XG4gICAgZG9uZTogZmFsc2UsXG4gICAgdmFsdWU6IHJhY2Uoe1xuICAgICAgYWN0aW9uOiB0YWtlKHBhdHRlcm5PckNoYW5uZWwpLFxuICAgICAgZGVib3VuY2U6IGRlbGF5KGRlbGF5TGVuZ3RoKVxuICAgIH0pXG4gIH07XG5cbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICB2YWx1ZTogZm9yay5hcHBseSh2b2lkIDAsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSlcbiAgICB9O1xuICB9O1xuXG4gIHZhciB5Tm9vcCA9IGZ1bmN0aW9uIHlOb29wKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgfTtcblxuICB2YXIgc2V0QWN0aW9uID0gZnVuY3Rpb24gc2V0QWN0aW9uKGFjKSB7XG4gICAgcmV0dXJuIGFjdGlvbiA9IGFjO1xuICB9O1xuXG4gIHZhciBzZXRSYWNlT3V0cHV0ID0gZnVuY3Rpb24gc2V0UmFjZU91dHB1dChybykge1xuICAgIHJldHVybiByYWNlT3V0cHV0ID0gcm87XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMicsXG4gICAgICAgIGVmZmVjdDogeVRha2UsXG4gICAgICAgIHN0YXRlVXBkYXRlcjogc2V0QWN0aW9uXG4gICAgICB9O1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTMnLFxuICAgICAgICBlZmZlY3Q6IHlSYWNlLFxuICAgICAgICBzdGF0ZVVwZGF0ZXI6IHNldFJhY2VPdXRwdXRcbiAgICAgIH07XG4gICAgfSxcbiAgICBxMzogZnVuY3Rpb24gcTMoKSB7XG4gICAgICByZXR1cm4gcmFjZU91dHB1dC5kZWJvdW5jZSA/IHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTEnLFxuICAgICAgICBlZmZlY3Q6IHlGb3JrKGFjdGlvbilcbiAgICAgIH0gOiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3EyJyxcbiAgICAgICAgZWZmZWN0OiB5Tm9vcChyYWNlT3V0cHV0LmFjdGlvbiksXG4gICAgICAgIHN0YXRlVXBkYXRlcjogc2V0QWN0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgfSwgJ3ExJywgXCJkZWJvdW5jZShcIiArIHNhZmVOYW1lKHBhdHRlcm5PckNoYW5uZWwpICsgXCIsIFwiICsgd29ya2VyLm5hbWUgKyBcIilcIik7XG59XG5cbnZhciB2YWxpZGF0ZVRha2VFZmZlY3QgPSBmdW5jdGlvbiB2YWxpZGF0ZVRha2VFZmZlY3QoZm4sIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBjaGVjayhwYXR0ZXJuT3JDaGFubmVsLCBub3RVbmRlZiwgZm4ubmFtZSArIFwiIHJlcXVpcmVzIGEgcGF0dGVybiBvciBjaGFubmVsXCIpO1xuICBjaGVjayh3b3JrZXIsIG5vdFVuZGVmLCBmbi5uYW1lICsgXCIgcmVxdWlyZXMgYSBzYWdhIHBhcmFtZXRlclwiKTtcbn07XG5cbmZ1bmN0aW9uIHRha2VFdmVyeSQxKHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlVGFrZUVmZmVjdCh0YWtlRXZlcnkkMSwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmb3JrLmFwcGx5KHZvaWQgMCwgW3Rha2VFdmVyeSwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuZnVuY3Rpb24gdGFrZUxhdGVzdCQxKHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlVGFrZUVmZmVjdCh0YWtlTGF0ZXN0JDEsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcik7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh2b2lkIDAsIFt0YWtlTGF0ZXN0LCBwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXJdLmNvbmNhdChhcmdzKSk7XG59XG5mdW5jdGlvbiB0YWtlTGVhZGluZyQxKHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlVGFrZUVmZmVjdCh0YWtlTGVhZGluZyQxLCBwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpO1xuICB9XG5cbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zID4gMiA/IF9sZW4zIC0gMiA6IDApLCBfa2V5MyA9IDI7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzIC0gMl0gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodm9pZCAwLCBbdGFrZUxlYWRpbmcsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cbmZ1bmN0aW9uIHRocm90dGxlJDEobXMsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrKHBhdHRlcm5PckNoYW5uZWwsIG5vdFVuZGVmLCBcInRocm90dGxlIHJlcXVpcmVzIGEgcGF0dGVybiBvciBjaGFubmVsXCIpO1xuICAgIGNoZWNrKHdvcmtlciwgbm90VW5kZWYsICd0aHJvdHRsZSByZXF1aXJlcyBhIHNhZ2EgcGFyYW1ldGVyJyk7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQgPiAzID8gX2xlbjQgLSAzIDogMCksIF9rZXk0ID0gMzsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGFyZ3NbX2tleTQgLSAzXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh2b2lkIDAsIFt0aHJvdHRsZSwgbXMsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cbmZ1bmN0aW9uIHJldHJ5JDEobWF4VHJpZXMsIGRlbGF5TGVuZ3RoLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41ID4gMyA/IF9sZW41IC0gMyA6IDApLCBfa2V5NSA9IDM7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICBhcmdzW19rZXk1IC0gM10gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwuYXBwbHkodm9pZCAwLCBbcmV0cnksIG1heFRyaWVzLCBkZWxheUxlbmd0aCwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuZnVuY3Rpb24gZGVib3VuY2UoZGVsYXlMZW5ndGgsIHBhdHRlcm4sIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYgPiAzID8gX2xlbjYgLSAzIDogMCksIF9rZXk2ID0gMzsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgIGFyZ3NbX2tleTYgLSAzXSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh2b2lkIDAsIFtkZWJvdW5jZUhlbHBlciwgZGVsYXlMZW5ndGgsIHBhdHRlcm4sIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cblxuZXhwb3J0IHsgZGVib3VuY2UsIHJldHJ5JDEgYXMgcmV0cnksIHRha2VFdmVyeSQxIGFzIHRha2VFdmVyeSwgdGFrZUxhdGVzdCQxIGFzIHRha2VMYXRlc3QsIHRha2VMZWFkaW5nJDEgYXMgdGFrZUxlYWRpbmcsIHRocm90dGxlJDEgYXMgdGhyb3R0bGUgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtnZXRQcm90b3R5cGVPZn0gPSBPYmplY3Q7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0RhdGUgPSBraW5kT2ZUZXN0KCdEYXRlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlTGlzdCA9IGtpbmRPZlRlc3QoJ0ZpbGVMaXN0Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJlYW0gPSAodmFsKSA9PiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Zvcm1EYXRhID0gKHRoaW5nKSA9PiB7XG4gIGNvbnN0IHBhdHRlcm4gPSAnW29iamVjdCBGb3JtRGF0YV0nO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHxcbiAgICB0b1N0cmluZy5jYWxsKHRoaW5nKSA9PT0gcGF0dGVybiB8fFxuICAgIChpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSBwYXR0ZXJuKVxuICApO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuY29uc3QgdHJpbSA9IChzdHIpID0+IHN0ci50cmltID9cbiAgc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywgJycpO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5cyA9IGZhbHNlXVxuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuLCB7YWxsT3duS2V5cyA9IGZhbHNlfSA9IHt9KSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGk7XG4gIGxldCBsO1xuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yIChpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBjb25zdCBrZXlzID0gYWxsT3duS2V5cyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikgOiBPYmplY3Qua2V5cyhvYmopO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrZXk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqLCBrZXkpIHtcbiAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICBsZXQgX2tleTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBfa2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoa2V5ID09PSBfa2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBfa2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgX2dsb2JhbCA9ICgoKSA9PiB7XG4gIC8qZXNsaW50IG5vLXVuZGVmOjAqL1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBnbG9iYWxUaGlzO1xuICByZXR1cm4gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKVxufSkoKTtcblxuY29uc3QgaXNDb250ZXh0RGVmaW5lZCA9IChjb250ZXh0KSA9PiAhaXNVbmRlZmluZWQoY29udGV4dCkgJiYgY29udGV4dCAhPT0gX2dsb2JhbDtcblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKlxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICBjb25zdCB7Y2FzZWxlc3N9ID0gaXNDb250ZXh0RGVmaW5lZCh0aGlzKSAmJiB0aGlzIHx8IHt9O1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYXNzaWduVmFsdWUgPSAodmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCB0YXJnZXRLZXkgPSBjYXNlbGVzcyAmJiBmaW5kS2V5KHJlc3VsdCwga2V5KSB8fCBrZXk7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W3RhcmdldEtleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZShyZXN1bHRbdGFyZ2V0S2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJndW1lbnRzW2ldICYmIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXNdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmNvbnN0IGV4dGVuZCA9IChhLCBiLCB0aGlzQXJnLCB7YWxsT3duS2V5c309IHt9KSA9PiB7XG4gIGZvckVhY2goYiwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKHRoaXNBcmcgJiYgaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0sIHthbGxPd25LZXlzfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5jb25zdCBzdHJpcEJPTSA9IChjb250ZW50KSA9PiB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBpbmhlcml0cyA9IChjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSA9PiB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zdHJ1Y3RvciwgJ3N1cGVyJywge1xuICAgIHZhbHVlOiBzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZVxuICB9KTtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbnxCb29sZWFufSBbZmlsdGVyXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BGaWx0ZXJdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgdG9GbGF0T2JqZWN0ID0gKHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSA9PiB7XG4gIGxldCBwcm9wcztcbiAgbGV0IGk7XG4gIGxldCBwcm9wO1xuICBjb25zdCBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIGlmIChzb3VyY2VPYmogPT0gbnVsbCkgcmV0dXJuIGRlc3RPYmo7XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoKCFwcm9wRmlsdGVyIHx8IHByb3BGaWx0ZXIocHJvcCwgc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBmaWx0ZXIgIT09IGZhbHNlICYmIGdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIGEgc3BlY2lmaWVkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGVuZHNXaXRoID0gKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikgPT4ge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIGNvbnN0IGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdCBvciBudWxsIGlmIGZhaWxlZFxuICpcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICpcbiAqIEByZXR1cm5zIHs/QXJyYXl9XG4gKi9cbmNvbnN0IHRvQXJyYXkgPSAodGhpbmcpID0+IHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIGlmIChpc0FycmF5KHRoaW5nKSkgcmV0dXJuIHRoaW5nO1xuICBsZXQgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKCFpc051bWJlcihpKSkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vKipcbiAqIENoZWNraW5nIGlmIHRoZSBVaW50OEFycmF5IGV4aXN0cyBhbmQgaWYgaXQgZG9lcywgaXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZVxuICogdGhpbmcgcGFzc2VkIGluIGlzIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXlcbiAqXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9XG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgaXNUeXBlZEFycmF5ID0gKFR5cGVkQXJyYXkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gdGhpbmcgPT4ge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBnZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbi8qKlxuICogRm9yIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCwgY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgZm9yRWFjaEVudHJ5ID0gKG9iaiwgZm4pID0+IHtcbiAgY29uc3QgZ2VuZXJhdG9yID0gb2JqICYmIG9ialtTeW1ib2wuaXRlcmF0b3JdO1xuXG4gIGNvbnN0IGl0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICBsZXQgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpKSAmJiAhcmVzdWx0LmRvbmUpIHtcbiAgICBjb25zdCBwYWlyID0gcmVzdWx0LnZhbHVlO1xuICAgIGZuLmNhbGwob2JqLCBwYWlyWzBdLCBwYWlyWzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcmVndWxhciBleHByZXNzaW9uIGFuZCBhIHN0cmluZywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHRoZSBtYXRjaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ0V4cCAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIHNlYXJjaC5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8Ym9vbGVhbj59XG4gKi9cbmNvbnN0IG1hdGNoQWxsID0gKHJlZ0V4cCwgc3RyKSA9PiB7XG4gIGxldCBtYXRjaGVzO1xuICBjb25zdCBhcnIgPSBbXTtcblxuICB3aGlsZSAoKG1hdGNoZXMgPSByZWdFeHAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIGFyci5wdXNoKG1hdGNoZXMpO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuLyogQ2hlY2tpbmcgaWYgdGhlIGtpbmRPZlRlc3QgZnVuY3Rpb24gcmV0dXJucyB0cnVlIHdoZW4gcGFzc2VkIGFuIEhUTUxGb3JtRWxlbWVudC4gKi9cbmNvbnN0IGlzSFRNTEZvcm0gPSBraW5kT2ZUZXN0KCdIVE1MRm9ybUVsZW1lbnQnKTtcblxuY29uc3QgdG9DYW1lbENhc2UgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXFxzXShbYS16XFxkXSkoXFx3KikvZyxcbiAgICBmdW5jdGlvbiByZXBsYWNlcihtLCBwMSwgcDIpIHtcbiAgICAgIHJldHVybiBwMS50b1VwcGVyQ2FzZSgpICsgcDI7XG4gICAgfVxuICApO1xufTtcblxuLyogQ3JlYXRpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY2hlY2sgaWYgYW4gb2JqZWN0IGhhcyBhIHByb3BlcnR5LiAqL1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSAoKHtoYXNPd25Qcm9wZXJ0eX0pID0+IChvYmosIHByb3ApID0+IGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkoT2JqZWN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1JlZ0V4cCA9IGtpbmRPZlRlc3QoJ1JlZ0V4cCcpO1xuXG5jb25zdCByZWR1Y2VEZXNjcmlwdG9ycyA9IChvYmosIHJlZHVjZXIpID0+IHtcbiAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopO1xuICBjb25zdCByZWR1Y2VkRGVzY3JpcHRvcnMgPSB7fTtcblxuICBmb3JFYWNoKGRlc2NyaXB0b3JzLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIGlmIChyZWR1Y2VyKGRlc2NyaXB0b3IsIG5hbWUsIG9iaikgIT09IGZhbHNlKSB7XG4gICAgICByZWR1Y2VkRGVzY3JpcHRvcnNbbmFtZV0gPSBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufVxuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuXG5jb25zdCBBTFBIQSA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eidcblxuY29uc3QgRElHSVQgPSAnMDEyMzQ1Njc4OSc7XG5cbmNvbnN0IEFMUEhBQkVUID0ge1xuICBESUdJVCxcbiAgQUxQSEEsXG4gIEFMUEhBX0RJR0lUOiBBTFBIQSArIEFMUEhBLnRvVXBwZXJDYXNlKCkgKyBESUdJVFxufVxuXG5jb25zdCBnZW5lcmF0ZVN0cmluZyA9IChzaXplID0gMTYsIGFscGhhYmV0ID0gQUxQSEFCRVQuQUxQSEFfRElHSVQpID0+IHtcbiAgbGV0IHN0ciA9ICcnO1xuICBjb25zdCB7bGVuZ3RofSA9IGFscGhhYmV0O1xuICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgc3RyICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBsZW5ndGh8MF1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnRGb3JtKHRoaW5nKSB7XG4gIHJldHVybiAhISh0aGluZyAmJiBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXIsXG4gIGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZyxcbiAgaXNOdW1iZXIsXG4gIGlzQm9vbGVhbixcbiAgaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIEFMUEhBQkVULFxuICBnZW5lcmF0ZVN0cmluZyxcbiAgaXNTcGVjQ29tcGxpYW50Rm9ybSxcbiAgdG9KU09OT2JqZWN0XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB1dGlscy50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7P29iamVjdH0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgXG4gIGNvbnN0IF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCJpbXBvcnQgVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4vY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMnXG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnLi9jbGFzc2VzL0Zvcm1EYXRhLmpzJ1xuaW1wb3J0IEJsb2IgZnJvbSAnLi9jbGFzc2VzL0Jsb2IuanMnXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBpc1N0YW5kYXJkQnJvd3NlckVudiA9ICgoKSA9PiB7XG4gIGxldCBwcm9kdWN0O1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICAgIChwcm9kdWN0ID0gbmF2aWdhdG9yLnByb2R1Y3QpID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgcHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICBwcm9kdWN0ID09PSAnTlMnKVxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbn0pKCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIHdlYldvcmtlciBlbnZpcm9ubWVudFxuICpcbiAqIEFsdGhvdWdoIHRoZSBgaXNTdGFuZGFyZEJyb3dzZXJFbnZgIG1ldGhvZCBpbmRpY2F0ZXMgdGhhdFxuICogYGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyYCwgdGhlIFdlYldvcmtlciB3aWxsIHN0aWxsIGJlXG4gKiBmaWx0ZXJlZCBvdXQgZHVlIHRvIGl0cyBqdWRnbWVudCBzdGFuZGFyZFxuICogYHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdgLlxuICogVGhpcyBsZWFkcyB0byBhIHByb2JsZW0gd2hlbiBheGlvcyBwb3N0IGBGb3JtRGF0YWAgaW4gd2ViV29ya2VyXG4gKi9cbiBjb25zdCBpc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiA9ICgoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJlxuICAgIHR5cGVvZiBzZWxmLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbidcbiAgKTtcbn0pKCk7XG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXMsXG4gICAgRm9ybURhdGEsXG4gICAgQmxvYlxuICB9LFxuICBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgaXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYsXG4gIHByb3RvY29sczogWydodHRwJywgJ2h0dHBzJywgJ2ZpbGUnLCAnYmxvYicsICd1cmwnLCAnZGF0YSddXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vLi4vLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyA/IFVSTFNlYXJjaFBhcmFtcyA6IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnID8gRm9ybURhdGEgOiBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyA/IEJsb2IgOiBudWxsXG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzLm1hdGNoQWxsKC9cXHcrfFxcWyhcXHcqKV0vZywgbmFtZSkubWFwKG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gPT09ICdbXScgPyAnJyA6IG1hdGNoWzFdIHx8IG1hdGNoWzBdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFycmF5IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjb252ZXJ0IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMgYXMgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycik7XG4gIGxldCBpO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBGb3JtRGF0YSBvYmplY3QgYW5kIHJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGNvbnZlcnQgdG8gSlNPTi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgYW55PiB8IG51bGx9IFRoZSBjb252ZXJ0ZWQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvSlNPTihmb3JtRGF0YSkge1xuICBmdW5jdGlvbiBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldCwgaW5kZXgpIHtcbiAgICBsZXQgbmFtZSA9IHBhdGhbaW5kZXgrK107XG4gICAgY29uc3QgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA+PSBwYXRoLmxlbmd0aDtcbiAgICBuYW1lID0gIW5hbWUgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMuaXNPYmplY3QodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybURhdGFUb0pTT047XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4vdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgdG9VUkxFbmNvZGVkRm9ybSBmcm9tICcuLi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcblxuY29uc3QgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbn07XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG5jb25zdCBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IFsneGhyJywgJ2h0dHAnXSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkgfHwgJyc7XG4gICAgY29uc3QgaGFzSlNPTkNvbnRlbnRUeXBlID0gY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID4gLTE7XG4gICAgY29uc3QgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzLmlzSFRNTEZvcm0oZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNGb3JtRGF0YSA9IHV0aWxzLmlzRm9ybURhdGEoZGF0YSk7XG5cbiAgICBpZiAoaXNGb3JtRGF0YSkge1xuICAgICAgaWYgKCFoYXNKU09OQ29udGVudFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzSlNPTkNvbnRlbnRUeXBlID8gSlNPTi5zdHJpbmdpZnkoZm9ybURhdGFUb0pTT04oZGF0YSkpIDogZGF0YTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04JywgZmFsc2UpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBsZXQgaXNGaWxlTGlzdDtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQpIHtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIHRoaXMuZm9ybVNlcmlhbGl6ZXIpLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoaXNGaWxlTGlzdCA9IHV0aWxzLmlzRmlsZUxpc3QoZGF0YSkpIHx8IGNvbnRlbnRUeXBlLmluZGV4T2YoJ211bHRpcGFydC9mb3JtLWRhdGEnKSA+IC0xKSB7XG4gICAgICAgIGNvbnN0IF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuXG4gICAgICAgIHJldHVybiB0b0Zvcm1EYXRhKFxuICAgICAgICAgIGlzRmlsZUxpc3QgPyB7J2ZpbGVzW10nOiBkYXRhfSA6IGRhdGEsXG4gICAgICAgICAgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSxcbiAgICAgICAgICB0aGlzLmZvcm1TZXJpYWxpemVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBoYXNKU09OQ29udGVudFR5cGUgKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeVNhZmVseShkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgY29uc3QgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIGNvbnN0IGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICBjb25zdCBKU09OUmVxdWVzdGVkID0gdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChkYXRhICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmICgoZm9yY2VkSlNPTlBhcnNpbmcgJiYgIXRoaXMucmVzcG9uc2VUeXBlKSB8fCBKU09OUmVxdWVzdGVkKSkge1xuICAgICAgY29uc3Qgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgICAgY29uc3Qgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgSlNPTlJlcXVlc3RlZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsIHRoaXMsIG51bGwsIHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICBlbnY6IHtcbiAgICBGb3JtRGF0YTogcGxhdGZvcm0uY2xhc3Nlcy5Gb3JtRGF0YSxcbiAgICBCbG9iOiBwbGF0Zm9ybS5jbGFzc2VzLkJsb2JcbiAgfSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vLyBSYXdBeGlvc0hlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG5jb25zdCBpZ25vcmVEdXBsaWNhdGVPZiA9IHV0aWxzLnRvT2JqZWN0U2V0KFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0hlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IHJhd0hlYWRlcnMgPT4ge1xuICBjb25zdCBwYXJzZWQgPSB7fTtcbiAgbGV0IGtleTtcbiAgbGV0IHZhbDtcbiAgbGV0IGk7XG5cbiAgcmF3SGVhZGVycyAmJiByYXdIZWFkZXJzLnNwbGl0KCdcXG4nKS5mb3JFYWNoKGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IGxpbmUuc3Vic3RyaW5nKDAsIGkpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IGxpbmUuc3Vic3RyaW5nKGkgKyAxKS50cmltKCk7XG5cbiAgICBpZiAoIWtleSB8fCAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2Zba2V5XSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSkge1xuICAgICAgICBwYXJzZWRba2V5XS5wdXNoKHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IFt2YWxdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgcGFyc2VIZWFkZXJzIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzJztcblxuY29uc3QgJGludGVybmFscyA9IFN5bWJvbCgnaW50ZXJuYWxzJyk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlciAmJiBTdHJpbmcoaGVhZGVyKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVG9rZW5zKHN0cikge1xuICBjb25zdCB0b2tlbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCB0b2tlbnNSRSA9IC8oW15cXHMsOz1dKylcXHMqKD86PVxccyooW14sO10rKSk/L2c7XG4gIGxldCBtYXRjaDtcblxuICB3aGlsZSAoKG1hdGNoID0gdG9rZW5zUkUuZXhlYyhzdHIpKSkge1xuICAgIHRva2Vuc1ttYXRjaFsxXV0gPSBtYXRjaFsyXTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmNvbnN0IGlzVmFsaWRIZWFkZXJOYW1lID0gKHN0cikgPT4gL15bLV9hLXpBLVowLTleYHx+LCEjJCUmJyorLl0rJC8udGVzdChzdHIudHJpbSgpKTtcblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJWYWx1ZShjb250ZXh0LCB2YWx1ZSwgaGVhZGVyLCBmaWx0ZXIsIGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICBpZiAodXRpbHMuaXNGdW5jdGlvbihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMsIHZhbHVlLCBoZWFkZXIpO1xuICB9XG5cbiAgaWYgKGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICAgIHZhbHVlID0gaGVhZGVyO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc1N0cmluZyh2YWx1ZSkpIHJldHVybjtcblxuICBpZiAodXRpbHMuaXNTdHJpbmcoZmlsdGVyKSkge1xuICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKGZpbHRlcikgIT09IC0xO1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzUmVnRXhwKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLnRlc3QodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlci50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csICh3LCBjaGFyLCBzdHIpID0+IHtcbiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCkgKyBzdHI7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQWNjZXNzb3JzKG9iaiwgaGVhZGVyKSB7XG4gIGNvbnN0IGFjY2Vzc29yTmFtZSA9IHV0aWxzLnRvQ2FtZWxDYXNlKCcgJyArIGhlYWRlcik7XG5cbiAgWydnZXQnLCAnc2V0JywgJ2hhcyddLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbWV0aG9kTmFtZSArIGFjY2Vzc29yTmFtZSwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kTmFtZV0uY2FsbCh0aGlzLCBoZWFkZXIsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbn1cblxuY2xhc3MgQXhpb3NIZWFkZXJzIHtcbiAgY29uc3RydWN0b3IoaGVhZGVycykge1xuICAgIGhlYWRlcnMgJiYgdGhpcy5zZXQoaGVhZGVycyk7XG4gIH1cblxuICBzZXQoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSwgcmV3cml0ZSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghbEhlYWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hlYWRlciBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgbEhlYWRlcik7XG5cbiAgICAgIGlmKCFrZXkgfHwgc2VsZltrZXldID09PSB1bmRlZmluZWQgfHwgX3Jld3JpdGUgPT09IHRydWUgfHwgKF9yZXdyaXRlID09PSB1bmRlZmluZWQgJiYgc2VsZltrZXldICE9PSBmYWxzZSkpIHtcbiAgICAgICAgc2VsZltrZXkgfHwgX2hlYWRlcl0gPSBub3JtYWxpemVWYWx1ZShfdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNldEhlYWRlcnMgPSAoaGVhZGVycywgX3Jld3JpdGUpID0+XG4gICAgICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIChfdmFsdWUsIF9oZWFkZXIpID0+IHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSk7XG5cbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChoZWFkZXIpIHx8IGhlYWRlciBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgIHNldEhlYWRlcnMoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSlcbiAgICB9IGVsc2UgaWYodXRpbHMuaXNTdHJpbmcoaGVhZGVyKSAmJiAoaGVhZGVyID0gaGVhZGVyLnRyaW0oKSkgJiYgIWlzVmFsaWRIZWFkZXJOYW1lKGhlYWRlcikpIHtcbiAgICAgIHNldEhlYWRlcnMocGFyc2VIZWFkZXJzKGhlYWRlciksIHZhbHVlT3JSZXdyaXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZGVyICE9IG51bGwgJiYgc2V0SGVhZGVyKHZhbHVlT3JSZXdyaXRlLCBoZWFkZXIsIHJld3JpdGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0KGhlYWRlciwgcGFyc2VyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW2tleV07XG5cbiAgICAgICAgaWYgKCFwYXJzZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyc2VyID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5zKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGwodGhpcywgdmFsdWUsIGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNSZWdFeHAocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuZXhlYyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJzZXIgbXVzdCBiZSBib29sZWFufHJlZ2V4cHxmdW5jdGlvbicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhcyhoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgcmV0dXJuICEhKGtleSAmJiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlcikpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBkZWxldGUoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUhlYWRlcihfaGVhZGVyKSB7XG4gICAgICBfaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoX2hlYWRlcikge1xuICAgICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIF9oZWFkZXIpO1xuXG4gICAgICAgIGlmIChrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUoc2VsZiwgc2VsZltrZXldLCBrZXksIG1hdGNoZXIpKSkge1xuICAgICAgICAgIGRlbGV0ZSBzZWxmW2tleV07XG5cbiAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5KGhlYWRlcikpIHtcbiAgICAgIGhlYWRlci5mb3JFYWNoKGRlbGV0ZUhlYWRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUhlYWRlcihoZWFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgY2xlYXIobWF0Y2hlcikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlciwgdHJ1ZSkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBub3JtYWxpemUoZm9ybWF0KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShoZWFkZXJzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHNlbGZba2V5XSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3JtYWxpemVkID0gZm9ybWF0ID8gZm9ybWF0SGVhZGVyKGhlYWRlcikgOiBTdHJpbmcoaGVhZGVyKS50cmltKCk7XG5cbiAgICAgIGlmIChub3JtYWxpemVkICE9PSBoZWFkZXIpIHtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgIH1cblxuICAgICAgc2VsZltub3JtYWxpemVkXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcblxuICAgICAgaGVhZGVyc1tub3JtYWxpemVkXSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbmNhdCguLi50YXJnZXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY29uY2F0KHRoaXMsIC4uLnRhcmdldHMpO1xuICB9XG5cbiAgdG9KU09OKGFzU3RyaW5ncykge1xuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBmYWxzZSAmJiAob2JqW2hlYWRlcl0gPSBhc1N0cmluZ3MgJiYgdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsICcpIDogdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSkubWFwKChbaGVhZGVyLCB2YWx1ZV0pID0+IGhlYWRlciArICc6ICcgKyB2YWx1ZSkuam9pbignXFxuJyk7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdBeGlvc0hlYWRlcnMnO1xuICB9XG5cbiAgc3RhdGljIGZyb20odGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiB0aGlzID8gdGhpbmcgOiBuZXcgdGhpcyh0aGluZyk7XG4gIH1cblxuICBzdGF0aWMgY29uY2F0KGZpcnN0LCAuLi50YXJnZXRzKSB7XG4gICAgY29uc3QgY29tcHV0ZWQgPSBuZXcgdGhpcyhmaXJzdCk7XG5cbiAgICB0YXJnZXRzLmZvckVhY2goKHRhcmdldCkgPT4gY29tcHV0ZWQuc2V0KHRhcmdldCkpO1xuXG4gICAgcmV0dXJuIGNvbXB1dGVkO1xuICB9XG5cbiAgc3RhdGljIGFjY2Vzc29yKGhlYWRlcikge1xuICAgIGNvbnN0IGludGVybmFscyA9IHRoaXNbJGludGVybmFsc10gPSAodGhpc1skaW50ZXJuYWxzXSA9IHtcbiAgICAgIGFjY2Vzc29yczoge31cbiAgICB9KTtcblxuICAgIGNvbnN0IGFjY2Vzc29ycyA9IGludGVybmFscy5hY2Nlc3NvcnM7XG4gICAgY29uc3QgcHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGU7XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVBY2Nlc3NvcihfaGVhZGVyKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWFjY2Vzc29yc1tsSGVhZGVyXSkge1xuICAgICAgICBidWlsZEFjY2Vzc29ycyhwcm90b3R5cGUsIF9oZWFkZXIpO1xuICAgICAgICBhY2Nlc3NvcnNbbEhlYWRlcl0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHV0aWxzLmlzQXJyYXkoaGVhZGVyKSA/IGhlYWRlci5mb3JFYWNoKGRlZmluZUFjY2Vzc29yKSA6IGRlZmluZUFjY2Vzc29yKGhlYWRlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5BeGlvc0hlYWRlcnMuYWNjZXNzb3IoWydDb250ZW50LVR5cGUnLCAnQ29udGVudC1MZW5ndGgnLCAnQWNjZXB0JywgJ0FjY2VwdC1FbmNvZGluZycsICdVc2VyLUFnZW50JywgJ0F1dGhvcml6YXRpb24nXSk7XG5cbnV0aWxzLmZyZWV6ZU1ldGhvZHMoQXhpb3NIZWFkZXJzLnByb3RvdHlwZSk7XG51dGlscy5mcmVlemVNZXRob2RzKEF4aW9zSGVhZGVycyk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zSGVhZGVycztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcGFyYW0gez9PYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZSBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZm5zLCByZXNwb25zZSkge1xuICBjb25zdCBjb25maWcgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICBjb25zdCBjb250ZXh0ID0gcmVzcG9uc2UgfHwgY29uZmlnO1xuICBjb25zdCBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29udGV4dC5oZWFkZXJzKTtcbiAgbGV0IGRhdGEgPSBjb250ZXh0LmRhdGE7XG5cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbmZpZywgZGF0YSwgaGVhZGVycy5ub3JtYWxpemUoKSwgcmVzcG9uc2UgPyByZXNwb25zZS5zdGF0dXMgOiB1bmRlZmluZWQpO1xuICB9KTtcblxuICBoZWFkZXJzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbGVkRXJyb3JgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3Q9fSByZXF1ZXN0IFRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxlZEVycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQsIGNvbmZpZywgcmVxdWVzdCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsZWRFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICBjb25zdCBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbi8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgaXNBYnNvbHV0ZVVSTCBmcm9tICcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMnO1xuaW1wb3J0IGNvbWJpbmVVUkxzIGZyb20gJy4uL2hlbHBlcnMvY29tYmluZVVSTHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmlzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4vLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICBjb25zdCBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICBjb25zdCB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBsZXQgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIGxldCBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vLi4vY29yZS9zZXR0bGUuanMnO1xuaW1wb3J0IGNvb2tpZXMgZnJvbSAnLi8uLi9oZWxwZXJzL2Nvb2tpZXMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4vLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuLi9jb3JlL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IGlzVVJMU2FtZU9yaWdpbiBmcm9tICcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBwYXJzZVByb3RvY29sIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgc3BlZWRvbWV0ZXIgZnJvbSAnLi4vaGVscGVycy9zcGVlZG9tZXRlci5qcyc7XG5cbmZ1bmN0aW9uIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtKSB7XG4gIGxldCBieXRlc05vdGlmaWVkID0gMDtcbiAgY29uc3QgX3NwZWVkb21ldGVyID0gc3BlZWRvbWV0ZXIoNTAsIDI1MCk7XG5cbiAgcmV0dXJuIGUgPT4ge1xuICAgIGNvbnN0IGxvYWRlZCA9IGUubG9hZGVkO1xuICAgIGNvbnN0IHRvdGFsID0gZS5sZW5ndGhDb21wdXRhYmxlID8gZS50b3RhbCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcm9ncmVzc0J5dGVzID0gbG9hZGVkIC0gYnl0ZXNOb3RpZmllZDtcbiAgICBjb25zdCByYXRlID0gX3NwZWVkb21ldGVyKHByb2dyZXNzQnl0ZXMpO1xuICAgIGNvbnN0IGluUmFuZ2UgPSBsb2FkZWQgPD0gdG90YWw7XG5cbiAgICBieXRlc05vdGlmaWVkID0gbG9hZGVkO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGxvYWRlZCxcbiAgICAgIHRvdGFsLFxuICAgICAgcHJvZ3Jlc3M6IHRvdGFsID8gKGxvYWRlZCAvIHRvdGFsKSA6IHVuZGVmaW5lZCxcbiAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgcmF0ZTogcmF0ZSA/IHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBlc3RpbWF0ZWQ6IHJhdGUgJiYgdG90YWwgJiYgaW5SYW5nZSA/ICh0b3RhbCAtIGxvYWRlZCkgLyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXZlbnQ6IGVcbiAgICB9O1xuXG4gICAgZGF0YVtpc0Rvd25sb2FkU3RyZWFtID8gJ2Rvd25sb2FkJyA6ICd1cGxvYWQnXSA9IHRydWU7XG5cbiAgICBsaXN0ZW5lcihkYXRhKTtcbiAgfTtcbn1cblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbmZpZy5oZWFkZXJzKS5ub3JtYWxpemUoKTtcbiAgICBjb25zdCByZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIGxldCBvbkNhbmNlbGVkO1xuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSAmJiAocGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYpKSB7XG4gICAgICByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShmYWxzZSk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgY29uc3QgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIGNvbnN0IHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpKTtcbiAgICB9XG5cbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShcbiAgICAgICAgJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCAmJiByZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAocGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgY29uc3QgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSlcbiAgICAgICAgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lICYmIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldChjb25maWcueHNyZkhlYWRlck5hbWUsIHhzcmZWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgIHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQgJiYgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUobnVsbCk7XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MsIHRydWUpKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuIHx8IGNvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gY2FuY2VsID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IGNhbmNlbC50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXF1ZXN0KSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4gJiYgY29uZmlnLmNhbmNlbFRva2VuLnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IGNvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwcm90b2NvbCA9IHBhcnNlUHJvdG9jb2woZnVsbFBhdGgpO1xuXG4gICAgaWYgKHByb3RvY29sICYmIHBsYXRmb3JtLnByb3RvY29scy5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignVW5zdXBwb3J0ZWQgcHJvdG9jb2wgJyArIHByb3RvY29sICsgJzonLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgY29uZmlnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDYWxjdWxhdGUgZGF0YSBtYXhSYXRlXG4gKiBAcGFyYW0ge051bWJlcn0gW3NhbXBsZXNDb3VudD0gMTBdXG4gKiBAcGFyYW0ge051bWJlcn0gW21pbj0gMTAwMF1cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gc3BlZWRvbWV0ZXIoc2FtcGxlc0NvdW50LCBtaW4pIHtcbiAgc2FtcGxlc0NvdW50ID0gc2FtcGxlc0NvdW50IHx8IDEwO1xuICBjb25zdCBieXRlcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBjb25zdCB0aW1lc3RhbXBzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGxldCBoZWFkID0gMDtcbiAgbGV0IHRhaWwgPSAwO1xuICBsZXQgZmlyc3RTYW1wbGVUUztcblxuICBtaW4gPSBtaW4gIT09IHVuZGVmaW5lZCA/IG1pbiA6IDEwMDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1c2goY2h1bmtMZW5ndGgpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3Qgc3RhcnRlZEF0ID0gdGltZXN0YW1wc1t0YWlsXTtcblxuICAgIGlmICghZmlyc3RTYW1wbGVUUykge1xuICAgICAgZmlyc3RTYW1wbGVUUyA9IG5vdztcbiAgICB9XG5cbiAgICBieXRlc1toZWFkXSA9IGNodW5rTGVuZ3RoO1xuICAgIHRpbWVzdGFtcHNbaGVhZF0gPSBub3c7XG5cbiAgICBsZXQgaSA9IHRhaWw7XG4gICAgbGV0IGJ5dGVzQ291bnQgPSAwO1xuXG4gICAgd2hpbGUgKGkgIT09IGhlYWQpIHtcbiAgICAgIGJ5dGVzQ291bnQgKz0gYnl0ZXNbaSsrXTtcbiAgICAgIGkgPSBpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGhlYWQgPSAoaGVhZCArIDEpICUgc2FtcGxlc0NvdW50O1xuXG4gICAgaWYgKGhlYWQgPT09IHRhaWwpIHtcbiAgICAgIHRhaWwgPSAodGFpbCArIDEpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGlmIChub3cgLSBmaXJzdFNhbXBsZVRTIDwgbWluKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGFzc2VkID0gc3RhcnRlZEF0ICYmIG5vdyAtIHN0YXJ0ZWRBdDtcblxuICAgIHJldHVybiBwYXNzZWQgPyBNYXRoLnJvdW5kKGJ5dGVzQ291bnQgKiAxMDAwIC8gcGFzc2VkKSA6IHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3BlZWRvbWV0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgY29uc3QgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IGh0dHBBZGFwdGVyIGZyb20gJy4vaHR0cC5qcyc7XG5pbXBvcnQgeGhyQWRhcHRlciBmcm9tICcuL3hoci5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5cbmNvbnN0IGtub3duQWRhcHRlcnMgPSB7XG4gIGh0dHA6IGh0dHBBZGFwdGVyLFxuICB4aHI6IHhockFkYXB0ZXJcbn1cblxudXRpbHMuZm9yRWFjaChrbm93bkFkYXB0ZXJzLCAoZm4sIHZhbHVlKSA9PiB7XG4gIGlmKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ25hbWUnLCB7dmFsdWV9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnYWRhcHRlck5hbWUnLCB7dmFsdWV9KTtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscy5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBuYW1lT3JBZGFwdGVyID0gYWRhcHRlcnNbaV07XG4gICAgICBpZigoYWRhcHRlciA9IHV0aWxzLmlzU3RyaW5nKG5hbWVPckFkYXB0ZXIpID8ga25vd25BZGFwdGVyc1tuYW1lT3JBZGFwdGVyLnRvTG93ZXJDYXNlKCldIDogbmFtZU9yQWRhcHRlcikpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFhZGFwdGVyKSB7XG4gICAgICBpZiAoYWRhcHRlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgICAgYEFkYXB0ZXIgJHtuYW1lT3JBZGFwdGVyfSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudGAsXG4gICAgICAgICAgJ0VSUl9OT1RfU1VQUE9SVCdcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICB1dGlscy5oYXNPd25Qcm9wKGtub3duQWRhcHRlcnMsIG5hbWVPckFkYXB0ZXIpID9cbiAgICAgICAgICBgQWRhcHRlciAnJHtuYW1lT3JBZGFwdGVyfScgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnVpbGRgIDpcbiAgICAgICAgICBgVW5rbm93biBhZGFwdGVyICcke25hbWVPckFkYXB0ZXJ9J2BcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCF1dGlscy5pc0Z1bmN0aW9uKGFkYXB0ZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhZGFwdGVyIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkYXB0ZXI7XG4gIH0sXG4gIGFkYXB0ZXJzOiBrbm93bkFkYXB0ZXJzXG59XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG5leHBvcnQgZGVmYXVsdCBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8gdGhpbmcudG9KU09OKCkgOiB0aGluZztcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgY29uc3QgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UsIGNhc2VsZXNzKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZS5jYWxsKHtjYXNlbGVzc30sIHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhhLCBiLCBjYXNlbGVzcykge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiLCBjYXNlbGVzcyk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEsIGNhc2VsZXNzKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKGEsIGIsIHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1lcmdlTWFwID0ge1xuICAgIHVybDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBtZXRob2Q6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgZGF0YTogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBiYXNlVVJMOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcGFyYW1zU2VyaWFsaXplcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXRNZXNzYWdlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhDcmVkZW50aWFsczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIpID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYiksIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IG1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0sIHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cbiIsImV4cG9ydCBjb25zdCBWRVJTSU9OID0gXCIxLjMuNVwiOyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaCgodHlwZSwgaSkgPT4ge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxuY29uc3QgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gKHZhbHVlLCBvcHQsIG9wdHMpID0+IHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgY29uc3Qgb3B0ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBidWlsZFVSTCBmcm9tICcuLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBJbnRlcmNlcHRvck1hbmFnZXIgZnJvbSAnLi9JbnRlcmNlcHRvck1hbmFnZXIuanMnO1xuaW1wb3J0IGRpc3BhdGNoUmVxdWVzdCBmcm9tICcuL2Rpc3BhdGNoUmVxdWVzdC5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IHZhbGlkYXRvciBmcm9tICcuLi9oZWxwZXJzL3ZhbGlkYXRvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4vQXhpb3NIZWFkZXJzLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5jbGFzcyBBeGlvcyB7XG4gIGNvbnN0cnVjdG9yKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gY29uZmlnT3JVcmwgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICAgKiBAcGFyYW0gez9PYmplY3R9IGNvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gICAqL1xuICByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCBjb25maWcubWV0aG9kXG4gICAgY29uZmlnLm1ldGhvZCA9IChjb25maWcubWV0aG9kIHx8IHRoaXMuZGVmYXVsdHMubWV0aG9kIHx8ICdnZXQnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgbGV0IGNvbnRleHRIZWFkZXJzO1xuXG4gICAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gICAgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgaGVhZGVycy5jb21tb24sXG4gICAgICBoZWFkZXJzW2NvbmZpZy5tZXRob2RdXG4gICAgKTtcblxuICAgIGNvbnRleHRIZWFkZXJzICYmIHV0aWxzLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuY29uY2F0KGNvbnRleHRIZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAgICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAgICovXG4gIHN0YXRpYyBzb3VyY2UoKSB7XG4gICAgbGV0IGNhbmNlbDtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgICBjYW5jZWwgPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbixcbiAgICAgIGNhbmNlbFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsVG9rZW47XG4iLCJjb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgSHR0cFN0YXR1c0NvZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcbmltcG9ydCBBeGlvcyBmcm9tICcuL2NvcmUvQXhpb3MuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vY29yZS9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbFRva2VuIGZyb20gJy4vY2FuY2VsL0NhbmNlbFRva2VuLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4vZW52L2RhdGEuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHNwcmVhZCBmcm9tICcuL2hlbHBlcnMvc3ByZWFkLmpzJztcbmltcG9ydCBpc0F4aW9zRXJyb3IgZnJvbSAnLi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgSHR0cFN0YXR1c0NvZGUgZnJvbSAnLi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQsIG51bGwsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxuY29uc3QgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW47XG5heGlvcy5pc0NhbmNlbCA9IGlzQ2FuY2VsO1xuYXhpb3MuVkVSU0lPTiA9IFZFUlNJT047XG5heGlvcy50b0Zvcm1EYXRhID0gdG9Gb3JtRGF0YTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSBBeGlvc0Vycm9yO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuYXhpb3Muc3ByZWFkID0gc3ByZWFkO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSBpc0F4aW9zRXJyb3I7XG5cbi8vIEV4cG9zZSBtZXJnZUNvbmZpZ1xuYXhpb3MubWVyZ2VDb25maWcgPSBtZXJnZUNvbmZpZztcblxuYXhpb3MuQXhpb3NIZWFkZXJzID0gQXhpb3NIZWFkZXJzO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xudmFyIGFwaUhvc3QgPSAnYXBpLm9wZW4tbWV0ZW8uY29tJztcbnZhciBvcGVuTWV0ZW9BcGlJbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7XG4gICAgYmFzZVVSTDogXCJodHRwczovL1wiLmNvbmNhdChhcGlIb3N0LCBcIi92MS9mb3JlY2FzdFwiKSxcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgdGltZXpvbmU6ICdFdXJvcGUvTW9zY293JyxcbiAgICAgICAgdGltZWZvcm1hdDogJ3VuaXh0aW1lJyxcbiAgICB9LFxufSk7XG5leHBvcnQgdmFyIG9wZW5NZXRlb0FwaSA9IHtcbiAgICBnZXRIb3VybHlXZWF0aGVyOiBmdW5jdGlvbiAobG9uZ2l0dWRlLCBsYXRpdHVkZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgb3Blbk1ldGVvQXBpSW5zdGFuY2UuZ2V0KCcnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogbG9uZ2l0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogbGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdXJseTogWyd0ZW1wZXJhdHVyZV8ybScsICd3ZWF0aGVyY29kZSddLmpvaW4oJywnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWNhc3RfZGF5czogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gKF9hLnNlbnQoKSkuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBkYXRhXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXREYWlseVdlYXRoZXI6IGZ1bmN0aW9uIChsb25naXR1ZGUsIGxhdGl0dWRlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYXRhO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBvcGVuTWV0ZW9BcGlJbnN0YW5jZS5nZXQoJycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBsb25naXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBsYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFpbHk6IFsnd2VhdGhlcmNvZGUnLCAndGVtcGVyYXR1cmVfMm1fbWF4JywgJ3RlbXBlcmF0dXJlXzJtX21pbiddLmpvaW4oJywnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gKF9hLnNlbnQoKSkuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBkYXRhXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBzZWFyY2hDaXR5QnlOYW1lOiBmdW5jdGlvbiAoY2l0eSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgYXhpb3MuZ2V0KFwiaHR0cHM6Ly9nZW9jb2RpbmctXCIuY29uY2F0KGFwaUhvc3QsIFwiL3YxL3NlYXJjaFwiKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBjaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSAoX2Euc2VudCgpKS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGRhdGFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxufTtcbiIsInZhciBfYTtcbmltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XG5pbXBvcnQgeyBMT0FESU5HX1NUQVRVUyB9IGZyb20gJ0Bjb25zdGFudHMnO1xudmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICB3ZWF0aGVyOiBudWxsLFxuICAgIGxvYWRpbmdTdGF0dXM6IExPQURJTkdfU1RBVFVTLklETEUsXG59O1xuZXhwb3J0IHZhciB0b2RheVdlYXRoZXJTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgICBuYW1lOiAndG9kYXlXZWF0aGVyJyxcbiAgICBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgICBmZXRjaFRvZGF5V2VhdGhlcjogZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHsgfSxcbiAgICAgICAgc2V0VG9kYXlXZWF0aGVyOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgICAgICAgc3RhdGUud2VhdGhlciA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUb2RheUxvYWRpbmdTdGF0dXM6IGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICAgICAgICBzdGF0ZS5sb2FkaW5nU3RhdHVzID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICAgIH0sXG4gICAgfSxcbn0pO1xuZXhwb3J0IHZhciBzZXRUb2RheVdlYXRoZXIgPSAoX2EgPSB0b2RheVdlYXRoZXJTbGljZS5hY3Rpb25zLCBfYS5zZXRUb2RheVdlYXRoZXIpLCBzZXRUb2RheUxvYWRpbmdTdGF0dXMgPSBfYS5zZXRUb2RheUxvYWRpbmdTdGF0dXMsIGZldGNoVG9kYXlXZWF0aGVyID0gX2EuZmV0Y2hUb2RheVdlYXRoZXI7XG5leHBvcnQgZGVmYXVsdCB0b2RheVdlYXRoZXJTbGljZS5yZWR1Y2VyO1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbnZhciB0b2tlbiA9IHByb2Nlc3MuZW52LlJFQUNUX0FQUF9PUEVOV0VBVEhFUl9BUElfS0VZO1xudmFyIG9wZW5XZWF0aGVyQXBpSW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoe1xuICAgIGJhc2VVUkw6IFwiaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41XCIsXG4gICAgcGFyYW1zOiB7XG4gICAgICAgIGFwcGlkOiB0b2tlbixcbiAgICAgICAgdW5pdHM6ICdtZXRyaWMnLFxuICAgIH0sXG59KTtcbmV4cG9ydCB2YXIgb3BlbldlYXRoZXJBcGkgPSB7XG4gICAgZ2V0VG9kYXlXZWF0aGVyQnlDaXR5TmFtZTogZnVuY3Rpb24gKGNpdHkpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIG9wZW5XZWF0aGVyQXBpSW5zdGFuY2UuZ2V0KCcvd2VhdGhlcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcTogY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gKF9hLnNlbnQoKSkuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBkYXRhXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRUb2RheVdlYXRoZXJCeUNvb3JkczogZnVuY3Rpb24gKGxvbiwgbGF0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYXRhO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBvcGVuV2VhdGhlckFwaUluc3RhbmNlLmdldCgnL3dlYXRoZXInLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogbGF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb246IGxvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gKF9hLnNlbnQoKSkuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBkYXRhXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbn07XG4iLCJ2YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuaW1wb3J0IHsgY2FsbCwgcHV0LCB0YWtlRXZlcnkgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuaW1wb3J0IHsgTE9BRElOR19TVEFUVVMgfSBmcm9tICdAY29uc3RhbnRzJztcbmltcG9ydCB7IG9wZW5XZWF0aGVyQXBpIH0gZnJvbSAnQGFwaSc7XG5pbXBvcnQgeyBmZXRjaFRvZGF5V2VhdGhlciwgc2V0VG9kYXlMb2FkaW5nU3RhdHVzLCBzZXRUb2RheVdlYXRoZXIgfSBmcm9tICcuLi9zbGljZXMvdG9kYXl3ZWF0aGVyLnNsaWNlJztcbmZ1bmN0aW9uIGZldGNoVG9kYXlXZWF0aGVyV29ya2VyKGFjdGlvbikge1xuICAgIHZhciBkYXRhLCBlcnJvcl8xO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBwdXQoc2V0VG9kYXlMb2FkaW5nU3RhdHVzKExPQURJTkdfU1RBVFVTLkxPQURJTkcpKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzIsIDYsICwgOF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNhbGwob3BlbldlYXRoZXJBcGkuZ2V0VG9kYXlXZWF0aGVyQnlDb29yZHMsIGFjdGlvbi5wYXlsb2FkLmxvbiwgYWN0aW9uLnBheWxvYWQubGF0KV07XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgZGF0YSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBwdXQoc2V0VG9kYXlXZWF0aGVyKGRhdGEpKV07XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHB1dChzZXRUb2RheUxvYWRpbmdTdGF0dXMoTE9BRElOR19TVEFUVVMuSURMRSkpXTtcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgZXJyb3JfMSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBwdXQoc2V0VG9kYXlMb2FkaW5nU3RhdHVzKExPQURJTkdfU1RBVFVTLkVSUk9SKSldO1xuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA4XTtcbiAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9kYXlXZWF0aGVyV2F0Y2hlcigpIHtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGFrZUV2ZXJ5KGZldGNoVG9kYXlXZWF0aGVyLnR5cGUsIGZldGNoVG9kYXlXZWF0aGVyV29ya2VyKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIiwidmFyIF9hO1xuaW1wb3J0IHsgY3JlYXRlU2xpY2UgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB7IExPQURJTkdfU1RBVFVTIH0gZnJvbSAnQGNvbnN0YW50cyc7XG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICAgIHdlYXRoZXI6IG51bGwsXG4gICAgbG9hZGluZ1N0YXR1czogTE9BRElOR19TVEFUVVMuSURMRSxcbn07XG5leHBvcnQgdmFyIGhvdXJseVdlYXRoZXJTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgICBuYW1lOiAnaG91cmx5V2VhdGhlcicsXG4gICAgaW5pdGlhbFN0YXRlOiBpbml0aWFsU3RhdGUsXG4gICAgcmVkdWNlcnM6IHtcbiAgICAgICAgZmV0Y2hIb3VybHlXZWF0aGVyOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikgeyB9LFxuICAgICAgICBzZXRIb3VybHlXZWF0aGVyOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgICAgICAgc3RhdGUud2VhdGhlciA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgICB9LFxuICAgICAgICBzZXRIb3VybHlMb2FkaW5nU3RhdHVzOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgICAgICAgc3RhdGUubG9hZGluZ1N0YXR1cyA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgICB9LFxuICAgIH0sXG59KTtcbmV4cG9ydCB2YXIgZmV0Y2hIb3VybHlXZWF0aGVyID0gKF9hID0gaG91cmx5V2VhdGhlclNsaWNlLmFjdGlvbnMsIF9hLmZldGNoSG91cmx5V2VhdGhlciksIHNldEhvdXJseVdlYXRoZXIgPSBfYS5zZXRIb3VybHlXZWF0aGVyLCBzZXRIb3VybHlMb2FkaW5nU3RhdHVzID0gX2Euc2V0SG91cmx5TG9hZGluZ1N0YXR1cztcbmV4cG9ydCBkZWZhdWx0IGhvdXJseVdlYXRoZXJTbGljZS5yZWR1Y2VyO1xuIiwidmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCB7IGNhbGwsIHB1dCwgdGFrZUV2ZXJ5IH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcbmltcG9ydCB7IExPQURJTkdfU1RBVFVTIH0gZnJvbSAnQGNvbnN0YW50cyc7XG5pbXBvcnQgeyBvcGVuTWV0ZW9BcGkgfSBmcm9tICdAYXBpJztcbmltcG9ydCB7IGZldGNoSG91cmx5V2VhdGhlciwgc2V0SG91cmx5TG9hZGluZ1N0YXR1cywgc2V0SG91cmx5V2VhdGhlciB9IGZyb20gJy4uL3NsaWNlcy9ob3VybHl3ZWF0aGVyLnNsaWNlJztcbmZ1bmN0aW9uIGZldGNoSG91cmx5V2VhdGhlcldvcmtlcihhY3Rpb24pIHtcbiAgICB2YXIgZGF0YSwgZXJyb3JfMTtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgcHV0KHNldEhvdXJseUxvYWRpbmdTdGF0dXMoTE9BRElOR19TVEFUVVMuTE9BRElORykpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMiwgNiwgLCA4XSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY2FsbChvcGVuTWV0ZW9BcGkuZ2V0SG91cmx5V2VhdGhlciwgYWN0aW9uLnBheWxvYWQubG9uLCBhY3Rpb24ucGF5bG9hZC5sYXQpXTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBkYXRhID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHB1dChzZXRIb3VybHlXZWF0aGVyKGRhdGEpKV07XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHB1dChzZXRIb3VybHlMb2FkaW5nU3RhdHVzKExPQURJTkdfU1RBVFVTLklETEUpKV07XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIGVycm9yXzEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcHV0KHNldEhvdXJseUxvYWRpbmdTdGF0dXMoTE9BRElOR19TVEFUVVMuRVJST1IpKV07XG4gICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xuICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBob3VybHlXZWF0aGVyV2F0Y2hlcigpIHtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGFrZUV2ZXJ5KGZldGNoSG91cmx5V2VhdGhlci50eXBlLCBmZXRjaEhvdXJseVdlYXRoZXJXb3JrZXIpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCJ2YXIgX2E7XG5pbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnO1xuaW1wb3J0IHsgTE9BRElOR19TVEFUVVMgfSBmcm9tICdAY29uc3RhbnRzJztcbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gICAgd2VhdGhlcjogbnVsbCxcbiAgICBsb2FkaW5nU3RhdHVzOiBMT0FESU5HX1NUQVRVUy5JRExFLFxufTtcbmV4cG9ydCB2YXIgZGFpbHlXZWF0aGVyU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gICAgbmFtZTogJ2RhaWx5V2VhdGhlcicsXG4gICAgaW5pdGlhbFN0YXRlOiBpbml0aWFsU3RhdGUsXG4gICAgcmVkdWNlcnM6IHtcbiAgICAgICAgZmV0Y2hEYWlseVdlYXRoZXI6IGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7IH0sXG4gICAgICAgIHNldERhaWx5V2VhdGhlcjogZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgICAgICAgIHN0YXRlLndlYXRoZXIgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0RGFpbHlMb2FkaW5nU3RhdHVzOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgICAgICAgc3RhdGUubG9hZGluZ1N0YXR1cyA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgICB9LFxuICAgIH0sXG59KTtcbmV4cG9ydCB2YXIgZmV0Y2hEYWlseVdlYXRoZXIgPSAoX2EgPSBkYWlseVdlYXRoZXJTbGljZS5hY3Rpb25zLCBfYS5mZXRjaERhaWx5V2VhdGhlciksIHNldERhaWx5V2VhdGhlciA9IF9hLnNldERhaWx5V2VhdGhlciwgc2V0RGFpbHlMb2FkaW5nU3RhdHVzID0gX2Euc2V0RGFpbHlMb2FkaW5nU3RhdHVzO1xuZXhwb3J0IGRlZmF1bHQgZGFpbHlXZWF0aGVyU2xpY2UucmVkdWNlcjtcbiIsInZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5pbXBvcnQgeyBjYWxsLCBwdXQsIHRha2VFdmVyeSB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5pbXBvcnQgeyBMT0FESU5HX1NUQVRVUyB9IGZyb20gJ0Bjb25zdGFudHMnO1xuaW1wb3J0IHsgb3Blbk1ldGVvQXBpIH0gZnJvbSAnQGFwaSc7XG5pbXBvcnQgeyBmZXRjaERhaWx5V2VhdGhlciwgc2V0RGFpbHlMb2FkaW5nU3RhdHVzLCBzZXREYWlseVdlYXRoZXIgfSBmcm9tICcuLi9zbGljZXMvZGFpbHl3ZWF0aGVyLnNsaWNlJztcbmZ1bmN0aW9uIGZldGNoRGFpbHlXZWF0aGVyV29ya2VyKGFjdGlvbikge1xuICAgIHZhciBkYXRhLCBlcnJvcl8xO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBwdXQoc2V0RGFpbHlMb2FkaW5nU3RhdHVzKExPQURJTkdfU1RBVFVTLkxPQURJTkcpKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzIsIDYsICwgOF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNhbGwob3Blbk1ldGVvQXBpLmdldERhaWx5V2VhdGhlciwgYWN0aW9uLnBheWxvYWQubG9uLCBhY3Rpb24ucGF5bG9hZC5sYXQpXTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBkYXRhID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHB1dChzZXREYWlseVdlYXRoZXIoZGF0YSkpXTtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcHV0KHNldERhaWx5TG9hZGluZ1N0YXR1cyhMT0FESU5HX1NUQVRVUy5JRExFKSldO1xuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA4XTtcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHB1dChzZXREYWlseUxvYWRpbmdTdGF0dXMoTE9BRElOR19TVEFUVVMuRVJST1IpKV07XG4gICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xuICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkYWlseVdlYXRoZXJXYXRjaGVyKCkge1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0YWtlRXZlcnkoZmV0Y2hEYWlseVdlYXRoZXIudHlwZSwgZmV0Y2hEYWlseVdlYXRoZXJXb3JrZXIpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCJ2YXIgX2E7XG5pbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnO1xuaW1wb3J0IHsgTE9BRElOR19TVEFUVVMgfSBmcm9tICdAY29uc3RhbnRzJztcbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gICAgY3VycmVudENpdHk6IG51bGwsXG4gICAgY2l0eVNlYXJjaFJlc3VsdDogbnVsbCxcbiAgICBzZWFyY2hDaXRpZXNMb2FkaW5nU3RhdHVzOiBMT0FESU5HX1NUQVRVUy5JRExFLFxufTtcbmV4cG9ydCB2YXIgY2l0eVNsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICAgIG5hbWU6ICdjaXR5JyxcbiAgICBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgICBzZXRDdXJyZW50Q2l0eTogZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgICAgICAgIHN0YXRlLmN1cnJlbnRDaXR5ID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFNlYXJjaENpdGllc0xvYWRpbmdTdGF0dXM6IGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICAgICAgICBzdGF0ZS5zZWFyY2hDaXRpZXNMb2FkaW5nU3RhdHVzID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldENpdGllc1NlYXJjaFJlc3VsdDogZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgICAgICAgIHN0YXRlLmNpdHlTZWFyY2hSZXN1bHQgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgfSxcbiAgICAgICAgZmV0Y2hDaXR5QnlOYW1lOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikgeyB9LFxuICAgIH0sXG59KTtcbmV4cG9ydCB2YXIgc2V0Q3VycmVudENpdHkgPSAoX2EgPSBjaXR5U2xpY2UuYWN0aW9ucywgX2Euc2V0Q3VycmVudENpdHkpLCBzZXRTZWFyY2hDaXRpZXNMb2FkaW5nU3RhdHVzID0gX2Euc2V0U2VhcmNoQ2l0aWVzTG9hZGluZ1N0YXR1cywgc2V0Q2l0aWVzU2VhcmNoUmVzdWx0ID0gX2Euc2V0Q2l0aWVzU2VhcmNoUmVzdWx0LCBmZXRjaENpdHlCeU5hbWUgPSBfYS5mZXRjaENpdHlCeU5hbWU7XG5leHBvcnQgZGVmYXVsdCBjaXR5U2xpY2UucmVkdWNlcjtcbiIsInZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5pbXBvcnQgeyBjYWxsLCBwdXQsIHRha2VMYXRlc3QgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuaW1wb3J0IHsgTE9BRElOR19TVEFUVVMgfSBmcm9tICdAY29uc3RhbnRzJztcbmltcG9ydCB7IG9wZW5NZXRlb0FwaSB9IGZyb20gJ0BhcGknO1xuaW1wb3J0IHsgZmV0Y2hDaXR5QnlOYW1lLCBzZXRDaXRpZXNTZWFyY2hSZXN1bHQsIHNldFNlYXJjaENpdGllc0xvYWRpbmdTdGF0dXMgfSBmcm9tICcuLi9zbGljZXMvY2l0eS5zbGljZSc7XG5mdW5jdGlvbiBmZXRjaENpdHlCeU5hbWVXb3JrZXIoYWN0aW9uKSB7XG4gICAgdmFyIGRhdGEsIGVycm9yXzE7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHB1dChzZXRTZWFyY2hDaXRpZXNMb2FkaW5nU3RhdHVzKExPQURJTkdfU1RBVFVTLkxPQURJTkcpKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzIsIDYsICwgOF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNhbGwob3Blbk1ldGVvQXBpLnNlYXJjaENpdHlCeU5hbWUsIGFjdGlvbi5wYXlsb2FkKV07XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgZGF0YSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBwdXQoc2V0Q2l0aWVzU2VhcmNoUmVzdWx0KGRhdGEpKV07XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHB1dChzZXRTZWFyY2hDaXRpZXNMb2FkaW5nU3RhdHVzKExPQURJTkdfU1RBVFVTLklETEUpKV07XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIGVycm9yXzEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcHV0KHNldFNlYXJjaENpdGllc0xvYWRpbmdTdGF0dXMoTE9BRElOR19TVEFUVVMuRVJST1IpKV07XG4gICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xuICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaXR5V2F0Y2hlcigpIHtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGFrZUxhdGVzdChmZXRjaENpdHlCeU5hbWUudHlwZSwgZmV0Y2hDaXR5QnlOYW1lV29ya2VyKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIiwidmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCB7IGFsbCB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5pbXBvcnQgeyB0b2RheVdlYXRoZXJXYXRjaGVyIH0gZnJvbSAnLi90b2RheXdlYXRoZXIuc2FnYSc7XG5pbXBvcnQgeyBob3VybHlXZWF0aGVyV2F0Y2hlciB9IGZyb20gJy4vaG91cmx5d2VhdGhlci5zYWdhJztcbmltcG9ydCB7IGRhaWx5V2VhdGhlcldhdGNoZXIgfSBmcm9tICcuL2RhaWx5d2VhdGhlci5zYWdhJztcbmltcG9ydCB7IGNpdHlXYXRjaGVyIH0gZnJvbSAnLi9jaXR5LnNhZ2EnO1xuZXhwb3J0IGZ1bmN0aW9uIHJvb3RTYWdhKCkge1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBhbGwoW3RvZGF5V2VhdGhlcldhdGNoZXIoKSwgaG91cmx5V2VhdGhlcldhdGNoZXIoKSwgZGFpbHlXZWF0aGVyV2F0Y2hlcigpLCBjaXR5V2F0Y2hlcigpXSldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICAgIGxvY2F0aW9uOiBudWxsLFxufTtcbnZhciBsb2NhdGlvblNsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICAgIG5hbWU6ICdsb2NhdGlvbicsXG4gICAgaW5pdGlhbFN0YXRlOiBpbml0aWFsU3RhdGUsXG4gICAgcmVkdWNlcnM6IHtcbiAgICAgICAgc2V0TG9jYXRpb246IGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICAgICAgICBzdGF0ZS5sb2NhdGlvbiA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgICB9LFxuICAgIH0sXG59KTtcbmV4cG9ydCB2YXIgc2V0TG9jYXRpb24gPSBsb2NhdGlvblNsaWNlLmFjdGlvbnMuc2V0TG9jYXRpb247XG5leHBvcnQgZGVmYXVsdCBsb2NhdGlvblNsaWNlLnJlZHVjZXI7XG4iLCJpbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnO1xudmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICBmb3JlY2FzdFdlYXRoZXJUeXBlOiAnZGFpbHknLFxufTtcbnZhciBmb3JlY2FzdFdlYXRoZXJTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgICBuYW1lOiAnZm9yZWNhc3RXZWF0aGVyJyxcbiAgICBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgICBzZXRGb3JlY2FzdFdlYXRoZXJUeXBlOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgICAgICAgc3RhdGUuZm9yZWNhc3RXZWF0aGVyVHlwZSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgICB9LFxuICAgIH0sXG59KTtcbmV4cG9ydCB2YXIgc2V0Rm9yZWNhc3RXZWF0aGVyVHlwZSA9IGZvcmVjYXN0V2VhdGhlclNsaWNlLmFjdGlvbnMuc2V0Rm9yZWNhc3RXZWF0aGVyVHlwZTtcbmV4cG9ydCBkZWZhdWx0IGZvcmVjYXN0V2VhdGhlclNsaWNlLnJlZHVjZXI7XG4iLCJpbXBvcnQgeyBGTFVTSCwgUEFVU0UsIFBFUlNJU1QsIHBlcnNpc3RSZWR1Y2VyLCBwZXJzaXN0U3RvcmUsIFBVUkdFLCBSRUdJU1RFUiwgUkVIWURSQVRFIH0gZnJvbSAncmVkdXgtcGVyc2lzdCc7XG5pbXBvcnQgc3RvcmFnZSBmcm9tICdyZWR1eC1wZXJzaXN0L2xpYi9zdG9yYWdlJztcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB7IGdldFBlcnNpc3RDb25maWcgfSBmcm9tICdyZWR1eC1kZWVwLXBlcnNpc3QnO1xuaW1wb3J0IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlIGZyb20gJ3JlZHV4LXNhZ2EnO1xuaW1wb3J0IHsgcm9vdFNhZ2EgfSBmcm9tICcuL3NhZ2FzJztcbmltcG9ydCB0b2RheVdlYXRoZXJSZWR1Y2VyIGZyb20gJy4vc2xpY2VzL3RvZGF5d2VhdGhlci5zbGljZSc7XG5pbXBvcnQgaG91cmx5V2VhdGhlclJlZHVjZXIgZnJvbSAnLi9zbGljZXMvaG91cmx5d2VhdGhlci5zbGljZSc7XG5pbXBvcnQgZGFpbHlXZWF0aGVyUmVkdWNlciBmcm9tICcuL3NsaWNlcy9kYWlseXdlYXRoZXIuc2xpY2UnO1xuaW1wb3J0IGNpdHlSZWR1Y2VyIGZyb20gJy4vc2xpY2VzL2NpdHkuc2xpY2UnO1xuaW1wb3J0IGxvY2F0aW9uUmVkdWNlciBmcm9tICcuL3NsaWNlcy9sb2NhdGlvbi5zbGljZSc7XG5pbXBvcnQgZm9yZWNhc3RXZWF0aGVyUmVkdWNlciBmcm9tICcuL3NsaWNlcy9mb3JlY2FzdHdlYXRoZXIuc2xpY2UnO1xudmFyIHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHtcbiAgICB0b2RheVdlYXRoZXI6IHRvZGF5V2VhdGhlclJlZHVjZXIsXG4gICAgaG91cmx5V2VhdGhlcjogaG91cmx5V2VhdGhlclJlZHVjZXIsXG4gICAgZGFpbHlXZWF0aGVyOiBkYWlseVdlYXRoZXJSZWR1Y2VyLFxuICAgIGZvcmVjYXN0V2VhdGhlcjogZm9yZWNhc3RXZWF0aGVyUmVkdWNlcixcbiAgICBjaXR5OiBjaXR5UmVkdWNlcixcbiAgICBsb2NhdGlvbjogbG9jYXRpb25SZWR1Y2VyLFxufSk7XG52YXIgcGVyc2lzdENvbmZpZyA9IGdldFBlcnNpc3RDb25maWcoe1xuICAgIGtleTogJ3Jvb3QnLFxuICAgIHN0b3JhZ2U6IHN0b3JhZ2UsXG4gICAgYmxhY2tsaXN0OiBbXSxcbiAgICByb290UmVkdWNlcjogcm9vdFJlZHVjZXIsXG59KTtcbnZhciBwZXJzaXN0ZWRSZWR1Y2VyID0gcGVyc2lzdFJlZHVjZXIocGVyc2lzdENvbmZpZywgcm9vdFJlZHVjZXIpO1xudmFyIHNhZ2FNaWRkbGV3YXJlID0gY3JlYXRlU2FnYU1pZGRsZXdhcmUoKTtcbmV4cG9ydCB2YXIgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XG4gICAgcmVkdWNlcjogcGVyc2lzdGVkUmVkdWNlcixcbiAgICBtaWRkbGV3YXJlOiBmdW5jdGlvbiAoZ2V0RGVmYXVsdE1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIGdldERlZmF1bHRNaWRkbGV3YXJlKHtcbiAgICAgICAgICAgIHNlcmlhbGl6YWJsZUNoZWNrOiB7XG4gICAgICAgICAgICAgICAgaWdub3JlZEFjdGlvbnM6IFtGTFVTSCwgUkVIWURSQVRFLCBQQVVTRSwgUEVSU0lTVCwgUFVSR0UsIFJFR0lTVEVSXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYWdhTWlkZGxld2FyZTogc2FnYU1pZGRsZXdhcmUsXG4gICAgICAgIH0pLmNvbmNhdChzYWdhTWlkZGxld2FyZSk7XG4gICAgfSxcbn0pO1xuc2FnYU1pZGRsZXdhcmUucnVuKHJvb3RTYWdhKTtcbmV4cG9ydCB2YXIgcGVyc2lzdG9yID0gcGVyc2lzdFN0b3JlKHN0b3JlKTtcbiIsInZhciBfX21ha2VUZW1wbGF0ZU9iamVjdCA9ICh0aGlzICYmIHRoaXMuX19tYWtlVGVtcGxhdGVPYmplY3QpIHx8IGZ1bmN0aW9uIChjb29rZWQsIHJhdykge1xuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gICAgcmV0dXJuIGNvb2tlZDtcbn07XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmV4cG9ydCB2YXIgQ2FsZW5kYXJXcmFwcGVyID0gc3R5bGVkLmRpdih0ZW1wbGF0ZU9iamVjdF8xIHx8ICh0ZW1wbGF0ZU9iamVjdF8xID0gX19tYWtlVGVtcGxhdGVPYmplY3QoW1wiXFxuXFx0Z3JpZC1hcmVhOiBjYWxlbmRhcjtcXG5cIl0sIFtcIlxcblxcdGdyaWQtYXJlYTogY2FsZW5kYXI7XFxuXCJdKSkpO1xuZXhwb3J0IHZhciBDYWxlbmRhckV2ZW50c1dyYXBwZXIgPSBzdHlsZWQuZGl2KHRlbXBsYXRlT2JqZWN0XzIgfHwgKHRlbXBsYXRlT2JqZWN0XzIgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbXCJcXG5cXHRtYXJnaW4tdG9wOiBcIiwgXCJweDtcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xcblxcdHJvdy1nYXA6IFwiLCBcInB4O1xcblwiXSwgW1wiXFxuXFx0bWFyZ2luLXRvcDogXCIsIFwicHg7XFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG5cXHRyb3ctZ2FwOiBcIiwgXCJweDtcXG5cIl0pKSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLm1hcmdpblswXTtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5nYXBzWzVdO1xufSk7XG52YXIgdGVtcGxhdGVPYmplY3RfMSwgdGVtcGxhdGVPYmplY3RfMjtcbiIsInZhciBfX21ha2VUZW1wbGF0ZU9iamVjdCA9ICh0aGlzICYmIHRoaXMuX19tYWtlVGVtcGxhdGVPYmplY3QpIHx8IGZ1bmN0aW9uIChjb29rZWQsIHJhdykge1xuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gICAgcmV0dXJuIGNvb2tlZDtcbn07XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmV4cG9ydCB2YXIgQ2FsZW5kYXJFdmVudFdyYXBwZXIgPSBzdHlsZWQuZGl2KHRlbXBsYXRlT2JqZWN0XzEgfHwgKHRlbXBsYXRlT2JqZWN0XzEgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbXCJcXG5cXHQvKiB3aWR0aDogXCIsIFwiJTsgKi9cXG5cXHRib3JkZXItcmFkaXVzOiBcIiwgXCJweDtcXG5cXHRwYWRkaW5nOiBcIiwgXCJweDtcXG5cXHRmb250LXNpemU6IFwiLCBcInB4O1xcblxcdGJhY2tncm91bmQtY29sb3I6IFwiLCBcIjtcXG5cXHRjb2xvcjogXCIsIFwiO1xcblwiXSwgW1wiXFxuXFx0Lyogd2lkdGg6IFwiLCBcIiU7ICovXFxuXFx0Ym9yZGVyLXJhZGl1czogXCIsIFwicHg7XFxuXFx0cGFkZGluZzogXCIsIFwicHg7XFxuXFx0Zm9udC1zaXplOiBcIiwgXCJweDtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiBcIiwgXCI7XFxuXFx0Y29sb3I6IFwiLCBcIjtcXG5cIl0pKSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLndpZHRoWzJdO1xufSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmJvcmRlclJhZGl1c1sxXTtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5wYWRkaW5nWzRdO1xufSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmZvbnRTaXplWzZdO1xufSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmNvbG9ycy5ibHVlO1xufSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmNvbG9ycy53aGl0ZTtcbn0pO1xudmFyIHRlbXBsYXRlT2JqZWN0XzE7XG4iLCJ2YXIgX19tYWtlVGVtcGxhdGVPYmplY3QgPSAodGhpcyAmJiB0aGlzLl9fbWFrZVRlbXBsYXRlT2JqZWN0KSB8fCBmdW5jdGlvbiAoY29va2VkLCByYXcpIHtcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICAgIHJldHVybiBjb29rZWQ7XG59O1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5leHBvcnQgdmFyIENsb2NrVGV4dCA9IHN0eWxlZC5wKHRlbXBsYXRlT2JqZWN0XzEgfHwgKHRlbXBsYXRlT2JqZWN0XzEgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbXCJcXG5cXHRjb2xvcjogXCIsIFwiO1xcblxcdGZvbnQtc2l6ZTogXCIsIFwicHg7XFxuXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogXCIsIFwicHgpIHtcXG5cXHRcXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFx0fVxcblwiXSwgW1wiXFxuXFx0Y29sb3I6IFwiLCBcIjtcXG5cXHRmb250LXNpemU6IFwiLCBcInB4O1xcblxcblxcdEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IFwiLCBcInB4KSB7XFxuXFx0XFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblxcdH1cXG5cIl0pKSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmNvbG9ycy5ibGFjaztcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5mb250U2l6ZVs1XTtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5icmVha3BvaW50cy54bDtcbn0pO1xuZXhwb3J0IHZhciBDbG9ja1dyYXBwZXIgPSBzdHlsZWQuZGl2KHRlbXBsYXRlT2JqZWN0XzIgfHwgKHRlbXBsYXRlT2JqZWN0XzIgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbXCJcXG5cXHRncmlkLWFyZWE6IGNsb2NrO1xcblxcblxcdEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IFwiLCBcInB4KSB7XFxuXFx0XFx0anVzdGlmeS1zZWxmOiBjZW50ZXI7XFxuXFx0fVxcblwiXSwgW1wiXFxuXFx0Z3JpZC1hcmVhOiBjbG9jaztcXG5cXG5cXHRAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiBcIiwgXCJweCkge1xcblxcdFxcdGp1c3RpZnktc2VsZjogY2VudGVyO1xcblxcdH1cXG5cIl0pKSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmJyZWFrcG9pbnRzLnhsO1xufSk7XG52YXIgdGVtcGxhdGVPYmplY3RfMSwgdGVtcGxhdGVPYmplY3RfMjtcbiIsInZhciBfX21ha2VUZW1wbGF0ZU9iamVjdCA9ICh0aGlzICYmIHRoaXMuX19tYWtlVGVtcGxhdGVPYmplY3QpIHx8IGZ1bmN0aW9uIChjb29rZWQsIHJhdykge1xuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gICAgcmV0dXJuIGNvb2tlZDtcbn07XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmV4cG9ydCB2YXIgRm9yZWNhc3REYWlseVdlYXRoZXJUZXh0ID0gc3R5bGVkLnAodGVtcGxhdGVPYmplY3RfMSB8fCAodGVtcGxhdGVPYmplY3RfMSA9IF9fbWFrZVRlbXBsYXRlT2JqZWN0KFtcIlxcblxcdGZvbnQtc2l6ZTogXCIsIFwicHg7XFxuXFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblwiXSwgW1wiXFxuXFx0Zm9udC1zaXplOiBcIiwgXCJweDtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXCJdKSksIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5mb250U2l6ZVsyXTtcbn0pO1xudmFyIHRlbXBsYXRlT2JqZWN0XzE7XG4iLCJ2YXIgX19tYWtlVGVtcGxhdGVPYmplY3QgPSAodGhpcyAmJiB0aGlzLl9fbWFrZVRlbXBsYXRlT2JqZWN0KSB8fCBmdW5jdGlvbiAoY29va2VkLCByYXcpIHtcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICAgIHJldHVybiBjb29rZWQ7XG59O1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5leHBvcnQgdmFyIEZvcmVjYXN0SG91cmx5V2VhdGhlclRpdGxlID0gc3R5bGVkLnAodGVtcGxhdGVPYmplY3RfMSB8fCAodGVtcGxhdGVPYmplY3RfMSA9IF9fbWFrZVRlbXBsYXRlT2JqZWN0KFtcIlxcblxcdGZvbnQtc2l6ZTogXCIsIFwicHg7XFxuXFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblwiXSwgW1wiXFxuXFx0Zm9udC1zaXplOiBcIiwgXCJweDtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXCJdKSksIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5mb250U2l6ZVsyXTtcbn0pO1xuZXhwb3J0IHZhciBGb3JlY2FzdEhvdXJseVdlYXRoZXJUZXh0ID0gc3R5bGVkLnAodGVtcGxhdGVPYmplY3RfMiB8fCAodGVtcGxhdGVPYmplY3RfMiA9IF9fbWFrZVRlbXBsYXRlT2JqZWN0KFtcIlxcblxcdGZvbnQtc2l6ZTogXCIsIFwicHg7XFxuXFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblwiXSwgW1wiXFxuXFx0Zm9udC1zaXplOiBcIiwgXCJweDtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXCJdKSksIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5mb250U2l6ZVswXTtcbn0pO1xudmFyIHRlbXBsYXRlT2JqZWN0XzEsIHRlbXBsYXRlT2JqZWN0XzI7XG4iLCJ2YXIgX19tYWtlVGVtcGxhdGVPYmplY3QgPSAodGhpcyAmJiB0aGlzLl9fbWFrZVRlbXBsYXRlT2JqZWN0KSB8fCBmdW5jdGlvbiAoY29va2VkLCByYXcpIHtcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICAgIHJldHVybiBjb29rZWQ7XG59O1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5leHBvcnQgdmFyIEZvcmVjYXN0V2VhdGhlcldyYXBwZXIgPSBzdHlsZWQuZGl2KHRlbXBsYXRlT2JqZWN0XzEgfHwgKHRlbXBsYXRlT2JqZWN0XzEgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbXCJcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDcsIDFmcik7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnI7XFxuXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogXCIsIFwicHgpIHtcXG5cXHRcXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KDk1cHgsIDFmcikpO1xcblxcdFxcdHJvdy1nYXA6IFwiLCBcInB4O1xcblxcdH1cXG5cIl0sIFtcIlxcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNywgMWZyKTtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IDFmcjtcXG5cXG5cXHRAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiBcIiwgXCJweCkge1xcblxcdFxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoOTVweCwgMWZyKSk7XFxuXFx0XFx0cm93LWdhcDogXCIsIFwicHg7XFxuXFx0fVxcblwiXSkpLCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuYnJlYWtwb2ludHMueGw7XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuZ2Fwc1swXTtcbn0pO1xudmFyIHRlbXBsYXRlT2JqZWN0XzE7XG4iLCJ2YXIgX19tYWtlVGVtcGxhdGVPYmplY3QgPSAodGhpcyAmJiB0aGlzLl9fbWFrZVRlbXBsYXRlT2JqZWN0KSB8fCBmdW5jdGlvbiAoY29va2VkLCByYXcpIHtcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICAgIHJldHVybiBjb29rZWQ7XG59O1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5leHBvcnQgdmFyIEZvcmVjYXN0V2VhdGhlckl0ZW1XcmFwcGVyID0gc3R5bGVkLmRpdih0ZW1wbGF0ZU9iamVjdF8xIHx8ICh0ZW1wbGF0ZU9iamVjdF8xID0gX19tYWtlVGVtcGxhdGVPYmplY3QoW1wiXFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IDFmciA4MnB4IHJlcGVhdChhdXRvLCAxZnIpO1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXCJdLCBbXCJcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xcblxcdGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDgycHggcmVwZWF0KGF1dG8sIDFmcik7XFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cIl0pKSk7XG5leHBvcnQgdmFyIEZvcmVjYXN0V2VhdGhlckl0ZW1UZXh0ID0gc3R5bGVkLnAodGVtcGxhdGVPYmplY3RfMiB8fCAodGVtcGxhdGVPYmplY3RfMiA9IF9fbWFrZVRlbXBsYXRlT2JqZWN0KFtcIlxcblxcdGZvbnQtc2l6ZTogXCIsIFwicHg7XFxuXFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblwiXSwgW1wiXFxuXFx0Zm9udC1zaXplOiBcIiwgXCJweDtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXCJdKSksIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5mb250U2l6ZVsyXTtcbn0pO1xuZXhwb3J0IHZhciBGb3JlY2FzdFdlYXRoZXJJdGVtSW1hZ2VDb250YWluZXIgPSBzdHlsZWQuZGl2KHRlbXBsYXRlT2JqZWN0XzMgfHwgKHRlbXBsYXRlT2JqZWN0XzMgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbXCJcXG5cXHRqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG5cIl0sIFtcIlxcblxcdGp1c3RpZnktc2VsZjogY2VudGVyO1xcblwiXSkpKTtcbnZhciB0ZW1wbGF0ZU9iamVjdF8xLCB0ZW1wbGF0ZU9iamVjdF8yLCB0ZW1wbGF0ZU9iamVjdF8zO1xuIiwidmFyIF9fbWFrZVRlbXBsYXRlT2JqZWN0ID0gKHRoaXMgJiYgdGhpcy5fX21ha2VUZW1wbGF0ZU9iamVjdCkgfHwgZnVuY3Rpb24gKGNvb2tlZCwgcmF3KSB7XG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgICByZXR1cm4gY29va2VkO1xufTtcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuZXhwb3J0IHZhciBGb3JlY2FzdFdlYXRoZXJTd2l0Y2hXcmFwcGVyID0gc3R5bGVkLmRpdih0ZW1wbGF0ZU9iamVjdF8xIHx8ICh0ZW1wbGF0ZU9iamVjdF8xID0gX19tYWtlVGVtcGxhdGVPYmplY3QoW1wiXFxuXFx0Z3JpZC1hcmVhOiBmb3JlY2FzdHN3aXRjaDtcXG5cXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IFwiLCBcInB4O1xcblxcdGNvbHVtbi1nYXA6IFwiLCBcInB4O1xcblwiXSwgW1wiXFxuXFx0Z3JpZC1hcmVhOiBmb3JlY2FzdHN3aXRjaDtcXG5cXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IFwiLCBcInB4O1xcblxcdGNvbHVtbi1nYXA6IFwiLCBcInB4O1xcblwiXSkpLCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuaGVpZ2h0WzBdO1xufSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmdhcHNbMF07XG59KTtcbnZhciB0ZW1wbGF0ZU9iamVjdF8xO1xuIiwidmFyIF9fbWFrZVRlbXBsYXRlT2JqZWN0ID0gKHRoaXMgJiYgdGhpcy5fX21ha2VUZW1wbGF0ZU9iamVjdCkgfHwgZnVuY3Rpb24gKGNvb2tlZCwgcmF3KSB7XG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgICByZXR1cm4gY29va2VkO1xufTtcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuZXhwb3J0IHZhciBMYXlvdXQgPSBzdHlsZWQuZGl2KHRlbXBsYXRlT2JqZWN0XzEgfHwgKHRlbXBsYXRlT2JqZWN0XzEgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbXCJcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtYXJlYXM6ICcuIC4gLicgJy4gbWFpbiAuJyAnLiAuIC4nO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byBtaW5tYXgoMCwgXCIsIFwicHgpIGF1dG87XFxuXFx0Z3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIGF1dG8gYXV0bztcXG5cXG5cXHRiYWNrZ3JvdW5kOiB1cmwoXCIsIFwiKSByZXBlYXQ7XFxuXFx0YmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG5cXG5cXHR3aWR0aDogXCIsIFwidnc7XFxuXFx0bWluLWhlaWdodDogXCIsIFwidmg7XFxuXCJdLCBbXCJcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtYXJlYXM6ICcuIC4gLicgJy4gbWFpbiAuJyAnLiAuIC4nO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byBtaW5tYXgoMCwgXCIsIFwicHgpIGF1dG87XFxuXFx0Z3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIGF1dG8gYXV0bztcXG5cXG5cXHRiYWNrZ3JvdW5kOiB1cmwoXCIsIFwiKSByZXBlYXQ7XFxuXFx0YmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG5cXG5cXHR3aWR0aDogXCIsIFwidnc7XFxuXFx0bWluLWhlaWdodDogXCIsIFwidmg7XFxuXCJdKSksIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS53aWR0aFsxXTtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBiYWNrZ3JvdW5kID0gX2EuYmFja2dyb3VuZDtcbiAgICByZXR1cm4gYmFja2dyb3VuZDtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS53aWR0aFsyXTtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5oZWlnaHRbMl07XG59KTtcbmV4cG9ydCB2YXIgQ29udGVudFdyYXBwZXIgPSBzdHlsZWQubWFpbih0ZW1wbGF0ZU9iamVjdF8yIHx8ICh0ZW1wbGF0ZU9iamVjdF8yID0gX19tYWtlVGVtcGxhdGVPYmplY3QoW1wiXFxuXFx0Z3JpZC1hcmVhOiBtYWluO1xcblxcdHJvdy1nYXA6IFwiLCBcInB4O1xcblxcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1hcmVhczpcXG5cXHRcXHQnY2xvY2sgc2VhcmNoJ1xcblxcdFxcdCdjYWxlbmRhciAuJ1xcblxcdFxcdCdjYWxlbmRhciAuJ1xcblxcdFxcdCd0b2RheXN3aXRjaGVyIGZvcmVjYXN0c3dpdGNoJ1xcblxcdFxcdCd3ZWF0aGVyIHdlYXRoZXInO1xcblxcblxcdGJhY2tncm91bmQtY29sb3I6IFwiLCBcIjtcXG5cXHRiYWNrZHJvcC1maWx0ZXI6IGJsdXIoXCIsIFwicHgpO1xcblxcblxcdHBhZGRpbmc6IFwiLCBcInB4O1xcblxcblxcdEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IFwiLCBcInB4KSB7XFxuXFx0XFx0cGFkZGluZzogXCIsIFwicHg7XFxuXFx0XFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XFxuXFx0XFx0Z3JpZC10ZW1wbGF0ZS1hcmVhczpcXG5cXHRcXHRcXHQnY2xvY2snXFxuXFx0XFx0XFx0J3NlYXJjaCdcXG5cXHRcXHRcXHQnY2FsZW5kYXInXFxuXFx0XFx0XFx0J2ZvcmVjYXN0c3dpdGNoJ1xcblxcdFxcdFxcdCd3ZWF0aGVyJztcXG5cXHR9XFxuXCJdLCBbXCJcXG5cXHRncmlkLWFyZWE6IG1haW47XFxuXFx0cm93LWdhcDogXCIsIFwicHg7XFxuXFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLWFyZWFzOlxcblxcdFxcdCdjbG9jayBzZWFyY2gnXFxuXFx0XFx0J2NhbGVuZGFyIC4nXFxuXFx0XFx0J2NhbGVuZGFyIC4nXFxuXFx0XFx0J3RvZGF5c3dpdGNoZXIgZm9yZWNhc3Rzd2l0Y2gnXFxuXFx0XFx0J3dlYXRoZXIgd2VhdGhlcic7XFxuXFxuXFx0YmFja2dyb3VuZC1jb2xvcjogXCIsIFwiO1xcblxcdGJhY2tkcm9wLWZpbHRlcjogYmx1cihcIiwgXCJweCk7XFxuXFxuXFx0cGFkZGluZzogXCIsIFwicHg7XFxuXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogXCIsIFwicHgpIHtcXG5cXHRcXHRwYWRkaW5nOiBcIiwgXCJweDtcXG5cXHRcXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG5cXHRcXHRncmlkLXRlbXBsYXRlLWFyZWFzOlxcblxcdFxcdFxcdCdjbG9jaydcXG5cXHRcXHRcXHQnc2VhcmNoJ1xcblxcdFxcdFxcdCdjYWxlbmRhcidcXG5cXHRcXHRcXHQnZm9yZWNhc3Rzd2l0Y2gnXFxuXFx0XFx0XFx0J3dlYXRoZXInO1xcblxcdH1cXG5cIl0pKSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmdhcHNbNV07XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuY29sb3JzLnRyYW5zcGFyZW50V2hpdGU7XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuYmx1clswXTtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5wYWRkaW5nWzBdO1xufSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmJyZWFrcG9pbnRzLnhsO1xufSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLnBhZGRpbmdbM107XG59KTtcbmV4cG9ydCB2YXIgV2VhdGhlcldyYXBwZXIgPSBzdHlsZWQuZGl2KHRlbXBsYXRlT2JqZWN0XzMgfHwgKHRlbXBsYXRlT2JqZWN0XzMgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbXCJcXG5cXHRncmlkLWFyZWE6IHdlYXRoZXI7XFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heCgwcHgsIDIwMHB4KSAxZnI7XFxuXFxuXFx0YmFja2dyb3VuZC1jb2xvcjogXCIsIFwiO1xcblxcdGJvcmRlci1yYWRpdXM6IFwiLCBcInB4O1xcblxcdHBhZGRpbmc6IFwiLCBcInB4O1xcblxcblxcdGdyaWQtdGVtcGxhdGUtYXJlYXM6ICd0b2RheSBmb3JlY2FzdCc7XFxuXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogXCIsIFwicHgpIHtcXG5cXHRcXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG5cXHRcXHRyb3ctZ2FwOiBcIiwgXCJweDtcXG5cXHRcXHRncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG87XFxuXFx0XFx0Z3JpZC10ZW1wbGF0ZS1hcmVhczogJ3RvZGF5JyAnZm9yZWNhc3QnO1xcblxcdH1cXG5cIl0sIFtcIlxcblxcdGdyaWQtYXJlYTogd2VhdGhlcjtcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogbWlubWF4KDBweCwgMjAwcHgpIDFmcjtcXG5cXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiBcIiwgXCI7XFxuXFx0Ym9yZGVyLXJhZGl1czogXCIsIFwicHg7XFxuXFx0cGFkZGluZzogXCIsIFwicHg7XFxuXFxuXFx0Z3JpZC10ZW1wbGF0ZS1hcmVhczogJ3RvZGF5IGZvcmVjYXN0JztcXG5cXG5cXHRAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiBcIiwgXCJweCkge1xcblxcdFxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xcblxcdFxcdHJvdy1nYXA6IFwiLCBcInB4O1xcblxcdFxcdGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcXG5cXHRcXHRncmlkLXRlbXBsYXRlLWFyZWFzOiAndG9kYXknICdmb3JlY2FzdCc7XFxuXFx0fVxcblwiXSkpLCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuY29sb3JzLnRyYW5zcGFyZW50V2hpdGU7XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuYm9yZGVyUmFkaXVzWzFdO1xufSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLnBhZGRpbmdbM107XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuYnJlYWtwb2ludHMueGw7XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuZ2Fwc1sxXTtcbn0pO1xudmFyIHRlbXBsYXRlT2JqZWN0XzEsIHRlbXBsYXRlT2JqZWN0XzIsIHRlbXBsYXRlT2JqZWN0XzM7XG4iLCJ2YXIgX19tYWtlVGVtcGxhdGVPYmplY3QgPSAodGhpcyAmJiB0aGlzLl9fbWFrZVRlbXBsYXRlT2JqZWN0KSB8fCBmdW5jdGlvbiAoY29va2VkLCByYXcpIHtcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICAgIHJldHVybiBjb29rZWQ7XG59O1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5leHBvcnQgdmFyIFNlYXJjaENpdHlXcmFwcGVyID0gc3R5bGVkLmRpdih0ZW1wbGF0ZU9iamVjdF8xIHx8ICh0ZW1wbGF0ZU9iamVjdF8xID0gX19tYWtlVGVtcGxhdGVPYmplY3QoW1wiXFxuXFx0cG9zaXRpb246IHJlbGF0aXZlO1xcblxcdGdyaWQtYXJlYTogc2VhcmNoO1xcblwiXSwgW1wiXFxuXFx0cG9zaXRpb246IHJlbGF0aXZlO1xcblxcdGdyaWQtYXJlYTogc2VhcmNoO1xcblwiXSkpKTtcbmV4cG9ydCB2YXIgU2VhcmNoSW5wdXQgPSBzdHlsZWQuaW5wdXQodGVtcGxhdGVPYmplY3RfMiB8fCAodGVtcGxhdGVPYmplY3RfMiA9IF9fbWFrZVRlbXBsYXRlT2JqZWN0KFtcIlxcblxcdGhlaWdodDogXCIsIFwicHg7XFxuXFx0cGFkZGluZzogXCIsIFwicHg7XFxuXFxuXFx0Zm9udC1zaXplOiBcIiwgXCJweDtcXG5cXG5cXHRib3JkZXItcmFkaXVzOiBcIiwgXCJweDtcXG5cXG5cXHQmOmZvY3VzIHtcXG5cXHRcXHRvdXRsaW5lOiAxcHggc29saWQ7XFxuXFx0fVxcblxcblxcdHdpZHRoOiAxMDAlO1xcblxcblxcdHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XFxuXCJdLCBbXCJcXG5cXHRoZWlnaHQ6IFwiLCBcInB4O1xcblxcdHBhZGRpbmc6IFwiLCBcInB4O1xcblxcblxcdGZvbnQtc2l6ZTogXCIsIFwicHg7XFxuXFxuXFx0Ym9yZGVyLXJhZGl1czogXCIsIFwicHg7XFxuXFxuXFx0Jjpmb2N1cyB7XFxuXFx0XFx0b3V0bGluZTogMXB4IHNvbGlkO1xcblxcdH1cXG5cXG5cXHR3aWR0aDogMTAwJTtcXG5cXG5cXHR0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xcblwiXSkpLCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuaGVpZ2h0WzNdO1xufSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLnBhZGRpbmdbMl07XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuZm9udFNpemVbM107XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuYm9yZGVyUmFkaXVzWzBdO1xufSk7XG52YXIgdGVtcGxhdGVPYmplY3RfMSwgdGVtcGxhdGVPYmplY3RfMjtcbiIsInZhciBfX21ha2VUZW1wbGF0ZU9iamVjdCA9ICh0aGlzICYmIHRoaXMuX19tYWtlVGVtcGxhdGVPYmplY3QpIHx8IGZ1bmN0aW9uIChjb29rZWQsIHJhdykge1xuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gICAgcmV0dXJuIGNvb2tlZDtcbn07XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmV4cG9ydCB2YXIgU2VhcmNoQ2l0eUxpc3RXcmFwcGVyID0gc3R5bGVkLmRpdih0ZW1wbGF0ZU9iamVjdF8xIHx8ICh0ZW1wbGF0ZU9iamVjdF8xID0gX19tYWtlVGVtcGxhdGVPYmplY3QoW1wiXFxuXFx0YmFja2dyb3VuZC1jb2xvcjogXCIsIFwiO1xcblxcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMWZyLCBhdXRvKTtcXG5cXG5cXHR3aWR0aDogXCIsIFwiJTtcXG5cXHRsZWZ0OiAwO1xcblxcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHR6LWluZGV4OiAxO1xcblxcdG1heC1oZWlnaHQ6IFwiLCBcInB4O1xcblxcdG92ZXJmbG93LXk6IGF1dG87XFxuXCJdLCBbXCJcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiBcIiwgXCI7XFxuXFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxZnIsIGF1dG8pO1xcblxcblxcdHdpZHRoOiBcIiwgXCIlO1xcblxcdGxlZnQ6IDA7XFxuXFxuXFx0cG9zaXRpb246IGFic29sdXRlO1xcblxcdHotaW5kZXg6IDE7XFxuXFx0bWF4LWhlaWdodDogXCIsIFwicHg7XFxuXFx0b3ZlcmZsb3cteTogYXV0bztcXG5cIl0pKSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmNvbG9ycy53aGl0ZTtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS53aWR0aFsyXTtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5oZWlnaHRbNF07XG59KTtcbmV4cG9ydCB2YXIgU2VhcmNoQ2l0eUxpc3RJdGVtV3JhcHBlciA9IHN0eWxlZC5kaXYodGVtcGxhdGVPYmplY3RfMiB8fCAodGVtcGxhdGVPYmplY3RfMiA9IF9fbWFrZVRlbXBsYXRlT2JqZWN0KFtcIlxcblxcdGhlaWdodDogXCIsIFwicHg7XFxuXFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIFwiLCBcIjtcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIGF1dG87XFxuXFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXHRwYWRkaW5nOiBcIiwgXCJweDtcXG5cIl0sIFtcIlxcblxcdGhlaWdodDogXCIsIFwicHg7XFxuXFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIFwiLCBcIjtcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIGF1dG87XFxuXFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXHRwYWRkaW5nOiBcIiwgXCJweDtcXG5cIl0pKSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWU7XG4gICAgcmV0dXJuIHRoZW1lLmhlaWdodFs1XTtcbn0sIGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciB0aGVtZSA9IF9hLnRoZW1lO1xuICAgIHJldHVybiB0aGVtZS5jb2xvcnMuYmxhY2s7XG59LCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUucGFkZGluZ1szXTtcbn0pO1xudmFyIHRlbXBsYXRlT2JqZWN0XzEsIHRlbXBsYXRlT2JqZWN0XzI7XG4iLCJ2YXIgX19tYWtlVGVtcGxhdGVPYmplY3QgPSAodGhpcyAmJiB0aGlzLl9fbWFrZVRlbXBsYXRlT2JqZWN0KSB8fCBmdW5jdGlvbiAoY29va2VkLCByYXcpIHtcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICAgIHJldHVybiBjb29rZWQ7XG59O1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5leHBvcnQgdmFyIFNwaW5uZXJJbWFnZSA9IHN0eWxlZC5pbWcodGVtcGxhdGVPYmplY3RfMSB8fCAodGVtcGxhdGVPYmplY3RfMSA9IF9fbWFrZVRlbXBsYXRlT2JqZWN0KFtcIlxcblxcdGFsaWduLXNlbGY6IGNlbnRlcjtcXG5cXHRqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG5cXG5cXHR3aWR0aDogXCIsIFwicHg7XFxuXFx0aGVpZ2h0OiBcIiwgXCJweDtcXG5cIl0sIFtcIlxcblxcdGFsaWduLXNlbGY6IGNlbnRlcjtcXG5cXHRqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG5cXG5cXHR3aWR0aDogXCIsIFwicHg7XFxuXFx0aGVpZ2h0OiBcIiwgXCJweDtcXG5cIl0pKSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHNpemUgPSBfYS5zaXplO1xuICAgIHJldHVybiBzaXplO1xufSwgZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHNpemUgPSBfYS5zaXplO1xuICAgIHJldHVybiBzaXplO1xufSk7XG5leHBvcnQgdmFyIFNwaW5uZXJXcmFwcGVyID0gc3R5bGVkLmRpdih0ZW1wbGF0ZU9iamVjdF8yIHx8ICh0ZW1wbGF0ZU9iamVjdF8yID0gX19tYWtlVGVtcGxhdGVPYmplY3QoW1wiXFxuXFx0d2lkdGg6IDEwMCU7XFxuXFx0aGVpZ2h0OiAxMDAlO1xcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnI7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG5cIl0sIFtcIlxcblxcdHdpZHRoOiAxMDAlO1xcblxcdGhlaWdodDogMTAwJTtcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtcm93czogMWZyO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXCJdKSkpO1xudmFyIHRlbXBsYXRlT2JqZWN0XzEsIHRlbXBsYXRlT2JqZWN0XzI7XG4iLCJ2YXIgX19tYWtlVGVtcGxhdGVPYmplY3QgPSAodGhpcyAmJiB0aGlzLl9fbWFrZVRlbXBsYXRlT2JqZWN0KSB8fCBmdW5jdGlvbiAoY29va2VkLCByYXcpIHtcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICAgIHJldHVybiBjb29rZWQ7XG59O1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5leHBvcnQgdmFyIFRvZGF5V2VhdGhlcldyYXBwZXIgPSBzdHlsZWQuZGl2KHRlbXBsYXRlT2JqZWN0XzEgfHwgKHRlbXBsYXRlT2JqZWN0XzEgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbXCJcXG5cXHRncmlkLWFyZWE6IHRvZGF5O1xcblxcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoYXV0bywgNSk7XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXG5cXG5cIl0sIFtcIlxcblxcdGdyaWQtYXJlYTogdG9kYXk7XFxuXFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdChhdXRvLCA1KTtcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG5cXHRhbGlnbi1pdGVtczogY2VudGVyO1xcblxcblxcblwiXSkpKTtcbmV4cG9ydCB2YXIgVG9kYXlXZWF0aGVyVGV4dCA9IHN0eWxlZC5wKHRlbXBsYXRlT2JqZWN0XzIgfHwgKHRlbXBsYXRlT2JqZWN0XzIgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbXCJcXG5cXHRmb250LXNpemU6IFwiLCBcInB4O1xcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXG5cIl0sIFtcIlxcblxcdGZvbnQtc2l6ZTogXCIsIFwicHg7XFxuXFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblwiXSkpLCBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZTtcbiAgICByZXR1cm4gdGhlbWUuZm9udFNpemVbMl07XG59KTtcbmV4cG9ydCB2YXIgVG9kYXlXZWF0aGVySW1hZ2UgPSBzdHlsZWQuaW1nKHRlbXBsYXRlT2JqZWN0XzMgfHwgKHRlbXBsYXRlT2JqZWN0XzMgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbXCJcXG5cXHRqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG5cIl0sIFtcIlxcblxcdGp1c3RpZnktc2VsZjogY2VudGVyO1xcblwiXSkpKTtcbnZhciB0ZW1wbGF0ZU9iamVjdF8xLCB0ZW1wbGF0ZU9iamVjdF8yLCB0ZW1wbGF0ZU9iamVjdF8zO1xuIiwidmFyIF9fbWFrZVRlbXBsYXRlT2JqZWN0ID0gKHRoaXMgJiYgdGhpcy5fX21ha2VUZW1wbGF0ZU9iamVjdCkgfHwgZnVuY3Rpb24gKGNvb2tlZCwgcmF3KSB7XG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgICByZXR1cm4gY29va2VkO1xufTtcbmltcG9ydCB7IGNyZWF0ZUdsb2JhbFN0eWxlIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuZXhwb3J0IHZhciBHbG9iYWxTdHlsZXMgPSBjcmVhdGVHbG9iYWxTdHlsZSh0ZW1wbGF0ZU9iamVjdF8xIHx8ICh0ZW1wbGF0ZU9iamVjdF8xID0gX19tYWtlVGVtcGxhdGVPYmplY3QoW1wiXFxuXFx0KiB7XFxuXFx0XFx0bWFyZ2luOiAwO1xcblxcdFxcdHBhZGRpbmc6IDA7XFxuXFx0XFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcXG5cXHR9XFxuXFxuXFx0aHRtbCxcXG5cXHRib2R5IHtcXG5cXHRcXHRvdmVyZmxvdy14OiBoaWRkZW47XFxuXFx0XFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRcXHRncmlkLXRlbXBsYXRlLXJvd3M6IDEwMCU7XFxuXFx0XFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XFxuXFx0XFx0bWFyZ2luOiAwO1xcblxcdFxcdHBhZGRpbmc6IDA7XFxuXFx0XFx0Zm9udC1mYW1pbHk6IHZhcigtLWZvbnQtZmFtaWx5KTtcXG5cXHR9XFxuXFxuXFx0YSB7XFxuXFx0XFx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xcblxcdFxcdGNvbG9yOiBpbmhlcml0O1xcblxcdH1cXG5cXG5cXHRidXR0b24ge1xcblxcdFxcdGJvcmRlcjogbm9uZTtcXG5cXHR9XFxuXFxuXFx0bGkge1xcblxcdFxcdGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsgXFxuXFx0fVxcblxcdFxcblxcdHVsIHtcXG5cXHRcXHRtYXJnaW4tbGVmdDogMDtcXG5cXHRcXHRwYWRkaW5nLWxlZnQ6IDA7IFxcblxcdH1cXG5cXG5cXHQ6cm9vdCB7XFxuXFx0XFx0LS1mb250LWZhbWlseTogXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgc2Fucy1zZXJpZjtcXG5cXHR9XFxuXCJdLCBbXCJcXG5cXHQqIHtcXG5cXHRcXHRtYXJnaW46IDA7XFxuXFx0XFx0cGFkZGluZzogMDtcXG5cXHRcXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xcblxcdH1cXG5cXG5cXHRodG1sLFxcblxcdGJvZHkge1xcblxcdFxcdG92ZXJmbG93LXg6IGhpZGRlbjtcXG5cXHRcXHRkaXNwbGF5OiBncmlkO1xcblxcdFxcdGdyaWQtdGVtcGxhdGUtcm93czogMTAwJTtcXG5cXHRcXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG5cXHRcXHRtYXJnaW46IDA7XFxuXFx0XFx0cGFkZGluZzogMDtcXG5cXHRcXHRmb250LWZhbWlseTogdmFyKC0tZm9udC1mYW1pbHkpO1xcblxcdH1cXG5cXG5cXHRhIHtcXG5cXHRcXHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuXFx0XFx0Y29sb3I6IGluaGVyaXQ7XFxuXFx0fVxcblxcblxcdGJ1dHRvbiB7XFxuXFx0XFx0Ym9yZGVyOiBub25lO1xcblxcdH1cXG5cXG5cXHRsaSB7XFxuXFx0XFx0bGlzdC1zdHlsZS10eXBlOiBub25lOyBcXG5cXHR9XFxuXFx0XFxuXFx0dWwge1xcblxcdFxcdG1hcmdpbi1sZWZ0OiAwO1xcblxcdFxcdHBhZGRpbmctbGVmdDogMDsgXFxuXFx0fVxcblxcblxcdDpyb290IHtcXG5cXHRcXHQtLWZvbnQtZmFtaWx5OiBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBzYW5zLXNlcmlmO1xcblxcdH1cXG5cIl0pKSk7XG52YXIgdGVtcGxhdGVPYmplY3RfMTtcbiIsImV4cG9ydCB2YXIgc2VsZWN0Q3VycmVudENpdHkgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLmNpdHkuY3VycmVudENpdHk7IH07XG5leHBvcnQgdmFyIHNlbGVjdFNlYXJjaENpdGllc0xvYWRpbmdTdGF0dXMgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLmNpdHkuc2VhcmNoQ2l0aWVzTG9hZGluZ1N0YXR1czsgfTtcbmV4cG9ydCB2YXIgc2VsZWN0Q2l0eVNlYXJjaFJlc3VsdCA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuY2l0eS5jaXR5U2VhcmNoUmVzdWx0OyB9O1xuIiwiZXhwb3J0IHZhciBzZWxlY3REYWlseVdlYXRoZXIgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLmRhaWx5V2VhdGhlci53ZWF0aGVyOyB9O1xuZXhwb3J0IHZhciBzZWxlY3REYWlseVdlYXRoZXJMb2FkaW5nU3RhdHVzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5kYWlseVdlYXRoZXIubG9hZGluZ1N0YXR1czsgfTtcbiIsImV4cG9ydCB2YXIgc2VsZWN0Rm9yZWNhc3RXZWF0aGVyVHlwZSA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuZm9yZWNhc3RXZWF0aGVyLmZvcmVjYXN0V2VhdGhlclR5cGU7IH07XG4iLCJleHBvcnQgdmFyIHNlbGVjdEhvdXJseVdlYXRoZXIgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLmhvdXJseVdlYXRoZXIud2VhdGhlcjsgfTtcbmV4cG9ydCB2YXIgc2VsZWN0SG91cmx5V2VhdGhlckxvYWRpbmdTdGF0dXMgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLmhvdXJseVdlYXRoZXIubG9hZGluZ1N0YXR1czsgfTtcbiIsImV4cG9ydCB2YXIgc2VsZWN0TG9jYXRpb24gPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLmxvY2F0aW9uLmxvY2F0aW9uOyB9O1xuIiwiZXhwb3J0IHZhciBzZWxlY3RUb2RheVdlYXRoZXIgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLnRvZGF5V2VhdGhlci53ZWF0aGVyOyB9O1xuZXhwb3J0IHZhciBzZWxlY3RUb2RheVdlYXRoZXJMb2FkaW5nU3RhdHVzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS50b2RheVdlYXRoZXIubG9hZGluZ1N0YXR1czsgfTtcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgQnV0dG9uLCBDYWxlbmRhckV2ZW50IH0gZnJvbSAnQGNvbXBvbmVudHMnO1xuaW1wb3J0IHsgdXNlQ2FsZW5kYXIgfSBmcm9tICdAaG9va3MnO1xuaW1wb3J0IHsgQ2FsZW5kYXJFdmVudHNXcmFwcGVyLCBDYWxlbmRhcldyYXBwZXIgfSBmcm9tICcuL3N0eWxlZCc7XG5leHBvcnQgdmFyIENhbGVuZGFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYSA9IHVzZUNhbGVuZGFyKCksIGlzQXV0aCA9IF9hLmlzQXV0aCwgZXZlbnRzID0gX2EuZXZlbnRzLCBoYW5kbGVBdXRoID0gX2EuaGFuZGxlQXV0aCwgaGFuZGxlU2lnbk91dCA9IF9hLmhhbmRsZVNpZ25PdXQ7XG4gICAgcmV0dXJuIChfanN4cyhDYWxlbmRhcldyYXBwZXIsIHsgY2hpbGRyZW46IFtpc0F1dGggJiYgKF9qc3goQnV0dG9uLCBfX2Fzc2lnbih7IFwiZGF0YS10ZXN0LWlkXCI6IFwiY2FsZW5kYXItc2lnbi1vdXRcIiwgb25DbGljazogaGFuZGxlU2lnbk91dCB9LCB7IGNoaWxkcmVuOiBcIlNpZ24gb3V0XCIgfSkpKSwgIWlzQXV0aCAmJiAoX2pzeChCdXR0b24sIF9fYXNzaWduKHsgXCJkYXRhLXRlc3QtaWRcIjogXCJjYWxlbmRhci1zaWduLWluXCIsIG9uQ2xpY2s6IGhhbmRsZUF1dGggfSwgeyBjaGlsZHJlbjogXCJTaWduIGluXCIgfSkpKSwgX2pzeChDYWxlbmRhckV2ZW50c1dyYXBwZXIsIHsgY2hpbGRyZW46IGV2ZW50cy5tYXAoZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiAoX2pzeChDYWxlbmRhckV2ZW50LCB7IGV2ZW50OiBldmVudCB9LCBldmVudC5pZCkpOyB9KSB9KV0gfSkpO1xufTtcbiIsImltcG9ydCB7IEhITU1Mb2NhbGVPcHRpb25zLCBhZHZhbmNlZERhdGVMb2NhbGVPcHRpb25zLCBkYXlPZldlZWtMb2NhbGVPcHRpb24sIHRpbWVMb2NhbGVPcHRpb25zIH0gZnJvbSAnQGNvbnN0YW50cyc7XG5leHBvcnQgdmFyIGdldFRpbWVMb2NhbGVkU3RyaW5nRGF0ZSA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywgdGltZUxvY2FsZU9wdGlvbnMpO1xufTtcbmV4cG9ydCB2YXIgZ2V0RGF0ZUxvY2FsZWRTdHJpbmdEYXRlID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS50b0xvY2FsZVN0cmluZygnZW4tVVMnLCBhZHZhbmNlZERhdGVMb2NhbGVPcHRpb25zKTtcbn07XG5leHBvcnQgdmFyIGdldERheU9mV2Vla0xvY2FsZWRTdHJpbmdEYXRlID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS50b0xvY2FsZVN0cmluZygnZW4tVVMnLCBkYXlPZldlZWtMb2NhbGVPcHRpb24pO1xufTtcbmV4cG9ydCB2YXIgZ2V0SEhNTUxvY2FsZWRTdHJpbmdEYXRlID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS50b0xvY2FsZVN0cmluZygncnUtUlUnLCBISE1NTG9jYWxlT3B0aW9ucyk7XG59O1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGdldEhITU1Mb2NhbGVkU3RyaW5nRGF0ZSB9IGZyb20gJ0B1dGlscyc7XG5pbXBvcnQgeyBDYWxlbmRhckV2ZW50V3JhcHBlciB9IGZyb20gJy4vc3R5bGVkJztcbmV4cG9ydCB2YXIgQ2FsZW5kYXJFdmVudCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBldmVudCA9IF9hLmV2ZW50O1xuICAgIHZhciBzdGFydCA9IGV2ZW50LnN0YXJ0LCBlbmQgPSBldmVudC5lbmQ7XG4gICAgdmFyIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKHN0YXJ0LmRhdGVUaW1lKTtcbiAgICB2YXIgZW5kRGF0ZSA9IG5ldyBEYXRlKGVuZC5kYXRlVGltZSk7XG4gICAgcmV0dXJuIChfanN4cyhDYWxlbmRhckV2ZW50V3JhcHBlciwgeyBjaGlsZHJlbjogW19qc3goXCJwXCIsIHsgY2hpbGRyZW46IGV2ZW50LnN1bW1hcnkgfSksIF9qc3hzKFwicFwiLCB7IGNoaWxkcmVuOiBbZ2V0SEhNTUxvY2FsZWRTdHJpbmdEYXRlKHN0YXJ0RGF0ZSksIFwiIC0gXCIsIGdldEhITU1Mb2NhbGVkU3RyaW5nRGF0ZShlbmREYXRlKV0gfSldIH0pKTtcbn07XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGdldERhdGVMb2NhbGVkU3RyaW5nRGF0ZSwgZ2V0VGltZUxvY2FsZWRTdHJpbmdEYXRlIH0gZnJvbSAnQHV0aWxzJztcbmltcG9ydCB7IHVzZUN1cnJlbnREYXRlIH0gZnJvbSAnQGhvb2tzJztcbmltcG9ydCB7IENsb2NrVGV4dCwgQ2xvY2tXcmFwcGVyIH0gZnJvbSAnLi9zdHlsZWQnO1xuZXhwb3J0IHZhciBDbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGF0ZSA9IHVzZUN1cnJlbnREYXRlKCk7XG4gICAgcmV0dXJuIChfanN4cyhDbG9ja1dyYXBwZXIsIHsgY2hpbGRyZW46IFtfanN4KENsb2NrVGV4dCwgX19hc3NpZ24oeyBcImRhdGEtdGVzdC1pZFwiOiBcInRpbWUtY2xvY2tcIiB9LCB7IGNoaWxkcmVuOiBnZXRUaW1lTG9jYWxlZFN0cmluZ0RhdGUoZGF0ZSkgfSkpLCBfanN4KENsb2NrVGV4dCwgX19hc3NpZ24oeyBcImRhdGEtdGVzdC1pZFwiOiBcImRhdGUtY2xvY2tcIiB9LCB7IGNoaWxkcmVuOiBnZXREYXRlTG9jYWxlZFN0cmluZ0RhdGUoZGF0ZSkgfSkpXSB9KSk7XG59O1xuIiwiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciB1c2VDdXJyZW50RGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2EgPSB1c2VTdGF0ZShuZXcgRGF0ZSgpKSwgZGF0ZSA9IF9hWzBdLCBzZXREYXRlID0gX2FbMV07XG4gICAgdmFyIGludGVydmFsUmVmID0gdXNlUmVmKG51bGwpO1xuICAgIHZhciBoYW5kbGVJbnRlcnZhbFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldERhdGUobmV3IERhdGUoKSk7XG4gICAgfTtcbiAgICB2YXIgaGFuZGxlQ2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGludGVydmFsUmVmLmN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxSZWYuY3VycmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGludGVydmFsUmVmLmN1cnJlbnQgPSBzZXRJbnRlcnZhbChoYW5kbGVJbnRlcnZhbFRpY2ssIDEwMDApO1xuICAgICAgICByZXR1cm4gaGFuZGxlQ2xlYXJJbnRlcnZhbDtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGRhdGU7XG59O1xuIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIEVycm9yQm91bmRhcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVycm9yQm91bmRhcnksIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRXJyb3JCb3VuZGFyeShwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBlcnJvcjogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRXJyb3JCb3VuZGFyeS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiB0cnVlIH07XG4gICAgfTtcbiAgICBFcnJvckJvdW5kYXJ5LnByb3RvdHlwZS5jb21wb25lbnREaWRDYXRjaCA9IGZ1bmN0aW9uIChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3JJbmZvLmNvbXBvbmVudFN0YWNrKTtcbiAgICB9O1xuICAgIEVycm9yQm91bmRhcnkucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBfanN4KFwiaDFcIiwgeyBjaGlsZHJlbjogXCJcXHUwNDFGXFx1MDQ0MFxcdTA0M0VcXHUwNDM4XFx1MDQzN1xcdTA0M0VcXHUwNDQ4XFx1MDQzQlxcdTA0MzAgXFx1MDQzRVxcdTA0NDhcXHUwNDM4XFx1MDQzMVxcdTA0M0FcXHUwNDMwXCIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcbiAgICByZXR1cm4gRXJyb3JCb3VuZGFyeTtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBFcnJvckJvdW5kYXJ5IH07XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgRm9yZWNhc3RXZWF0aGVySXRlbSwgU3Bpbm5lciB9IGZyb20gJ0Bjb21wb25lbnRzJztcbmltcG9ydCB7IExPQURJTkdfU1RBVFVTLCBTUElOTkVSX1NJWkUsIHdlYXRoZXJTdGF0dXNlcyB9IGZyb20gJ0Bjb25zdGFudHMnO1xuaW1wb3J0IHsgZ2V0RGF5T2ZXZWVrTG9jYWxlZFN0cmluZ0RhdGUgfSBmcm9tICdAdXRpbHMnO1xuaW1wb3J0IHsgZmV0Y2hEYWlseVdlYXRoZXIsIHNlbGVjdERhaWx5V2VhdGhlciwgc2VsZWN0RGFpbHlXZWF0aGVyTG9hZGluZ1N0YXR1cywgc2VsZWN0TG9jYXRpb24gfSBmcm9tICdAc3RvcmUnO1xuaW1wb3J0IHsgRm9yZWNhc3REYWlseVdlYXRoZXJUZXh0IH0gZnJvbSAnLi9zdHlsZWQnO1xuZXhwb3J0IHZhciBGb3JlY2FzdERhaWx5V2VhdGhlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGFpbHlXZWF0aGVyID0gdXNlU2VsZWN0b3Ioc2VsZWN0RGFpbHlXZWF0aGVyKTtcbiAgICB2YXIgZGFpbHlXZWF0aGVyTG9hZGluZ1N0YXR1cyA9IHVzZVNlbGVjdG9yKHNlbGVjdERhaWx5V2VhdGhlckxvYWRpbmdTdGF0dXMpO1xuICAgIHZhciBzZWxlY3RlZExvY2F0aW9uID0gdXNlU2VsZWN0b3Ioc2VsZWN0TG9jYXRpb24pO1xuICAgIHZhciBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNlbGVjdGVkTG9jYXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKGZldGNoRGFpbHlXZWF0aGVyKHNlbGVjdGVkTG9jYXRpb24pKTtcbiAgICAgICAgfVxuICAgIH0sIFtzZWxlY3RlZExvY2F0aW9uXSk7XG4gICAgaWYgKGRhaWx5V2VhdGhlckxvYWRpbmdTdGF0dXMgPT09IExPQURJTkdfU1RBVFVTLkxPQURJTkcpIHtcbiAgICAgICAgcmV0dXJuIF9qc3goU3Bpbm5lciwgeyBcImRhdGEtdGVzdC1pZFwiOiBcImRhaWx5LXdlYXRoZXItc3Bpbm5lclwiLCBzaXplOiBTUElOTkVSX1NJWkUuTEFSR0UgfSk7XG4gICAgfVxuICAgIGlmIChkYWlseVdlYXRoZXIgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBfYSA9IGRhaWx5V2VhdGhlci5kYWlseSwgd2VhdGhlckNvZGVzID0gX2Eud2VhdGhlcmNvZGUsIHRlbXBlcmF0dXJlTWF4ID0gX2EudGVtcGVyYXR1cmVfMm1fbWF4LCB0ZW1wZXJhdHVyZU1pbiA9IF9hLnRlbXBlcmF0dXJlXzJtX21pbjtcbiAgICByZXR1cm4gKF9qc3goX0ZyYWdtZW50LCB7IGNoaWxkcmVuOiBkYWlseVdlYXRoZXIgPT09IG51bGwgfHwgZGFpbHlXZWF0aGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYWlseVdlYXRoZXIuZGFpbHkudGltZS5tYXAoZnVuY3Rpb24gKHRpbWUsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgd2VhdGhlckNvZGUgPSB3ZWF0aGVyQ29kZXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFyIGRhdGVPZkRheU9mV2VlayA9IG5ldyBEYXRlKHRpbWUgKiAxMDAwKTtcbiAgICAgICAgICAgIHZhciBfYSA9IHdlYXRoZXJTdGF0dXNlc1t3ZWF0aGVyQ29kZV0sIGljb24gPSBfYS5pY29uLCBkZXNjcmlwdGlvbiA9IF9hLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIChfanN4cyhGb3JlY2FzdFdlYXRoZXJJdGVtLCBfX2Fzc2lnbih7IHRpbWVzdGFtcDogZ2V0RGF5T2ZXZWVrTG9jYWxlZFN0cmluZ0RhdGUoZGF0ZU9mRGF5T2ZXZWVrKSwgaWNvbjogX2pzeChcImltZ1wiLCB7IHNyYzogaWNvbiwgYWx0OiBkZXNjcmlwdGlvbiwgdGl0bGU6IGRlc2NyaXB0aW9uIH0pIH0sIHsgY2hpbGRyZW46IFtfanN4KEZvcmVjYXN0RGFpbHlXZWF0aGVyVGV4dCwgX19hc3NpZ24oeyBcImRhdGEtdGVzdC1pZFwiOiBcImRhaWx5LXdlYXRoZXItdGl0bGVcIiB9LCB7IGNoaWxkcmVuOiBkZXNjcmlwdGlvbiB9KSksIF9qc3goRm9yZWNhc3REYWlseVdlYXRoZXJUZXh0LCB7IGNoaWxkcmVuOiBcIk1heDpcIiB9KSwgX2pzeHMoRm9yZWNhc3REYWlseVdlYXRoZXJUZXh0LCB7IGNoaWxkcmVuOiBbdGVtcGVyYXR1cmVNYXhbaW5kZXhdLCBcIlxcdTAwQjBcIl0gfSksIF9qc3goRm9yZWNhc3REYWlseVdlYXRoZXJUZXh0LCB7IGNoaWxkcmVuOiBcIk1pbjpcIiB9KSwgX2pzeHMoRm9yZWNhc3REYWlseVdlYXRoZXJUZXh0LCB7IGNoaWxkcmVuOiBbdGVtcGVyYXR1cmVNaW5baW5kZXhdLCBcIlxcdTAwQjBcIl0gfSldIH0pLCB0aW1lKSk7XG4gICAgICAgIH0pIH0pKTtcbn07XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgRm9yZWNhc3RXZWF0aGVySXRlbSwgU3Bpbm5lciB9IGZyb20gJ0Bjb21wb25lbnRzJztcbmltcG9ydCB7IExPQURJTkdfU1RBVFVTLCBTUElOTkVSX1NJWkUsIHdlYXRoZXJTdGF0dXNlcyB9IGZyb20gJ0Bjb25zdGFudHMnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEhvdXJseURhdGVCeVVuaXhUaW1lLCBnZXRISE1NTG9jYWxlZFN0cmluZ0RhdGUgfSBmcm9tICdAdXRpbHMnO1xuaW1wb3J0IHsgZmV0Y2hIb3VybHlXZWF0aGVyLCBzZWxlY3RIb3VybHlXZWF0aGVyLCBzZWxlY3RIb3VybHlXZWF0aGVyTG9hZGluZ1N0YXR1cywgc2VsZWN0TG9jYXRpb24gfSBmcm9tICdAc3RvcmUnO1xuaW1wb3J0IHsgRm9yZWNhc3RIb3VybHlXZWF0aGVyVGV4dCwgRm9yZWNhc3RIb3VybHlXZWF0aGVyVGl0bGUgfSBmcm9tICcuL3N0eWxlZCc7XG5leHBvcnQgdmFyIEZvcmVjYXN0SG91cmx5V2VhdGhlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaG91cmx5V2VhdGhlciA9IHVzZVNlbGVjdG9yKHNlbGVjdEhvdXJseVdlYXRoZXIpO1xuICAgIHZhciBob3VybHlXZWF0aGVyTG9hZGluZ1N0YXR1cyA9IHVzZVNlbGVjdG9yKHNlbGVjdEhvdXJseVdlYXRoZXJMb2FkaW5nU3RhdHVzKTtcbiAgICB2YXIgc2VsZWN0ZWRMb2NhdGlvbiA9IHVzZVNlbGVjdG9yKHNlbGVjdExvY2F0aW9uKTtcbiAgICB2YXIgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzZWxlY3RlZExvY2F0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChmZXRjaEhvdXJseVdlYXRoZXIoc2VsZWN0ZWRMb2NhdGlvbikpO1xuICAgICAgICB9XG4gICAgfSwgW3NlbGVjdGVkTG9jYXRpb25dKTtcbiAgICBpZiAoaG91cmx5V2VhdGhlckxvYWRpbmdTdGF0dXMgPT09IExPQURJTkdfU1RBVFVTLkxPQURJTkcpIHtcbiAgICAgICAgcmV0dXJuIF9qc3goU3Bpbm5lciwgeyBzaXplOiBTUElOTkVSX1NJWkUuTEFSR0UgfSk7XG4gICAgfVxuICAgIGlmIChob3VybHlXZWF0aGVyID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgX2EgPSBob3VybHlXZWF0aGVyLmhvdXJseSwgd2VhdGhlckNvZGVzID0gX2Eud2VhdGhlcmNvZGUsIHRlbXBlcmF0dXJlID0gX2EudGVtcGVyYXR1cmVfMm0sIHRpbWUgPSBfYS50aW1lO1xuICAgIHJldHVybiAoX2pzeChfRnJhZ21lbnQsIHsgY2hpbGRyZW46IGdldEN1cnJlbnRIb3VybHlEYXRlQnlVbml4VGltZSh0aW1lKS5tYXAoZnVuY3Rpb24gKGRhdGUsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgd2VhdGhlckNvZGUgPSB3ZWF0aGVyQ29kZXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFyIF9hID0gd2VhdGhlclN0YXR1c2VzW3dlYXRoZXJDb2RlXSwgaWNvbiA9IF9hLmljb24sIGRlc2NyaXB0aW9uID0gX2EuZGVzY3JpcHRpb247XG4gICAgICAgICAgICByZXR1cm4gKF9qc3hzKEZvcmVjYXN0V2VhdGhlckl0ZW0sIF9fYXNzaWduKHsgXCJkYXRhLXRlc3QtaWRcIjogXCJob3VybHktd2VhdGhlci1pdGVtXCIsIHRpbWVzdGFtcDogZ2V0SEhNTUxvY2FsZWRTdHJpbmdEYXRlKGRhdGUpLCBpY29uOiBfanN4KFwiaW1nXCIsIHsgc3JjOiBpY29uLCBhbHQ6IGRlc2NyaXB0aW9uLCB0aXRsZTogZGVzY3JpcHRpb24gfSkgfSwgeyBjaGlsZHJlbjogW19qc3hzKEZvcmVjYXN0SG91cmx5V2VhdGhlclRpdGxlLCBfX2Fzc2lnbih7IFwiZGF0YS10ZXN0LWlkXCI6IFwiaG91cmx5LXdlYXRoZXItdGl0bGVcIiB9LCB7IGNoaWxkcmVuOiBbdGVtcGVyYXR1cmVbaW5kZXhdLCBcIlxcdTAwQjBcIl0gfSkpLCBfanN4KEZvcmVjYXN0SG91cmx5V2VhdGhlclRleHQsIHsgY2hpbGRyZW46IGRlc2NyaXB0aW9uIH0pXSB9KSwgZGF0ZS5nZXRUaW1lKCkpKTtcbiAgICAgICAgfSkgfSkpO1xufTtcbiIsImV4cG9ydCB2YXIgZ2V0Q3VycmVudEhvdXJseURhdGVCeVVuaXhUaW1lID0gZnVuY3Rpb24gKHVuaXh0aW1lKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIHJldHVybiB1bml4dGltZVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh0aW1lKSB7IHJldHVybiBuZXcgRGF0ZSh0aW1lICogMTAwMCk7IH0pXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGhvdXJseURhdGUpIHsgcmV0dXJuIGhvdXJseURhdGUuZ2V0SG91cnMoKSA+PSBkYXRlLmdldEhvdXJzKCk7IH0pXG4gICAgICAgIC5zbGljZSgwLCA3KTtcbn07XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBGb3JlY2FzdERhaWx5V2VhdGhlciwgRm9yZWNhc3RIb3VybHlXZWF0aGVyIH0gZnJvbSAnQGNvbXBvbmVudHMnO1xuaW1wb3J0IHsgc2VsZWN0Rm9yZWNhc3RXZWF0aGVyVHlwZSwgc2VsZWN0TG9jYXRpb24gfSBmcm9tICdAc3RvcmUnO1xuaW1wb3J0IHsgRm9yZWNhc3RXZWF0aGVyV3JhcHBlciB9IGZyb20gJy4vc3R5bGVkJztcbmV4cG9ydCB2YXIgRm9yZWNhc3RXZWF0aGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBmb3JlY2FzdFdlYXRoZXJUeXBlID0gdXNlU2VsZWN0b3Ioc2VsZWN0Rm9yZWNhc3RXZWF0aGVyVHlwZSk7XG4gICAgdmFyIHNlbGVjdGVkTG9jYXRpb24gPSB1c2VTZWxlY3RvcihzZWxlY3RMb2NhdGlvbik7XG4gICAgaWYgKHNlbGVjdGVkTG9jYXRpb24gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIF9qc3goXCJwXCIsIHsgY2hpbGRyZW46IFwiXFx1MDQxMlxcdTA0NEIgXFx1MDQzRVxcdTA0NDJcXHUwNDNBXFx1MDQzMFxcdTA0MzdcXHUwNDMwXFx1MDQzQlxcdTA0MzhcXHUwNDQxXFx1MDQ0QyBcXHUwNDNFXFx1MDQ0MiBcXHUwNDNFXFx1MDQzMVxcdTA0NDBcXHUwNDMwXFx1MDQzMVxcdTA0M0VcXHUwNDQyXFx1MDQzQVxcdTA0MzggXFx1MDQzMlxcdTA0MzBcXHUwNDQ4XFx1MDQzNVxcdTA0MzkgXFx1MDQzM1xcdTA0MzVcXHUwNDNFXFx1MDQzQlxcdTA0M0VcXHUwNDNBXFx1MDQzMFxcdTA0NDZcXHUwNDM4XFx1MDQzOC4gXFx1MDQxMlxcdTA0NEJcXHUwNDMxXFx1MDQzNVxcdTA0NDBcXHUwNDM4XFx1MDQ0MlxcdTA0MzUgXFx1MDQzM1xcdTA0M0VcXHUwNDQwXFx1MDQzRVxcdTA0MzRcIiB9KTtcbiAgICB9XG4gICAgcmV0dXJuIChfanN4cyhGb3JlY2FzdFdlYXRoZXJXcmFwcGVyLCB7IGNoaWxkcmVuOiBbZm9yZWNhc3RXZWF0aGVyVHlwZSA9PT0gJ2RhaWx5JyAmJiBfanN4KEZvcmVjYXN0RGFpbHlXZWF0aGVyLCB7fSksIGZvcmVjYXN0V2VhdGhlclR5cGUgPT09ICdob3VybHknICYmIF9qc3goRm9yZWNhc3RIb3VybHlXZWF0aGVyLCB7fSldIH0pKTtcbn07XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgRm9yZWNhc3RXZWF0aGVySXRlbUltYWdlQ29udGFpbmVyLCBGb3JlY2FzdFdlYXRoZXJJdGVtVGV4dCwgRm9yZWNhc3RXZWF0aGVySXRlbVdyYXBwZXIgfSBmcm9tICcuL3N0eWxlZCc7XG5leHBvcnQgdmFyIEZvcmVjYXN0V2VhdGhlckl0ZW0gPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGltZXN0YW1wID0gX2EudGltZXN0YW1wLCBpY29uID0gX2EuaWNvbiwgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbjtcbiAgICByZXR1cm4gKF9qc3hzKEZvcmVjYXN0V2VhdGhlckl0ZW1XcmFwcGVyLCB7IGNoaWxkcmVuOiBbX2pzeChGb3JlY2FzdFdlYXRoZXJJdGVtVGV4dCwgeyBjaGlsZHJlbjogdGltZXN0YW1wIH0pLCBfanN4KEZvcmVjYXN0V2VhdGhlckl0ZW1JbWFnZUNvbnRhaW5lciwgeyBjaGlsZHJlbjogaWNvbiB9KSwgY2hpbGRyZW5dIH0pKTtcbn07XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgc2V0Rm9yZWNhc3RXZWF0aGVyVHlwZSB9IGZyb20gJ0BzdG9yZSc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdAY29tcG9uZW50cyc7XG5pbXBvcnQgeyBGb3JlY2FzdFdlYXRoZXJTd2l0Y2hXcmFwcGVyIH0gZnJvbSAnLi9zdHlsZWQnO1xuZXhwb3J0IHZhciBGb3JlY2FzdFdlYXRoZXJTd2l0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICB2YXIgaGFuZGxlU3dpdGNoRm9yZWNhc3RXZWF0aGVyVHlwZSA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGlzcGF0Y2goc2V0Rm9yZWNhc3RXZWF0aGVyVHlwZShrZXkpKTtcbiAgICB9OyB9O1xuICAgIHJldHVybiAoX2pzeHMoRm9yZWNhc3RXZWF0aGVyU3dpdGNoV3JhcHBlciwgeyBjaGlsZHJlbjogW19qc3goQnV0dG9uLCBfX2Fzc2lnbih7IFwiZGF0YS10ZXN0LWlkXCI6IFwic2V0LWRhaWx5LXdlYXRoZXJcIiwgb25DbGljazogaGFuZGxlU3dpdGNoRm9yZWNhc3RXZWF0aGVyVHlwZSgnZGFpbHknKSB9LCB7IGNoaWxkcmVuOiBcIkRhaWx5XCIgfSkpLCBfanN4KEJ1dHRvbiwgX19hc3NpZ24oeyBcImRhdGEtdGVzdC1pZFwiOiBcInNldC1ob3VybHktd2VhdGhlclwiLCBvbkNsaWNrOiBoYW5kbGVTd2l0Y2hGb3JlY2FzdFdlYXRoZXJUeXBlKCdob3VybHknKSB9LCB7IGNoaWxkcmVuOiBcIkhvdXJseVwiIH0pKV0gfSkpO1xufTtcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBDYWxlbmRhciwgQ2xvY2ssIEZvcmVjYXN0V2VhdGhlciwgRm9yZWNhc3RXZWF0aGVyU3dpdGNoLCBTZWFyY2hDaXR5LCBUb2RheVdlYXRoZXIgfSBmcm9tICdAY29tcG9uZW50cyc7XG5pbXBvcnQgeyBzZWxlY3RUb2RheVdlYXRoZXIgfSBmcm9tICdAc3RvcmUnO1xuaW1wb3J0IHsgZ2V0QmFja2dyb3VuZEJ5V2VhdGhlcklkIH0gZnJvbSAnQHV0aWxzJztcbmltcG9ydCB7IENvbnRlbnRXcmFwcGVyLCBMYXlvdXQsIFdlYXRoZXJXcmFwcGVyIH0gZnJvbSAnLi9zdHlsZWQnO1xuZXhwb3J0IHZhciBSb290ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0b2RheVdlYXRoZXIgPSB1c2VTZWxlY3RvcihzZWxlY3RUb2RheVdlYXRoZXIpO1xuICAgIHJldHVybiAoX2pzeChMYXlvdXQsIF9fYXNzaWduKHsgYmFja2dyb3VuZDogZ2V0QmFja2dyb3VuZEJ5V2VhdGhlcklkKHRvZGF5V2VhdGhlciA9PT0gbnVsbCB8fCB0b2RheVdlYXRoZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRvZGF5V2VhdGhlci53ZWF0aGVyWzBdLmlkKSB9LCB7IGNoaWxkcmVuOiBfanN4cyhDb250ZW50V3JhcHBlciwgeyBjaGlsZHJlbjogW19qc3goQ2xvY2ssIHt9KSwgX2pzeChTZWFyY2hDaXR5LCB7fSksIF9qc3goQ2FsZW5kYXIsIHt9KSwgX2pzeChGb3JlY2FzdFdlYXRoZXJTd2l0Y2gsIHt9KSwgX2pzeHMoV2VhdGhlcldyYXBwZXIsIHsgY2hpbGRyZW46IFtfanN4KFRvZGF5V2VhdGhlciwge30pLCBfanN4KEZvcmVjYXN0V2VhdGhlciwge30pXSB9KV0gfSkgfSkpKTtcbn07XG4iLCJpbXBvcnQgeyBDbGVhclNreUJhY2tncm91bmRJbWFnZSwgRmV3Q2xvdWRCYWNrZ3JvdW5kSW1hZ2UsIE1pc3RCYWNrZ3JvdW5kSW1hZ2UsIFJhaW5CYWNrZ3JvdW5kSW1hZ2UsIFNob3dlclJhaW5CYWNrZ3JvdW5kSW1hZ2UsIFNub3dCYWNrZ3JvdW5kSW1hZ2UsIFRodW5kZXJTdG9ybUJhY2tncm91bmRJbWFnZSwgfSBmcm9tICdAYXNzZXRzJztcbmV4cG9ydCB2YXIgZ2V0QmFja2dyb3VuZEJ5V2VhdGhlcklkID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgaWYgKGlkID09PSB2b2lkIDApIHsgaWQgPSA4MDA7IH1cbiAgICBpZiAoaWQgPj0gMjAwICYmIGlkIDwgMzAwKSB7XG4gICAgICAgIHJldHVybiBUaHVuZGVyU3Rvcm1CYWNrZ3JvdW5kSW1hZ2U7XG4gICAgfVxuICAgIGlmIChpZCA+PSAzMDAgJiYgaWQgPCA0MDApIHtcbiAgICAgICAgcmV0dXJuIFJhaW5CYWNrZ3JvdW5kSW1hZ2U7XG4gICAgfVxuICAgIGlmIChpZCA+PSA1MDAgJiYgaWQgPCA2MDApIHtcbiAgICAgICAgcmV0dXJuIFNob3dlclJhaW5CYWNrZ3JvdW5kSW1hZ2U7XG4gICAgfVxuICAgIGlmIChpZCA+PSA2MDAgJiYgaWQgPCA3MDApIHtcbiAgICAgICAgcmV0dXJuIFNub3dCYWNrZ3JvdW5kSW1hZ2U7XG4gICAgfVxuICAgIGlmIChpZCA+PSA2MDAgJiYgaWQgPCA3MDApIHtcbiAgICAgICAgcmV0dXJuIE1pc3RCYWNrZ3JvdW5kSW1hZ2U7XG4gICAgfVxuICAgIGlmIChpZCA9PT0gODAwKSB7XG4gICAgICAgIHJldHVybiBDbGVhclNreUJhY2tncm91bmRJbWFnZTtcbiAgICB9XG4gICAgaWYgKGlkID4gODAwICYmIGlkIDwgOTAwKSB7XG4gICAgICAgIHJldHVybiBGZXdDbG91ZEJhY2tncm91bmRJbWFnZTtcbiAgICB9XG4gICAgcmV0dXJuIENsZWFyU2t5QmFja2dyb3VuZEltYWdlO1xufTtcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgQnV0dG9uLCBTZWFyY2hDaXR5TGlzdCB9IGZyb20gJ0Bjb21wb25lbnRzJztcbmltcG9ydCB7IGZldGNoQ2l0eUJ5TmFtZSwgc2V0TG9jYXRpb24gfSBmcm9tICdAc3RvcmUnO1xuaW1wb3J0IHsgdXNlQ3VycmVudExvY2F0aW9uIH0gZnJvbSAnQGhvb2tzJztcbmltcG9ydCB7IFNlYXJjaENpdHlXcmFwcGVyLCBTZWFyY2hJbnB1dCB9IGZyb20gJy4vc3R5bGVkJztcbmV4cG9ydCB2YXIgU2VhcmNoQ2l0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbG9jYXRpb24gPSB1c2VDdXJyZW50TG9jYXRpb24oKS5sb2NhdGlvbjtcbiAgICB2YXIgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIHZhciBfYSA9IHVzZVN0YXRlKG51bGwpLCBpbnB1dFZhbHVlID0gX2FbMF0sIHNldElucHV0VmFsdWUgPSBfYVsxXTtcbiAgICB2YXIgaGFuZGxlQ2hhbmdlSW5wdXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgc2V0SW5wdXRWYWx1ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG4gICAgdmFyIGhhbmRsZUNsZWFySW5wdXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0SW5wdXRWYWx1ZSgnJyk7XG4gICAgfTtcbiAgICB2YXIgaGFuZGxlQ2xlYXJDaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBkaXNwYXRjaChzZXRMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIH07XG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlucHV0VmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKGZldGNoQ2l0eUJ5TmFtZShpbnB1dFZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9LCBbaW5wdXRWYWx1ZV0pO1xuICAgIHJldHVybiAoX2pzeHMoU2VhcmNoQ2l0eVdyYXBwZXIsIHsgY2hpbGRyZW46IFtfanN4KEJ1dHRvbiwgX19hc3NpZ24oeyBcImRhdGEtdGVzdC1pZFwiOiBcImNpdHktc2VhcmNoLXJlc2V0XCIsIG9uQ2xpY2s6IGhhbmRsZUNsZWFyQ2l0eSB9LCB7IGNoaWxkcmVuOiBcIlJlc2V0IENpdHlcIiB9KSksIF9qc3goXCJoM1wiLCB7IGNoaWxkcmVuOiBcIlNlYXJjaCBjaXR5XCIgfSksIF9qc3goU2VhcmNoSW5wdXQsIHsgXCJkYXRhLXRlc3QtaWRcIjogXCJjaXR5LXNlYXJjaC1pbnB1dFwiLCB0eXBlOiBcInNlYXJjaFwiLCB2YWx1ZTogaW5wdXRWYWx1ZSAhPT0gbnVsbCAmJiBpbnB1dFZhbHVlICE9PSB2b2lkIDAgPyBpbnB1dFZhbHVlIDogJycsIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VJbnB1dCB9KSwgX2pzeChTZWFyY2hDaXR5TGlzdCwgeyBvbkNsZWFySW5wdXRWYWx1ZTogaGFuZGxlQ2xlYXJJbnB1dFZhbHVlIH0pXSB9KSk7XG59O1xuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbmltcG9ydCB7IGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBzZWxlY3RTZWFyY2hDaXRpZXNMb2FkaW5nU3RhdHVzLCBzZWxlY3RDaXR5U2VhcmNoUmVzdWx0LCBzZXRDdXJyZW50Q2l0eSwgc2V0TG9jYXRpb24gfSBmcm9tICdAc3RvcmUnO1xuaW1wb3J0IHsgTE9BRElOR19TVEFUVVMsIFNQSU5ORVJfU0laRSB9IGZyb20gJ0Bjb25zdGFudHMnO1xuaW1wb3J0IHsgQnV0dG9uLCBTcGlubmVyIH0gZnJvbSAnQGNvbXBvbmVudHMnO1xuaW1wb3J0IHsgU2VhcmNoQ2l0eUxpc3RJdGVtV3JhcHBlciwgU2VhcmNoQ2l0eUxpc3RXcmFwcGVyIH0gZnJvbSAnLi9zdHlsZWQnO1xuZXhwb3J0IHZhciBTZWFyY2hDaXR5TGlzdCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBfYjtcbiAgICB2YXIgb25DbGVhcklucHV0VmFsdWUgPSBfYS5vbkNsZWFySW5wdXRWYWx1ZTtcbiAgICB2YXIgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIHZhciBzZWFyY2hDaXR5TG9hZGluZ1N0YXR1cyA9IHVzZVNlbGVjdG9yKHNlbGVjdFNlYXJjaENpdGllc0xvYWRpbmdTdGF0dXMpO1xuICAgIHZhciBzZWFyY2hDaXR5UmVzdWx0ID0gdXNlU2VsZWN0b3Ioc2VsZWN0Q2l0eVNlYXJjaFJlc3VsdCk7XG4gICAgdmFyIGhhbmRsZVNlbGVjdENpdHkgPSBmdW5jdGlvbiAoY2l0eVJlc3VsdCkgeyByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBkaXNwYXRjaChzZXRDdXJyZW50Q2l0eShjaXR5UmVzdWx0KSk7XG4gICAgICAgIHZhciBsb25naXR1ZGUgPSBjaXR5UmVzdWx0LmxvbmdpdHVkZSwgbGF0aXR1ZGUgPSBjaXR5UmVzdWx0LmxhdGl0dWRlO1xuICAgICAgICBkaXNwYXRjaChzZXRMb2NhdGlvbih7XG4gICAgICAgICAgICBsb246IGxvbmdpdHVkZSxcbiAgICAgICAgICAgIGxhdDogbGF0aXR1ZGUsXG4gICAgICAgIH0pKTtcbiAgICAgICAgb25DbGVhcklucHV0VmFsdWUoKTtcbiAgICB9OyB9O1xuICAgIGlmIChzZWFyY2hDaXR5TG9hZGluZ1N0YXR1cyA9PT0gTE9BRElOR19TVEFUVVMuTE9BRElORykge1xuICAgICAgICByZXR1cm4gKF9qc3goU2VhcmNoQ2l0eUxpc3RXcmFwcGVyLCB7IGNoaWxkcmVuOiBfanN4KFNwaW5uZXIsIHsgXCJkYXRhLXRlc3QtaWRcIjogXCJjaXR5LXNlYXJjaC1zcGlubmVyXCIsIHNpemU6IFNQSU5ORVJfU0laRS5MQVJHRSB9KSB9KSk7XG4gICAgfVxuICAgIHJldHVybiAoX2pzeChTZWFyY2hDaXR5TGlzdFdyYXBwZXIsIF9fYXNzaWduKHsgXCJkYXRhLXRlc3QtaWRcIjogXCJjaXR5LXNlYXJjaC1yZXN1bHQtd3JhcHBlclwiIH0sIHsgY2hpbGRyZW46IChfYiA9IHNlYXJjaENpdHlSZXN1bHQgPT09IG51bGwgfHwgc2VhcmNoQ2l0eVJlc3VsdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VhcmNoQ2l0eVJlc3VsdC5yZXN1bHRzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWFwKGZ1bmN0aW9uIChjaXR5UmVzdWx0KSB7XG4gICAgICAgICAgICB2YXIgaWQgPSBjaXR5UmVzdWx0LmlkLCBuYW1lID0gY2l0eVJlc3VsdC5uYW1lLCBjb3VudHJ5ID0gY2l0eVJlc3VsdC5jb3VudHJ5LCBjb3VudHJ5Q29kZSA9IGNpdHlSZXN1bHQuY291bnRyeV9jb2RlO1xuICAgICAgICAgICAgcmV0dXJuIChfanN4cyhTZWFyY2hDaXR5TGlzdEl0ZW1XcmFwcGVyLCB7IGNoaWxkcmVuOiBbX2pzeHMoXCJwXCIsIHsgY2hpbGRyZW46IFtuYW1lLCBcIiwgXCIsIGNvdW50cnksIFwiLCBcIiwgY291bnRyeUNvZGVdIH0pLCBfanN4KEJ1dHRvbiwgX19hc3NpZ24oeyBcImRhdGEtdGVzdC1pZFwiOiBcImNpdHktc2VhcmNoLXNlbGVjdFwiLCBvbkNsaWNrOiBoYW5kbGVTZWxlY3RDaXR5KGNpdHlSZXN1bHQpIH0sIHsgY2hpbGRyZW46IFwic2VsZWN0XCIgfSkpXSB9LCBpZCkpO1xuICAgICAgICB9KSB9KSkpO1xufTtcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgc3Bpbm5lckljb24gfSBmcm9tICdAYXNzZXRzJztcbmltcG9ydCB7IFNwaW5uZXJJbWFnZSwgU3Bpbm5lcldyYXBwZXIgfSBmcm9tICcuL3N0eWxlZCc7XG5leHBvcnQgdmFyIFNwaW5uZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgc2l6ZSA9IF9hLnNpemUsIHByb3BzID0gX19yZXN0KF9hLCBbXCJzaXplXCJdKTtcbiAgICByZXR1cm4gKF9qc3goU3Bpbm5lcldyYXBwZXIsIF9fYXNzaWduKHsgXCJkYXRhLXRlc3QtaWRcIjogXCJzcGlubmVyLXdyYXBwZXJcIiB9LCBwcm9wcywgeyBjaGlsZHJlbjogX2pzeChTcGlubmVySW1hZ2UsIHsgc3JjOiBzcGlubmVySWNvbiwgc2l6ZTogc2l6ZSwgYWx0OiBcIkxvYWRpbmdcIiwgdGl0bGU6IFwiTG9hZGluZ1wiIH0pIH0pKSk7XG59O1xuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbmltcG9ydCB7IGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyB1c2VUb2RheVdlYXRoZXIgfSBmcm9tICdAaG9va3MnO1xuaW1wb3J0IHsgVG9kYXlXZWF0aGVySW1hZ2UsIFRvZGF5V2VhdGhlclRleHQsIFRvZGF5V2VhdGhlcldyYXBwZXIgfSBmcm9tICcuL3N0eWxlZCc7XG5leHBvcnQgdmFyIFRvZGF5V2VhdGhlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2EgPSB1c2VUb2RheVdlYXRoZXIoKSwgdG9kYXlXZWF0aGVyID0gX2EudG9kYXlXZWF0aGVyLCByZXBsYWNlQ29udGVudCA9IF9hLnJlcGxhY2VDb250ZW50O1xuICAgIGlmIChyZXBsYWNlQ29udGVudCAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gX2pzeChUb2RheVdlYXRoZXJXcmFwcGVyLCBfX2Fzc2lnbih7IFwiZGF0YS10ZXN0LWlkXCI6IFwidG9kYXktd2VhdGhlci1zcGlubmVyLXdyYXBwZXJcIiB9LCB7IGNoaWxkcmVuOiByZXBsYWNlQ29udGVudCB9KSk7XG4gICAgfVxuICAgIGlmICh0b2RheVdlYXRoZXIgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciB3ZWF0aGVyID0gdG9kYXlXZWF0aGVyLndlYXRoZXIsIG1haW4gPSB0b2RheVdlYXRoZXIubWFpbiwgbmFtZSA9IHRvZGF5V2VhdGhlci5uYW1lO1xuICAgIHZhciBfYiA9IHdlYXRoZXJbMF0sIGljb24gPSBfYi5pY29uLCBkZXNjcmlwdGlvbiA9IF9iLmRlc2NyaXB0aW9uO1xuICAgIHZhciBmZWVsc0xpa2UgPSBtYWluLmZlZWxzX2xpa2UsIHRlbXAgPSBtYWluLnRlbXA7XG4gICAgcmV0dXJuIChfanN4cyhUb2RheVdlYXRoZXJXcmFwcGVyLCBfX2Fzc2lnbih7IFwiZGF0YS10ZXN0LWlkXCI6IFwidG9kYXktd2VhdGhlci13cmFwcGVyXCIgfSwgeyBjaGlsZHJlbjogW19qc3goVG9kYXlXZWF0aGVyVGV4dCwgX19hc3NpZ24oeyBcImRhdGEtdGVzdC1pZFwiOiBcInRvZGF5LXdlYXRoZXItdGl0bGVcIiB9LCB7IGNoaWxkcmVuOiBcIlRvZGF5XCIgfSkpLCBfanN4KFRvZGF5V2VhdGhlclRleHQsIF9fYXNzaWduKHsgXCJkYXRhLXRlc3QtaWRcIjogXCJ0b2RheS13ZWF0aGVyLXRleHRcIiB9LCB7IGNoaWxkcmVuOiBuYW1lIH0pKSwgX2pzeChUb2RheVdlYXRoZXJJbWFnZSwgeyBcImRhdGEtdGVzdC1pZFwiOiBcInRvZGF5LXdlYXRoZXItaW1hZ2VcIiwgc3JjOiBcImh0dHBzOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93bi9cIi5jb25jYXQoaWNvbiwgXCJAMngucG5nXCIpLCBhbHQ6IGRlc2NyaXB0aW9uLCB0aXRsZTogZGVzY3JpcHRpb24gfSksIF9qc3goVG9kYXlXZWF0aGVyVGV4dCwgeyBjaGlsZHJlbjogZGVzY3JpcHRpb24gfSksIF9qc3hzKFRvZGF5V2VhdGhlclRleHQsIHsgY2hpbGRyZW46IFt0ZW1wLnRvRml4ZWQoMCksIFwiXFx1MDBCMFwiXSB9KSwgX2pzeHMoVG9kYXlXZWF0aGVyVGV4dCwgeyBjaGlsZHJlbjogW1wiZmVlbHMgbGlrZSBcIiwgZmVlbHNMaWtlLnRvRml4ZWQoMCksIFwiXFx1MDBCMFwiXSB9KV0gfSkpKTtcbn07XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgZmV0Y2hUb2RheVdlYXRoZXIsIHNlbGVjdExvY2F0aW9uLCBzZWxlY3RUb2RheVdlYXRoZXIsIHNlbGVjdFRvZGF5V2VhdGhlckxvYWRpbmdTdGF0dXMsIHNldExvY2F0aW9uLCB9IGZyb20gJ0BzdG9yZSc7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnQGNvbXBvbmVudHMnO1xuaW1wb3J0IHsgTE9BRElOR19TVEFUVVMsIFNQSU5ORVJfU0laRSB9IGZyb20gJ0Bjb25zdGFudHMnO1xuaW1wb3J0IHsgdXNlQ3VycmVudExvY2F0aW9uIH0gZnJvbSAnLi91c2VDdXJyZW50TG9jYXRpb24nO1xuZXhwb3J0IHZhciB1c2VUb2RheVdlYXRoZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICB2YXIgdG9kYXlXZWF0aGVyID0gdXNlU2VsZWN0b3Ioc2VsZWN0VG9kYXlXZWF0aGVyKTtcbiAgICB2YXIgdG9kYXlXZWF0aGVyTG9hZGluZ1N0YXR1cyA9IHVzZVNlbGVjdG9yKHNlbGVjdFRvZGF5V2VhdGhlckxvYWRpbmdTdGF0dXMpO1xuICAgIHZhciBzZWxlY3RlZExvY2F0aW9uID0gdXNlU2VsZWN0b3Ioc2VsZWN0TG9jYXRpb24pO1xuICAgIHZhciBsb2NhdGlvbiA9IHVzZUN1cnJlbnRMb2NhdGlvbigpLmxvY2F0aW9uO1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChsb2NhdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZGlzcGF0Y2goc2V0TG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgICAgfVxuICAgIH0sIFtsb2NhdGlvbl0pO1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzZWxlY3RlZExvY2F0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChmZXRjaFRvZGF5V2VhdGhlcihzZWxlY3RlZExvY2F0aW9uKSk7XG4gICAgICAgIH1cbiAgICB9LCBbc2VsZWN0ZWRMb2NhdGlvbl0pO1xuICAgIGlmIChzZWxlY3RlZExvY2F0aW9uID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b2RheVdlYXRoZXI6IHRvZGF5V2VhdGhlcixcbiAgICAgICAgICAgIHJlcGxhY2VDb250ZW50OiBfanN4KFwicFwiLCB7IGNoaWxkcmVuOiBcIlxcdTA0MTJcXHUwNDRCIFxcdTA0M0VcXHUwNDQyXFx1MDQzQVxcdTA0MzBcXHUwNDM3XFx1MDQzMFxcdTA0M0JcXHUwNDM4XFx1MDQ0MVxcdTA0NEMgXFx1MDQzRVxcdTA0NDIgXFx1MDQzRVxcdTA0MzFcXHUwNDQwXFx1MDQzMFxcdTA0MzFcXHUwNDNFXFx1MDQ0MlxcdTA0M0FcXHUwNDM4IFxcdTA0MzJcXHUwNDMwXFx1MDQ0OFxcdTA0MzVcXHUwNDM5IFxcdTA0MzNcXHUwNDM1XFx1MDQzRVxcdTA0M0JcXHUwNDNFXFx1MDQzQVxcdTA0MzBcXHUwNDQ2XFx1MDQzOFxcdTA0MzguIFxcdTA0MTJcXHUwNDRCXFx1MDQzMVxcdTA0MzVcXHUwNDQwXFx1MDQzOFxcdTA0NDJcXHUwNDM1IFxcdTA0MzNcXHUwNDNFXFx1MDQ0MFxcdTA0M0VcXHUwNDM0XCIgfSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICh0b2RheVdlYXRoZXJMb2FkaW5nU3RhdHVzID09PSBMT0FESU5HX1NUQVRVUy5MT0FESU5HKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b2RheVdlYXRoZXI6IHRvZGF5V2VhdGhlcixcbiAgICAgICAgICAgIHJlcGxhY2VDb250ZW50OiBfanN4KFNwaW5uZXIsIHsgc2l6ZTogU1BJTk5FUl9TSVpFLkxBUkdFIH0pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4geyB0b2RheVdlYXRoZXI6IHRvZGF5V2VhdGhlciwgcmVwbGFjZUNvbnRlbnQ6IG51bGwgfTtcbn07XG4iLCJleHBvcnQgdmFyIGNvbG9ycyA9IHtcbiAgICB3aGl0ZTogJyNGRkZGRkYnLFxuICAgIHRyYW5zcGFyZW50V2hpdGU6ICdyZ2JhKDIxNywgMjE3LCAyMTcsIDAuMyknLFxuICAgIGJsdWU6ICdyZ2IoMjYsIDExNSwgMjMyKScsXG4gICAgYmxhY2s6ICcjMDAwMDAwJyxcbiAgICBsaWdodEJsYWNrOiAnIzIyMjgzMScsXG59O1xuZXhwb3J0IHZhciBib3JkZXJSYWRpdXMgPSBbNSwgMTAsIDIwXTtcbmV4cG9ydCB2YXIgd2lkdGggPSBbOTAsIDExMTAsIDEwMCwgNjBdO1xuZXhwb3J0IHZhciBoZWlnaHQgPSBbMzAsIDk3NCwgMTAwLCAzOCwgMzAwLCA2MF07XG5leHBvcnQgdmFyIHBhZGRpbmcgPSBbNTAsIDcwLCAxNSwgMTAsIDVdO1xuZXhwb3J0IHZhciBmb250U2l6ZSA9IFsxNywgMjAsIDE5LCAyNSwgMzAsIDQxLCAxMl07XG5leHBvcnQgdmFyIGdhcHMgPSBbMjgsIDM2LCAzOSwgNDgsIDU4LCAxMF07XG5leHBvcnQgdmFyIG1hcmdpbiA9IFsyMCwgMjUwLCAxNTBdO1xuZXhwb3J0IHZhciBibHVyID0gWzcuNV07XG5leHBvcnQgdmFyIHRyYW5zaXRpb24gPSB7XG4gICAgbGlnaHQ6ICdhbGwgMC4ycyBlYXNlJyxcbn07XG5leHBvcnQgdmFyIGJyZWFrcG9pbnRzID0ge1xuICAgIHhsOiAxMDAwLFxufTtcbmV4cG9ydCB2YXIgdGhlbWUgPSB7XG4gICAgY29sb3JzOiBjb2xvcnMsXG4gICAgYm9yZGVyUmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgZm9udFNpemU6IGZvbnRTaXplLFxuICAgIGdhcHM6IGdhcHMsXG4gICAgbWFyZ2luOiBtYXJnaW4sXG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICAgIGJsdXI6IGJsdXIsXG4gICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbn07XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgeyB0aGVtZSwgR2xvYmFsU3R5bGVzIH0gZnJvbSAnQHRoZW1lJztcbmltcG9ydCB7IFJvb3QgfSBmcm9tICdAY29tcG9uZW50cyc7XG5leHBvcnQgdmFyIEFwcCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKF9qc3hzKFRoZW1lUHJvdmlkZXIsIF9fYXNzaWduKHsgdGhlbWU6IHRoZW1lIH0sIHsgY2hpbGRyZW46IFtfanN4KEdsb2JhbFN0eWxlcywge30pLCBfanN4KFJvb3QsIHt9KV0gfSkpKTtcbn07XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgUGVyc2lzdEdhdGUgfSBmcm9tICdyZWR1eC1wZXJzaXN0L2ludGVncmF0aW9uL3JlYWN0JztcbmltcG9ydCB7IEVycm9yQm91bmRhcnkgfSBmcm9tICdAY29tcG9uZW50cyc7XG5pbXBvcnQgeyBzdG9yZSwgcGVyc2lzdG9yIH0gZnJvbSAnQHN0b3JlJztcbmltcG9ydCB7IEFwcCB9IGZyb20gJy4vQXBwJztcbnZhciBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xuaWYgKGNvbnRhaW5lciA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ29udGFpbmVyIGVsZW1lbnQgbm90IGZvdW5kJyk7XG59XG52YXIgcm9vdCA9IGNyZWF0ZVJvb3QoY29udGFpbmVyKTtcbnJvb3QucmVuZGVyKF9qc3goUHJvdmlkZXIsIF9fYXNzaWduKHsgc3RvcmU6IHN0b3JlIH0sIHsgY2hpbGRyZW46IF9qc3goUGVyc2lzdEdhdGUsIF9fYXNzaWduKHsgbG9hZGluZzogbnVsbCwgcGVyc2lzdG9yOiBwZXJzaXN0b3IgfSwgeyBjaGlsZHJlbjogX2pzeChFcnJvckJvdW5kYXJ5LCB7IGNoaWxkcmVuOiBfanN4KEFwcCwge30pIH0pIH0pKSB9KSkpO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuXG5mdW5jdGlvbiBQcm92aWRlcih7XG4gIHN0b3JlLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgc2VydmVyU3RhdGVcbn0pIHtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZTogc2VydmVyU3RhdGUgPyAoKSA9PiBzZXJ2ZXJTdGF0ZSA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0sIFtzdG9yZSwgc2VydmVyU3RhdGVdKTtcbiAgY29uc3QgcHJldmlvdXNTdGF0ZSA9IHVzZU1lbW8oKCkgPT4gc3RvcmUuZ2V0U3RhdGUoKSwgW3N0b3JlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHN1YnNjcmlwdGlvblxuICAgIH0gPSBjb250ZXh0VmFsdWU7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIGNvbnN0IENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0OyAvLyBAdHMtaWdub3JlICdBbnlBY3Rpb24nIGlzIGFzc2lnbmFibGUgdG8gdGhlIGNvbnN0cmFpbnQgb2YgdHlwZSAnQScsIGJ1dCAnQScgY291bGQgYmUgaW5zdGFudGlhdGVkIHdpdGggYSBkaWZmZXJlbnQgc3VidHlwZVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyJdLCJuYW1lcyI6WyJnYXBpIiwid2luZG93IiwiX2JzIiwiRGF0ZSIsImdldFRpbWUiLCJhYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImEiLCJiIiwiYyIsIkFycmF5IiwicHJvdG90eXBlIiwidmFsdWUiLCJkYSIsImdsb2JhbFRoaXMiLCJzZWxmIiwiZyIsImxlbmd0aCIsIk1hdGgiLCJFcnJvciIsImVhIiwidGhpcyIsImZhIiwic3BsaXQiLCJkIiwiZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiaGEiLCJkb25lIiwiZiIsImJhIiwidG9TdHJpbmciLCJUeXBlRXJyb3IiLCJTeW1ib2wiLCJpYSIsIm5leHQiLCJpdGVyYXRvciIsImphIiwiU3RyaW5nIiwibSIsImthIiwiaXNBcnJheSIsImxhIiwiY2FsbCIsImFwcGx5IiwiYmluZCIsImFyZ3VtZW50cyIsIm1hIiwic2xpY2UiLCJ1bnNoaWZ0IiwibmEiLCJGdW5jdGlvbiIsImluZGV4T2YiLCJvYSIsImNvbnN0cnVjdG9yIiwiQSIsImgiLCJwYSIsInFhIiwidHJ1c3RlZFR5cGVzIiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsImNyZWF0ZVNjcmlwdCIsImNyZWF0ZVNjcmlwdFVSTCIsImNvbnNvbGUiLCJlcnJvciIsIm1lc3NhZ2UiLCJxIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzdGFjayIsIm5hbWUiLCJyYSIsInNhIiwidGEiLCJ1YSIsInZhIiwieGEiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJFbGVtZW50IiwiTG9jYXRpb24iLCJkaXNwbGF5TmFtZSIsInlhIiwidCIsIlAiLCJ6YSIsImNhIiwiQWEiLCJKIiwiSCIsIkJhIiwidiIsIk4iLCJDYSIsIkRhIiwiRWEiLCJGYSIsInRlc3QiLCJ3IiwiTSIsIkdhIiwiSGEiLCJJYSIsImVtcHR5SFRNTCIsIkphIiwiTUFUSCIsIlNDUklQVCIsIlNUWUxFIiwiU1ZHIiwiVEVNUExBVEUiLCJLYSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsImlubmVySFRNTCIsInBhcmVudEVsZW1lbnQiLCJ4IiwieiIsIkxhIiwibG9jYXRpb24iLCJNYSIsIk5hIiwiT2EiLCJQYSIsInNvcnQiLCJwdXNoIiwiUWEiLCJSYSIsIlNhIiwiVWEiLCJWYSIsIldhIiwicmVwbGFjZSIsIkIiLCJjcmVhdGUiLCJDIiwiaGFzT3duUHJvcGVydHkiLCJYYSIsImtleXMiLCJEIiwiWWEiLCJzZXRUaW1lb3V0IiwiRSIsIkYiLCJSZWdFeHAiLCJleGVjIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiWmEiLCJzb3VyY2UiLCIkYSIsImFiIiwiYmIiLCJjYiIsIkkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b1VwcGVyQ2FzZSIsIm1hdGNoIiwicXVlcnkiLCJkYiIsImpvaW4iLCJlYiIsImZiIiwiZ2IiLCJoYiIsInN1YnN0ciIsImhyZWYiLCJ0YWdOYW1lIiwibGFzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJwYXJlbnROb2RlIiwiaWIiLCJqYiIsImtiIiwicmVhZHlTdGF0ZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm5iIiwibGIiLCJtYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsIm9iIiwicGIiLCJidXR0b24iLCJkaXYiLCJzcGFuIiwiSyIsInFiIiwiZHBvIiwicmIiLCJzYiIsInRiIiwiUFEiLCJ1YiIsInZiIiwid2IiLCJ4YiIsInliIiwiciIsIkwiLCJBYiIsInpiIiwiQmIiLCJPIiwiY29uY2F0IiwidSIsIkNiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJLYiIsInNoaWZ0IiwiSGIiLCJJYiIsIkpiIiwiTmIiLCJMYiIsIk1iIiwicGF0aFByZWZpeCIsInZlcnNpb24iLCJTIiwiWiIsImNoYXJBdCIsInN1YnN0cmluZyIsIk9iIiwiUGIiLCJRYiIsImRlY29kZVVSSSIsIlJiIiwiU2IiLCJUYiIsIm5vbmNlIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsIldiIiwiVWIiLCJlbmNvZGVVUkkiLCJ3cml0ZSIsIlZiIiwic2V0QXR0cmlidXRlIiwiYXN5bmMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluc2VydEJlZm9yZSIsImhlYWQiLCJib2R5IiwiZG9jdW1lbnRFbGVtZW50IiwiWGIiLCJfYyIsIlpiIiwiWWIiLCJhYyIsImNhbGxiYWNrIiwiayIsImhpbnQiLCJWIiwibCIsIm4iLCIkYiIsImNvbmZpZyIsInRpbWVvdXQiLCJvbnRpbWVvdXQiLCJvbmVycm9yIiwicCIsImNsZWFyVGltZW91dCIsInkiLCJ1cGRhdGUiLCJHIiwid2EiLCJUYSIsInN5bmMiLCJfX19nYXBpc3luYyIsImhlZSIsImhlbCIsIl9fX2pzbCIsImhlZm4iLCJsb2FkIiwiYmMiLCJjYyIsImNmZyIsImRjIiwiZWMiLCJjaGFyQ29kZUF0IiwiSlNPTiIsInBhcnNlIiwiZmMiLCJfX19nb2MiLCJwb3AiLCJnYyIsIl9fX2djZmciLCJfX19ndSIsInNjcmlwdHMiLCJzcmMiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInRleHRDb250ZW50IiwiaW5uZXJUZXh0IiwiUSIsImhjIiwiaWMiLCJfX0dPT0dMRUFQSVMiLCJnb29nbGVhcGlzIiwiamMiLCJjbGllbnRpZCIsImNvb2tpZXBvbGljeSIsIm9wZW5pZHJlYWxtIiwiaW5jbHVkZWdyYW50ZWRzY29wZXMiLCJyZXF1ZXN0dmlzaWJsZWFjdGlvbnMiLCJzY29wZSIsImtjIiwibGMiLCJtYyIsInRvTG93ZXJDYXNlIiwibGFzdEluZGV4T2YiLCJjb250ZW50IiwidG9wIiwibmMiLCJvYyIsInBjIiwibG9nIiwicWMiLCJyYyIsIlIiLCJzYyIsInRjIiwic3RhdGUiLCJ1YyIsInZjIiwid2MiLCJ4YyIsIl9fWF9HT09HX0FVVEhVU0VSIiwiZ29vZ2xlIiwiYXV0aHVzZXIiLCJ5YyIsInpjIiwiVCIsIlUiLCJBYyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJXIiwidG9KU09OIiwiTnVtYmVyIiwiaXNOYU4iLCJ0b0lTT1N0cmluZyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsIlZjIiwiV2MiLCJYYyIsImV2YWwiLCJZYyIsInN0cmluZ2lmeSIsIlpjIiwiJGMiLCJhZCIsImJkIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiY2QiLCJqIiwiZGQiLCJvIiwicmVzZXQiLCJlZCIsImRpZ2VzdCIsImZkIiwiZ2QiLCJjcnlwdG8iLCJoZCIsImlkIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsImV2ZW50Iiwic2NyZWVuWCIsImNsaWVudFgiLCJzY3JlZW5ZIiwiY2xpZW50WSIsIm9kIiwidW5lc2NhcGUiLCJmbG9vciIsImdldFJhbmRvbVZhbHVlcyIsInNjcmVlbiIsIndpZHRoIiwiaGVpZ2h0IiwiY29va2llIiwicmFuZG9tIiwicGQiLCJwYXJzZUludCIsInBvdyIsInFkIiwiVWludDMyQXJyYXkiLCJyZCIsIm9ubCIsInNkIiwib25sb2FkIiwidGQiLCJ1ZCIsInZkIiwiYWxsb3d0cmFuc3BhcmVuY3kiLCJmcmFtZWJvcmRlciIsImhzcGFjZSIsIm1hcmdpbmhlaWdodCIsIm1hcmdpbndpZHRoIiwic2Nyb2xsaW5nIiwic3R5bGUiLCJ0YWJpbmRleCIsInZzcGFjZSIsIndkIiwieGQiLCJ5ZCIsInpkIiwiYWxsIiwiYmVmb3JlTm9kZSIsImRvbnRjbGVhciIsInByZXZpb3VzU2libGluZyIsImFsbG93VHJhbnNwYXJlbmN5IiwiQWQiLCJCZCIsIkNkIiwic29jaWFsaG9zdCIsImN0eF9zb2NpYWxob3N0Iiwic2Vzc2lvbl9pbmRleCIsInNlc3Npb25fZGVsZWdhdGUiLCJzZXNzaW9uX3ByZWZpeCIsImltX3ByZWZpeCIsIkRkIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJzZSIsIklkIiwicG9zdCIsIkpkIiwiS2QiLCJMZCIsIk1kIiwiYWN0aW9uIiwiaGwiLCJvcmlnaW4iLCJwcm90b2NvbCIsImhvc3QiLCJleHAiLCJ1cmwiLCJnd2lkZ2V0IiwiZWNwIiwiSUxJIiwiaWxvYWRlciIsImdzcmMiLCJfbWV0aG9kcyIsIk5kIiwiUGQiLCJub2RlTmFtZSIsImF0dHJpYnV0ZXMiLCJzcGVjaWZpZWQiLCJPZCIsIlJkIiwiZHJ3IiwidHlwZSIsInVzZXJQYXJhbXMiLCJnZXRFbGVtZW50QnlJZCIsInJpIiwiUWQiLCJvaWQiLCJTZCIsIlRkIiwiWCIsIlVkIiwiVmQiLCJXZCIsIlhkIiwicGx1c29uZSIsImF1dG9jb21wbGV0ZSIsInByb2ZpbGUiLCJzaWduaW4iLCJzaWduaW4yIiwiWmQiLCJZZCIsImRvY3VtZW50TW9kZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjbGFzc05hbWUiLCIkZCIsInJlbW92ZUF0dHJpYnV0ZSIsImFlIiwiYmUiLCJjZSIsImRlIiwiZ28iLCJyZW5kZXIiLCJlZSIsImZlIiwiZ2UiLCJpZnJhbWVOb2RlIiwiaGUiLCJhbGxvd1Bvc3QiLCJjc3NUZXh0Iiwic2l0ZUVsZW1lbnQiLCJmb3JjZVBvc3QiLCJob3N0aWVtb2RlIiwicXVlcnlQYXJhbXMiLCJmcmFnbWVudFBhcmFtcyIsInBmbmFtZSIsIl9nZmlkIiwicGFyZW50IiwiY29ubmVjdFdpdGhKc29uUGFyYW0iLCJqY3AiLCJycGN0b2tlbiIsInJvdW5kIiwiY29ubmVjdFdpdGhRdWVyeVBhcmFtcyIsImJzaCIsIl9ic2giLCJqc2giLCJoaW50SW5GcmFnbWVudCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJldXJsIiwiZHJvcERhdGFQb3N0b3JpZ2luIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJtZXRob2QiLCJ0YXJnZXQiLCJkaXNwbGF5Iiwic3VibWl0IiwiY2xvc2UiLCJpZSIsImplIiwiYW5ub3RhdGlvbiIsImJpbW9kYWwiLCJfcGwiLCJrZSIsImxlIiwibWUiLCJuZSIsImRhdGEiLCJvZSIsInBlIiwicyIsIm5leHRTaWJsaW5nIiwidGV4dEluZGVudCIsIm1hcmdpbiIsInBhZGRpbmciLCJiYWNrZ3JvdW5kIiwiYm9yZGVyU3R5bGUiLCJjc3NGbG9hdCIsInN0eWxlRmxvYXQiLCJsaW5lSGVpZ2h0IiwiZm9udFNpemUiLCJ2ZXJ0aWNhbEFsaWduIiwicG9zaXRpb24iLCJsZWZ0IiwidmlzaWJpbGl0eSIsInFlIiwibWF4QWdlIiwiZG9tYWluIiwicGF0aCIsImdhIiwic2VjdXJlIiwicmVhZCIsInJlIiwic2V0U2Vjb25kcyIsImdldFNlY29uZHMiLCJ0b1VUQ1N0cmluZyIsImNsZWFyIiwiaXRlcmF0ZSIsInRlIiwiWSIsInVlIiwidmUiLCJ3ZSIsImhvc3RuYW1lIiwiaSIsInhlIiwieWUiLCJ6ZSIsIkFlIiwiY2xpZW50SWQiLCJCZSIsIkNlIiwiJCIsIm1pbiIsIkRlIiwiRWUiLCJhdXRoIiwiY2xpZW50X2lkIiwic2Vzc2lvbl9zdGF0ZSIsImNoZWNrU2Vzc2lvblN0YXRlIiwic2lnbk91dCIsInNldFRva2VuIiwiX2d1c3MiLCJfcGltZiIsImdhcGlDb21wbGV0ZSIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImtleSIsImRlc2NyaXB0b3IiLCJmb3IiLCIkJHR5cGVvZiIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJTZXQiLCJhZGQiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiYXNzaWduIiwidHJpbSIsInByZXBhcmVTdGFja1RyYWNlIiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImluY2x1ZGVzIiwidGFnIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiX3ZhbHVlVHJhY2tlciIsImdldCIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiY2hlY2tlZCIsImFjdGl2ZUVsZW1lbnQiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2hpbGRyZW4iLCJuYW1lc3BhY2VVUkkiLCJ2YWx1ZU9mIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInNldFByb3BlcnR5IiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiaXMiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJzdGF0ZU5vZGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25FcnJvciIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJ1bnN0YWJsZV9ub3ciLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiY2x6MzIiLCJMTjIiLCJwZW5kaW5nTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwiZXZlbnRUaW1lcyIsIk1hcCIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJkaXNwYXRjaEV2ZW50IiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJ0cmFuc2l0aW9uIiwic3RvcFByb3BhZ2F0aW9uIiwia2V5Q29kZSIsImNoYXJDb2RlIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwibm93IiwiaXNUcnVzdGVkIiwidmlldyIsImRldGFpbCIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJkYXRhVHJhbnNmZXIiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiY2xpcGJvYXJkRGF0YSIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiZnJvbUNoYXJDb2RlIiwiY29kZSIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJsaXN0ZW5lcnMiLCJvbmlucHV0IiwiZGV0YWNoRXZlbnQiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm9mZnNldCIsIkxlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk1lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJOZSIsImNvbnRlbnRFZGl0YWJsZSIsIk9lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsInN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJYZSIsIlllIiwiWmUiLCJhbmltYXRpb24iLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJsZiIsIm1mIiwibmYiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwib2YiLCJoYXMiLCJwZiIsInFmIiwicmYiLCJzZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJjaGFyIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIl9faHRtbCIsIkZmIiwiR2YiLCJIZiIsIlByb21pc2UiLCJKZiIsInF1ZXVlTWljcm90YXNrIiwicmVzb2x2ZSIsInRoZW4iLCJjYXRjaCIsIklmIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiWmYiLCIkZiIsImFnIiwiYmciLCJnZXRDaGlsZENvbnRleHQiLCJjZyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiemciLCJBZyIsIkJnIiwiZWxlbWVudFR5cGUiLCJkZWxldGlvbnMiLCJDZyIsInBlbmRpbmdQcm9wcyIsIm92ZXJmbG93IiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJEZyIsIm1vZGUiLCJFZyIsIkZnIiwiR2ciLCJtZW1vaXplZFByb3BzIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIl9jdXJyZW50VmFsdWUiLCJTZyIsImNoaWxkTGFuZXMiLCJUZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwiVWciLCJWZyIsImNvbnRleHQiLCJtZW1vaXplZFZhbHVlIiwiV2ciLCJYZyIsIllnIiwiaW50ZXJsZWF2ZWQiLCJaZyIsIiRnIiwiYWgiLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJiaCIsImNoIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJkaCIsImVoIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJqaCIsIkNvbXBvbmVudCIsInJlZnMiLCJraCIsIm5oIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwibGgiLCJtaCIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJvaCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwicGgiLCJ1cGRhdGVyIiwicWgiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJyaCIsInByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJzaCIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJ0aCIsInVoIiwidmgiLCJpbmRleCIsIndoIiwieGgiLCJ5aCIsImltcGxlbWVudGF0aW9uIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsInJldmVhbE9yZGVyIiwiTmgiLCJPaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiUGgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiZGkiLCJlaSIsImZpIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJnZXRTbmFwc2hvdCIsImxpIiwibWkiLCJuaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJvaSIsInBpIiwicWkiLCJkZXN0cm95IiwiZGVwcyIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJHaSIsIkhpIiwiSWkiLCJKaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJZCIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIldlYWtNYXAiLCJPaSIsIlBpIiwiUWkiLCJSaSIsImNvbXBvbmVudERpZENhdGNoIiwiU2kiLCJjb21wb25lbnRTdGFjayIsIlRpIiwicGluZ0NhY2hlIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJSZWFjdEN1cnJlbnRPd25lciIsIllpIiwiWmkiLCIkaSIsImFqIiwiYmoiLCJjaiIsImRqIiwiZWoiLCJiYXNlTGFuZXMiLCJjYWNoZVBvb2wiLCJ0cmFuc2l0aW9ucyIsImZqIiwiZ2oiLCJoaiIsImlqIiwiamoiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJraiIsImxqIiwicGVuZGluZ0NvbnRleHQiLCJtaiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwibmoiLCJvaiIsInBqIiwiZmFsbGJhY2siLCJxaiIsInJqIiwidGoiLCJkYXRhc2V0IiwiZGdzdCIsInVqIiwidmoiLCJfcmVhY3RSZXRyeSIsInNqIiwic3VidHJlZUZsYWdzIiwid2oiLCJ4aiIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsInlqIiwiRWoiLCJGaiIsIkdqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImF1dG9Gb2N1cyIsImNyZWF0ZVRleHROb2RlIiwiSGoiLCJJaiIsIkpqIiwiS2oiLCJMaiIsIldlYWtTZXQiLCJNaiIsIk5qIiwiT2oiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJYaiIsIllqIiwiWmoiLCJhayIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiaXNIaWRkZW4iLCJnayIsImhrIiwiaWsiLCJqayIsImtrIiwibGsiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIldrIiwibWsiLCJjZWlsIiwibmsiLCJvayIsInBrIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsIkluZmluaXR5IiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiRWsiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJjYWxsYmFja1ByaW9yaXR5IiwiaWciLCJGayIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJMayIsIk1rIiwiTmsiLCJPayIsIlBrIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlFrIiwidGltZW91dEhhbmRsZSIsIlJrIiwiU2siLCJUayIsIlVrIiwiVmsiLCJtdXRhYmxlUmVhZExhbmVzIiwiUGoiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIlhrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiWWsiLCJaayIsImFsIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImJsIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImNsIiwiY2FjaGUiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZWwiLCJmbCIsImdsIiwiaWwiLCJqbCIsInpqIiwiJGsiLCJsbCIsInJlcG9ydEVycm9yIiwibWwiLCJfaW50ZXJuYWxSb290IiwibmwiLCJvbCIsInBsIiwicWwiLCJzbCIsInJsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwic3BsaWNlIiwiZm9ybSIsInRsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidWwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwidmwiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRFcnJvckhhbmRsZXIiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwid2wiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImRsIiwiY3JlYXRlUm9vdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsImh5ZHJhdGUiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJlcnIiLCJnZXRNb2R1bGVJZCIsIl9fc2VsZiIsIl9fc291cmNlIiwianN4IiwianN4cyIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJlc2NhcGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImRlZmF1bHQiLCJDaGlsZHJlbiIsIm1hcCIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInN0YXJ0VHJhbnNpdGlvbiIsInVuc3RhYmxlX2FjdCIsIlBMQUNFSE9MREVSX1VOREVGSU5FRCIsIlBBQ0tBR0VfTkFNRSIsIl9fcmVzdCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZ2V0UGVyc2lzdENvbmZpZyIsImdldFRyYW5zZm9ybXMiLCJjcmVhdGVCbGFja2xpc3QiLCJjcmVhdGVXaGl0ZWxpc3QiLCJhdXRvTWVyZ2VEZWVwIiwidXRpbHNfMSIsImNvbnN0YW50c18xIiwidHlwZXNfMSIsImNyZWF0ZVRyYW5zZm9ybSIsImluYm91bmQiLCJvdXRib3VuZCIsIndoaXRlbGlzdCIsIndoaXRlbGlzdEJsYWNrbGlzdENoZWNrIiwiaW4iLCJmdWxsU3RhdGUiLCJvdXQiLCJkZWVwUGVyc2lzdEtleSIsImluYm91bmRTdGF0ZSIsIm9yaWdpbmFsU3RhdGUiLCJyZWR1Y2VkU3RhdGUiLCJkZWJ1ZyIsInRyYW5zZm9ybXMiLCJ0cmFuc2Zvcm1zVmFsaWRhdG9yIiwibmV3U3RhdGUiLCJjbG9uZURlZXAiLCJ0b1JlaHlkcmF0ZVN0YXRlIiwiaXNPYmplY3RMaWtlIiwiZGlmZiIsImRpZmZlcmVuY2UiLCJpc0VtcHR5IiwibWVyZ2VEZWVwIiwicHJlc2VydmVVbmRlZmluZWQiLCJzaW5nbGVUcmFuc2Zvcm1WYWxpZGF0b3IiLCJDb25maWdUeXBlIiwiV0hJVEVMSVNUIiwiaW5ib3VuZFRvUGVyc2lzdCIsInN0YXRlUGF0aCIsInBhdGhBcnJheSIsImlzSW50ZWdlclN0cmluZyIsImFzc29jUmVzdWx0IiwiYXNzb2NQYXRoIiwiaW5pdGlhbCIsInByZXNlcnZlUGxhY2Vob2xkZXIiLCJvdXRib3VuZFN0YXRlIiwiQkxBQ0tMSVNUIiwicmVkdWNlIiwiZGlzc29jUGF0aCIsImxpc3QiLCJyb290T2JqZWN0IiwicGF0aHMiLCJfYSIsInN0b3JhZ2UiLCJyb290UmVkdWNlciIsInJlc3QiLCJjb25maWdWYWxpZGF0b3IiLCJ3aGl0ZWxpc3RCeVJvb3RLZXlzIiwiZ2V0Um9vdEtleXNHcm91cCIsImJsYWNrbGlzdEJ5Um9vdEtleXMiLCJhbGxSb290S2V5cyIsInVuZGVmaW5lZCIsIndoaXRlbGlzdFJvb3RLZXlzIiwiYmxhY2tsaXN0Um9vdEtleXMiLCJrZXlzVG9FeGNsdWRlIiwiZmlsdGVyIiwid2hpdGVsaXN0VHJhbnNmb3JtcyIsImJsYWNrbGlzdFRyYW5zZm9ybXMiLCJleGNsdWRlZEtleXNUcmFuc2Zvcm1zIiwic3RhdGVSZWNvbmNpbGVyIiwidGhyb3dFcnJvciIsImZpbmREdXBsaWNhdGVzQW5kU3Vic2V0cyIsInVuaXF1ZSIsIl9jbG9uZURlZXAiLCJnZXRDaXJjdWxhclBhdGgiLCJpc0RhdGUiLCJpc1N0cmluZyIsImlzUGxhaW5PYmplY3QiLCJpc0xlbmd0aCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJpdGVtIiwib2JqIiwic2VlbiIsImN1cnJlbnRQYXRoIiwibmV3T2JqIiwibmV3VmFsdWUiLCJkZWxldGVkVmFsdWVzIiwiYWNjIiwicmVzdWx0IiwiX3BlcnNpc3QiLCJjdXJyIiwicGFyc2VkQ3VyciIsInJldmVyc2UiLCJwbGFjZWhvbGRlciIsImNsb25lIiwiX21lcmdlRGVlcCIsInNvdXJjZXMiLCJzb3VyY2VWYWx1ZSIsIl9wcmVzZXJ2ZVVuZGVmaW5lZCIsInBhdGhzQXJyYXkiLCJwcmV2UGF0aCIsInByZXNlcnZlQXNQbGFjZWhvbGRlciIsImJlbG9uZ3NUb0FycmF5IiwicGF0aFN0cmluZyIsImVudGl0aWVzIiwiZmlsdGVyZWREdXBsaWNhdGVzIiwiaW5uZXIiLCJmaWx0ZXJlZFN1YnNldHMiLCJkdXBsaWNhdGVzIiwic3Vic2V0cyIsImZvdW5kRHVwbGljYXRlcyIsImZvdW5kU3Vic2V0cyIsImxpc3RUeXBlIiwiY29tbW9uRXJyb3JNc2cxIiwiY29tbW9uRXJyb3JNc2cyIiwicm9vdEtleSIsImV4aXN0aW5nRWxlbWVudCIsImVudGl0eSIsImV4aXN0aW5nVmFsdWUiLCJ2YWx1ZXMiLCJfX2VzTW9kdWxlIiwiX2dldFN0b3JhZ2UiLCJnZXRJdGVtIiwicmVqZWN0Iiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJfdHlwZW9mIiwibm9vcCIsInN0b3JhZ2VUeXBlIiwidGVzdEtleSIsImhhc1N0b3JhZ2UiLCJub29wU3RvcmFnZSIsIl9kZWZhdWx0Iiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwib2JqQSIsIm9iakIiLCJjb21wYXJlQ29udGV4dCIsInJldCIsImtleXNBIiwia2V5c0IiLCJiSGFzT3duUHJvcGVydHkiLCJpZHgiLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJpbnN0IiwidXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IiLCJoYXNWYWx1ZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkZWZpbml0aW9uIiwicHJvcCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJjdXJyZW50U2NyaXB0IiwiYmF0Y2giLCJnZXRCYXRjaCIsInJlZkVxdWFsaXR5IiwiY3JlYXRlU2VsZWN0b3JIb29rIiwidXNlUmVkdXhDb250ZXh0Iiwic2VsZWN0b3IiLCJlcXVhbGl0eUZuIiwic3RvcmUiLCJzdWJzY3JpcHRpb24iLCJnZXRTZXJ2ZXJTdGF0ZSIsInNlbGVjdGVkU3RhdGUiLCJhZGROZXN0ZWRTdWIiLCJnZXRTdGF0ZSIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJjcmVhdGVTdG9yZUhvb2siLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VTdG9yZSIsIm5ld0JhdGNoIiwiX2RlZmluZVByb3BlcnRpZXMiLCJfZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsIl9zZXRQcm90b3R5cGVPZiIsIl9kZWZpbmVQcm9wZXJ0eSIsImZuIiwiaW5pdGlhbGl6ZVVzZVNlbGVjdG9yIiwiaW5pdGlhbGl6ZUNvbm5lY3QiLCJQZXJzaXN0R2F0ZSIsIl9QdXJlQ29tcG9uZW50IiwiX2dldFByb3RvdHlwZU9mMiIsIl90aGlzIiwiQ29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImJvb3RzdHJhcHBlZCIsInBlcnNpc3RvciIsIm9uQmVmb3JlTGlmdCIsImZpbmFsbHkiLCJfdW5zdWJzY3JpYmUiLCJwcm90b1Byb3BzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2luaGVyaXRzIiwic3Vic2NyaWJlIiwiaGFuZGxlUGVyc2lzdG9yU3RhdGUiLCJsb2FkaW5nIiwicHJlZml4IiwidXNlIiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJXZWJraXRMaW5lQ2xhbXAiLCJhcmciLCJyZWFjdFByb3BzUmVnZXgiLCJmcmVlemUiLCJfIiwic3R5bGVkQ29tcG9uZW50SWQiLCJwcm9jZXNzIiwiUkVBQ1RfQVBQX1NDX0FUVFIiLCJTQ19BVFRSIiwiQm9vbGVhbiIsIlNDX0RJU0FCTEVfU1BFRURZIiwiUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZIiwiZ3JvdXBTaXplcyIsImluZGV4T2ZHcm91cCIsImluc2VydFJ1bGVzIiwiaW5zZXJ0UnVsZSIsImNsZWFyR3JvdXAiLCJkZWxldGVSdWxlIiwiZ2V0R3JvdXAiLCJnZXRSdWxlIiwicmVnaXN0ZXJOYW1lIiwiZ2V0VGFnIiwiY2hpbGROb2RlcyIsImhhc0F0dHJpYnV0ZSIsInNoZWV0Iiwic3R5bGVTaGVldHMiLCJvd25lck5vZGUiLCJjc3NSdWxlcyIsIm5vZGVzIiwicnVsZXMiLCJpc1NlcnZlciIsInVzZUNTU09NSW5qZWN0aW9uIiwiZ3MiLCJuYW1lcyIsInNlcnZlciIsInJlZ2lzdGVySWQiLCJyZWNvbnN0cnVjdFdpdGhPcHRpb25zIiwiYWxsb2NhdGVHU0luc3RhbmNlIiwiaGFzTmFtZUZvcklkIiwiY2xlYXJOYW1lcyIsImNsZWFyUnVsZXMiLCJjbGVhclRhZyIsImFicyIsInN0YXRpY1J1bGVzSWQiLCJpc1N0YXRpYyIsImNvbXBvbmVudElkIiwiYmFzZUhhc2giLCJiYXNlU3R5bGUiLCJnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyIsImhhc2giLCJwbHVnaW5zIiwic3R5bGlzUGx1Z2lucyIsImRpc2FibGVDU1NPTUluamVjdGlvbiIsImRpc2FibGVWZW5kb3JQcmVmaXhlcyIsImdldE5hbWUiLCJfZSIsImlzQ3NzIiwidGhlbWUiLCJHZSIsImF0dHJzIiwicGFyZW50Q29tcG9uZW50SWQiLCJzaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvbmVudFN0eWxlIiwiZm9sZGVkQ29tcG9uZW50SWRzIiwiJGFzIiwiYXMiLCJ3aXRoQ29tcG9uZW50IiwiX2ZvbGRlZERlZmF1bHRQcm9wcyIsIndpdGhDb25maWciLCJjcmVhdGVTdHlsZXMiLCJyZW1vdmVTdHlsZXMiLCJyZW5kZXJTdHlsZXMiLCJfZW1pdFNoZWV0Q1NTIiwiZ2V0U3R5bGVUYWdzIiwic2VhbGVkIiwiZ2V0U3R5bGVFbGVtZW50Iiwic2VhbCIsImNvbGxlY3RTdHlsZXMiLCJpbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0iLCJ0ZW1wbGF0ZU9iamVjdF8xIiwiY29va2VkIiwicmF3IiwiTE9BRElOR19TVEFUVVMiLCJTdHlsZWRCdXR0b24iLCJib3JkZXJSYWRpdXMiLCJjb2xvcnMiLCJibGFjayIsIndoaXRlIiwibGlnaHQiLCJsaWdodEJsYWNrIiwiX19hc3NpZ24iLCJCdXR0b24iLCJjYWxlbmRhckFwaUNvbmZpZyIsImFwaUtleSIsImRpc2NvdmVyeURvY3MiLCJjYWxlbmRhckV2ZW50c0NvbmZpZyIsImNhbGVuZGFySWQiLCJ0aW1lTWluIiwic2hvd0RlbGV0ZWQiLCJzaW5nbGVFdmVudHMiLCJtYXhSZXN1bHRzIiwib3JkZXJCeSIsIlNQSU5ORVJfU0laRSIsInRpbWVMb2NhbGVPcHRpb25zIiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsImFkdmFuY2VkRGF0ZUxvY2FsZU9wdGlvbnMiLCJ3ZWVrZGF5IiwieWVhciIsImRheSIsImRheU9mV2Vla0xvY2FsZU9wdGlvbiIsIkhITU1Mb2NhbGVPcHRpb25zIiwid2VhdGhlclN0YXR1c2VzIiwiaWNvbiIsImRlc2NyaXB0aW9uIiwibWlzdCIsInNub3ciLCJ0aHVuZGVyc3Rvcm0iLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsIl9fZ2VuZXJhdG9yIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJvcCIsInVzZUN1cnJlbnRMb2NhdGlvbiIsInNldExvY2F0aW9uIiwiX2IiLCJzZXRFcnJvciIsImhhbmRsZVN1Y2Nlc3MiLCJjb29yZHMiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImxhdCIsImxvbiIsImhhbmRsZUVycm9yIiwiZ2VvbG9jYXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJLRVlfUFJFRklYIiwiRkxVU0giLCJSRUhZRFJBVEUiLCJQQVVTRSIsIlBFUlNJU1QiLCJQVVJHRSIsIlJFR0lTVEVSIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwic3ltYm9scyIsInN5bSIsImRlZmF1bHRTZXJpYWxpemUiLCJkZWZhdWx0RGVzZXJpYWxpemUiLCJzZXJpYWwiLCJ3YXJuSWZSZW1vdmVFcnJvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJwcmltIiwidG9QcmltaXRpdmUiLCJyZXMiLCJfb2JqZWN0U3ByZWFkMiIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCIkJG9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwicmFuZG9tU3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiaXNTdWJzY3JpYmVkIiwicHJvdG8iLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwiX3JlZiIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJ1bnN1YnNjcmliZSIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwibmV4dFN0YXRlIiwiX2kiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiY29tcG9zZSIsImZ1bmNzIiwiYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiYXJyMiIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJmcm9tIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImluaXRpYWxTdGF0ZSIsInJlZ2lzdHJ5IiwicGVyc2lzdG9yUmVkdWNlciIsImZpcnN0SW5kZXgiLCJubiIsInJuIiwiaXNGcm96ZW4iLCJ0biIsImVuIiwib24iLCJQcm94eSIsInJldm9jYWJsZSIsInJldm9rZSIsInByb3h5IiwiZGVsZXRlUHJvcGVydHkiLCJ1biIsInByb2R1Y2UiLCJwcm9kdWNlV2l0aFBhdGNoZXMiLCJ1c2VQcm94aWVzIiwic2V0VXNlUHJveGllcyIsImF1dG9GcmVlemUiLCJzZXRBdXRvRnJlZXplIiwiY3JlYXRlRHJhZnQiLCJmaW5pc2hEcmFmdCIsImFwcGx5UGF0Y2hlcyIsImFuIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiX18iLCJfX3NwcmVhZEFycmF5IiwidG8iLCJfX2RlZlByb3AiLCJfX2RlZlByb3BzIiwiX19nZXRPd25Qcm9wRGVzY3MiLCJfX2dldE93blByb3BTeW1ib2xzIiwiX19oYXNPd25Qcm9wIiwiX19wcm9wSXNFbnVtIiwiX19kZWZOb3JtYWxQcm9wIiwiX19zcHJlYWRWYWx1ZXMiLCJfX3NwcmVhZFByb3BzIiwiY29tcG9zZVdpdGhEZXZUb29scyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18iLCJNaWRkbGV3YXJlQXJyYXkiLCJfc3VwZXIiLCJzcGVjaWVzIiwicHJlcGVuZCIsImZyZWV6ZURyYWZ0YWJsZSIsInZhbCIsImNyZWF0ZUFjdGlvbiIsInByZXBhcmVBY3Rpb24iLCJhY3Rpb25DcmVhdG9yIiwicHJlcGFyZWQiLCJleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayIsImJ1aWxkZXJDYWxsYmFjayIsImRlZmF1bHRDYXNlUmVkdWNlciIsImFjdGlvbnNNYXAiLCJhY3Rpb25NYXRjaGVycyIsImJ1aWxkZXIiLCJhZGRDYXNlIiwidHlwZU9yQWN0aW9uQ3JlYXRvciIsImFkZE1hdGNoZXIiLCJtYXRjaGVyIiwiYWRkRGVmYXVsdENhc2UiLCJjcmVhdGVTbGljZSIsIl9yZWR1Y2VyIiwicmVkdWNlck5hbWVzIiwic2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUiLCJzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSIsImFjdGlvbkNyZWF0b3JzIiwiYnVpbGRSZWR1Y2VyIiwiZXh0cmFSZWR1Y2VycyIsIl9kIiwiX2YiLCJmaW5hbENhc2VSZWR1Y2VycyIsIm1hcE9yQnVpbGRlckNhbGxiYWNrIiwiZ2V0SW5pdGlhbFN0YXRlIiwiZmluYWxBY3Rpb25NYXRjaGVycyIsImZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyIiwiaXNTdGF0ZUZ1bmN0aW9uIiwiZnJvemVuSW5pdGlhbFN0YXRlXzEiLCJjYXNlUmVkdWNlcnMiLCJjciIsInByZXZpb3VzU3RhdGUiLCJjYXNlUmVkdWNlciIsImRyYWZ0IiwiY3JlYXRlUmVkdWNlciIsImFjdGlvbk1hdGNoZXJzXzEiLCJyZWR1Y2VyTmFtZSIsInByZXBhcmVDYWxsYmFjayIsIm1heWJlUmVkdWNlcldpdGhQcmVwYXJlIiwicHJlcGFyZSIsImFjdGlvbnMiLCJjb21tb25Qcm9wZXJ0aWVzIiwiUmVqZWN0V2l0aFZhbHVlIiwiRnVsZmlsbFdpdGhNZXRhIiwibWluaVNlcmlhbGl6ZUVycm9yIiwic2ltcGxlRXJyb3IiLCJjb21tb25Qcm9wZXJ0aWVzXzEiLCJwcm9wZXJ0eSIsInVud3JhcFJlc3VsdCIsInJlamVjdGVkV2l0aFZhbHVlIiwiY3JlYXRlQXN5bmNUaHVuazIiLCJ0eXBlUHJlZml4IiwicGF5bG9hZENyZWF0b3IiLCJyZXF1ZXN0SWQiLCJyZXF1ZXN0U3RhdHVzIiwic2VyaWFsaXplRXJyb3IiLCJhYm9ydGVkIiwiY29uZGl0aW9uIiwiQUMiLCJBYm9ydENvbnRyb2xsZXIiLCJjbGFzc18xIiwic2lnbmFsIiwib25hYm9ydCIsInJlYXNvbiIsInRocm93SWZBYm9ydGVkIiwiYWJvcnQiLCJleHRyYSIsImFib3J0UmVhc29uIiwiaWRHZW5lcmF0b3IiLCJuYW5vaWQiLCJhYm9ydENvbnRyb2xsZXIiLCJwcm9taXNlMiIsIl9fdGhpcyIsIl9fYXJndW1lbnRzIiwiZmluYWxBY3Rpb24iLCJjb25kaXRpb25SZXN1bHQiLCJhYm9ydGVkUHJvbWlzZSIsImVycl8xIiwiZ2V0UGVuZGluZ01ldGEiLCJyYWNlIiwicmVqZWN0V2l0aFZhbHVlIiwiZnVsZmlsbFdpdGhWYWx1ZSIsImRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uIiwidGhyb3ciLCJ1bndyYXAiLCJ3aXRoVHlwZXMiLCJhbG0iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjcmVhdGVTeW1ib2wiLCJDQU5DRUwiLCJDSEFOTkVMX0VORF9UWVBFIiwiTUFUQ0giLCJNVUxUSUNBU1QiLCJTRUxGX0NBTkNFTExBVElPTiIsIlRBU0tfQ0FOQ0VMIiwiVEVSTUlOQVRFIiwiU0FHQV9MT0NBVElPTiIsInVuZGVmIiwiaXQiLCJwYXR0ZXJuIiwicGF0Iiwic3ltYm9sIiwiZXZlcnkiLCJ0YWtlIiwic3RyaW5nYWJsZUZ1bmMiLCJtdWx0aWNhc3QiLCJrb25zdCIsImtUcnVlIiwiaWRlbnRpdHkiLCJhc3luY0l0ZXJhdG9yIiwiYXNzaWduV2l0aFN5bWJvbHMiLCJyZW1vdmUiLCJhcnJheSIsImtUaHJvdyIsImtSZXR1cm4iLCJtYWtlSXRlcmF0b3IiLCJ0aHJvIiwiaXNTYWdhSXRlcmF0b3IiLCJsb2dFcnJvciIsInNhZ2FTdGFjayIsImNyZWF0ZUVtcHR5QXJyYXkiLCJ3cmFwU2FnYURpc3BhdGNoIiwic2hvdWxkVGVybWluYXRlIiwic2hvdWxkQ2FuY2VsIiwic2hvdWxkQ29tcGxldGUiLCJjcmVhdGVBbGxTdHlsZUNoaWxkQ2FsbGJhY2tzIiwic2hhcGUiLCJwYXJlbnRDYWxsYmFjayIsImNvbXBsZXRlZCIsInRvdGFsQ291bnQiLCJjb21wbGV0ZWRDb3VudCIsInJlc3VsdHMiLCJjaGlsZENhbGxiYWNrcyIsImNoQ2JBdEtleSIsImlzRXJyIiwiY2FuY2VsIiwiZ2V0TWV0YUluZm8iLCJnZXRMb2NhdGlvbiIsImluc3RydW1lbnRlZCIsIk9OX09WRVJGTE9XX0VYUEFORCIsImV4cGFuZGluZyIsImluaXRpYWxTaXplIiwibGltaXQiLCJvdmVyZmxvd0FjdGlvbiIsInB1c2hJbmRleCIsInBvcEluZGV4IiwiZmx1c2giLCJpdGVtcyIsInB1dCIsImRvdWJsZWRMaW1pdCIsInJpbmdCdWZmZXIiLCJUQUtFIiwiUFVUIiwiQ0FMTCIsIkZPUksiLCJtYWtlRWZmZWN0IiwiY29tYmluYXRvciIsInBhdHRlcm5PckNoYW5uZWwiLCJtdWx0aWNhc3RQYXR0ZXJuIiwid2FybiIsImNoYW5uZWwiLCJjaGFubmVsJDEiLCJnZXRGbkNhbGxEZXNjcmlwdG9yIiwiZm5EZXNjcmlwdG9yIiwiX2xlbjMiLCJfa2V5MyIsImRlZiIsInByb21pc2UiLCJzZW1hcGhvcmUiLCJ0YXNrIiwic3VzcGVuZCIsInJlbGVhc2UiLCJhc2FwIiwiaW1tZWRpYXRlbHkiLCJwYXR0ZXJucyIsInNvbWUiLCJwcmVkaWNhdGUiLCJfcHJlZGljYXRlIiwid2lsZGNhcmQiLCJtYXRjaGVyQ3JlYXRvciIsIkVORCIsImlzRW5kIiwic3RkQ2hhbm5lbCIsImNsb3NlZCIsImN1cnJlbnRUYWtlcnMiLCJuZXh0VGFrZXJzIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dFRha2VycyIsImNoYW4iLCJ0YWtlcnMiLCJ0YWtlciIsImxlbiIsImNhbGxlZCIsIlJVTk5JTkciLCJBQk9SVEVEIiwiRE9ORSIsInJlc29sdmVQcm9taXNlIiwiY2FuY2VsUHJvbWlzZSIsIl9lZmZlY3RSdW5uZXJNYXAiLCJuZXh0U2FnYUlkIiwiY2FuY2VsU2luZ2xlVGFzayIsInRhc2tUb0NhbmNlbCIsImlzUnVubmluZyIsImVmZmVjdFJ1bm5lck1hcCIsImVudiIsIl9yZWYzIiwiX3JlZjMkY2hhbm5lbCIsIm1heWJlIiwidGFrZUNiIiwiX3JlZjExIiwiZGlnZXN0RWZmZWN0IiwiZWZmZWN0SWQiLCJfcmVmMTIiLCJyZXNwb25zZSIsImNoaWxkQ2JzIiwiX3JlZjQiLCJfcmVmNSIsInByb2MiLCJfcmVmNiIsImNwc0NiIiwiX3JlZjciLCJfcmVmOCIsImRldGFjaGVkIiwidGFza0l0ZXJhdG9yIiwicmVzb2x2ZWQiLCJjcmVhdGVUYXNrSXRlcmF0b3IiLCJnZXRJdGVyYXRvck1ldGFJbmZvIiwiYWRkVGFzayIsImlzQWJvcnRlZCIsInRhc2tPclRhc2tzIiwiX3JlZjkiLCJqb2luU2luZ2xlVGFzayIsInRhc2tUb0pvaW4iLCJqb2luZXIiLCJqb2luZXJzIiwiX3JlZjEwIiwiX3JlZjEzIiwiX3JlZjE0IiwiYnVmZmVyJDEiLCJidWZmZXIiLCJfcmVmMTUiLCJpc0NhbmNlbGxlZCIsIl9yZWYxNiIsIl9yZWYxNyIsImZvcm1hdExvY2F0aW9uIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwic2FnYUxvY2F0aW9uQXNTdHJpbmciLCJzYWdhTWV0YSIsImNhbmNlbGxlZFRhc2tzQXNTdHJpbmciLCJtYXBwZXIiLCJjYW5jZWxsZWRUYXNrcyIsImNyYXNoZWRFZmZlY3QiLCJhZGRTYWdhRnJhbWUiLCJmcmFtZSIsInNldENyYXNoZWRFZmZlY3QiLCJlZmZlY3QiLCJmaXJzdFNhZ2EiLCJvdGhlclNhZ2FzIiwiY3Jhc2hlZEVmZmVjdExvY2F0aW9uIiwiaXRlcmF0b3IkMSIsInBhcmVudENvbnRleHQiLCJwYXJlbnRFZmZlY3RJZCIsImlzUm9vdCIsImNvbnQiLCJmaW5hbFJ1bkVmZmVjdCIsImZpbmFsaXplUnVuRWZmZWN0IiwiY3VyckNiIiwiZWZmZWN0UnVubmVyIiwiZXhlY3V0aW5nQ29udGV4dCIsIm1haW5UYXNrIiwic3RhdHVzIiwiX3Rhc2siLCJ0YXNrUmVzdWx0IiwidGFza0Vycm9yIiwiZGVmZXJyZWRFbmQiLCJjYW5jZWxsZWREdWVUb0Vycm9yVGFza3MiLCJvbkFib3J0IiwidGFza3MiLCJjYW5jZWxBbGwiLCJnZXRUYXNrcyIsImZvcmtRdWV1ZSIsInNldENvbnRleHQiLCJ0b1Byb21pc2UiLCJuZXdUYXNrIiwiZWZmZWN0U2V0dGxlZCIsInNhZ2FNb25pdG9yIiwiZWZmZWN0UmVqZWN0ZWQiLCJlZmZlY3RSZXNvbHZlZCIsImVmZmVjdFRyaWdnZXJlZCIsImVmZmVjdENhbmNlbGxlZCIsInJ1blNhZ2EiLCJzYWdhIiwiX3JlZiRjaGFubmVsIiwiX3JlZiRjb250ZXh0IiwiZWZmZWN0TWlkZGxld2FyZXMiLCJfcmVmJG9uRXJyb3IiLCJyb290U2FnYVN0YXJ0ZWQiLCJhY3Rpb25EaXNwYXRjaGVkIiwicnVuRWZmZWN0IiwiZWZmIiwiX3RlbXAiLCJib3VuZFJ1blNhZ2EiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJzYWdhTWlkZGxld2FyZSIsInJ1biIsInFFbmQiLCJzYWZlTmFtZSIsImZzbUl0ZXJhdG9yIiwiZnNtIiwic3RhcnRTdGF0ZSIsInN0YXRlVXBkYXRlciIsImVycm9yU3RhdGUiLCJ0YWtlRXZlcnkiLCJ3b3JrZXIiLCJ5VGFrZSIsInNldEFjdGlvbiIsInExIiwicTIiLCJ0YWtlTGF0ZXN0IiwieUZvcmsiLCJ5Q2FuY2VsIiwic2V0VGFzayIsInEzIiwidGFrZUV2ZXJ5JDEiLCJ0YWtlTGF0ZXN0JDEiLCJfbGVuMiIsIl9rZXkyIiwidGhpbmciLCJzdHIiLCJraW5kT2ZUZXN0IiwidHlwZU9mVGVzdCIsImlzVW5kZWZpbmVkIiwiaXNBcnJheUJ1ZmZlciIsImlzRnVuY3Rpb24iLCJpc051bWJlciIsImlzT2JqZWN0IiwidG9TdHJpbmdUYWciLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0ZpbGVMaXN0IiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJhbGxPd25LZXlzIiwiZmluZEtleSIsIl9nbG9iYWwiLCJnbG9iYWwiLCJpc0NvbnRleHREZWZpbmVkIiwiaXNUeXBlZEFycmF5IiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJpc0hUTUxGb3JtIiwiaXNSZWdFeHAiLCJyZWR1Y2VEZXNjcmlwdG9ycyIsImRlc2NyaXB0b3JzIiwicmVkdWNlZERlc2NyaXB0b3JzIiwiQUxQSEEiLCJESUdJVCIsIkFMUEhBQkVUIiwiQUxQSEFfRElHSVQiLCJpc0J1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpc0Jvb2xlYW4iLCJpc1N0cmVhbSIsInBpcGUiLCJtZXJnZSIsImNhc2VsZXNzIiwiYXNzaWduVmFsdWUiLCJ0YXJnZXRLZXkiLCJzdHJpcEJPTSIsImluaGVyaXRzIiwic3VwZXJDb25zdHJ1Y3RvciIsInRvRmxhdE9iamVjdCIsInNvdXJjZU9iaiIsImRlc3RPYmoiLCJwcm9wRmlsdGVyIiwibWVyZ2VkIiwia2luZE9mIiwiZW5kc1dpdGgiLCJzZWFyY2hTdHJpbmciLCJsYXN0SW5kZXgiLCJmb3JFYWNoRW50cnkiLCJwYWlyIiwibWF0Y2hBbGwiLCJyZWdFeHAiLCJtYXRjaGVzIiwiaGFzT3duUHJvcCIsImZyZWV6ZU1ldGhvZHMiLCJ0b09iamVjdFNldCIsImFycmF5T3JTdHJpbmciLCJkZWxpbWl0ZXIiLCJkZWZpbmUiLCJ0b0NhbWVsQ2FzZSIsInAxIiwicDIiLCJ0b0Zpbml0ZU51bWJlciIsImlzRmluaXRlIiwiZ2VuZXJhdGVTdHJpbmciLCJhbHBoYWJldCIsImlzU3BlY0NvbXBsaWFudEZvcm0iLCJhcHBlbmQiLCJ0b0pTT05PYmplY3QiLCJ2aXNpdCIsInJlZHVjZWRWYWx1ZSIsIkF4aW9zRXJyb3IiLCJyZXF1ZXN0IiwidXRpbHMiLCJjb2x1bW5OdW1iZXIiLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJjYXVzZSIsImlzVmlzaXRhYmxlIiwicmVtb3ZlQnJhY2tldHMiLCJyZW5kZXJLZXkiLCJkb3RzIiwidG9rZW4iLCJwcmVkaWNhdGVzIiwiZm9ybURhdGEiLCJtZXRhVG9rZW5zIiwiaW5kZXhlcyIsIm9wdGlvbiIsInZpc2l0b3IiLCJkZWZhdWx0VmlzaXRvciIsInVzZUJsb2IiLCJCbG9iIiwiY29udmVydFZhbHVlIiwiQnVmZmVyIiwiaXNGbGF0QXJyYXkiLCJleHBvc2VkSGVscGVycyIsImJ1aWxkIiwiZW5jb2RlIiwiY2hhck1hcCIsIkF4aW9zVVJMU2VhcmNoUGFyYW1zIiwicGFyYW1zIiwiX3BhaXJzIiwiZW5jb2RlciIsIl9lbmNvZGUiLCJidWlsZFVSTCIsInNlcmlhbGl6ZUZuIiwic2VyaWFsaXplIiwic2VyaWFsaXplZFBhcmFtcyIsImhhc2htYXJrSW5kZXgiLCJoYW5kbGVycyIsInN5bmNocm9ub3VzIiwicnVuV2hlbiIsImVqZWN0Iiwic2lsZW50SlNPTlBhcnNpbmciLCJmb3JjZWRKU09OUGFyc2luZyIsImNsYXJpZnlUaW1lb3V0RXJyb3IiLCJpc0Jyb3dzZXIiLCJjbGFzc2VzIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJwcm9kdWN0IiwiaXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYiLCJXb3JrZXJHbG9iYWxTY29wZSIsInByb3RvY29scyIsImJ1aWxkUGF0aCIsImlzTnVtZXJpY0tleSIsImlzTGFzdCIsImFycmF5VG9PYmplY3QiLCJlbnRyaWVzIiwicGFyc2VQcm9wUGF0aCIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwiZGVmYXVsdHMiLCJ0cmFuc2l0aW9uYWwiLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVxdWVzdCIsImhlYWRlcnMiLCJjb250ZW50VHlwZSIsImdldENvbnRlbnRUeXBlIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwic2V0Q29udGVudFR5cGUiLCJoZWxwZXJzIiwidG9VUkxFbmNvZGVkRm9ybSIsImZvcm1TZXJpYWxpemVyIiwiX0Zvcm1EYXRhIiwicmF3VmFsdWUiLCJwYXJzZXIiLCJzdHJpbmdpZnlTYWZlbHkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsIkpTT05SZXF1ZXN0ZWQiLCJyZXNwb25zZVR5cGUiLCJzdHJpY3RKU09OUGFyc2luZyIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwiaWdub3JlRHVwbGljYXRlT2YiLCIkaW50ZXJuYWxzIiwibm9ybWFsaXplSGVhZGVyIiwiaGVhZGVyIiwibm9ybWFsaXplVmFsdWUiLCJtYXRjaEhlYWRlclZhbHVlIiwiaXNIZWFkZXJOYW1lRmlsdGVyIiwiQXhpb3NIZWFkZXJzIiwidmFsdWVPclJld3JpdGUiLCJyZXdyaXRlIiwic2V0SGVhZGVyIiwiX3ZhbHVlIiwiX2hlYWRlciIsIl9yZXdyaXRlIiwibEhlYWRlciIsInNldEhlYWRlcnMiLCJyYXdIZWFkZXJzIiwicGFyc2VkIiwibGluZSIsInBhcnNlSGVhZGVycyIsInRva2VucyIsInRva2Vuc1JFIiwicGFyc2VUb2tlbnMiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwibm9ybWFsaXplIiwiZm9ybWF0Iiwibm9ybWFsaXplZCIsImZvcm1hdEhlYWRlciIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJzdGF0aWMiLCJmaXJzdCIsImNvbXB1dGVkIiwiYWNjZXNzb3JzIiwiZGVmaW5lQWNjZXNzb3IiLCJhY2Nlc3Nvck5hbWUiLCJtZXRob2ROYW1lIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiYnVpbGRBY2Nlc3NvcnMiLCJhY2Nlc3NvciIsInRyYW5zZm9ybURhdGEiLCJmbnMiLCJpc0NhbmNlbCIsIl9fQ0FOQ0VMX18iLCJDYW5jZWxlZEVycm9yIiwiZXhwaXJlcyIsInRvR01UU3RyaW5nIiwiYnVpbGRGdWxsUGF0aCIsImJhc2VVUkwiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImNvbWJpbmVVUkxzIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwib3JpZ2luVVJMIiwicmVzb2x2ZVVSTCIsInBvcnQiLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJwcm9ncmVzc0V2ZW50UmVkdWNlciIsImlzRG93bmxvYWRTdHJlYW0iLCJieXRlc05vdGlmaWVkIiwiX3NwZWVkb21ldGVyIiwic2FtcGxlc0NvdW50IiwiYnl0ZXMiLCJ0aW1lc3RhbXBzIiwiZmlyc3RTYW1wbGVUUyIsImNodW5rTGVuZ3RoIiwic3RhcnRlZEF0IiwiYnl0ZXNDb3VudCIsInBhc3NlZCIsImxvYWRlZCIsInRvdGFsIiwibGVuZ3RoQ29tcHV0YWJsZSIsInByb2dyZXNzQnl0ZXMiLCJyYXRlIiwicHJvZ3Jlc3MiLCJlc3RpbWF0ZWQiLCJYTUxIdHRwUmVxdWVzdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJvbkNhbmNlbGVkIiwiY2FuY2VsVG9rZW4iLCJ1c2VybmFtZSIsImJ0b2EiLCJmdWxsUGF0aCIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldHRsZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVVSTCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjb29raWVzIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJwYXJzZVByb3RvY29sIiwic2VuZCIsImtub3duQWRhcHRlcnMiLCJodHRwIiwieGhyIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJkaXNwYXRjaFJlcXVlc3QiLCJhZGFwdGVycyIsIm5hbWVPckFkYXB0ZXIiLCJoZWFkZXJzVG9PYmplY3QiLCJtZXJnZUNvbmZpZyIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwidmFsdWVGcm9tQ29uZmlnMiIsImRlZmF1bHRUb0NvbmZpZzIiLCJtZXJnZURpcmVjdEtleXMiLCJtZXJnZU1hcCIsInRpbWVvdXRNZXNzYWdlIiwiZGVjb21wcmVzcyIsImJlZm9yZVJlZGlyZWN0IiwidHJhbnNwb3J0IiwiaHR0cEFnZW50IiwiaHR0cHNBZ2VudCIsInNvY2tldFBhdGgiLCJyZXNwb25zZUVuY29kaW5nIiwiY29uZmlnVmFsdWUiLCJ2YWxpZGF0b3JzIiwiZGVwcmVjYXRlZFdhcm5pbmdzIiwidmFsaWRhdG9yIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwiYXNzZXJ0T3B0aW9ucyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIkF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJpbnRlcmNlcHRvcnMiLCJjb25maWdPclVybCIsImNvbnRleHRIZWFkZXJzIiwiYm9vbGVhbiIsImZ1bmN0aW9uIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImdldFVyaSIsImdlbmVyYXRlSFRUUE1ldGhvZCIsImlzRm9ybSIsIkNhbmNlbFRva2VuIiwiZXhlY3V0b3IiLCJfbGlzdGVuZXJzIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIkh0dHBTdGF0dXNDb2RlIiwiQ29udGludWUiLCJTd2l0Y2hpbmdQcm90b2NvbHMiLCJQcm9jZXNzaW5nIiwiRWFybHlIaW50cyIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJWRVJTSU9OIiwidG9Gb3JtRGF0YSIsIkNhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwiZm9ybVRvSlNPTiIsImFwaUhvc3QiLCJvcGVuTWV0ZW9BcGlJbnN0YW5jZSIsInRpbWV6b25lIiwidGltZWZvcm1hdCIsIm9wZW5NZXRlb0FwaSIsImdldEhvdXJseVdlYXRoZXIiLCJob3VybHkiLCJmb3JlY2FzdF9kYXlzIiwiZ2V0RGFpbHlXZWF0aGVyIiwiZGFpbHkiLCJzZWFyY2hDaXR5QnlOYW1lIiwiY2l0eSIsIm9wZW5XZWF0aGVyQXBpSW5zdGFuY2UiLCJhcHBpZCIsInVuaXRzIiwib3BlbldlYXRoZXJBcGkiLCJnZXRUb2RheVdlYXRoZXJCeUNpdHlOYW1lIiwiZ2V0VG9kYXlXZWF0aGVyQnlDb29yZHMiLCJ0b2RheVdlYXRoZXJTbGljZSIsIndlYXRoZXIiLCJsb2FkaW5nU3RhdHVzIiwiSURMRSIsImZldGNoVG9kYXlXZWF0aGVyIiwic2V0VG9kYXlXZWF0aGVyIiwic2V0VG9kYXlMb2FkaW5nU3RhdHVzIiwiZmV0Y2hUb2RheVdlYXRoZXJXb3JrZXIiLCJMT0FESU5HIiwiRVJST1IiLCJ0b2RheVdlYXRoZXJXYXRjaGVyIiwiaG91cmx5V2VhdGhlclNsaWNlIiwiZmV0Y2hIb3VybHlXZWF0aGVyIiwic2V0SG91cmx5V2VhdGhlciIsInNldEhvdXJseUxvYWRpbmdTdGF0dXMiLCJmZXRjaEhvdXJseVdlYXRoZXJXb3JrZXIiLCJob3VybHlXZWF0aGVyV2F0Y2hlciIsImRhaWx5V2VhdGhlclNsaWNlIiwiZmV0Y2hEYWlseVdlYXRoZXIiLCJzZXREYWlseVdlYXRoZXIiLCJzZXREYWlseUxvYWRpbmdTdGF0dXMiLCJmZXRjaERhaWx5V2VhdGhlcldvcmtlciIsImRhaWx5V2VhdGhlcldhdGNoZXIiLCJjaXR5U2xpY2UiLCJjdXJyZW50Q2l0eSIsImNpdHlTZWFyY2hSZXN1bHQiLCJzZWFyY2hDaXRpZXNMb2FkaW5nU3RhdHVzIiwic2V0Q3VycmVudENpdHkiLCJzZXRTZWFyY2hDaXRpZXNMb2FkaW5nU3RhdHVzIiwic2V0Q2l0aWVzU2VhcmNoUmVzdWx0IiwiZmV0Y2hDaXR5QnlOYW1lIiwiZmV0Y2hDaXR5QnlOYW1lV29ya2VyIiwiY2l0eVdhdGNoZXIiLCJsb2NhdGlvblNsaWNlIiwiYmFzZVJlZHVjZXIiLCJnZXRTdG9yZWRTdGF0ZSIsIl9wZXJzaXN0b2lkIiwiX3B1cmdlIiwiX3BhdXNlZCIsImNvbmRpdGlvbmFsVXBkYXRlIiwiZm9yZWNhc3RXZWF0aGVyU2xpY2UiLCJmb3JlY2FzdFdlYXRoZXJUeXBlIiwic2V0Rm9yZWNhc3RXZWF0aGVyVHlwZSIsInRvZGF5V2VhdGhlciIsImhvdXJseVdlYXRoZXIiLCJkYWlseVdlYXRoZXIiLCJmb3JlY2FzdFdlYXRoZXIiLCJwZXJzaXN0Q29uZmlnIiwicGVyc2lzdGVkUmVkdWNlciIsIl9vYmplY3RTcHJlYWQiLCJkZXNlcmlhbGl6ZSIsInN0b3JhZ2VLZXkiLCJrZXlQcmVmaXgiLCJzZXJpYWxpemVkIiwicmF3U3RhdGUiLCJyZWR1Y2VSaWdodCIsInN1YlN0YXRlIiwidHJhbnNmb3JtZXIiLCJyZWh5ZHJhdGVkIiwicmVzdFN0YXRlIiwic291cmNlU3ltYm9sS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9zZWFsZWQiLCJfcmVoeWRyYXRlIiwicmVoeWRyYXRlIiwidGhyb3R0bGUiLCJ3cml0ZUZhaWxIYW5kbGVyIiwibGFzdFN0YXRlIiwic3RhZ2VkU3RhdGUiLCJrZXlzVG9Qcm9jZXNzIiwidGltZUl0ZXJhdG9yIiwid3JpdGVQcm9taXNlIiwicHJvY2Vzc05leHRLZXkiLCJjbGVhckludGVydmFsIiwiZW5kU3RhdGUiLCJvbldyaXRlRmFpbCIsInBhc3NXaGl0ZWxpc3RCbGFja2xpc3QiLCJzZXRJbnRlcnZhbCIsImNyZWF0ZVBlcnNpc3RvaWQiLCJyZWdpc3RlciIsInJlc3RvcmVkU3RhdGUiLCJtaWdyYXRlIiwibWlncmF0ZWRTdGF0ZSIsIm1pZ3JhdGVFcnIiLCJwdXJnZVN0b3JlZFN0YXRlIiwiX25ld1N0YXRlIiwiY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlIiwibWlkZGxld2FyZUFycmF5IiwiaW1tdXRhYmxlQ2hlY2siLCJzZXJpYWxpemFibGVDaGVjayIsImdldERlZmF1bHRNaWRkbGV3YXJlIiwiZGV2VG9vbHMiLCJfZyIsIl9oIiwiZW5oYW5jZXJzIiwiYmFzZVByb3RvIiwiZmluYWxNaWRkbGV3YXJlIiwibWlkZGxld2FyZUVuaGFuY2VyIiwiZmluYWxDb21wb3NlIiwidHJhY2UiLCJzdG9yZUVuaGFuY2VycyIsImNvbmZpZ3VyZVN0b3JlIiwiaWdub3JlZEFjdGlvbnMiLCJ0ZW1wbGF0ZU9iamVjdF8yIiwidGVtcGxhdGVPYmplY3RfMyIsImJvb3N0cmFwcGVkQ2IiLCJfcFN0b3JlIiwicmVoeWRyYXRlQWN0aW9uIiwicHVyZ2UiLCJwdXJnZVJlc3VsdCIsImZsdXNoUmVzdWx0IiwicGF1c2UiLCJwZXJzaXN0U3RvcmUiLCJzZWxlY3RTZWFyY2hDaXRpZXNMb2FkaW5nU3RhdHVzIiwic2VsZWN0Q2l0eVNlYXJjaFJlc3VsdCIsInNlbGVjdERhaWx5V2VhdGhlciIsInNlbGVjdERhaWx5V2VhdGhlckxvYWRpbmdTdGF0dXMiLCJzZWxlY3RGb3JlY2FzdFdlYXRoZXJUeXBlIiwic2VsZWN0SG91cmx5V2VhdGhlciIsInNlbGVjdEhvdXJseVdlYXRoZXJMb2FkaW5nU3RhdHVzIiwic2VsZWN0TG9jYXRpb24iLCJzZWxlY3RUb2RheVdlYXRoZXIiLCJzZWxlY3RUb2RheVdlYXRoZXJMb2FkaW5nU3RhdHVzIiwiQ2FsZW5kYXJXcmFwcGVyIiwiQ2FsZW5kYXJFdmVudHNXcmFwcGVyIiwiZ2FwcyIsIkNhbGVuZGFyIiwiaXNBdXRoIiwic2V0SXNBdXRoIiwiZXZlbnRzIiwic2V0RXZlbnRzIiwiaGFuZGxlQXV0aCIsInNpZ25JbiIsImhhbmRsZVNpZ25PdXQiLCJ1c2VDYWxlbmRhciIsIkNhbGVuZGFyRXZlbnQiLCJnZXRUaW1lTG9jYWxlZFN0cmluZ0RhdGUiLCJ0b0xvY2FsZVN0cmluZyIsImdldERhdGVMb2NhbGVkU3RyaW5nRGF0ZSIsImdldEhITU1Mb2NhbGVkU3RyaW5nRGF0ZSIsIkNhbGVuZGFyRXZlbnRXcmFwcGVyIiwiYmx1ZSIsInN0YXJ0RGF0ZSIsImRhdGVUaW1lIiwiZW5kRGF0ZSIsInN1bW1hcnkiLCJDbG9ja1RleHQiLCJicmVha3BvaW50cyIsInhsIiwiQ2xvY2tXcmFwcGVyIiwiQ2xvY2siLCJzZXREYXRlIiwiaW50ZXJ2YWxSZWYiLCJoYW5kbGVJbnRlcnZhbFRpY2siLCJoYW5kbGVDbGVhckludGVydmFsIiwidXNlQ3VycmVudERhdGUiLCJFcnJvckJvdW5kYXJ5IiwiZXJyb3JJbmZvIiwiRm9yZWNhc3REYWlseVdlYXRoZXJUZXh0IiwiRm9yZWNhc3REYWlseVdlYXRoZXIiLCJkYWlseVdlYXRoZXJMb2FkaW5nU3RhdHVzIiwic2VsZWN0ZWRMb2NhdGlvbiIsIlNwaW5uZXIiLCJMQVJHRSIsIndlYXRoZXJDb2RlcyIsIndlYXRoZXJjb2RlIiwidGVtcGVyYXR1cmVNYXgiLCJ0ZW1wZXJhdHVyZV8ybV9tYXgiLCJ0ZW1wZXJhdHVyZU1pbiIsInRlbXBlcmF0dXJlXzJtX21pbiIsIndlYXRoZXJDb2RlIiwiZGF0ZU9mRGF5T2ZXZWVrIiwiRm9yZWNhc3RXZWF0aGVySXRlbSIsInRpbWVzdGFtcCIsImFsdCIsInRpdGxlIiwiRm9yZWNhc3RIb3VybHlXZWF0aGVyVGl0bGUiLCJGb3JlY2FzdEhvdXJseVdlYXRoZXJUZXh0IiwiRm9yZWNhc3RIb3VybHlXZWF0aGVyIiwiaG91cmx5V2VhdGhlckxvYWRpbmdTdGF0dXMiLCJ1bml4dGltZSIsInRlbXBlcmF0dXJlIiwidGVtcGVyYXR1cmVfMm0iLCJob3VybHlEYXRlIiwiZ2V0SG91cnMiLCJGb3JlY2FzdFdlYXRoZXJXcmFwcGVyIiwiRm9yZWNhc3RXZWF0aGVyIiwiRm9yZWNhc3RXZWF0aGVySXRlbVdyYXBwZXIiLCJGb3JlY2FzdFdlYXRoZXJJdGVtVGV4dCIsIkZvcmVjYXN0V2VhdGhlckl0ZW1JbWFnZUNvbnRhaW5lciIsIkZvcmVjYXN0V2VhdGhlclN3aXRjaFdyYXBwZXIiLCJGb3JlY2FzdFdlYXRoZXJTd2l0Y2giLCJoYW5kbGVTd2l0Y2hGb3JlY2FzdFdlYXRoZXJUeXBlIiwiTGF5b3V0IiwiQ29udGVudFdyYXBwZXIiLCJ0cmFuc3BhcmVudFdoaXRlIiwiYmx1ciIsIldlYXRoZXJXcmFwcGVyIiwiUm9vdCIsIlNlYXJjaENpdHkiLCJUb2RheVdlYXRoZXIiLCJTZWFyY2hDaXR5V3JhcHBlciIsIlNlYXJjaElucHV0IiwiaW5wdXRWYWx1ZSIsInNldElucHV0VmFsdWUiLCJvbkNoYW5nZSIsIlNlYXJjaENpdHlMaXN0Iiwib25DbGVhcklucHV0VmFsdWUiLCJTZWFyY2hDaXR5TGlzdFdyYXBwZXIiLCJTZWFyY2hDaXR5TGlzdEl0ZW1XcmFwcGVyIiwic2VhcmNoQ2l0eUxvYWRpbmdTdGF0dXMiLCJzZWFyY2hDaXR5UmVzdWx0IiwiaGFuZGxlU2VsZWN0Q2l0eSIsImNpdHlSZXN1bHQiLCJjb3VudHJ5IiwiY291bnRyeUNvZGUiLCJjb3VudHJ5X2NvZGUiLCJTcGlubmVySW1hZ2UiLCJTcGlubmVyV3JhcHBlciIsInNwaW5uZXIiLCJUb2RheVdlYXRoZXJXcmFwcGVyIiwiVG9kYXlXZWF0aGVyVGV4dCIsIlRvZGF5V2VhdGhlckltYWdlIiwidG9kYXlXZWF0aGVyTG9hZGluZ1N0YXR1cyIsInJlcGxhY2VDb250ZW50IiwidXNlVG9kYXlXZWF0aGVyIiwibWFpbiIsImZlZWxzTGlrZSIsImZlZWxzX2xpa2UiLCJ0ZW1wIiwidG9GaXhlZCIsIkdsb2JhbFN0eWxlcyIsImNvbnRhaW5lciIsInNlcnZlclN0YXRlIiwiY29udGV4dFZhbHVlIiwicGFyZW50U3ViIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsIm9uU3RhdGVDaGFuZ2UiLCJ0cnlTdWJzY3JpYmUiLCJwcmV2IiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwibm90aWZ5TmVzdGVkU3VicyIsInRyeVVuc3Vic2NyaWJlIiwiZ2V0TGlzdGVuZXJzIiwiQ29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=